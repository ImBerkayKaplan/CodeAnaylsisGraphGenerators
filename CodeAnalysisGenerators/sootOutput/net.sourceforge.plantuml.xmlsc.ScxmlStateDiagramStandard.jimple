public class net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard extends java.lang.Object
{
    private final net.sourceforge.plantuml.statediagram.StateDiagram diagram;
    private final org.w3c.dom.Document document;

    public void <init>(net.sourceforge.plantuml.statediagram.StateDiagram) throws javax.xml.parsers.ParserConfigurationException
    {
        net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard r0;
        net.sourceforge.plantuml.statediagram.StateDiagram r1;
        javax.xml.parsers.DocumentBuilder r2;
        org.w3c.dom.Document $r3, $r4, $r5, $r6, $r9;
        org.w3c.dom.Element r7, $r15;
        java.lang.String r8;
        java.util.Collection $r11;
        java.util.Iterator r12;
        java.lang.Object $r13;
        net.sourceforge.plantuml.cucadiagram.IEntity r14;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard;

        r1 := @parameter0: net.sourceforge.plantuml.statediagram.StateDiagram;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: net.sourceforge.plantuml.statediagram.StateDiagram diagram> = r1;

        r2 = staticinvoke <net.sourceforge.plantuml.xml.XmlFactories: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r3 = virtualinvoke r2.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document> = $r3;

        $r4 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document>;

        interfaceinvoke $r4.<org.w3c.dom.Document: void setXmlVersion(java.lang.String)>("1.0");

        $r5 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document>;

        interfaceinvoke $r5.<org.w3c.dom.Document: void setXmlStandalone(boolean)>(1);

        $r6 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document>;

        r7 = interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("scxml");

        interfaceinvoke r7.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmlns", "http://www.w3.org/2005/07/scxml");

        interfaceinvoke r7.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("version", "1.0");

        r8 = specialinvoke r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: java.lang.String getInitial()>();

        if r8 == null goto label1;

        interfaceinvoke r7.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("initial", r8);

     label1:
        $r9 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document>;

        interfaceinvoke $r9.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r7);

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.statediagram.StateDiagram: java.util.Collection getLeafsvalues()>();

        r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r13;

        $r15 = specialinvoke r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Element createState(net.sourceforge.plantuml.cucadiagram.IEntity)>(r14);

        interfaceinvoke r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r15);

        goto label2;

     label3:
        return;
    }

    private java.lang.String getInitial()
    {
        net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard r0;
        net.sourceforge.plantuml.statediagram.StateDiagram $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.cucadiagram.IEntity r5;
        net.sourceforge.plantuml.cucadiagram.LeafType $r6, $r7;
        java.lang.String $r8;

        r0 := @this: net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard;

        $r1 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: net.sourceforge.plantuml.statediagram.StateDiagram diagram>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.statediagram.StateDiagram: java.util.Collection getLeafsvalues()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r4;

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r7 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CIRCLE_START>;

        if $r6 != $r7 goto label2;

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: java.lang.String getId(net.sourceforge.plantuml.cucadiagram.IEntity)>(r5);

        return $r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    private org.w3c.dom.Element createState(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard r0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Element r2;
        net.sourceforge.plantuml.cucadiagram.IEntity r3, $r10;
        java.lang.String $r4;
        net.sourceforge.plantuml.statediagram.StateDiagram $r5;
        java.util.List $r6;
        java.util.Iterator r7;
        boolean $z0;
        java.lang.Object $r8;
        net.sourceforge.plantuml.cucadiagram.Link r9;

        r0 := @this: net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard;

        r3 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r1 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document>;

        r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("state");

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: java.lang.String getId(net.sourceforge.plantuml.cucadiagram.IEntity)>(r3);

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("id", $r4);

        $r5 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: net.sourceforge.plantuml.statediagram.StateDiagram diagram>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.statediagram.StateDiagram: java.util.List getLinks()>();

        r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.cucadiagram.Link) $r8;

        $r10 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity1()>();

        if $r10 != r3 goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: void addLink(org.w3c.dom.Element,net.sourceforge.plantuml.cucadiagram.Link)>(r2, r9);

     label2:
        goto label1;

     label3:
        return r2;
    }

    private void addLink(org.w3c.dom.Element, net.sourceforge.plantuml.cucadiagram.Link)
    {
        net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard r0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Element r2, r7;
        net.sourceforge.plantuml.cucadiagram.Link r3;
        net.sourceforge.plantuml.cucadiagram.Display r4;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.IEntity $r5;
        java.lang.String $r6, r10;
        java.lang.CharSequence $r9;

        r0 := @this: net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard;

        r7 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.Link;

        $r1 = r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document>;

        r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("transition");

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: boolean isNull(net.sourceforge.plantuml.cucadiagram.Display)>(r4);

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        r10 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>();

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("event", r10);

     label1:
        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity2()>();

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: java.lang.String getId(net.sourceforge.plantuml.cucadiagram.IEntity)>($r5);

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("target", $r6);

        interfaceinvoke r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r2);

        return;
    }

    private java.lang.String getId(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.cucadiagram.IEntity r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        java.lang.CharSequence $r2;
        net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard r3;
        java.lang.String r4, r5;

        r3 := @this: net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        r4 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\*", "");

        return r5;
    }

    public void transformerXml(java.io.OutputStream) throws javax.xml.transform.TransformerException, javax.xml.parsers.ParserConfigurationException
    {
        javax.xml.transform.dom.DOMSource $r0;
        net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard r1;
        org.w3c.dom.Document $r2;
        javax.xml.transform.stream.StreamResult $r4;
        java.io.OutputStream r5;
        javax.xml.transform.Transformer r7;
        java.nio.charset.Charset $r8;
        java.lang.String $r9;

        r1 := @this: net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard;

        r5 := @parameter0: java.io.OutputStream;

        $r0 = new javax.xml.transform.dom.DOMSource;

        $r2 = r1.<net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard: org.w3c.dom.Document document>;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r2);

        $r4 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r4.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>(r5);

        r7 = staticinvoke <net.sourceforge.plantuml.xml.XmlFactories: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke r7.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r7.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", $r9);

        virtualinvoke r7.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r0, $r4);

        return;
    }
}
