public final class ext.plantuml.com.google.zxing.qrcode.encoder.MaskUtil extends java.lang.Object
{

    private void <init>()
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.MaskUtil r0;

        r0 := @this: ext.plantuml.com.google.zxing.qrcode.encoder.MaskUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int applyMaskPenaltyRule1(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        int $i0, $i1, $i2;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $i0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MaskUtil: int applyMaskPenaltyRule1Internal(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix,boolean)>(r0, 1);

        $i1 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MaskUtil: int applyMaskPenaltyRule1Internal(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix,boolean)>(r0, 0);

        $i2 = $i0 + $i1;

        return $i2;
    }

    public static int applyMaskPenaltyRule2(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        byte[][] r1;
        int i0, i1, $i2, $i3, $i5, $i7, $i9, $i10, i12, i13, i14;
        byte[] $r2, $r3, $r4, $r5;
        byte b4, $b6, $b8, $b11;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        i12 = 0;

        r1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte[][] getArray()>();

        i0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        i1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        i13 = 0;

     label1:
        $i2 = i1 - 1;

        if i13 >= $i2 goto label5;

        i14 = 0;

     label2:
        $i3 = i0 - 1;

        if i14 >= $i3 goto label4;

        $r2 = r1[i13];

        b4 = $r2[i14];

        $r3 = r1[i13];

        $i5 = i14 + 1;

        $b6 = $r3[$i5];

        if b4 != $b6 goto label3;

        $i7 = i13 + 1;

        $r4 = r1[$i7];

        $b8 = $r4[i14];

        if b4 != $b8 goto label3;

        $i9 = i13 + 1;

        $r5 = r1[$i9];

        $i10 = i14 + 1;

        $b11 = $r5[$i10];

        if b4 != $b11 goto label3;

        i12 = i12 + 3;

     label3:
        i14 = i14 + 1;

        goto label2;

     label4:
        i13 = i13 + 1;

        goto label1;

     label5:
        return i12;
    }

    public static int applyMaskPenaltyRule3(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        byte[][] r1;
        int i0, i1, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i34, $i36, $i38, $i40, $i42, $i44, $i46, $i47, $i49, $i51, $i53, $i55, $i57, $i59, $i61, i63, i64, i65, $i66, $i67, $i68;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        byte $b3, $b5, $b7, $b9, $b11, $b13, $b15, $b18, $b20, $b22, $b24, $b26, $b28, $b30, $b32, $b33, $b35, $b37, $b39, $b41, $b43, $b45, $b48, $b50, $b52, $b54, $b56, $b58, $b60, $b62;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        i63 = 0;

        r1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte[][] getArray()>();

        i0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        i1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        i64 = 0;

     label01:
        if i64 >= i1 goto label10;

        i65 = 0;

     label02:
        if i65 >= i0 goto label09;

        $i2 = i65 + 6;

        if $i2 >= i0 goto label05;

        $r17 = r1[i64];

        $b33 = $r17[i65];

        if $b33 != 1 goto label05;

        $r18 = r1[i64];

        $i34 = i65 + 1;

        $b35 = $r18[$i34];

        if $b35 != 0 goto label05;

        $r19 = r1[i64];

        $i36 = i65 + 2;

        $b37 = $r19[$i36];

        if $b37 != 1 goto label05;

        $r20 = r1[i64];

        $i38 = i65 + 3;

        $b39 = $r20[$i38];

        if $b39 != 1 goto label05;

        $r21 = r1[i64];

        $i40 = i65 + 4;

        $b41 = $r21[$i40];

        if $b41 != 1 goto label05;

        $r22 = r1[i64];

        $i42 = i65 + 5;

        $b43 = $r22[$i42];

        if $b43 != 0 goto label05;

        $r23 = r1[i64];

        $i44 = i65 + 6;

        $b45 = $r23[$i44];

        if $b45 != 1 goto label05;

        $i46 = i65 + 10;

        if $i46 >= i0 goto label03;

        $r28 = r1[i64];

        $i55 = i65 + 7;

        $b56 = $r28[$i55];

        if $b56 != 0 goto label03;

        $r29 = r1[i64];

        $i57 = i65 + 8;

        $b58 = $r29[$i57];

        if $b58 != 0 goto label03;

        $r30 = r1[i64];

        $i59 = i65 + 9;

        $b60 = $r30[$i59];

        if $b60 != 0 goto label03;

        $r31 = r1[i64];

        $i61 = i65 + 10;

        $b62 = $r31[$i61];

        if $b62 == 0 goto label04;

     label03:
        $i66 = i65 - 4;

        if $i66 < 0 goto label05;

        $r24 = r1[i64];

        $i47 = i65 - 1;

        $b48 = $r24[$i47];

        if $b48 != 0 goto label05;

        $r25 = r1[i64];

        $i49 = i65 - 2;

        $b50 = $r25[$i49];

        if $b50 != 0 goto label05;

        $r26 = r1[i64];

        $i51 = i65 - 3;

        $b52 = $r26[$i51];

        if $b52 != 0 goto label05;

        $r27 = r1[i64];

        $i53 = i65 - 4;

        $b54 = $r27[$i53];

        if $b54 != 0 goto label05;

     label04:
        i63 = i63 + 40;

     label05:
        $i67 = i64 + 6;

        if $i67 >= i1 goto label08;

        $r2 = r1[i64];

        $b3 = $r2[i65];

        if $b3 != 1 goto label08;

        $i4 = i64 + 1;

        $r3 = r1[$i4];

        $b5 = $r3[i65];

        if $b5 != 0 goto label08;

        $i6 = i64 + 2;

        $r4 = r1[$i6];

        $b7 = $r4[i65];

        if $b7 != 1 goto label08;

        $i8 = i64 + 3;

        $r5 = r1[$i8];

        $b9 = $r5[i65];

        if $b9 != 1 goto label08;

        $i10 = i64 + 4;

        $r6 = r1[$i10];

        $b11 = $r6[i65];

        if $b11 != 1 goto label08;

        $i12 = i64 + 5;

        $r7 = r1[$i12];

        $b13 = $r7[i65];

        if $b13 != 0 goto label08;

        $i14 = i64 + 6;

        $r8 = r1[$i14];

        $b15 = $r8[i65];

        if $b15 != 1 goto label08;

        $i16 = i64 + 10;

        if $i16 >= i1 goto label06;

        $i25 = i64 + 7;

        $r13 = r1[$i25];

        $b26 = $r13[i65];

        if $b26 != 0 goto label06;

        $i27 = i64 + 8;

        $r14 = r1[$i27];

        $b28 = $r14[i65];

        if $b28 != 0 goto label06;

        $i29 = i64 + 9;

        $r15 = r1[$i29];

        $b30 = $r15[i65];

        if $b30 != 0 goto label06;

        $i31 = i64 + 10;

        $r16 = r1[$i31];

        $b32 = $r16[i65];

        if $b32 == 0 goto label07;

     label06:
        $i68 = i64 - 4;

        if $i68 < 0 goto label08;

        $i17 = i64 - 1;

        $r9 = r1[$i17];

        $b18 = $r9[i65];

        if $b18 != 0 goto label08;

        $i19 = i64 - 2;

        $r10 = r1[$i19];

        $b20 = $r10[i65];

        if $b20 != 0 goto label08;

        $i21 = i64 - 3;

        $r11 = r1[$i21];

        $b22 = $r11[i65];

        if $b22 != 0 goto label08;

        $i23 = i64 - 4;

        $r12 = r1[$i23];

        $b24 = $r12[i65];

        if $b24 != 0 goto label08;

     label07:
        i63 = i63 + 40;

     label08:
        i65 = i65 + 1;

        goto label02;

     label09:
        i64 = i64 + 1;

        goto label01;

     label10:
        return i63;
    }

    public static int applyMaskPenaltyRule4(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        byte[][] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, i11, i12;
        double $d0, $d1, $d2, $d3, d4;
        byte[] $r2;
        byte $b8;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        i9 = 0;

        r1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte[][] getArray()>();

        i0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        i1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        i10 = 0;

     label1:
        if i10 >= i1 goto label5;

        i11 = 0;

     label2:
        if i11 >= i0 goto label4;

        $r2 = r1[i10];

        $b8 = $r2[i11];

        if $b8 != 1 goto label3;

        i9 = i9 + 1;

     label3:
        i11 = i11 + 1;

        goto label2;

     label4:
        i10 = i10 + 1;

        goto label1;

     label5:
        $i2 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i3 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        i12 = $i2 * $i3;

        $d1 = (double) i9;

        $d0 = (double) i12;

        d4 = $d1 / $d0;

        $d2 = d4 * 100.0;

        $d3 = $d2 - 50.0;

        $i4 = (int) $d3;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        $i6 = $i5 / 5;

        $i7 = $i6 * 10;

        return $i7;
    }

    public static boolean getDataMaskBit(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.QRCode: boolean isValidMaskPattern(int)>(i0);

        if $z0 != 0 goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mask pattern");

        throw $r5;

     label01:
        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            default: goto label10;
        };

     label02:
        $i16 = i1 + i2;

        i17 = $i16 & 1;

        goto label11;

     label03:
        i17 = i1 & 1;

        goto label11;

     label04:
        i17 = i2 % 3;

        goto label11;

     label05:
        $i15 = i1 + i2;

        i17 = $i15 % 3;

        goto label11;

     label06:
        $i13 = i1 >>> 1;

        $i12 = i2 / 3;

        $i14 = $i13 + $i12;

        i17 = $i14 & 1;

        goto label11;

     label07:
        i18 = i1 * i2;

        $i11 = i18 & 1;

        $i10 = i18 % 3;

        i17 = $i11 + $i10;

        goto label11;

     label08:
        i19 = i1 * i2;

        $i8 = i19 & 1;

        $i7 = i19 % 3;

        $i9 = $i8 + $i7;

        i17 = $i9 & 1;

        goto label11;

     label09:
        i20 = i1 * i2;

        $i5 = i20 % 3;

        $i3 = i1 + i2;

        $i4 = $i3 & 1;

        $i6 = $i5 + $i4;

        i17 = $i6 & 1;

        goto label11;

     label10:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mask pattern: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label11:
        if i17 != 0 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        return $z1;
    }

    private static int applyMaskPenaltyRule1Internal(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix, boolean)
    {
        boolean z0;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        int i0, i1, i3, i4, $i6, $i7, i8, i9;
        byte[][] r1;
        byte[] $r2, $r3;
        byte b5, $b10;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        z0 := @parameter1: boolean;

        i3 = 0;

        i4 = 0;

        b5 = -1;

        if z0 == 0 goto label01;

        $i6 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        goto label02;

     label01:
        $i6 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

     label02:
        i0 = $i6;

        if z0 == 0 goto label03;

        $i7 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        goto label04;

     label03:
        $i7 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

     label04:
        i1 = $i7;

        r1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte[][] getArray()>();

        i8 = 0;

     label05:
        if i8 >= i0 goto label13;

        i9 = 0;

     label06:
        if i9 >= i1 goto label12;

        if z0 == 0 goto label07;

        $r3 = r1[i8];

        $b10 = $r3[i9];

        goto label08;

     label07:
        $r2 = r1[i9];

        $b10 = $r2[i8];

     label08:
        if $b10 != b5 goto label10;

        i4 = i4 + 1;

        if i4 != 5 goto label09;

        i3 = i3 + 3;

        goto label11;

     label09:
        if i4 <= 5 goto label11;

        i3 = i3 + 1;

        goto label11;

     label10:
        i4 = 1;

        b5 = $b10;

     label11:
        i9 = i9 + 1;

        goto label06;

     label12:
        i4 = 0;

        i8 = i8 + 1;

        goto label05;

     label13:
        return i3;
    }
}
