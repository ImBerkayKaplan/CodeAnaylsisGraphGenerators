public class net.sourceforge.plantuml.activitydiagram3.ftile.Worm extends java.lang.Object implements java.lang.Iterable
{
    private final java.util.List points;
    private final net.sourceforge.plantuml.style.Style style;
    private boolean ignoreForCompression;

    public void <init>(net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.style.Style r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r2 := @parameter0: net.sourceforge.plantuml.style.Style;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points> = $r1;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style> = r2;

        return;
    }

    public boolean isPureHorizontal()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r2, $r5;
        int $i0;
        java.lang.Object $r3, $r6;
        java.awt.geom.Point2D$Double $r4, $r7;
        double $d0, $d1;
        byte $b1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 2 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.awt.geom.Point2D$Double) $r3;

        $d0 = virtualinvoke $r4.<java.awt.geom.Point2D$Double: double getY()>();

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(1);

        $r7 = (java.awt.geom.Point2D$Double) $r6;

        $d1 = virtualinvoke $r7.<java.awt.geom.Point2D$Double: double getY()>();

        $b1 = $d0 cmpl $d1;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Worm cloneEmpty()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r0, r1;
        net.sourceforge.plantuml.style.Style $r2;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>($r2);

        $z0 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean ignoreForCompression>;

        $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean ignoreForCompression> = $z0;

        return $r0;
    }

    public final void setIgnoreForCompression()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean ignoreForCompression> = 1;

        return;
    }

    public void drawInternalOneColor(net.sourceforge.plantuml.ugraphic.UPolygon, net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.graphic.HtmlColorAndStyle, double, net.sourceforge.plantuml.Direction, net.sourceforge.plantuml.ugraphic.UPolygon)
    {
        net.sourceforge.plantuml.graphic.HtmlColorAndStyle r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, r3, r48;
        java.lang.Object $r2, $r15, $r23, $r31, $r33;
        net.sourceforge.plantuml.cucadiagram.LinkStyle r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        net.sourceforge.plantuml.ugraphic.UBackground $r5, $r9;
        double d0;
        net.sourceforge.plantuml.ugraphic.UStroke $r7, $r12, $r18, $r21, $r26, $r39, r44;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r8;
        net.sourceforge.plantuml.ugraphic.UPolygon r10, r11;
        java.util.List $r13, $r14, $r22, $r30, $r32, $r46;
        int $i0, $i1, $i2, i3, $i4, $i5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r16, $r24;
        net.sourceforge.plantuml.ugraphic.UGraphic $r17, $r19, $r25, $r27, r41, r42, r43, r45, r49, r50, r52;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode $r20, $r28;
        java.lang.IllegalStateException $r29;
        java.awt.geom.Point2D$Double r34, r47;
        java.awt.geom.Line2D$Double $r35;
        net.sourceforge.plantuml.Direction r37, $r38;
        net.sourceforge.plantuml.style.Style $r40;
        java.awt.geom.Point2D r51, r53;

        r8 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r10 := @parameter0: net.sourceforge.plantuml.ugraphic.UPolygon;

        r41 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter2: net.sourceforge.plantuml.graphic.HtmlColorAndStyle;

        d0 := @parameter3: double;

        r37 := @parameter4: net.sourceforge.plantuml.Direction;

        r11 := @parameter5: net.sourceforge.plantuml.ugraphic.UPolygon;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.HtmlColorAndStyle: net.sourceforge.plantuml.ugraphic.color.HColor getArrowColor()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1);

        r3 = (net.sourceforge.plantuml.ugraphic.color.HColor) $r2;

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.HtmlColorAndStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle getStyle()>();

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.LinkStyle: boolean isInvisible()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        r42 = interfaceinvoke r41.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r3);

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r43 = interfaceinvoke r42.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.LinkStyle: boolean isNormal()>();

        if $z1 == 0 goto label03;

        $r39 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r39.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(d0);

        r44 = $r39;

        $z4 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z4 == 0 goto label02;

        $r40 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style>;

        r44 = virtualinvoke $r40.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

     label02:
        r45 = interfaceinvoke r43.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r44);

        goto label04;

     label03:
        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.cucadiagram.LinkStyle goThickness(double)>(d0);

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.LinkStyle: net.sourceforge.plantuml.ugraphic.UStroke getStroke3()>();

        r45 = interfaceinvoke r43.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

     label04:
        z5 = 0;

        i3 = 0;

     label05:
        $r46 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i4 = interfaceinvoke $r46.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        if i3 >= $i5 goto label08;

        $r30 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i3);

        r47 = (java.awt.geom.Point2D$Double) $r31;

        $r32 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i3 + 1;

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>($i2);

        r34 = (java.awt.geom.Point2D$Double) $r33;

        $r35 = new java.awt.geom.Line2D$Double;

        specialinvoke $r35.<java.awt.geom.Line2D$Double: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r47, r34);

        if z5 != 0 goto label06;

        if r37 == null goto label06;

        $r38 = staticinvoke <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction fromVector(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r47, r34);

        if $r38 != r37 goto label06;

        specialinvoke r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Line2D,net.sourceforge.plantuml.Direction)>(r45, $r35, r37);

        z5 = 1;

        goto label07;

     label06:
        specialinvoke r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Line2D,net.sourceforge.plantuml.Direction)>(r45, $r35, null);

     label07:
        i3 = i3 + 1;

        goto label05;

     label08:
        r48 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.HtmlColorAndStyle: net.sourceforge.plantuml.ugraphic.color.HColor getArrowHeadColor()>();

        if r48 != null goto label09;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>()>();

        throw $r29;

     label09:
        r49 = interfaceinvoke r45.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r48);

        $r9 = interfaceinvoke r48.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r50 = interfaceinvoke r49.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        if r10 == null goto label11;

        $r21 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r21.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r50 = interfaceinvoke r50.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

        $r22 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(0);

        r51 = (java.awt.geom.Point2D) $r23;

        $z3 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean ignoreForCompression>;

        if $z3 == 0 goto label10;

        $r28 = <net.sourceforge.plantuml.ugraphic.comp.CompressionMode: net.sourceforge.plantuml.ugraphic.comp.CompressionMode ON_X>;

        virtualinvoke r10.<net.sourceforge.plantuml.ugraphic.UPolygon: void setCompressionMode(net.sourceforge.plantuml.ugraphic.comp.CompressionMode)>($r28);

     label10:
        $r24 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r51);

        $r25 = interfaceinvoke r50.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        $r26 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r26.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>()>();

        $r27 = interfaceinvoke $r25.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r26);

        interfaceinvoke $r27.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r10);

     label11:
        if r11 == null goto label13;

        $r12 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r52 = interfaceinvoke r50.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r14 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r13 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i1);

        r53 = (java.awt.geom.Point2D) $r15;

        $z2 = r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean ignoreForCompression>;

        if $z2 == 0 goto label12;

        $r20 = <net.sourceforge.plantuml.ugraphic.comp.CompressionMode: net.sourceforge.plantuml.ugraphic.comp.CompressionMode ON_X>;

        virtualinvoke r11.<net.sourceforge.plantuml.ugraphic.UPolygon: void setCompressionMode(net.sourceforge.plantuml.ugraphic.comp.CompressionMode)>($r20);

     label12:
        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r53);

        $r17 = interfaceinvoke r52.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        $r18 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r18.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>()>();

        $r19 = interfaceinvoke $r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r11);

     label13:
        return;
    }

    private void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.Line2D, net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        java.awt.geom.Line2D r2;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.Direction r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r2 := @parameter1: java.awt.geom.Line2D;

        r3 := @parameter2: net.sourceforge.plantuml.Direction;

        $d0 = virtualinvoke r2.<java.awt.geom.Line2D: double getX1()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Line2D: double getY1()>();

        $d2 = virtualinvoke r2.<java.awt.geom.Line2D: double getX2()>();

        $d3 = virtualinvoke r2.<java.awt.geom.Line2D: double getY2()>();

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double,net.sourceforge.plantuml.Direction)>(r1, $d0, $d1, $d2, $d3, r3);

        return;
    }

    private void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double, double, net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate $r0, $r3;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        net.sourceforge.plantuml.Direction r1;
        net.sourceforge.plantuml.ugraphic.ULine $r2;
        net.sourceforge.plantuml.ugraphic.UGraphic $r4, r7, r8;
        net.sourceforge.plantuml.ugraphic.UPolygon $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r6;

        r6 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        r1 := @parameter5: net.sourceforge.plantuml.Direction;

        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d1);

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        if r1 == null goto label1;

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d6 = d2 - d0;

        $d9 = $d6 / 2.0;

        $d7 = d3 - d1;

        $d8 = $d7 / 2.0;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d9, $d8);

        $r4 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Arrows: net.sourceforge.plantuml.ugraphic.UPolygon asTo(net.sourceforge.plantuml.Direction)>(r1);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

     label1:
        $r2 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d5 = d2 - d0;

        $d4 = d3 - d1;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>($d5, $d4);

        interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

        return;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Worm move(double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r0, r1;
        net.sourceforge.plantuml.style.Style $r2;
        java.util.List $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6;
        java.awt.geom.Point2D r7;
        double $d0, d1, $d2, $d3, d4, $d5;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        d1 := @parameter0: double;

        d4 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>($r2);

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.awt.geom.Point2D) $r6;

        $d0 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + d1;

        $d3 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + d4;

        virtualinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(double,double)>($d2, $d5);

        goto label1;

     label2:
        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Worm moveFirstPoint(net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate r0;
        double d0, d1, d2, d3, d4, d5, d6, d7;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1, r2;
        net.sourceforge.plantuml.style.Style $r3;
        java.util.List $r5, $r8, $r11, $r14, $r17, $r25;
        java.lang.Object $r6, $r9, $r12, $r15, $r18;
        java.awt.geom.Point2D$Double $r7, $r10, $r13, $r16;
        java.awt.geom.Point2D $r19;
        java.lang.IllegalArgumentException $r20;
        java.lang.StringBuilder $r21, $r22, $r23;
        java.lang.String $r24;
        int i6, $i7;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UTranslate;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $b4 = d1 cmpl 0.0;

        if $b4 == 0 goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("move=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label1:
        $r1 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style>;

        specialinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>($r3);

        $r5 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (java.awt.geom.Point2D$Double) $r6;

        d2 = virtualinvoke $r7.<java.awt.geom.Point2D$Double: double getX()>();

        $r8 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.awt.geom.Point2D$Double) $r9;

        d3 = virtualinvoke $r10.<java.awt.geom.Point2D$Double: double getY()>();

        $r11 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(1);

        $r13 = (java.awt.geom.Point2D$Double) $r12;

        d4 = virtualinvoke $r13.<java.awt.geom.Point2D$Double: double getX()>();

        $r14 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(1);

        $r16 = (java.awt.geom.Point2D$Double) $r15;

        d5 = virtualinvoke $r16.<java.awt.geom.Point2D$Double: double getY()>();

        $b1 = d0 cmpl 0.0;

        if $b1 == 0 goto label2;

        $b3 = d2 cmpl d4;

        if $b3 != 0 goto label2;

        d4 = d4 + d0;

     label2:
        $b5 = d1 cmpl 0.0;

        if $b5 == 0 goto label3;

        $b2 = d3 cmpl d5;

        if $b2 != 0 goto label3;

        d5 = d5 + d1;

     label3:
        d6 = d2 + d0;

        d7 = d3 + d1;

        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(double,double)>(d6, d7);

        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(double,double)>(d4, d5);

        i6 = 2;

     label4:
        $r25 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = interfaceinvoke $r25.<java.util.List: int size()>();

        if i6 >= $i7 goto label5;

        $r17 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i6);

        $r19 = (java.awt.geom.Point2D) $r18;

        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(java.awt.geom.Point2D)>($r19);

        i6 = i6 + 1;

        goto label4;

     label5:
        return $r1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Worm moveLastPoint(net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate r0;
        double d0, d1, d2, d3, d4, d5, d6, d7;
        byte $b0, $b9, $b10, $b11, $b12, $b13;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1, r2;
        net.sourceforge.plantuml.style.Style $r3;
        java.util.List $r5, $r6, $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r29;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i14, $i15, $i16;
        java.lang.Object $r7, $r11, $r15, $r19, $r22;
        java.awt.geom.Point2D$Double $r8, $r12, $r16, $r20;
        java.awt.geom.Point2D $r23;
        java.lang.IllegalArgumentException $r24;
        java.lang.StringBuilder $r25, $r26, $r27;
        java.lang.String $r28;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UTranslate;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $b12 = d1 cmpl 0.0;

        if $b12 == 0 goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("move=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label1:
        $r1 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style>;

        specialinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>($r3);

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r5 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i2 = $i1 - 2;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2);

        $r8 = (java.awt.geom.Point2D$Double) $r7;

        d2 = virtualinvoke $r8.<java.awt.geom.Point2D$Double: double getX()>();

        $r10 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r9 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i4 = $i3 - 2;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i4);

        $r12 = (java.awt.geom.Point2D$Double) $r11;

        d3 = virtualinvoke $r12.<java.awt.geom.Point2D$Double: double getY()>();

        $r14 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r13 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i5 = interfaceinvoke $r13.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i6);

        $r16 = (java.awt.geom.Point2D$Double) $r15;

        d4 = virtualinvoke $r16.<java.awt.geom.Point2D$Double: double getX()>();

        $r18 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r17 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = interfaceinvoke $r17.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>($i8);

        $r20 = (java.awt.geom.Point2D$Double) $r19;

        d5 = virtualinvoke $r20.<java.awt.geom.Point2D$Double: double getY()>();

        $b9 = d0 cmpl 0.0;

        if $b9 == 0 goto label2;

        $b11 = d2 cmpl d4;

        if $b11 != 0 goto label2;

        d2 = d2 + d0;

     label2:
        $b13 = d1 cmpl 0.0;

        if $b13 == 0 goto label3;

        $b10 = d3 cmpl d5;

        if $b10 != 0 goto label3;

        d3 = d3 + d1;

     label3:
        d6 = d4 + d0;

        d7 = d5 + d1;

        i14 = 0;

     label4:
        $r29 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i15 = interfaceinvoke $r29.<java.util.List: int size()>();

        $i16 = $i15 - 2;

        if i14 >= $i16 goto label5;

        $r21 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i14);

        $r23 = (java.awt.geom.Point2D) $r22;

        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(java.awt.geom.Point2D)>($r23);

        i14 = i14 + 1;

        goto label4;

     label5:
        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(double,double)>(d2, d3);

        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(double,double)>(d6, d7);

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r10, $r12, $r13;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r2;
        java.util.List $r3, $r6;
        int $i0, $i1, i2;
        java.lang.String $r7, $r9, $r14;
        net.sourceforge.plantuml.Direction $r11;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i2 >= $i1 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>(i2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void addPoint(double, double)
    {
        double d0, d1, $d2, $d3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r5;
        int $i0;
        java.awt.geom.Point2D r2;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r3, $r4;
        java.awt.geom.Point2D$Double $r6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D getLast()>();

        $d2 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $b1 = $d2 cmpl d0;

        if $b1 != 0 goto label3;

        $d3 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $b2 = $d3 cmpl d1;

        if $b2 != 0 goto label3;

        return;

     label3:
        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r6 = new java.awt.geom.Point2D$Double;

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    public void addPoint(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(double,double)>($d0, $d1);

        return;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Worm translate(net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0, $r2;
        net.sourceforge.plantuml.ugraphic.UTranslate r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.activitydiagram3.ftile.Worm move(double,double)>($d0, $d1);

        return $r2;
    }

    net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection getDirection()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r2, $r4;
        int $i0;
        java.lang.Object $r3, $r6;
        java.awt.geom.Point2D $r5, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.awt.geom.Point2D) $r3;

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

        $r7 = (java.awt.geom.Point2D) $r6;

        $r8 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection getDirection(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r5, $r7);

        return $r8;
    }

    java.lang.String getDirectionsCode()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r2;
        java.util.List $r3, $r5, $r7;
        int $i0, $i1, $i2, i3;
        java.lang.String $r4, $r12;
        java.lang.Object $r6, $r9;
        java.awt.geom.Point2D $r8, $r10;
        net.sourceforge.plantuml.Direction r11;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i3 >= $i1 goto label2;

        $r5 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        $r8 = (java.awt.geom.Point2D) $r6;

        $r7 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i3 + 1;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i2);

        $r10 = (java.awt.geom.Point2D) $r9;

        r11 = staticinvoke <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction fromVector(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r8, $r10);

        $r12 = virtualinvoke r11.<net.sourceforge.plantuml.Direction: java.lang.String getShortCode()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private java.util.List getPatternAt(int)
    {
        net.sourceforge.plantuml.Direction[] $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r1;
        int i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.Direction $r2, $r3, $r4, $r5;
        java.util.List $r6;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i0 := @parameter0: int;

        $r0 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>(i0);

        $r0[0] = $r2;

        $i1 = i0 + 1;

        $r3 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>($i1);

        $r0[1] = $r3;

        $i2 = i0 + 2;

        $r4 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>($i2);

        $r0[2] = $r4;

        $i3 = i0 + 3;

        $r5 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>($i3);

        $r0[3] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r6;
    }

    private boolean isForwardAndBackwardAt(int)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        int i0, $i1;
        net.sourceforge.plantuml.Direction $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>(i0);

        $i1 = i0 + 1;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>($i1);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction getInv()>();

        if $r1 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private net.sourceforge.plantuml.Direction getDirectionAtPoint(int)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        int i0, $i1;
        java.util.List $r1, $r3;
        java.lang.Object $r2, $r5;
        java.awt.geom.Point2D $r4, $r6;
        net.sourceforge.plantuml.Direction $r7;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.awt.geom.Point2D) $r2;

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i1 = i0 + 1;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (java.awt.geom.Point2D) $r5;

        $r7 = staticinvoke <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction fromVector(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r4, $r6);

        return $r7;
    }

    public java.util.Iterator iterator()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public boolean doesHorizontalCross(net.sourceforge.plantuml.ugraphic.MinMax)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1;
        int $i0, $i1, $i2, i4;
        java.awt.geom.Point2D$Double r2, r3;
        double $d0, $d1;
        byte $b3;
        net.sourceforge.plantuml.ugraphic.MinMax r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMax;

        i4 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i4 >= $i1 goto label3;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(i4);

        $i2 = i4 + 1;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>($i2);

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D$Double: double getY()>();

        $d1 = virtualinvoke r3.<java.awt.geom.Point2D$Double: double getY()>();

        $b3 = $d0 cmpl $d1;

        if $b3 != 0 goto label2;

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.MinMax: boolean doesHorizontalCross(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>(r2, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    public int size()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.awt.geom.Point2D$Double get(int)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.awt.geom.Point2D$Double $r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.awt.geom.Point2D$Double) $r2;

        return $r3;
    }

    public void addAll(net.sourceforge.plantuml.activitydiagram3.ftile.Worm)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0, r1;
        java.util.List $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    public void remove(int)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        int i0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        return;
    }

    public void add(int, java.awt.geom.Point2D$Double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        int i0;
        java.awt.geom.Point2D$Double r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i0 := @parameter0: int;

        r1 := @parameter1: java.awt.geom.Point2D$Double;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r1);

        return;
    }

    public java.awt.geom.Point2D getFirst()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.awt.geom.Point2D $r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.awt.geom.Point2D) $r2;

        return $r3;
    }

    public java.awt.geom.Point2D getLast()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.awt.geom.Point2D $r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.awt.geom.Point2D) $r3;

        return $r4;
    }

    public double getMinX()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r4;
        java.lang.Object $r2, $r6;
        java.awt.geom.Point2D$Double $r3, r7;
        java.util.Iterator r5;
        boolean $z0;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.awt.geom.Point2D$Double) $r2;

        d1 = virtualinvoke $r3.<java.awt.geom.Point2D$Double: double getX()>();

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.awt.geom.Point2D$Double) $r6;

        $d0 = virtualinvoke r7.<java.awt.geom.Point2D$Double: double getX()>();

        d1 = staticinvoke <java.lang.Math: double min(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Worm merge(net.sourceforge.plantuml.activitydiagram3.ftile.Worm, net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0, r2, $r4;
        java.awt.geom.Point2D $r1, $r3;
        boolean $z0;
        net.sourceforge.plantuml.style.Style $r5;
        java.util.List $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r2 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r11 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D getLast()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D getFirst()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: boolean same(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r1, $r3);

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label1:
        $r4 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style>;

        specialinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>($r5);

        $r8 = $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r7 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r10 = $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r9 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        specialinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void mergeMe(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>(r11);

        return $r4;
    }

    private void mergeMe(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy r0, $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z12, $z14, $z16, $z18, $z20, $z22, $z24, $z26, $z28, z29, $z30;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy;

     label01:
        $z9 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removeNullVector()>();

        if $z9 == 0 goto label02;

        $z12 = 1;

        goto label03;

     label02:
        $z12 = 0;

     label03:
        if $z12 != 0 goto label04;

        $z8 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removeRedondantDirection()>();

        if $z8 == 0 goto label05;

     label04:
        $z14 = 1;

        goto label06;

     label05:
        $z14 = 0;

     label06:
        if $z14 != 0 goto label07;

        $z7 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern1()>();

        if $z7 == 0 goto label08;

     label07:
        $z16 = 1;

        goto label09;

     label08:
        $z16 = 0;

     label09:
        if $z16 != 0 goto label10;

        $z6 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern2()>();

        if $z6 == 0 goto label11;

     label10:
        $z18 = 1;

        goto label12;

     label11:
        $z18 = 0;

     label12:
        if $z18 != 0 goto label13;

        $z5 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern3()>();

        if $z5 == 0 goto label14;

     label13:
        $z20 = 1;

        goto label15;

     label14:
        $z20 = 0;

     label15:
        if $z20 != 0 goto label16;

        $z4 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern4()>();

        if $z4 == 0 goto label17;

     label16:
        $z22 = 1;

        goto label18;

     label17:
        $z22 = 0;

     label18:
        if $z22 != 0 goto label19;

        $z3 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern5()>();

        if $z3 == 0 goto label20;

     label19:
        $z24 = 1;

        goto label21;

     label20:
        $z24 = 0;

     label21:
        if $z24 != 0 goto label22;

        $z2 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern6()>();

        if $z2 == 0 goto label23;

     label22:
        $z26 = 1;

        goto label24;

     label23:
        $z26 = 0;

     label24:
        if $z26 != 0 goto label25;

        $z1 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern7()>();

        if $z1 == 0 goto label26;

     label25:
        $z28 = 1;

        goto label27;

     label26:
        $z28 = 0;

     label27:
        z29 = $z28;

        $r1 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy FULL>;

        if r0 != $r1 goto label31;

        if $z28 != 0 goto label28;

        $z0 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean removePattern8()>();

        if $z0 == 0 goto label29;

     label28:
        $z30 = 1;

        goto label30;

     label29:
        $z30 = 0;

     label30:
        z29 = $z30;

     label31:
        if z29 != 0 goto label01;

        return;
    }

    private boolean removeNullVector()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r3;
        int $i0, $i1, i2;
        net.sourceforge.plantuml.Direction r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i2 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i2 >= $i1 goto label3;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>(i2);

        if r2 != null goto label2;

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>(i2);

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean removeRedondantDirection()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r4;
        int $i0, $i1, $i2, $i3, i4;
        net.sourceforge.plantuml.Direction r2, r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i4 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 2;

        if i4 >= $i1 goto label3;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>(i4);

        $i2 = i4 + 1;

        r3 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.Direction getDirectionAtPoint(int)>($i2);

        if r2 != r3 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = i4 + 1;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>($i3);

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean removePattern1()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, r2, $r8, $r10, $r13, $r17, $r19, $r21, $r23, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        net.sourceforge.plantuml.Direction[] $r3, $r24;
        net.sourceforge.plantuml.Direction $r4, $r5, $r6, $r7, $r25, $r26, $r27, $r28;
        boolean $z0, $z1;
        java.awt.geom.Point2D$Double $r9, $r12, $r15;
        java.lang.Object $r11, $r14;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i8 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 5;

        if i8 >= $i1 goto label4;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List getPatternAt(int)>(i8);

        $r3 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[2] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r8.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $r24 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r25 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r24[0] = $r25;

        $r26 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r24[1] = $r26;

        $r27 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r24[2] = $r27;

        $r28 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r24[3] = $r28;

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r24);

        $z1 = interfaceinvoke $r29.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

     label2:
        $r9 = new java.awt.geom.Point2D$Double;

        $r10 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i8 + 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i2);

        $r12 = (java.awt.geom.Point2D$Double) $r11;

        $d0 = $r12.<java.awt.geom.Point2D$Double: double x>;

        $r13 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = i8 + 3;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i3);

        $r15 = (java.awt.geom.Point2D$Double) $r14;

        $d1 = $r15.<java.awt.geom.Point2D$Double: double y>;

        specialinvoke $r9.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        $r17 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i4 = i8 + 3;

        interfaceinvoke $r17.<java.util.List: java.lang.Object remove(int)>($i4);

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i5 = i8 + 2;

        interfaceinvoke $r19.<java.util.List: java.lang.Object remove(int)>($i5);

        $r21 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i6 = i8 + 1;

        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>($i6);

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = i8 + 1;

        interfaceinvoke $r23.<java.util.List: void add(int,java.lang.Object)>($i7, $r9);

        return 1;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return 0;
    }

    private boolean removePattern7()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, r2, $r8, $r9, $r12, $r16, $r19, $r23, $r25, $r27;
        int $i0;
        net.sourceforge.plantuml.Direction[] $r3;
        net.sourceforge.plantuml.Direction $r4, $r5, $r6, $r7;
        boolean $z1;
        java.lang.Object $r10, $r13, $r17, $r20;
        java.awt.geom.Point2D$Double $r11, $r14, $r15, $r18, $r21;
        double $d0, $d1, $d2, $d3;
        byte $b1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 4 goto label1;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List getPatternAt(int)>(0);

        $r3 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r3[2] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z1 = interfaceinvoke $r8.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(3);

        $r11 = (java.awt.geom.Point2D$Double) $r10;

        $d0 = $r11.<java.awt.geom.Point2D$Double: double x>;

        $r12 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (java.awt.geom.Point2D$Double) $r13;

        $d1 = $r14.<java.awt.geom.Point2D$Double: double x>;

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label1;

        $r15 = new java.awt.geom.Point2D$Double;

        $r16 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(3);

        $r18 = (java.awt.geom.Point2D$Double) $r17;

        $d2 = $r18.<java.awt.geom.Point2D$Double: double x>;

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (java.awt.geom.Point2D$Double) $r20;

        $d3 = $r21.<java.awt.geom.Point2D$Double: double y>;

        specialinvoke $r15.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d3);

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r23.<java.util.List: java.lang.Object remove(int)>(2);

        $r25 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r25.<java.util.List: java.lang.Object remove(int)>(1);

        $r27 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        interfaceinvoke $r27.<java.util.List: void add(int,java.lang.Object)>(1, $r15);

        return 1;

     label1:
        return 0;
    }

    private boolean removePattern2()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, r2, $r8, $r10, $r13, $r17, $r19, $r21, $r23, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        net.sourceforge.plantuml.Direction[] $r3, $r24;
        net.sourceforge.plantuml.Direction $r4, $r5, $r6, $r7, $r25, $r26, $r27, $r28;
        boolean $z0, $z1;
        java.awt.geom.Point2D$Double $r9, $r12, $r15;
        java.lang.Object $r11, $r14;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i8 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 5;

        if i8 >= $i1 goto label4;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List getPatternAt(int)>(i8);

        $r3 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[2] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r8.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $r24 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r25 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r24[0] = $r25;

        $r26 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r24[1] = $r26;

        $r27 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r24[2] = $r27;

        $r28 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        $r24[3] = $r28;

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r24);

        $z1 = interfaceinvoke $r29.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

     label2:
        $r9 = new java.awt.geom.Point2D$Double;

        $r10 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i8 + 3;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i2);

        $r12 = (java.awt.geom.Point2D$Double) $r11;

        $d0 = $r12.<java.awt.geom.Point2D$Double: double x>;

        $r13 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = i8 + 1;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i3);

        $r15 = (java.awt.geom.Point2D$Double) $r14;

        $d1 = $r15.<java.awt.geom.Point2D$Double: double y>;

        specialinvoke $r9.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        $r17 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i4 = i8 + 3;

        interfaceinvoke $r17.<java.util.List: java.lang.Object remove(int)>($i4);

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i5 = i8 + 2;

        interfaceinvoke $r19.<java.util.List: java.lang.Object remove(int)>($i5);

        $r21 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i6 = i8 + 1;

        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>($i6);

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = i8 + 1;

        interfaceinvoke $r23.<java.util.List: void add(int,java.lang.Object)>($i7, $r9);

        return 1;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return 0;
    }

    private boolean removePattern3()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, r2, $r8, $r10, $r13, $r17, $r19, $r21, $r23, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        net.sourceforge.plantuml.Direction[] $r3, $r24;
        net.sourceforge.plantuml.Direction $r4, $r5, $r6, $r7, $r25, $r26, $r27, $r28;
        boolean $z0, $z1;
        java.awt.geom.Point2D$Double $r9, $r12, $r15;
        java.lang.Object $r11, $r14;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i8 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 4;

        if i8 >= $i1 goto label4;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List getPatternAt(int)>(i8);

        $r3 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[2] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r8.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $r24 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r25 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r24[0] = $r25;

        $r26 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r24[1] = $r26;

        $r27 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r24[2] = $r27;

        $r28 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r24[3] = $r28;

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r24);

        $z1 = interfaceinvoke $r29.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

     label2:
        $r9 = new java.awt.geom.Point2D$Double;

        $r10 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i8 + 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i2);

        $r12 = (java.awt.geom.Point2D$Double) $r11;

        $d0 = $r12.<java.awt.geom.Point2D$Double: double x>;

        $r13 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = i8 + 3;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i3);

        $r15 = (java.awt.geom.Point2D$Double) $r14;

        $d1 = $r15.<java.awt.geom.Point2D$Double: double y>;

        specialinvoke $r9.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        $r17 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i4 = i8 + 3;

        interfaceinvoke $r17.<java.util.List: java.lang.Object remove(int)>($i4);

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i5 = i8 + 2;

        interfaceinvoke $r19.<java.util.List: java.lang.Object remove(int)>($i5);

        $r21 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i6 = i8 + 1;

        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>($i6);

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = i8 + 1;

        interfaceinvoke $r23.<java.util.List: void add(int,java.lang.Object)>($i7, $r9);

        return 1;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return 0;
    }

    private boolean removePattern4()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, r2, $r8, $r9, $r12, $r16, $r19, $r23, $r25, $r27, $r29;
        int $i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10;
        net.sourceforge.plantuml.Direction[] $r3;
        net.sourceforge.plantuml.Direction $r4, $r5, $r6, $r7;
        boolean $z0;
        java.lang.Object $r10, $r13, $r17, $r20;
        java.awt.geom.Point2D$Double r11, r14, $r15, $r18, $r21;
        double $d0, $d1, $d2, $d3;
        byte $b4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 5;

        if i1 < 0 goto label1;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List getPatternAt(int)>(i1);

        $r3 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[2] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r8.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i1 + 1;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i2);

        r11 = (java.awt.geom.Point2D$Double) $r10;

        $r12 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = i1 + 4;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        r14 = (java.awt.geom.Point2D$Double) $r13;

        $d1 = r14.<java.awt.geom.Point2D$Double: double x>;

        $d0 = r11.<java.awt.geom.Point2D$Double: double x>;

        $b4 = $d1 cmpl $d0;

        if $b4 <= 0 goto label1;

        $r15 = new java.awt.geom.Point2D$Double;

        $r16 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i5 = i1 + 1;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>($i5);

        $r18 = (java.awt.geom.Point2D$Double) $r17;

        $d2 = $r18.<java.awt.geom.Point2D$Double: double x>;

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i6 = i1 + 3;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>($i6);

        $r21 = (java.awt.geom.Point2D$Double) $r20;

        $d3 = $r21.<java.awt.geom.Point2D$Double: double y>;

        specialinvoke $r15.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d3);

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = i1 + 3;

        interfaceinvoke $r23.<java.util.List: java.lang.Object remove(int)>($i7);

        $r25 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i8 = i1 + 2;

        interfaceinvoke $r25.<java.util.List: java.lang.Object remove(int)>($i8);

        $r27 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i9 = i1 + 1;

        interfaceinvoke $r27.<java.util.List: java.lang.Object remove(int)>($i9);

        $r29 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i10 = i1 + 1;

        interfaceinvoke $r29.<java.util.List: void add(int,java.lang.Object)>($i10, $r15);

        return 1;

     label1:
        return 0;
    }

    private boolean removePattern5()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, r2, $r8, $r9, $r12, $r16, $r19, $r23, $r25, $r27, $r29;
        int $i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10;
        net.sourceforge.plantuml.Direction[] $r3;
        net.sourceforge.plantuml.Direction $r4, $r5, $r6, $r7;
        boolean $z0;
        java.lang.Object $r10, $r13, $r17, $r20;
        java.awt.geom.Point2D$Double r11, r14, $r15, $r18, $r21;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 5;

        if i1 < 0 goto label1;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List getPatternAt(int)>(i1);

        $r3 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[2] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r8.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i1 + 1;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i2);

        r11 = (java.awt.geom.Point2D$Double) $r10;

        $r12 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = i1 + 4;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        r14 = (java.awt.geom.Point2D$Double) $r13;

        $d0 = r14.<java.awt.geom.Point2D$Double: double x>;

        $d2 = $d0 + 4.0;

        $d1 = r11.<java.awt.geom.Point2D$Double: double x>;

        $b4 = $d2 cmpg $d1;

        if $b4 >= 0 goto label1;

        $r15 = new java.awt.geom.Point2D$Double;

        $r16 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i5 = i1 + 1;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>($i5);

        $r18 = (java.awt.geom.Point2D$Double) $r17;

        $d3 = $r18.<java.awt.geom.Point2D$Double: double x>;

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i6 = i1 + 3;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>($i6);

        $r21 = (java.awt.geom.Point2D$Double) $r20;

        $d4 = $r21.<java.awt.geom.Point2D$Double: double y>;

        specialinvoke $r15.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d4);

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = i1 + 3;

        interfaceinvoke $r23.<java.util.List: java.lang.Object remove(int)>($i7);

        $r25 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i8 = i1 + 2;

        interfaceinvoke $r25.<java.util.List: java.lang.Object remove(int)>($i8);

        $r27 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i9 = i1 + 1;

        interfaceinvoke $r27.<java.util.List: java.lang.Object remove(int)>($i9);

        $r29 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i10 = i1 + 1;

        interfaceinvoke $r29.<java.util.List: void add(int,java.lang.Object)>($i10, $r15);

        return 1;

     label1:
        return 0;
    }

    private boolean removePattern6()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, $r2;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i3 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 2;

        if i3 >= $i1 goto label3;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean isForwardAndBackwardAt(int)>(i3);

        if $z0 == 0 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i3 + 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i2);

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean removePattern8()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        java.util.List $r1, r2, $r8, $r10, $r13, $r17, $r19, $r21, $r23, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        net.sourceforge.plantuml.Direction[] $r3, $r24;
        net.sourceforge.plantuml.Direction $r4, $r5, $r6, $r7, $r25, $r26, $r27, $r28;
        boolean $z0, $z1;
        java.awt.geom.Point2D$Double $r9, $r12, $r15;
        java.lang.Object $r11, $r14;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        i8 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 4;

        if i8 >= $i1 goto label4;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List getPatternAt(int)>(i8);

        $r3 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r3[2] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r3[3] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r8.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $r24 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r25 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r24[0] = $r25;

        $r26 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r24[1] = $r26;

        $r27 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r24[2] = $r27;

        $r28 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r24[3] = $r28;

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r24);

        $z1 = interfaceinvoke $r29.<java.util.List: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

     label2:
        $r9 = new java.awt.geom.Point2D$Double;

        $r10 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i2 = i8 + 3;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i2);

        $r12 = (java.awt.geom.Point2D$Double) $r11;

        $d0 = $r12.<java.awt.geom.Point2D$Double: double x>;

        $r13 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i3 = i8 + 1;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i3);

        $r15 = (java.awt.geom.Point2D$Double) $r14;

        $d1 = $r15.<java.awt.geom.Point2D$Double: double y>;

        specialinvoke $r9.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        $r17 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i4 = i8 + 3;

        interfaceinvoke $r17.<java.util.List: java.lang.Object remove(int)>($i4);

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i5 = i8 + 2;

        interfaceinvoke $r19.<java.util.List: java.lang.Object remove(int)>($i5);

        $r21 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i6 = i8 + 1;

        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>($i6);

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.List points>;

        $i7 = i8 + 1;

        interfaceinvoke $r23.<java.util.List: void add(int,java.lang.Object)>($i7, $r9);

        return 1;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return 0;
    }

    public net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r0;
        net.sourceforge.plantuml.style.Style $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.style.Style style>;

        return $r1;
    }
}
