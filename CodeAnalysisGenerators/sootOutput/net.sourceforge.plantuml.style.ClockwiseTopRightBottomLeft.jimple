public class net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft extends java.lang.Object
{
    private final double top;
    private final double right;
    private final double bottom;
    private final double left;

    public static net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft same(double)
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke $r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: void <init>(double,double,double,double)>(d0, d0, d0, d0);

        return $r0;
    }

    public static net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft none()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r0;

        $r0 = new net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke $r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 0.0);

        return $r0;
    }

    public static net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft read(java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r15;
        boolean $z0;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r1, $r7, $r11, $r14, $r16;
        java.lang.String[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("[0-9 ]+");

        if $z0 == 0 goto label4;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(" +");

        $i0 = lengthof r2;

        if $i0 != 1 goto label1;

        $r15 = r2[0];

        $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

        d1 = (double) $i13;

        $r16 = new net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke $r16.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: void <init>(double,double,double,double)>(d1, d1, d1, d1);

        return $r16;

     label1:
        $i1 = lengthof r2;

        if $i1 != 2 goto label2;

        $r12 = r2[0];

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        d2 = (double) $i11;

        $r13 = r2[1];

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        d3 = (double) $i12;

        $r14 = new net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke $r14.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: void <init>(double,double,double,double)>(d2, d3, d2, d3);

        return $r14;

     label2:
        $i2 = lengthof r2;

        if $i2 != 3 goto label3;

        $r8 = r2[0];

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        d4 = (double) $i8;

        $r9 = r2[1];

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        d5 = (double) $i9;

        $r10 = r2[2];

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        d6 = (double) $i10;

        $r11 = new net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke $r11.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: void <init>(double,double,double,double)>(d4, d5, d6, d5);

        return $r11;

     label3:
        $i3 = lengthof r2;

        if $i3 != 4 goto label4;

        $r3 = r2[0];

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        d7 = (double) $i4;

        $r4 = r2[1];

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        d8 = (double) $i5;

        $r5 = r2[2];

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        d9 = (double) $i6;

        $r6 = r2[3];

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        d0 = (double) $i7;

        $r7 = new net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke $r7.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: void <init>(double,double,double,double)>(d7, d8, d9, d0);

        return $r7;

     label4:
        $r1 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft none()>();

        return $r1;
    }

    public static net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft margin1margin2(double, double)
    {
        double d0, d1;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft topRightBottomLeft(double,double,double,double)>(d0, d1, d0, d1);

        return $r0;
    }

    public static net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft topRightBottomLeft(double, double, double, double)
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r0;
        double d0, d1, d2, d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r0 = new net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke $r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: void <init>(double,double,double,double)>(d0, d1, d2, d3);

        return $r0;
    }

    private void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double top> = d0;

        r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double right> = d1;

        r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double bottom> = d2;

        r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double left> = d3;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r2;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r10;

        r2 := @this: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double top>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $d1 = r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double right>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $d2 = r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double bottom>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $d3 = r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double left>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public final double getTop()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        $d0 = r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double top>;

        return $d0;
    }

    public final double getRight()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        $d0 = r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double right>;

        return $d0;
    }

    public final double getBottom()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        $d0 = r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double bottom>;

        return $d0;
    }

    public final double getLeft()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        $d0 = r0.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double left>;

        return $d0;
    }

    public static net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft marginForDocument(net.sourceforge.plantuml.style.StyleBuilder)
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2;
        net.sourceforge.plantuml.style.StyleSignature $r3;
        net.sourceforge.plantuml.style.StyleBuilder r4;
        net.sourceforge.plantuml.style.Style r5;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r6;

        r4 := @parameter0: net.sourceforge.plantuml.style.StyleBuilder;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[2];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName document>;

        $r0[1] = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        r5 = virtualinvoke $r3.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>(r4);

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        return $r6;
    }
}
