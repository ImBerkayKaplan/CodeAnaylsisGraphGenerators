public class net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber r0;
        net.sourceforge.plantuml.command.regex.RegexConcat $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber;

        $r1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber: net.sourceforge.plantuml.command.regex.RegexConcat getConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.RegexConcat getConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r9, $r14;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r6, $r10, $r11, $r15, $r16, $r17, $r18;
        net.sourceforge.plantuml.command.regex.RegexOptional $r7, $r12;
        net.sourceforge.plantuml.command.regex.RegexConcat $r8, $r13, $r19;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/command/CommandAutonumber;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[8];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("autonumber");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("START", "(\\d(?:(?:[^%pLN%s]+|\\d+)*\\d)?)?");

        $r2[3] = $r6;

        $r7 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r9[0] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEP", "(\\d+)");

        $r9[1] = $r11;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r9);

        specialinvoke $r7.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r8);

        $r2[4] = $r7;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r14 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r14[0] = $r15;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("FORMAT", "[%g]([^%g]+)[%g]");

        $r14[1] = $r16;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r14);

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r13);

        $r2[5] = $r12;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[7] = $r18;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r19;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.sequencediagram.SequenceDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r2, r3, r4, $r14, $r19;
        java.text.DecimalFormat $r5;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r7;
        net.sourceforge.plantuml.command.CommandExecutionResult $r8, $r15;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r11, $r12, $r13;
        net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber r16;
        net.sourceforge.plantuml.LineLocation r17;
        net.sourceforge.plantuml.sequencediagram.DottedNumber r18;
        int i0;

        r16 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber;

        r7 := @parameter0: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r17 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r18 = staticinvoke <net.sourceforge.plantuml.sequencediagram.DottedNumber: net.sourceforge.plantuml.sequencediagram.DottedNumber create(java.lang.String)>("1");

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("START", 0);

        if r1 == null goto label1;

        r18 = staticinvoke <net.sourceforge.plantuml.sequencediagram.DottedNumber: net.sourceforge.plantuml.sequencediagram.DottedNumber create(java.lang.String)>(r1);

     label1:
        i0 = 1;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEP", 0);

        if r2 == null goto label2;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("FORMAT", 0);

        if r3 != null goto label3;

        $r19 = "<b>0</b>";

        goto label4;

     label3:
        $r19 = r3;

     label4:
        r4 = $r19;

     label5:
        $r5 = new java.text.DecimalFormat;

        specialinvoke $r5.<java.text.DecimalFormat: void <init>(java.lang.String)>($r19);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in pattern : ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r14);

        return $r15;

     label8:
        virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void autonumberGo(net.sourceforge.plantuml.sequencediagram.DottedNumber,int,java.text.DecimalFormat)>(r18, i0, $r5);

        $r8 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r8;

        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.sequencediagram.SequenceDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
