public class net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer extends java.lang.Object
{
    public static final java.lang.String PATTERN;
    private static final java.lang.String part1;
    private static final java.lang.String part2;

    public void <init>()
    {
        net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer r0;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String getGenericRegex(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.lang.IllegalArgumentException $r6;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        if i0 != 0 goto label2;

        return "(?:[^\\<\\>/]|\\<\\>)*";

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[^\\<\\>/]|\\<");

        $i1 = i0 - 1;

        $r2 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String getGenericRegex(int)>($i1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\>)*");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4;

        <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String part2> = "\\>)*";

        <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String part1> = "(?:[^\\<\\>/]|\\<";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[^\\<\\>/]");

        $r2 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String getGenericRegex(int)>(4);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String PATTERN> = $r4;

        return;
    }
}
