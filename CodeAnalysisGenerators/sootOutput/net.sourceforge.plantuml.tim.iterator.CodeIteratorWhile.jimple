public class net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile extends net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator
{
    private final net.sourceforge.plantuml.tim.TContext context;
    private final net.sourceforge.plantuml.tim.TMemory memory;
    private final java.util.List logs;

    public void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator, net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, java.util.List)
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile r0;
        net.sourceforge.plantuml.tim.iterator.CodeIterator r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        java.util.List r4;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile;

        r1 := @parameter0: net.sourceforge.plantuml.tim.iterator.CodeIterator;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter2: net.sourceforge.plantuml.tim.TMemory;

        r4 := @parameter3: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator)>(r1);

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TContext context> = r2;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TMemory memory> = r3;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: java.util.List logs> = r4;

        return;
    }

    public net.sourceforge.plantuml.StringLocated peek() throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile r0;
        net.sourceforge.plantuml.StringLocated r1, $r20;
        net.sourceforge.plantuml.tim.TMemory $r2, $r10, $r13, $r19, $r25;
        net.sourceforge.plantuml.tim.ExecutionContextWhile r3;
        net.sourceforge.plantuml.tim.TLineType $r4, $r5, $r6, $r7, $r21, $r22, $r23, $r24;
        java.util.List $r8, $r18;
        net.sourceforge.plantuml.LineLocation $r9;
        net.sourceforge.plantuml.tim.TContext $r11;
        net.sourceforge.plantuml.tim.expression.TValue r12;
        boolean $z1, $z3;
        net.sourceforge.plantuml.tim.iterator.CodeIterator $r15, $r27;
        net.sourceforge.plantuml.tim.iterator.CodePosition $r16;
        net.sourceforge.plantuml.tim.EaterException $r17;
        int i0;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile;

        i0 = 0;

     label01:
        $r27 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        r1 = interfaceinvoke $r27.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if r1 != null goto label02;

        return null;

     label02:
        $r2 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TMemory memory>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.ExecutionContextWhile peekWhile()>();

        if r3 == null goto label05;

        $z3 = virtualinvoke r3.<net.sourceforge.plantuml.tim.ExecutionContextWhile: boolean isSkipMe()>();

        if $z3 == 0 goto label05;

        $r21 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r22 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType WHILE>;

        if $r21 != $r22 goto label03;

        i0 = i0 + 1;

        goto label04;

     label03:
        $r23 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r24 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDWHILE>;

        if $r23 != $r24 goto label04;

        i0 = i0 + -1;

        if i0 != -1 goto label04;

        $r25 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TMemory memory>;

        interfaceinvoke $r25.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.ExecutionContextWhile pollWhile()>();

        i0 = 0;

     label04:
        virtualinvoke r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: void next()>();

        goto label01;

     label05:
        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r5 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType WHILE>;

        if $r4 != $r5 goto label06;

        $r18 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: java.util.List logs>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r19 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TMemory memory>;

        $r20 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: void executeWhile(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>($r19, $r20);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: void next()>();

        goto label01;

     label06:
        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r7 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDWHILE>;

        if $r6 != $r7 goto label10;

        $r8 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: java.util.List logs>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);

        if r3 != null goto label07;

        $r17 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("No while related to this endwhile");

        throw $r17;

     label07:
        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        $r11 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TContext context>;

        $r10 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TMemory memory>;

        r12 = virtualinvoke r3.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.expression.TValue conditionValue(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r9, $r11, $r10);

        $z1 = virtualinvoke r12.<net.sourceforge.plantuml.tim.expression.TValue: boolean toBoolean()>();

        if $z1 == 0 goto label08;

        $r15 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r16 = virtualinvoke r3.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.iterator.CodePosition getStartWhile()>();

        interfaceinvoke $r15.<net.sourceforge.plantuml.tim.iterator.CodeIterator: void jumpToCodePosition(net.sourceforge.plantuml.tim.iterator.CodePosition)>($r16);

        goto label09;

     label08:
        $r13 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TMemory memory>;

        interfaceinvoke $r13.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.ExecutionContextWhile pollWhile()>();

     label09:
        virtualinvoke r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: void next()>();

        goto label01;

     label10:
        return r1;
    }

    private void executeWhile(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterWhile $r0;
        net.sourceforge.plantuml.StringLocated r1;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile r3;
        net.sourceforge.plantuml.tim.TMemory r4;
        net.sourceforge.plantuml.tim.TContext $r5, $r11;
        net.sourceforge.plantuml.tim.expression.TokenStack r6;
        net.sourceforge.plantuml.tim.iterator.CodeIterator $r7;
        net.sourceforge.plantuml.tim.iterator.CodePosition $r8;
        net.sourceforge.plantuml.tim.ExecutionContextWhile r9;
        net.sourceforge.plantuml.LineLocation $r10;
        net.sourceforge.plantuml.tim.expression.TValue r12;
        boolean $z0;

        r3 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterWhile;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterWhile: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        $r5 = r3.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TContext context>;

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterWhile: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r5, r4);

        r6 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterWhile: net.sourceforge.plantuml.tim.expression.TokenStack getWhileExpression()>();

        $r7 = r3.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.tim.iterator.CodePosition getCodePosition()>();

        r9 = staticinvoke <net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.ExecutionContextWhile fromValue(net.sourceforge.plantuml.tim.expression.TokenStack,net.sourceforge.plantuml.tim.iterator.CodePosition)>(r6, $r8);

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        $r11 = r3.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: net.sourceforge.plantuml.tim.TContext context>;

        r12 = virtualinvoke r9.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.expression.TValue conditionValue(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r10, $r11, r4);

        $z0 = virtualinvoke r12.<net.sourceforge.plantuml.tim.expression.TValue: boolean toBoolean()>();

        if $z0 != 0 goto label1;

        virtualinvoke r9.<net.sourceforge.plantuml.tim.ExecutionContextWhile: void skipMe()>();

     label1:
        interfaceinvoke r4.<net.sourceforge.plantuml.tim.TMemory: void addWhile(net.sourceforge.plantuml.tim.ExecutionContextWhile)>(r9);

        return;
    }
}
