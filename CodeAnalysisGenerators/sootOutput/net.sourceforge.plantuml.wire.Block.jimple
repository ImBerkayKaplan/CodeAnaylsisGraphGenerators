public class net.sourceforge.plantuml.wire.Block extends net.sourceforge.plantuml.graphic.AbstractTextBlock
{
    private final java.util.Map children;
    private final net.sourceforge.plantuml.cucadiagram.Display display;
    private final net.sourceforge.plantuml.Dimension2DDouble fixedDim;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final java.util.List left;
    private final java.util.List right;
    private final java.util.List top;
    private final java.util.List bottom;
    private double x;
    private double y;
    private net.sourceforge.plantuml.ugraphic.MinMax minMax;
    private net.sourceforge.plantuml.wire.Block parent;

    public void <init>(net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.wire.Block r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.cucadiagram.Display $r2;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        $r2 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display empty()>();

        specialinvoke r0.<net.sourceforge.plantuml.wire.Block: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.Dimension2DDouble)>(r1, $r2, null);

        return;
    }

    private void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.Dimension2DDouble)
    {
        net.sourceforge.plantuml.wire.Block r0;
        java.util.LinkedHashMap $r1;
        java.util.ArrayList $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.ugraphic.MinMax $r6;
        net.sourceforge.plantuml.ISkinParam r7;
        net.sourceforge.plantuml.cucadiagram.Display r8;
        net.sourceforge.plantuml.Dimension2DDouble r9;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        r7 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r8 := @parameter1: net.sourceforge.plantuml.cucadiagram.Display;

        r9 := @parameter2: net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.wire.Block: java.util.Map children> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.wire.Block: java.util.List left> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.wire.Block: java.util.List right> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.wire.Block: java.util.List top> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.wire.Block: java.util.List bottom> = $r5;

        r0.<net.sourceforge.plantuml.wire.Block: double x> = 10.0;

        r0.<net.sourceforge.plantuml.wire.Block: double y> = 10.0;

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(1);

        r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax> = $r6;

        r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ISkinParam skinParam> = r7;

        r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.cucadiagram.Display display> = r8;

        r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.Dimension2DDouble fixedDim> = r9;

        return;
    }

    private java.util.List getPins(net.sourceforge.plantuml.command.Position)
    {
        net.sourceforge.plantuml.command.Position r0;
        int[] $r1;
        int $i0, $i1;
        net.sourceforge.plantuml.wire.Block r2;
        java.util.List $r3, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r2 := @this: net.sourceforge.plantuml.wire.Block;

        r0 := @parameter0: net.sourceforge.plantuml.command.Position;

        $r1 = <net.sourceforge.plantuml.wire.Block$1: int[] $SwitchMap$net$sourceforge$plantuml$command$Position>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.command.Position: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r6 = r2.<net.sourceforge.plantuml.wire.Block: java.util.List left>;

        return $r6;

     label2:
        $r5 = r2.<net.sourceforge.plantuml.wire.Block: java.util.List right>;

        return $r5;

     label3:
        $r4 = r2.<net.sourceforge.plantuml.wire.Block: java.util.List top>;

        return $r4;

     label4:
        $r3 = r2.<net.sourceforge.plantuml.wire.Block: java.util.List bottom>;

        return $r3;

     label5:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.wire.Block r0;
        net.sourceforge.plantuml.Dimension2DDouble $r1, $r2;
        net.sourceforge.plantuml.ugraphic.MinMax $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.Dimension2DDouble fixedDim>;

        if $r1 != null goto label1;

        $r3 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()>();

        return $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.Dimension2DDouble fixedDim>;

        return $r2;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.wire.Block r0, $r15;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;
        java.util.Map $r2, $r3;
        int $i0;
        java.util.Set $r4;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.URectangle $r5;
        net.sourceforge.plantuml.graphic.StringBounder $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r7;
        net.sourceforge.plantuml.command.Position $r8, $r9, $r10, $r11;
        java.lang.Object $r12, $r14, $r16;
        java.util.Map$Entry r13;
        net.sourceforge.plantuml.wire.Block$Pos $r17;
        net.sourceforge.plantuml.ugraphic.UGraphic $r18, $r26, r27, r28;
        net.sourceforge.plantuml.graphic.FontConfiguration $r19;
        net.sourceforge.plantuml.FontParam $r20;
        net.sourceforge.plantuml.ISkinParam $r21, $r23;
        net.sourceforge.plantuml.cucadiagram.Display $r22;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r24;
        net.sourceforge.plantuml.ugraphic.UTranslate $r25;
        net.sourceforge.plantuml.graphic.TextBlock r29;
        java.util.Iterator r30;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        r27 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        r28 = interfaceinvoke r27.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.wire.Block: java.util.Map children>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        $r22 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.cucadiagram.Display display>;

        $r19 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r21 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r20 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam COMPONENT>;

        specialinvoke $r19.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r21, $r20, null);

        $r24 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r23 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ISkinParam skinParam>;

        r29 = virtualinvoke $r22.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r19, $r24, $r23);

        $r25 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r25.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(10.0, 10.0);

        $r26 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r25);

        interfaceinvoke r29.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r26);

        goto label3;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.wire.Block: java.util.Map children>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r30 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r12;

        $r14 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (net.sourceforge.plantuml.wire.Block) $r14;

        $r16 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (net.sourceforge.plantuml.wire.Block$Pos) $r16;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.wire.Block$Pos: net.sourceforge.plantuml.ugraphic.UGraphic move(net.sourceforge.plantuml.ugraphic.UGraphic)>(r28);

        virtualinvoke $r15.<net.sourceforge.plantuml.wire.Block: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r18);

        goto label2;

     label3:
        $r5 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $r6 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r7);

        interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        $r8 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position BOTTOM>;

        specialinvoke r0.<net.sourceforge.plantuml.wire.Block: void drawPins(net.sourceforge.plantuml.command.Position,net.sourceforge.plantuml.ugraphic.UGraphic)>($r8, r28);

        $r9 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position TOP>;

        specialinvoke r0.<net.sourceforge.plantuml.wire.Block: void drawPins(net.sourceforge.plantuml.command.Position,net.sourceforge.plantuml.ugraphic.UGraphic)>($r9, r28);

        $r10 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position LEFT>;

        specialinvoke r0.<net.sourceforge.plantuml.wire.Block: void drawPins(net.sourceforge.plantuml.command.Position,net.sourceforge.plantuml.ugraphic.UGraphic)>($r10, r28);

        $r11 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position RIGHT>;

        specialinvoke r0.<net.sourceforge.plantuml.wire.Block: void drawPins(net.sourceforge.plantuml.command.Position,net.sourceforge.plantuml.ugraphic.UGraphic)>($r11, r28);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getBlack()
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r0, $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2;
        net.sourceforge.plantuml.wire.Block r3;

        r3 := @this: net.sourceforge.plantuml.wire.Block;

        $r1 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        $r0 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple WHITE>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: net.sourceforge.plantuml.ugraphic.color.HColor withDark(net.sourceforge.plantuml.ugraphic.color.HColor)>($r0);

        return $r2;
    }

    private void drawPins(net.sourceforge.plantuml.command.Position, net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.command.Position r0, $r1, $r2, $r3, $r13, $r14;
        net.sourceforge.plantuml.wire.Block r4;
        java.util.List $r5;
        java.util.Iterator r6;
        java.lang.Object $r7;
        java.lang.String r8;
        net.sourceforge.plantuml.ugraphic.UGraphic r9, $r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;
        net.sourceforge.plantuml.ugraphic.UEllipse $r12;
        net.sourceforge.plantuml.graphic.StringBounder $r15, $r17;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r16, $r18;
        double $d0, $d1, d2, d3;
        boolean $z0;

        r4 := @this: net.sourceforge.plantuml.wire.Block;

        r0 := @parameter0: net.sourceforge.plantuml.command.Position;

        r9 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        d2 = -2.0;

        d3 = 10.0;

        $r1 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position RIGHT>;

        if r0 != $r1 goto label1;

        $r17 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r18 = virtualinvoke r4.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r17);

        $d1 = virtualinvoke $r18.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d2 = $d1 - 2.0;

     label1:
        $r2 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position TOP>;

        if r0 != $r2 goto label2;

        d2 = 10.0;

        d3 = -2.0;

     label2:
        $r3 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position BOTTOM>;

        if r0 != $r3 goto label3;

        d2 = 10.0;

        $r15 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r16 = virtualinvoke r4.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r15);

        $d0 = virtualinvoke $r16.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d3 = $d0 - 2.0;

     label3:
        $r5 = specialinvoke r4.<net.sourceforge.plantuml.wire.Block: java.util.List getPins(net.sourceforge.plantuml.command.Position)>(r0);

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d2, d3);

        $r11 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        $r12 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(4.0, 4.0);

        interfaceinvoke $r11.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r12);

        $r13 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position LEFT>;

        if r0 == $r13 goto label5;

        $r14 = <net.sourceforge.plantuml.command.Position: net.sourceforge.plantuml.command.Position RIGHT>;

        if r0 != $r14 goto label6;

     label5:
        d3 = d3 + 15.0;

        goto label7;

     label6:
        d2 = d2 + 15.0;

     label7:
        goto label4;

     label8:
        return;
    }

    public net.sourceforge.plantuml.wire.Block componentEnd()
    {
        net.sourceforge.plantuml.wire.Block r0, $r1, $r2, $r4, $r6, $r9, $r11;
        net.sourceforge.plantuml.ugraphic.MinMax $r3, $r5, $r7, $r8, $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        $r4 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.wire.Block parent>;

        $r1 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.wire.Block parent>;

        $r5 = $r1.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $r2 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.wire.Block parent>;

        $d0 = $r2.<net.sourceforge.plantuml.wire.Block: double x>;

        $r3 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $d2 = $d0 + $d1;

        $d3 = $d2 + 10.0;

        $r6 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.wire.Block parent>;

        $d4 = $r6.<net.sourceforge.plantuml.wire.Block: double y>;

        $r7 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d5 = virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $d6 = $d4 + $d5;

        $d7 = $d6 + 10.0;

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d3, $d7);

        $r4.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax> = $r8;

        $r9 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.wire.Block parent>;

        $d8 = $r9.<net.sourceforge.plantuml.wire.Block: double x>;

        $r10 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d9 = virtualinvoke $r10.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $d10 = $d9 + 10.0;

        $d11 = $d8 + $d10;

        $r9.<net.sourceforge.plantuml.wire.Block: double x> = $d11;

        $r11 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.wire.Block parent>;

        return $r11;
    }

    public net.sourceforge.plantuml.wire.Block addNewBlock(java.lang.String, int, int)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        int i0, i1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        net.sourceforge.plantuml.wire.Block $r2, r3;
        java.lang.CharSequence[] $r4;
        java.lang.String r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.cucadiagram.Display $r7;
        net.sourceforge.plantuml.wire.Block$Pos $r9;
        java.util.Map $r10;
        net.sourceforge.plantuml.ugraphic.MinMax $r12, $r13;

        r3 := @this: net.sourceforge.plantuml.wire.Block;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = (double) i0;

        $d0 = (double) i1;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d0);

        $r2 = new net.sourceforge.plantuml.wire.Block;

        $r6 = r3.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r4 = newarray (java.lang.CharSequence)[1];

        $r4[0] = r5;

        $r7 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r4);

        specialinvoke $r2.<net.sourceforge.plantuml.wire.Block: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.Dimension2DDouble)>($r6, $r7, $r0);

        $r10 = r3.<net.sourceforge.plantuml.wire.Block: java.util.Map children>;

        $r9 = new net.sourceforge.plantuml.wire.Block$Pos;

        $d3 = r3.<net.sourceforge.plantuml.wire.Block: double x>;

        $d2 = r3.<net.sourceforge.plantuml.wire.Block: double y>;

        specialinvoke $r9.<net.sourceforge.plantuml.wire.Block$Pos: void <init>(double,double)>($d3, $d2);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

        $d4 = r3.<net.sourceforge.plantuml.wire.Block: double y>;

        $d5 = virtualinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: double getHeight()>();

        $d6 = $d5 + 10.0;

        $d7 = $d4 + $d6;

        r3.<net.sourceforge.plantuml.wire.Block: double y> = $d7;

        $r12 = r3.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d8 = r3.<net.sourceforge.plantuml.wire.Block: double x>;

        $d9 = virtualinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: double getWidth()>();

        $d10 = $d8 + $d9;

        $d12 = $d10 + 10.0;

        $d11 = r3.<net.sourceforge.plantuml.wire.Block: double y>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d12, $d11);

        r3.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax> = $r13;

        return $r2;
    }

    public net.sourceforge.plantuml.wire.Block createContainer(java.lang.String)
    {
        net.sourceforge.plantuml.wire.Block $r0, r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.wire.Block$Pos $r4;
        double $d0, $d1;
        java.util.Map $r5;
        java.lang.String r7;

        r1 := @this: net.sourceforge.plantuml.wire.Block;

        r7 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.wire.Block;

        $r2 = r1.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ISkinParam skinParam>;

        specialinvoke $r0.<net.sourceforge.plantuml.wire.Block: void <init>(net.sourceforge.plantuml.ISkinParam)>($r2);

        $r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.wire.Block parent> = r1;

        $r5 = r1.<net.sourceforge.plantuml.wire.Block: java.util.Map children>;

        $r4 = new net.sourceforge.plantuml.wire.Block$Pos;

        $d1 = r1.<net.sourceforge.plantuml.wire.Block: double x>;

        $d0 = r1.<net.sourceforge.plantuml.wire.Block: double y>;

        specialinvoke $r4.<net.sourceforge.plantuml.wire.Block$Pos: void <init>(double,double)>($d1, $d0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r4);

        return $r0;
    }

    public void vspace(int)
    {
        net.sourceforge.plantuml.wire.Block r0;
        int i0, $i1;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.ugraphic.MinMax $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        i0 := @parameter0: int;

        $d1 = r0.<net.sourceforge.plantuml.wire.Block: double y>;

        $i1 = i0 - 10;

        $d0 = (double) $i1;

        $d2 = $d1 + $d0;

        r0.<net.sourceforge.plantuml.wire.Block: double y> = $d2;

        $r1 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d4 = r0.<net.sourceforge.plantuml.wire.Block: double x>;

        $d3 = r0.<net.sourceforge.plantuml.wire.Block: double y>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d4, $d3);

        r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax> = $r2;

        return;
    }

    public void newColumn()
    {
        net.sourceforge.plantuml.wire.Block r0;
        net.sourceforge.plantuml.ugraphic.MinMax $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        $r1 = r0.<net.sourceforge.plantuml.wire.Block: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        r0.<net.sourceforge.plantuml.wire.Block: double x> = $d0;

        r0.<net.sourceforge.plantuml.wire.Block: double y> = 10.0;

        return;
    }

    public void addPin(net.sourceforge.plantuml.command.Position, java.lang.String)
    {
        net.sourceforge.plantuml.wire.Block r0;
        net.sourceforge.plantuml.command.Position r1;
        java.util.List $r2;
        java.lang.String r3;

        r0 := @this: net.sourceforge.plantuml.wire.Block;

        r1 := @parameter0: net.sourceforge.plantuml.command.Position;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.wire.Block: java.util.List getPins(net.sourceforge.plantuml.command.Position)>(r1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }
}
