class net.sourceforge.plantuml.project.PlanUtils$1 extends java.lang.Object implements net.sourceforge.plantuml.project.LoadPlanable
{
    final net.sourceforge.plantuml.project.LoadPlanable val$p1;
    final net.sourceforge.plantuml.project.LoadPlanable val$p2;

    void <init>(net.sourceforge.plantuml.project.LoadPlanable, net.sourceforge.plantuml.project.LoadPlanable)
    {
        net.sourceforge.plantuml.project.PlanUtils$1 r0;
        net.sourceforge.plantuml.project.LoadPlanable r1, r2;

        r0 := @this: net.sourceforge.plantuml.project.PlanUtils$1;

        r1 := @parameter0: net.sourceforge.plantuml.project.LoadPlanable;

        r2 := @parameter1: net.sourceforge.plantuml.project.LoadPlanable;

        r0.<net.sourceforge.plantuml.project.PlanUtils$1: net.sourceforge.plantuml.project.LoadPlanable val$p1> = r1;

        r0.<net.sourceforge.plantuml.project.PlanUtils$1: net.sourceforge.plantuml.project.LoadPlanable val$p2> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getLoadAt(net.sourceforge.plantuml.project.time.Day)
    {
        net.sourceforge.plantuml.project.PlanUtils$1 r0;
        net.sourceforge.plantuml.project.time.Day r1;
        net.sourceforge.plantuml.project.LoadPlanable $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.project.PlanUtils$1;

        r1 := @parameter0: net.sourceforge.plantuml.project.time.Day;

        $r2 = r0.<net.sourceforge.plantuml.project.PlanUtils$1: net.sourceforge.plantuml.project.LoadPlanable val$p1>;

        $i0 = interfaceinvoke $r2.<net.sourceforge.plantuml.project.LoadPlanable: int getLoadAt(net.sourceforge.plantuml.project.time.Day)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.project.PlanUtils$1: net.sourceforge.plantuml.project.LoadPlanable val$p2>;

        $i1 = interfaceinvoke $r3.<net.sourceforge.plantuml.project.LoadPlanable: int getLoadAt(net.sourceforge.plantuml.project.time.Day)>(r1);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        return $i2;
    }
}
