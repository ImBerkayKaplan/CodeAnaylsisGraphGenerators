public class net.sourceforge.plantuml.sequencediagram.DottedNumber extends java.lang.Object
{
    private final java.util.List nums;
    private final java.util.List separators;

    private void <init>(java.util.List, java.util.List)
    {
        net.sourceforge.plantuml.sequencediagram.DottedNumber r0;
        java.util.List r1, r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.DottedNumber;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List separators> = r2;

        return;
    }

    public static net.sourceforge.plantuml.sequencediagram.DottedNumber create(java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, r8;
        java.util.regex.Matcher r2;
        java.util.ArrayList $r3, $r5;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.DottedNumber $r7;
        char $c0;
        int $i1;
        java.lang.Integer $r9;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\d+)|(\\D+)");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group()>();

        $c0 = virtualinvoke r8.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.DottedNumber: boolean isDigit(char)>($c0);

        if $z1 == 0 goto label2;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label3;

     label2:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r8);

     label3:
        goto label1;

     label4:
        $r7 = new net.sourceforge.plantuml.sequencediagram.DottedNumber;

        specialinvoke $r7.<net.sourceforge.plantuml.sequencediagram.DottedNumber: void <init>(java.util.List,java.util.List)>($r3, $r5);

        return $r7;
    }

    private static boolean isDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 < 48 goto label1;

        if c0 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.sequencediagram.DottedNumber r2;
        java.util.List $r3, $r5, $r8, $r9;
        int $i0, $i1, i2;
        java.lang.String $r4, $r11;
        java.lang.Object $r6, $r10;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.DottedNumber;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r5 = r2.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = r2.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List separators>;

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i2 >= $i1 goto label2;

        $r9 = r2.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List separators>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2);

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void incrementMinor(int)
    {
        net.sourceforge.plantuml.sequencediagram.DottedNumber r0;
        java.util.List $r1, $r2, $r5;
        int $i0, i1, $i2, i3, i4;
        java.lang.Object $r3;
        java.lang.Integer $r4, $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.DottedNumber;

        i3 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i4 = $i2 + i3;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r6);

        return;
    }

    public void incrementIntermediate()
    {
        net.sourceforge.plantuml.sequencediagram.DottedNumber r0;
        java.util.List $r1, $r2;
        int $i0, $i1, $i3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.DottedNumber;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i3 = $i1 - 2;

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: void incrementIntermediate(int)>($i3);

        return;
    }

    public void incrementIntermediate(int)
    {
        int i0, $i2, i3, $i4, i5;
        net.sourceforge.plantuml.sequencediagram.DottedNumber r0;
        java.util.List $r1, $r4, $r5, $r8;
        java.lang.Object $r2;
        java.lang.Integer $r3, $r6, $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.DottedNumber;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.Integer) $r2;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        i3 = $i2 + 1;

        i5 = i0 + 1;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i5 >= $i4 goto label2;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r8.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i5, $r9);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r6);

        return;
    }

    public java.lang.String format(java.text.DecimalFormat)
    {
        net.sourceforge.plantuml.sequencediagram.DottedNumber r0;
        java.util.List $r1, $r8, $r10;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r7, $r12;
        java.text.DecimalFormat r9;
        java.lang.Object $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.DottedNumber;

        r9 := @parameter0: java.text.DecimalFormat;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List separators>;

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i1 != 0 goto label1;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.util.List nums>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = virtualinvoke r9.<java.text.DecimalFormat: java.lang.String format(java.lang.Object)>($r11);

        return $r12;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<b>");

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.DottedNumber: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</b>");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
