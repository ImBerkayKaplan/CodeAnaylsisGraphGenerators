public class net.sourceforge.plantuml.syntax.SyntaxResult extends java.lang.Object
{
    private net.sourceforge.plantuml.UmlDiagramType umlDiagramType;
    private boolean isError;
    private java.lang.String description;
    private java.util.Collection errors;
    private boolean hasCmapData;
    private net.sourceforge.plantuml.error.PSystemError systemError;
    private net.sourceforge.plantuml.LineLocation lineLocation;

    public void <init>()
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        java.util.TreeSet $r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        r0.<net.sourceforge.plantuml.syntax.SyntaxResult: java.util.Collection errors> = $r1;

        return;
    }

    public net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        net.sourceforge.plantuml.UmlDiagramType $r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        $r1 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: net.sourceforge.plantuml.UmlDiagramType umlDiagramType>;

        return $r1;
    }

    public boolean isError()
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        $z0 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: boolean isError>;

        return $z0;
    }

    public java.lang.String getDescription()
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        $r1 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: java.lang.String description>;

        return $r1;
    }

    public java.util.Collection getErrors()
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        java.util.Collection $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        $r1 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: java.util.Collection errors>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public void setUmlDiagramType(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        net.sourceforge.plantuml.UmlDiagramType r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        r0.<net.sourceforge.plantuml.syntax.SyntaxResult: net.sourceforge.plantuml.UmlDiagramType umlDiagramType> = r1;

        return;
    }

    public void setError(boolean)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.syntax.SyntaxResult: boolean isError> = z0;

        return;
    }

    public void setDescription(java.lang.String)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.syntax.SyntaxResult: java.lang.String description> = r1;

        return;
    }

    public void addErrorText(java.lang.String)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        java.lang.String r1;
        java.util.Collection $r2;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: java.util.Collection errors>;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final boolean hasCmapData()
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        $z0 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: boolean hasCmapData>;

        return $z0;
    }

    public final void setCmapData(boolean)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.syntax.SyntaxResult: boolean hasCmapData> = z0;

        return;
    }

    public void setSystemError(net.sourceforge.plantuml.error.PSystemError)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        net.sourceforge.plantuml.error.PSystemError r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        r1 := @parameter0: net.sourceforge.plantuml.error.PSystemError;

        r0.<net.sourceforge.plantuml.syntax.SyntaxResult: net.sourceforge.plantuml.error.PSystemError systemError> = r1;

        return;
    }

    public void generateDiagramDescriptionForError(java.io.OutputStream, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        net.sourceforge.plantuml.error.PSystemError $r1, $r4;
        java.io.OutputStream r2;
        net.sourceforge.plantuml.FileFormatOption r3;
        java.lang.IllegalStateException $r6;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        $r1 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: net.sourceforge.plantuml.error.PSystemError systemError>;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: net.sourceforge.plantuml.error.PSystemError systemError>;

        virtualinvoke $r4.<net.sourceforge.plantuml.error.PSystemError: net.sourceforge.plantuml.core.ImageData exportDiagram(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>(r2, 0, r3);

        return;
    }

    public void setLineLocation(net.sourceforge.plantuml.LineLocation)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        net.sourceforge.plantuml.LineLocation r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        r1 := @parameter0: net.sourceforge.plantuml.LineLocation;

        r0.<net.sourceforge.plantuml.syntax.SyntaxResult: net.sourceforge.plantuml.LineLocation lineLocation> = r1;

        return;
    }

    public net.sourceforge.plantuml.LineLocation getLineLocation()
    {
        net.sourceforge.plantuml.syntax.SyntaxResult r0;
        net.sourceforge.plantuml.LineLocation $r1;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxResult;

        $r1 = r0.<net.sourceforge.plantuml.syntax.SyntaxResult: net.sourceforge.plantuml.LineLocation lineLocation>;

        return $r1;
    }
}
