public class net.sourceforge.plantuml.salt.element.ElementTree extends net.sourceforge.plantuml.salt.element.AbstractElement
{
    private final java.util.List entries;
    private final net.sourceforge.plantuml.ugraphic.UFont font;
    private final net.sourceforge.plantuml.ISkinSimple spriteContainer;
    private final double margin;
    private final net.sourceforge.plantuml.salt.element.TableStrategy strategy;

    public void <init>(net.sourceforge.plantuml.ugraphic.UFont, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.salt.element.TableStrategy)
    {
        net.sourceforge.plantuml.salt.element.ElementTree r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.ugraphic.UFont r2;
        net.sourceforge.plantuml.ISkinSimple r3;
        net.sourceforge.plantuml.salt.element.TableStrategy r4;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementTree;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UFont;

        r3 := @parameter1: net.sourceforge.plantuml.ISkinSimple;

        r4 := @parameter2: net.sourceforge.plantuml.salt.element.TableStrategy;

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.AbstractElement: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.ElementTree: double margin> = 10.0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries> = $r1;

        r0.<net.sourceforge.plantuml.salt.element.ElementTree: double margin> = 10.0;

        r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ugraphic.UFont font> = r2;

        r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ISkinSimple spriteContainer> = r3;

        r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.salt.element.TableStrategy strategy> = r4;

        return;
    }

    public void addEntry(java.lang.String)
    {
        boolean $z0;
        net.sourceforge.plantuml.salt.element.ElementText $r0;
        java.lang.String[] $r1;
        java.lang.String $r2, r10;
        java.util.List $r3, $r9;
        net.sourceforge.plantuml.salt.element.ElementTree r4;
        net.sourceforge.plantuml.ISkinSimple $r5;
        net.sourceforge.plantuml.ugraphic.UFont $r6;
        net.sourceforge.plantuml.salt.element.ElementTreeEntry $r8;
        int i0;

        r4 := @this: net.sourceforge.plantuml.salt.element.ElementTree;

        r10 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $z0 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(1);

        goto label1;

     label2:
        $r0 = new net.sourceforge.plantuml.salt.element.ElementText;

        $r1 = newarray (java.lang.String)[1];

        $r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r10);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r6 = r4.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ugraphic.UFont font>;

        $r5 = r4.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ISkinSimple spriteContainer>;

        specialinvoke $r0.<net.sourceforge.plantuml.salt.element.ElementText: void <init>(java.util.List,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ISkinSimple)>($r3, $r6, $r5);

        $r9 = r4.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries>;

        $r8 = new net.sourceforge.plantuml.salt.element.ElementTreeEntry;

        specialinvoke $r8.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: void <init>(int,net.sourceforge.plantuml.salt.element.Element)>(i0, $r0);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;
    }

    public void addCellToEntry(java.lang.String)
    {
        net.sourceforge.plantuml.salt.element.ElementTree r0;
        java.util.List $r1, $r6, $r10;
        int i0, $i1;
        net.sourceforge.plantuml.salt.element.ElementText $r2;
        java.lang.String[] $r3;
        java.lang.String r4, $r5;
        net.sourceforge.plantuml.ISkinSimple $r7;
        net.sourceforge.plantuml.ugraphic.UFont $r8;
        java.lang.Object $r11;
        net.sourceforge.plantuml.salt.element.ElementTreeEntry $r12;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementTree;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries>;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 <= 0 goto label1;

        $r2 = new net.sourceforge.plantuml.salt.element.ElementText;

        $r3 = newarray (java.lang.String)[1];

        $r5 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r4);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r8 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ugraphic.UFont font>;

        $r7 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ISkinSimple spriteContainer>;

        specialinvoke $r2.<net.sourceforge.plantuml.salt.element.ElementText: void <init>(java.util.List,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ISkinSimple)>($r6, $r8, $r7);

        $r10 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries>;

        $i1 = i0 - 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i1);

        $r12 = (net.sourceforge.plantuml.salt.element.ElementTreeEntry) $r11;

        virtualinvoke $r12.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: void addCell(net.sourceforge.plantuml.salt.element.Element)>($r2);

     label1:
        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder, double, double)
    {
        net.sourceforge.plantuml.salt.element.ElementTree r0;
        java.util.List $r1;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.salt.element.ListWidth $r3;
        byte $b0;
        net.sourceforge.plantuml.Dimension2DDouble $r4;
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7, d8;
        java.lang.Object $r5;
        net.sourceforge.plantuml.salt.element.ElementTreeEntry r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7;
        java.util.Iterator r8;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementTree;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d4 := @parameter1: double;

        d5 := @parameter2: double;

        d6 = 0.0;

        d7 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries>;

        r8 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.salt.element.ElementTreeEntry) $r5;

        r7 = virtualinvoke r6.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionFirstCell(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d2 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d6 = staticinvoke <java.lang.Math: double max(double,double)>(d6, $d2);

        $d3 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d7 = d7 + $d3;

        goto label1;

     label2:
        $r3 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.salt.element.ListWidth getWidthOther(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        d8 = virtualinvoke $r3.<net.sourceforge.plantuml.salt.element.ListWidth: double getTotalWidthWithMargin(double)>(10.0);

        $b0 = d8 cmpl 0.0;

        if $b0 <= 0 goto label3;

        d8 = d8 + 10.0;

     label3:
        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = d6 + d8;

        $d1 = $d0 + 2.0;

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, d7);

        return $r4;
    }

    private net.sourceforge.plantuml.salt.element.ListWidth getWidthOther(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.salt.element.ListWidth $r0, r7, r8;
        net.sourceforge.plantuml.salt.element.ElementTree r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.salt.element.ElementTreeEntry r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;

        r1 := @this: net.sourceforge.plantuml.salt.element.ElementTree;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.salt.element.ListWidth;

        specialinvoke $r0.<net.sourceforge.plantuml.salt.element.ListWidth: void <init>()>();

        r8 = $r0;

        $r2 = r1.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.salt.element.ElementTreeEntry) $r4;

        r7 = virtualinvoke r5.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: net.sourceforge.plantuml.salt.element.ListWidth getPreferredDimensionOtherCell(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        r8 = virtualinvoke r8.<net.sourceforge.plantuml.salt.element.ListWidth: net.sourceforge.plantuml.salt.element.ListWidth mergeMax(net.sourceforge.plantuml.salt.element.ListWidth)>(r7);

        goto label1;

     label2:
        return r8;
    }

    private double getWidth1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.salt.element.ElementTree r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.salt.element.ElementTreeEntry r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementTree;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.salt.element.ElementTreeEntry) $r3;

        r6 = virtualinvoke r4.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionFirstCell(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, int, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        int i0;
        net.sourceforge.plantuml.salt.element.ElementTree r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, $r14;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d13;
        net.sourceforge.plantuml.salt.element.ListWidth r3;
        net.sourceforge.plantuml.salt.element.Skeleton $r4;
        java.util.ArrayList $r6, $r8;
        java.lang.Double $r10, $r11, $r12, $r22, $r24, $r25;
        boolean $z3, $z4;
        java.util.List $r13;
        net.sourceforge.plantuml.salt.element.TableStrategy $r15, $r16, $r18;
        net.sourceforge.plantuml.salt.element.Grid2 $r17;
        java.lang.Object $r19, $r23;
        net.sourceforge.plantuml.salt.element.ElementTreeEntry r20;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r21, r26;
        net.sourceforge.plantuml.ugraphic.UGraphic r27, r28, r31;
        java.util.Iterator r29, r30;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementTree;

        r27 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        i0 := @parameter1: int;

        r26 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        if i0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        r28 = interfaceinvoke r27.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        r2 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementTree: double getWidth1(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        r3 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.salt.element.ListWidth getWidthOther(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r4 = new net.sourceforge.plantuml.salt.element.Skeleton;

        specialinvoke $r4.<net.sourceforge.plantuml.salt.element.Skeleton: void <init>()>();

        d11 = 0.0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r11);

        $d1 = d0 + 5.0;

        d13 = 0.0 + $d1;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d13);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r12);

        r29 = virtualinvoke r3.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r23 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        $r24 = (java.lang.Double) $r23;

        $d9 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        $d10 = $d9 + 10.0;

        d13 = d13 + $d10;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d13);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label2;

     label3:
        $r13 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: java.util.List entries>;

        r30 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r19 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r20 = (net.sourceforge.plantuml.salt.element.ElementTreeEntry) $r19;

        virtualinvoke r20.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: void drawFirstCell(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>(r28, 0.0, d11);

        $d2 = d0 + 10.0;

        virtualinvoke r20.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: void drawSecondCell(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.salt.element.ListWidth,double)>(r28, $d2, d11, r3, 10.0);

        $r21 = virtualinvoke r20.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionFirstCell(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        d3 = virtualinvoke $r21.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d4 = virtualinvoke r20.<net.sourceforge.plantuml.salt.element.ElementTreeEntry: double getXDelta()>();

        $d8 = $d4 - 7.0;

        $d5 = d3 / 2.0;

        $d6 = d11 + $d5;

        $d7 = $d6 - 1.0;

        virtualinvoke $r4.<net.sourceforge.plantuml.salt.element.Skeleton: void add(double,double)>($d8, $d7);

        d11 = d11 + d3;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d11);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label4;

     label5:
        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.ugraphic.color.HColor getColor88()>();

        r31 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r14);

        virtualinvoke $r4.<net.sourceforge.plantuml.salt.element.Skeleton: void draw(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>(r31, 0.0, 0.0);

        $r16 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r15 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_NONE>;

        if $r16 == $r15 goto label6;

        $r17 = new net.sourceforge.plantuml.salt.element.Grid2;

        $r18 = r0.<net.sourceforge.plantuml.salt.element.ElementTree: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        specialinvoke $r17.<net.sourceforge.plantuml.salt.element.Grid2: void <init>(java.util.List,java.util.List,net.sourceforge.plantuml.salt.element.TableStrategy)>($r6, $r8, $r18);

        virtualinvoke $r17.<net.sourceforge.plantuml.salt.element.Grid2: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r31);

     label6:
        return;
    }
}
