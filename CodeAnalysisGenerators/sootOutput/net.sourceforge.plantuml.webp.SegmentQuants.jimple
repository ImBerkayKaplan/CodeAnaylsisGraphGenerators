public class net.sourceforge.plantuml.webp.SegmentQuants extends java.lang.Object
{
    private int qIndex;
    private net.sourceforge.plantuml.webp.SegmentQuant[] segQuants;

    private static net.sourceforge.plantuml.webp.DeltaQ get_delta_q(net.sourceforge.plantuml.webp.BoolDecoder, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.webp.DeltaQ $r0;
        net.sourceforge.plantuml.webp.BoolDecoder r2;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;

        r2 := @parameter0: net.sourceforge.plantuml.webp.BoolDecoder;

        i1 := @parameter1: int;

        $r0 = new net.sourceforge.plantuml.webp.DeltaQ;

        specialinvoke $r0.<net.sourceforge.plantuml.webp.DeltaQ: void <init>()>();

        $r0.<net.sourceforge.plantuml.webp.DeltaQ: int v> = 0;

        $r0.<net.sourceforge.plantuml.webp.DeltaQ: boolean update> = 0;

        $i0 = virtualinvoke r2.<net.sourceforge.plantuml.webp.BoolDecoder: int readBit()>();

        if $i0 <= 0 goto label1;

        $i2 = virtualinvoke r2.<net.sourceforge.plantuml.webp.BoolDecoder: int readLiteral(int)>(4);

        $r0.<net.sourceforge.plantuml.webp.DeltaQ: int v> = $i2;

        $i3 = virtualinvoke r2.<net.sourceforge.plantuml.webp.BoolDecoder: int readBit()>();

        if $i3 <= 0 goto label1;

        $i4 = $r0.<net.sourceforge.plantuml.webp.DeltaQ: int v>;

        $i5 = neg $i4;

        $r0.<net.sourceforge.plantuml.webp.DeltaQ: int v> = $i5;

     label1:
        $i6 = $r0.<net.sourceforge.plantuml.webp.DeltaQ: int v>;

        if $i6 == i1 goto label2;

        $r0.<net.sourceforge.plantuml.webp.DeltaQ: boolean update> = 1;

     label2:
        return $r0;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.webp.SegmentQuants r0;
        net.sourceforge.plantuml.webp.SegmentQuant[] $r1, $r3;
        net.sourceforge.plantuml.webp.SegmentQuant $r2;
        int i0;

        r0 := @this: net.sourceforge.plantuml.webp.SegmentQuants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (net.sourceforge.plantuml.webp.SegmentQuant)[4];

        r0.<net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.SegmentQuant[] segQuants> = $r1;

        i0 = 0;

     label1:
        if i0 >= 4 goto label2;

        $r3 = r0.<net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.SegmentQuant[] segQuants>;

        $r2 = new net.sourceforge.plantuml.webp.SegmentQuant;

        specialinvoke $r2.<net.sourceforge.plantuml.webp.SegmentQuant: void <init>()>();

        $r3[i0] = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public int getqIndex()
    {
        net.sourceforge.plantuml.webp.SegmentQuants r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.SegmentQuants;

        $i0 = r0.<net.sourceforge.plantuml.webp.SegmentQuants: int qIndex>;

        return $i0;
    }

    public net.sourceforge.plantuml.webp.SegmentQuant[] getSegQuants()
    {
        net.sourceforge.plantuml.webp.SegmentQuants r0;
        net.sourceforge.plantuml.webp.SegmentQuant[] $r1;

        r0 := @this: net.sourceforge.plantuml.webp.SegmentQuants;

        $r1 = r0.<net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.SegmentQuant[] segQuants>;

        return $r1;
    }

    public void parse(net.sourceforge.plantuml.webp.BoolDecoder, boolean, boolean) throws java.io.IOException
    {
        net.sourceforge.plantuml.webp.SegmentQuants r0;
        net.sourceforge.plantuml.webp.BoolDecoder r1;
        int $i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, i11;
        net.sourceforge.plantuml.webp.SegmentQuant[] r2;
        net.sourceforge.plantuml.webp.SegmentQuant r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z8, $z10, $z12, $z14;
        net.sourceforge.plantuml.webp.DeltaQ r4, r5, r6, r7, r8;

        r0 := @this: net.sourceforge.plantuml.webp.SegmentQuants;

        r1 := @parameter0: net.sourceforge.plantuml.webp.BoolDecoder;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.webp.BoolDecoder: int readLiteral(int)>(7);

        r0.<net.sourceforge.plantuml.webp.SegmentQuants: int qIndex> = $i0;

        r4 = staticinvoke <net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.DeltaQ get_delta_q(net.sourceforge.plantuml.webp.BoolDecoder,int)>(r1, 0);

        i1 = r4.<net.sourceforge.plantuml.webp.DeltaQ: int v>;

        $z6 = r4.<net.sourceforge.plantuml.webp.DeltaQ: boolean update>;

        if $z6 == 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        r5 = staticinvoke <net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.DeltaQ get_delta_q(net.sourceforge.plantuml.webp.BoolDecoder,int)>(r1, 0);

        i2 = r5.<net.sourceforge.plantuml.webp.DeltaQ: int v>;

        if $z8 != 0 goto label03;

        $z5 = r5.<net.sourceforge.plantuml.webp.DeltaQ: boolean update>;

        if $z5 == 0 goto label04;

     label03:
        $z10 = 1;

        goto label05;

     label04:
        $z10 = 0;

     label05:
        r6 = staticinvoke <net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.DeltaQ get_delta_q(net.sourceforge.plantuml.webp.BoolDecoder,int)>(r1, 0);

        i3 = r6.<net.sourceforge.plantuml.webp.DeltaQ: int v>;

        if $z10 != 0 goto label06;

        $z4 = r6.<net.sourceforge.plantuml.webp.DeltaQ: boolean update>;

        if $z4 == 0 goto label07;

     label06:
        $z12 = 1;

        goto label08;

     label07:
        $z12 = 0;

     label08:
        r7 = staticinvoke <net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.DeltaQ get_delta_q(net.sourceforge.plantuml.webp.BoolDecoder,int)>(r1, 0);

        i4 = r7.<net.sourceforge.plantuml.webp.DeltaQ: int v>;

        if $z12 != 0 goto label09;

        $z3 = r7.<net.sourceforge.plantuml.webp.DeltaQ: boolean update>;

        if $z3 == 0 goto label10;

     label09:
        $z14 = 1;

        goto label11;

     label10:
        $z14 = 0;

     label11:
        r8 = staticinvoke <net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.DeltaQ get_delta_q(net.sourceforge.plantuml.webp.BoolDecoder,int)>(r1, 0);

        i5 = r8.<net.sourceforge.plantuml.webp.DeltaQ: int v>;

        if $z14 != 0 goto label12;

        $z2 = r8.<net.sourceforge.plantuml.webp.DeltaQ: boolean update>;

        if $z2 == 0 goto label13;

     label12:
        goto label13;

     label13:
        r2 = r0.<net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.SegmentQuant[] segQuants>;

        i6 = lengthof r2;

        i11 = 0;

     label14:
        if i11 >= i6 goto label17;

        r3 = r2[i11];

        if z0 != 0 goto label15;

        $i10 = r0.<net.sourceforge.plantuml.webp.SegmentQuants: int qIndex>;

        virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: void setQindex(int)>($i10);

        goto label16;

     label15:
        if z1 != 0 goto label16;

        $i7 = virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: int getQindex()>();

        $i8 = r0.<net.sourceforge.plantuml.webp.SegmentQuants: int qIndex>;

        $i9 = $i7 + $i8;

        virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: void setQindex(int)>($i9);

     label16:
        virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: void setY1dc(int)>(i1);

        virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: void setY2dc(int)>(i2);

        virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: void setY2ac_delta_q(int)>(i3);

        virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: void setUvdc_delta_q(int)>(i4);

        virtualinvoke r3.<net.sourceforge.plantuml.webp.SegmentQuant: void setUvac_delta_q(int)>(i5);

        i11 = i11 + 1;

        goto label14;

     label17:
        return;
    }

    public void setSegQuants(net.sourceforge.plantuml.webp.SegmentQuant[])
    {
        net.sourceforge.plantuml.webp.SegmentQuants r0;
        net.sourceforge.plantuml.webp.SegmentQuant[] r1;

        r0 := @this: net.sourceforge.plantuml.webp.SegmentQuants;

        r1 := @parameter0: net.sourceforge.plantuml.webp.SegmentQuant[];

        r0.<net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.SegmentQuant[] segQuants> = r1;

        return;
    }
}
