public class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale extends net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile implements net.sourceforge.plantuml.creole.Stencil, net.sourceforge.plantuml.style.Styleable
{
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile;
    private final net.sourceforge.plantuml.svek.image.Opale opale;
    private final net.sourceforge.plantuml.sequencediagram.NotePosition notePosition;
    private final double suppSpace;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneNote;

    public net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r6;

        r6 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activityDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName note>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    public java.util.Set getSwimlanes()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1, $r8;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r5;
        java.util.Set $r3, $r6, $r9;
        java.util.HashSet $r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneNote>;

        if $r1 == null goto label1;

        $r4 = new java.util.HashSet;

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r6);

        $r8 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneNote>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        return $r9;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        return $r3;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        return $r2;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()>();

        return $r2;
    }

    public java.util.Collection getMyChildren()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r1;
        java.util.Set $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1);

        return $r2;
    }

    public static net.sourceforge.plantuml.activitydiagram3.ftile.Ftile create(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, java.util.Collection, net.sourceforge.plantuml.ISkinParam, boolean)
    {
        java.util.Collection r0;
        int $i0, $i1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.ISkinParam r5;
        boolean z0;
        net.sourceforge.plantuml.activitydiagram3.PositionedNote $r6;
        java.lang.IllegalArgumentException $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNotes $r8;

        r2 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r0 := @parameter1: java.util.Collection;

        r5 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        z0 := @parameter3: boolean;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 <= 1 goto label1;

        $r8 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNotes;

        specialinvoke $r8.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNotes: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,java.util.Collection,net.sourceforge.plantuml.ISkinParam)>(r2, r0, r5);

        return $r8;

     label1:
        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i1 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label2:
        $r1 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        $r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (net.sourceforge.plantuml.activitydiagram3.PositionedNote) $r4;

        specialinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.PositionedNote,net.sourceforge.plantuml.ISkinParam,boolean)>(r2, $r6, r5, z0);

        return $r1;
    }

    private void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.PositionedNote, net.sourceforge.plantuml.ISkinParam, boolean)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1;
        net.sourceforge.plantuml.ISkinParam $r2, r35;
        net.sourceforge.plantuml.activitydiagram3.PositionedNote r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r4;
        net.sourceforge.plantuml.graphic.color.Colors $r5, $r21, $r34;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r6;
        net.sourceforge.plantuml.sequencediagram.NoteType $r7, $r8;
        net.sourceforge.plantuml.skin.rose.Rose $r9;
        net.sourceforge.plantuml.ugraphic.UStroke $r11, r36;
        boolean $z0, $z1, z2;
        net.sourceforge.plantuml.ColorParam $r12, $r13;
        net.sourceforge.plantuml.graphic.FontConfiguration $r14, r40;
        net.sourceforge.plantuml.FontParam $r15;
        net.sourceforge.plantuml.creole.Sheet r16;
        net.sourceforge.plantuml.style.StyleSignature $r18;
        net.sourceforge.plantuml.style.StyleBuilder $r19;
        net.sourceforge.plantuml.style.Style $r20, r37;
        net.sourceforge.plantuml.style.PName $r22, $r26, $r32;
        net.sourceforge.plantuml.style.Value $r23, $r27, $r33;
        net.sourceforge.plantuml.api.ThemeStyle $r24, $r28, $r30;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r25, $r29, $r31;
        net.sourceforge.plantuml.ugraphic.color.HColor r38, r39;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.LineBreakStrategy r41;
        net.sourceforge.plantuml.AlignmentParam $r42;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r43;
        net.sourceforge.plantuml.creole.CreoleMode $r44;
        net.sourceforge.plantuml.creole.SheetBuilder $r45;
        net.sourceforge.plantuml.cucadiagram.Display $r46;
        net.sourceforge.plantuml.creole.SheetBlock2 $r47;
        net.sourceforge.plantuml.creole.SheetBlock1 $r48;
        net.sourceforge.plantuml.svek.image.Opale $r49;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r3 := @parameter1: net.sourceforge.plantuml.activitydiagram3.PositionedNote;

        r35 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        z2 := @parameter3: boolean;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ISkinParam skinParam()>();

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile: void <init>(net.sourceforge.plantuml.ISkinParam)>($r2);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: double suppSpace> = 20.0;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: double suppSpace> = 20.0;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.PositionedNote: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneNote()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneNote> = $r4;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.PositionedNote: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        if $r5 == null goto label1;

        $r34 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.PositionedNote: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r35 = virtualinvoke $r34.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ISkinParam mute(net.sourceforge.plantuml.ISkinParam)>(r35);

     label1:
        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile> = r1;

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.PositionedNote: net.sourceforge.plantuml.sequencediagram.NotePosition getNotePosition()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.sequencediagram.NotePosition notePosition> = $r6;

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.PositionedNote: net.sourceforge.plantuml.sequencediagram.NoteType getType()>();

        $r8 = <net.sourceforge.plantuml.sequencediagram.NoteType: net.sourceforge.plantuml.sequencediagram.NoteType FLOATING_NOTE>;

        if $r7 != $r8 goto label2;

        z2 = 0;

     label2:
        $r9 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r11 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>()>();

        r36 = $r11;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label3;

        $r18 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r19 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r20 = virtualinvoke $r18.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r19);

        $r21 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.PositionedNote: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r37 = virtualinvoke $r20.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.graphic.color.Colors)>($r21);

        $r22 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r23 = virtualinvoke r37.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r22);

        $r24 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r38 = interfaceinvoke $r23.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r24, $r25);

        $r26 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r27 = virtualinvoke r37.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r26);

        $r28 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r29 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r39 = interfaceinvoke $r27.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r28, $r29);

        $r30 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r31 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r40 = virtualinvoke r37.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r30, $r31);

        $r32 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r33 = virtualinvoke r37.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r32);

        d0 = interfaceinvoke $r33.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r41 = virtualinvoke r37.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        r36 = virtualinvoke r37.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        goto label6;

     label3:
        $r12 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBackground>;

        r38 = virtualinvoke $r9.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>(r35, $r12);

        $r13 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBorder>;

        r39 = virtualinvoke $r9.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>(r35, $r13);

        $r14 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r15 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam NOTE>;

        specialinvoke $r14.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r35, $r15, null);

        r40 = $r14;

        $z1 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>(null);

        if $z1 == 0 goto label4;

        $d1 = 4.0;

        goto label5;

     label4:
        $d1 = 0.0;

     label5:
        d0 = $d1;

        r41 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

     label6:
        $r42 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam noteTextAlignment>;

        r43 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment(net.sourceforge.plantuml.AlignmentParam,net.sourceforge.plantuml.skin.ArrowDirection,boolean,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r42, null, 0, null);

        $r44 = <net.sourceforge.plantuml.creole.CreoleMode: net.sourceforge.plantuml.creole.CreoleMode FULL>;

        $r45 = staticinvoke <net.sourceforge.plantuml.creole.Parser: net.sourceforge.plantuml.creole.SheetBuilder build(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.creole.CreoleMode)>(r40, r43, r35, $r44);

        $r46 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.PositionedNote: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        r16 = interfaceinvoke $r45.<net.sourceforge.plantuml.creole.SheetBuilder: net.sourceforge.plantuml.creole.Sheet createSheet(net.sourceforge.plantuml.cucadiagram.Display)>($r46);

        $r47 = new net.sourceforge.plantuml.creole.SheetBlock2;

        $r48 = new net.sourceforge.plantuml.creole.SheetBlock1;

        $d2 = interfaceinvoke r35.<net.sourceforge.plantuml.ISkinParam: double getPadding()>();

        specialinvoke $r48.<net.sourceforge.plantuml.creole.SheetBlock1: void <init>(net.sourceforge.plantuml.creole.Sheet,net.sourceforge.plantuml.LineBreakStrategy,double)>(r16, r41, $d2);

        specialinvoke $r47.<net.sourceforge.plantuml.creole.SheetBlock2: void <init>(net.sourceforge.plantuml.creole.SheetBlock1,net.sourceforge.plantuml.creole.Stencil,net.sourceforge.plantuml.ugraphic.UStroke)>($r48, r0, r36);

        $r49 = new net.sourceforge.plantuml.svek.image.Opale;

        specialinvoke $r49.<net.sourceforge.plantuml.svek.image.Opale: void <init>(double,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.graphic.TextBlock,boolean,net.sourceforge.plantuml.ugraphic.UStroke)>(d0, r39, r38, $r47, z2, r36);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale> = $r49;

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getTranslate(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2, r4;
        net.sourceforge.plantuml.svek.image.Opale $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r6;
        double $d0, $d1, $d2, d3, $d4, d5;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r7, $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r9;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = $d0 - $d1;

        d3 = $d2 / 2.0;

        $r8 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.sequencediagram.NotePosition notePosition>;

        $r7 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if $r8 != $r7 goto label1;

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d5 = $d4 + 20.0;

        goto label2;

     label1:
        d5 = 0.0;

     label2:
        $r9 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d5, d3);

        return $r9;
    }

    public net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0, $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r1;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r5;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r3 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        if r0 != $r2 goto label1;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>()>();

        return $r5;

     label1:
        $r4 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.graphic.StringBounder)>(r0, r3);

        return $r4;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getTranslateForOpale(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3;
        net.sourceforge.plantuml.svek.image.Opale $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r5;
        double $d0, $d1, $d2, d3, $d4, $d5, d6;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r6, $r7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8, $r9;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = $d0 - $d1;

        d3 = $d2 / 2.0;

        $r7 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.sequencediagram.NotePosition notePosition>;

        $r6 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if $r7 != $r6 goto label1;

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d3);

        return $r9;

     label1:
        $d4 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d6 = $d4 - $d5;

        $r8 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, d3);

        return $r8;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r25, $r27;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r2;
        net.sourceforge.plantuml.svek.image.Opale $r3, $r9, $r14, $r23;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r5, $r6;
        java.awt.geom.Point2D$Double $r7, $r8, $r12, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r10, $r11, r16;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane $r15;
        net.sourceforge.plantuml.Direction r17, r20;
        net.sourceforge.plantuml.ugraphic.UTranslate $r24, $r26;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r28;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $z0 = r0 instanceof net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane;

        if $z0 == 0 goto label1;

        $r15 = (net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane) r0;

        r16 = virtualinvoke $r15.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlane()>();

        goto label2;

     label1:
        r16 = null;

     label2:
        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.sequencediagram.NotePosition notePosition>;

        $r5 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if $r6 != $r5 goto label3;

        r17 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r12 = new java.awt.geom.Point2D$Double;

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = $d5 / 2.0;

        specialinvoke $r12.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d4, $d6);

        $r13 = new java.awt.geom.Point2D$Double;

        $d7 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d8 = $d7 + 20.0;

        $d9 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d10 = $d9 / 2.0;

        specialinvoke $r13.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d8, $d10);

        $r14 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        virtualinvoke $r14.<net.sourceforge.plantuml.svek.image.Opale: void setOpale(net.sourceforge.plantuml.Direction,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r17, $r12, $r13);

        goto label4;

     label3:
        r20 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r7 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = $d0 / 2.0;

        specialinvoke $r7.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, $d1);

        $r8 = new java.awt.geom.Point2D$Double;

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 / 2.0;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>(-20.0, $d3);

        $r9 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        virtualinvoke $r9.<net.sourceforge.plantuml.svek.image.Opale: void setOpale(net.sourceforge.plantuml.Direction,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r20, $r7, $r8);

     label4:
        $z1 = r0 instanceof net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane;

        if $z1 == 0 goto label5;

        $r10 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneNote>;

        if $r10 == null goto label5;

        $r11 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneNote>;

        if r16 != $r11 goto label6;

     label5:
        $r23 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        $r24 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateForOpale(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        $r25 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        virtualinvoke $r23.<net.sourceforge.plantuml.svek.image.Opale: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r25);

     label6:
        $r26 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r27 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r26);

        $r28 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        interfaceinvoke $r27.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r28);

        return;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionFtile(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r4, $r6, $r7;
        net.sourceforge.plantuml.ugraphic.UTranslate r5;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r5 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 == 0 goto label1;

        $r7 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d6 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d7 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $d8 = $d6 + $d7;

        $d9 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getInY()>();

        $d10 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $d11 = $d9 + $d10;

        $d12 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getOutY()>();

        $d13 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $d14 = $d12 + $d13;

        specialinvoke $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double,double)>(r2, $d8, $d11, $d14);

        return $r7;

     label1:
        $r6 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getInY()>();

        $d4 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $d5 = $d3 + $d4;

        specialinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r2, $d2, $d5);

        return $r6;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.image.Opale $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r5;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.Dimension2DDouble $r6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d3 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = 1.0 * $d4;

        $d6 = $d3 + $d5;

        $d7 = $d6 + 20.0;

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d7, d2);

        return $r6;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.svek.image.Opale $r1;
        int $i0, $i1;
        double $d0, d1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.image.Opale: int getMarginX1()>();

        $i1 = neg $i0;

        $d0 = (double) $i1;

        return $d0;
    }

    public double getEndingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.image.Opale $r2, $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double $d0, $d1, $d2, d3;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d3 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale: net.sourceforge.plantuml.svek.image.Opale opale>;

        $i0 = virtualinvoke $r4.<net.sourceforge.plantuml.svek.image.Opale: int getMarginX1()>();

        $d1 = (double) $i0;

        $d2 = $d0 - $d1;

        return $d2;
    }
}
