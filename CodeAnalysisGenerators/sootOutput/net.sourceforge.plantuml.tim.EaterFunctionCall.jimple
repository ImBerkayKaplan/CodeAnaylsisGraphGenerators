public class net.sourceforge.plantuml.tim.EaterFunctionCall extends net.sourceforge.plantuml.tim.Eater
{
    private final java.util.List values;
    private final java.util.Map namedArguments;
    private final boolean isLegacyDefine;
    private final boolean unquoted;

    public void <init>(net.sourceforge.plantuml.StringLocated, boolean, boolean)
    {
        net.sourceforge.plantuml.tim.EaterFunctionCall r0;
        net.sourceforge.plantuml.StringLocated r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        boolean z0, z1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterFunctionCall;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List values> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map namedArguments> = $r3;

        r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: boolean isLegacyDefine> = z0;

        r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: boolean unquoted> = z1;

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterFunctionCall r0;
        char $c0, c1;
        boolean $z0, $z1, $z2, $z4, $z5;
        net.sourceforge.plantuml.tim.expression.TokenStack $r1, $r8, r30, r32;
        net.sourceforge.plantuml.LineLocation $r2, $r9, $r12, $r14, $r18;
        net.sourceforge.plantuml.tim.TContext r3;
        net.sourceforge.plantuml.tim.TMemory r4;
        java.util.List $r5, $r13, $r19;
        net.sourceforge.plantuml.tim.EaterException $r6, $r7;
        java.util.Map $r10, $r16;
        net.sourceforge.plantuml.tim.expression.TValue r15, r22, r28, r31, r33;
        java.lang.String r20, r21, r23, r24, r25, r26, r27, r29;

        r0 := @this: net.sourceforge.plantuml.tim.EaterFunctionCall;

        r3 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r4 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipUntilChar(char)>(40);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void checkAndEatChar(char)>(40);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipSpaces()>();

        $c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: char peekChar()>();

        if $c0 != 41 goto label01;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void checkAndEatChar(char)>(41);

        return;

     label01:
        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipSpaces()>();

        $z0 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: boolean isLegacyDefine>;

        if $z0 == 0 goto label02;

        r20 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.lang.String eatAndGetOptionalQuotedString()>();

        $r18 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        r21 = virtualinvoke r3.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r4, $r18, r20);

        r22 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r21);

        $r19 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List values>;

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>(r22);

        goto label06;

     label02:
        $z1 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: boolean unquoted>;

        if $z1 == 0 goto label04;

        $z5 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: boolean matchAffectation()>();

        if $z5 == 0 goto label03;

        r23 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.lang.String eatAndGetVarname()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void checkAndEatChar(char)>(61);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipSpaces()>();

        r24 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.lang.String eatAndGetOptionalQuotedString()>();

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        r25 = virtualinvoke r3.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r4, $r14, r24);

        r15 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r25);

        $r16 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map namedArguments>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r15);

        goto label06;

     label03:
        r26 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.lang.String eatAndGetOptionalQuotedString()>();

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        r27 = virtualinvoke r3.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r4, $r12, r26);

        r28 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r27);

        $r13 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List values>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r28);

        goto label06;

     label04:
        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: boolean matchAffectation()>();

        if $z2 == 0 goto label05;

        r29 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.lang.String eatAndGetVarname()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void checkAndEatChar(char)>(61);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipSpaces()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenStack eatUntilCloseParenthesisOrComma(net.sourceforge.plantuml.tim.Eater)>(r0);

        r30 = virtualinvoke $r8.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenStack withoutSpace()>();

        virtualinvoke r30.<net.sourceforge.plantuml.tim.expression.TokenStack: void guessFunctions()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        r31 = virtualinvoke r30.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TValue getResult(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r9, r3, r4);

        $r10 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map namedArguments>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r29, r31);

        goto label06;

     label05:
        $r1 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenStack eatUntilCloseParenthesisOrComma(net.sourceforge.plantuml.tim.Eater)>(r0);

        r32 = virtualinvoke $r1.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenStack withoutSpace()>();

        virtualinvoke r32.<net.sourceforge.plantuml.tim.expression.TokenStack: void guessFunctions()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        r33 = virtualinvoke r32.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TValue getResult(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r2, r3, r4);

        $r5 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List values>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r33);

     label06:
        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void skipSpaces()>();

        c1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: char eatOneChar()>();

        if c1 != 44 goto label07;

        goto label01;

     label07:
        if c1 != 41 goto label08;

        goto label10;

     label08:
        $z4 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: boolean unquoted>;

        if $z4 == 0 goto label09;

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("unquoted function/procedure cannot use expression.");

        throw $r7;

     label09:
        $r6 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("call001");

        throw $r6;

     label10:
        return;
    }

    public final java.util.List getValues()
    {
        net.sourceforge.plantuml.tim.EaterFunctionCall r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.tim.EaterFunctionCall;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List values>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public final java.util.Map getNamedArguments()
    {
        net.sourceforge.plantuml.tim.EaterFunctionCall r0;
        java.util.Map $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.tim.EaterFunctionCall;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map namedArguments>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public final java.lang.String getEndOfLine() throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterFunctionCall r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterFunctionCall;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.lang.String eatAllToEnd()>();

        return $r1;
    }
}
