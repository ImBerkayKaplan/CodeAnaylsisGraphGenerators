public class net.sourceforge.plantuml.tim.EaterAffectationDefine extends net.sourceforge.plantuml.tim.Eater
{

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterAffectationDefine r0;
        net.sourceforge.plantuml.StringLocated r1, $r2;

        r0 := @this: net.sourceforge.plantuml.tim.EaterAffectationDefine;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterAffectationDefine r0;
        java.lang.String r1, r2, r6;
        net.sourceforge.plantuml.tim.TContext r3;
        net.sourceforge.plantuml.tim.TMemory r4;
        net.sourceforge.plantuml.LineLocation $r5;
        net.sourceforge.plantuml.tim.expression.TValue r7;
        net.sourceforge.plantuml.tim.TVariableScope $r8;

        r0 := @this: net.sourceforge.plantuml.tim.EaterAffectationDefine;

        r3 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r4 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: void checkAndEatChar(java.lang.String)>("!define");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: void skipSpaces()>();

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: java.lang.String eatAndGetVarname()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: void skipSpaces()>();

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: java.lang.String eatAllToEnd()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        r6 = virtualinvoke r3.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r4, $r5, r2);

        r7 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r6);

        $r8 = <net.sourceforge.plantuml.tim.TVariableScope: net.sourceforge.plantuml.tim.TVariableScope GLOBAL>;

        interfaceinvoke r4.<net.sourceforge.plantuml.tim.TMemory: void putVariable(java.lang.String,net.sourceforge.plantuml.tim.expression.TValue,net.sourceforge.plantuml.tim.TVariableScope)>(r1, r7, $r8);

        return;
    }
}
