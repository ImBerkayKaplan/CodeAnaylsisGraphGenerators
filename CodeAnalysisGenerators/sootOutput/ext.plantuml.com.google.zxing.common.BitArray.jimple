public final class ext.plantuml.com.google.zxing.common.BitArray extends java.lang.Object
{
    public int[] bits;
    public int size;

    public void <init>()
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ext.plantuml.com.google.zxing.common.BitArray: int size> = 0;

        $r1 = newarray (int)[1];

        r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits> = $r1;

        return;
    }

    public void <init>(int)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int i0;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ext.plantuml.com.google.zxing.common.BitArray: int size> = i0;

        $r1 = staticinvoke <ext.plantuml.com.google.zxing.common.BitArray: int[] makeArray(int)>(i0);

        r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits> = $r1;

        return;
    }

    public int getSize()
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int $i0;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        $i0 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        return $i0;
    }

    public int getSizeInBytes()
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int $i0, $i1, $i2;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        $i0 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        $i1 = $i0 + 7;

        $i2 = $i1 >> 3;

        return $i2;
    }

    private void ensureCapacity(int)
    {
        int i0, $i1, $i2, $i3;
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int[] $r1, r2, $r3, $r4;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i0 := @parameter0: int;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i1 = lengthof $r1;

        $i2 = $i1 << 5;

        if i0 <= $i2 goto label1;

        r2 = staticinvoke <ext.plantuml.com.google.zxing.common.BitArray: int[] makeArray(int)>(i0);

        $r4 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $r3 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i3 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i3);

        r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits> = r2;

     label1:
        return;
    }

    public boolean get(int)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1;
        boolean $z0;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i0 := @parameter0: int;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i1 = i0 >> 5;

        $i4 = $r1[$i1];

        $i2 = i0 & 31;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void set(int)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i0 := @parameter0: int;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i1 = i0 >> 5;

        $i4 = $r1[$i1];

        $i2 = i0 & 31;

        $i3 = 1 << $i2;

        $i5 = $i4 | $i3;

        $r1[$i1] = $i5;

        return;
    }

    public void flip(int)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i0 := @parameter0: int;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i1 = i0 >> 5;

        $i4 = $r1[$i1];

        $i2 = i0 & 31;

        $i3 = 1 << $i2;

        $i5 = $i4 ^ $i3;

        $r1[$i1] = $i5;

        return;
    }

    public void setBulk(int, int)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int i0, i1, $i2;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i2 = i0 >> 5;

        $r1[$i2] = i1;

        return;
    }

    public void clear()
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int[] $r1, $r2;
        int i0, i1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean isRange(int, int, boolean)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i8, i9, i10, $i11, $i12, i13, i14, $i15;
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int[] $r1;
        boolean z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i0 := @parameter0: int;

        i8 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i8 >= i0 goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label01:
        if i8 != i0 goto label02;

        return 1;

     label02:
        i9 = i8 + -1;

        i1 = i0 >> 5;

        i2 = i9 >> 5;

        i10 = i1;

     label03:
        if i10 > i2 goto label14;

        if i10 <= i1 goto label04;

        $i11 = 0;

        goto label05;

     label04:
        $i11 = i0 & 31;

     label05:
        i3 = $i11;

        if i10 >= i2 goto label06;

        $i12 = 31;

        goto label07;

     label06:
        $i12 = i9 & 31;

     label07:
        i4 = $i12;

        if i3 != 0 goto label08;

        if $i12 != 31 goto label08;

        i13 = -1;

        goto label10;

     label08:
        i13 = 0;

        i14 = i3;

     label09:
        if i14 > i4 goto label10;

        $i7 = 1 << i14;

        i13 = i13 | $i7;

        i14 = i14 + 1;

        goto label09;

     label10:
        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i5 = $r1[i10];

        $i6 = $i5 & i13;

        if z0 == 0 goto label11;

        $i15 = i13;

        goto label12;

     label11:
        $i15 = 0;

     label12:
        if $i6 == $i15 goto label13;

        return 0;

     label13:
        i10 = i10 + 1;

        goto label03;

     label14:
        return 1;
    }

    public void appendBit(boolean)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        z0 := @parameter0: boolean;

        $i0 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        $i1 = $i0 + 1;

        specialinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: void ensureCapacity(int)>($i1);

        if z0 == 0 goto label1;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i4 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        $i5 = $i4 >> 5;

        $i9 = $r1[$i5];

        $i6 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        $i7 = $i6 & 31;

        $i8 = 1 << $i7;

        $i10 = $i9 | $i8;

        $r1[$i5] = $i10;

     label1:
        $i2 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        $i3 = $i2 + 1;

        r0.<ext.plantuml.com.google.zxing.common.BitArray: int size> = $i3;

        return;
    }

    public void appendBits(int, int)
    {
        int i0, $i1, $i2, i3, $i4, $i5, $i6, i7;
        java.lang.IllegalArgumentException $r0;
        ext.plantuml.com.google.zxing.common.BitArray r1;
        boolean $z0;

        r1 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 32 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Num bits must be between 0 and 32");

        throw $r0;

     label2:
        $i1 = r1.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        $i2 = $i1 + i0;

        specialinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: void ensureCapacity(int)>($i2);

        i7 = i0;

     label3:
        if i7 <= 0 goto label6;

        $i4 = i7 - 1;

        $i5 = i3 >> $i4;

        $i6 = $i5 & 1;

        if $i6 != 1 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: void appendBit(boolean)>($z0);

        i7 = i7 + -1;

        goto label3;

     label6:
        return;
    }

    public void appendBitArray(ext.plantuml.com.google.zxing.common.BitArray)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0, r1;
        int i0, $i1, $i2, i3;
        boolean $z0;

        r1 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        r0 := @parameter0: ext.plantuml.com.google.zxing.common.BitArray;

        i0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        $i1 = r1.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        $i2 = $i1 + i0;

        specialinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: void ensureCapacity(int)>($i2);

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $z0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: boolean get(int)>(i3);

        virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: void appendBit(boolean)>($z0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void xor(ext.plantuml.com.google.zxing.common.BitArray)
    {
        ext.plantuml.com.google.zxing.common.BitArray r0, r2;
        int[] $r1, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        r2 := @parameter0: ext.plantuml.com.google.zxing.common.BitArray;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i1 = lengthof $r1;

        $r3 = r2.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sizes don\'t match");

        throw $r7;

     label1:
        i6 = 0;

     label2:
        $r4 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i2 = lengthof $r4;

        if i6 >= $i2 goto label3;

        $r5 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i4 = $r5[i6];

        $r6 = r2.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i3 = $r6[i6];

        $i5 = $i4 ^ $i3;

        $r5[i6] = $i5;

        i6 = i6 + 1;

        goto label2;

     label3:
        return;
    }

    public void toBytes(int, byte[], int, int)
    {
        int i0, i1, $i3, $i4, $i5, i6, i7, i8, i9;
        byte[] r0;
        byte $b2;
        ext.plantuml.com.google.zxing.common.BitArray r1;
        boolean $z0;

        r1 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        i6 := @parameter0: int;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        i7 = 0;

     label1:
        if i7 >= i0 goto label5;

        i8 = 0;

        i9 = 0;

     label2:
        if i9 >= 8 goto label4;

        $z0 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: boolean get(int)>(i6);

        if $z0 == 0 goto label3;

        $i4 = 7 - i9;

        $i5 = 1 << $i4;

        i8 = i8 | $i5;

     label3:
        i6 = i6 + 1;

        i9 = i9 + 1;

        goto label2;

     label4:
        $i3 = i1 + i7;

        $b2 = (byte) i8;

        r0[$i3] = $b2;

        i7 = i7 + 1;

        goto label1;

     label5:
        return;
    }

    public int[] getBitArray()
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        return $r1;
    }

    public void reverse()
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int[] $r1, r2;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        boolean $z0;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits>;

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        i1 = r0.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        i9 = 0;

     label1:
        if i9 >= i1 goto label3;

        $i2 = i1 - i9;

        $i3 = $i2 - 1;

        $z0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: boolean get(int)>($i3);

        if $z0 == 0 goto label2;

        $i4 = i9 >> 5;

        $i7 = r2[$i4];

        $i5 = i9 & 31;

        $i6 = 1 << $i5;

        $i8 = $i7 | $i6;

        r2[$i4] = $i8;

     label2:
        i9 = i9 + 1;

        goto label1;

     label3:
        r0.<ext.plantuml.com.google.zxing.common.BitArray: int[] bits> = r2;

        return;
    }

    private static int[] makeArray(int)
    {
        int i0, $i1, i2;
        int[] $r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        $i1 = i0 + 31;

        i2 = $i1 >> 5;

        if i2 <= 1000 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not even an issue :-) We just cancel flashcode generation.");

        throw $r1;

     label1:
        $r0 = newarray (int)[i2];

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        ext.plantuml.com.google.zxing.common.BitArray r1;
        int $i0, $i1, $i2, i3;
        java.lang.String $r3;
        boolean $z0;
        char $c4;

        r1 := @this: ext.plantuml.com.google.zxing.common.BitArray;

        $r0 = new java.lang.StringBuilder;

        $i0 = r1.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i0);

        i3 = 0;

     label1:
        $i1 = r1.<ext.plantuml.com.google.zxing.common.BitArray: int size>;

        if i3 >= $i1 goto label5;

        $i2 = i3 & 7;

        if $i2 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $z0 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: boolean get(int)>(i3);

        if $z0 == 0 goto label3;

        $c4 = 88;

        goto label4;

     label3:
        $c4 = 46;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        i3 = i3 + 1;

        goto label1;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
