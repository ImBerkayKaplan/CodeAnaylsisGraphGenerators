public class net.sourceforge.plantuml.mindmap.StripeFrontier extends java.lang.Object
{
    private final java.util.SortedSet stripes;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.mindmap.StripeFrontier r0;
        java.util.TreeSet $r1;
        net.sourceforge.plantuml.mindmap.Stripe $r2;
        java.util.SortedSet $r3;

        r0 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes> = $r1;

        $r3 = r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        $r2 = new net.sourceforge.plantuml.mindmap.Stripe;

        specialinvoke $r2.<net.sourceforge.plantuml.mindmap.Stripe: void <init>(double,double,double)>(-1.7976931348623157E308, 1.7976931348623157E308, -1.7976931348623157E308);

        interfaceinvoke $r3.<java.util.SortedSet: boolean add(java.lang.Object)>($r2);

        return;
    }

    public boolean isEmpty()
    {
        net.sourceforge.plantuml.mindmap.StripeFrontier r0;
        java.util.SortedSet $r1;
        int $i0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        $i0 = interfaceinvoke $r1.<java.util.SortedSet: int size()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.mindmap.StripeFrontier r0;
        java.util.SortedSet $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public boolean contains(double, double)
    {
        net.sourceforge.plantuml.mindmap.StripeFrontier r0;
        java.util.SortedSet $r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.mindmap.Stripe r5;
        double d0, d1, $d2;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        r2 = interfaceinvoke $r1.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.mindmap.Stripe) $r4;

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.mindmap.Stripe: boolean contains(double)>(d0);

        if $z1 == 0 goto label4;

        $d2 = virtualinvoke r5.<net.sourceforge.plantuml.mindmap.Stripe: double getValue()>();

        $b0 = d1 cmpg $d2;

        if $b0 > 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        goto label1;

     label5:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public double getContact(double, double)
    {
        net.sourceforge.plantuml.mindmap.StripeFrontier r0;
        double d0, d1, $d2, d3;
        java.util.SortedSet r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.mindmap.Stripe r4;

        r0 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet collisionning(double,double)>(d0, d1);

        d3 = -1.7976931348623157E308;

        r2 = interfaceinvoke r1.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.mindmap.Stripe) $r3;

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.mindmap.Stripe: double getValue()>();

        d3 = staticinvoke <java.lang.Math: double max(double,double)>(d3, $d2);

        goto label1;

     label2:
        return d3;
    }

    public void addSegment(double, double, double)
    {
        double d0, d1, d2, $d3, d4;
        byte $b0;
        net.sourceforge.plantuml.mindmap.StripeFrontier r0;
        java.util.SortedSet r1;
        int $i1;
        java.util.Iterator $r2, r18;
        java.lang.Object $r3, $r5;
        boolean $z0;
        net.sourceforge.plantuml.mindmap.Stripe r6, r19;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r14, $r15;
        java.io.PrintStream $r8, $r13;
        java.lang.String $r11, $r16;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d0 cmpg d1;

        if $b0 > 0 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x1=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x2=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r17;

     label1:
        r1 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet collisionning(double,double)>(d1, d0);

        $i1 = interfaceinvoke r1.<java.util.SortedSet: int size()>();

        if $i1 <= 1 goto label4;

        r18 = interfaceinvoke r1.<java.util.SortedSet: java.util.Iterator iterator()>();

        interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        d4 = d1;

     label2:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.mindmap.Stripe) $r5;

        $d3 = virtualinvoke r6.<net.sourceforge.plantuml.mindmap.Stripe: double getStart()>();

        virtualinvoke r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: void addSegment(double,double,double)>(d4, $d3, d2);

        d4 = virtualinvoke r6.<net.sourceforge.plantuml.mindmap.Stripe: double getStart()>();

        goto label2;

     label3:
        virtualinvoke r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: void addSegment(double,double,double)>(d4, d0, d2);

        goto label5;

     label4:
        $r2 = interfaceinvoke r1.<java.util.SortedSet: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (net.sourceforge.plantuml.mindmap.Stripe) $r3;

        specialinvoke r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: void addSingleInternal(double,double,double,net.sourceforge.plantuml.mindmap.Stripe)>(d1, d0, d2, r19);

     label5:
        return;
    }

    private void addSingleInternal(double, double, double, net.sourceforge.plantuml.mindmap.Stripe)
    {
        double d0, $d1, $d2, d3, d4, $d5, $d6, $d7, $d8, $d9;
        net.sourceforge.plantuml.mindmap.Stripe r0, $r3, $r6, $r8;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.mindmap.StripeFrontier r1;
        java.util.SortedSet $r2, $r4, $r7, $r9;
        boolean z0, $z1, $z3, $z4;
        java.lang.AssertionError $r5, $r10;

        r1 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        d3 := @parameter0: double;

        d4 := @parameter1: double;

        d0 := @parameter2: double;

        r0 := @parameter3: net.sourceforge.plantuml.mindmap.Stripe;

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: double getValue()>();

        $b0 = d0 cmpg $d1;

        if $b0 > 0 goto label1;

        return;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        z0 = interfaceinvoke $r2.<java.util.SortedSet: boolean remove(java.lang.Object)>(r0);

        $z1 = <net.sourceforge.plantuml.mindmap.StripeFrontier: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if z0 != 0 goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $d2 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: double getStart()>();

        $b1 = $d2 cmpl d3;

        if $b1 == 0 goto label3;

        $r9 = r1.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        $r8 = new net.sourceforge.plantuml.mindmap.Stripe;

        $d8 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: double getStart()>();

        $d9 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: double getValue()>();

        specialinvoke $r8.<net.sourceforge.plantuml.mindmap.Stripe: void <init>(double,double,double)>($d8, d3, $d9);

        interfaceinvoke $r9.<java.util.SortedSet: boolean add(java.lang.Object)>($r8);

     label3:
        $r4 = r1.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        $r3 = new net.sourceforge.plantuml.mindmap.Stripe;

        specialinvoke $r3.<net.sourceforge.plantuml.mindmap.Stripe: void <init>(double,double,double)>(d3, d4, d0);

        interfaceinvoke $r4.<java.util.SortedSet: boolean add(java.lang.Object)>($r3);

        $d5 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: double getEnd()>();

        $b2 = d4 cmpl $d5;

        if $b2 == 0 goto label4;

        $r7 = r1.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        $r6 = new net.sourceforge.plantuml.mindmap.Stripe;

        $d6 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: double getEnd()>();

        $d7 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: double getValue()>();

        specialinvoke $r6.<net.sourceforge.plantuml.mindmap.Stripe: void <init>(double,double,double)>(d4, $d6, $d7);

        interfaceinvoke $r7.<java.util.SortedSet: boolean add(java.lang.Object)>($r6);

     label4:
        $z3 = <net.sourceforge.plantuml.mindmap.StripeFrontier: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $z4 = specialinvoke r1.<net.sourceforge.plantuml.mindmap.StripeFrontier: boolean checkConsistent()>();

        if $z4 != 0 goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        return;
    }

    private boolean checkConsistent()
    {
        net.sourceforge.plantuml.mindmap.StripeFrontier r0;
        java.util.SortedSet $r1;
        java.util.Iterator r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1, $b2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.mindmap.Stripe r4, r5;

        r0 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        r5 = null;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        r2 = interfaceinvoke $r1.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.mindmap.Stripe) $r3;

        if r5 != null goto label2;

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.mindmap.Stripe: double getStart()>();

        $b2 = $d3 cmpl -1.7976931348623157E308;

        if $b2 == 0 goto label2;

        return 0;

     label2:
        if r5 == null goto label3;

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.mindmap.Stripe: double getEnd()>();

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.mindmap.Stripe: double getStart()>();

        $b1 = $d1 cmpl $d2;

        if $b1 == 0 goto label3;

        return 0;

     label3:
        r5 = r4;

        goto label1;

     label4:
        $d0 = virtualinvoke r5.<net.sourceforge.plantuml.mindmap.Stripe: double getEnd()>();

        $b0 = $d0 cmpl 1.7976931348623157E308;

        if $b0 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private java.util.SortedSet collisionning(double, double)
    {
        java.util.TreeSet $r0;
        net.sourceforge.plantuml.mindmap.StripeFrontier r2;
        java.util.SortedSet $r3;
        java.util.Iterator r4;
        java.lang.UnsupportedOperationException $r5;
        java.lang.Object $r6;
        net.sourceforge.plantuml.mindmap.Stripe r7;
        double d0, $d1, d2, $d3;
        byte $b0, $b1;
        boolean $z1;

        r2 := @this: net.sourceforge.plantuml.mindmap.StripeFrontier;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.mindmap.StripeFrontier: java.util.SortedSet stripes>;

        r4 = interfaceinvoke $r3.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.mindmap.Stripe) $r6;

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.mindmap.Stripe: double getEnd()>();

        $b0 = d0 cmpl $d1;

        if $b0 < 0 goto label2;

        goto label1;

     label2:
        interfaceinvoke $r0.<java.util.SortedSet: boolean add(java.lang.Object)>(r7);

        $d3 = virtualinvoke r7.<net.sourceforge.plantuml.mindmap.Stripe: double getEnd()>();

        $b1 = d2 cmpg $d3;

        if $b1 > 0 goto label3;

        return $r0;

     label3:
        goto label1;

     label4:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/mindmap/StripeFrontier;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.mindmap.StripeFrontier: boolean $assertionsDisabled> = $z1;

        return;
    }
}
