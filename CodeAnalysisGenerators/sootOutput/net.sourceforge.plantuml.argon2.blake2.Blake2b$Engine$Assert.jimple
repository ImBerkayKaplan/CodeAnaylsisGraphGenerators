public final class net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert extends java.lang.Object
{
    public static final java.lang.String exclusiveUpperBound;
    public static final java.lang.String inclusiveUpperBound;
    public static final java.lang.String exclusiveLowerBound;
    public static final java.lang.String inclusiveLowerBound;

    public void <init>()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert r0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String assertFail(java.lang.String, java.lang.Number, java.lang.String, java.lang.Number)
    {
        java.lang.Exception $r0;
        java.lang.String r1, r3, $r6;
        java.lang.Object[] $r2;
        java.lang.Number r4, r5;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Number;

        r1 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.Number;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>()>();

        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r2);

        return $r6;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String inclusiveLowerBound> = "\'%s\' %d is < %d";

        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String exclusiveLowerBound> = "\'%s\' %d is <= %d";

        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String inclusiveUpperBound> = "\'%s\' %d is > %d";

        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String exclusiveUpperBound> = "\'%s\' %d is >= %d";

        return;
    }
}
