class net.sourceforge.plantuml.UmlDiagram$1 extends java.lang.Object implements net.sourceforge.plantuml.graphic.UDrawable
{
    final net.sourceforge.plantuml.svek.TextBlockBackcolored val$graphicStrings;
    final java.awt.image.BufferedImage val$im;

    void <init>(net.sourceforge.plantuml.svek.TextBlockBackcolored, java.awt.image.BufferedImage)
    {
        net.sourceforge.plantuml.UmlDiagram$1 r0;
        net.sourceforge.plantuml.svek.TextBlockBackcolored r1;
        java.awt.image.BufferedImage r2;

        r0 := @this: net.sourceforge.plantuml.UmlDiagram$1;

        r1 := @parameter0: net.sourceforge.plantuml.svek.TextBlockBackcolored;

        r2 := @parameter1: java.awt.image.BufferedImage;

        r0.<net.sourceforge.plantuml.UmlDiagram$1: net.sourceforge.plantuml.svek.TextBlockBackcolored val$graphicStrings> = r1;

        r0.<net.sourceforge.plantuml.UmlDiagram$1: java.awt.image.BufferedImage val$im> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.UmlDiagram$1 r0;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r1, $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r4;
        double d0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.ugraphic.UImage $r6, $r10;
        net.sourceforge.plantuml.ugraphic.PixelImage $r7;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r8;
        java.awt.image.BufferedImage $r9;
        net.sourceforge.plantuml.ugraphic.UGraphic r11, r12;

        r0 := @this: net.sourceforge.plantuml.UmlDiagram$1;

        r11 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.UmlDiagram$1: net.sourceforge.plantuml.svek.TextBlockBackcolored val$graphicStrings>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.svek.TextBlockBackcolored: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r11);

        $r2 = r0.<net.sourceforge.plantuml.UmlDiagram$1: net.sourceforge.plantuml.svek.TextBlockBackcolored val$graphicStrings>;

        $r3 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.TextBlockBackcolored: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        d0 = virtualinvoke $r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d0);

        r12 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r6 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r7 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r9 = r0.<net.sourceforge.plantuml.UmlDiagram$1: java.awt.image.BufferedImage val$im>;

        $r8 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_NEAREST_NEIGHBOR>;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r9, $r8);

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r7);

        $r10 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UImage: net.sourceforge.plantuml.ugraphic.UImage scale(double)>(3.0);

        interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r10);

        return;
    }
}
