class net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine extends net.sourceforge.plantuml.svek.extremity.Extremity
{
    private final java.awt.geom.Point2D contact;
    private final double angle;

    public java.awt.geom.Point2D somePoint()
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact>;

        return $r1;
    }

    public void <init>(java.awt.geom.Point2D, double)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine r0;
        java.awt.geom.Point2D$Double $r1;
        java.awt.geom.Point2D r2;
        double $d0, $d1, d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine;

        r2 := @parameter0: java.awt.geom.Point2D;

        d2 := @parameter1: double;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.Extremity: void <init>()>();

        $r1 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact> = $r1;

        $d3 = d2 + 1.5707963267948966;

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: double manageround(double)>($d3);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: double angle> = $d4;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r26, $r27, $r29;
        net.sourceforge.plantuml.ugraphic.UParam $r1;
        net.sourceforge.plantuml.ugraphic.UStroke $r2, $r21;
        double d0, $d1, d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine r3;
        java.awt.geom.AffineTransform r4;
        java.awt.geom.Point2D$Double $r5, $r7, $r9, $r11, $r13;
        java.awt.geom.Point2D $r19, $r20, $r24, $r25, $r30, $r31;
        net.sourceforge.plantuml.ugraphic.UTranslate $r23;
        net.sourceforge.plantuml.ugraphic.UEllipse $r28;

        r3 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UParam getParam()>();

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        $d1 = 4.0 + d0;

        d2 = $d1 - 1.0;

        $d3 = 4.0 + d0;

        d4 = $d3 - 1.0;

        $d5 = r3.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: double angle>;

        r4 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double)>($d5);

        $r5 = new java.awt.geom.Point2D$Double;

        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, 0.0);

        $r7 = new java.awt.geom.Point2D$Double;

        $d6 = -4.0 - d2;

        $d7 = $d6 - 3.0;

        specialinvoke $r7.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, 0.0);

        $r9 = new java.awt.geom.Point2D$Double;

        $d8 = -4.0 - d2;

        $d9 = $d8 - 3.0;

        specialinvoke $r9.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d9, 0.0);

        $r11 = new java.awt.geom.Point2D$Double;

        $d10 = neg d4;

        specialinvoke $r11.<java.awt.geom.Point2D$Double: void <init>(double,double)>(-4.0, $d10);

        $r13 = new java.awt.geom.Point2D$Double;

        specialinvoke $r13.<java.awt.geom.Point2D$Double: void <init>(double,double)>(-4.0, d4);

        virtualinvoke r4.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r11, $r11);

        virtualinvoke r4.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r13, $r13);

        virtualinvoke r4.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r7, $r7);

        virtualinvoke r4.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r9, $r9);

        $r19 = r3.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact>;

        $d11 = virtualinvoke $r19.<java.awt.geom.Point2D: double getX()>();

        $r20 = r3.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact>;

        $d12 = virtualinvoke $r20.<java.awt.geom.Point2D: double getY()>();

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r0, $d11, $d12, $r7, $r5);

        $r21 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r21.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(d0);

        $r23 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $r24 = r3.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact>;

        $d13 = virtualinvoke $r24.<java.awt.geom.Point2D: double getX()>();

        $d14 = virtualinvoke $r9.<java.awt.geom.Point2D: double getX()>();

        $d15 = $d13 + $d14;

        $d16 = $d15 - d2;

        $r25 = r3.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact>;

        $d17 = virtualinvoke $r25.<java.awt.geom.Point2D: double getY()>();

        $d18 = virtualinvoke $r9.<java.awt.geom.Point2D: double getY()>();

        $d19 = $d17 + $d18;

        $d20 = $d19 - d2;

        specialinvoke $r23.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d16, $d20);

        $r26 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r23);

        $r27 = interfaceinvoke $r26.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

        $r28 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d22 = 2.0 * d2;

        $d21 = 2.0 * d2;

        specialinvoke $r28.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d22, $d21);

        interfaceinvoke $r27.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r28);

        $r29 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

        $r30 = r3.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact>;

        $d23 = virtualinvoke $r30.<java.awt.geom.Point2D: double getX()>();

        $r31 = r3.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: java.awt.geom.Point2D contact>;

        $d24 = virtualinvoke $r31.<java.awt.geom.Point2D: double getY()>();

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,java.awt.geom.Point2D,java.awt.geom.Point2D)>($r29, $d23, $d24, $r11, $r13);

        return;
    }

    private static void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, d8, $d9, $d10, $d11;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.ULine $r5;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d6 := @parameter1: double;

        d8 := @parameter2: double;

        r1 := @parameter3: java.awt.geom.Point2D;

        r0 := @parameter4: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d5 = $d3 - $d4;

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d7 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d9 = d6 + $d7;

        $d10 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d11 = d8 + $d10;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d9, $d11);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = new net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(d2, d5);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        return;
    }
}
