public class net.sourceforge.plantuml.code.CompressionBrotli extends java.lang.Object implements net.sourceforge.plantuml.code.Compression
{

    public void <init>()
    {
        net.sourceforge.plantuml.code.CompressionBrotli r0;

        r0 := @this: net.sourceforge.plantuml.code.CompressionBrotli;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public byte[] compress(byte[])
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.code.CompressionBrotli r1;
        byte[] r2;

        r1 := @this: net.sourceforge.plantuml.code.CompressionBrotli;

        r2 := @parameter0: byte[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public net.sourceforge.plantuml.code.ByteArray decompress(byte[]) throws net.sourceforge.plantuml.code.NoPlantumlCompressionException
    {
        net.sourceforge.plantuml.brotli.BrotliInputStream $r0;
        java.io.ByteArrayInputStream $r1;
        byte[] r2, $r4;
        java.io.ByteArrayOutputStream $r3;
        java.io.IOException $r5;
        net.sourceforge.plantuml.code.NoPlantumlCompressionException $r6;
        java.lang.Throwable $r7, $r8, $r9, $r11;
        net.sourceforge.plantuml.code.CompressionBrotli r12;
        net.sourceforge.plantuml.code.ByteArray r15;

        r12 := @this: net.sourceforge.plantuml.code.CompressionBrotli;

        r2 := @parameter0: byte[];

     label01:
        $r0 = new net.sourceforge.plantuml.brotli.BrotliInputStream;

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.brotli.BrotliInputStream: void <init>(java.io.InputStream)>($r1);

     label02:
        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label03:
        staticinvoke <net.sourceforge.plantuml.FileUtils: void copyToStream(java.io.InputStream,java.io.OutputStream)>($r0, $r3);

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r15 = staticinvoke <net.sourceforge.plantuml.code.ByteArray: net.sourceforge.plantuml.code.ByteArray 'from'(byte[])>($r4);

     label04:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void close()>();

     label05:
        virtualinvoke $r0.<net.sourceforge.plantuml.brotli.BrotliInputStream: void close()>();

     label06:
        return r15;

     label07:
        $r11 := @caughtexception;

     label08:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label11:
        throw $r11;

     label12:
        $r8 := @caughtexception;

     label13:
        virtualinvoke $r0.<net.sourceforge.plantuml.brotli.BrotliInputStream: void close()>();

     label14:
        goto label16;

     label15:
        $r7 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

     label16:
        throw $r8;

     label17:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        $r6 = new net.sourceforge.plantuml.code.NoPlantumlCompressionException;

        specialinvoke $r6.<net.sourceforge.plantuml.code.NoPlantumlCompressionException: void <init>(java.lang.Exception)>($r5);

        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label02 to label05 with label12;
        catch java.lang.Throwable from label07 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.io.IOException from label01 to label06 with label17;
        catch java.io.IOException from label07 to label17 with label17;
    }
}
