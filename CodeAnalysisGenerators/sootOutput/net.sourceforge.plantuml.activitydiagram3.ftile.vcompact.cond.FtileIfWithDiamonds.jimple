public class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds extends net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude
{
    private static final double SUPP_WIDTH;
    protected final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1;
    protected final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2;

    public void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1, r2, r4, r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r3;
        net.sourceforge.plantuml.graphic.StringBounder r6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r4 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r1 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r2 := @parameter2: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r5 := @parameter3: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r3 := @parameter4: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r6 := @parameter5: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>(r1, r2, r3);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1> = r4;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2> = r5;

        return;
    }

    public java.util.Collection getMyChildren()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile[] $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r3, $r4, $r5;
        java.util.List $r6;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        $r0 = newarray (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)[4];

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        $r0[0] = $r2;

        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2>;

        $r0[1] = $r3;

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        $r0[2] = $r4;

        $r5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        $r0[3] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r6;
    }

    public int getYdelta1a(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        java.util.Set $r1;
        int $i0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: java.util.Set getSwimlanes()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 <= 1 goto label1;

        return 20;

     label1:
        return 10;
    }

    public int getYdelta1b(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        java.util.Set $r1;
        int $i0;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        boolean $z0;
        byte $b1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: java.util.Set getSwimlanes()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 <= 1 goto label1;

        return 10;

     label1:
        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: boolean hasTwoBranches(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        if $z0 == 0 goto label2;

        $b1 = 6;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        return $b1;
    }

    protected double widthInner(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: double widthInner(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $d2 = $d1 + 20.0;

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d2);

        return $d3;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternalSlow(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3, r5, r6, $r7, r8, $r9;
        int $i0, $i1, $i2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r6 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternalSlow(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry appendBottom(net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry)>(r6);

        r8 = virtualinvoke $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry appendBottom(net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry)>(r5);

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: int getYdelta1a(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: int getYdelta1b(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $i2 = $i0 + $i1;

        $d0 = (double) $i2;

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addDim(double,double)>(0.0, $d0);

        return $r9;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r4, $r7;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3, $r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r5, $r8;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond2(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2>;

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        return;
    }

    protected net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r5, $r6;
        double $d0, $d1, $d2;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getHeight()>();

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: int getYdelta1a(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = (double) $i0;

        $d2 = $d0 + $d1;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate compose(net.sourceforge.plantuml.ugraphic.UTranslate)>($r5);

        return $r6;
    }

    protected net.sourceforge.plantuml.ugraphic.UTranslate getTranslate2(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r5, $r6;
        double $d0, $d1, $d2;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate2(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getHeight()>();

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: int getYdelta1a(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = (double) $i0;

        $d2 = $d0 + $d1;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate compose(net.sourceforge.plantuml.ugraphic.UTranslate)>($r5);

        return $r6;
    }

    protected net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r2, r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3;
        double $d1, $d2, d3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d3 = $d1 - $d2;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d3, 0.0);

        return $r5;
    }

    protected net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond2(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r2, r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3;
        double $d0, $d1, d2, $d3, $d4, $d5, d6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getHeight()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getHeight()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $d5 = $d4 / 2.0;

        d6 = $d3 - $d5;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, d2);

        return $r5;
    }

    public double computeMarginNeedForBranchLabe1(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0;
        double d0, d1, d2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        byte $b0;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        d1 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        d2 = d0 - d1;

        $b0 = d2 cmpl 0.0;

        if $b0 <= 0 goto label1;

        return d2;

     label1:
        return 0.0;
    }

    public double computeMarginNeedForBranchLabe2(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0;
        double d0, $d1, $d2, $d3, d4, $d5, d6;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r5, $r6;
        byte $b0;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d2 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $d3 = $d1 + $d2;

        d4 = $d3 + d0;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d5 = virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        d6 = d4 - $d5;

        $b0 = d6 cmpl 0.0;

        if $b0 <= 0 goto label1;

        return d6;

     label1:
        return 0.0;
    }

    public double computeVerticalMarginNeedForBranchs(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, r1;
        double $d0, $d1, d2, d3, d4;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r5;
        byte $b0;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r1 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $r4 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        d3 = virtualinvoke r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getHeight()>();

        d4 = d2 - d3;

        $b0 = d4 cmpl 0.0;

        if $b0 <= 0 goto label1;

        return d4;

     label1:
        return 0.0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds: double SUPP_WIDTH> = 20.0;

        return;
    }
}
