public class net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid extends net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex
{
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.salt.DataSource, net.sourceforge.plantuml.salt.Dictionary)
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid r0;
        net.sourceforge.plantuml.salt.DataSource r1;
        net.sourceforge.plantuml.salt.Dictionary r2;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid;

        r1 := @parameter0: net.sourceforge.plantuml.salt.DataSource;

        r2 := @parameter1: net.sourceforge.plantuml.salt.Dictionary;

        specialinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r1, r2);

        return;
    }

    public net.sourceforge.plantuml.salt.Terminated create()
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.salt.DataSource $r1, $r8, $r19, $r29;
        java.lang.Object $r2, $r4, $r9, $r14, $r20, $r22, $r31;
        net.sourceforge.plantuml.salt.Terminated r3, $r10, $r21, $r30, r33, r34;
        java.lang.String r5, $r23, r26, $r32;
        int $i0;
        net.sourceforge.plantuml.salt.element.TableStrategy $r6, r27;
        net.sourceforge.plantuml.salt.element.ElementPyramid $r11;
        net.sourceforge.plantuml.salt.Dictionary $r12;
        net.sourceforge.plantuml.salt.Terminator $r13, $r16, $r17, $r18;
        net.sourceforge.plantuml.salt.element.Element $r15;
        char $c1;
        java.lang.AssertionError $r24;
        java.lang.IllegalStateException $r25;
        net.sourceforge.plantuml.salt.Positionner2 $r28;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: boolean ready()>();

        if $z0 != 0 goto label1;

        $r25 = new java.lang.IllegalStateException;

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>()>();

        throw $r25;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.salt.DataSource: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.salt.Terminated) $r2;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r5 = (java.lang.String) $r4;

        $z1 = <net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z3 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("{");

        if $z3 != 0 goto label2;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label2:
        r26 = null;

        r27 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_NONE>;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 != 2 goto label3;

        $c1 = virtualinvoke r5.<java.lang.String: char charAt(int)>(1);

        r27 = staticinvoke <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy fromChar(char)>($c1);

     label3:
        $r6 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE_WITH_TITLE>;

        if r27 != $r6 goto label4;

        $r17 = virtualinvoke r3.<net.sourceforge.plantuml.salt.Terminated: net.sourceforge.plantuml.salt.Terminator getTerminator()>();

        $r18 = <net.sourceforge.plantuml.salt.Terminator: net.sourceforge.plantuml.salt.Terminator NEWCOL>;

        if $r17 != $r18 goto label4;

        $r19 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.salt.DataSource: java.lang.Object next()>();

        $r21 = (net.sourceforge.plantuml.salt.Terminated) $r20;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r23 = (java.lang.String) $r22;

        r26 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String,java.lang.String)>($r23, "\"");

     label4:
        $r28 = new net.sourceforge.plantuml.salt.Positionner2;

        specialinvoke $r28.<net.sourceforge.plantuml.salt.Positionner2: void <init>()>();

     label5:
        $r29 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r30 = interfaceinvoke $r29.<net.sourceforge.plantuml.salt.DataSource: net.sourceforge.plantuml.salt.Terminated peek(int)>(0);

        $r31 = virtualinvoke $r30.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r32 = (java.lang.String) $r31;

        $z4 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>("}");

        if $z4 != 0 goto label8;

        r33 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.Terminated getNextElement()>();

        $r14 = virtualinvoke r33.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r15 = (net.sourceforge.plantuml.salt.element.Element) $r14;

        $z2 = specialinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: boolean isStar(net.sourceforge.plantuml.salt.element.Element)>($r15);

        if $z2 == 0 goto label6;

        $r16 = virtualinvoke r33.<net.sourceforge.plantuml.salt.Terminated: net.sourceforge.plantuml.salt.Terminator getTerminator()>();

        virtualinvoke $r28.<net.sourceforge.plantuml.salt.Positionner2: void mergeLeft(net.sourceforge.plantuml.salt.Terminator)>($r16);

        goto label7;

     label6:
        virtualinvoke $r28.<net.sourceforge.plantuml.salt.Positionner2: void add(net.sourceforge.plantuml.salt.Terminated)>(r33);

     label7:
        goto label5;

     label8:
        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.salt.DataSource: java.lang.Object next()>();

        r34 = (net.sourceforge.plantuml.salt.Terminated) $r9;

        $r10 = new net.sourceforge.plantuml.salt.Terminated;

        $r11 = new net.sourceforge.plantuml.salt.element.ElementPyramid;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.Dictionary getDictionary()>();

        specialinvoke $r11.<net.sourceforge.plantuml.salt.element.ElementPyramid: void <init>(net.sourceforge.plantuml.salt.Positionner2,net.sourceforge.plantuml.salt.element.TableStrategy,java.lang.String,net.sourceforge.plantuml.ISkinSimple)>($r28, r27, r26, $r12);

        $r13 = virtualinvoke r34.<net.sourceforge.plantuml.salt.Terminated: net.sourceforge.plantuml.salt.Terminator getTerminator()>();

        specialinvoke $r10.<net.sourceforge.plantuml.salt.Terminated: void <init>(java.lang.Object,net.sourceforge.plantuml.salt.Terminator)>($r11, $r13);

        return $r10;
    }

    private boolean isStar(net.sourceforge.plantuml.salt.element.Element)
    {
        net.sourceforge.plantuml.salt.element.Element r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.salt.element.ElementText $r1;
        java.lang.String $r2, $r3;
        net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid r4;

        r4 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid;

        r0 := @parameter0: net.sourceforge.plantuml.salt.element.Element;

        $z0 = r0 instanceof net.sourceforge.plantuml.salt.element.ElementText;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = "*";

        $r1 = (net.sourceforge.plantuml.salt.element.ElementText) r0;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.salt.element.ElementText: java.lang.String getText()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public boolean ready()
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid r0;
        net.sourceforge.plantuml.salt.DataSource $r1, $r6;
        net.sourceforge.plantuml.salt.Terminated $r2, $r7;
        java.lang.Object $r3, $r8;
        java.lang.String r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.salt.DataSource: net.sourceforge.plantuml.salt.Terminated peek(int)>(0);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{+");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{^");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{#");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{!");

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{-");

        if $z5 == 0 goto label3;

     label1:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.salt.DataSource: net.sourceforge.plantuml.salt.Terminated peek(int)>(1);

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r5 = (java.lang.String) $r8;

        $z6 = virtualinvoke r5.<java.lang.String: boolean matches(java.lang.String)>("[NSEW]=|T");

        if $z6 == 0 goto label2;

        return 0;

     label2:
        return 1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/salt/factory/ElementFactoryPyramid;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: boolean $assertionsDisabled> = $z1;

        return;
    }
}
