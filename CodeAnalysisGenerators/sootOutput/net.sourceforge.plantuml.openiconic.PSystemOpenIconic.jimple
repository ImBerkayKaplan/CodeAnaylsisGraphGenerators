public class net.sourceforge.plantuml.openiconic.PSystemOpenIconic extends net.sourceforge.plantuml.PlainDiagram
{
    private final java.lang.String iconName;
    private final double factor;

    public void <init>(net.sourceforge.plantuml.core.UmlSource, java.lang.String, double)
    {
        net.sourceforge.plantuml.openiconic.PSystemOpenIconic r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.lang.String r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.openiconic.PSystemOpenIconic;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r2 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.PlainDiagram: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        r0.<net.sourceforge.plantuml.openiconic.PSystemOpenIconic: java.lang.String iconName> = r2;

        r0.<net.sourceforge.plantuml.openiconic.PSystemOpenIconic: double factor> = d0;

        return;
    }

    protected net.sourceforge.plantuml.graphic.UDrawable getRootDrawable(net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.openiconic.PSystemOpenIconic r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.openiconic.OpenIcon r2;
        double $d0;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r3;
        net.sourceforge.plantuml.graphic.TextBlock $r4;
        net.sourceforge.plantuml.FileFormatOption r5;

        r0 := @this: net.sourceforge.plantuml.openiconic.PSystemOpenIconic;

        r5 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        $r1 = r0.<net.sourceforge.plantuml.openiconic.PSystemOpenIconic: java.lang.String iconName>;

        r2 = staticinvoke <net.sourceforge.plantuml.openiconic.OpenIcon: net.sourceforge.plantuml.openiconic.OpenIcon retrieve(java.lang.String)>($r1);

        $r3 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        $d0 = r0.<net.sourceforge.plantuml.openiconic.PSystemOpenIconic: double factor>;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.openiconic.OpenIcon: net.sourceforge.plantuml.graphic.TextBlock asTextBlock(net.sourceforge.plantuml.ugraphic.color.HColor,double)>($r3, $d0);

        return $r4;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.openiconic.PSystemOpenIconic r1;

        r1 := @this: net.sourceforge.plantuml.openiconic.PSystemOpenIconic;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("(Open iconic)");

        return $r0;
    }

    public net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getDefaultMargins()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r0;
        net.sourceforge.plantuml.openiconic.PSystemOpenIconic r1;

        r1 := @this: net.sourceforge.plantuml.openiconic.PSystemOpenIconic;

        $r0 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft same(double)>(5.0);

        return $r0;
    }
}
