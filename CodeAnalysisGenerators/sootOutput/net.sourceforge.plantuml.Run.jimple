public class net.sourceforge.plantuml.Run extends java.lang.Object
{
    private static net.sourceforge.plantuml.utils.Cypher cypher;
    private static java.lang.String commandLine;
    private static final java.lang.String httpProtocol;
    private static final java.lang.String httpsProtocol;

    public void <init>()
    {
        net.sourceforge.plantuml.Run r0;

        r0 := @this: net.sourceforge.plantuml.Run;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws net.sourceforge.plantuml.code.NoPlantumlCompressionException, java.io.IOException, java.lang.InterruptedException
    {
        long l0, $l5, $l6, $l7, $l8, l10;
        java.lang.String[] r1;
        int $i1, $i2, $i3, $i4, $i9;
        net.sourceforge.plantuml.OptionFlags $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r15, $r16, $r20, $r21, $r23, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, z29, $z30, $z31;
        java.lang.StringBuilder $r10, $r11, $r13, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r40, $r41, $r43, $r45, $r46, $r47;
        net.sourceforge.plantuml.security.SecurityProfile $r12;
        java.lang.String $r14, $r28, $r33, $r36, $r42, $r44, $r48, $r50;
        net.sourceforge.plantuml.OptionPreprocOutputMode $r17, $r18;
        net.sourceforge.plantuml.ErrorStatus r19;
        net.sourceforge.plantuml.Stdrpt $r22;
        double $d0, $d1, d2, d3;
        java.io.File $r34, r61;
        java.lang.Object $r35;
        net.sourceforge.plantuml.syntax.LanguageDescriptor $r37;
        net.sourceforge.plantuml.utils.Cypher $r38;
        java.util.List $r49, r60;
        java.awt.HeadlessException $r52;
        java.io.PrintStream $r53, $r54, $r55;
        java.lang.Exception $r56;
        net.sourceforge.plantuml.Option $r57;
        net.sourceforge.plantuml.swing.MainWindow $r63;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("log4j.debug", "false");

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = lengthof r1;

        if $i1 <= 0 goto label01;

        $r50 = r1[0];

        $z26 = virtualinvoke $r50.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-headless");

        if $z26 == 0 goto label01;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.awt.headless", "true");

     label01:
        staticinvoke <net.sourceforge.plantuml.Run: void saveCommandLine(java.lang.String[])>(r1);

        $r57 = new net.sourceforge.plantuml.Option;

        specialinvoke $r57.<net.sourceforge.plantuml.Option: void <init>(java.lang.String[])>(r1);

        $z27 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isTextProgressBar()>();

        staticinvoke <net.sourceforge.plantuml.ProgressBar: void setEnable(boolean)>($z27);

        $r58 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z28 = virtualinvoke $r58.<net.sourceforge.plantuml.OptionFlags: boolean isClipboardLoop()>();

        if $z28 == 0 goto label02;

        staticinvoke <net.sourceforge.plantuml.ClipboardLoop: void runLoop()>();

        return;

     label02:
        $r3 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r3.<net.sourceforge.plantuml.OptionFlags: boolean isClipboard()>();

        if $z0 == 0 goto label03;

        staticinvoke <net.sourceforge.plantuml.ClipboardLoop: void runOnce()>();

        return;

     label03:
        $r4 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z1 = virtualinvoke $r4.<net.sourceforge.plantuml.OptionFlags: boolean isExtractStdLib()>();

        if $z1 == 0 goto label04;

        staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: void extractStdLib()>();

        return;

     label04:
        $r5 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z2 = virtualinvoke $r5.<net.sourceforge.plantuml.OptionFlags: boolean isStdLib()>();

        if $z2 == 0 goto label05;

        staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: void printStdLib()>();

        return;

     label05:
        $r6 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z3 = virtualinvoke $r6.<net.sourceforge.plantuml.OptionFlags: boolean isDumpStats()>();

        if $z3 == 0 goto label06;

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void dumpStats()>();

        return;

     label06:
        $r7 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z4 = virtualinvoke $r7.<net.sourceforge.plantuml.OptionFlags: boolean isLoopStats()>();

        if $z4 == 0 goto label07;

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void loopStats()>();

        return;

     label07:
        $r8 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z5 = virtualinvoke $r8.<net.sourceforge.plantuml.OptionFlags: boolean isDumpHtmlStats()>();

        if $z5 == 0 goto label08;

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void outHtml()>();

        return;

     label08:
        $r9 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z6 = virtualinvoke $r9.<net.sourceforge.plantuml.OptionFlags: boolean isEncodesprite()>();

        if $z6 == 0 goto label09;

        $r49 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: java.util.List getResult()>();

        staticinvoke <net.sourceforge.plantuml.Run: void encodeSprite(java.util.List)>($r49);

        return;

     label09:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SecurityProfile ");

        $r12 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r14);

        $r15 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z7 = virtualinvoke $r15.<net.sourceforge.plantuml.OptionFlags: boolean isVerbose()>();

        if $z7 == 0 goto label10;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PlantUML Version ");

        $r42 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r44);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GraphicsEnvironment.isHeadless() ");

        $z25 = staticinvoke <java.awt.GraphicsEnvironment: boolean isHeadless()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z25);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r48);

     label10:
        $z8 = staticinvoke <java.awt.GraphicsEnvironment: boolean isHeadless()>();

        if $z8 == 0 goto label11;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("Forcing -Djava.awt.headless=true");

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.awt.headless", "true");

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("java.awt.headless set as true");

     label11:
        $r16 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z9 = virtualinvoke $r16.<net.sourceforge.plantuml.OptionFlags: boolean isPrintFonts()>();

        if $z9 == 0 goto label12;

        staticinvoke <net.sourceforge.plantuml.Run: void printFonts()>();

        return;

     label12:
        $i2 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: int getFtpPort()>();

        if $i2 == -1 goto label13;

        staticinvoke <net.sourceforge.plantuml.Run: void goFtp(net.sourceforge.plantuml.Option)>($r57);

        return;

     label13:
        $i3 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: int getPicowebPort()>();

        if $i3 == -1 goto label14;

        staticinvoke <net.sourceforge.plantuml.Run: void goPicoweb(net.sourceforge.plantuml.Option)>($r57);

        return;

     label14:
        staticinvoke <net.sourceforge.plantuml.Run: void forceOpenJdkResourceLoad()>();

        $r17 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.OptionPreprocOutputMode getPreprocessorOutputMode()>();

        $r18 = <net.sourceforge.plantuml.OptionPreprocOutputMode: net.sourceforge.plantuml.OptionPreprocOutputMode CYPHER>;

        if $r17 != $r18 goto label15;

        $r37 = new net.sourceforge.plantuml.syntax.LanguageDescriptor;

        specialinvoke $r37.<net.sourceforge.plantuml.syntax.LanguageDescriptor: void <init>()>();

        $r38 = virtualinvoke $r37.<net.sourceforge.plantuml.syntax.LanguageDescriptor: net.sourceforge.plantuml.utils.Cypher getCypher()>();

        <net.sourceforge.plantuml.Run: net.sourceforge.plantuml.utils.Cypher cypher> = $r38;

     label15:
        r19 = staticinvoke <net.sourceforge.plantuml.ErrorStatus: net.sourceforge.plantuml.ErrorStatus init()>();

        z29 = 0;

        $r20 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z10 = virtualinvoke $r20.<net.sourceforge.plantuml.OptionFlags: boolean isGui()>();

        if $z10 == 0 goto label24;

     label16:
        staticinvoke <javax.swing.UIManager: void setLookAndFeel(java.lang.String)>("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

     label17:
        goto label19;

     label18:
        $r56 := @caughtexception;

     label19:
        r60 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: java.util.List getResult()>();

        r61 = null;

        $i9 = interfaceinvoke r60.<java.util.List: int size()>();

        if $i9 != 1 goto label20;

        $r34 = new java.io.File;

        $r35 = interfaceinvoke r60.<java.util.List: java.lang.Object get(int)>(0);

        $r36 = (java.lang.String) $r35;

        specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>($r36);

        $z23 = virtualinvoke $r34.<java.io.File: boolean exists()>();

        if $z23 == 0 goto label20;

        $z24 = virtualinvoke $r34.<java.io.File: boolean isDirectory()>();

        if $z24 == 0 goto label20;

        r61 = $r34;

     label20:
        $r63 = new net.sourceforge.plantuml.swing.MainWindow;

        specialinvoke $r63.<net.sourceforge.plantuml.swing.MainWindow: void <init>(net.sourceforge.plantuml.Option,java.io.File)>($r57, r61);

     label21:
        goto label23;

     label22:
        $r52 := @caughtexception;

        $r53 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r53.<java.io.PrintStream: void println(java.lang.String)>("There is an issue with your server. You will find some tips here:");

        $r54 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>("https://forum.plantuml.net/3399/problem-with-x11-and-headless-exception");

        $r55 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>("https://plantuml.com/en/faq#239d64f675c3e515");

        throw $r52;

     label23:
        goto label32;

     label24:
        $z11 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isPipe()>();

        if $z11 != 0 goto label25;

        $z16 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isPipeMap()>();

        if $z16 != 0 goto label25;

        $z17 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isSyntax()>();

        if $z17 == 0 goto label26;

     label25:
        staticinvoke <net.sourceforge.plantuml.Run: void managePipe(net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>($r57, r19);

        z29 = 1;

        goto label32;

     label26:
        $z18 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isFailfast2()>();

        if $z18 == 0 goto label30;

        $z20 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isSplash()>();

        if $z20 == 0 goto label27;

        staticinvoke <net.sourceforge.plantuml.Splash: void createSplash()>();

     label27:
        l10 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r57.<net.sourceforge.plantuml.Option: void setCheckOnly(boolean)>(1);

        staticinvoke <net.sourceforge.plantuml.Run: void manageAllFiles(net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>($r57, r19);

        virtualinvoke $r57.<net.sourceforge.plantuml.Option: void setCheckOnly(boolean)>(0);

        $z21 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isDuration()>();

        if $z21 == 0 goto label28;

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l8 = $l7 - l10;

        $d1 = (double) $l8;

        d2 = $d1 / 1000.0;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Check Duration = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r33);

     label28:
        $z22 = virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: boolean hasError()>();

        if $z22 != 0 goto label29;

        staticinvoke <net.sourceforge.plantuml.Run: void manageAllFiles(net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>($r57, r19);

     label29:
        z29 = 1;

        goto label32;

     label30:
        $z19 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isSplash()>();

        if $z19 == 0 goto label31;

        staticinvoke <net.sourceforge.plantuml.Splash: void createSplash()>();

     label31:
        staticinvoke <net.sourceforge.plantuml.Run: void manageAllFiles(net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>($r57, r19);

        z29 = 1;

     label32:
        $z30 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: boolean isDuration()>();

        if $z30 == 0 goto label33;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l5 - l0;

        $d0 = (double) $l6;

        d3 = $d0 / 1000.0;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duration = ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r28);

     label33:
        $r21 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z12 = virtualinvoke $r21.<net.sourceforge.plantuml.OptionFlags: boolean isGui()>();

        if $z12 != 0 goto label37;

        $z13 = virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: boolean hasError()>();

        if $z13 != 0 goto label34;

        $z15 = virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: boolean isNoData()>();

        if $z15 == 0 goto label35;

     label34:
        $r22 = virtualinvoke $r57.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.Stdrpt getStdrpt()>();

        interfaceinvoke $r22.<net.sourceforge.plantuml.Stdrpt: void finalMessage(net.sourceforge.plantuml.ErrorStatus)>(r19);

     label35:
        $z31 = virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: boolean hasError()>();

        if $z31 == 0 goto label36;

        $i4 = virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: int getExitCode()>();

        staticinvoke <java.lang.System: void exit(int)>($i4);

     label36:
        if z29 == 0 goto label37;

        $r23 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z14 = virtualinvoke $r23.<net.sourceforge.plantuml.OptionFlags: boolean isSystemExit()>();

        if $z14 == 0 goto label37;

        staticinvoke <java.lang.System: void exit(int)>(0);

     label37:
        return;

        catch java.lang.Exception from label16 to label17 with label18;
        catch java.awt.HeadlessException from label20 to label21 with label22;
    }

    public static final java.lang.String getCommandLine()
    {
        java.lang.String $r0;

        $r0 = <net.sourceforge.plantuml.Run: java.lang.String commandLine>;

        return $r0;
    }

    private static void saveCommandLine(java.lang.String[])
    {
        java.lang.StringBuilder $r0;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.String $r4, r5;

        r2 := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r2[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <net.sourceforge.plantuml.Run: java.lang.String commandLine> = $r4;

        return;
    }

    public static void forceOpenJdkResourceLoad()
    {
        boolean $z0;
        java.awt.image.BufferedImage $r0;
        java.awt.Graphics2D r2;
        java.awt.Font $r4;
        java.awt.FontMetrics r6;

        $z0 = staticinvoke <net.sourceforge.plantuml.Run: boolean isOpenJdkRunning()>();

        if $z0 == 0 goto label1;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("Forcing resource load on OpenJdk");

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(10, 10, 1);

        r2 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r4 = new java.awt.Font;

        specialinvoke $r4.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 12);

        r6 = virtualinvoke r2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r4);

        virtualinvoke r6.<java.awt.FontMetrics: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.Graphics)>("Alice", r2);

     label1:
        return;
    }

    public static boolean isOpenJdkRunning()
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.name");

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("openjdk");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void encodeSprite(java.util.List) throws java.io.IOException
    {
        java.util.List r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1, $r7, $r9, $r11, $r13, $r16;
        java.lang.String r2, $r8, $r10, $r12, $r14, $r15, r21, r23, r24, r29, $r30;
        java.net.URL $r3, r22;
        java.io.PrintStream $r4;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        net.sourceforge.plantuml.security.SFile $r5;
        java.net.URI $r6;
        java.lang.Throwable $r17, $r19;
        net.sourceforge.plantuml.sprite.SpriteGrayLevel r20;
        java.io.InputStream r26;
        java.awt.image.BufferedImage r27;

        r0 := @parameter0: java.util.List;

        r20 = <net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.SpriteGrayLevel GRAY_16>;

        z4 = 0;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label03;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (java.lang.String) $r7;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean matches(java.lang.String)>("(4|8|16)z?");

        if $z1 == 0 goto label03;

        $r9 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.lang.String) $r9;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>("8");

        if $z2 == 0 goto label01;

        r20 = <net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.SpriteGrayLevel GRAY_8>;

     label01:
        $r11 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (java.lang.String) $r11;

        $z3 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("4");

        if $z3 == 0 goto label02;

        r20 = <net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.SpriteGrayLevel GRAY_4>;

     label02:
        $r13 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (java.lang.String) $r13;

        $r15 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>($r14);

        z4 = virtualinvoke $r15.<java.lang.String: boolean endsWith(java.lang.String)>("z");

        $r16 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        r21 = (java.lang.String) $r16;

        goto label04;

     label03:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r21 = (java.lang.String) $r1;

     label04:
        r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>(r21);

        $z5 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

        if $z5 != 0 goto label05;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        if $z0 == 0 goto label06;

     label05:
        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>(r21);

        r22 = $r3;

        r23 = virtualinvoke $r3.<java.net.URL: java.lang.String getPath()>();

        $i1 = virtualinvoke r23.<java.lang.String: int lastIndexOf(int)>(47);

        $i2 = $i1 + 1;

        $i3 = virtualinvoke r23.<java.lang.String: int length()>();

        r24 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        goto label07;

     label06:
        $r5 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r5.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>(r21);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.security.SFile: java.net.URI toURI()>();

        r22 = virtualinvoke $r6.<java.net.URI: java.net.URL toURL()>();

        r24 = virtualinvoke $r5.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

     label07:
        if r22 != null goto label08;

        return;

     label08:
        r26 = virtualinvoke r22.<java.net.URL: java.io.InputStream openStream()>();

     label09:
        r27 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r26);

     label10:
        if r26 == null goto label16;

        virtualinvoke r26.<java.io.InputStream: void close()>();

        goto label16;

     label11:
        $r19 := @caughtexception;

        if r26 == null goto label15;

     label12:
        virtualinvoke r26.<java.io.InputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r17 := @caughtexception;

        virtualinvoke $r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

     label15:
        throw $r19;

     label16:
        r29 = staticinvoke <net.sourceforge.plantuml.Run: java.lang.String getSpriteName(java.lang.String)>(r24);

        if z4 == 0 goto label17;

        $r30 = staticinvoke <net.sourceforge.plantuml.sprite.SpriteUtils: java.lang.String encodeCompressed(java.awt.image.BufferedImage,java.lang.String,net.sourceforge.plantuml.sprite.SpriteGrayLevel)>(r27, r29, r20);

        goto label18;

     label17:
        $r30 = staticinvoke <net.sourceforge.plantuml.sprite.SpriteUtils: java.lang.String encode(java.awt.image.BufferedImage,java.lang.String,net.sourceforge.plantuml.sprite.SpriteGrayLevel)>(r27, r29, r20);

     label18:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r30);

        return;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
    }

    private static java.lang.String getSpriteName(java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.Run: java.lang.String getSpriteNameInternal(java.lang.String)>(r0);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return "test";

     label1:
        return r1;
    }

    private static java.lang.String getSpriteNameInternal(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r5, $r6, $r7;
        java.lang.String r2, $r4, $r8, $r9;
        char[] r3;
        int i0, i2;
        char c1;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        c1 = r3[i2];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean matches(java.lang.String)>("[\\p{L}0-9_]");

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        goto label3;

     label2:
        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static void goFtp(net.sourceforge.plantuml.Option) throws java.io.IOException
    {
        net.sourceforge.plantuml.Option r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.io.PrintStream $r2;
        java.lang.String $r5;
        net.sourceforge.plantuml.ftp.FtpServer $r6;
        net.sourceforge.plantuml.FileFormatOption $r7;
        net.sourceforge.plantuml.FileFormat $r8;

        r0 := @parameter0: net.sourceforge.plantuml.Option;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.Option: int getFtpPort()>();

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ftpPort=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = new net.sourceforge.plantuml.ftp.FtpServer;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        specialinvoke $r6.<net.sourceforge.plantuml.ftp.FtpServer: void <init>(int,net.sourceforge.plantuml.FileFormat)>(i0, $r8);

        virtualinvoke $r6.<net.sourceforge.plantuml.ftp.FtpServer: void go()>();

        return;
    }

    private static void goPicoweb(net.sourceforge.plantuml.Option) throws java.io.IOException
    {
        net.sourceforge.plantuml.Option r0;
        int $i0;
        java.lang.String $r1;

        r0 := @parameter0: net.sourceforge.plantuml.Option;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.Option: int getPicowebPort()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.Option: java.lang.String getPicowebBindAddress()>();

        staticinvoke <net.sourceforge.plantuml.picoweb.PicoWebServer: void startServer(int,java.lang.String)>($i0, $r1);

        return;
    }

    public static void printFonts()
    {
        java.awt.GraphicsEnvironment $r0, $r2;
        java.awt.Font[] r1;
        java.lang.String r3, $r8, $r14, $r17, $r20, $r23, $r25;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24;
        java.io.PrintStream $r5, $r10;
        int i0, i1, i2, i3;
        java.awt.Font r27;
        java.lang.String[] r28;

        $r0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        r1 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.Font[] getAllFonts()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r27 = r1[i1];

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r14 = virtualinvoke r27.<java.awt.Font: java.lang.String getPSName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r17 = virtualinvoke r27.<java.awt.Font: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r20 = virtualinvoke r27.<java.awt.Font: java.lang.String getFontName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r23 = virtualinvoke r27.<java.awt.Font: java.lang.String getFamily()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r25);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        r28 = virtualinvoke $r2.<java.awt.GraphicsEnvironment: java.lang.String[] getAvailableFontFamilyNames()>();

        i2 = lengthof r28;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r3 = r28[i3];

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    private static void managePipe(net.sourceforge.plantuml.Option, net.sourceforge.plantuml.ErrorStatus) throws java.io.IOException
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String r1;
        net.sourceforge.plantuml.Pipe $r2;
        java.io.InputStream $r3;
        java.io.PrintStream $r4;
        net.sourceforge.plantuml.ErrorStatus r5;

        r0 := @parameter0: net.sourceforge.plantuml.Option;

        r5 := @parameter1: net.sourceforge.plantuml.ErrorStatus;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r2 = new net.sourceforge.plantuml.Pipe;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r2.<net.sourceforge.plantuml.Pipe: void <init>(net.sourceforge.plantuml.Option,java.io.PrintStream,java.io.InputStream,java.lang.String)>(r0, $r4, $r3, r1);

        virtualinvoke $r2.<net.sourceforge.plantuml.Pipe: void managePipe(net.sourceforge.plantuml.ErrorStatus)>(r5);

        return;
    }

    private static void manageAllFiles(net.sourceforge.plantuml.Option, net.sourceforge.plantuml.ErrorStatus) throws net.sourceforge.plantuml.code.NoPlantumlCompressionException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        boolean $z0;
        net.sourceforge.plantuml.Option r1;
        net.sourceforge.plantuml.ErrorStatus r2;
        net.sourceforge.plantuml.security.SFile $r3, r8, r11;
        java.util.List $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.lang.Throwable $r9;

        r1 := @parameter0: net.sourceforge.plantuml.Option;

        r2 := @parameter1: net.sourceforge.plantuml.ErrorStatus;

        r11 = null;

     label1:
        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: boolean isWord()>();

        if $z0 == 0 goto label2;

        $r3 = new net.sourceforge.plantuml.security.SFile;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.Option: java.util.List getResult()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r5;

        specialinvoke $r3.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>($r6);

        r8 = virtualinvoke $r3.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile file(java.lang.String)>("javaisrunning.tmp");

        virtualinvoke r8.<net.sourceforge.plantuml.security.SFile: void delete()>();

        r11 = virtualinvoke $r3.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile file(java.lang.String)>("javaumllock.tmp");

     label2:
        staticinvoke <net.sourceforge.plantuml.Run: void processArgs(net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>(r1, r2);

     label3:
        if r11 == null goto label7;

        virtualinvoke r11.<net.sourceforge.plantuml.security.SFile: void delete()>();

        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        if r11 == null goto label6;

        virtualinvoke r11.<net.sourceforge.plantuml.security.SFile: void delete()>();

     label6:
        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static void processArgs(net.sourceforge.plantuml.Option, net.sourceforge.plantuml.ErrorStatus) throws net.sourceforge.plantuml.code.NoPlantumlCompressionException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r4;
        net.sourceforge.plantuml.ErrorStatus r3;
        net.sourceforge.plantuml.FileGroup $r5;
        java.util.List $r6, $r7, $r8, $r16;
        java.io.PrintStream $r9, $r10, $r12;
        java.lang.String $r11, r18;
        net.sourceforge.plantuml.OptionFlags $r13;
        java.io.IOException $r14;
        java.util.ArrayList $r15;
        java.util.Iterator r17, r21;
        net.sourceforge.plantuml.code.Transcoder r19;
        java.io.File r22;

        r0 := @parameter0: net.sourceforge.plantuml.Option;

        r3 := @parameter1: net.sourceforge.plantuml.ErrorStatus;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.Option: boolean isDecodeurl()>();

        if $z0 != 0 goto label01;

        $i2 = virtualinvoke r0.<net.sourceforge.plantuml.Option: int getNbThreads()>();

        if $i2 <= 1 goto label01;

        $z7 = virtualinvoke r0.<net.sourceforge.plantuml.Option: boolean isCheckOnly()>();

        if $z7 != 0 goto label01;

        $r13 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z8 = virtualinvoke $r13.<net.sourceforge.plantuml.OptionFlags: boolean isExtractFromMetadata()>();

        if $z8 != 0 goto label01;

        staticinvoke <net.sourceforge.plantuml.Run: void multithread(net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>(r0, r3);

        return;

     label01:
        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.Option: java.util.List getResult()>();

        r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z9 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label05;

        $r4 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r4;

        $z5 = virtualinvoke r0.<net.sourceforge.plantuml.Option: boolean isDecodeurl()>();

        if $z5 == 0 goto label03;

        virtualinvoke r3.<net.sourceforge.plantuml.ErrorStatus: void goOk()>();

        r19 = staticinvoke <net.sourceforge.plantuml.code.TranscoderUtil: net.sourceforge.plantuml.code.Transcoder getDefaultTranscoder()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("@startuml");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = interfaceinvoke r19.<net.sourceforge.plantuml.code.Transcoder: java.lang.String decode(java.lang.String)>(r18);

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("@enduml");

        goto label04;

     label03:
        $r5 = new net.sourceforge.plantuml.FileGroup;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.Option: java.util.List getExcludes()>();

        specialinvoke $r5.<net.sourceforge.plantuml.FileGroup: void <init>(java.lang.String,java.util.List,net.sourceforge.plantuml.Option)>(r18, $r6, r0);

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.FileGroup: java.util.List getFiles()>();

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        staticinvoke <net.sourceforge.plantuml.Run: void incTotal(int)>($i1);

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.FileGroup: java.util.List getFiles()>();

        interfaceinvoke $r15.<java.util.List: boolean addAll(java.util.Collection)>($r8);

     label04:
        goto label02;

     label05:
        $i0 = interfaceinvoke $r15.<java.util.List: int size()>();

        staticinvoke <net.sourceforge.plantuml.Run: void foundNbFiles(int)>($i0);

        r21 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r2 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.io.File) $r2;

     label07:
        staticinvoke <net.sourceforge.plantuml.Run: void manageFileInternal(java.io.File,net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>(r22, r0, r3);

        $z2 = virtualinvoke r3.<net.sourceforge.plantuml.ErrorStatus: boolean hasError()>();

        staticinvoke <net.sourceforge.plantuml.Run: void incDone(boolean)>($z2);

        $z3 = virtualinvoke r3.<net.sourceforge.plantuml.ErrorStatus: boolean hasError()>();

        if $z3 == 0 goto label09;

        $z4 = virtualinvoke r0.<net.sourceforge.plantuml.Option: boolean isFailfastOrFailfast2()>();

        if $z4 == 0 goto label09;

     label08:
        return;

     label09:
        goto label11;

     label10:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.io.IOException: void printStackTrace()>();

     label11:
        goto label06;

     label12:
        return;

        catch java.io.IOException from label07 to label08 with label10;
    }

    private static void multithread(net.sourceforge.plantuml.Option, net.sourceforge.plantuml.ErrorStatus) throws java.lang.InterruptedException
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        net.sourceforge.plantuml.Option r2;
        int $i0, $i1, i2;
        java.lang.String $r4, r10;
        java.util.concurrent.ExecutorService r5;
        java.util.List $r6, $r12, $r14;
        java.util.Iterator r7, r15;
        boolean $z0, $z2;
        java.util.concurrent.TimeUnit $r8;
        java.lang.Object $r9, $r16;
        net.sourceforge.plantuml.FileGroup $r11;
        java.io.File r17;
        net.sourceforge.plantuml.Run$1 $r18;
        net.sourceforge.plantuml.ErrorStatus r19;

        r2 := @parameter0: net.sourceforge.plantuml.Option;

        r19 := @parameter1: net.sourceforge.plantuml.ErrorStatus;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using several threads: ");

        $i0 = virtualinvoke r2.<net.sourceforge.plantuml.Option: int getNbThreads()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r4);

        $i1 = virtualinvoke r2.<net.sourceforge.plantuml.Option: int getNbThreads()>();

        r5 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>($i1);

        i2 = 0;

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.Option: java.util.List getResult()>();

        r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = new net.sourceforge.plantuml.FileGroup;

        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.Option: java.util.List getExcludes()>();

        specialinvoke $r11.<net.sourceforge.plantuml.FileGroup: void <init>(java.lang.String,java.util.List,net.sourceforge.plantuml.Option)>(r10, $r12, r2);

        $r14 = virtualinvoke $r11.<net.sourceforge.plantuml.FileGroup: java.util.List getFiles()>();

        r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.io.File) $r16;

        staticinvoke <net.sourceforge.plantuml.Run: void incTotal(int)>(1);

        i2 = i2 + 1;

        $r18 = new net.sourceforge.plantuml.Run$1;

        specialinvoke $r18.<net.sourceforge.plantuml.Run$1: void <init>(net.sourceforge.plantuml.ErrorStatus,net.sourceforge.plantuml.Option,java.io.File)>(r19, r2, r17);

        interfaceinvoke r5.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r18);

        goto label2;

     label3:
        goto label1;

     label4:
        staticinvoke <net.sourceforge.plantuml.Run: void foundNbFiles(int)>(i2);

        interfaceinvoke r5.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke r5.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r8);

        return;
    }

    private static void foundNbFiles(int)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" files");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r4);

        return;
    }

    private static void incDone(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <net.sourceforge.plantuml.Splash: void incDone(boolean)>(z0);

        staticinvoke <net.sourceforge.plantuml.ProgressBar: void incDone(boolean)>(z0);

        return;
    }

    private static void incTotal(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <net.sourceforge.plantuml.Splash: void incTotal(int)>(i0);

        staticinvoke <net.sourceforge.plantuml.ProgressBar: void incTotal(int)>(i0);

        return;
    }

    private static void manageFileInternal(java.io.File, net.sourceforge.plantuml.Option, net.sourceforge.plantuml.ErrorStatus) throws java.io.IOException, java.lang.InterruptedException
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r24, $r25, $r27;
        java.io.File r2, $r8, $r11, $r40, r54, r56;
        java.lang.String $r3, $r5, $r13, $r26, $r28, $r33, $r37, $r39, $r41, $r45, r53, r55;
        net.sourceforge.plantuml.OptionFlags $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        net.sourceforge.plantuml.Option r7;
        net.sourceforge.plantuml.SourceFileReaderHardFile $r9;
        net.sourceforge.plantuml.preproc.Defines $r10, $r35, $r43;
        java.util.List $r12, $r17, $r30, $r36, $r44, r60;
        net.sourceforge.plantuml.FileFormatOption $r14, $r38, $r46;
        net.sourceforge.plantuml.SourceFileReaderAbstract $r15, r57;
        net.sourceforge.plantuml.OptionPreprocOutputMode $r16;
        int $i0, $i1, $i2;
        java.util.Iterator r18, r58;
        net.sourceforge.plantuml.ErrorStatus r19;
        java.lang.Object $r20, $r31;
        net.sourceforge.plantuml.BlockUml r21, r59;
        java.io.PrintStream $r22, $r29, $r32, $r47, $r48, $r49, $r51, $r52;
        net.sourceforge.plantuml.core.Diagram $r23;
        net.sourceforge.plantuml.SourceFileReader $r34;
        net.sourceforge.plantuml.SourceFileReaderCopyCat $r42;
        net.sourceforge.plantuml.png.MetadataTag $r50;
        net.sourceforge.plantuml.Stdrpt r61;

        r2 := @parameter0: java.io.File;

        r7 := @parameter1: net.sourceforge.plantuml.Option;

        r19 := @parameter2: net.sourceforge.plantuml.ErrorStatus;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Working on ");

        $r3 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r5);

        $r6 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r6.<net.sourceforge.plantuml.OptionFlags: boolean isExtractFromMetadata()>();

        if $z0 == 0 goto label01;

        $r47 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r47.<java.io.PrintStream: void println(java.lang.String)>("------------------------");

        $r48 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.Object)>(r2);

        $r49 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r49.<java.io.PrintStream: void println()>();

        virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: void goOk()>();

        $r50 = new net.sourceforge.plantuml.png.MetadataTag;

        specialinvoke $r50.<net.sourceforge.plantuml.png.MetadataTag: void <init>(java.io.File,java.lang.String)>(r2, "plantuml");

        r53 = virtualinvoke $r50.<net.sourceforge.plantuml.png.MetadataTag: java.lang.String getData()>();

        $r51 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r51.<java.io.PrintStream: void println(java.lang.String)>(r53);

        $r52 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r52.<java.io.PrintStream: void println(java.lang.String)>("------------------------");

        return;

     label01:
        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.io.File getOutputFile()>();

        if $r8 != null goto label04;

        r54 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.io.File getOutputDir()>();

        if r54 == null goto label02;

        $r39 = virtualinvoke r54.<java.io.File: java.lang.String getPath()>();

        $z7 = virtualinvoke $r39.<java.lang.String: boolean endsWith(java.lang.String)>("$");

        if $z7 == 0 goto label02;

        r55 = virtualinvoke r54.<java.io.File: java.lang.String getPath()>();

        $r40 = new java.io.File;

        $i1 = virtualinvoke r55.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r41 = virtualinvoke r55.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        specialinvoke $r40.<java.io.File: void <init>(java.lang.String)>($r41);

        r56 = virtualinvoke $r40.<java.io.File: java.io.File getAbsoluteFile()>();

        $r42 = new net.sourceforge.plantuml.SourceFileReaderCopyCat;

        $r43 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.preproc.Defines getDefaultDefines(java.io.File)>(r2);

        $r44 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.util.List getConfig()>();

        $r45 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r46 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        specialinvoke $r42.<net.sourceforge.plantuml.SourceFileReaderCopyCat: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r43, r2, r56, $r44, $r45, $r46);

        r57 = $r42;

        goto label03;

     label02:
        $r34 = new net.sourceforge.plantuml.SourceFileReader;

        $r35 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.preproc.Defines getDefaultDefines(java.io.File)>(r2);

        $r36 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.util.List getConfig()>();

        $r37 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r38 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        specialinvoke $r34.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r35, r2, r54, $r36, $r37, $r38);

        r57 = $r34;

     label03:
        goto label05;

     label04:
        $r9 = new net.sourceforge.plantuml.SourceFileReaderHardFile;

        $r10 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.preproc.Defines getDefaultDefines(java.io.File)>(r2);

        $r11 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.io.File getOutputFile()>();

        $r12 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.util.List getConfig()>();

        $r13 = virtualinvoke r7.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r14 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        specialinvoke $r9.<net.sourceforge.plantuml.SourceFileReaderHardFile: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r10, r2, $r11, $r12, $r13, $r14);

        r57 = $r9;

     label05:
        $z1 = virtualinvoke r7.<net.sourceforge.plantuml.Option: boolean isCheckMetadata()>();

        interfaceinvoke r57.<net.sourceforge.plantuml.ISourceFileReader: void setCheckMetadata(boolean)>($z1);

        $r15 = (net.sourceforge.plantuml.SourceFileReaderAbstract) r57;

        $z2 = virtualinvoke r7.<net.sourceforge.plantuml.Option: boolean isNoerror()>();

        virtualinvoke $r15.<net.sourceforge.plantuml.SourceFileReaderAbstract: void setNoerror(boolean)>($z2);

        $z3 = virtualinvoke r7.<net.sourceforge.plantuml.Option: boolean isComputeurl()>();

        if $z3 == 0 goto label08;

        virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: void goOk()>();

        $r30 = interfaceinvoke r57.<net.sourceforge.plantuml.ISourceFileReader: java.util.List getBlocks()>();

        r58 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label07;

        $r31 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (net.sourceforge.plantuml.BlockUml) $r31;

        $r32 = <java.lang.System: java.io.PrintStream out>;

        $r33 = virtualinvoke r59.<net.sourceforge.plantuml.BlockUml: java.lang.String getEncodedUrl()>();

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>($r33);

        goto label06;

     label07:
        return;

     label08:
        $z4 = virtualinvoke r7.<net.sourceforge.plantuml.Option: boolean isCheckOnly()>();

        if $z4 == 0 goto label10;

        virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: void goOk()>();

        z8 = interfaceinvoke r57.<net.sourceforge.plantuml.ISourceFileReader: boolean hasError()>();

        if z8 == 0 goto label09;

        virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: void goWithError()>();

     label09:
        return;

     label10:
        $r16 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.OptionPreprocOutputMode getPreprocessorOutputMode()>();

        if $r16 == null goto label11;

        staticinvoke <net.sourceforge.plantuml.Run: void extractPreproc(net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ISourceFileReader)>(r7, r57);

        virtualinvoke r19.<net.sourceforge.plantuml.ErrorStatus: void goOk()>();

        return;

     label11:
        r60 = interfaceinvoke r57.<net.sourceforge.plantuml.ISourceFileReader: java.util.List getGeneratedImages()>();

        r61 = virtualinvoke r7.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.Stdrpt getStdrpt()>();

        $i0 = interfaceinvoke r60.<java.util.List: int size()>();

        if $i0 != 0 goto label12;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: no image in ");

        $r26 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r28);

        $r29 = <java.lang.System: java.io.PrintStream err>;

        interfaceinvoke r61.<net.sourceforge.plantuml.Stdrpt: void printInfo(java.io.PrintStream,net.sourceforge.plantuml.core.Diagram)>($r29, null);

        return;

     label12:
        $r17 = interfaceinvoke r57.<net.sourceforge.plantuml.ISourceFileReader: java.util.List getBlocks()>();

        r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z5 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r20 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r21 = (net.sourceforge.plantuml.BlockUml) $r20;

        $r22 = <java.lang.System: java.io.PrintStream err>;

        $r23 = virtualinvoke r21.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        interfaceinvoke r61.<net.sourceforge.plantuml.Stdrpt: void printInfo(java.io.PrintStream,net.sourceforge.plantuml.core.Diagram)>($r22, $r23);

        goto label13;

     label14:
        staticinvoke <net.sourceforge.plantuml.Run: void hasErrors(java.io.File,java.util.List,net.sourceforge.plantuml.ErrorStatus,net.sourceforge.plantuml.Stdrpt)>(r2, r60, r19, r61);

        return;
    }

    private static void extractPreproc(net.sourceforge.plantuml.Option, net.sourceforge.plantuml.ISourceFileReader) throws java.io.IOException
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String r1, $r13, $r15, r26;
        net.sourceforge.plantuml.ISourceFileReader r2;
        java.util.List $r3, $r17;
        java.util.Iterator r4, r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r5, $r18;
        net.sourceforge.plantuml.BlockUml r6;
        net.sourceforge.plantuml.SourceFileReaderAbstract $r7;
        net.sourceforge.plantuml.SuggestedFile $r8, r9;
        net.sourceforge.plantuml.security.SFile r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.io.PrintWriter r16, $r24;
        java.lang.CharSequence r19;
        net.sourceforge.plantuml.utils.Cypher $r20, $r21;
        java.lang.Throwable $r22, $r23;
        int i0;

        r0 := @parameter0: net.sourceforge.plantuml.Option;

        r2 := @parameter1: net.sourceforge.plantuml.ISourceFileReader;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r3 = interfaceinvoke r2.<net.sourceforge.plantuml.ISourceFileReader: java.util.List getBlocks()>();

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.BlockUml) $r5;

        $r7 = (net.sourceforge.plantuml.SourceFileReaderAbstract) r2;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.SuggestedFile getSuggestedFile(net.sourceforge.plantuml.BlockUml)>(r6);

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.SuggestedFile withPreprocFormat()>();

        r10 = virtualinvoke r9.<net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.security.SFile getFile(int)>(0);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Export preprocessing source to ");

        $r13 = virtualinvoke r10.<net.sourceforge.plantuml.security.SFile: java.lang.String getPrintablePath()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r15);

        if r1 != null goto label02;

        $r24 = virtualinvoke r10.<net.sourceforge.plantuml.security.SFile: java.io.PrintWriter createPrintWriter()>();

        goto label03;

     label02:
        $r24 = virtualinvoke r10.<net.sourceforge.plantuml.security.SFile: java.io.PrintWriter createPrintWriter(java.lang.String)>(r1);

     label03:
        r16 = $r24;

     label04:
        i0 = 0;

        $r17 = virtualinvoke r6.<net.sourceforge.plantuml.BlockUml: java.util.List getDefinition(boolean)>(1);

        r25 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z5 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        $r18 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.CharSequence) $r18;

        r26 = interfaceinvoke r19.<java.lang.CharSequence: java.lang.String toString()>();

        $r20 = <net.sourceforge.plantuml.Run: net.sourceforge.plantuml.utils.Cypher cypher>;

        if $r20 == null goto label08;

        $z1 = virtualinvoke r26.<java.lang.String: boolean contains(java.lang.CharSequence)>("skinparam");

        if $z1 == 0 goto label06;

        $z4 = virtualinvoke r26.<java.lang.String: boolean contains(java.lang.CharSequence)>("{");

        if $z4 == 0 goto label06;

        i0 = i0 + 1;

     label06:
        if i0 != 0 goto label07;

        $z3 = virtualinvoke r26.<java.lang.String: boolean contains(java.lang.CharSequence)>("skinparam");

        if $z3 != 0 goto label07;

        $r21 = <net.sourceforge.plantuml.Run: net.sourceforge.plantuml.utils.Cypher cypher>;

        r26 = virtualinvoke $r21.<net.sourceforge.plantuml.utils.Cypher: java.lang.String cypher(java.lang.String)>(r26);

     label07:
        if i0 <= 0 goto label08;

        $z2 = virtualinvoke r26.<java.lang.String: boolean contains(java.lang.CharSequence)>("}");

        if $z2 == 0 goto label08;

        i0 = i0 + -1;

     label08:
        virtualinvoke r16.<java.io.PrintWriter: void println(java.lang.String)>(r26);

        goto label05;

     label09:
        if r16 == null goto label15;

        virtualinvoke r16.<java.io.PrintWriter: void close()>();

        goto label15;

     label10:
        $r23 := @caughtexception;

        if r16 == null goto label14;

     label11:
        virtualinvoke r16.<java.io.PrintWriter: void close()>();

     label12:
        goto label14;

     label13:
        $r22 := @caughtexception;

        virtualinvoke $r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

     label14:
        throw $r23;

     label15:
        goto label01;

     label16:
        return;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    private static void hasErrors(java.io.File, java.util.List, net.sourceforge.plantuml.ErrorStatus, net.sourceforge.plantuml.Stdrpt) throws java.io.IOException
    {
        java.util.List r0;
        int $i0, i1;
        java.util.Iterator r1;
        boolean $z0;
        net.sourceforge.plantuml.ErrorStatus r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.GeneratedImage r4;
        net.sourceforge.plantuml.Stdrpt r5;
        java.io.File r6;

        r6 := @parameter0: java.io.File;

        r0 := @parameter1: java.util.List;

        r2 := @parameter2: net.sourceforge.plantuml.ErrorStatus;

        r5 := @parameter3: net.sourceforge.plantuml.Stdrpt;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.GeneratedImage) $r3;

        i1 = interfaceinvoke r4.<net.sourceforge.plantuml.GeneratedImage: int lineErrorRaw()>();

        if i1 == -1 goto label3;

        interfaceinvoke r5.<net.sourceforge.plantuml.Stdrpt: void errorLine(int,java.io.File)>(i1, r6);

        virtualinvoke r2.<net.sourceforge.plantuml.ErrorStatus: void goWithError()>();

        return;

     label3:
        goto label2;

     label4:
        virtualinvoke r2.<net.sourceforge.plantuml.ErrorStatus: void goOk()>();

        return;
    }

    static void access$000(java.io.File, net.sourceforge.plantuml.Option, net.sourceforge.plantuml.ErrorStatus) throws java.io.IOException, java.lang.InterruptedException
    {
        java.io.File r0;
        net.sourceforge.plantuml.Option r1;
        net.sourceforge.plantuml.ErrorStatus r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: net.sourceforge.plantuml.Option;

        r2 := @parameter2: net.sourceforge.plantuml.ErrorStatus;

        staticinvoke <net.sourceforge.plantuml.Run: void manageFileInternal(java.io.File,net.sourceforge.plantuml.Option,net.sourceforge.plantuml.ErrorStatus)>(r0, r1, r2);

        return;
    }

    static void access$100(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <net.sourceforge.plantuml.Run: void incDone(boolean)>(z0);

        return;
    }

    static void <clinit>()
    {
        <net.sourceforge.plantuml.Run: java.lang.String httpsProtocol> = "https://";

        <net.sourceforge.plantuml.Run: java.lang.String httpProtocol> = "http://";

        <net.sourceforge.plantuml.Run: java.lang.String commandLine> = "";

        return;
    }
}
