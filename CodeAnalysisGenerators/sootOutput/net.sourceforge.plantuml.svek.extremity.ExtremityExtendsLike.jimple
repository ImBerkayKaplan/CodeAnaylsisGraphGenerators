abstract class net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike extends net.sourceforge.plantuml.svek.extremity.Extremity
{
    private static final double XLEN;
    private static final double HALF_WIDTH;
    private final net.sourceforge.plantuml.ugraphic.UPolygon trig;
    private final net.sourceforge.plantuml.ugraphic.UBackground back;
    private final java.awt.geom.Point2D contact;

    public java.awt.geom.Point2D somePoint()
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: java.awt.geom.Point2D contact>;

        return $r1;
    }

    private static void addTrigPoint(net.sourceforge.plantuml.ugraphic.UPolygon, double, double, double, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point $r0;
        double d0, d1, d2;
        java.awt.geom.Point2D r2;
        net.sourceforge.plantuml.ugraphic.UPolygon r3;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UPolygon;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r2 := @parameter4: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: void <init>(double,double)>(d0, d1);

        virtualinvoke $r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: void rotate(double)>(d2);

        virtualinvoke $r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: void translate(java.awt.geom.Point2D)>(r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: void add(net.sourceforge.plantuml.ugraphic.UPolygon)>(r3);

        return;
    }

    private void <init>(java.awt.geom.Point2D, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1;
        net.sourceforge.plantuml.ugraphic.UBackground $r2;
        java.awt.geom.Point2D$Double $r3;
        java.awt.geom.Point2D r4;
        double $d0, $d1, d2, d3;
        net.sourceforge.plantuml.ugraphic.UPolygon $r5, $r6, $r7, $r8, $r9;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike;

        r4 := @parameter0: java.awt.geom.Point2D;

        d2 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.Extremity: void <init>()>();

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UBackground back> = $r2;

        $r3 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: java.awt.geom.Point2D contact> = $r3;

        d3 = virtualinvoke r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: double manageround(double)>(d2);

        $r5 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UPolygon trig> = $r5;

        $r6 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UPolygon trig>;

        virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(java.awt.geom.Point2D)>(r4);

        $r7 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UPolygon trig>;

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: void addTrigPoint(net.sourceforge.plantuml.ugraphic.UPolygon,double,double,double,java.awt.geom.Point2D)>($r7, -19.0, -7.0, d3, r4);

        $r8 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UPolygon trig>;

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: void addTrigPoint(net.sourceforge.plantuml.ugraphic.UPolygon,double,double,double,java.awt.geom.Point2D)>($r8, -19.0, 7.0, d3, r4);

        $r9 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UPolygon trig>;

        virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(java.awt.geom.Point2D)>(r4);

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r3;
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike r1;
        net.sourceforge.plantuml.ugraphic.UBackground $r2;
        net.sourceforge.plantuml.ugraphic.UPolygon $r4;

        r1 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UBackground back>;

        $r3 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r4 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: net.sourceforge.plantuml.ugraphic.UPolygon trig>;

        interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        return;
    }

    void <init>(java.awt.geom.Point2D, double, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$1)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike r0;
        java.awt.geom.Point2D r1;
        double d0;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$1 r3;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike;

        r1 := @parameter0: java.awt.geom.Point2D;

        d0 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r3 := @parameter3: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$1;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: void <init>(java.awt.geom.Point2D,double,net.sourceforge.plantuml.ugraphic.color.HColor)>(r1, d0, r2);

        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: double HALF_WIDTH> = 7.0;

        <net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike: double XLEN> = -19.0;

        return;
    }
}
