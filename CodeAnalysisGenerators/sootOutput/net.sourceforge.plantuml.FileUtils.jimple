public class net.sourceforge.plantuml.FileUtils extends java.lang.Object
{
    private static java.util.concurrent.atomic.AtomicInteger counter;

    public void <init>()
    {
        net.sourceforge.plantuml.FileUtils r0;

        r0 := @this: net.sourceforge.plantuml.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void resetCounter()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <net.sourceforge.plantuml.FileUtils: java.util.concurrent.atomic.AtomicInteger counter> = $r0;

        return;
    }

    public static java.io.File createTempFileLegacy(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, r9, $r14;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r3, $r6;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r11, $r12, $r13;
        int $i0;
        java.io.File $r10, r16;
        java.lang.IllegalArgumentException $r15;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = <net.sourceforge.plantuml.FileUtils: java.util.concurrent.atomic.AtomicInteger counter>;

        if $r3 != null goto label2;

        r16 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>(r1, r0);

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = <net.sourceforge.plantuml.FileUtils: java.util.concurrent.atomic.AtomicInteger counter>;

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r9);

        r16 = $r10;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating temporary file: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r14);

        virtualinvoke r16.<java.io.File: void deleteOnExit()>();

        return r16;
    }

    public static net.sourceforge.plantuml.security.SFile createTempFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, r9, $r14;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r3, $r6;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r11, $r12, $r13;
        int $i0;
        net.sourceforge.plantuml.security.SFile $r10, r16;
        java.lang.IllegalArgumentException $r15;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = <net.sourceforge.plantuml.FileUtils: java.util.concurrent.atomic.AtomicInteger counter>;

        if $r3 != null goto label2;

        r16 = staticinvoke <net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile createTempFile(java.lang.String,java.lang.String)>(r1, r0);

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = <net.sourceforge.plantuml.FileUtils: java.util.concurrent.atomic.AtomicInteger counter>;

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r10.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>(r9);

        r16 = $r10;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating temporary file: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r14);

        virtualinvoke r16.<net.sourceforge.plantuml.security.SFile: void deleteOnExit()>();

        return r16;
    }

    public static void copyInternal(java.io.InputStream, java.io.OutputStream, boolean) throws java.io.IOException
    {
        byte[] r0;
        java.io.InputStream r1;
        int $i0;
        boolean z0;
        java.io.OutputStream r2;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        z0 := @parameter2: boolean;

        r0 = newarray (byte)[10240];

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        if $i0 <= 0 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        goto label1;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r2.<java.io.OutputStream: void close()>();

        virtualinvoke r1.<java.io.InputStream: void close()>();

     label3:
        return;
    }

    public static void copyToFile(net.sourceforge.plantuml.security.SFile, net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        boolean $z0;
        net.sourceforge.plantuml.security.SFile r0, r5;
        java.io.InputStream r1;
        java.io.BufferedOutputStream r2;
        java.io.FileNotFoundException $r3;
        java.lang.String $r4;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r5 := @parameter1: net.sourceforge.plantuml.security.SFile;

        $z0 = virtualinvoke r5.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        r5 = virtualinvoke r5.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile file(java.lang.String)>($r4);

     label1:
        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.InputStream openFile()>();

        if r1 != null goto label2;

        $r3 = new java.io.FileNotFoundException;

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>()>();

        throw $r3;

     label2:
        r2 = virtualinvoke r5.<net.sourceforge.plantuml.security.SFile: java.io.BufferedOutputStream createBufferedOutputStream()>();

        staticinvoke <net.sourceforge.plantuml.FileUtils: void copyInternal(java.io.InputStream,java.io.OutputStream,boolean)>(r1, r2, 1);

        return;
    }

    public static void copyToStream(net.sourceforge.plantuml.security.SFile, java.io.OutputStream) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.InputStream r1;
        java.io.BufferedOutputStream $r2;
        java.io.OutputStream r3;
        java.io.FileNotFoundException $r5;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r3 := @parameter1: java.io.OutputStream;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.InputStream openFile()>();

        if r1 != null goto label1;

        $r5 = new java.io.FileNotFoundException;

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>()>();

        throw $r5;

     label1:
        $r2 = new java.io.BufferedOutputStream;

        specialinvoke $r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r3);

        staticinvoke <net.sourceforge.plantuml.FileUtils: void copyInternal(java.io.InputStream,java.io.OutputStream,boolean)>(r1, $r2, 1);

        return;
    }

    public static void copyToStream(java.io.File, java.io.OutputStream) throws java.io.IOException
    {
        java.io.BufferedInputStream $r0;
        java.io.FileInputStream $r1;
        java.io.File r2;
        java.io.BufferedOutputStream $r4;
        java.io.OutputStream r5;

        r2 := @parameter0: java.io.File;

        r5 := @parameter1: java.io.OutputStream;

        $r0 = new java.io.BufferedInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        $r4 = new java.io.BufferedOutputStream;

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r5);

        staticinvoke <net.sourceforge.plantuml.FileUtils: void copyInternal(java.io.InputStream,java.io.OutputStream,boolean)>($r0, $r4, 1);

        return;
    }

    public static void copyToStream(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.BufferedInputStream $r0;
        java.io.InputStream r1;
        java.io.BufferedOutputStream $r3;
        java.io.OutputStream r4;

        r1 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.io.OutputStream;

        $r0 = new java.io.BufferedInputStream;

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);

        $r3 = new java.io.BufferedOutputStream;

        specialinvoke $r3.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r4);

        staticinvoke <net.sourceforge.plantuml.FileUtils: void copyInternal(java.io.InputStream,java.io.OutputStream,boolean)>($r0, $r3, 1);

        return;
    }

    public static void copyToFile(byte[], net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.BufferedOutputStream r1;
        byte[] r2;
        java.lang.Throwable $r3, $r6;

        r2 := @parameter0: byte[];

        r0 := @parameter1: net.sourceforge.plantuml.security.SFile;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.BufferedOutputStream createBufferedOutputStream()>();

     label1:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r2);

     label2:
        if r1 == null goto label8;

        virtualinvoke r1.<java.io.OutputStream: void close()>();

        goto label8;

     label3:
        $r6 := @caughtexception;

        if r1 == null goto label7;

     label4:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label7:
        throw $r6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static java.lang.String readSvg(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.BufferedReader r1;
        java.lang.String $r2;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.BufferedReader openBufferedReader()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <net.sourceforge.plantuml.FileUtils: java.lang.String readSvg(java.io.BufferedReader,boolean,boolean)>(r1, 0, 1);

        return $r2;
    }

    public static java.lang.String readSvg(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;
        java.lang.String $r4;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r4 = staticinvoke <net.sourceforge.plantuml.FileUtils: java.lang.String readSvg(java.io.BufferedReader,boolean,boolean)>($r0, 0, 0);

        return $r4;
    }

    public static java.lang.String readText(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;
        java.lang.String $r4;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r4 = staticinvoke <net.sourceforge.plantuml.FileUtils: java.lang.String readSvg(java.io.BufferedReader,boolean,boolean)>($r0, 1, 1);

        return $r4;
    }

    public static java.lang.String readFile(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.BufferedReader r1;
        java.lang.String $r2;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.BufferedReader openBufferedReader()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <net.sourceforge.plantuml.FileUtils: java.lang.String readSvg(java.io.BufferedReader,boolean,boolean)>(r1, 1, 1);

        return $r2;
    }

    private static java.lang.String readSvg(java.io.BufferedReader, boolean, boolean) throws java.io.IOException
    {
        java.lang.StringBuilder $r0;
        java.io.BufferedReader r2;
        boolean z0, z1;
        java.lang.String $r4, $r7;

        r2 := @parameter0: java.io.BufferedReader;

        z1 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r7 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r7 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        if z1 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label1;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r2.<java.io.BufferedReader: void close()>();

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
