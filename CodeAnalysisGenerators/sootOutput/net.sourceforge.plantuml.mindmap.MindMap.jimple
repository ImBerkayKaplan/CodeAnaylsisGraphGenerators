public class net.sourceforge.plantuml.mindmap.MindMap extends java.lang.Object implements net.sourceforge.plantuml.graphic.UDrawable
{
    private final net.sourceforge.plantuml.mindmap.Branch left;
    private final net.sourceforge.plantuml.mindmap.Branch right;
    private final net.sourceforge.plantuml.ISkinParam skinParam;

    public void <init>(net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.mindmap.MindMap r0;
        net.sourceforge.plantuml.mindmap.Branch $r1, $r2;
        net.sourceforge.plantuml.ISkinParam r3;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMap;

        r3 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.mindmap.Branch;

        specialinvoke $r1.<net.sourceforge.plantuml.mindmap.Branch: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left> = $r1;

        $r2 = new net.sourceforge.plantuml.mindmap.Branch;

        specialinvoke $r2.<net.sourceforge.plantuml.mindmap.Branch: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right> = $r2;

        r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.ISkinParam skinParam> = r3;

        return;
    }

    private void computeFinger()
    {
        net.sourceforge.plantuml.mindmap.MindMap r0;
        net.sourceforge.plantuml.mindmap.Branch $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        net.sourceforge.plantuml.Direction $r5, $r11;
        net.sourceforge.plantuml.ISkinParam $r6, $r12;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMap;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.mindmap.Branch: boolean hasFinger()>();

        if $z0 != 0 goto label4;

        $r2 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $z1 = virtualinvoke $r2.<net.sourceforge.plantuml.mindmap.Branch: boolean hasFinger()>();

        if $z1 != 0 goto label4;

        $r3 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $z2 = virtualinvoke $r3.<net.sourceforge.plantuml.mindmap.Branch: boolean hasChildren()>();

        if $z2 == 0 goto label1;

        $r13 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $r12 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r11 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        virtualinvoke $r13.<net.sourceforge.plantuml.mindmap.Branch: void initFinger(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.Direction)>($r12, $r11);

     label1:
        $r4 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $z3 = virtualinvoke $r4.<net.sourceforge.plantuml.mindmap.Branch: boolean hasFinger()>();

        if $z3 == 0 goto label2;

        $r10 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $z5 = virtualinvoke $r10.<net.sourceforge.plantuml.mindmap.Branch: boolean hasChildren()>();

        if $z5 == 0 goto label3;

     label2:
        $r7 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $r6 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        virtualinvoke $r7.<net.sourceforge.plantuml.mindmap.Branch: void initFinger(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.Direction)>($r6, $r5);

     label3:
        $r14 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $z6 = virtualinvoke $r14.<net.sourceforge.plantuml.mindmap.Branch: boolean hasFinger()>();

        if $z6 == 0 goto label4;

        $r8 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $z4 = virtualinvoke $r8.<net.sourceforge.plantuml.mindmap.Branch: boolean hasFinger()>();

        if $z4 == 0 goto label4;

        $r9 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        virtualinvoke $r9.<net.sourceforge.plantuml.mindmap.Branch: void doNotDrawFirstPhalanx()>();

     label4:
        return;
    }

    net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.MindMap r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.mindmap.Branch $r2, $r3, $r4, $r5, $r6, $r7;
        double d0, d1, d2, d3, $d4, d5, $d6, $d7, $d8, d9;
        net.sourceforge.plantuml.Dimension2DDouble $r8;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMap;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<net.sourceforge.plantuml.mindmap.MindMap: void computeFinger()>();

        $r2 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.mindmap.Branch: double getHalfThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        d1 = virtualinvoke $r3.<net.sourceforge.plantuml.mindmap.Branch: double getHalfThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        $r4 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        d3 = virtualinvoke $r4.<net.sourceforge.plantuml.mindmap.Branch: double getFullElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $d4 = virtualinvoke $r5.<net.sourceforge.plantuml.mindmap.Branch: double getFullElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d5 = d3 + $d4;

        $r6 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $d6 = virtualinvoke $r6.<net.sourceforge.plantuml.mindmap.Branch: double getHalfThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $d7 = virtualinvoke $r7.<net.sourceforge.plantuml.mindmap.Branch: double getHalfThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d8 = staticinvoke <java.lang.Math: double max(double,double)>($d6, $d7);

        d9 = d2 + $d8;

        $r8 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r8.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d5, d9);

        return $r8;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.mindmap.MindMap r0;
        net.sourceforge.plantuml.mindmap.Branch $r1, $r4, $r5, $r6, $r8, $r11, $r13;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r9, $r12;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double d0, d1, d2, d3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7, $r10;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMap;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.mindmap.Branch: boolean hasRoot()>();

        if $z0 != 0 goto label1;

        $r13 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $z1 = virtualinvoke $r13.<net.sourceforge.plantuml.mindmap.Branch: boolean hasRoot()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<net.sourceforge.plantuml.mindmap.MindMap: void computeFinger()>();

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        d0 = virtualinvoke $r4.<net.sourceforge.plantuml.mindmap.Branch: double getHalfThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r5 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        d1 = virtualinvoke $r5.<net.sourceforge.plantuml.mindmap.Branch: double getHalfThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        $r6 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        d3 = virtualinvoke $r6.<net.sourceforge.plantuml.mindmap.Branch: double getX12(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r8 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d3, d2);

        $r9 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        virtualinvoke $r8.<net.sourceforge.plantuml.mindmap.Branch: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r9);

        $r11 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d3, d2);

        $r12 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        virtualinvoke $r11.<net.sourceforge.plantuml.mindmap.Branch: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r12);

        return;
    }

    net.sourceforge.plantuml.command.CommandExecutionResult addIdeaInternal(java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor, int, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.mindmap.IdeaShape, net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.mindmap.MindMap r0;
        net.sourceforge.plantuml.mindmap.Branch $r1, $r5, $r13, $r17, $r20, $r23;
        boolean $z0, $z1;
        net.sourceforge.plantuml.Direction r2, $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r12, $r16, $r19;
        net.sourceforge.plantuml.style.StyleBuilder $r6, $r14, $r18, $r21;
        net.sourceforge.plantuml.ugraphic.color.HColor r7;
        net.sourceforge.plantuml.cucadiagram.Display r8;
        net.sourceforge.plantuml.mindmap.IdeaShape r9;
        java.lang.String r10;
        net.sourceforge.plantuml.command.CommandExecutionResult $r11, $r15, $r22, $r26;
        net.sourceforge.plantuml.style.NoStyleAvailableException $r24;
        int i0;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMap;

        r10 := @parameter0: java.lang.String;

        r7 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        i0 := @parameter2: int;

        r8 := @parameter3: net.sourceforge.plantuml.cucadiagram.Display;

        r9 := @parameter4: net.sourceforge.plantuml.mindmap.IdeaShape;

        r2 := @parameter5: net.sourceforge.plantuml.Direction;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.mindmap.Branch: boolean hasRoot()>();

        if $z0 != 0 goto label2;

        $r23 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $z1 = virtualinvoke $r23.<net.sourceforge.plantuml.mindmap.Branch: boolean hasRoot()>();

        if $z1 != 0 goto label2;

        i0 = 0;

     label2:
        if i0 != 0 goto label4;

        $r17 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $r16 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r18 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        virtualinvoke $r17.<net.sourceforge.plantuml.mindmap.Branch: void initRoot(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,java.lang.String)>($r18, r7, r8, r9, r10);

        $r20 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $r19 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r21 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        virtualinvoke $r20.<net.sourceforge.plantuml.mindmap.Branch: void initRoot(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,java.lang.String)>($r21, r7, r8, r9, r10);

        $r22 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

     label3:
        return $r22;

     label4:
        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        if r2 != $r3 goto label6;

        $r13 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch left>;

        $r12 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r14 = interfaceinvoke $r12.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r15 = virtualinvoke $r13.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.command.CommandExecutionResult add(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,int,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,java.lang.String)>($r14, r7, i0, r8, r9, r10);

     label5:
        return $r15;

     label6:
        $r5 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $r4 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r6 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r11 = virtualinvoke $r5.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.command.CommandExecutionResult add(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,int,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,java.lang.String)>($r6, r7, i0, r8, r9, r10);

     label7:
        return $r11;

     label8:
        $r24 := @caughtexception;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("General failure: no style available.");

        return $r26;

        catch net.sourceforge.plantuml.style.NoStyleAvailableException from label1 to label3 with label8;
        catch net.sourceforge.plantuml.style.NoStyleAvailableException from label4 to label5 with label8;
        catch net.sourceforge.plantuml.style.NoStyleAvailableException from label6 to label7 with label8;
    }

    boolean isFull(int)
    {
        int i0;
        net.sourceforge.plantuml.mindmap.MindMap r0;
        net.sourceforge.plantuml.mindmap.Branch $r1;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMap;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.mindmap.Branch right>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.mindmap.Branch: boolean hasRoot()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
