public class net.sourceforge.plantuml.dedication.RBlocks extends java.lang.Object
{
    private final java.util.List all;

    private void <init>()
    {
        net.sourceforge.plantuml.dedication.RBlocks r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.dedication.RBlocks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.dedication.RBlocks r2;
        java.util.List $r3, $r5;
        int $i0;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.String $r7, $r11;
        java.lang.Object $r8;
        net.sourceforge.plantuml.dedication.RBlock r9;

        r2 := @this: net.sourceforge.plantuml.dedication.RBlocks;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = r2.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.dedication.RBlock) $r8;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r11 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label1;

     label2:
        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static net.sourceforge.plantuml.dedication.RBlocks readFrom(byte[], int)
    {
        net.sourceforge.plantuml.dedication.RBlocks $r0;
        byte[] r2;
        int $i0, i1, i2;
        net.sourceforge.plantuml.dedication.RBlock $r3;
        java.util.List $r5;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        $r0 = new net.sourceforge.plantuml.dedication.RBlocks;

        specialinvoke $r0.<net.sourceforge.plantuml.dedication.RBlocks: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label2;

        $r3 = new net.sourceforge.plantuml.dedication.RBlock;

        specialinvoke $r3.<net.sourceforge.plantuml.dedication.RBlock: void <init>(byte[],int,int)>(r2, i2, i1);

        i2 = i2 + i1;

        $r5 = $r0.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    public net.sourceforge.plantuml.dedication.RBlocks change(java.math.BigInteger, java.math.BigInteger)
    {
        net.sourceforge.plantuml.dedication.RBlocks $r0, r2;
        java.util.List $r3, $r9;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.dedication.RBlock r6, $r10;
        java.math.BigInteger r7, r8;

        r2 := @this: net.sourceforge.plantuml.dedication.RBlocks;

        r7 := @parameter0: java.math.BigInteger;

        r8 := @parameter1: java.math.BigInteger;

        $r0 = new net.sourceforge.plantuml.dedication.RBlocks;

        specialinvoke $r0.<net.sourceforge.plantuml.dedication.RBlocks: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.dedication.RBlock) $r5;

        $r9 = $r0.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        $r10 = virtualinvoke r6.<net.sourceforge.plantuml.dedication.RBlock: net.sourceforge.plantuml.dedication.RBlock change(java.math.BigInteger,java.math.BigInteger)>(r7, r8);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        return $r0;
    }

    public void writeTo(java.nio.file.Path, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.dedication.RBlocks r0;
        java.io.FileOutputStream $r1;
        java.nio.file.Path r2;
        java.io.File $r3;
        int i0;

        r0 := @this: net.sourceforge.plantuml.dedication.RBlocks;

        r2 := @parameter0: java.nio.file.Path;

        i0 := @parameter1: int;

        $r1 = new java.io.FileOutputStream;

        $r3 = interfaceinvoke r2.<java.nio.file.Path: java.io.File toFile()>();

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        virtualinvoke r0.<net.sourceforge.plantuml.dedication.RBlocks: void writeTo(java.io.OutputStream,int)>($r1, i0);

        return;
    }

    public byte[] toByteArray(int) throws java.io.IOException
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        net.sourceforge.plantuml.dedication.RBlocks r0;
        java.util.List $r1, $r3, $r4;
        byte[] r2, r7;
        java.lang.Object $r5;
        net.sourceforge.plantuml.dedication.RBlock $r6;

        r0 := @this: net.sourceforge.plantuml.dedication.RBlocks;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = i0 * $i1;

        r2 = newarray (byte)[$i2];

        i6 = 0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i6 >= $i3 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i6);

        $r6 = (net.sourceforge.plantuml.dedication.RBlock) $r5;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.dedication.RBlock: byte[] getData(int)>(i0);

        $i5 = i6 * i0;

        $i4 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r2, $i5, $i4);

        i6 = i6 + 1;

        goto label1;

     label2:
        return r2;
    }

    public void writeTo(java.io.OutputStream, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.dedication.RBlocks r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.io.OutputStream r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.dedication.RBlock r5;
        int i0;
        byte[] r6;

        r0 := @this: net.sourceforge.plantuml.dedication.RBlocks;

        r3 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.dedication.RBlocks: java.util.List all>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.dedication.RBlock) $r4;

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.dedication.RBlock: byte[] getData(int)>(i0);

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>(r6);

        goto label1;

     label2:
        virtualinvoke r3.<java.io.OutputStream: void close()>();

        return;
    }
}
