public class net.sourceforge.plantuml.tim.stdlib.HslColor extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.HslColor r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.HslColor;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.HslColor r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.HslColor;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%hsl_color", 3);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.HslColor r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.HslColor;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 == 3 goto label1;

        if i0 != 4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1, $r3, $r5, $r7;
        net.sourceforge.plantuml.tim.expression.TValue $r2, $r4, $r6, $r8, $r13, $r17;
        int i0, i1, i2, $i3, i4;
        net.sourceforge.plantuml.ugraphic.color.HSLColor $r9, $r14;
        double $d0, $d1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.awt.Color r10, r24;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r11, $r15;
        java.lang.String $r12, $r16;
        net.sourceforge.plantuml.tim.stdlib.HslColor r18;
        net.sourceforge.plantuml.tim.TContext r19;
        net.sourceforge.plantuml.tim.TMemory r20;
        net.sourceforge.plantuml.LineLocation r21;
        java.util.Map r22;

        r18 := @this: net.sourceforge.plantuml.tim.stdlib.HslColor;

        r19 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r20 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r21 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r22 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        i0 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r4 = (net.sourceforge.plantuml.tim.expression.TValue) $r3;

        i1 = virtualinvoke $r4.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        $r6 = (net.sourceforge.plantuml.tim.expression.TValue) $r5;

        i2 = virtualinvoke $r6.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i3 != 3 goto label1;

        $r14 = new net.sourceforge.plantuml.ugraphic.color.HSLColor;

        $f6 = (float) i0;

        $f5 = (float) i1;

        $f4 = (float) i2;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.color.HSLColor: void <init>(float,float,float)>($f6, $f5, $f4);

        r24 = virtualinvoke $r14.<net.sourceforge.plantuml.ugraphic.color.HSLColor: java.awt.Color getRGB()>();

        $r15 = new net.sourceforge.plantuml.ugraphic.color.HColorSimple;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: void <init>(java.awt.Color,boolean)>(r24, 0);

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: java.lang.String asString()>();

        $r17 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>($r16);

        return $r17;

     label1:
        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(3);

        $r8 = (net.sourceforge.plantuml.tim.expression.TValue) $r7;

        i4 = virtualinvoke $r8.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $r9 = new net.sourceforge.plantuml.ugraphic.color.HSLColor;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $d0 = (double) i4;

        $d1 = $d0 / 100.0;

        $f0 = (float) $d1;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.color.HSLColor: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        r10 = virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.color.HSLColor: java.awt.Color getRGB()>();

        $r11 = new net.sourceforge.plantuml.ugraphic.color.HColorSimple;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: void <init>(java.awt.Color,boolean)>(r10, 0);

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: java.lang.String asString()>();

        $r13 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>($r12);

        return $r13;
    }
}
