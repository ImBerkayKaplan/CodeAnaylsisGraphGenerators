public final class h.ST_pointf extends smetana.core.UnsupportedStarStruct
{
    public double x;
    public double y;

    public void <init>()
    {
        h.ST_pointf r0;

        r0 := @this: h.ST_pointf;

        specialinvoke r0.<smetana.core.UnsupportedStarStruct: void <init>()>();

        return;
    }

    public static h.ST_pointf pointfof(double, double)
    {
        h.ST_pointf $r0;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new h.ST_pointf;

        specialinvoke $r0.<h.ST_pointf: void <init>()>();

        $r0.<h.ST_pointf: double x> = d0;

        $r0.<h.ST_pointf: double y> = d1;

        return $r0;
    }

    public static h.ST_pointf add_pointf(h.ST_pointf, h.ST_pointf)
    {
        h.ST_pointf $r0, r2, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r2 := @parameter0: h.ST_pointf;

        r3 := @parameter1: h.ST_pointf;

        $r0 = new h.ST_pointf;

        specialinvoke $r0.<h.ST_pointf: void <init>()>();

        $d1 = r2.<h.ST_pointf: double x>;

        $d0 = r3.<h.ST_pointf: double x>;

        $d2 = $d1 + $d0;

        $r0.<h.ST_pointf: double x> = $d2;

        $d4 = r2.<h.ST_pointf: double y>;

        $d3 = r3.<h.ST_pointf: double y>;

        $d5 = $d4 + $d3;

        $r0.<h.ST_pointf: double y> = $d5;

        return $r0;
    }

    public boolean isSameThan(smetana.core.__ptr__)
    {
        h.ST_pointf r0, $r2;
        smetana.core.__ptr__ r1;
        boolean $z0;

        r0 := @this: h.ST_pointf;

        r1 := @parameter0: smetana.core.__ptr__;

        $r2 = (h.ST_pointf) r1;

        if r0 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        h.ST_pointf r2;
        double $d0, $d1;
        java.lang.String $r7;

        r2 := @this: h.ST_pointf;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r2.<h.ST_pointf: double x>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d1 = r2.<h.ST_pointf: double y>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public h.ST_pointf copy()
    {
        h.ST_pointf $r0, r2;
        double $d0, $d1;

        r2 := @this: h.ST_pointf;

        $r0 = new h.ST_pointf;

        specialinvoke $r0.<h.ST_pointf: void <init>()>();

        $d0 = r2.<h.ST_pointf: double x>;

        $r0.<h.ST_pointf: double x> = $d0;

        $d1 = r2.<h.ST_pointf: double y>;

        $r0.<h.ST_pointf: double y> = $d1;

        return $r0;
    }

    public void ___(smetana.core.__struct__)
    {
        smetana.core.__struct__ r0;
        h.ST_pointf r1, r2;
        double $d0, $d1;

        r2 := @this: h.ST_pointf;

        r0 := @parameter0: smetana.core.__struct__;

        r1 = (h.ST_pointf) r0;

        $d0 = r1.<h.ST_pointf: double x>;

        r2.<h.ST_pointf: double x> = $d0;

        $d1 = r1.<h.ST_pointf: double y>;

        r2.<h.ST_pointf: double y> = $d1;

        return;
    }

    public volatile smetana.core.__struct__ copy()
    {
        h.ST_pointf r0, $r1;

        r0 := @this: h.ST_pointf;

        $r1 = virtualinvoke r0.<h.ST_pointf: h.ST_pointf copy()>();

        return $r1;
    }
}
