public class net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl extends java.lang.Object implements net.sourceforge.plantuml.tim.iterator.CodeIterator
{
    private final java.util.List list;
    private int current;
    private int countJump;
    static final boolean $assertionsDisabled;

    public void <init>(java.util.List)
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl r0;
        java.util.List r1;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current> = 0;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int countJump> = 0;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: java.util.List list> = r1;

        return;
    }

    public net.sourceforge.plantuml.StringLocated peek()
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl r0;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r4;
        net.sourceforge.plantuml.StringLocated $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl;

        $i0 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        $r1 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: java.util.List list>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != $i1 goto label1;

        return null;

     label1:
        $i2 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        $r2 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: java.util.List list>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i2 <= $i3 goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: java.util.List list>;

        $i4 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i4);

        $r5 = (net.sourceforge.plantuml.StringLocated) $r4;

        return $r5;
    }

    public void next()
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl r0;
        java.util.List $r1, $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        java.lang.AssertionError $r3, $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl;

        $i0 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        $r1 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: java.util.List list>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label1:
        $z0 = <net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i6 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        $r4 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: java.util.List list>;

        $i7 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i6 < $i7 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $i2 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        $i3 = $i2 + 1;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current> = $i3;

        $z1 = <net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i4 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        $r2 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: java.util.List list>;

        $i5 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i4 <= $i5 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    public net.sourceforge.plantuml.tim.iterator.CodePosition getCodePosition()
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl$Position $r0;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl r1;
        int $i0;

        r1 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl;

        $r0 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl$Position;

        $i0 = r1.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current>;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl$Position: void <init>(int)>($i0);

        return $r0;
    }

    public void jumpToCodePosition(net.sourceforge.plantuml.tim.iterator.CodePosition) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl r0;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.tim.iterator.CodePosition r1;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl$Position r2;
        net.sourceforge.plantuml.tim.EaterException $r3;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl;

        r1 := @parameter0: net.sourceforge.plantuml.tim.iterator.CodePosition;

        $i0 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int countJump>;

        $i1 = $i0 + 1;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int countJump> = $i1;

        $i2 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int countJump>;

        if $i2 <= 999 goto label1;

        $r3 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("Infinite loop?");

        throw $r3;

     label1:
        r2 = (net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl$Position) r1;

        $i3 = r2.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl$Position: int pos>;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: int current> = $i3;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/iterator/CodeIteratorImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
