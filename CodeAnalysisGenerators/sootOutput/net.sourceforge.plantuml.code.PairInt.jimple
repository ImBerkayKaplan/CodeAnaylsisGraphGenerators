public class net.sourceforge.plantuml.code.PairInt extends java.lang.Object
{
    private final int x;
    private final int y;

    public void <init>(int, int)
    {
        net.sourceforge.plantuml.code.PairInt r0;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.code.PairInt;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.code.PairInt: int x> = i0;

        r0.<net.sourceforge.plantuml.code.PairInt: int y> = i1;

        return;
    }

    public net.sourceforge.plantuml.code.PairInt rotate()
    {
        net.sourceforge.plantuml.code.PairInt $r0, r1;
        int $i0, $i1, $i2;

        r1 := @this: net.sourceforge.plantuml.code.PairInt;

        $r0 = new net.sourceforge.plantuml.code.PairInt;

        $i0 = r1.<net.sourceforge.plantuml.code.PairInt: int y>;

        $i2 = neg $i0;

        $i1 = r1.<net.sourceforge.plantuml.code.PairInt: int x>;

        specialinvoke $r0.<net.sourceforge.plantuml.code.PairInt: void <init>(int,int)>($i2, $i1);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.code.PairInt r2;
        int $i0, $i1;
        java.lang.String $r7;

        r2 := @this: net.sourceforge.plantuml.code.PairInt;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $i0 = r2.<net.sourceforge.plantuml.code.PairInt: int x>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i1 = r2.<net.sourceforge.plantuml.code.PairInt: int y>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int getX()
    {
        net.sourceforge.plantuml.code.PairInt r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.code.PairInt;

        $i0 = r0.<net.sourceforge.plantuml.code.PairInt: int x>;

        return $i0;
    }

    public int getY()
    {
        net.sourceforge.plantuml.code.PairInt r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.code.PairInt;

        $i0 = r0.<net.sourceforge.plantuml.code.PairInt: int y>;

        return $i0;
    }

    public net.sourceforge.plantuml.code.PairInt plus(net.sourceforge.plantuml.code.PairInt)
    {
        net.sourceforge.plantuml.code.PairInt $r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r1 := @this: net.sourceforge.plantuml.code.PairInt;

        r2 := @parameter0: net.sourceforge.plantuml.code.PairInt;

        $r0 = new net.sourceforge.plantuml.code.PairInt;

        $i1 = r1.<net.sourceforge.plantuml.code.PairInt: int x>;

        $i0 = r2.<net.sourceforge.plantuml.code.PairInt: int x>;

        $i5 = $i1 + $i0;

        $i3 = r1.<net.sourceforge.plantuml.code.PairInt: int y>;

        $i2 = r2.<net.sourceforge.plantuml.code.PairInt: int y>;

        $i4 = $i3 + $i2;

        specialinvoke $r0.<net.sourceforge.plantuml.code.PairInt: void <init>(int,int)>($i5, $i4);

        return $r0;
    }
}
