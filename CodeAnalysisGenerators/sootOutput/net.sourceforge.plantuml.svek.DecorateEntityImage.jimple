public class net.sourceforge.plantuml.svek.DecorateEntityImage extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.TextBlockBackcolored
{
    private final net.sourceforge.plantuml.graphic.TextBlock original;
    private final net.sourceforge.plantuml.graphic.HorizontalAlignment horizontal1;
    private final net.sourceforge.plantuml.graphic.TextBlock text1;
    private final net.sourceforge.plantuml.graphic.HorizontalAlignment horizontal2;
    private final net.sourceforge.plantuml.graphic.TextBlock text2;
    private double deltaX;
    private double deltaY;

    public static net.sourceforge.plantuml.graphic.TextBlock addTop(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage $r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r3;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r0 = new net.sourceforge.plantuml.svek.DecorateEntityImage;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r1, r2, r3, null, null);

        return $r0;
    }

    public static net.sourceforge.plantuml.graphic.TextBlock addBottom(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage $r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r3;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r0 = new net.sourceforge.plantuml.svek.DecorateEntityImage;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r1, null, null, r2, r3);

        return $r0;
    }

    public static net.sourceforge.plantuml.graphic.TextBlock add(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.graphic.VerticalAlignment)
    {
        net.sourceforge.plantuml.graphic.VerticalAlignment r0, $r1;
        net.sourceforge.plantuml.graphic.TextBlock r2, r3, $r5, $r6;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r4;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r4 := @parameter2: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r0 := @parameter3: net.sourceforge.plantuml.graphic.VerticalAlignment;

        $r1 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment TOP>;

        if r0 != $r1 goto label1;

        $r6 = staticinvoke <net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock addTop(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r2, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock addBottom(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r2, r3, r4);

        return $r5;
    }

    public static net.sourceforge.plantuml.graphic.TextBlock addTopAndBottom(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage $r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2, r4;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r3, r5;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r4 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        r5 := @parameter4: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r0 = new net.sourceforge.plantuml.svek.DecorateEntityImage;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r1, r2, r3, r4, r5);

        return $r0;
    }

    private void <init>(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, $r3, r5, r7;
        java.lang.Object $r2;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r4, r6;

        r0 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r4 := @parameter2: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r7 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        r6 := @parameter4: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.graphic.TextBlock) $r2;

        r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original> = $r3;

        r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.HorizontalAlignment horizontal1> = r4;

        r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text1> = r5;

        r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.HorizontalAlignment horizontal2> = r6;

        r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text2> = r7;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r13, $r18, $r22;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.DecorateEntityImage r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r5, $r7, $r10, $r12, $r14, $r17, $r20;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4, r6, r8, r9;
        double d0, $d1, d2, $d3, $d4, $d5, d6, d7, d8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11, $r16, $r21;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r15, $r19;

        r2 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text1>;

        r6 = specialinvoke r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>($r5, r1);

        $r7 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text2>;

        r8 = specialinvoke r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>($r7, r1);

        r9 = virtualinvoke r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d2 = d0 + $d1;

        $d3 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = $d3 - $d4;

        d6 = $d5 / 2.0;

        $r10 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text1>;

        if $r10 == null goto label1;

        $r19 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.HorizontalAlignment horizontal1>;

        d7 = specialinvoke r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: double getTextX(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r6, r9, $r19);

        $r20 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text1>;

        $r21 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d7);

        $r22 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

        interfaceinvoke $r20.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r22);

     label1:
        $r12 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        $r11 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, d0);

        $r13 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        interfaceinvoke $r12.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r13);

        r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaX> = d6;

        r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaY> = d0;

        $r14 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text2>;

        if $r14 == null goto label2;

        $r15 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.HorizontalAlignment horizontal2>;

        d8 = specialinvoke r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: double getTextX(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r8, r9, $r15);

        $r17 = r2.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text2>;

        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d8, d2);

        $r18 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        interfaceinvoke $r17.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r18);

     label2:
        return;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlock r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        net.sourceforge.plantuml.Dimension2DDouble $r3;
        net.sourceforge.plantuml.svek.DecorateEntityImage r4;

        r4 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        if r0 != null goto label1;

        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        return $r3;

     label1:
        $r2 = interfaceinvoke r0.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }

    private double getTextX(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.HorizontalAlignment r0, $r1, $r2, $r3;
        java.lang.IllegalStateException $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r5, r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        net.sourceforge.plantuml.svek.DecorateEntityImage r7;

        r7 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        r6 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r5 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r0 := @parameter2: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r1 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        if r0 != $r1 goto label1;

        $d3 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = $d3 - $d4;

        $d6 = $d5 / 2.0;

        return $d6;

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        if r0 != $r2 goto label2;

        return 0.0;

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        if r0 != $r3 goto label3;

        $d0 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d0 - $d1;

        return $d2;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1, $r3;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r5;

        r0 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        $r1 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        $z0 = $r1 instanceof net.sourceforge.plantuml.svek.TextBlockBackcolored;

        if $z0 == 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        $r4 = (net.sourceforge.plantuml.svek.TextBlockBackcolored) $r3;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.svek.TextBlockBackcolored: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        return $r5;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4, $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r5, r7, r8, $r9;

        r0 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text1>;

        r5 = specialinvoke r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>($r4, r1);

        $r6 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock text2>;

        r7 = specialinvoke r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>($r6, r1);

        r8 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r5, r7);

        $r9 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r3, r8);

        return $r9;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        net.sourceforge.plantuml.ugraphic.MinMax $r3;

        r0 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax fromDim(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r2);

        return $r3;
    }

    public final double getDeltaX()
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage r0, $r3;
        net.sourceforge.plantuml.graphic.TextBlock $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        $r1 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        $z0 = $r1 instanceof net.sourceforge.plantuml.svek.DecorateEntityImage;

        if $z0 == 0 goto label1;

        $d2 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaX>;

        $r2 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        $r3 = (net.sourceforge.plantuml.svek.DecorateEntityImage) $r2;

        $d1 = $r3.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaX>;

        $d3 = $d2 + $d1;

        return $d3;

     label1:
        $d0 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaX>;

        return $d0;
    }

    public final double getDeltaY()
    {
        net.sourceforge.plantuml.svek.DecorateEntityImage r0, $r3;
        net.sourceforge.plantuml.graphic.TextBlock $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.svek.DecorateEntityImage;

        $r1 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        $z0 = $r1 instanceof net.sourceforge.plantuml.svek.DecorateEntityImage;

        if $z0 == 0 goto label1;

        $d2 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaY>;

        $r2 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock original>;

        $r3 = (net.sourceforge.plantuml.svek.DecorateEntityImage) $r2;

        $d1 = $r3.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaY>;

        $d3 = $d2 + $d1;

        return $d3;

     label1:
        $d0 = r0.<net.sourceforge.plantuml.svek.DecorateEntityImage: double deltaY>;

        return $d0;
    }
}
