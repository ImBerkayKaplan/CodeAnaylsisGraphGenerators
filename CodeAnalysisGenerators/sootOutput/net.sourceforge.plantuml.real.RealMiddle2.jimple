class net.sourceforge.plantuml.real.RealMiddle2 extends net.sourceforge.plantuml.real.RealMoveable
{
    private final net.sourceforge.plantuml.real.RealMoveable p1;
    private final net.sourceforge.plantuml.real.RealMoveable p2;
    static final boolean $assertionsDisabled;

    void <init>(net.sourceforge.plantuml.real.RealMoveable, net.sourceforge.plantuml.real.RealMoveable)
    {
        net.sourceforge.plantuml.real.RealMiddle2 r0;
        net.sourceforge.plantuml.real.RealMoveable r1, r3;
        net.sourceforge.plantuml.real.RealLine $r2, $r4, $r5;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @this: net.sourceforge.plantuml.real.RealMiddle2;

        r1 := @parameter0: net.sourceforge.plantuml.real.RealMoveable;

        r3 := @parameter1: net.sourceforge.plantuml.real.RealMoveable;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.real.RealMoveable: net.sourceforge.plantuml.real.RealLine getLine()>();

        specialinvoke r0.<net.sourceforge.plantuml.real.RealMoveable: void <init>(net.sourceforge.plantuml.real.RealLine,java.lang.String)>($r2, "middle");

        $z0 = <net.sourceforge.plantuml.real.RealMiddle2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.real.RealMoveable: net.sourceforge.plantuml.real.RealLine getLine()>();

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.real.RealMoveable: net.sourceforge.plantuml.real.RealLine getLine()>();

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        r0.<net.sourceforge.plantuml.real.RealMiddle2: net.sourceforge.plantuml.real.RealMoveable p1> = r1;

        r0.<net.sourceforge.plantuml.real.RealMiddle2: net.sourceforge.plantuml.real.RealMoveable p2> = r3;

        return;
    }

    double getCurrentValueInternal()
    {
        net.sourceforge.plantuml.real.RealMiddle2 r0;
        net.sourceforge.plantuml.real.RealMoveable $r1, $r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.real.RealMiddle2;

        $r1 = r0.<net.sourceforge.plantuml.real.RealMiddle2: net.sourceforge.plantuml.real.RealMoveable p1>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.real.RealMoveable: double getCurrentValue()>();

        $r2 = r0.<net.sourceforge.plantuml.real.RealMiddle2: net.sourceforge.plantuml.real.RealMoveable p2>;

        $d1 = virtualinvoke $r2.<net.sourceforge.plantuml.real.RealMoveable: double getCurrentValue()>();

        $d2 = $d0 + $d1;

        $d3 = $d2 / 2.0;

        return $d3;
    }

    public net.sourceforge.plantuml.real.Real addAtLeast(double)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.real.RealMiddle2 r1;
        double d0;

        r1 := @this: net.sourceforge.plantuml.real.RealMiddle2;

        d0 := @parameter0: double;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void ensureBiggerThan(net.sourceforge.plantuml.real.Real)
    {
        net.sourceforge.plantuml.real.RealMiddle2 r0;
        net.sourceforge.plantuml.real.RealLine $r1;
        net.sourceforge.plantuml.real.PositiveForce $r2;
        net.sourceforge.plantuml.real.Real r3;

        r0 := @this: net.sourceforge.plantuml.real.RealMiddle2;

        r3 := @parameter0: net.sourceforge.plantuml.real.Real;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.real.RealMiddle2: net.sourceforge.plantuml.real.RealLine getLine()>();

        $r2 = new net.sourceforge.plantuml.real.PositiveForce;

        specialinvoke $r2.<net.sourceforge.plantuml.real.PositiveForce: void <init>(net.sourceforge.plantuml.real.Real,net.sourceforge.plantuml.real.RealMoveable,double)>(r3, r0, 0.0);

        virtualinvoke $r1.<net.sourceforge.plantuml.real.RealLine: void addForce(net.sourceforge.plantuml.real.PositiveForce)>($r2);

        return;
    }

    void move(double)
    {
        net.sourceforge.plantuml.real.RealMiddle2 r0;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.real.RealMoveable $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.real.RealMiddle2;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.real.RealMiddle2: net.sourceforge.plantuml.real.RealMoveable p1>;

        $d1 = d0 / 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.real.RealMoveable: void move(double)>($d1);

        $r2 = r0.<net.sourceforge.plantuml.real.RealMiddle2: net.sourceforge.plantuml.real.RealMoveable p2>;

        $d2 = d0 / 2.0;

        virtualinvoke $r2.<net.sourceforge.plantuml.real.RealMoveable: void move(double)>($d2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/real/RealMiddle2;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.real.RealMiddle2: boolean $assertionsDisabled> = $z1;

        return;
    }
}
