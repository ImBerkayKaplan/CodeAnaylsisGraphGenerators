public class net.sourceforge.plantuml.asciiart.ComponentTextShape extends net.sourceforge.plantuml.asciiart.AbstractComponentText
{
    private final net.sourceforge.plantuml.skin.ComponentType type;
    private final net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay;
    private final net.sourceforge.plantuml.asciiart.AsciiShape shape;

    public void <init>(net.sourceforge.plantuml.skin.ComponentType, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.asciiart.AsciiShape)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextShape r0;
        net.sourceforge.plantuml.skin.ComponentType r1;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        net.sourceforge.plantuml.asciiart.AsciiShape r3;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextShape;

        r1 := @parameter0: net.sourceforge.plantuml.skin.ComponentType;

        r2 := @parameter1: net.sourceforge.plantuml.cucadiagram.Display;

        r3 := @parameter2: net.sourceforge.plantuml.asciiart.AsciiShape;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.AbstractComponentText: void <init>()>();

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.skin.ComponentType type> = r1;

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay> = r2;

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.asciiart.AsciiShape shape> = r3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.skin.Area r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt $r3;
        net.sourceforge.plantuml.asciiart.UmlCharArea r4;
        double $d0, $d1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7;
        net.sourceforge.plantuml.asciiart.ComponentTextShape r5;
        net.sourceforge.plantuml.asciiart.AsciiShape $r6, $r11, $r14;
        net.sourceforge.plantuml.skin.ComponentType $r7;
        java.lang.String $r8;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.Display $r9, $r12;
        java.util.List $r10, $r13;
        net.sourceforge.plantuml.skin.Context2D r15;

        r5 := @this: net.sourceforge.plantuml.asciiart.ComponentTextShape;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.skin.Area;

        r15 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $r3 = (net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt) r2;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea getCharArea()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        i0 = (int) $d0;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        i1 = (int) $d1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void fillRect(char,int,int,int,int)>(32, 0, 0, i0, i1);

        $i2 = i0 / 2;

        $r6 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.asciiart.AsciiShape shape>;

        $i3 = virtualinvoke $r6.<net.sourceforge.plantuml.asciiart.AsciiShape: int getWidth()>();

        $i4 = $i3 / 2;

        $i5 = $i2 - $i4;

        i6 = $i5 + 1;

        $r7 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.skin.ComponentType type>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.skin.ComponentType: java.lang.String name()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean endsWith(java.lang.String)>("_HEAD");

        if $z0 == 0 goto label1;

        $r12 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.cucadiagram.Display: java.util.List asList()>();

        $i7 = specialinvoke r5.<net.sourceforge.plantuml.asciiart.ComponentTextShape: int getHeight()>();

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringsLRSimple(java.util.Collection,int,int)>($r13, 1, $i7);

        $r14 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.asciiart.AsciiShape shape>;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawShape(net.sourceforge.plantuml.asciiart.AsciiShape,int,int)>($r14, i6, 0);

        goto label2;

     label1:
        $r9 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.cucadiagram.Display: java.util.List asList()>();

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringsLRSimple(java.util.Collection,int,int)>($r10, 1, 0);

        $r11 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.asciiart.AsciiShape shape>;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawShape(net.sourceforge.plantuml.asciiart.AsciiShape,int,int)>($r11, i6, 1);

     label2:
        return;
    }

    private int getHeight()
    {
        net.sourceforge.plantuml.asciiart.ComponentTextShape r0;
        net.sourceforge.plantuml.asciiart.AsciiShape $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextShape;

        $r1 = r0.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.asciiart.AsciiShape shape>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.asciiart.AsciiShape: int getHeight()>();

        return $i0;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextShape r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        int $i0, $i1, $i2;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextShape;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $i0 = staticinvoke <net.sourceforge.plantuml.StringUtils: int getHeight(net.sourceforge.plantuml.cucadiagram.Display)>($r1);

        $i1 = specialinvoke r0.<net.sourceforge.plantuml.asciiart.ComponentTextShape: int getHeight()>();

        $i2 = $i0 + $i1;

        $d0 = (double) $i2;

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextShape r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        int $i0, $i1;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextShape;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.asciiart.ComponentTextShape: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $i0 = staticinvoke <net.sourceforge.plantuml.StringUtils: int getWcWidth(net.sourceforge.plantuml.cucadiagram.Display)>($r1);

        $i1 = $i0 + 2;

        $d0 = (double) $i1;

        return $d0;
    }
}
