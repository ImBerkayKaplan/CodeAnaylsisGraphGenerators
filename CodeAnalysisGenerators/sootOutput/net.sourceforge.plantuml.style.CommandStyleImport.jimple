public class net.sourceforge.plantuml.style.CommandStyleImport extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.style.CommandStyleImport r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.style.CommandStyleImport;

        $r1 = staticinvoke <net.sourceforge.plantuml.style.CommandStyleImport: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        net.sourceforge.plantuml.command.regex.RegexConcat $r15;

        $r0 = class "Lnet/sourceforge/plantuml/style/CommandStyleImport;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[12];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\<style");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\w+");

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[4] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("=");

        $r2[5] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[%q%g]?");

        $r2[7] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("PATH", "([^%q%g]*)");

        $r2[8] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[%q%g]?");

        $r2[9] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\>");

        $r2[10] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[11] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r15;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.TitledDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, $r7, $r19, $r26;
        net.sourceforge.plantuml.FileSystem $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r5, $r6, $r16, $r17, $r18, $r23, $r24, $r25;
        java.lang.Class $r4;
        net.sourceforge.plantuml.TitledDiagram r8;
        net.sourceforge.plantuml.ISkinParam $r9, $r15;
        java.util.Collection $r10;
        java.util.Iterator r11;
        net.sourceforge.plantuml.command.CommandExecutionResult $r12, $r20, $r27;
        java.lang.Object $r13;
        net.sourceforge.plantuml.style.Style r14;
        net.sourceforge.plantuml.LineLocation r21;
        java.io.IOException $r22;
        net.sourceforge.plantuml.style.CommandStyleImport r28;
        net.sourceforge.plantuml.security.SFile r29;
        net.sourceforge.plantuml.command.BlocLines r30;
        java.io.InputStream r31;
        net.sourceforge.plantuml.style.StyleBuilder r32;

        r28 := @this: net.sourceforge.plantuml.style.CommandStyleImport;

        r8 := @parameter0: net.sourceforge.plantuml.TitledDiagram;

        r21 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("PATH", 0);

     label1:
        $r2 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        r29 = virtualinvoke $r2.<net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.security.SFile getFile(java.lang.String)>(r1);

        r30 = null;

        $z0 = virtualinvoke r29.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z0 == 0 goto label2;

        r30 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines load(net.sourceforge.plantuml.security.SFile,net.sourceforge.plantuml.LineLocation)>(r29, r21);

        goto label3;

     label2:
        $r4 = class "Lnet/sourceforge/plantuml/style/StyleLoader;";

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/skin/");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = virtualinvoke $r4.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r7);

        if r31 == null goto label3;

        r30 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines load(java.io.InputStream,net.sourceforge.plantuml.LineLocation)>(r31, r21);

     label3:
        if r30 != null goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r19);

     label4:
        return $r20;

     label5:
        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.TitledDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r32 = interfaceinvoke $r9.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.style.StyleLoader: java.util.Collection getDeclaredStyles(net.sourceforge.plantuml.command.BlocLines,net.sourceforge.plantuml.style.AutomaticCounter)>(r30, r32);

        r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r13 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.style.Style) $r13;

        $r15 = virtualinvoke r8.<net.sourceforge.plantuml.TitledDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: void muteStyle(net.sourceforge.plantuml.style.Style)>(r14);

        goto label6;

     label7:
        goto label9;

     label8:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r26);

        return $r27;

     label9:
        $r12 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r12;

        catch java.io.IOException from label1 to label4 with label8;
        catch java.io.IOException from label5 to label7 with label8;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.style.CommandStyleImport r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.TitledDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.style.CommandStyleImport;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.TitledDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.style.CommandStyleImport: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.TitledDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
