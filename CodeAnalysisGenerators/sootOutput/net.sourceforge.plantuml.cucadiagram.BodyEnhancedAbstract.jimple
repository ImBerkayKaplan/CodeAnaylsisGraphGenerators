public abstract class net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    protected final net.sourceforge.plantuml.graphic.HorizontalAlignment align;
    protected final net.sourceforge.plantuml.graphic.FontConfiguration titleConfig;
    protected net.sourceforge.plantuml.graphic.TextBlock area;
    private final net.sourceforge.plantuml.style.Style style;

    void <init>(net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract r0;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r1;
        net.sourceforge.plantuml.graphic.FontConfiguration r2;
        net.sourceforge.plantuml.style.Style r3;

        r0 := @this: net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.FontConfiguration;

        r3 := @parameter2: net.sourceforge.plantuml.style.Style;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: net.sourceforge.plantuml.graphic.HorizontalAlignment align> = r1;

        r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: net.sourceforge.plantuml.graphic.FontConfiguration titleConfig> = r2;

        r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: net.sourceforge.plantuml.style.Style style> = r3;

        return;
    }

    public static boolean isBlockSeparator(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @parameter0: java.lang.CharSequence;

        r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z0 == 0 goto label1;

        $z7 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("--");

        if $z7 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("==");

        if $z1 == 0 goto label2;

        $z6 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("==");

        if $z6 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("..");

        if $z2 == 0 goto label3;

        $z4 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("..");

        if $z4 == 0 goto label3;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("...");

        if $z5 != 0 goto label3;

        return 1;

     label3:
        $z8 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("__");

        if $z8 == 0 goto label4;

        $z3 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("__");

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    public final net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: net.sourceforge.plantuml.graphic.TextBlock getArea(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3;

        r0 := @this: net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: net.sourceforge.plantuml.graphic.TextBlock getArea(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        return;
    }

    protected final net.sourceforge.plantuml.graphic.TextBlock getTitle(java.lang.String, net.sourceforge.plantuml.ISkinSimple)
    {
        int $i0, $i1, $i2;
        java.lang.String $r0, r7, r8;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract r2;
        net.sourceforge.plantuml.ISkinSimple r3;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r4;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5;
        net.sourceforge.plantuml.graphic.TextBlock $r6;

        r2 := @this: net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract;

        r7 := @parameter0: java.lang.String;

        r3 := @parameter1: net.sourceforge.plantuml.ISkinSimple;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 > 4 goto label1;

        return null;

     label1:
        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        $i2 = $i1 - 2;

        $r0 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(2, $i2);

        r8 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r0);

        $r1 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r8);

        $r5 = r2.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: net.sourceforge.plantuml.graphic.FontConfiguration titleConfig>;

        $r4 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r6 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r5, $r4, r3);

        return $r6;
    }

    protected abstract net.sourceforge.plantuml.graphic.TextBlock getArea(net.sourceforge.plantuml.graphic.StringBounder);

    protected abstract double getMarginX();

    protected final net.sourceforge.plantuml.graphic.TextBlock decorate(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.TextBlock, char, net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        char c0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r5, $r6, $r8, $r10, $r11;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.graphic.TextBlockLineBefore $r4, $r9;

        r0 := @this: net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        c0 := @parameter2: char;

        r1 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: double getMarginX()>();

        if c0 != 0 goto label1;

        $r11 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>(r5, d0, 0.0);

        return $r11;

     label1:
        if r1 != null goto label2;

        $r9 = new net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        $d6 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: double getDefaultThickness()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>(r5, d0, 4.0);

        specialinvoke $r9.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: void <init>(double,net.sourceforge.plantuml.graphic.TextBlock,char)>($d6, $r10, c0);

        return $r9;

     label2:
        r3 = interfaceinvoke r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r4 = new net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: double getDefaultThickness()>();

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 / 2.0;

        $r6 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>(r5, d0, 6.0, $d3, 4.0);

        specialinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: void <init>(double,net.sourceforge.plantuml.graphic.TextBlock,char,net.sourceforge.plantuml.graphic.TextBlock)>($d1, $r6, c0, r1);

        $d4 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = $d4 / 2.0;

        $r8 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>($r4, 0.0, 0.0, $d5, 0.0);

        return $r8;
    }

    protected final double getDefaultThickness()
    {
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract r0;
        net.sourceforge.plantuml.style.PName $r1;
        net.sourceforge.plantuml.style.Style $r2;
        net.sourceforge.plantuml.style.Value $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract: net.sourceforge.plantuml.style.Style style>;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineThickness>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        return $d0;

     label1:
        return 1.5;
    }
}
