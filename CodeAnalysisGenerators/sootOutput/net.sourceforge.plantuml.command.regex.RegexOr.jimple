public class net.sourceforge.plantuml.command.regex.RegexOr extends net.sourceforge.plantuml.command.regex.RegexComposed implements net.sourceforge.plantuml.command.regex.IRegex
{
    private final java.lang.String name;

    public transient void <init>(net.sourceforge.plantuml.command.regex.IRegex[])
    {
        net.sourceforge.plantuml.command.regex.RegexOr r0;
        net.sourceforge.plantuml.command.regex.IRegex[] r1;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexOr;

        r1 := @parameter0: net.sourceforge.plantuml.command.regex.IRegex[];

        specialinvoke r0.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>(null, r1);

        return;
    }

    public transient void <init>(java.lang.String, net.sourceforge.plantuml.command.regex.IRegex[])
    {
        net.sourceforge.plantuml.command.regex.RegexOr r0;
        net.sourceforge.plantuml.command.regex.IRegex[] r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexOr;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: net.sourceforge.plantuml.command.regex.IRegex[];

        specialinvoke r0.<net.sourceforge.plantuml.command.regex.RegexComposed: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>(r1);

        r0.<net.sourceforge.plantuml.command.regex.RegexOr: java.lang.String name> = r2;

        return;
    }

    protected java.lang.String getFullSlow()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.command.regex.RegexOr r2;
        java.lang.String $r3, $r7, $r10;
        java.util.List $r4;
        java.util.Iterator r5;
        int $i0, $i1;
        java.lang.Object $r8;
        net.sourceforge.plantuml.command.regex.IRegex r9;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.command.regex.RegexOr;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r3 = r2.<net.sourceforge.plantuml.command.regex.RegexOr: java.lang.String name>;

        if $r3 != null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?:");

     label1:
        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexOr: java.util.List partials()>();

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.command.regex.IRegex) $r8;

        $r10 = interfaceinvoke r9.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        goto label2;

     label3:
        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        $i1 = $i0 - 1;

        virtualinvoke $r0.<java.lang.StringBuilder: void setLength(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected int getStartCount()
    {
        net.sourceforge.plantuml.command.regex.RegexOr r0;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexOr;

        return 1;
    }

    public final java.util.Map createPartialMatch(java.util.Iterator)
    {
        java.util.HashMap $r0;
        net.sourceforge.plantuml.command.regex.RegexOr r2;
        java.lang.String $r3, $r8, $r10, $r12, $r14;
        java.util.Iterator r4;
        java.lang.Object $r5;
        java.util.Map $r7;
        net.sourceforge.plantuml.command.regex.RegexPartialMatch $r9;

        r2 := @this: net.sourceforge.plantuml.command.regex.RegexOr;

        r4 := @parameter0: java.util.Iterator;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.command.regex.RegexOr: java.lang.String name>;

        if $r3 != null goto label1;

        $r14 = null;

        goto label2;

     label1:
        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r5;

     label2:
        $r7 = specialinvoke r2.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.Map createPartialMatch(java.util.Iterator)>(r4);

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r7);

        $r8 = r2.<net.sourceforge.plantuml.command.regex.RegexOr: java.lang.String name>;

        if $r8 == null goto label3;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexPartialMatch;

        $r10 = r2.<net.sourceforge.plantuml.command.regex.RegexOr: java.lang.String name>;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexPartialMatch: void <init>(java.lang.String)>($r10);

        virtualinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexPartialMatch: void add(java.lang.String)>($r14);

        $r12 = r2.<net.sourceforge.plantuml.command.regex.RegexOr: java.lang.String name>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r9);

     label3:
        return $r0;
    }

    public boolean match(net.sourceforge.plantuml.StringLocated)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.command.regex.RegexOr r1;
        net.sourceforge.plantuml.StringLocated r2;

        r1 := @this: net.sourceforge.plantuml.command.regex.RegexOr;

        r2 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
