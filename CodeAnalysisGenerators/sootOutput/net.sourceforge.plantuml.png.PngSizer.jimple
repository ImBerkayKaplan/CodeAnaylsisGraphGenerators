public class net.sourceforge.plantuml.png.PngSizer extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.png.PngSizer r0;

        r0 := @this: net.sourceforge.plantuml.png.PngSizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.image.BufferedImage process(java.awt.image.BufferedImage, int)
    {
        int i0;
        java.awt.image.BufferedImage r0, $r1;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i0 := @parameter1: int;

        if i0 == 2147483647 goto label1;

        $r1 = staticinvoke <net.sourceforge.plantuml.png.PngSizer: java.awt.image.BufferedImage resize(java.awt.image.BufferedImage,int)>(r0, i0);

        return $r1;

     label1:
        return r0;
    }

    private static java.awt.image.BufferedImage resize(java.awt.image.BufferedImage, int)
    {
        java.lang.StringBuilder $r0, $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r3;
        java.awt.image.BufferedImage r4, $r5;
        java.awt.Graphics2D r7;
        java.awt.Color $r8;

        r4 := @parameter0: java.awt.image.BufferedImage;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resizing file to ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r3);

        $i1 = virtualinvoke r4.<java.awt.image.BufferedImage: int getWidth()>();

        if $i1 < i0 goto label1;

        return r4;

     label1:
        $r5 = new java.awt.image.BufferedImage;

        $i2 = virtualinvoke r4.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, $i2, 1);

        r7 = virtualinvoke $r5.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r8 = <java.awt.Color: java.awt.Color WHITE>;

        virtualinvoke r7.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r8);

        $i3 = virtualinvoke $r5.<java.awt.image.BufferedImage: int getWidth()>();

        $i4 = virtualinvoke $r5.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r7.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i3, $i4);

        $i5 = virtualinvoke r4.<java.awt.image.BufferedImage: int getWidth()>();

        $i6 = i0 - $i5;

        i7 = $i6 / 2;

        virtualinvoke r7.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r4, i7, 0, null);

        virtualinvoke r7.<java.awt.Graphics2D: void dispose()>();

        return $r5;
    }
}
