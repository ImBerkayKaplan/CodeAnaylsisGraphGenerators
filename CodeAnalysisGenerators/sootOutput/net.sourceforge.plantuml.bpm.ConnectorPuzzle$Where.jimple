public final enum class net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where NORTH;
    public static final enum net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where EAST;
    public static final enum net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where SOUTH;
    public static final enum net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where WEST;
    private int coding;
    private static final net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where[] $VALUES;

    public static net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where[] values()
    {
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/bpm/ConnectorPuzzle$Where;", r0);

        $r2 = (net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: int coding> = i1;

        return;
    }

    java.lang.String toShortString()
    {
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where r0;
        java.lang.String $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: java.lang.String name()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        return $r2;
    }

    int getCoding()
    {
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where;

        $i0 = r0.<net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: int coding>;

        return $i0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where[] $r4;

        $r0 = new net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where;

        specialinvoke $r0.<net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: void <init>(java.lang.String,int,int)>("NORTH", 0, 1);

        <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where NORTH> = $r0;

        $r1 = new net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where;

        specialinvoke $r1.<net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: void <init>(java.lang.String,int,int)>("EAST", 1, 2);

        <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where EAST> = $r1;

        $r2 = new net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where;

        specialinvoke $r2.<net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: void <init>(java.lang.String,int,int)>("SOUTH", 2, 4);

        <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where SOUTH> = $r2;

        $r3 = new net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where;

        specialinvoke $r3.<net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: void <init>(java.lang.String,int,int)>("WEST", 3, 8);

        <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where WEST> = $r3;

        $r4 = newarray (net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where)[4];

        $r5 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where NORTH>;

        $r4[0] = $r5;

        $r6 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where EAST>;

        $r4[1] = $r6;

        $r7 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where SOUTH>;

        $r4[2] = $r7;

        $r8 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where WEST>;

        $r4[3] = $r8;

        <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where[] $VALUES> = $r4;

        return;
    }
}
