public class net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces extends java.lang.Object
{
    private final java.util.Map all;

    public void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all> = $r1;

        return;
    }

    public java.util.Collection values()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public void addConstraints(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r5, r10;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.real.Real r7, r8, $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r10 = null;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r4;

        if r10 == null goto label2;

        r7 = virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosE(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        r8 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $r9 = interfaceinvoke r7.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(10.0);

        interfaceinvoke r8.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r9);

     label2:
        r10 = r5;

        goto label1;

     label3:
        return;
    }

    public net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace previous(net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r5, r6, r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r6 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r7 = null;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r4;

        if r5 != r6 goto label2;

        return r7;

     label2:
        r7 = r5;

        goto label1;

     label3:
        return null;
    }

    public net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace next(net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r5, r6, $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r6 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r4;

        if r5 != r6 goto label2;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r7;

        return $r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.util.Collection participants()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public void put(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r2;
        java.util.Map $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r3;

        return $r4;
    }

    public void drawHeads(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Context2D, net.sourceforge.plantuml.graphic.VerticalAlignment)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r11;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r2;
        double d0, d1, $d2, d3;
        java.util.Collection $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r6;
        net.sourceforge.plantuml.real.Real $r7;
        net.sourceforge.plantuml.graphic.VerticalAlignment r8, $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;
        net.sourceforge.plantuml.skin.Context2D r12;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r13;
        net.sourceforge.plantuml.awt.geom.Dimension2D r14;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r12 := @parameter1: net.sourceforge.plantuml.skin.Context2D;

        r8 := @parameter2: net.sourceforge.plantuml.graphic.VerticalAlignment;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection values()>();

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = interfaceinvoke $r7.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d3 = 0.0;

        $r9 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment BOTTOM>;

        if r8 != $r9 goto label2;

        r14 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.awt.geom.Dimension2D getHeadPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = virtualinvoke r14.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d3 = d0 - $d2;

     label2:
        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d1, d3);

        $r11 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        $r13 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void drawHead(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.graphic.VerticalAlignment,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r11, r12, r8, $r13);

        goto label1;

     label3:
        return;
    }

    public double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Collection $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection values()>();

        r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r3;

        r6 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.awt.geom.Dimension2D getHeadPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public void drawLifeLines(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Collection $r1;
        java.util.Iterator r2;
        boolean $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, $r9;
        net.sourceforge.plantuml.graphic.StringBounder $r6;
        net.sourceforge.plantuml.real.Real $r7;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8;
        net.sourceforge.plantuml.skin.Context2D r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        r10 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection values()>();

        r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r3;

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r7 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        d0 = interfaceinvoke $r7.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d0);

        $r9 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void drawLineAndLiveboxes(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>($r9, d1, r10);

        goto label1;

     label2:
        return;
    }

    public void delayOn(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Collection $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r4;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection values()>();

        r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r3;

        virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void delayOn(double,double)>(d0, d1);

        goto label1;

     label2:
        return;
    }

    public int size()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Map all>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
}
