public class net.sourceforge.plantuml.tim.stdlib.FunctionExists extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.FunctionExists r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.FunctionExists;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.FunctionExists r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.FunctionExists;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%function_exists", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.FunctionExists r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.FunctionExists;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2, $r5;
        java.lang.String r3;
        net.sourceforge.plantuml.tim.TContext r4;
        boolean $z0;
        net.sourceforge.plantuml.tim.stdlib.FunctionExists r6;
        net.sourceforge.plantuml.tim.TMemory r7;
        net.sourceforge.plantuml.LineLocation r8;
        java.util.Map r9;

        r6 := @this: net.sourceforge.plantuml.tim.stdlib.FunctionExists;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r7 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r8 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r9 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.tim.TContext: boolean doesFunctionExist(java.lang.String)>(r3);

        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z0);

        return $r5;
    }
}
