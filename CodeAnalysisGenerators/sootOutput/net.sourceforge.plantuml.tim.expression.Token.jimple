public class net.sourceforge.plantuml.tim.expression.Token extends java.lang.Object
{
    private final java.lang.String surface;
    private final net.sourceforge.plantuml.json.JsonValue json;
    private final net.sourceforge.plantuml.tim.expression.TokenType tokenType;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        net.sourceforge.plantuml.tim.expression.Token r1;
        net.sourceforge.plantuml.tim.expression.TokenType $r2;
        java.lang.String $r5, $r8;

        r1 := @this: net.sourceforge.plantuml.tim.expression.Token;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType tokenType>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r5 = r1.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String surface>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void <init>(char, net.sourceforge.plantuml.tim.expression.TokenType, net.sourceforge.plantuml.json.JsonValue)
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        char c0;
        java.lang.String $r4;
        net.sourceforge.plantuml.tim.expression.TokenType r5;
        net.sourceforge.plantuml.json.JsonValue r6;

        r0 := @this: net.sourceforge.plantuml.tim.expression.Token;

        c0 := @parameter0: char;

        r5 := @parameter1: net.sourceforge.plantuml.tim.expression.TokenType;

        r6 := @parameter2: net.sourceforge.plantuml.json.JsonValue;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r4, r5, r6);

        return;
    }

    public void <init>(java.lang.String, net.sourceforge.plantuml.tim.expression.TokenType, net.sourceforge.plantuml.json.JsonValue)
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        java.lang.String r1;
        net.sourceforge.plantuml.tim.expression.TokenType r2;
        net.sourceforge.plantuml.json.JsonValue r3;

        r0 := @this: net.sourceforge.plantuml.tim.expression.Token;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.tim.expression.TokenType;

        r3 := @parameter2: net.sourceforge.plantuml.json.JsonValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String surface> = r1;

        r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType tokenType> = r2;

        r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.json.JsonValue json> = r3;

        return;
    }

    public net.sourceforge.plantuml.tim.expression.TokenOperator getTokenOperator()
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        net.sourceforge.plantuml.tim.expression.TokenType $r1, $r2;
        java.lang.String $r3, $r4, $r6;
        int $i0;
        char $c2, $c3;
        net.sourceforge.plantuml.tim.expression.TokenOperator $r5;
        java.lang.IllegalStateException $r7;

        r0 := @this: net.sourceforge.plantuml.tim.expression.Token;

        $r2 = r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType tokenType>;

        $r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPERATOR>;

        if $r2 == $r1 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String surface>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 1 goto label2;

        $r6 = r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String surface>;

        $c3 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(1);

        goto label3;

     label2:
        $c3 = 0;

     label3:
        $r4 = r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String surface>;

        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator getTokenOperator(char,char)>($c2, $c3);

        return $r5;
    }

    public final java.lang.String getSurface()
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.Token;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String surface>;

        return $r1;
    }

    public final net.sourceforge.plantuml.tim.expression.TokenType getTokenType()
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        net.sourceforge.plantuml.tim.expression.TokenType $r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.Token;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType tokenType>;

        return $r1;
    }

    public net.sourceforge.plantuml.tim.expression.Token muteToFunction()
    {
        net.sourceforge.plantuml.tim.expression.Token r0, $r3;
        net.sourceforge.plantuml.tim.expression.TokenType $r1, $r2, $r4;
        java.lang.String $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: net.sourceforge.plantuml.tim.expression.Token;

        $r2 = r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType tokenType>;

        $r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType PLAIN_TEXT>;

        if $r2 == $r1 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r3 = new net.sourceforge.plantuml.tim.expression.Token;

        $r5 = r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String surface>;

        $r4 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType FUNCTION_NAME>;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r5, $r4, null);

        return $r3;
    }

    public net.sourceforge.plantuml.json.JsonValue getJson()
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        net.sourceforge.plantuml.tim.expression.TokenType $r1, $r2;
        net.sourceforge.plantuml.json.JsonValue $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: net.sourceforge.plantuml.tim.expression.Token;

        $r2 = r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType tokenType>;

        $r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType JSON_DATA>;

        if $r2 == $r1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.json.JsonValue json>;

        return $r3;
    }
}
