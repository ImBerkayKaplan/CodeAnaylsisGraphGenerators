public final enum class net.sourceforge.plantuml.ugraphic.USegmentType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO;
    public static final enum net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO;
    public static final enum net.sourceforge.plantuml.ugraphic.USegmentType SEG_QUADTO;
    public static final enum net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO;
    public static final enum net.sourceforge.plantuml.ugraphic.USegmentType SEG_CLOSE;
    public static final enum net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO;
    public static final int SEG_ARCTO_VALUE;
    private final int code;
    private static final net.sourceforge.plantuml.ugraphic.USegmentType[] $VALUES;

    public static net.sourceforge.plantuml.ugraphic.USegmentType[] values()
    {
        net.sourceforge.plantuml.ugraphic.USegmentType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.ugraphic.USegmentType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.ugraphic.USegmentType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.ugraphic.USegmentType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/ugraphic/USegmentType;", r0);

        $r2 = (net.sourceforge.plantuml.ugraphic.USegmentType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        net.sourceforge.plantuml.ugraphic.USegmentType r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.USegmentType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<net.sourceforge.plantuml.ugraphic.USegmentType: int code> = i1;

        return;
    }

    public int getNbPoints()
    {
        net.sourceforge.plantuml.ugraphic.USegmentType r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.USegmentType;

        $r1 = <net.sourceforge.plantuml.ugraphic.USegmentType$1: int[] $SwitchMap$net$sourceforge$plantuml$ugraphic$USegmentType>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.USegmentType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        return 1;

     label2:
        return 1;

     label3:
        return 3;

     label4:
        return 0;

     label5:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public static net.sourceforge.plantuml.ugraphic.USegmentType getByCode(int)
    {
        java.util.EnumSet $r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.ugraphic.USegmentType r4;
        int i0, $i1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/USegmentType;");

        r1 = virtualinvoke $r0.<java.util.EnumSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.ugraphic.USegmentType) $r3;

        $i1 = r4.<net.sourceforge.plantuml.ugraphic.USegmentType: int code>;

        if $i1 != i0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.ugraphic.USegmentType $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        net.sourceforge.plantuml.ugraphic.USegmentType[] $r6;

        <net.sourceforge.plantuml.ugraphic.USegmentType: int SEG_ARCTO_VALUE> = 4321;

        $r0 = new net.sourceforge.plantuml.ugraphic.USegmentType;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.USegmentType: void <init>(java.lang.String,int,int)>("SEG_MOVETO", 0, 0);

        <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO> = $r0;

        $r1 = new net.sourceforge.plantuml.ugraphic.USegmentType;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.USegmentType: void <init>(java.lang.String,int,int)>("SEG_LINETO", 1, 1);

        <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO> = $r1;

        $r2 = new net.sourceforge.plantuml.ugraphic.USegmentType;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.USegmentType: void <init>(java.lang.String,int,int)>("SEG_QUADTO", 2, 2);

        <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_QUADTO> = $r2;

        $r3 = new net.sourceforge.plantuml.ugraphic.USegmentType;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.USegmentType: void <init>(java.lang.String,int,int)>("SEG_CUBICTO", 3, 3);

        <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO> = $r3;

        $r4 = new net.sourceforge.plantuml.ugraphic.USegmentType;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.USegmentType: void <init>(java.lang.String,int,int)>("SEG_CLOSE", 4, 4);

        <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CLOSE> = $r4;

        $r5 = new net.sourceforge.plantuml.ugraphic.USegmentType;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.USegmentType: void <init>(java.lang.String,int,int)>("SEG_ARCTO", 5, 4321);

        <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO> = $r5;

        $r6 = newarray (net.sourceforge.plantuml.ugraphic.USegmentType)[6];

        $r7 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        $r6[0] = $r7;

        $r8 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        $r6[1] = $r8;

        $r9 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_QUADTO>;

        $r6[2] = $r9;

        $r10 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        $r6[3] = $r10;

        $r11 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CLOSE>;

        $r6[4] = $r11;

        $r12 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        $r6[5] = $r12;

        <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType[] $VALUES> = $r6;

        return;
    }
}
