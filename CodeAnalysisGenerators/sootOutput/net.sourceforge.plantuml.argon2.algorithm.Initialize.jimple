public class net.sourceforge.plantuml.argon2.algorithm.Initialize extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.argon2.algorithm.Initialize r0;

        r0 := @this: net.sourceforge.plantuml.argon2.algorithm.Initialize;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void initialize(net.sourceforge.plantuml.argon2.model.Instance, net.sourceforge.plantuml.argon2.Argon2)
    {
        net.sourceforge.plantuml.argon2.Argon2 r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte[] $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r16;
        net.sourceforge.plantuml.argon2.model.Argon2Type $r6;
        net.sourceforge.plantuml.argon2.model.Instance r17;

        r17 := @parameter0: net.sourceforge.plantuml.argon2.model.Instance;

        r0 := @parameter1: net.sourceforge.plantuml.argon2.Argon2;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getLanes()>();

        $r1 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i0);

        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getOutputLength()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i1);

        $i2 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getMemory()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i2);

        $i3 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getIterations()>();

        $r4 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i3);

        $i4 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getVersion()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i4);

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: net.sourceforge.plantuml.argon2.model.Argon2Type getType()>();

        $i5 = virtualinvoke $r6.<net.sourceforge.plantuml.argon2.model.Argon2Type: int ordinal()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i5);

        $i6 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getPasswordLength()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i6);

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: byte[] getPassword()>();

        $i7 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getSaltLength()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i7);

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: byte[] getSalt()>();

        $i8 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getSecretLength()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i8);

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: byte[] getSecret()>();

        $i9 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: int getAdditionalLength()>();

        $r14 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>($i9);

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.Argon2: byte[] getAdditional()>();

        r16 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: byte[] initialHash(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Initialize: void fillFirstBlocks(net.sourceforge.plantuml.argon2.model.Instance,byte[])>(r17, r16);

        return;
    }

    private static void fillFirstBlocks(net.sourceforge.plantuml.argon2.model.Instance, byte[])
    {
        byte[] $r0, $r2, r4, r5, r6, r8, r13, r14;
        net.sourceforge.plantuml.argon2.model.Instance r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        net.sourceforge.plantuml.argon2.model.Block[] $r9, $r11;
        net.sourceforge.plantuml.argon2.model.Block $r10, $r12;

        r7 := @parameter0: net.sourceforge.plantuml.argon2.model.Instance;

        r4 := @parameter1: byte[];

        $r0 = newarray (byte)[4];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r2 = newarray (byte)[4];

        $r2[0] = 1;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        r5 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Initialize: byte[] getInitialHashLong(byte[],byte[])>(r4, $r0);

        r6 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Initialize: byte[] getInitialHashLong(byte[],byte[])>(r4, $r2);

        i7 = 0;

     label1:
        $i0 = virtualinvoke r7.<net.sourceforge.plantuml.argon2.model.Instance: int getLanes()>();

        if i7 >= $i0 goto label2;

        r8 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>(i7);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r5, 68, 4);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r6, 68, 4);

        r13 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: byte[] blake2bLong(byte[],int)>(r5, 1024);

        $r9 = r7.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory>;

        $i1 = virtualinvoke r7.<net.sourceforge.plantuml.argon2.model.Instance: int getLaneLength()>();

        $i2 = i7 * $i1;

        $i3 = $i2 + 0;

        $r10 = $r9[$i3];

        virtualinvoke $r10.<net.sourceforge.plantuml.argon2.model.Block: void fromBytes(byte[])>(r13);

        r14 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: byte[] blake2bLong(byte[],int)>(r6, 1024);

        $r11 = r7.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory>;

        $i4 = virtualinvoke r7.<net.sourceforge.plantuml.argon2.model.Instance: int getLaneLength()>();

        $i5 = i7 * $i4;

        $i6 = $i5 + 1;

        $r12 = $r11[$i6];

        virtualinvoke $r12.<net.sourceforge.plantuml.argon2.model.Block: void fromBytes(byte[])>(r14);

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    private static byte[] getInitialHashLong(byte[], byte[])
    {
        byte[] r0, r1, r2;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        r0 = newarray (byte)[72];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, 64);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r0, 64, 4);

        return r0;
    }
}
