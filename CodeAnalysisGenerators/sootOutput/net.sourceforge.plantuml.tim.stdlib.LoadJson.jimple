public class net.sourceforge.plantuml.tim.stdlib.LoadJson extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{
    private static final java.lang.String VALUE_CHARSET_DEFAULT;
    private static final java.lang.String VALUE_DEFAULT_DEFAULT;

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.LoadJson r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.LoadJson;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.LoadJson r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.LoadJson;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%loadJSON", 3);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.LoadJson r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.LoadJson;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 != 3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2, $r7;
        java.lang.String r3, $r5, $r13, $r15, $r24, r30;
        net.sourceforge.plantuml.tim.stdlib.LoadJson r4;
        net.sourceforge.plantuml.json.JsonValue r6;
        java.io.UnsupportedEncodingException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r18, $r19, $r20, $r21, $r23;
        net.sourceforge.plantuml.tim.EaterException $r16, $r25;
        net.sourceforge.plantuml.json.ParseException $r17;
        net.sourceforge.plantuml.json.Location $r22;
        net.sourceforge.plantuml.tim.TContext r26;
        net.sourceforge.plantuml.tim.TMemory r27;
        net.sourceforge.plantuml.LineLocation r28;
        java.util.Map r29;

        r4 := @this: net.sourceforge.plantuml.tim.stdlib.LoadJson;

        r26 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r27 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r28 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r29 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

     label1:
        $r5 = specialinvoke r4.<net.sourceforge.plantuml.tim.stdlib.LoadJson: java.lang.String getCharset(java.util.List)>(r0);

        r30 = specialinvoke r4.<net.sourceforge.plantuml.tim.stdlib.LoadJson: java.lang.String loadStringData(java.lang.String,java.lang.String)>(r3, $r5);

        if r30 != null goto label2;

        r30 = specialinvoke r4.<net.sourceforge.plantuml.tim.stdlib.LoadJson: java.lang.String getDefaultJson(java.util.List)>(r0);

     label2:
        r6 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue parse(java.lang.String)>(r30);

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.json.JsonValue)>(r6);

     label3:
        return $r7;

     label4:
        $r17 := @caughtexception;

        virtualinvoke $r17.<net.sourceforge.plantuml.json.ParseException: void printStackTrace()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSON parse issue in source ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on location ");

        $r22 = virtualinvoke $r17.<net.sourceforge.plantuml.json.ParseException: net.sourceforge.plantuml.json.Location getLocation()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>($r24);

        throw $r25;

     label5:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSON encoding issue in source ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r8.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>($r15);

        throw $r16;

        catch net.sourceforge.plantuml.json.ParseException from label1 to label3 with label4;
        catch java.io.UnsupportedEncodingException from label1 to label3 with label5;
    }

    private java.lang.String getDefaultJson(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2;
        java.lang.String $r3;
        net.sourceforge.plantuml.tim.stdlib.LoadJson r4;

        r4 := @this: net.sourceforge.plantuml.tim.stdlib.LoadJson;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        return $r3;

     label1:
        return "{}";
    }

    private java.lang.String getCharset(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2;
        java.lang.String $r3;
        net.sourceforge.plantuml.tim.stdlib.LoadJson r4;

        r4 := @this: net.sourceforge.plantuml.tim.stdlib.LoadJson;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 3 goto label1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        return $r3;

     label1:
        return "UTF-8";
    }

    private java.lang.String loadStringData(java.lang.String, java.lang.String) throws net.sourceforge.plantuml.tim.EaterException, java.io.UnsupportedEncodingException
    {
        java.lang.String r0, $r1, r2, $r6, $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r12, $r13, $r14, $r15, $r17;
        net.sourceforge.plantuml.tim.EaterException $r7, $r19;
        net.sourceforge.plantuml.FileSystem $r8;
        java.io.ByteArrayOutputStream $r9;
        java.io.IOException $r11;
        net.sourceforge.plantuml.tim.stdlib.LoadJson r20;
        byte[] r21;
        net.sourceforge.plantuml.security.SURL r22;
        net.sourceforge.plantuml.security.SFile r23;

        r20 := @this: net.sourceforge.plantuml.tim.stdlib.LoadJson;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r21 = null;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        if $z1 == 0 goto label3;

     label1:
        r22 = staticinvoke <net.sourceforge.plantuml.security.SURL: net.sourceforge.plantuml.security.SURL create(java.lang.String)>(r0);

        if r22 != null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("load JSON: Invalid URL ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r6);

        throw $r7;

     label2:
        r21 = virtualinvoke r22.<net.sourceforge.plantuml.security.SURL: byte[] getBytes()>();

        goto label6;

     label3:
        $r8 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        r23 = virtualinvoke $r8.<net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.security.SFile getFile(java.lang.String)>(r0);

        if r23 == null goto label4;

        $z2 = virtualinvoke r23.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z2 == 0 goto label4;

        $z3 = virtualinvoke r23.<net.sourceforge.plantuml.security.SFile: boolean canRead()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke r23.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z4 != 0 goto label4;

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>(int)>(8192);

        staticinvoke <net.sourceforge.plantuml.FileUtils: void copyToStream(net.sourceforge.plantuml.security.SFile,java.io.OutputStream)>(r23, $r9);

        r21 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.io.IOException: void printStackTrace()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("load JSON: Cannot read file ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        $r16 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r18);

        throw $r19;

     label6:
        if r21 == null goto label7;

        $i0 = lengthof r21;

        if $i0 != 0 goto label8;

     label7:
        return null;

     label8:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r21, r2);

        return $r1;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.tim.stdlib.LoadJson: java.lang.String VALUE_DEFAULT_DEFAULT> = "{}";

        <net.sourceforge.plantuml.tim.stdlib.LoadJson: java.lang.String VALUE_CHARSET_DEFAULT> = "UTF-8";

        return;
    }
}
