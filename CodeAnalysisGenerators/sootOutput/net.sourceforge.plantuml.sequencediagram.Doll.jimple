public class net.sourceforge.plantuml.sequencediagram.Doll extends java.lang.Object implements net.sourceforge.plantuml.style.WithStyle
{
    private final java.util.List participants;
    private final net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober;
    private final net.sourceforge.plantuml.style.StyleBuilder styleBuilder;
    private final net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments;

    public static net.sourceforge.plantuml.sequencediagram.Doll createPuma(net.sourceforge.plantuml.sequencediagram.ParticipantEnglober, net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.style.StyleBuilder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll $r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.skin.rose.Rose r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r5;
        net.sourceforge.plantuml.style.StyleBuilder r6;
        net.sourceforge.plantuml.sequencediagram.Participant r7;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober;

        r7 := @parameter1: net.sourceforge.plantuml.sequencediagram.Participant;

        r2 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter3: net.sourceforge.plantuml.skin.rose.Rose;

        r4 := @parameter4: net.sourceforge.plantuml.graphic.StringBounder;

        r6 := @parameter5: net.sourceforge.plantuml.style.StyleBuilder;

        $r0 = new net.sourceforge.plantuml.sequencediagram.Doll;

        $r5 = staticinvoke <net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments convertFunctionToBeRemoved(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.graphic.StringBounder)>(r2, r3, r4);

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.Doll: void <init>(net.sourceforge.plantuml.sequencediagram.ParticipantEnglober,net.sourceforge.plantuml.sequencediagram.teoz.TileArguments,net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.sequencediagram.Participant)>(r1, $r5, r6, r7);

        return $r0;
    }

    public static net.sourceforge.plantuml.sequencediagram.Doll createTeoz(net.sourceforge.plantuml.sequencediagram.ParticipantEnglober, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.Doll $r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r1;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r2;
        net.sourceforge.plantuml.ISkinParam $r3;
        net.sourceforge.plantuml.style.StyleBuilder $r4;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        $r0 = new net.sourceforge.plantuml.sequencediagram.Doll;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.Doll: void <init>(net.sourceforge.plantuml.sequencediagram.ParticipantEnglober,net.sourceforge.plantuml.sequencediagram.teoz.TileArguments,net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.sequencediagram.Participant)>(r1, r2, $r4, null);

        return $r0;
    }

    private static net.sourceforge.plantuml.sequencediagram.teoz.TileArguments convertFunctionToBeRemoved(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.rose.Rose r2;
        net.sourceforge.plantuml.ISkinParam r3;

        r3 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r2 := @parameter1: net.sourceforge.plantuml.skin.rose.Rose;

        r1 := @parameter2: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: void <init>(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.real.Real)>(r1, null, r2, r3, null);

        return $r0;
    }

    private void <init>(net.sourceforge.plantuml.sequencediagram.ParticipantEnglober, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments, net.sourceforge.plantuml.style.StyleBuilder, net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r2, $r4;
        java.lang.Object $r3, $r7;
        net.sourceforge.plantuml.style.StyleBuilder r5;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r6, $r8;
        net.sourceforge.plantuml.sequencediagram.Participant r9;
        java.util.List $r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober;

        r6 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        r5 := @parameter2: net.sourceforge.plantuml.style.StyleBuilder;

        r9 := @parameter3: net.sourceforge.plantuml.sequencediagram.Participant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants> = $r1;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = (net.sourceforge.plantuml.sequencediagram.ParticipantEnglober) $r3;

        r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober> = $r4;

        r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.style.StyleBuilder styleBuilder> = r5;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $r8 = (net.sourceforge.plantuml.sequencediagram.teoz.TileArguments) $r7;

        r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments> = $r8;

        if r9 == null goto label1;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r9);

     label1:
        return;
    }

    public final net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.skin.ComponentType $r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.sequencediagram.Doll r2;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r0 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENGLOBER>;

        $r1 = virtualinvoke $r0.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        return $r1;
    }

    public final net.sourceforge.plantuml.style.Style[] getUsedStyles()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.style.StyleSignature $r1, $r4;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r2, $r6;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r3;
        net.sourceforge.plantuml.style.StyleBuilder $r5;
        net.sourceforge.plantuml.ugraphic.color.HColor r7;
        net.sourceforge.plantuml.style.Style[] $r8;
        net.sourceforge.plantuml.style.PName $r9;
        net.sourceforge.plantuml.style.Style r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        r10 = virtualinvoke $r4.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r5);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober>;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.ugraphic.color.HColor getBoxColor()>();

        if r10 == null goto label1;

        $r9 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        r10 = virtualinvoke r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r9, r7);

     label1:
        $r8 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r8[0] = r10;

        return $r8;
    }

    public final net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober>;

        return $r1;
    }

    private net.sourceforge.plantuml.skin.Component getComponent()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2, $r5;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r3, $r7, $r13;
        net.sourceforge.plantuml.ISkinParam $r4, $r14;
        net.sourceforge.plantuml.skin.rose.Rose $r8;
        net.sourceforge.plantuml.style.Style[] $r9;
        net.sourceforge.plantuml.skin.ComponentType $r10;
        net.sourceforge.plantuml.cucadiagram.Display $r11;
        net.sourceforge.plantuml.skin.Component $r12;
        net.sourceforge.plantuml.SkinParamBackcolored $r15;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.ugraphic.color.HColor getBoxColor()>();

        if $r2 != null goto label1;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        goto label2;

     label1:
        $r15 = new net.sourceforge.plantuml.SkinParamBackcolored;

        $r14 = $r15;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.ugraphic.color.HColor getBoxColor()>();

        specialinvoke $r15.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor)>($r4, $r5);

     label2:
        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r10 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENGLOBER>;

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        $r12 = virtualinvoke $r8.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r9, $r10, null, $r14, $r11);

        return $r12;
    }

    public double getTitlePreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r1, $r4, $r10;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.skin.ComponentType $r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.skin.Component r9;
        net.sourceforge.plantuml.graphic.StringBounder $r11;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r5 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENGLOBER>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        r9 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r5, null, $r6, $r8);

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = interfaceinvoke r9.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>($r11);

        return $d0;
    }

    public final net.sourceforge.plantuml.sequencediagram.Participant getFirst2TOBEPRIVATE()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.sequencediagram.Participant $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (net.sourceforge.plantuml.sequencediagram.Participant) $r2;

        return $r3;
    }

    public final net.sourceforge.plantuml.sequencediagram.Participant getLast2TOBEPRIVATE()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Participant $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.Participant) $r3;

        return $r4;
    }

    private net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getFirstLivingSpace()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r3;
    }

    private net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getFirstLivingSpace()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r3;
    }

    private net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLastLivingSpace()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r3;
    }

    private net.sourceforge.plantuml.real.Real getPosE(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLastLivingSpace()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosE(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r3;
    }

    private net.sourceforge.plantuml.real.Real getPosAA(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r1, $r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r3, r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.real.Real $r6, $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getFirstLivingSpace()>();

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace previous(net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace)>($r3);

        if r4 != null goto label1;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.real.Real getOrigin()>();

        return $r8;

     label1:
        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        return $r6;
    }

    private net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getFirstLivingSpace()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getFirst2TOBEPRIVATE()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLivingSpace(net.sourceforge.plantuml.sequencediagram.Participant)>($r2);

        return $r3;
    }

    private net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLastLivingSpace()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getLast2TOBEPRIVATE()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLivingSpace(net.sourceforge.plantuml.sequencediagram.Participant)>($r2);

        return $r3;
    }

    public boolean contains(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1, $r4;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.Participant) $r3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r6, $r7, $r9;
        net.sourceforge.plantuml.sequencediagram.Doll r2;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r3;
        net.sourceforge.plantuml.cucadiagram.Display $r4;
        java.lang.String $r5, $r10;
        java.util.List $r8;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Doll:");

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.String toString()>();

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r2.<net.sourceforge.plantuml.sequencediagram.Doll: java.util.List participants>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private double getTitleWidth()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.skin.Component $r1;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.skin.Component getComponent()>();

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        return $d0;
    }

    public void drawMe(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D, net.sourceforge.plantuml.sequencediagram.Doll)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.Doll r1, r4;
        net.sourceforge.plantuml.real.Real $r2, $r3;
        double $d0, d1, $d2, d3, $d4, d5, d6;
        net.sourceforge.plantuml.Dimension2DDouble $r5;
        net.sourceforge.plantuml.skin.Component $r6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7, $r11;
        net.sourceforge.plantuml.ugraphic.UGraphic $r8, r12;
        net.sourceforge.plantuml.skin.Area $r9;
        net.sourceforge.plantuml.skin.Context2D r10;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d5 := @parameter1: double;

        r10 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r4 := @parameter3: net.sourceforge.plantuml.sequencediagram.Doll;

        r0 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d1 = $d0 - 4.0;

        $r3 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosE(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d2 = interfaceinvoke $r3.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d3 = $d2 + 4.0;

        if r4 == null goto label1;

        d6 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.Doll: double getTitlePreferredHeight()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d6);

        r12 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        d5 = d5 - d6;

     label1:
        $r5 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d4 = d3 - d1;

        specialinvoke $r5.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d4, d5);

        $r6 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.skin.Component getComponent()>();

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d1, 1.0);

        $r8 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        $r9 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5);

        interfaceinvoke $r6.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r8, $r9, r10);

        return;
    }

    public void addInternalConstraints(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        double d0, d1, d2, d3, $d4, $d5, d6, $d7, $d8;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.real.Real $r2, $r3, $r4, $r5, $r6;
        byte $b0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r7, $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: double getTitleWidth()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d2 = interfaceinvoke $r3.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d3 = d2 - d1;

        $d4 = d0 + 10.0;

        $d5 = $d4 - d3;

        d6 = $d5 / 2.0;

        $b0 = d6 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getFirstLivingSpace()>();

        virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void ensureMarginBefore(double)>(d6);

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLastLivingSpace()>();

        virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void ensureMarginAfter(double)>(d6);

     label1:
        $r4 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosAA(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d7 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: double padding()>();

        $d8 = 10.0 + $d7;

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d8);

        interfaceinvoke $r4.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r6);

        return;
    }

    public void addConstraintAfter(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r3, r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.real.Real $r6, $r7, $r8;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLastLivingSpace()>();

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace next(net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace)>($r3);

        if r4 != null goto label1;

        return;

     label1:
        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosE(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: double padding()>();

        $d1 = 2.0 * $d0;

        $d2 = 20.0 + $d1;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d2);

        interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r8);

        return;
    }

    private double padding()
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.PaddingParam $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = <net.sourceforge.plantuml.PaddingParam: net.sourceforge.plantuml.PaddingParam BOX>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: double getPadding(net.sourceforge.plantuml.PaddingParam)>($r3);

        return $d0;
    }

    public net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.real.Real $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getPosE(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(10.0);

        return $r3;
    }
}
