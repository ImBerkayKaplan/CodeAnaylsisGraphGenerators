public class net.sourceforge.plantuml.utils.StartUtils extends java.lang.Object
{
    public static final net.sourceforge.plantuml.command.regex.Pattern2 patternFilename;
    public static final java.lang.String PAUSE_PATTERN;
    public static final java.lang.String START_PATTERN;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 append;

    public void <init>()
    {
        net.sourceforge.plantuml.utils.StartUtils r0;

        r0 := @this: net.sourceforge.plantuml.utils.StartUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String beforeStartUml(java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2, $z3, z4;

        r0 := @parameter0: java.lang.String;

        z4 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label6;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i1);

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("start", r1);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        return $r3;

     label2:
        $i2 = i3 + 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i2);

        if z4 == 0 goto label3;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(">");

        if $z3 == 0 goto label5;

        z4 = 0;

        goto label5;

     label3:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("<");

        if $z1 == 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        $z2 = virtualinvoke r2.<java.lang.String: boolean matches(java.lang.String)>("[\\w~]");

        if $z2 == 0 goto label5;

        return null;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return null;
    }

    public static boolean isArobaseStartDiagram(java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.core.DiagramType $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trinNoTrace(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("@");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("\\");

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType getTypeFromArobaseStart(java.lang.String)>(r1);

        $r3 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UNKNOWN>;

        if $r2 == $r3 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean startsWithSymbolAnd(java.lang.String, net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.StringLocated r0;
        java.lang.String $r1, r4, $r6, $r7, $r11;
        java.lang.StringBuilder $r2, $r3, $r5, $r8, $r9, $r10;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>($r11);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean startsWithSymbolAnd(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r3, $r5, $r9;
        java.lang.StringBuilder $r1, $r2, $r4, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean startOrEnd(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.StringLocated r0;
        java.lang.String $r1, r2;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.core.DiagramType $r3, $r4;

        r0 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trinNoTrace(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("@");

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("\\");

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("end", r2);

        if $z1 != 0 goto label2;

        $r3 = staticinvoke <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType getTypeFromArobaseStart(java.lang.String)>(r2);

        $r4 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UNKNOWN>;

        if $r3 == $r4 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public static boolean isArobaseEndDiagram(java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trinNoTrace(java.lang.CharSequence)>(r0);

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("end", r1);

        return $z0;
    }

    public static boolean isArobasePauseDiagram(java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trinNoTrace(java.lang.CharSequence)>(r0);

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("pause", r1);

        return $z0;
    }

    public static boolean isArobaseUnpauseDiagram(java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trinNoTrace(java.lang.CharSequence)>(r0);

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("unpause", r1);

        return $z0;
    }

    public static boolean isExit(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trinNoTrace(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("!exit");

        return $z0;
    }

    public static net.sourceforge.plantuml.StringLocated getPossibleAppend(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.StringLocated r0, $r6;
        java.lang.String r1, $r4, r5, $r7, $r9;
        net.sourceforge.plantuml.command.regex.Pattern2 $r2;
        net.sourceforge.plantuml.command.regex.Matcher2 r3;
        boolean $z0;
        int $i0, $i1;
        net.sourceforge.plantuml.LineLocation $r8;

        r0 := @parameter0: net.sourceforge.plantuml.StringLocated;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r2 = <net.sourceforge.plantuml.utils.StartUtils: net.sourceforge.plantuml.command.regex.Pattern2 append>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(0);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r6 = new net.sourceforge.plantuml.StringLocated;

        $r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r5);

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: java.lang.String getPreprocessorError()>();

        specialinvoke $r6.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation,java.lang.String)>($r7, $r8, $r9);

        return $r6;

     label1:
        return null;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.command.regex.Pattern2 $r0, $r1;

        <net.sourceforge.plantuml.utils.StartUtils: java.lang.String START_PATTERN> = "((?:[^\\w~]|\\<[^<>]*\\>)*)[@\\\\]start";

        <net.sourceforge.plantuml.utils.StartUtils: java.lang.String PAUSE_PATTERN> = "((?:\\W|\\<[^<>]*\\>)*)[@\\\\]unpause";

        $r0 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^[@\\\\]start[^%s{}%g]+[%s{][%s%g]*([^%g]*?)[%s}%g]*$");

        <net.sourceforge.plantuml.utils.StartUtils: net.sourceforge.plantuml.command.regex.Pattern2 patternFilename> = $r0;

        $r1 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^\\W*[@\\\\](append|a)\\b");

        <net.sourceforge.plantuml.utils.StartUtils: net.sourceforge.plantuml.command.regex.Pattern2 append> = $r1;

        return;
    }
}
