public class net.sourceforge.plantuml.error.PSystemErrorUtils extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.error.PSystemErrorUtils r0;

        r0 := @this: net.sourceforge.plantuml.error.PSystemErrorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.error.PSystemError buildV2(net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.ErrorUml, java.util.List, java.util.List)
    {
        net.sourceforge.plantuml.error.PSystemErrorV2 $r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.util.List r2, r4;
        net.sourceforge.plantuml.ErrorUml r3;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r3 := @parameter1: net.sourceforge.plantuml.ErrorUml;

        r4 := @parameter2: java.util.List;

        r2 := @parameter3: java.util.List;

        $r0 = new net.sourceforge.plantuml.error.PSystemErrorV2;

        specialinvoke $r0.<net.sourceforge.plantuml.error.PSystemErrorV2: void <init>(net.sourceforge.plantuml.core.UmlSource,java.util.List,net.sourceforge.plantuml.ErrorUml)>(r1, r2, r3);

        return $r0;
    }

    public static net.sourceforge.plantuml.error.PSystemError merge(java.util.Collection)
    {
        java.util.Collection r0, $r15;
        int $i0, $i1;
        java.util.ArrayList $r1, $r3;
        java.util.Iterator r5;
        java.lang.IllegalStateException $r6, $r8, $r13;
        net.sourceforge.plantuml.error.PSystemErrorV2 $r7, $r12;
        java.lang.Object $r9;
        net.sourceforge.plantuml.error.PSystemError r10;
        net.sourceforge.plantuml.core.UmlSource $r11, r14;
        boolean $z2, $z3;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>()>();

        throw $r13;

     label1:
        r14 = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r5 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.error.PSystemError) $r9;

        if r10 != null goto label3;

        goto label2;

     label3:
        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.error.PSystemError: net.sourceforge.plantuml.core.UmlSource getSource()>();

        if $r11 == null goto label4;

        if r14 != null goto label4;

        r14 = virtualinvoke r10.<net.sourceforge.plantuml.error.PSystemError: net.sourceforge.plantuml.core.UmlSource getSource()>();

     label4:
        $r15 = virtualinvoke r10.<net.sourceforge.plantuml.error.PSystemError: java.util.Collection getErrorsUml()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        $z3 = r10 instanceof net.sourceforge.plantuml.error.PSystemErrorV2;

        if $z3 == 0 goto label5;

        $r12 = (net.sourceforge.plantuml.error.PSystemErrorV2) r10;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label5:
        goto label2;

     label6:
        if r14 != null goto label7;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label7:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 <= 0 goto label8;

        $r7 = staticinvoke <net.sourceforge.plantuml.error.PSystemErrorUtils: net.sourceforge.plantuml.error.PSystemErrorV2 mergeV2(java.util.List)>($r3);

        return $r7;

     label8:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;
    }

    private static net.sourceforge.plantuml.error.PSystemErrorV2 mergeV2(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        net.sourceforge.plantuml.error.PSystemErrorV2 r3, r4;
        int $i0, $i1;

        r0 := @parameter0: java.util.List;

        r4 = null;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.error.PSystemErrorV2) $r2;

        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<net.sourceforge.plantuml.error.PSystemErrorV2: int score()>();

        $i1 = virtualinvoke r3.<net.sourceforge.plantuml.error.PSystemErrorV2: int score()>();

        if $i0 >= $i1 goto label3;

     label2:
        r4 = r3;

     label3:
        goto label1;

     label4:
        return r4;
    }

    public static boolean isDiagramError(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lnet/sourceforge/plantuml/error/PSystemError;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }
}
