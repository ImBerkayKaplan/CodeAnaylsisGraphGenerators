public class net.sourceforge.plantuml.png.PngIOMetadata extends java.lang.Object
{
    private static final java.lang.String copyleft;

    public void <init>()
    {
        net.sourceforge.plantuml.png.PngIOMetadata r0;

        r0 := @this: net.sourceforge.plantuml.png.PngIOMetadata;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void writeWithMetadata(java.awt.image.RenderedImage, java.io.OutputStream, java.lang.String, int, java.lang.String) throws java.io.IOException
    {
        java.awt.image.RenderedImage r0;
        java.io.OutputStream r1;
        java.lang.String r2, r3;
        int i0;

        r0 := @parameter0: java.awt.image.RenderedImage;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        staticinvoke <net.sourceforge.plantuml.png.PngIOMetadata: void writeInternal(java.awt.image.RenderedImage,java.io.OutputStream,java.lang.String,int,java.lang.String)>(r0, r1, r2, i0, r3);

        return;
    }

    private static void writeInternal(java.awt.image.RenderedImage, java.io.OutputStream, java.lang.String, int, java.lang.String) throws java.io.IOException
    {
        java.util.Iterator $r0;
        java.lang.Object $r1;
        javax.imageio.ImageWriter r2, r19;
        javax.imageio.ImageWriteParam r3;
        javax.imageio.ImageTypeSpecifier r4;
        javax.imageio.metadata.IIOMetadata r5;
        int i0;
        java.lang.String r6, r7, $r11, $r18, $r23;
        java.lang.StringBuilder $r8, $r9, $r10, $r15, $r16, $r17, $r20, $r21, $r22;
        javax.imageio.IIOImage $r12;
        java.awt.image.RenderedImage r13;
        java.io.OutputStream r26;
        javax.imageio.stream.ImageOutputStream r27;
        double $d0;
        java.lang.Throwable $r28, $r30;

        r13 := @parameter0: java.awt.image.RenderedImage;

        r26 := @parameter1: java.io.OutputStream;

        r7 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r6 := @parameter4: java.lang.String;

        $r0 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByFormatName(java.lang.String)>("png");

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (javax.imageio.ImageWriter) $r1;

        r3 = virtualinvoke r2.<javax.imageio.ImageWriter: javax.imageio.ImageWriteParam getDefaultWriteParam()>();

        r4 = staticinvoke <javax.imageio.ImageTypeSpecifier: javax.imageio.ImageTypeSpecifier createFromBufferedImageType(int)>(1);

        r5 = virtualinvoke r2.<javax.imageio.ImageWriter: javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)>(r4, r3);

        if i0 == 96 goto label01;

        $d0 = (double) i0;

        staticinvoke <net.sourceforge.plantuml.png.PngIOMetadata: void addDpi(javax.imageio.metadata.IIOMetadata,double)>(r5, $d0);

     label01:
        if r6 == null goto label02;

        staticinvoke <net.sourceforge.plantuml.png.PngIOMetadata: void addText(javax.imageio.metadata.IIOMetadata,java.lang.String,java.lang.String)>(r5, "debug", r6);

     label02:
        staticinvoke <net.sourceforge.plantuml.png.PngIOMetadata: void addText(javax.imageio.metadata.IIOMetadata,java.lang.String,java.lang.String)>(r5, "copyleft", "Generated by http://plantuml.com");

        staticinvoke <net.sourceforge.plantuml.png.PngIOMetadata: void addiText(javax.imageio.metadata.IIOMetadata,java.lang.String,java.lang.String)>(r5, "plantuml", r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PngIOMetadata pngMetadata=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void debug(java.lang.String)>($r11);

        $r12 = new javax.imageio.IIOImage;

        specialinvoke $r12.<javax.imageio.IIOImage: void <init>(java.awt.image.RenderedImage,java.util.List,javax.imageio.metadata.IIOMetadata)>(r13, null, r5);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PngIOMetadata iioImage=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void debug(java.lang.String)>($r18);

        r19 = staticinvoke <net.sourceforge.plantuml.png.PngIOMetadata: javax.imageio.ImageWriter getImageWriter()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PngIOMetadata imagewriter=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void debug(java.lang.String)>($r23);

        entermonitor r19;

     label03:
        r27 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: javax.imageio.stream.ImageOutputStream createImageOutputStream(java.io.OutputStream)>(r26);

        virtualinvoke r19.<javax.imageio.ImageWriter: void setOutput(java.lang.Object)>(r27);

     label04:
        virtualinvoke r19.<javax.imageio.ImageWriter: void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)>(null, $r12, null);

     label05:
        interfaceinvoke r27.<javax.imageio.stream.ImageOutputStream: void flush()>();

        interfaceinvoke r27.<javax.imageio.stream.ImageOutputStream: void close()>();

        virtualinvoke r19.<javax.imageio.ImageWriter: void reset()>();

        virtualinvoke r19.<javax.imageio.ImageWriter: void dispose()>();

        goto label08;

     label06:
        $r30 := @caughtexception;

     label07:
        interfaceinvoke r27.<javax.imageio.stream.ImageOutputStream: void flush()>();

        interfaceinvoke r27.<javax.imageio.stream.ImageOutputStream: void close()>();

        virtualinvoke r19.<javax.imageio.ImageWriter: void reset()>();

        virtualinvoke r19.<javax.imageio.ImageWriter: void dispose()>();

        throw $r30;

     label08:
        exitmonitor r19;

     label09:
        goto label12;

     label10:
        $r28 := @caughtexception;

        exitmonitor r19;

     label11:
        throw $r28;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private static void addDpi(javax.imageio.metadata.IIOMetadata, double) throws javax.imageio.metadata.IIOInvalidTreeException
    {
        javax.imageio.metadata.IIOMetadataNode $r0, $r2, $r6, $r10;
        double d0, $d1, d2;
        java.lang.String $r4, $r8;
        javax.imageio.metadata.IIOMetadata r13;

        r13 := @parameter0: javax.imageio.metadata.IIOMetadata;

        d0 := @parameter1: double;

        $r0 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r0.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("Dimension");

        $r2 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("HorizontalPixelSize");

        $d1 = d0 / 0.0254;

        d2 = $d1 / 1000.0;

        $r4 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d2);

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("value", $r4);

        virtualinvoke $r0.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        $r6 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r6.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("VerticalPixelSize");

        $r8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d2);

        virtualinvoke $r6.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("value", $r8);

        virtualinvoke $r0.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        $r10 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r10.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("javax_imageio_1.0");

        virtualinvoke $r10.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r0);

        virtualinvoke r13.<javax.imageio.metadata.IIOMetadata: void mergeTree(java.lang.String,org.w3c.dom.Node)>("javax_imageio_1.0", $r10);

        return;
    }

    private static void addiText(javax.imageio.metadata.IIOMetadata, java.lang.String, java.lang.String) throws javax.imageio.metadata.IIOInvalidTreeException
    {
        javax.imageio.metadata.IIOMetadataNode $r0, $r2, $r7;
        java.lang.String r4, r5;
        javax.imageio.metadata.IIOMetadata r10;

        r10 := @parameter0: javax.imageio.metadata.IIOMetadata;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r0 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r0.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("iTXt");

        $r2 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("iTXtEntry");

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("keyword", r4);

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("compressionFlag", "true");

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("compressionMethod", "0");

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("languageTag", "");

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("translatedKeyword", "");

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("text", r5);

        virtualinvoke $r0.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        $r7 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r7.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("javax_imageio_png_1.0");

        virtualinvoke $r7.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r0);

        virtualinvoke r10.<javax.imageio.metadata.IIOMetadata: void mergeTree(java.lang.String,org.w3c.dom.Node)>("javax_imageio_png_1.0", $r7);

        return;
    }

    private static void addText(javax.imageio.metadata.IIOMetadata, java.lang.String, java.lang.String) throws javax.imageio.metadata.IIOInvalidTreeException
    {
        javax.imageio.metadata.IIOMetadataNode $r0, $r2, $r7;
        java.lang.String r4, r5;
        javax.imageio.metadata.IIOMetadata r10;

        r10 := @parameter0: javax.imageio.metadata.IIOMetadata;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r0 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r0.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("tEXt");

        $r2 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("tEXtEntry");

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("keyword", r4);

        virtualinvoke $r2.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("value", r5);

        virtualinvoke $r0.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        $r7 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r7.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("javax_imageio_png_1.0");

        virtualinvoke $r7.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r0);

        virtualinvoke r10.<javax.imageio.metadata.IIOMetadata: void mergeTree(java.lang.String,org.w3c.dom.Node)>("javax_imageio_png_1.0", $r7);

        return;
    }

    private static javax.imageio.ImageWriter getImageWriter()
    {
        java.util.Iterator r0, r1, $r2;
        boolean $z0, $z1;
        java.lang.Object $r3, $r5, $r9;
        javax.imageio.ImageWriter $r4, r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r11, $r13;
        java.lang.Class $r12;

        r0 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.util.Iterator getImageWritersBySuffix(java.lang.String)>("png");

        r1 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.util.Iterator getImageWritersBySuffix(java.lang.String)>("png");

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.imageio.ImageWriter) $r5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PngIOMetadata countImageWriter = ");

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void debug(java.lang.String)>($r11);

        $r12 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("com.sun.imageio.plugins.png.PNGImageWriter");

        if $z1 == 0 goto label2;

        staticinvoke <net.sourceforge.plantuml.Log: void debug(java.lang.String)>("PngIOMetadata Found sun PNGImageWriter");

        return r6;

     label2:
        goto label1;

     label3:
        staticinvoke <net.sourceforge.plantuml.Log: void debug(java.lang.String)>("Using first one");

        $r2 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.util.Iterator getImageWritersBySuffix(java.lang.String)>("png");

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (javax.imageio.ImageWriter) $r3;

        return $r4;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.png.PngIOMetadata: java.lang.String copyleft> = "Generated by http://plantuml.com";

        return;
    }
}
