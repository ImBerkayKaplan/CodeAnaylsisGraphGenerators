public class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut extends net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate
{
    private final double dx;
    private final double dy;

    public void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1;
        double d0, d1;
        byte $b0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r1);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut: double dx> = d0;

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut: double dy> = d1;

        return;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r2, $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getHeight()>();

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getInY()>();

        $d4 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getOutY()>();

        $d5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut: double dy>;

        $d6 = $d4 + $d5;

        specialinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d0, $d1, $d2, $d3, $d6);

        return $r3;
    }

    public volatile net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }
}
