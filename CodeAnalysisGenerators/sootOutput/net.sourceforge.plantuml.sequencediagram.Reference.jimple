public class net.sourceforge.plantuml.sequencediagram.Reference extends net.sourceforge.plantuml.sequencediagram.AbstractEvent implements net.sourceforge.plantuml.sequencediagram.Event
{
    private final java.util.List participants;
    private final net.sourceforge.plantuml.Url url;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColorElement;
    private final net.sourceforge.plantuml.cucadiagram.Display strings;
    private final net.sourceforge.plantuml.style.Style style;
    private final net.sourceforge.plantuml.style.Style styleHeader;

    public net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.sequencediagram.Reference r6;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName sequenceDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName reference>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    private net.sourceforge.plantuml.style.StyleSignature getHeaderStyleDefinition()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.sequencediagram.Reference r6;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName sequenceDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName referenceHeader>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    public net.sourceforge.plantuml.style.Style[] getUsedStyles()
    {
        net.sourceforge.plantuml.style.Style[] $r0;
        net.sourceforge.plantuml.sequencediagram.Reference r1;
        net.sourceforge.plantuml.style.Style $r2, $r3, $r6, $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;
        net.sourceforge.plantuml.style.PName $r5;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r0 = newarray (net.sourceforge.plantuml.style.Style)[2];

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style style>;

        $r0[0] = $r2;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style styleHeader>;

        if $r3 != null goto label1;

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style styleHeader>;

        goto label2;

     label1:
        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style styleHeader>;

        $r5 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.ugraphic.color.HColor backColorElement>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r5, $r4);

     label2:
        $r0[1] = $r7;

        return $r0;
    }

    public void <init>(java.util.List, net.sourceforge.plantuml.Url, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.style.StyleBuilder)
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        java.util.List r1;
        net.sourceforge.plantuml.Url r2;
        net.sourceforge.plantuml.cucadiagram.Display r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r4, r5;
        net.sourceforge.plantuml.style.StyleSignature $r6, $r9;
        net.sourceforge.plantuml.style.StyleBuilder r7;
        net.sourceforge.plantuml.style.Style $r8, $r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: net.sourceforge.plantuml.Url;

        r3 := @parameter2: net.sourceforge.plantuml.cucadiagram.Display;

        r4 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        r5 := @parameter4: net.sourceforge.plantuml.ugraphic.color.HColor;

        r7 := @parameter5: net.sourceforge.plantuml.style.StyleBuilder;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractEvent: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List participants> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.Url url> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.cucadiagram.Display strings> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.ugraphic.color.HColor backColorElement> = r5;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()>();

        $r8 = virtualinvoke $r6.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>(r7);

        r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style style> = $r8;

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.StyleSignature getHeaderStyleDefinition()>();

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>(r7);

        r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style styleHeader> = $r10;

        return;
    }

    public java.util.List getParticipant()
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List participants>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.cucadiagram.Display getStrings()
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.cucadiagram.Display strings>;

        return $r1;
    }

    public boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List participants>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public final net.sourceforge.plantuml.Url getUrl()
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        net.sourceforge.plantuml.Url $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.Url url>;

        return $r1;
    }

    public boolean hasUrl()
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        net.sourceforge.plantuml.Url $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.sequencediagram.Reference r2;
        java.util.List $r3;
        java.util.Iterator r4;
        java.lang.String $r5, $r8;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.Participant $r7;
        boolean $z0, $z1;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List participants>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (net.sourceforge.plantuml.sequencediagram.Participant) $r6;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.Participant: java.lang.String getCode()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public final net.sourceforge.plantuml.ugraphic.color.HColor getBackColorGeneral()
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral>;

        return $r1;
    }

    public final net.sourceforge.plantuml.ugraphic.color.HColor getBackColorElement()
    {
        net.sourceforge.plantuml.sequencediagram.Reference r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Reference;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.ugraphic.color.HColor backColorElement>;

        return $r1;
    }
}
