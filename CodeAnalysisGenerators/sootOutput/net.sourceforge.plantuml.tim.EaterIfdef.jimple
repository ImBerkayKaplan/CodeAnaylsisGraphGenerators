public class net.sourceforge.plantuml.tim.EaterIfdef extends net.sourceforge.plantuml.tim.Eater
{
    private java.lang.String expression;

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterIfdef r0;
        net.sourceforge.plantuml.StringLocated r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterIfdef;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterIfdef r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;

        r0 := @this: net.sourceforge.plantuml.tim.EaterIfdef;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfdef: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfdef: void checkAndEatChar(java.lang.String)>("!ifdef");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfdef: void skipSpaces()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfdef: java.lang.String eatAllToEnd()>();

        r0.<net.sourceforge.plantuml.tim.EaterIfdef: java.lang.String expression> = $r1;

        return;
    }

    public boolean isTrue(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory)
    {
        net.sourceforge.plantuml.preproc.EvalBoolean $r0;
        net.sourceforge.plantuml.tim.EaterIfdef r1;
        net.sourceforge.plantuml.tim.EaterIfdef$1 $r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        net.sourceforge.plantuml.tim.TContext r4;
        java.lang.String $r5;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.tim.EaterIfdef;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        $r0 = new net.sourceforge.plantuml.preproc.EvalBoolean;

        $r5 = r1.<net.sourceforge.plantuml.tim.EaterIfdef: java.lang.String expression>;

        $r2 = new net.sourceforge.plantuml.tim.EaterIfdef$1;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.EaterIfdef$1: void <init>(net.sourceforge.plantuml.tim.EaterIfdef,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.tim.TContext)>(r1, r3, r4);

        specialinvoke $r0.<net.sourceforge.plantuml.preproc.EvalBoolean: void <init>(java.lang.String,net.sourceforge.plantuml.preproc.Truth)>($r5, $r2);

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.preproc.EvalBoolean: boolean eval()>();

        return $z0;
    }
}
