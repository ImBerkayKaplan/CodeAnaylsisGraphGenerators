public final enum class net.sourceforge.plantuml.core.DiagramType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.core.DiagramType UML;
    public static final enum net.sourceforge.plantuml.core.DiagramType BPM;
    public static final enum net.sourceforge.plantuml.core.DiagramType DITAA;
    public static final enum net.sourceforge.plantuml.core.DiagramType DOT;
    public static final enum net.sourceforge.plantuml.core.DiagramType PROJECT;
    public static final enum net.sourceforge.plantuml.core.DiagramType JCCKIT;
    public static final enum net.sourceforge.plantuml.core.DiagramType SALT;
    public static final enum net.sourceforge.plantuml.core.DiagramType FLOW;
    public static final enum net.sourceforge.plantuml.core.DiagramType CREOLE;
    public static final enum net.sourceforge.plantuml.core.DiagramType JUNGLE;
    public static final enum net.sourceforge.plantuml.core.DiagramType CUTE;
    public static final enum net.sourceforge.plantuml.core.DiagramType MATH;
    public static final enum net.sourceforge.plantuml.core.DiagramType LATEX;
    public static final enum net.sourceforge.plantuml.core.DiagramType DEFINITION;
    public static final enum net.sourceforge.plantuml.core.DiagramType GANTT;
    public static final enum net.sourceforge.plantuml.core.DiagramType NW;
    public static final enum net.sourceforge.plantuml.core.DiagramType MINDMAP;
    public static final enum net.sourceforge.plantuml.core.DiagramType WBS;
    public static final enum net.sourceforge.plantuml.core.DiagramType WIRE;
    public static final enum net.sourceforge.plantuml.core.DiagramType JSON;
    public static final enum net.sourceforge.plantuml.core.DiagramType GIT;
    public static final enum net.sourceforge.plantuml.core.DiagramType BOARD;
    public static final enum net.sourceforge.plantuml.core.DiagramType YAML;
    public static final enum net.sourceforge.plantuml.core.DiagramType HCL;
    public static final enum net.sourceforge.plantuml.core.DiagramType UNKNOWN;
    private static final net.sourceforge.plantuml.core.DiagramType[] $VALUES;

    public static net.sourceforge.plantuml.core.DiagramType[] values()
    {
        net.sourceforge.plantuml.core.DiagramType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.core.DiagramType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.core.DiagramType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.core.DiagramType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/core/DiagramType;", r0);

        $r2 = (net.sourceforge.plantuml.core.DiagramType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.core.DiagramType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.core.DiagramType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.core.DiagramType getTypeFromArobaseStart(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        net.sourceforge.plantuml.core.DiagramType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.String r25, r26;

        r25 := @parameter0: java.lang.String;

        r26 = virtualinvoke r25.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startwire", r26);

        if $z0 == 0 goto label01;

        $r24 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType WIRE>;

        return $r24;

     label01:
        $z1 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startbpm", r26);

        if $z1 == 0 goto label02;

        $r23 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType BPM>;

        return $r23;

     label02:
        $z2 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startuml", r26);

        if $z2 == 0 goto label03;

        $r22 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UML>;

        return $r22;

     label03:
        $z3 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startdot", r26);

        if $z3 == 0 goto label04;

        $r21 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DOT>;

        return $r21;

     label04:
        $z4 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startjcckit", r26);

        if $z4 == 0 goto label05;

        $r20 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JCCKIT>;

        return $r20;

     label05:
        $z5 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startditaa", r26);

        if $z5 == 0 goto label06;

        $r19 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DITAA>;

        return $r19;

     label06:
        $z6 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startproject", r26);

        if $z6 == 0 goto label07;

        $r18 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType PROJECT>;

        return $r18;

     label07:
        $z7 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startsalt", r26);

        if $z7 == 0 goto label08;

        $r17 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType SALT>;

        return $r17;

     label08:
        $z8 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startflow", r26);

        if $z8 == 0 goto label09;

        $r16 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType FLOW>;

        return $r16;

     label09:
        $z9 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startcreole", r26);

        if $z9 == 0 goto label10;

        $r15 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType CREOLE>;

        return $r15;

     label10:
        $z10 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("starttree", r26);

        if $z10 == 0 goto label11;

        $r14 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JUNGLE>;

        return $r14;

     label11:
        $z11 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startcute", r26);

        if $z11 == 0 goto label12;

        $r13 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType CUTE>;

        return $r13;

     label12:
        $z12 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startmath", r26);

        if $z12 == 0 goto label13;

        $r12 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType MATH>;

        return $r12;

     label13:
        $z13 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startlatex", r26);

        if $z13 == 0 goto label14;

        $r11 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType LATEX>;

        return $r11;

     label14:
        $z14 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startdef", r26);

        if $z14 == 0 goto label15;

        $r10 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DEFINITION>;

        return $r10;

     label15:
        $z15 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startgantt", r26);

        if $z15 == 0 goto label16;

        $r9 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType GANTT>;

        return $r9;

     label16:
        $z16 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startnwdiag", r26);

        if $z16 == 0 goto label17;

        $r8 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType NW>;

        return $r8;

     label17:
        $z17 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startmindmap", r26);

        if $z17 == 0 goto label18;

        $r7 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType MINDMAP>;

        return $r7;

     label18:
        $z18 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startwbs", r26);

        if $z18 == 0 goto label19;

        $r6 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType WBS>;

        return $r6;

     label19:
        $z19 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startjson", r26);

        if $z19 == 0 goto label20;

        $r5 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JSON>;

        return $r5;

     label20:
        $z20 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startgit", r26);

        if $z20 == 0 goto label21;

        $r4 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType GIT>;

        return $r4;

     label21:
        $z21 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startboard", r26);

        if $z21 == 0 goto label22;

        $r3 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType BOARD>;

        return $r3;

     label22:
        $z22 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("startyaml", r26);

        if $z22 == 0 goto label23;

        $r2 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType YAML>;

        return $r2;

     label23:
        $z23 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("starthcl", r26);

        if $z23 == 0 goto label24;

        $r1 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType HCL>;

        return $r1;

     label24:
        $r0 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UNKNOWN>;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.core.DiagramType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50;
        net.sourceforge.plantuml.core.DiagramType[] $r25;

        $r0 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("UML", 0);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UML> = $r0;

        $r1 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r1.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("BPM", 1);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType BPM> = $r1;

        $r2 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r2.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("DITAA", 2);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DITAA> = $r2;

        $r3 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r3.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("DOT", 3);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DOT> = $r3;

        $r4 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r4.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("PROJECT", 4);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType PROJECT> = $r4;

        $r5 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r5.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("JCCKIT", 5);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JCCKIT> = $r5;

        $r6 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r6.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("SALT", 6);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType SALT> = $r6;

        $r7 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r7.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("FLOW", 7);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType FLOW> = $r7;

        $r8 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r8.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("CREOLE", 8);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType CREOLE> = $r8;

        $r9 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r9.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("JUNGLE", 9);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JUNGLE> = $r9;

        $r10 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r10.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("CUTE", 10);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType CUTE> = $r10;

        $r11 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r11.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("MATH", 11);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType MATH> = $r11;

        $r12 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r12.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("LATEX", 12);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType LATEX> = $r12;

        $r13 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r13.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("DEFINITION", 13);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DEFINITION> = $r13;

        $r14 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r14.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("GANTT", 14);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType GANTT> = $r14;

        $r15 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r15.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("NW", 15);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType NW> = $r15;

        $r16 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r16.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("MINDMAP", 16);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType MINDMAP> = $r16;

        $r17 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r17.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("WBS", 17);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType WBS> = $r17;

        $r18 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r18.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("WIRE", 18);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType WIRE> = $r18;

        $r19 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r19.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("JSON", 19);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JSON> = $r19;

        $r20 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r20.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("GIT", 20);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType GIT> = $r20;

        $r21 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r21.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("BOARD", 21);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType BOARD> = $r21;

        $r22 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r22.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("YAML", 22);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType YAML> = $r22;

        $r23 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r23.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("HCL", 23);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType HCL> = $r23;

        $r24 = new net.sourceforge.plantuml.core.DiagramType;

        specialinvoke $r24.<net.sourceforge.plantuml.core.DiagramType: void <init>(java.lang.String,int)>("UNKNOWN", 24);

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UNKNOWN> = $r24;

        $r25 = newarray (net.sourceforge.plantuml.core.DiagramType)[25];

        $r26 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UML>;

        $r25[0] = $r26;

        $r27 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType BPM>;

        $r25[1] = $r27;

        $r28 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DITAA>;

        $r25[2] = $r28;

        $r29 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DOT>;

        $r25[3] = $r29;

        $r30 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType PROJECT>;

        $r25[4] = $r30;

        $r31 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JCCKIT>;

        $r25[5] = $r31;

        $r32 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType SALT>;

        $r25[6] = $r32;

        $r33 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType FLOW>;

        $r25[7] = $r33;

        $r34 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType CREOLE>;

        $r25[8] = $r34;

        $r35 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JUNGLE>;

        $r25[9] = $r35;

        $r36 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType CUTE>;

        $r25[10] = $r36;

        $r37 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType MATH>;

        $r25[11] = $r37;

        $r38 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType LATEX>;

        $r25[12] = $r38;

        $r39 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType DEFINITION>;

        $r25[13] = $r39;

        $r40 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType GANTT>;

        $r25[14] = $r40;

        $r41 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType NW>;

        $r25[15] = $r41;

        $r42 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType MINDMAP>;

        $r25[16] = $r42;

        $r43 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType WBS>;

        $r25[17] = $r43;

        $r44 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType WIRE>;

        $r25[18] = $r44;

        $r45 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType JSON>;

        $r25[19] = $r45;

        $r46 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType GIT>;

        $r25[20] = $r46;

        $r47 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType BOARD>;

        $r25[21] = $r47;

        $r48 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType YAML>;

        $r25[22] = $r48;

        $r49 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType HCL>;

        $r25[23] = $r49;

        $r50 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UNKNOWN>;

        $r25[24] = $r50;

        <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType[] $VALUES> = $r25;

        return;
    }
}
