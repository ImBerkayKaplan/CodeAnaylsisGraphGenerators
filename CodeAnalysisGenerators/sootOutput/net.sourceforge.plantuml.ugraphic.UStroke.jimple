public class net.sourceforge.plantuml.ugraphic.UStroke extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UChange
{
    private final double dashVisible;
    private final double dashSpace;
    private final double thickness;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7;
        net.sourceforge.plantuml.ugraphic.UStroke r2;
        double $d0, $d1, $d2;
        java.lang.String $r8;

        r2 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.UStroke: double dashSpace>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $d2 = r2.<net.sourceforge.plantuml.ugraphic.UStroke: double thickness>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void <init>(double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        double d0, d1, d2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashSpace> = d1;

        r0.<net.sourceforge.plantuml.ugraphic.UStroke: double thickness> = d2;

        return;
    }

    public void <init>(double)
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double,double,double)>(0.0, 0.0, d0);

        return;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.0);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.UStroke onlyThickness()
    {
        net.sourceforge.plantuml.ugraphic.UStroke $r0, r1;
        double $d0;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        $r0 = new net.sourceforge.plantuml.ugraphic.UStroke;

        $d0 = r1.<net.sourceforge.plantuml.ugraphic.UStroke: double thickness>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>($d0);

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke applyThickness(net.sourceforge.plantuml.ugraphic.UStroke)
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0, $r1, r2;
        double $d0, $d1, $d2;

        r2 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UStroke;

        if r0 != null goto label1;

        return r2;

     label1:
        $r1 = new net.sourceforge.plantuml.ugraphic.UStroke;

        $d2 = r2.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible>;

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.UStroke: double dashSpace>;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double thickness>;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double,double,double)>($d2, $d1, $d0);

        return $r1;
    }

    public double getDashVisible()
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible>;

        return $d0;
    }

    public double getDashSpace()
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashSpace>;

        return $d0;
    }

    public double getThickness()
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double thickness>;

        return $d0;
    }

    public java.lang.String getDasharraySvg()
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        double $d0, $d1, $d2;
        byte $b0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d2 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashSpace>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String getDashTikz()
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        double $d0, $d1, $d2;
        byte $b0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UStroke;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("on ");

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashVisible>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt off ");

        $d2 = r0.<net.sourceforge.plantuml.ugraphic.UStroke: double dashSpace>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
