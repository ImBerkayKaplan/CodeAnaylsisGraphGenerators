public class net.sourceforge.plantuml.salt.element.ElementPyramidScrolled extends net.sourceforge.plantuml.salt.element.ElementPyramid
{
    private final double v1;
    private final double v2;
    private final net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy;

    public void <init>(net.sourceforge.plantuml.salt.Positionner2, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.salt.factory.ScrollStrategy)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r0;
        net.sourceforge.plantuml.salt.Positionner2 r1;
        net.sourceforge.plantuml.ISkinSimple r2;
        net.sourceforge.plantuml.salt.element.TableStrategy $r3;
        net.sourceforge.plantuml.salt.factory.ScrollStrategy r4;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        r1 := @parameter0: net.sourceforge.plantuml.salt.Positionner2;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinSimple;

        r4 := @parameter2: net.sourceforge.plantuml.salt.factory.ScrollStrategy;

        $r3 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE>;

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: void <init>(net.sourceforge.plantuml.salt.Positionner2,net.sourceforge.plantuml.salt.element.TableStrategy,java.lang.String,net.sourceforge.plantuml.ISkinSimple)>(r1, $r3, null, r2);

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: double v2> = 12.0;

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: double v1> = 15.0;

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: double v1> = 15.0;

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: double v2> = 12.0;

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy> = r4;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder, double, double)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2, $r7, $r8, $r9;
        net.sourceforge.plantuml.salt.factory.ScrollStrategy $r3, $r4, $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder,double,double)>(r1, d0, d1);

        $r4 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy>;

        $r3 = <net.sourceforge.plantuml.salt.factory.ScrollStrategy: net.sourceforge.plantuml.salt.factory.ScrollStrategy HORIZONTAL_ONLY>;

        if $r4 != $r3 goto label1;

        $r9 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r2, 0.0, 30.0);

        return $r9;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy>;

        $r5 = <net.sourceforge.plantuml.salt.factory.ScrollStrategy: net.sourceforge.plantuml.salt.factory.ScrollStrategy VERTICAL_ONLY>;

        if $r6 != $r5 goto label2;

        $r8 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r2, 30.0, 0.0);

        return $r8;

     label2:
        $r7 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double)>(r2, 30.0);

        return $r7;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, int, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r0;
        int i0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1, r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        net.sourceforge.plantuml.salt.factory.ScrollStrategy $r5, $r6, $r11, $r12, $r13, $r14, $r17, $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7, $r9;
        net.sourceforge.plantuml.ugraphic.UGraphic $r8, $r10, r15, r16;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        r15 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        i0 := @parameter1: int;

        r1 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,int,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r15, i0, r1);

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        r16 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r3 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder,double,double)>($r3, 0.0, 0.0);

        $r6 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy>;

        $r5 = <net.sourceforge.plantuml.salt.factory.ScrollStrategy: net.sourceforge.plantuml.salt.factory.ScrollStrategy BOTH>;

        if $r6 == $r5 goto label1;

        $r14 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy>;

        $r13 = <net.sourceforge.plantuml.salt.factory.ScrollStrategy: net.sourceforge.plantuml.salt.factory.ScrollStrategy VERTICAL_ONLY>;

        if $r14 != $r13 goto label2;

     label1:
        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 + 4.0;

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d1);

        $r8 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: void drawV(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r8, 15.0, $d2);

     label2:
        $r17 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy>;

        $r18 = <net.sourceforge.plantuml.salt.factory.ScrollStrategy: net.sourceforge.plantuml.salt.factory.ScrollStrategy BOTH>;

        if $r17 == $r18 goto label3;

        $r12 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.salt.factory.ScrollStrategy scrollStrategy>;

        $r11 = <net.sourceforge.plantuml.salt.factory.ScrollStrategy: net.sourceforge.plantuml.salt.factory.ScrollStrategy HORIZONTAL_ONLY>;

        if $r12 != $r11 goto label4;

     label3:
        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d4 = $d3 + 4.0;

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d4);

        $r10 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $d5 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: void drawH(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r10, $d5, 15.0);

     label4:
        return;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getTr0()
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r2;

        r2 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(3.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(6.0, 5.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 5.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(3.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getTr180()
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r2;

        r2 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(3.0, 5.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(6.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(3.0, 5.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getTr90()
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r2;

        r2 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 3.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(5.0, 6.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(5.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 3.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getTr270()
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r2;

        r2 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(5.0, 3.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 6.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(5.0, 3.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private void drawV(net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r3, $r6, $r9, $r13, $r16, $r19;
        net.sourceforge.plantuml.ugraphic.URectangle $r1;
        double d0, d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2, $r5, $r8, $r15;
        net.sourceforge.plantuml.ugraphic.ULine $r4, $r7;
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r10;
        net.sourceforge.plantuml.ugraphic.color.HColor $r11, $r17;
        net.sourceforge.plantuml.ugraphic.UBackground $r12, $r18;
        net.sourceforge.plantuml.ugraphic.UPath $r14, $r20;

        r10 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r1 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(12.0);

        $r3 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(d0);

        interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        $d2 = d1 - 12.0;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        $r6 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(d0);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r7);

        $r8 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(4.0, 4.0);

        $r9 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r13 = interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r14 = specialinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.UPath getTr0()>();

        interfaceinvoke $r13.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r14);

        $r15 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d3 = d1 - 12.0;

        $d4 = $d3 + 4.0;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(4.0, $d4);

        $r16 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r15);

        $r17 = virtualinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r19 = interfaceinvoke $r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        $r20 = specialinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.UPath getTr180()>();

        interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r20);

        return;
    }

    private void drawH(net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r3, $r6, $r9, $r13, $r16, $r19;
        net.sourceforge.plantuml.ugraphic.URectangle $r1;
        double d0, d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2, $r5, $r8, $r15;
        net.sourceforge.plantuml.ugraphic.ULine $r4, $r7;
        net.sourceforge.plantuml.salt.element.ElementPyramidScrolled r10;
        net.sourceforge.plantuml.ugraphic.color.HColor $r11, $r17;
        net.sourceforge.plantuml.ugraphic.UBackground $r12, $r18;
        net.sourceforge.plantuml.ugraphic.UPath $r14, $r20;

        r10 := @this: net.sourceforge.plantuml.salt.element.ElementPyramidScrolled;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r1 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(12.0);

        $r3 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>(d1);

        interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        $d2 = d0 - 12.0;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d2);

        $r6 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>(d1);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r7);

        $r8 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(4.0, 4.0);

        $r9 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r13 = interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r14 = specialinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.UPath getTr90()>();

        interfaceinvoke $r13.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r14);

        $r15 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d3 = d0 - 12.0;

        $d4 = $d3 + 4.0;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d4, 4.0);

        $r16 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r15);

        $r17 = virtualinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r19 = interfaceinvoke $r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        $r20 = specialinvoke r10.<net.sourceforge.plantuml.salt.element.ElementPyramidScrolled: net.sourceforge.plantuml.ugraphic.UPath getTr270()>();

        interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r20);

        return;
    }
}
