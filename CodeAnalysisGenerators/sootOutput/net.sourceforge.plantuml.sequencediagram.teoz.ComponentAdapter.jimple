public class net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private final net.sourceforge.plantuml.skin.Component component;

    public void <init>(net.sourceforge.plantuml.skin.Component)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter r0;
        net.sourceforge.plantuml.skin.Component r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter;

        r1 := @parameter0: net.sourceforge.plantuml.skin.Component;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter: net.sourceforge.plantuml.skin.Component component> = r1;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter r0;
        net.sourceforge.plantuml.skin.Component $r1, $r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.skin.Area $r3;
        net.sourceforge.plantuml.graphic.StringBounder $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r6;
        net.sourceforge.plantuml.skin.SimpleContext2D $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter: net.sourceforge.plantuml.skin.Component component>;

        if $r1 != null goto label1;

        return;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter: net.sourceforge.plantuml.skin.Component component>;

        $r3 = new net.sourceforge.plantuml.skin.Area;

        $r5 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        specialinvoke $r3.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r6);

        $r7 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r7.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke $r4.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r2, $r3, $r7);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter r0;
        net.sourceforge.plantuml.skin.Component $r1, $r3, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double d0, d1;
        net.sourceforge.plantuml.Dimension2DDouble $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter: net.sourceforge.plantuml.skin.Component component>;

        if $r1 != null goto label1;

        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        return $r6;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter: net.sourceforge.plantuml.skin.Component component>;

        d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter: net.sourceforge.plantuml.skin.Component component>;

        d1 = interfaceinvoke $r4.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r5 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r5.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d0, d1);

        return $r5;
    }
}
