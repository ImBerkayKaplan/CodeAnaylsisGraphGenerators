public class net.sourceforge.plantuml.sequencediagram.InGroupableList extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private static final int MARGIN5;
    public static final int MARGIN10;
    private final net.sourceforge.plantuml.sequencediagram.Grouping grouping;
    private final java.util.Set inGroupables;
    private double minWidth;
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox veryfirst;
    private net.sourceforge.plantuml.sequencediagram.InGroupable cacheMin;
    private net.sourceforge.plantuml.sequencediagram.InGroupable cacheMax;
    private double hack2;
    static final boolean $assertionsDisabled;

    public java.util.List getInnerList()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.InGroupableList r2, $r7;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.InGroupable r6;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.InGroupable) $r5;

        $z1 = r6 instanceof net.sourceforge.plantuml.sequencediagram.InGroupableList;

        if $z1 == 0 goto label2;

        $r7 = (net.sourceforge.plantuml.sequencediagram.InGroupableList) r6;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox, net.sourceforge.plantuml.sequencediagram.Grouping, double)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        java.util.HashSet $r1;
        net.sourceforge.plantuml.sequencediagram.Grouping r2;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r3;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.Grouping;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables> = $r1;

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMin> = null;

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMax> = null;

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.Grouping grouping> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox veryfirst> = r3;

        return;
    }

    public void addInGroupable(net.sourceforge.plantuml.sequencediagram.InGroupable)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        net.sourceforge.plantuml.sequencediagram.InGroupable r1;
        java.util.Set $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.InGroupable;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMin> = null;

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMax> = null;

        return;
    }

    public boolean isEmpty()
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r8;
        net.sourceforge.plantuml.sequencediagram.InGroupableList r2;
        net.sourceforge.plantuml.sequencediagram.Grouping $r3;
        java.util.Set $r6;
        java.lang.String $r7, $r9;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GS ");

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.Grouping grouping>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r2.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r5, $r6;
        net.sourceforge.plantuml.sequencediagram.InGroupableList r3;
        net.sourceforge.plantuml.sequencediagram.Grouping $r4;
        java.lang.String $r7, $r11, $r15;
        java.util.Set $r9;
        java.util.Iterator r10;
        boolean $z0;
        java.lang.Object $r12;
        net.sourceforge.plantuml.sequencediagram.InGroupable r13;
        net.sourceforge.plantuml.graphic.StringBounder r14;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r14 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GS ");

        $r4 = r3.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.Grouping grouping>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r9 = r3.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (net.sourceforge.plantuml.sequencediagram.InGroupable) $r12;

        $r15 = interfaceinvoke r13.<net.sourceforge.plantuml.sequencediagram.InGroupable: java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)>(r14);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label1;

     label2:
        $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private net.sourceforge.plantuml.sequencediagram.InGroupable getMinSlow(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.InGroupable r4, r6;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double $d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r6 = null;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.InGroupable) $r3;

        $z0 = r4 instanceof net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        if r6 == null goto label3;

        $d0 = interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.InGroupable: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d1 = interfaceinvoke r6.<net.sourceforge.plantuml.sequencediagram.InGroupable: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label4;

     label3:
        r6 = r4;

     label4:
        goto label1;

     label5:
        return r6;
    }

    private net.sourceforge.plantuml.sequencediagram.InGroupable getMaxSlow(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.InGroupable r4, r6;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double $d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r6 = null;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.InGroupable) $r3;

        if r6 == null goto label2;

        $d0 = interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.InGroupable: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d1 = interfaceinvoke r6.<net.sourceforge.plantuml.sequencediagram.InGroupable: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label3;

     label2:
        r6 = r4;

     label3:
        goto label1;

     label4:
        return r6;
    }

    private net.sourceforge.plantuml.sequencediagram.InGroupable getMin(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        net.sourceforge.plantuml.sequencediagram.InGroupable $r1, $r2, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMin>;

        if $r1 != null goto label1;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable getMinSlow(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMin> = $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMin>;

        return $r2;
    }

    private net.sourceforge.plantuml.sequencediagram.InGroupable getMax(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        net.sourceforge.plantuml.sequencediagram.InGroupable $r1, $r2, $r4, $r5, $r7;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.lang.AssertionError $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMax>;

        if $r1 != null goto label1;

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable getMaxSlow(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMax> = $r7;

     label1:
        $z0 = <net.sourceforge.plantuml.sequencediagram.InGroupableList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMax>;

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable getMaxSlow(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        if $r4 == $r5 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable cacheMax>;

        return $r2;
    }

    public void setMinWidth(double)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double minWidth> = d0;

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getFirstParticipantBox()
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.InGroupable r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r6, r7;
        double $d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r7 = null;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.InGroupable) $r3;

        $z1 = r4 instanceof net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        if $z1 == 0 goto label3;

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) r4;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        if r7 == null goto label2;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label3;

     label2:
        r7 = r6;

     label3:
        goto label1;

     label4:
        return r7;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getLastParticipantBox()
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.InGroupable r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r6, r7;
        double $d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r7 = null;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.util.Set inGroupables>;

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.InGroupable) $r3;

        $z1 = r4 instanceof net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        if $z1 == 0 goto label3;

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) r4;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        if r7 == null goto label2;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label3;

     label2:
        r7 = r6;

     label3:
        goto label1;

     label4:
        return r7;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.InGroupable r2;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow $r3, $r6;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r4, $r5, $r7, $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r9, $r10;
        double $d1, $d2, d3, d4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable getMin(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        if r2 != null goto label3;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox veryfirst>;

        if $r9 != null goto label1;

        $d2 = 0.0;

        goto label2;

     label1:
        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox veryfirst>;

        $d2 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

     label2:
        $d1 = 15.0 + $d2;

        return $d1;

     label3:
        d3 = interfaceinvoke r2.<net.sourceforge.plantuml.sequencediagram.InGroupable: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = r2 instanceof net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        if $z0 == 0 goto label5;

        $r3 = (net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow) r2;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $r5 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        if $r4 == $r5 goto label4;

        $r6 = (net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow) r2;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $r8 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        if $r7 != $r8 goto label5;

     label4:
        d4 = d3 + 3.0;

        goto label7;

     label5:
        $z1 = r2 instanceof net.sourceforge.plantuml.sequencediagram.InGroupableList;

        if $z1 == 0 goto label6;

        d4 = d3 - 10.0;

        goto label7;

     label6:
        d4 = d3 - 5.0;

     label7:
        return d4;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        boolean $z0;
        byte $b0, $b1;
        java.lang.AssertionError $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getMaxXInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = <net.sourceforge.plantuml.sequencediagram.InGroupableList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $d10 = d1 - d0;

        $b1 = $d10 cmpl 0.0;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $d3 = d1 - d0;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double minWidth>;

        $b0 = $d3 cmpg $d2;

        if $b0 >= 0 goto label2;

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double minWidth>;

        $d8 = d0 + $d6;

        $d7 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double hack2>;

        $d9 = $d8 + $d7;

        return $d9;

     label2:
        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double hack2>;

        $d5 = d1 + $d4;

        return $d5;
    }

    private final double getMaxXInternal(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.InGroupable r2;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow $r3, $r6;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r4, $r5, $r7, $r8;
        double $d0, $d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: net.sourceforge.plantuml.sequencediagram.InGroupable getMax(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        if r2 != null goto label1;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double minWidth>;

        $d1 = 15.0 + $d0;

        return $d1;

     label1:
        d2 = interfaceinvoke r2.<net.sourceforge.plantuml.sequencediagram.InGroupable: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = r2 instanceof net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        if $z0 == 0 goto label3;

        $r3 = (net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow) r2;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $r5 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT>;

        if $r4 == $r5 goto label2;

        $r6 = (net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow) r2;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $r8 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT>;

        if $r7 != $r8 goto label3;

     label2:
        d3 = d2 - 3.0;

        goto label5;

     label3:
        $z1 = r2 instanceof net.sourceforge.plantuml.sequencediagram.InGroupableList;

        if $z1 == 0 goto label4;

        d3 = d2 + 10.0;

        goto label5;

     label4:
        d3 = d2 + 5.0;

     label5:
        return d3;
    }

    public void changeHack2(double)
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        double d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double hack2>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double hack2> = $d2;

        return;
    }

    public double getHack2()
    {
        net.sourceforge.plantuml.sequencediagram.InGroupableList r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double hack2>;

        return $d0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <net.sourceforge.plantuml.sequencediagram.InGroupableList: int MARGIN10> = 10;

        <net.sourceforge.plantuml.sequencediagram.InGroupableList: int MARGIN5> = 5;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/InGroupableList;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.InGroupableList: boolean $assertionsDisabled> = $z1;

        return;
    }
}
