public final class net.sourceforge.plantuml.svek.GeneralImageBuilder extends java.lang.Object
{
    private final net.sourceforge.plantuml.cucadiagram.dot.DotData dotData;
    private final net.sourceforge.plantuml.cucadiagram.entity.EntityFactory entityFactory;
    private final net.sourceforge.plantuml.core.UmlSource source;
    private final net.sourceforge.plantuml.Pragma pragma;
    private final boolean strictUmlStyle;
    private java.util.Map maxX;
    private final net.sourceforge.plantuml.graphic.StringBounder stringBounder;
    private final boolean mergeIntricated;
    private final net.sourceforge.plantuml.style.SName styleName;

    public static net.sourceforge.plantuml.svek.IEntityImage createEntityImageBlock(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, boolean, net.sourceforge.plantuml.cucadiagram.PortionShower, net.sourceforge.plantuml.svek.Bibliotekon, net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion, net.sourceforge.plantuml.UmlDiagramType, java.util.Collection)
    {
        net.sourceforge.plantuml.cucadiagram.ILeaf r0;
        net.sourceforge.plantuml.ISkinParam r1;
        boolean z0;
        net.sourceforge.plantuml.cucadiagram.PortionShower r2;
        net.sourceforge.plantuml.svek.Bibliotekon r3;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion r4;
        net.sourceforge.plantuml.UmlDiagramType r5;
        java.util.Collection r6;
        net.sourceforge.plantuml.svek.IEntityImage r7;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r1 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        z0 := @parameter2: boolean;

        r2 := @parameter3: net.sourceforge.plantuml.cucadiagram.PortionShower;

        r3 := @parameter4: net.sourceforge.plantuml.svek.Bibliotekon;

        r4 := @parameter5: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion;

        r5 := @parameter6: net.sourceforge.plantuml.UmlDiagramType;

        r6 := @parameter7: java.util.Collection;

        r7 = staticinvoke <net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.svek.IEntityImage createEntityImageBlockInternal(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,boolean,net.sourceforge.plantuml.cucadiagram.PortionShower,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.UmlDiagramType,java.util.Collection)>(r0, r1, z0, r2, r3, r4, r5, r6);

        return r7;
    }

    private static net.sourceforge.plantuml.svek.IEntityImage createEntityImageBlockInternal(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, boolean, net.sourceforge.plantuml.cucadiagram.PortionShower, net.sourceforge.plantuml.svek.Bibliotekon, net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion, net.sourceforge.plantuml.UmlDiagramType, java.util.Collection)
    {
        net.sourceforge.plantuml.cucadiagram.ILeaf r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        net.sourceforge.plantuml.cucadiagram.LeafType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r69, $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163;
        net.sourceforge.plantuml.svek.Bibliotekon r8;
        net.sourceforge.plantuml.ISkinParam r9;
        net.sourceforge.plantuml.UmlDiagramType r10, $r118, $r120;
        net.sourceforge.plantuml.svek.image.EntityImageBranch $r23;
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface $r28;
        net.sourceforge.plantuml.style.SName $r29, $r47, $r90, $r92, $r94, $r98, $r106, $r115, $r117, $r131, $r137, $r149;
        net.sourceforge.plantuml.svek.image.EntityImageSynchroBar $r46;
        java.lang.UnsupportedOperationException $r68;
        java.lang.String $r70, $r126, $r129;
        net.sourceforge.plantuml.descdiagram.EntityImageDomain $r71, $r74, $r77, $r80;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r72, $r73, $r75, $r76, $r78, $r79, $r82, $r83, $r85, $r86, $r99, $r124, $r127;
        net.sourceforge.plantuml.descdiagram.EntityImageRequirement $r81;
        net.sourceforge.plantuml.descdiagram.EntityImageDesignedDomain $r84;
        net.sourceforge.plantuml.descdiagram.EntityImageMachine $r87;
        net.sourceforge.plantuml.svek.image.EntityImageTips $r88;
        net.sourceforge.plantuml.svek.image.EntityImageDeepHistory $r89;
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState $r91;
        net.sourceforge.plantuml.svek.image.EntityImageAssociation $r93;
        net.sourceforge.plantuml.graphic.USymbol $r95, $r101;
        net.sourceforge.plantuml.svek.image.EntityImageEmptyPackage $r96;
        net.sourceforge.plantuml.cucadiagram.PortionShower r97;
        net.sourceforge.plantuml.ColorParam[] $r100;
        net.sourceforge.plantuml.ColorParam $r102, r151, r152;
        net.sourceforge.plantuml.svek.image.EntityImageDescription $r103, $r114, $r116;
        net.sourceforge.plantuml.SkinParamForecolored $r104;
        java.util.Collection r105;
        net.sourceforge.plantuml.svek.image.EntityImageGroup $r107;
        net.sourceforge.plantuml.svek.image.EntityImageAssociationPoint $r108;
        net.sourceforge.plantuml.svek.image.EntityImageArcCircle $r109;
        net.sourceforge.plantuml.svek.image.EntityImageMap $r110;
        net.sourceforge.plantuml.svek.image.EntityImageObject $r111;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase $r112, $r113;
        net.sourceforge.plantuml.svek.image.EntityImageCircleEnd $r119;
        net.sourceforge.plantuml.svek.image.EntityImageCircleStart $r121;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r122, $r123;
        net.sourceforge.plantuml.svek.image.EntityImageState $r125;
        net.sourceforge.plantuml.Guillemet $r128;
        net.sourceforge.plantuml.svek.image.EntityImageState2 $r130;
        net.sourceforge.plantuml.cucadiagram.Bodier $r132;
        java.util.List $r133;
        int $i0;
        net.sourceforge.plantuml.svek.image.EntityImageStateEmptyDescription $r134;
        net.sourceforge.plantuml.cucadiagram.IGroup $r135, $r146;
        net.sourceforge.plantuml.svek.image.EntityImageStateBorder $r136;
        net.sourceforge.plantuml.svek.image.EntityImageActivity $r138;
        net.sourceforge.plantuml.svek.image.EntityImageNote $r139;
        net.sourceforge.plantuml.svek.image.EntityImageClass $r140;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion r141;
        net.sourceforge.plantuml.cucadiagram.dot.Neighborhood r142;
        net.sourceforge.plantuml.svek.EntityImageProtected $r143;
        java.lang.IllegalStateException $r144;
        net.sourceforge.plantuml.svek.Cluster r147, r150;
        net.sourceforge.plantuml.svek.image.EntityImagePort $r148;
        net.sourceforge.plantuml.ugraphic.color.HColor r153;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r9 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        z8 := @parameter2: boolean;

        r97 := @parameter3: net.sourceforge.plantuml.cucadiagram.PortionShower;

        r8 := @parameter4: net.sourceforge.plantuml.svek.Bibliotekon;

        r141 := @parameter5: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion;

        r10 := @parameter6: net.sourceforge.plantuml.UmlDiagramType;

        r105 := @parameter7: java.util.Collection;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isRemoved()>();

        if $z0 == 0 goto label01;

        $r144 = new java.lang.IllegalStateException;

        specialinvoke $r144.<java.lang.IllegalStateException: void <init>()>();

        throw $r144;

     label01:
        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $z1 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.LeafType: boolean isLikeClass()>();

        if $z1 == 0 goto label03;

        $r140 = new net.sourceforge.plantuml.svek.image.EntityImageClass;

        specialinvoke $r140.<net.sourceforge.plantuml.svek.image.EntityImageClass: void <init>(net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower)>(r141, r0, r9, r97);

        r142 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.dot.Neighborhood getNeighborhood()>();

        if r142 == null goto label02;

        $r143 = new net.sourceforge.plantuml.svek.EntityImageProtected;

        specialinvoke $r143.<net.sourceforge.plantuml.svek.EntityImageProtected: void <init>(net.sourceforge.plantuml.svek.IEntityImage,double,net.sourceforge.plantuml.cucadiagram.dot.Neighborhood,net.sourceforge.plantuml.svek.Bibliotekon)>($r140, 20.0, r142, r8);

        return $r143;

     label02:
        return $r140;

     label03:
        $r2 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r3 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType NOTE>;

        if $r2 != $r3 goto label04;

        $r139 = new net.sourceforge.plantuml.svek.image.EntityImageNote;

        specialinvoke $r139.<net.sourceforge.plantuml.svek.image.EntityImageNote: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.UmlDiagramType)>(r0, r9, r10);

        return $r139;

     label04:
        $r4 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r5 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType ACTIVITY>;

        if $r4 != $r5 goto label05;

        $r138 = new net.sourceforge.plantuml.svek.image.EntityImageActivity;

        specialinvoke $r138.<net.sourceforge.plantuml.svek.image.EntityImageActivity: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.svek.Bibliotekon)>(r0, r9, r8);

        return $r138;

     label05:
        $r6 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r7 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PORT>;

        if $r6 == $r7 goto label06;

        $r11 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r12 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PORTIN>;

        if $r11 == $r12 goto label06;

        $r13 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r14 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PORTOUT>;

        if $r13 != $r14 goto label07;

     label06:
        $r146 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        r147 = virtualinvoke r8.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.Cluster getCluster(net.sourceforge.plantuml.cucadiagram.IGroup)>($r146);

        $r148 = new net.sourceforge.plantuml.svek.image.EntityImagePort;

        $r149 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r148.<net.sourceforge.plantuml.svek.image.EntityImagePort: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.svek.Cluster,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.style.SName)>(r0, r9, r147, r8, $r149);

        return $r148;

     label07:
        $r15 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r16 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType STATE>;

        if $r15 != $r16 goto label11;

        $r122 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $r123 = <net.sourceforge.plantuml.cucadiagram.EntityPosition: net.sourceforge.plantuml.cucadiagram.EntityPosition NORMAL>;

        if $r122 == $r123 goto label08;

        $r135 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        r150 = virtualinvoke r8.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.Cluster getCluster(net.sourceforge.plantuml.cucadiagram.IGroup)>($r135);

        $r136 = new net.sourceforge.plantuml.svek.image.EntityImageStateBorder;

        $r137 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r136.<net.sourceforge.plantuml.svek.image.EntityImageStateBorder: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.svek.Cluster,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.style.SName)>(r0, r9, r150, r8, $r137);

        return $r136;

     label08:
        if z8 == 0 goto label09;

        $r132 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r133 = interfaceinvoke $r132.<net.sourceforge.plantuml.cucadiagram.Bodier: java.util.List getRawBody()>();

        $i0 = interfaceinvoke $r133.<java.util.List: int size()>();

        if $i0 != 0 goto label09;

        $r134 = new net.sourceforge.plantuml.svek.image.EntityImageStateEmptyDescription;

        specialinvoke $r134.<net.sourceforge.plantuml.svek.image.EntityImageStateEmptyDescription: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r134;

     label09:
        $r124 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if $r124 == null goto label10;

        $r126 = "<<sdlreceive>>";

        $r127 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r128 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r129 = virtualinvoke $r127.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r128);

        $z9 = virtualinvoke $r126.<java.lang.String: boolean equals(java.lang.Object)>($r129);

        if $z9 == 0 goto label10;

        $r130 = new net.sourceforge.plantuml.svek.image.EntityImageState2;

        $r131 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r130.<net.sourceforge.plantuml.svek.image.EntityImageState2: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.SName)>(r0, r9, $r131);

        return $r130;

     label10:
        $r125 = new net.sourceforge.plantuml.svek.image.EntityImageState;

        specialinvoke $r125.<net.sourceforge.plantuml.svek.image.EntityImageState: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r125;

     label11:
        $r17 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r18 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CIRCLE_START>;

        if $r17 != $r18 goto label13;

        r151 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityStart>;

        $r120 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if r10 != $r120 goto label12;

        r151 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateStart>;

     label12:
        $r121 = new net.sourceforge.plantuml.svek.image.EntityImageCircleStart;

        specialinvoke $r121.<net.sourceforge.plantuml.svek.image.EntityImageCircleStart: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>(r0, r9, r151);

        return $r121;

     label13:
        $r19 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r20 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CIRCLE_END>;

        if $r19 != $r20 goto label15;

        r152 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityEnd>;

        $r118 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if r10 != $r118 goto label14;

        r152 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateEnd>;

     label14:
        $r119 = new net.sourceforge.plantuml.svek.image.EntityImageCircleEnd;

        specialinvoke $r119.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>(r0, r9, r152);

        return $r119;

     label15:
        $r21 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r22 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType BRANCH>;

        if $r21 == $r22 goto label16;

        $r24 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r25 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType STATE_CHOICE>;

        if $r24 != $r25 goto label17;

     label16:
        $r23 = new net.sourceforge.plantuml.svek.image.EntityImageBranch;

        specialinvoke $r23.<net.sourceforge.plantuml.svek.image.EntityImageBranch: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r23;

     label17:
        $r26 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r27 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType LOLLIPOP_FULL>;

        if $r26 == $r27 goto label18;

        $r30 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r31 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType LOLLIPOP_HALF>;

        if $r30 != $r31 goto label19;

     label18:
        $r28 = new net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        $r29 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r28.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.SName)>(r0, r9, $r29);

        return $r28;

     label19:
        $r32 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r33 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CIRCLE>;

        if $r32 != $r33 goto label20;

        $r116 = new net.sourceforge.plantuml.svek.image.EntityImageDescription;

        $r117 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r116.<net.sourceforge.plantuml.svek.image.EntityImageDescription: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower,java.util.Collection,net.sourceforge.plantuml.style.SName,net.sourceforge.plantuml.svek.Bibliotekon)>(r0, r9, r97, r105, $r117, r8);

        return $r116;

     label20:
        $r34 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r35 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DESCRIPTION>;

        if $r34 != $r35 goto label21;

        $r114 = new net.sourceforge.plantuml.svek.image.EntityImageDescription;

        $r115 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r114.<net.sourceforge.plantuml.svek.image.EntityImageDescription: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower,java.util.Collection,net.sourceforge.plantuml.style.SName,net.sourceforge.plantuml.svek.Bibliotekon)>(r0, r9, r97, r105, $r115, r8);

        return $r114;

     label21:
        $r36 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r37 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType USECASE>;

        if $r36 != $r37 goto label22;

        $r113 = new net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        specialinvoke $r113.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower)>(r0, r9, r97);

        return $r113;

     label22:
        $r38 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r39 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType USECASE_BUSINESS>;

        if $r38 != $r39 goto label23;

        $r112 = new net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        specialinvoke $r112.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower)>(r0, r9, r97);

        return $r112;

     label23:
        $r40 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r41 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType OBJECT>;

        if $r40 != $r41 goto label24;

        $r111 = new net.sourceforge.plantuml.svek.image.EntityImageObject;

        specialinvoke $r111.<net.sourceforge.plantuml.svek.image.EntityImageObject: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower)>(r0, r9, r97);

        return $r111;

     label24:
        $r42 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r43 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType MAP>;

        if $r42 != $r43 goto label25;

        $r110 = new net.sourceforge.plantuml.svek.image.EntityImageMap;

        specialinvoke $r110.<net.sourceforge.plantuml.svek.image.EntityImageMap: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower)>(r0, r9, r97);

        return $r110;

     label25:
        $r44 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r45 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType SYNCHRO_BAR>;

        if $r44 == $r45 goto label26;

        $r48 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r49 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType STATE_FORK_JOIN>;

        if $r48 != $r49 goto label27;

     label26:
        $r46 = new net.sourceforge.plantuml.svek.image.EntityImageSynchroBar;

        $r47 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r46.<net.sourceforge.plantuml.svek.image.EntityImageSynchroBar: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.SName)>(r0, r9, $r47);

        return $r46;

     label27:
        $r50 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r51 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType ARC_CIRCLE>;

        if $r50 != $r51 goto label28;

        $r109 = new net.sourceforge.plantuml.svek.image.EntityImageArcCircle;

        specialinvoke $r109.<net.sourceforge.plantuml.svek.image.EntityImageArcCircle: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r109;

     label28:
        $r52 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r53 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType POINT_FOR_ASSOCIATION>;

        if $r52 != $r53 goto label29;

        $r108 = new net.sourceforge.plantuml.svek.image.EntityImageAssociationPoint;

        specialinvoke $r108.<net.sourceforge.plantuml.svek.image.EntityImageAssociationPoint: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r108;

     label29:
        $z2 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isGroup()>();

        if $z2 == 0 goto label30;

        $r107 = new net.sourceforge.plantuml.svek.image.EntityImageGroup;

        specialinvoke $r107.<net.sourceforge.plantuml.svek.image.EntityImageGroup: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r107;

     label30:
        $r54 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r55 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType EMPTY_PACKAGE>;

        if $r54 != $r55 goto label32;

        $r95 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r95 == null goto label31;

        $r99 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r100 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r101 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r102 = virtualinvoke $r101.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.ColorParam getColorParamBorder()>();

        $r100[0] = $r102;

        r153 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>(r9, $r99, $r100);

        $r103 = new net.sourceforge.plantuml.svek.image.EntityImageDescription;

        $r104 = new net.sourceforge.plantuml.SkinParamForecolored;

        specialinvoke $r104.<net.sourceforge.plantuml.SkinParamForecolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor)>(r9, r153);

        $r106 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r103.<net.sourceforge.plantuml.svek.image.EntityImageDescription: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower,java.util.Collection,net.sourceforge.plantuml.style.SName,net.sourceforge.plantuml.svek.Bibliotekon)>(r0, $r104, r97, r105, $r106, r8);

        return $r103;

     label31:
        $r96 = new net.sourceforge.plantuml.svek.image.EntityImageEmptyPackage;

        $r98 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r96.<net.sourceforge.plantuml.svek.image.EntityImageEmptyPackage: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower,net.sourceforge.plantuml.style.SName)>(r0, r9, r97, $r98);

        return $r96;

     label32:
        $r56 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r57 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType ASSOCIATION>;

        if $r56 != $r57 goto label33;

        $r93 = new net.sourceforge.plantuml.svek.image.EntityImageAssociation;

        $r94 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r93.<net.sourceforge.plantuml.svek.image.EntityImageAssociation: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.SName)>(r0, r9, $r94);

        return $r93;

     label33:
        $r58 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r59 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PSEUDO_STATE>;

        if $r58 != $r59 goto label34;

        $r91 = new net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        $r92 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r91.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.SName)>(r0, r9, $r92);

        return $r91;

     label34:
        $r60 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r61 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DEEP_HISTORY>;

        if $r60 != $r61 goto label35;

        $r89 = new net.sourceforge.plantuml.svek.image.EntityImageDeepHistory;

        $r90 = virtualinvoke r10.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        specialinvoke $r89.<net.sourceforge.plantuml.svek.image.EntityImageDeepHistory: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.SName)>(r0, r9, $r90);

        return $r89;

     label35:
        $r62 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r63 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType TIPS>;

        if $r62 != $r63 goto label36;

        $r88 = new net.sourceforge.plantuml.svek.image.EntityImageTips;

        specialinvoke $r88.<net.sourceforge.plantuml.svek.image.EntityImageTips: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.UmlDiagramType)>(r0, r9, r8, r10);

        return $r88;

     label36:
        $r64 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r65 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DOMAIN>;

        if $r64 != $r65 goto label37;

        $r85 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if $r85 == null goto label37;

        $r86 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z7 = virtualinvoke $r86.<net.sourceforge.plantuml.cucadiagram.Stereotype: boolean isMachineOrSpecification()>();

        if $z7 == 0 goto label37;

        $r87 = new net.sourceforge.plantuml.descdiagram.EntityImageMachine;

        specialinvoke $r87.<net.sourceforge.plantuml.descdiagram.EntityImageMachine: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r87;

     label37:
        $r154 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r155 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DOMAIN>;

        if $r154 != $r155 goto label38;

        $r82 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if $r82 == null goto label38;

        $r83 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z6 = virtualinvoke $r83.<net.sourceforge.plantuml.cucadiagram.Stereotype: boolean isDesignedOrSolved()>();

        if $z6 == 0 goto label38;

        $r84 = new net.sourceforge.plantuml.descdiagram.EntityImageDesignedDomain;

        specialinvoke $r84.<net.sourceforge.plantuml.descdiagram.EntityImageDesignedDomain: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r84;

     label38:
        $r156 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r157 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType REQUIREMENT>;

        if $r156 != $r157 goto label39;

        $r81 = new net.sourceforge.plantuml.descdiagram.EntityImageRequirement;

        specialinvoke $r81.<net.sourceforge.plantuml.descdiagram.EntityImageRequirement: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r0, r9);

        return $r81;

     label39:
        $r66 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r67 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DOMAIN>;

        if $r66 != $r67 goto label40;

        $r78 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if $r78 == null goto label40;

        $r79 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z5 = virtualinvoke $r79.<net.sourceforge.plantuml.cucadiagram.Stereotype: boolean isLexicalOrGiven()>();

        if $z5 == 0 goto label40;

        $r80 = new net.sourceforge.plantuml.descdiagram.EntityImageDomain;

        specialinvoke $r80.<net.sourceforge.plantuml.descdiagram.EntityImageDomain: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,char)>(r0, r9, 88);

        return $r80;

     label40:
        $r158 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r159 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DOMAIN>;

        if $r158 != $r159 goto label41;

        $r75 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if $r75 == null goto label41;

        $r76 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z4 = virtualinvoke $r76.<net.sourceforge.plantuml.cucadiagram.Stereotype: boolean isCausal()>();

        if $z4 == 0 goto label41;

        $r77 = new net.sourceforge.plantuml.descdiagram.EntityImageDomain;

        specialinvoke $r77.<net.sourceforge.plantuml.descdiagram.EntityImageDomain: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,char)>(r0, r9, 67);

        return $r77;

     label41:
        $r160 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r161 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DOMAIN>;

        if $r160 != $r161 goto label42;

        $r72 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if $r72 == null goto label42;

        $r73 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z3 = virtualinvoke $r73.<net.sourceforge.plantuml.cucadiagram.Stereotype: boolean isBiddableOrUncertain()>();

        if $z3 == 0 goto label42;

        $r74 = new net.sourceforge.plantuml.descdiagram.EntityImageDomain;

        specialinvoke $r74.<net.sourceforge.plantuml.descdiagram.EntityImageDomain: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,char)>(r0, r9, 66);

        return $r74;

     label42:
        $r162 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r163 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DOMAIN>;

        if $r162 != $r163 goto label43;

        $r71 = new net.sourceforge.plantuml.descdiagram.EntityImageDomain;

        specialinvoke $r71.<net.sourceforge.plantuml.descdiagram.EntityImageDomain: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,char)>(r0, r9, 80);

        return $r71;

     label43:
        $r68 = new java.lang.UnsupportedOperationException;

        $r69 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r70 = virtualinvoke $r69.<net.sourceforge.plantuml.cucadiagram.LeafType: java.lang.String toString()>();

        specialinvoke $r68.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r70);

        throw $r68;
    }

    public static net.sourceforge.plantuml.ugraphic.UStroke getForcedStroke(net.sourceforge.plantuml.cucadiagram.Stereotype, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.ISkinParam r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;
        net.sourceforge.plantuml.LineParam $r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3, r4;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r0 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        $r2 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam packageBorder>;

        r4 = interfaceinvoke r0.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r2, r1);

        if r4 != null goto label1;

        $r3 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r4 = $r3;

     label1:
        return r4;
    }

    public void <init>(boolean, net.sourceforge.plantuml.cucadiagram.dot.DotData, net.sourceforge.plantuml.cucadiagram.entity.EntityFactory, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.Pragma, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.style.SName)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData r1;
        net.sourceforge.plantuml.style.SName r2;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory r3;
        net.sourceforge.plantuml.core.UmlSource r4;
        net.sourceforge.plantuml.Pragma r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.ISkinParam $r7;
        boolean $z0, z1;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        z1 := @parameter0: boolean;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.dot.DotData;

        r3 := @parameter2: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory;

        r4 := @parameter3: net.sourceforge.plantuml.core.UmlSource;

        r5 := @parameter4: net.sourceforge.plantuml.Pragma;

        r6 := @parameter5: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter6: net.sourceforge.plantuml.style.SName;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData> = r1;

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.style.SName styleName> = r2;

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory entityFactory> = r3;

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.core.UmlSource source> = r4;

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.Pragma pragma> = r5;

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = r6;

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z0 = interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: boolean strictUmlStyle()>();

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean strictUmlStyle> = $z0;

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean mergeIntricated> = z1;

        return;
    }

    public final net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionArrow(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r4, $r5;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r3;
        net.sourceforge.plantuml.cucadiagram.Stereotype r6;
        net.sourceforge.plantuml.style.StyleSignature r7;

        r3 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r6 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r4 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.style.SName styleName>;

        $r0[2] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName arrow>;

        $r0[3] = $r5;

        r7 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        if r6 == null goto label1;

        r7 = virtualinvoke r7.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r6);

     label1:
        return r7;
    }

    private boolean isOpalisable(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.cucadiagram.IEntity r1;
        net.sourceforge.plantuml.cucadiagram.LeafType $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $z0 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean strictUmlStyle>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: boolean isGroup()>();

        if $z1 != 0 goto label2;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r3 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType NOTE>;

        if $r2 != $r3 goto label2;

        $z2 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean onlyOneLink(net.sourceforge.plantuml.cucadiagram.IEntity)>(r1);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        boolean $z0;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r1, $r8, $r14, $r17;
        net.sourceforge.plantuml.ISkinParam $r2, $r9, $r15, $r18;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3, $r20;
        net.sourceforge.plantuml.style.SName[] $r4;
        net.sourceforge.plantuml.style.SName $r5, $r6;
        net.sourceforge.plantuml.style.StyleSignature $r7;
        net.sourceforge.plantuml.style.StyleBuilder $r10;
        net.sourceforge.plantuml.style.Style r11;
        net.sourceforge.plantuml.style.PName $r12;
        net.sourceforge.plantuml.style.Value $r13;
        net.sourceforge.plantuml.api.ThemeStyle $r16;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r19;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r4 = newarray (net.sourceforge.plantuml.style.SName)[2];

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r4[0] = $r5;

        $r6 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName document>;

        $r4[1] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r4);

        $r8 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r11 = virtualinvoke $r7.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r10);

        $r12 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r13 = virtualinvoke r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r12);

        $r14 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r17 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r20 = interfaceinvoke $r13.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r16, $r19);

        return $r20;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()>();

        return $r3;
    }

    public net.sourceforge.plantuml.svek.IEntityImage buildImage(net.sourceforge.plantuml.BaseFile, java.lang.String[])
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r1, $r2, $r4, $r7, $r18, $r41, $r44, $r49, $r51, $r52, $r53, $r55, $r60, $r80, $r83, $r85, $r88;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.String[] r3;
        int $i0;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory $r5;
        net.sourceforge.plantuml.svek.SvekResult $r6;
        net.sourceforge.plantuml.svek.Bibliotekon $r8, $r23, $r26, $r29, $r31, $r35, $r37;
        java.util.Map $r9;
        net.sourceforge.plantuml.svek.GraphvizCrash $r10, $r72;
        net.sourceforge.plantuml.core.UmlSource $r11, $r69, $r73;
        java.lang.String $r12, $r67, $r70, $r74, r98, r100;
        net.sourceforge.plantuml.svek.EmptySvgException $r13;
        net.sourceforge.plantuml.BaseFile $r14, r76;
        java.io.File $r15;
        net.sourceforge.plantuml.svek.IEntityImage $r16, $r33, $r39, r79;
        java.lang.Object $r17, $r47;
        net.sourceforge.plantuml.graphic.FontConfiguration r19;
        net.sourceforge.plantuml.svek.SvekLine $r20;
        net.sourceforge.plantuml.svek.ColorSequence $r21;
        net.sourceforge.plantuml.graphic.StringBounder $r22, $r82;
        net.sourceforge.plantuml.Pragma $r24;
        net.sourceforge.plantuml.cucadiagram.IEntity $r27, $r28, $r30, $r32, $r36, $r38;
        net.sourceforge.plantuml.svek.image.EntityImageNote $r34, $r40;
        net.sourceforge.plantuml.UmlDiagramType $r42, $r43, $r54;
        java.util.Collection $r45, $r87;
        java.util.Iterator $r46, r90;
        net.sourceforge.plantuml.graphic.USymbol $r48;
        net.sourceforge.plantuml.ISkinParam $r50, $r61, r92;
        java.util.List $r56, $r89;
        net.sourceforge.plantuml.svek.EntityImageDegenerated $r57;
        net.sourceforge.plantuml.ugraphic.color.HColor $r58, $r62;
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty $r59;
        java.lang.Exception $r63;
        java.lang.StringBuilder $r64, $r65, $r66;
        net.sourceforge.plantuml.cucadiagram.UnparsableGraphvizException $r68;
        java.io.IOException $r71;
        java.lang.IllegalStateException $r75;
        net.sourceforge.plantuml.cucadiagram.ILeaf r77;
        net.sourceforge.plantuml.cucadiagram.IGroup r78, $r86;
        net.sourceforge.plantuml.svek.DotStringFactory $r81;
        net.sourceforge.plantuml.cucadiagram.Link r91;
        net.sourceforge.plantuml.svek.SvekNode r93, r94, r95, r96;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r76 := @parameter0: net.sourceforge.plantuml.BaseFile;

        r3 := @parameter1: java.lang.String[];

        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: boolean isDegeneratedWithFewEntities(int)>(0);

        if $z0 == 0 goto label01;

        $r59 = new net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        $r60 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r61 = virtualinvoke $r60.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r62 = interfaceinvoke $r61.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()>();

        specialinvoke $r59.<net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor)>($r62);

        return $r59;

     label01:
        $r2 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $z1 = virtualinvoke $r2.<net.sourceforge.plantuml.cucadiagram.dot.DotData: boolean isDegeneratedWithFewEntities(int)>(1);

        if $z1 == 0 goto label02;

        $r41 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r42 = virtualinvoke $r41.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r43 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if $r42 == $r43 goto label02;

        $r44 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r45 = virtualinvoke $r44.<net.sourceforge.plantuml.cucadiagram.dot.DotData: java.util.Collection getLeafs()>();

        $r46 = interfaceinvoke $r45.<java.util.Collection: java.util.Iterator iterator()>();

        $r47 = interfaceinvoke $r46.<java.util.Iterator: java.lang.Object next()>();

        r77 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r47;

        r78 = interfaceinvoke r77.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        $z9 = r78 instanceof net.sourceforge.plantuml.cucadiagram.GroupRoot;

        if $z9 == 0 goto label02;

        $r48 = interfaceinvoke r77.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $z10 = $r48 instanceof net.sourceforge.plantuml.graphic.USymbolHexagon;

        if $z10 != 0 goto label02;

        $r49 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r50 = virtualinvoke $r49.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r51 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $z11 = virtualinvoke $r51.<net.sourceforge.plantuml.cucadiagram.dot.DotData: boolean isHideEmptyDescriptionForState()>();

        $r53 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r52 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r54 = virtualinvoke $r52.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r55 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r56 = virtualinvoke $r55.<net.sourceforge.plantuml.cucadiagram.dot.DotData: java.util.List getLinks()>();

        r79 = staticinvoke <net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.svek.IEntityImage createEntityImageBlock(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,boolean,net.sourceforge.plantuml.cucadiagram.PortionShower,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.UmlDiagramType,java.util.Collection)>(r77, $r50, $z11, $r53, null, null, $r54, $r56);

        $r57 = new net.sourceforge.plantuml.svek.EntityImageDegenerated;

        $r58 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        specialinvoke $r57.<net.sourceforge.plantuml.svek.EntityImageDegenerated: void <init>(net.sourceforge.plantuml.svek.IEntityImage,net.sourceforge.plantuml.ugraphic.color.HColor)>(r79, $r58);

        return $r57;

     label02:
        $r80 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        virtualinvoke $r80.<net.sourceforge.plantuml.cucadiagram.dot.DotData: void removeIrrelevantSametail()>();

        $r81 = new net.sourceforge.plantuml.svek.DotStringFactory;

        $r82 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $r83 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        specialinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: void <init>(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.cucadiagram.dot.DotData)>($r82, $r83);

        $r85 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r86 = virtualinvoke $r85.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.cucadiagram.IGroup getRootGroup()>();

        specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printGroups(net.sourceforge.plantuml.svek.DotStringFactory,net.sourceforge.plantuml.cucadiagram.IGroup)>($r81, $r86);

        $r87 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: java.util.Collection getUnpackagedEntities()>();

        specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printEntities(net.sourceforge.plantuml.svek.DotStringFactory,java.util.Collection)>($r81, $r87);

        $r88 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r89 = virtualinvoke $r88.<net.sourceforge.plantuml.cucadiagram.dot.DotData: java.util.List getLinks()>();

        r90 = interfaceinvoke $r89.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z13 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label10;

        $r17 = interfaceinvoke r90.<java.util.Iterator: java.lang.Object next()>();

        r91 = (net.sourceforge.plantuml.cucadiagram.Link) $r17;

        $z6 = virtualinvoke r91.<net.sourceforge.plantuml.cucadiagram.Link: boolean isRemoved()>();

        if $z6 == 0 goto label04;

        goto label03;

     label04:
        $r18 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        r92 = virtualinvoke $r18.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r19 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.FontConfiguration getFontForLink(net.sourceforge.plantuml.cucadiagram.Link,net.sourceforge.plantuml.ISkinParam)>(r91, r92);

        $r20 = new net.sourceforge.plantuml.svek.SvekLine;

        $r21 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence getColorSequence()>();

        $r22 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $r23 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r24 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.Pragma pragma>;

        specialinvoke $r20.<net.sourceforge.plantuml.svek.SvekLine: void <init>(net.sourceforge.plantuml.cucadiagram.Link,net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.Pragma)>(r91, $r21, r92, $r22, r19, $r23, $r24);

        $r26 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        virtualinvoke $r26.<net.sourceforge.plantuml.svek.Bibliotekon: void addLine(net.sourceforge.plantuml.svek.SvekLine)>($r20);

        $r27 = virtualinvoke r91.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity1()>();

        $z7 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean isOpalisable(net.sourceforge.plantuml.cucadiagram.IEntity)>($r27);

        if $z7 == 0 goto label06;

        $r35 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r36 = virtualinvoke r91.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity1()>();

        r93 = virtualinvoke $r35.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r36);

        $r37 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r38 = virtualinvoke r91.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity2()>();

        r94 = virtualinvoke $r37.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r38);

        if r94 == null goto label05;

        $r39 = virtualinvoke r93.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage getImage()>();

        $r40 = (net.sourceforge.plantuml.svek.image.EntityImageNote) $r39;

        virtualinvoke $r40.<net.sourceforge.plantuml.svek.image.EntityImageNote: void setOpaleLine(net.sourceforge.plantuml.svek.SvekLine,net.sourceforge.plantuml.svek.SvekNode,net.sourceforge.plantuml.svek.SvekNode)>($r20, r93, r94);

        virtualinvoke $r20.<net.sourceforge.plantuml.svek.SvekLine: void setOpale(boolean)>(1);

     label05:
        goto label07;

     label06:
        $r28 = virtualinvoke r91.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity2()>();

        $z8 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean isOpalisable(net.sourceforge.plantuml.cucadiagram.IEntity)>($r28);

        if $z8 == 0 goto label07;

        $r29 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r30 = virtualinvoke r91.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity2()>();

        r95 = virtualinvoke $r29.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r30);

        $r31 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r32 = virtualinvoke r91.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity1()>();

        r96 = virtualinvoke $r31.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r32);

        if r96 == null goto label07;

        $r33 = virtualinvoke r95.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage getImage()>();

        $r34 = (net.sourceforge.plantuml.svek.image.EntityImageNote) $r33;

        virtualinvoke $r34.<net.sourceforge.plantuml.svek.image.EntityImageNote: void setOpaleLine(net.sourceforge.plantuml.svek.SvekLine,net.sourceforge.plantuml.svek.SvekNode,net.sourceforge.plantuml.svek.SvekNode)>($r20, r95, r96);

        virtualinvoke $r20.<net.sourceforge.plantuml.svek.SvekLine: void setOpale(boolean)>(1);

     label07:
        goto label09;

     label08:
        $r75 := @caughtexception;

        virtualinvoke $r75.<java.lang.IllegalStateException: void printStackTrace()>();

     label09:
        goto label03;

     label10:
        $z2 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: boolean illegalDotExe()>();

        if $z2 == 0 goto label11;

        $r15 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: java.io.File getDotExe()>();

        $r16 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.svek.IEntityImage error(java.io.File)>($r15);

        return $r16;

     label11:
        if r76 != null goto label12;

        $z5 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean isSvekTrace()>();

        if $z5 == 0 goto label12;

        $r14 = new net.sourceforge.plantuml.BaseFile;

        specialinvoke $r14.<net.sourceforge.plantuml.BaseFile: void <init>()>();

        r76 = $r14;

     label12:
        r98 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: java.lang.String getSvg(net.sourceforge.plantuml.BaseFile,java.lang.String[])>(r76, r3);

     label13:
        goto label15;

     label14:
        $r71 := @caughtexception;

        $r72 = new net.sourceforge.plantuml.svek.GraphvizCrash;

        $r73 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.core.UmlSource source>;

        $r74 = virtualinvoke $r73.<net.sourceforge.plantuml.core.UmlSource: java.lang.String getPlainString()>();

        $z12 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: boolean graphviz244onWindows()>();

        specialinvoke $r72.<net.sourceforge.plantuml.svek.GraphvizCrash: void <init>(java.lang.String,boolean,java.lang.Throwable)>($r74, $z12, $r71);

        return $r72;

     label15:
        $i0 = virtualinvoke r98.<java.lang.String: int length()>();

        if $i0 != 0 goto label16;

        $r10 = new net.sourceforge.plantuml.svek.GraphvizCrash;

        $r11 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.core.UmlSource source>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.core.UmlSource: java.lang.String getPlainString()>();

        $z4 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: boolean graphviz244onWindows()>();

        $r13 = new net.sourceforge.plantuml.svek.EmptySvgException;

        specialinvoke $r13.<net.sourceforge.plantuml.svek.EmptySvgException: void <init>()>();

        specialinvoke $r10.<net.sourceforge.plantuml.svek.GraphvizCrash: void <init>(java.lang.String,boolean,java.lang.Throwable)>($r12, $z4, $r13);

        return $r10;

     label16:
        r100 = specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: java.lang.String extractGraphvizVersion(java.lang.String)>(r98);

     label17:
        $z3 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean mergeIntricated>;

        $r4 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory getEntityFactory()>();

        virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: void solve(boolean,net.sourceforge.plantuml.cucadiagram.entity.EntityFactory,java.lang.String)>($z3, $r5, r98);

        $r6 = new net.sourceforge.plantuml.svek.SvekResult;

        $r7 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        specialinvoke $r6.<net.sourceforge.plantuml.svek.SvekResult: void <init>(net.sourceforge.plantuml.cucadiagram.dot.DotData,net.sourceforge.plantuml.svek.DotStringFactory)>($r7, $r81);

        $r8 = virtualinvoke $r81.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map getMaxX()>();

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: java.util.Map maxX> = $r9;

     label18:
        return $r6;

     label19:
        $r63 := @caughtexception;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r63);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r67);

        $r68 = new net.sourceforge.plantuml.cucadiagram.UnparsableGraphvizException;

        $r69 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.core.UmlSource source>;

        $r70 = virtualinvoke $r69.<net.sourceforge.plantuml.core.UmlSource: java.lang.String getPlainString()>();

        specialinvoke $r68.<net.sourceforge.plantuml.cucadiagram.UnparsableGraphvizException: void <init>(java.lang.Exception,java.lang.String,java.lang.String,java.lang.String)>($r63, r100, r98, $r70);

        throw $r68;

        catch java.lang.IllegalStateException from label04 to label07 with label08;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Exception from label17 to label18 with label19;
    }

    private net.sourceforge.plantuml.graphic.FontConfiguration getFontForLink(net.sourceforge.plantuml.cucadiagram.Link, net.sourceforge.plantuml.ISkinParam)
    {
        boolean $z0;
        net.sourceforge.plantuml.graphic.FontConfiguration $r0, r11;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.FontParam $r2;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r3;
        net.sourceforge.plantuml.cucadiagram.Link r4;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r5;
        net.sourceforge.plantuml.style.StyleSignature $r6;
        net.sourceforge.plantuml.style.StyleBuilder $r7;
        net.sourceforge.plantuml.style.Style r8;
        net.sourceforge.plantuml.api.ThemeStyle $r9;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r10;

        r3 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r4 := @parameter0: net.sourceforge.plantuml.cucadiagram.Link;

        r1 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionArrow(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r5);

        $r7 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        r8 = virtualinvoke $r6.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r7);

        $r9 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r10 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r11 = virtualinvoke r8.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r9, $r10);

        goto label2;

     label1:
        $r0 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r2 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam ARROW>;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1, $r2, null);

        r11 = $r0;

     label2:
        return r11;
    }

    private boolean isSvekTrace()
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        net.sourceforge.plantuml.Pragma $r1;
        java.lang.String r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.Pragma pragma>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.Pragma: java.lang.String getValue(java.lang.String)>("svek_trace");

        $r3 = "true";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r4 = "on";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private java.lang.String extractGraphvizVersion(java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, $r3, $r4;
        java.util.regex.Matcher r2;
        boolean $z0;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r5;

        r5 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?mi)!-- generated by graphviz(.*)");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r3);

        return $r4;

     label1:
        return null;
    }

    private boolean onlyOneLink(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r1;
        java.util.List $r2;
        java.util.Iterator r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.cucadiagram.Link r5;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.cucadiagram.IEntity r6;
        int i0;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r6 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        i0 = 0;

        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: java.util.List getLinks()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.cucadiagram.Link) $r4;

        $z0 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Link: boolean isInvis()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Link: boolean contains(net.sourceforge.plantuml.cucadiagram.IEntity)>(r6);

        if $z1 == 0 goto label3;

        i0 = i0 + 1;

     label3:
        if i0 <= 1 goto label4;

        return 0;

     label4:
        goto label1;

     label5:
        if i0 != 1 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    private net.sourceforge.plantuml.svek.IEntityImage error(java.io.File)
    {
        java.util.ArrayList $r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.io.File r4;
        java.lang.String $r6, $r8;
        net.sourceforge.plantuml.cucadiagram.dot.ExeState r7;
        net.sourceforge.plantuml.svek.IEntityImage $r9;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r10;

        r10 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r4 := @parameter0: java.io.File;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dot Executable: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        r7 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.ExeState: net.sourceforge.plantuml.cucadiagram.dot.ExeState checkFile(java.io.File)>(r4);

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.cucadiagram.dot.ExeState: java.lang.String getTextMessage()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("Cannot find Graphviz. You should try");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("@startuml");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("testdot");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("@enduml");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" or ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("java -jar plantuml.jar -testdot");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        $r9 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.IEntityImage createForError(java.util.List,boolean)>($r0, 0);

        return $r9;
    }

    private void printEntities(net.sourceforge.plantuml.svek.DotStringFactory, java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.cucadiagram.ILeaf r3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r4;
        net.sourceforge.plantuml.svek.DotStringFactory r5;

        r4 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r5 := @parameter0: net.sourceforge.plantuml.svek.DotStringFactory;

        r0 := @parameter1: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r2;

        $z0 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isRemoved()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        specialinvoke r4.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printEntity(net.sourceforge.plantuml.svek.DotStringFactory,net.sourceforge.plantuml.cucadiagram.ILeaf)>(r5, r3);

        goto label1;

     label3:
        return;
    }

    private void printEntity(net.sourceforge.plantuml.svek.DotStringFactory, net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.cucadiagram.ILeaf r0;
        boolean $z0;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r1;
        net.sourceforge.plantuml.svek.DotStringFactory r2;
        net.sourceforge.plantuml.svek.IEntityImage r3;
        net.sourceforge.plantuml.svek.Bibliotekon $r4;
        net.sourceforge.plantuml.svek.ColorSequence $r5;
        net.sourceforge.plantuml.graphic.StringBounder $r6;
        net.sourceforge.plantuml.svek.SvekNode r7;
        java.lang.IllegalStateException $r8;

        r1 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r2 := @parameter0: net.sourceforge.plantuml.svek.DotStringFactory;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.ILeaf;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isRemoved()>();

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        r3 = specialinvoke r1.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.svek.IEntityImage printEntityInternal(net.sourceforge.plantuml.svek.DotStringFactory,net.sourceforge.plantuml.cucadiagram.ILeaf)>(r2, r0);

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence getColorSequence()>();

        $r6 = r1.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r7 = virtualinvoke $r4.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode createNode(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.svek.IEntityImage,net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.graphic.StringBounder)>(r0, r3, $r5, $r6);

        virtualinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: void addNode(net.sourceforge.plantuml.svek.SvekNode)>(r7);

        return;
    }

    private net.sourceforge.plantuml.svek.IEntityImage printEntityInternal(net.sourceforge.plantuml.svek.DotStringFactory, net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.cucadiagram.ILeaf r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.svek.IEntityImage $r1, $r2, $r14;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r3;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r4, $r5, $r7, $r10, $r12;
        net.sourceforge.plantuml.svek.DotStringFactory r6;
        net.sourceforge.plantuml.svek.Bibliotekon $r8;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion $r9;
        net.sourceforge.plantuml.UmlDiagramType $r11;
        java.util.List $r13;
        double d0;
        net.sourceforge.plantuml.SkinParamSameClassWidth $r15;
        java.lang.IllegalStateException $r16;
        net.sourceforge.plantuml.ISkinParam r17;

        r3 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r6 := @parameter0: net.sourceforge.plantuml.svek.DotStringFactory;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.ILeaf;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isRemoved()>();

        if $z0 == 0 goto label1;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>()>();

        throw $r16;

     label1:
        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.svek.IEntityImage getSvekImage()>();

        if $r1 != null goto label3;

        $r4 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        r17 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z1 = interfaceinvoke r17.<net.sourceforge.plantuml.ISkinParam: boolean sameClassWidth()>();

        if $z1 == 0 goto label2;

        d0 = specialinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: double getMaxWidth(net.sourceforge.plantuml.svek.DotStringFactory)>(r6);

        $r15 = new net.sourceforge.plantuml.SkinParamSameClassWidth;

        specialinvoke $r15.<net.sourceforge.plantuml.SkinParamSameClassWidth: void <init>(net.sourceforge.plantuml.ISkinParam,double)>(r17, d0);

        r17 = $r15;

     label2:
        $r5 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $z2 = virtualinvoke $r5.<net.sourceforge.plantuml.cucadiagram.dot.DotData: boolean isHideEmptyDescriptionForState()>();

        $r7 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r8 = virtualinvoke r6.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r9 = virtualinvoke r6.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion()>();

        $r10 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r12 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.cucadiagram.dot.DotData: java.util.List getLinks()>();

        $r14 = staticinvoke <net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.svek.IEntityImage createEntityImageBlock(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,boolean,net.sourceforge.plantuml.cucadiagram.PortionShower,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.UmlDiagramType,java.util.Collection)>(r0, r17, $z2, $r7, $r8, $r9, $r11, $r13);

        return $r14;

     label3:
        $r2 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.svek.IEntityImage getSvekImage()>();

        return $r2;
    }

    private double getMaxWidth(net.sourceforge.plantuml.svek.DotStringFactory)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r1, $r10, $r12;
        java.util.Collection $r2;
        java.util.Iterator r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.cucadiagram.ILeaf r5;
        net.sourceforge.plantuml.cucadiagram.LeafType $r6;
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.image.EntityImageClass $r7;
        net.sourceforge.plantuml.svek.DotStringFactory r8;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion $r9;
        net.sourceforge.plantuml.ISkinParam $r11;
        net.sourceforge.plantuml.graphic.StringBounder $r14;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r15;
        double d0, d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r8 := @parameter0: net.sourceforge.plantuml.svek.DotStringFactory;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: java.util.Collection getLeafs()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r4;

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $z0 = virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.LeafType: boolean isLikeClass()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $r7 = new net.sourceforge.plantuml.svek.image.EntityImageClass;

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion()>();

        $r10 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r12 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        specialinvoke $r7.<net.sourceforge.plantuml.svek.image.EntityImageClass: void <init>(net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower)>($r9, r5, $r11, $r12);

        $r14 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $r15 = interfaceinvoke $r7.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r14);

        d0 = virtualinvoke $r15.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label3;

        d1 = d0;

     label3:
        goto label1;

     label4:
        return d1;
    }

    private java.util.Collection getUnpackagedEntities()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r2;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r3, $r8;
        java.util.Collection $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.cucadiagram.ILeaf r7;
        net.sourceforge.plantuml.cucadiagram.IGroup $r9, $r10;

        r2 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.dot.DotData: java.util.Collection getLeafs()>();

        r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r6;

        $r8 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.cucadiagram.IGroup getTopParent()>();

        $r10 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        if $r9 != $r10 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private void printGroups(net.sourceforge.plantuml.svek.DotStringFactory, net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r1, $r8, $r12;
        net.sourceforge.plantuml.cucadiagram.GroupHierarchy $r2;
        net.sourceforge.plantuml.cucadiagram.IGroup r3, r7;
        java.util.Collection r4;
        java.util.Iterator r5;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.svek.DotStringFactory r9;
        net.sourceforge.plantuml.cucadiagram.GroupType $r10, $r11;
        net.sourceforge.plantuml.ISkinParam r13;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory $r14, $r16;
        net.sourceforge.plantuml.cucadiagram.Ident $r15;
        net.sourceforge.plantuml.cucadiagram.ILeaf r17;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r9 := @parameter0: net.sourceforge.plantuml.svek.DotStringFactory;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.IGroup;

        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.cucadiagram.GroupHierarchy getGroupHierarchy()>();

        r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.cucadiagram.GroupHierarchy: java.util.Collection getChildrenGroups(net.sourceforge.plantuml.cucadiagram.IGroup)>(r3);

        r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.cucadiagram.IGroup) $r6;

        $z0 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.IGroup: boolean isRemoved()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r8 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $z1 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.dot.DotData: boolean isEmpty(net.sourceforge.plantuml.cucadiagram.IGroup)>(r7);

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.GroupType getGroupType()>();

        $r11 = <net.sourceforge.plantuml.cucadiagram.GroupType: net.sourceforge.plantuml.cucadiagram.GroupType PACKAGE>;

        if $r10 != $r11 goto label3;

        $r12 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        r13 = virtualinvoke $r12.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory entityFactory>;

        $r15 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Ident getIdent()>();

        virtualinvoke $r14.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: void thisIsGoingToBeALeaf(net.sourceforge.plantuml.cucadiagram.Ident)>($r15);

        $r16 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory entityFactory>;

        r17 = virtualinvoke $r16.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: net.sourceforge.plantuml.cucadiagram.ILeaf createLeafForEmptyGroup(net.sourceforge.plantuml.cucadiagram.IGroup,net.sourceforge.plantuml.ISkinParam)>(r7, r13);

        specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printEntity(net.sourceforge.plantuml.svek.DotStringFactory,net.sourceforge.plantuml.cucadiagram.ILeaf)>(r9, r17);

        goto label4;

     label3:
        specialinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printGroup(net.sourceforge.plantuml.svek.DotStringFactory,net.sourceforge.plantuml.cucadiagram.IGroup)>(r9, r7);

     label4:
        goto label1;

     label5:
        return;
    }

    private void printGroup(net.sourceforge.plantuml.svek.DotStringFactory, net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.cucadiagram.IGroup r0, r21;
        net.sourceforge.plantuml.cucadiagram.GroupType $r1, $r2;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r3;
        boolean $z0;
        net.sourceforge.plantuml.graphic.TextBlock r4, r5, r7, $r15;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r6;
        net.sourceforge.plantuml.graphic.StringBounder $r8, $r16;
        net.sourceforge.plantuml.awt.geom.Dimension2D r9, r17;
        double $d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0, $b1;
        net.sourceforge.plantuml.svek.DotStringFactory r10;
        net.sourceforge.plantuml.FontParam $r11;
        net.sourceforge.plantuml.style.Style $r12;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r13, $r19;
        net.sourceforge.plantuml.ISkinParam $r14;
        net.sourceforge.plantuml.graphic.USymbol r18;
        int i2, $i4, i5, i6, $i7, $i8;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory $r20;
        java.util.Collection $r22;

        r3 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r10 := @parameter0: net.sourceforge.plantuml.svek.DotStringFactory;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.IGroup;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.GroupType getGroupType()>();

        $r2 = <net.sourceforge.plantuml.cucadiagram.GroupType: net.sourceforge.plantuml.cucadiagram.GroupType CONCURRENT_STATE>;

        if $r1 != $r2 goto label1;

        return;

     label1:
        $z0 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: boolean mergeIntricated>;

        if $z0 == 0 goto label2;

        $r19 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory getEntityFactory()>();

        r21 = virtualinvoke $r20.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: net.sourceforge.plantuml.cucadiagram.IGroup isIntricated(net.sourceforge.plantuml.cucadiagram.IGroup)>(r0);

        if r21 == null goto label2;

        specialinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printGroup(net.sourceforge.plantuml.svek.DotStringFactory,net.sourceforge.plantuml.cucadiagram.IGroup)>(r10, r21);

        return;

     label2:
        i5 = 0;

        i6 = 0;

        r4 = specialinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.TextBlock getTitleBlock(net.sourceforge.plantuml.cucadiagram.IGroup)>(r0);

        r5 = specialinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.TextBlock getStereoBlock(net.sourceforge.plantuml.cucadiagram.IGroup)>(r0);

        $r6 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        r7 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r5, r4, $r6);

        $r8 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r9 = interfaceinvoke r7.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r8);

        $d0 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label9;

        $r11 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam STATE_ATTRIBUTE>;

        $r12 = specialinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.style.Style getStyleState(net.sourceforge.plantuml.FontParam)>($r11);

        $r13 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = staticinvoke <net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.TextBlock stateHeader(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ISkinParam)>(r0, $r12, $r14);

        $r16 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r17 = interfaceinvoke $r15.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r16);

        d1 = virtualinvoke r17.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d2 = virtualinvoke r17.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $d11 = 5.0;

        goto label4;

     label3:
        $d11 = 0.0;

     label4:
        d3 = $d11;

        r18 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if r18 != null goto label5;

        $i7 = 0;

        goto label6;

     label5:
        $i7 = virtualinvoke r18.<net.sourceforge.plantuml.graphic.USymbol: int suppHeightBecauseOfShape()>();

     label6:
        i2 = $i7;

        if r18 != null goto label7;

        $i8 = 0;

        goto label8;

     label7:
        $i8 = virtualinvoke r18.<net.sourceforge.plantuml.graphic.USymbol: int suppWidthBecauseOfShape()>();

     label8:
        $d4 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d4, d2);

        $i4 = (int) $d5;

        i5 = $i4 + $i8;

        $d6 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d7 = $d6 + d1;

        $d9 = $d7 + d3;

        $d8 = (double) i2;

        $d10 = $d9 + $d8;

        i6 = (int) $d10;

     label9:
        virtualinvoke r10.<net.sourceforge.plantuml.svek.DotStringFactory: void openCluster(int,int,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.cucadiagram.IGroup)>(i5, i6, r4, r5, r0);

        $r22 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: java.util.Collection getLeafsDirect()>();

        specialinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printEntities(net.sourceforge.plantuml.svek.DotStringFactory,java.util.Collection)>(r10, $r22);

        specialinvoke r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: void printGroups(net.sourceforge.plantuml.svek.DotStringFactory,net.sourceforge.plantuml.cucadiagram.IGroup)>(r10, r0);

        virtualinvoke r10.<net.sourceforge.plantuml.svek.DotStringFactory: void closeCluster()>();

        return;
    }

    public static net.sourceforge.plantuml.graphic.TextBlock stateHeader(net.sourceforge.plantuml.cucadiagram.IEntity, net.sourceforge.plantuml.style.Style, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.cucadiagram.IEntity r0;
        net.sourceforge.plantuml.cucadiagram.Bodier $r1;
        java.util.List r2;
        int $i0;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.graphic.FontConfiguration $r4, $r14, r17;
        net.sourceforge.plantuml.ISkinParam r5;
        java.util.Iterator r6;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r7;
        net.sourceforge.plantuml.graphic.TextBlock $r8;
        java.lang.Object $r9;
        java.lang.CharSequence r10;
        java.lang.String $r11, $r13;
        net.sourceforge.plantuml.cucadiagram.Display $r12, r18;
        net.sourceforge.plantuml.FontParam $r15;
        net.sourceforge.plantuml.graphic.TextBlockEmpty $r16;
        boolean $z0;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        r3 := @parameter1: net.sourceforge.plantuml.style.Style;

        r5 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.cucadiagram.Bodier: java.util.List getRawBody()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r16 = new net.sourceforge.plantuml.graphic.TextBlockEmpty;

        specialinvoke $r16.<net.sourceforge.plantuml.graphic.TextBlockEmpty: void <init>()>();

        return $r16;

     label1:
        if r3 != null goto label2;

        $r14 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r15 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam STATE_ATTRIBUTE>;

        specialinvoke $r14.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r5, $r15, null);

        r17 = $r14;

        goto label3;

     label2:
        $r4 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        specialinvoke $r4.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>(r5, r3);

        r17 = $r4;

     label3:
        r18 = null;

        r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.CharSequence) $r9;

        if r18 != null goto label5;

        $r13 = interfaceinvoke r10.<java.lang.CharSequence: java.lang.String toString()>();

        r18 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r13);

        goto label6;

     label5:
        $r11 = interfaceinvoke r10.<java.lang.CharSequence: java.lang.String toString()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r11);

        r18 = virtualinvoke r18.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display addAll(net.sourceforge.plantuml.cucadiagram.Display)>($r12);

     label6:
        goto label4;

     label7:
        $r7 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r8 = virtualinvoke r18.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r17, $r7, r5);

        return $r8;
    }

    private net.sourceforge.plantuml.style.Style getStyleState(net.sourceforge.plantuml.FontParam)
    {
        net.sourceforge.plantuml.FontParam r0;
        net.sourceforge.plantuml.style.SName $r1;
        net.sourceforge.plantuml.style.StyleSignature $r2;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r3;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r4;
        net.sourceforge.plantuml.ISkinParam $r5;
        net.sourceforge.plantuml.style.StyleBuilder $r6;
        net.sourceforge.plantuml.style.Style $r7;

        r3 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r0 := @parameter0: net.sourceforge.plantuml.FontParam;

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.style.StyleSignature getStyleDefinition(net.sourceforge.plantuml.style.SName)>($r1);

        $r4 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r7 = virtualinvoke $r2.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r6);

        return $r7;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getTitleBlock(net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.cucadiagram.IGroup r0;
        net.sourceforge.plantuml.cucadiagram.Display r1;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r2;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r3, $r5, $r8;
        net.sourceforge.plantuml.ISkinParam r4, $r6;
        boolean $z0;
        net.sourceforge.plantuml.graphic.TextBlock $r7, $r23;
        net.sourceforge.plantuml.UmlDiagramType $r9;
        net.sourceforge.plantuml.style.SName[] $r10;
        net.sourceforge.plantuml.style.SName $r11, $r12, $r13, r24;
        net.sourceforge.plantuml.style.StyleSignature $r14, $r16, $r18;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r15;
        net.sourceforge.plantuml.cucadiagram.Stereostyles $r17;
        net.sourceforge.plantuml.style.StyleBuilder $r19;
        net.sourceforge.plantuml.style.Style r20;
        net.sourceforge.plantuml.api.ThemeStyle $r21;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r22;
        net.sourceforge.plantuml.graphic.FontConfiguration r25;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r26;

        r2 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IGroup;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        if r1 != null goto label1;

        $r23 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        return $r23;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label2;

        $r8 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        r24 = virtualinvoke $r9.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        $r10 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r11 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r10[0] = $r11;

        $r12 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r10[1] = $r12;

        $r10[2] = r24;

        $r13 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName title>;

        $r10[3] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r10);

        $r15 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r16 = virtualinvoke $r14.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r15);

        $r17 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereostyles getStereostyles()>();

        $r18 = virtualinvoke $r16.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereostyles)>($r17);

        $r19 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r20 = virtualinvoke $r18.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r19);

        $r21 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r22 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r25 = virtualinvoke r20.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r21, $r22);

        goto label3;

     label2:
        r25 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfigurationForTitle(net.sourceforge.plantuml.ISkinParam)>(r4);

     label3:
        r26 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r5 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r25, r26, $r6);

        return $r7;
    }

    private net.sourceforge.plantuml.graphic.TextBlock addLegend(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.cucadiagram.DisplayPositioned)
    {
        net.sourceforge.plantuml.cucadiagram.DisplayPositioned r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r6, $r9;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.Display $r2;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r3;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r4;
        net.sourceforge.plantuml.ISkinParam $r5;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r7;
        net.sourceforge.plantuml.graphic.VerticalAlignment $r8;

        r3 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.DisplayPositioned;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.DisplayPositioned: boolean isNull()>();

        if $z0 == 0 goto label2;

     label1:
        return r1;

     label2:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.DisplayPositioned: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r4 = r3.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r6 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.EntityImageLegend: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.ISkinParam)>($r2, $r5);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.DisplayPositioned: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.DisplayPositioned: net.sourceforge.plantuml.graphic.VerticalAlignment getVerticalAlignment()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.svek.DecorateEntityImage: net.sourceforge.plantuml.graphic.TextBlock add(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.VerticalAlignment)>(r6, r1, $r7, $r8);

        return $r9;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getStereoBlock(net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.cucadiagram.IGroup r0;
        net.sourceforge.plantuml.cucadiagram.DisplayPositioned r1;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r4;

        r2 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IGroup;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.DisplayPositioned getLegend()>();

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.TextBlock getStereoBlockWithoutLegend(net.sourceforge.plantuml.cucadiagram.IGroup)>(r0);

        $r4 = specialinvoke r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.TextBlock addLegend(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.cucadiagram.DisplayPositioned)>($r3, r1);

        return $r4;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getStereoBlockWithoutLegend(net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.cucadiagram.IGroup r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;
        net.sourceforge.plantuml.svek.GeneralImageBuilder r2;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r3, $r6, $r11, $r15, $r17;
        net.sourceforge.plantuml.ISkinParam $r4, $r7, $r16, $r19;
        net.sourceforge.plantuml.graphic.TextBlock r5, $r20, $r21, $r22, $r23;
        net.sourceforge.plantuml.Guillemet $r8;
        java.util.List r9;
        net.sourceforge.plantuml.cucadiagram.EntityPortion $r10;
        boolean z0;
        net.sourceforge.plantuml.FontParam r12;
        net.sourceforge.plantuml.cucadiagram.Display $r13;
        net.sourceforge.plantuml.graphic.FontConfiguration $r14;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r18;

        r2 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IGroup;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if r1 != null goto label1;

        $r23 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        return $r23;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r5 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.graphic.TextBlock getSprite(net.sourceforge.plantuml.SpriteContainer)>($r4);

        if r5 == null goto label2;

        return r5;

     label2:
        $r6 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.Guillemet guillemet()>();

        r9 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.util.List getLabels(net.sourceforge.plantuml.Guillemet)>($r8);

        if r9 != null goto label3;

        $r22 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        return $r22;

     label3:
        $r11 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r10 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion STEREOTYPE>;

        z0 = virtualinvoke $r11.<net.sourceforge.plantuml.cucadiagram.dot.DotData: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r10, r0);

        if z0 != 0 goto label4;

        $r21 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        return $r21;

     label4:
        r12 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam PACKAGE_STEREOTYPE>;

        $r13 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.util.Collection)>(r9);

        $r14 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r15 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        specialinvoke $r14.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r16, r12, r1);

        $r18 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r17 = r2.<net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r19 = virtualinvoke $r17.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r14, $r18, $r19);

        return $r20;
    }

    public java.lang.String getWarningOrError(int)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder r0;
        java.util.Map $r1, $r4;
        java.lang.StringBuilder $r2, $r11, $r14, $r15;
        java.util.Set $r5;
        java.util.Iterator r6;
        boolean $z0;
        int $i0, i1;
        java.lang.Object $r7, $r9, $r12;
        java.util.Map$Entry r8;
        java.lang.Double $r10;
        double $d0, $d1;
        byte $b2;
        java.lang.String $r13, $r16, $r19;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder;

        i1 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: java.util.Map maxX>;

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder: java.util.Map maxX>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.Double) $r9;

        $d0 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $d1 = (double) i1;

        $b2 = $d0 cmpl $d1;

        if $b2 <= 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is overpassing the width limit.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label3:
        goto label2;

     label4:
        $i0 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label5;

        $r19 = "";

        goto label6;

     label5:
        $r19 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        return $r19;
    }
}
