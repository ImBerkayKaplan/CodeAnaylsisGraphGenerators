public final class h.ST_boxf extends smetana.core.UnsupportedStarStruct
{
    public final h.ST_pointf LL;
    public final h.ST_pointf UR;

    public void <init>()
    {
        h.ST_boxf r0;
        h.ST_pointf $r1, $r2;

        r0 := @this: h.ST_boxf;

        specialinvoke r0.<smetana.core.UnsupportedStarStruct: void <init>()>();

        $r1 = new h.ST_pointf;

        specialinvoke $r1.<h.ST_pointf: void <init>()>();

        r0.<h.ST_boxf: h.ST_pointf LL> = $r1;

        $r2 = new h.ST_pointf;

        specialinvoke $r2.<h.ST_pointf: void <init>()>();

        r0.<h.ST_boxf: h.ST_pointf UR> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        h.ST_boxf r2;
        h.ST_pointf $r3, $r6;
        java.lang.String $r8;

        r2 := @this: h.ST_boxf;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LL=");

        $r3 = r2.<h.ST_boxf: h.ST_pointf LL>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UR=");

        $r6 = r2.<h.ST_boxf: h.ST_pointf UR>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static h.ST_boxf[] malloc(int)
    {
        int i0, i1;
        h.ST_boxf[] r0;
        h.ST_boxf $r1;

        i0 := @parameter0: int;

        r0 = newarray (h.ST_boxf)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = new h.ST_boxf;

        specialinvoke $r1.<h.ST_boxf: void <init>()>();

        r0[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public h.ST_boxf copy()
    {
        h.ST_boxf $r0, r2;
        h.ST_pointf $r3, $r4, $r5, $r6;

        r2 := @this: h.ST_boxf;

        $r0 = new h.ST_boxf;

        specialinvoke $r0.<h.ST_boxf: void <init>()>();

        $r4 = $r0.<h.ST_boxf: h.ST_pointf LL>;

        $r3 = r2.<h.ST_boxf: h.ST_pointf LL>;

        virtualinvoke $r4.<h.ST_pointf: void ___(smetana.core.__struct__)>($r3);

        $r6 = $r0.<h.ST_boxf: h.ST_pointf UR>;

        $r5 = r2.<h.ST_boxf: h.ST_pointf UR>;

        virtualinvoke $r6.<h.ST_pointf: void ___(smetana.core.__struct__)>($r5);

        return $r0;
    }

    public void ___(smetana.core.__struct__)
    {
        smetana.core.__struct__ r0;
        h.ST_boxf r1, r2;
        h.ST_pointf $r3, $r4, $r5, $r6;

        r2 := @this: h.ST_boxf;

        r0 := @parameter0: smetana.core.__struct__;

        r1 = (h.ST_boxf) r0;

        $r4 = r2.<h.ST_boxf: h.ST_pointf LL>;

        $r3 = r1.<h.ST_boxf: h.ST_pointf LL>;

        virtualinvoke $r4.<h.ST_pointf: void ___(smetana.core.__struct__)>($r3);

        $r6 = r2.<h.ST_boxf: h.ST_pointf UR>;

        $r5 = r1.<h.ST_boxf: h.ST_pointf UR>;

        virtualinvoke $r6.<h.ST_pointf: void ___(smetana.core.__struct__)>($r5);

        return;
    }

    public volatile smetana.core.__struct__ copy()
    {
        h.ST_boxf r0, $r1;

        r0 := @this: h.ST_boxf;

        $r1 = virtualinvoke r0.<h.ST_boxf: h.ST_boxf copy()>();

        return $r1;
    }
}
