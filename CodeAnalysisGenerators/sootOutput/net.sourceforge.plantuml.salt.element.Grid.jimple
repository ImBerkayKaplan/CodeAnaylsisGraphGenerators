public class net.sourceforge.plantuml.salt.element.Grid extends java.lang.Object
{
    private final double[] rowsStart;
    private final double[] colsStart;
    private final net.sourceforge.plantuml.salt.element.TableStrategy strategy;
    private final net.sourceforge.plantuml.graphic.TextBlock title;
    private final java.util.Set horizontals;
    private final java.util.Set verticals;

    public void <init>(double[], double[], net.sourceforge.plantuml.salt.element.TableStrategy, net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.salt.element.Grid r0;
        java.util.HashSet $r1, $r2;
        net.sourceforge.plantuml.graphic.TextBlock r3;
        double[] r4, r5;
        net.sourceforge.plantuml.salt.element.TableStrategy r6, $r7, $r8, $r9;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid;

        r4 := @parameter0: double[];

        r5 := @parameter1: double[];

        r6 := @parameter2: net.sourceforge.plantuml.salt.element.TableStrategy;

        r3 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set horizontals> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set verticals> = $r2;

        r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.graphic.TextBlock title> = r3;

        r0.<net.sourceforge.plantuml.salt.element.Grid: double[] rowsStart> = r4;

        r0.<net.sourceforge.plantuml.salt.element.Grid: double[] colsStart> = r5;

        r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy> = r6;

        $r7 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE>;

        if r6 == $r7 goto label1;

        $r8 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE_WITH_TITLE>;

        if r6 == $r8 goto label1;

        $r9 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_ALL>;

        if r6 != $r9 goto label2;

     label1:
        specialinvoke r0.<net.sourceforge.plantuml.salt.element.Grid: void addOutside()>();

     label2:
        return;
    }

    private void addOutside()
    {
        net.sourceforge.plantuml.salt.element.Grid r0;
        double[] $r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        net.sourceforge.plantuml.salt.element.Segment $r3, $r5, $r7, $r9;
        java.util.Set $r4, $r6, $r8, $r10;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] rowsStart>;

        i0 = lengthof $r1;

        $r2 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] colsStart>;

        i1 = lengthof $r2;

        i6 = 0;

     label1:
        $i2 = i1 - 1;

        if i6 >= $i2 goto label2;

        $r8 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set horizontals>;

        $r7 = new net.sourceforge.plantuml.salt.element.Segment;

        specialinvoke $r7.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>(0, i6);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r10 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set horizontals>;

        $r9 = new net.sourceforge.plantuml.salt.element.Segment;

        $i5 = i0 - 1;

        specialinvoke $r9.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>($i5, i6);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

        i6 = i6 + 1;

        goto label1;

     label2:
        i7 = 0;

     label3:
        $i3 = i0 - 1;

        if i7 >= $i3 goto label4;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set verticals>;

        $r3 = new net.sourceforge.plantuml.salt.element.Segment;

        specialinvoke $r3.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>(i7, 0);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r6 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set verticals>;

        $r5 = new net.sourceforge.plantuml.salt.element.Segment;

        $i4 = i1 - 1;

        specialinvoke $r5.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>(i7, $i4);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        i7 = i7 + 1;

        goto label3;

     label4:
        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.salt.element.Grid r0;
        java.util.Set $r1, $r2;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.UGraphic r3, $r9, $r10, $r19, $r27, r34;
        net.sourceforge.plantuml.graphic.TextBlock $r4, $r12;
        net.sourceforge.plantuml.graphic.StringBounder $r5;
        double $d0, $d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, d21;
        byte $b0, $b1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6, $r16, $r24;
        net.sourceforge.plantuml.ugraphic.color.HColor r7;
        net.sourceforge.plantuml.ugraphic.UBackground $r8;
        net.sourceforge.plantuml.ugraphic.URectangle $r11;
        java.lang.Object $r13, $r21;
        int $i2, $i3, i4, i5, i6, i7;
        double[] $r14, $r15, $r17, $r18, $r22, $r23, $r25, $r26;
        net.sourceforge.plantuml.ugraphic.ULine $r20, $r28;
        java.util.Iterator r29, r31;
        net.sourceforge.plantuml.salt.element.Segment r30, r32;
        net.sourceforge.plantuml.awt.geom.Dimension2D r33;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        r7 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set horizontals>;

        r29 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r21 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (net.sourceforge.plantuml.salt.element.Segment) $r21;

        i4 = virtualinvoke r30.<net.sourceforge.plantuml.salt.element.Segment: int getRow()>();

        i5 = virtualinvoke r30.<net.sourceforge.plantuml.salt.element.Segment: int getCol()>();

        $r22 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] colsStart>;

        $i3 = i5 + 1;

        $d15 = $r22[$i3];

        $r23 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] colsStart>;

        $d14 = $r23[i5];

        d20 = $d15 - $d14;

        $r24 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $r25 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] colsStart>;

        $d16 = $r25[i5];

        $d19 = d2 + $d16;

        $r26 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] rowsStart>;

        $d17 = $r26[i4];

        $d18 = d3 + $d17;

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d19, $d18);

        $r27 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        $r28 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(d20);

        interfaceinvoke $r27.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r28);

        goto label1;

     label2:
        $r2 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set verticals>;

        r31 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (net.sourceforge.plantuml.salt.element.Segment) $r13;

        i6 = virtualinvoke r32.<net.sourceforge.plantuml.salt.element.Segment: int getRow()>();

        i7 = virtualinvoke r32.<net.sourceforge.plantuml.salt.element.Segment: int getCol()>();

        $r14 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] rowsStart>;

        $i2 = i6 + 1;

        $d9 = $r14[$i2];

        $r15 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] rowsStart>;

        $d8 = $r15[i6];

        d21 = $d9 - $d8;

        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $r17 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] colsStart>;

        $d10 = $r17[i7];

        $d13 = d2 + $d10;

        $r18 = r0.<net.sourceforge.plantuml.salt.element.Grid: double[] rowsStart>;

        $d11 = $r18[i6];

        $d12 = d3 + $d11;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d13, $d12);

        $r19 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        $r20 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>(d21);

        interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r20);

        goto label3;

     label4:
        $r4 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r33 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $d0 = virtualinvoke r33.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label5;

        $d1 = virtualinvoke r33.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 <= 0 goto label5;

        $r6 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = d2 + 6.0;

        $d5 = virtualinvoke r33.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = $d5 * 0.0;

        $d7 = d3 - $d6;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d4, $d7);

        r34 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r9 = interfaceinvoke r34.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r7);

        $r11 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r33);

        interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r11);

        $r12 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.graphic.TextBlock title>;

        interfaceinvoke $r12.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r34);

     label5:
        return;
    }

    public void addCell(net.sourceforge.plantuml.salt.Cell)
    {
        net.sourceforge.plantuml.salt.element.Grid r0;
        net.sourceforge.plantuml.salt.element.TableStrategy $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r16, $r17, $r22, $r23;
        net.sourceforge.plantuml.salt.Cell r9;
        net.sourceforge.plantuml.salt.element.Segment $r12, $r14, $r18, $r20;
        java.util.Set $r13, $r15, $r19, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i8, $i9;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid;

        r9 := @parameter0: net.sourceforge.plantuml.salt.Cell;

        $r2 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r1 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_NONE>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r3 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE>;

        if $r4 == $r3 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r5 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE_WITH_TITLE>;

        if $r6 != $r5 goto label2;

     label1:
        return;

     label2:
        $r8 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r7 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_HORIZONTAL>;

        if $r8 == $r7 goto label3;

        $r23 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r22 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_ALL>;

        if $r23 != $r22 goto label5;

     label3:
        i6 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMinCol()>();

     label4:
        $i7 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMaxCol()>();

        if i6 > $i7 goto label5;

        $r19 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set horizontals>;

        $r18 = new net.sourceforge.plantuml.salt.element.Segment;

        $i3 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        specialinvoke $r18.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>($i3, i6);

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r18);

        $r21 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set horizontals>;

        $r20 = new net.sourceforge.plantuml.salt.element.Segment;

        $i4 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMaxRow()>();

        $i5 = $i4 + 1;

        specialinvoke $r20.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>($i5, i6);

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r20);

        i6 = i6 + 1;

        goto label4;

     label5:
        $r11 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r10 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_VERTICAL>;

        if $r11 == $r10 goto label6;

        $r17 = r0.<net.sourceforge.plantuml.salt.element.Grid: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r16 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_ALL>;

        if $r17 != $r16 goto label8;

     label6:
        i8 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

     label7:
        $i9 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMaxRow()>();

        if i8 > $i9 goto label8;

        $r13 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set verticals>;

        $r12 = new net.sourceforge.plantuml.salt.element.Segment;

        $i0 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMinCol()>();

        specialinvoke $r12.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>(i8, $i0);

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r15 = r0.<net.sourceforge.plantuml.salt.element.Grid: java.util.Set verticals>;

        $r14 = new net.sourceforge.plantuml.salt.element.Segment;

        $i1 = virtualinvoke r9.<net.sourceforge.plantuml.salt.Cell: int getMaxCol()>();

        $i2 = $i1 + 1;

        specialinvoke $r14.<net.sourceforge.plantuml.salt.element.Segment: void <init>(int,int)>(i8, $i2);

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r14);

        i8 = i8 + 1;

        goto label7;

     label8:
        return;
    }
}
