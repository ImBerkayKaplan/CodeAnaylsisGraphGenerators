public class net.sourceforge.plantuml.gitlog.MagicBox extends java.lang.Object
{
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.gitlog.GNode node;
    private final net.sourceforge.plantuml.ugraphic.color.HColor fontColor;

    public void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.gitlog.GNode)
    {
        net.sourceforge.plantuml.gitlog.MagicBox r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.gitlog.GNode r2;
        net.sourceforge.plantuml.style.SName[] $r3;
        net.sourceforge.plantuml.style.SName $r4, $r5, $r6;
        net.sourceforge.plantuml.style.StyleSignature $r7;
        net.sourceforge.plantuml.style.StyleBuilder $r8;
        net.sourceforge.plantuml.style.Style r9;
        net.sourceforge.plantuml.style.PName $r10;
        net.sourceforge.plantuml.style.Value $r11;
        net.sourceforge.plantuml.api.ThemeStyle $r12;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r13;
        net.sourceforge.plantuml.ugraphic.color.HColor $r14;

        r0 := @this: net.sourceforge.plantuml.gitlog.MagicBox;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r2 := @parameter1: net.sourceforge.plantuml.gitlog.GNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ISkinParam skinParam> = r1;

        r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.gitlog.GNode node> = r2;

        $r3 = newarray (net.sourceforge.plantuml.style.SName)[3];

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName gitDiagram>;

        $r3[2] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r3);

        $r8 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r9 = virtualinvoke $r7.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r8);

        $r10 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName FontColor>;

        $r11 = virtualinvoke r9.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r10);

        $r12 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r13 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r14 = interfaceinvoke $r11.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r12, $r13);

        r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ugraphic.color.HColor fontColor> = $r14;

        return;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getSmallBlock()
    {
        net.sourceforge.plantuml.graphic.FontConfiguration $r0;
        net.sourceforge.plantuml.ugraphic.UFont $r1, $r2;
        net.sourceforge.plantuml.gitlog.MagicBox r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4, $r5;
        net.sourceforge.plantuml.gitlog.GNode $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.ISkinParam $r9;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r10;
        net.sourceforge.plantuml.graphic.TextBlock $r11;

        r3 := @this: net.sourceforge.plantuml.gitlog.MagicBox;

        $r0 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont monospaced(int)>(15);

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont bold()>();

        $r5 = r3.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ugraphic.color.HColor fontColor>;

        $r4 = r3.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ugraphic.color.HColor fontColor>;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,boolean)>($r2, $r5, $r4, 0);

        $r7 = r3.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.gitlog.GNode node>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.gitlog.GNode: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r10 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r9 = r3.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r11 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r0, $r10, $r9);

        return $r11;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getCommentBlock()
    {
        net.sourceforge.plantuml.gitlog.MagicBox r0;
        net.sourceforge.plantuml.gitlog.GNode $r1, $r4, $r11;
        java.lang.String $r2, $r12;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r16;
        boolean $z0;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5;
        net.sourceforge.plantuml.ugraphic.UFont $r6;
        net.sourceforge.plantuml.ugraphic.color.HColor $r7, $r8;
        java.lang.CharSequence[] $r10;
        net.sourceforge.plantuml.cucadiagram.Display $r13;
        net.sourceforge.plantuml.ISkinParam $r14;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r15;

        r0 := @this: net.sourceforge.plantuml.gitlog.MagicBox;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.gitlog.GNode node>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.gitlog.GNode: java.lang.String getComment()>();

        if $r2 == null goto label1;

        $r4 = r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.gitlog.GNode node>;

        $z0 = virtualinvoke $r4.<net.sourceforge.plantuml.gitlog.GNode: boolean isTop()>();

        if $z0 == 0 goto label1;

        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont sansSerif(int)>(13);

        $r8 = r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ugraphic.color.HColor fontColor>;

        $r7 = r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ugraphic.color.HColor fontColor>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,boolean)>($r6, $r8, $r7, 0);

        $r10 = newarray (java.lang.CharSequence)[1];

        $r11 = r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.gitlog.GNode node>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.gitlog.GNode: java.lang.String getComment()>();

        $r10[0] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r10);

        $r15 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r14 = r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r16 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r5, $r15, $r14);

        return $r16;

     label1:
        $r3 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        return $r3;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getBigDim(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.gitlog.MagicBox r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r5, r6, $r7;

        r0 := @this: net.sourceforge.plantuml.gitlog.MagicBox;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.graphic.TextBlock getCommentBlock()>();

        r3 = interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.graphic.TextBlock getSmallBlock()>();

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        r6 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r3, r5);

        $r7 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r6, 8.0, 2.0);

        return $r7;
    }

    public void drawBorder(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.gitlog.MagicBox r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2;
        net.sourceforge.plantuml.ugraphic.UGraphic r3, $r10, $r12, $r18;
        net.sourceforge.plantuml.graphic.StringBounder $r4, $r13, $r15;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r5, r7, $r14, $r16;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, d9, $d10, $d11, $d12;
        net.sourceforge.plantuml.ugraphic.URectangle $r6, r8;
        net.sourceforge.plantuml.ugraphic.UStroke $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11, $r17;

        r0 := @this: net.sourceforge.plantuml.gitlog.MagicBox;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r7 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.graphic.TextBlock getCommentBlock()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.graphic.TextBlock getSmallBlock()>();

        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r5 = interfaceinvoke r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        d0 = virtualinvoke $r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r6 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 - d0;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d1, $d3);

        r8 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>(8.0);

        $r9 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        $r10 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r11 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d0);

        $r12 = interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        interfaceinvoke $r12.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r8);

        interfaceinvoke r1.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r3);

        $d4 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.URectangle: double getWidth()>();

        $r13 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r14 = interfaceinvoke r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r13);

        $d5 = virtualinvoke $r14.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d6 = $d4 - $d5;

        $d7 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.URectangle: double getHeight()>();

        $r15 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r16 = interfaceinvoke r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r15);

        $d8 = virtualinvoke $r16.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d9 = $d7 - $d8;

        $r17 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d12 = d6 / 2.0;

        $d10 = d9 / 2.0;

        $d11 = d0 + $d10;

        specialinvoke $r17.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d12, $d11);

        $r18 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        interfaceinvoke r2.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r18);

        return;
    }
}
