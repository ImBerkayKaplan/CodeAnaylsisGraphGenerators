public class net.sourceforge.plantuml.NewpagedDiagram extends net.sourceforge.plantuml.AbstractPSystem
{
    private final java.util.List diagrams;

    public void <init>(net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.AbstractPSystem, net.sourceforge.plantuml.AbstractPSystem)
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.util.ArrayList $r2;
        net.sourceforge.plantuml.AbstractPSystem r3, r4;
        boolean $z0, $z1;
        java.util.List $r5, $r6;
        java.lang.IllegalArgumentException $r7, $r8;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r3 := @parameter1: net.sourceforge.plantuml.AbstractPSystem;

        r4 := @parameter2: net.sourceforge.plantuml.AbstractPSystem;

        specialinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams> = $r2;

        $z0 = r3 instanceof net.sourceforge.plantuml.NewpagedDiagram;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label1:
        $z1 = r4 instanceof net.sourceforge.plantuml.NewpagedDiagram;

        if $z1 == 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r6 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r4);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9;
        net.sourceforge.plantuml.NewpagedDiagram r1;
        java.lang.String $r2, $r10;
        java.util.List $r5, $r8;
        int $i0;

        r1 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SIZE=");

        $r5 = r1.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r1.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public net.sourceforge.plantuml.core.Diagram getLastDiagram()
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.core.Diagram $r4;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        $r2 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $r1 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (net.sourceforge.plantuml.core.Diagram) $r3;

        return $r4;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult executeCommand(net.sourceforge.plantuml.command.Command, net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.NewpagedDiagram r0, r9;
        java.util.List $r1, $r3, $r10, $r12, $r14, $r15;
        int i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.command.Command r2;
        java.lang.Object $r4, $r11, $r13, $r16;
        net.sourceforge.plantuml.command.BlocLines r5;
        net.sourceforge.plantuml.core.Diagram $r6, $r17;
        net.sourceforge.plantuml.AbstractPSystem $r7, $r8;
        boolean $z0;
        net.sourceforge.plantuml.command.CommandExecutionResult $r18, $r22, r23;
        java.lang.IllegalStateException $r19, $r20;
        net.sourceforge.plantuml.ugraphic.color.NoSuchColorException $r21;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        r2 := @parameter0: net.sourceforge.plantuml.command.Command;

        r5 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r1 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        $r3 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $i1 = i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (net.sourceforge.plantuml.core.Diagram) $r4;

        r23 = interfaceinvoke r2.<net.sourceforge.plantuml.command.Command: net.sourceforge.plantuml.command.CommandExecutionResult execute(net.sourceforge.plantuml.core.Diagram,net.sourceforge.plantuml.command.BlocLines)>($r6, r5);

        $r7 = virtualinvoke r23.<net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.AbstractPSystem getNewDiagram()>();

        $z0 = $r7 instanceof net.sourceforge.plantuml.NewpagedDiagram;

        if $z0 == 0 goto label5;

        $r8 = virtualinvoke r23.<net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.AbstractPSystem getNewDiagram()>();

        r9 = (net.sourceforge.plantuml.NewpagedDiagram) $r8;

        $i2 = specialinvoke r9.<net.sourceforge.plantuml.NewpagedDiagram: int size()>();

        if $i2 == 2 goto label2;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>()>();

        throw $r20;

     label2:
        $r10 = r9.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $i3 = i0 - 1;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        if $r11 == $r13 goto label3;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>()>();

        throw $r19;

     label3:
        $r15 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $r14 = r9.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $r16 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(1);

        $r17 = (net.sourceforge.plantuml.core.Diagram) $r16;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = virtualinvoke r23.<net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult withDiagram(net.sourceforge.plantuml.AbstractPSystem)>(r0);

     label4:
        return $r18;

     label5:
        return r23;

     label6:
        $r21 := @caughtexception;

        $r22 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult badColor()>();

        return $r22;

        catch net.sourceforge.plantuml.ugraphic.color.NoSuchColorException from label1 to label4 with label6;
    }

    private int size()
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        $r1 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    protected final net.sourceforge.plantuml.core.ImageData exportDiagramNow(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.io.OutputStream r3;
        net.sourceforge.plantuml.FileFormatOption r4;
        net.sourceforge.plantuml.core.Diagram $r5;
        net.sourceforge.plantuml.core.ImageData $r6;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        r3 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r4 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        $r1 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (net.sourceforge.plantuml.core.Diagram) $r2;

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.ImageData exportDiagram(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>(r3, 0, r4);

        return $r6;
    }

    public int getNbImages()
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.core.Diagram r4;
        int $i0, i1;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        i1 = 0;

        $r1 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.core.Diagram) $r3;

        $i0 = interfaceinvoke r4.<net.sourceforge.plantuml.core.Diagram: int getNbImages()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.NewpagedDiagram r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        net.sourceforge.plantuml.core.DiagramDescription $r5, $r9;
        java.lang.String $r6;
        java.lang.Object $r7;
        net.sourceforge.plantuml.core.Diagram r8;
        int $i0;

        r2 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.core.Diagram) $r7;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label2:
        $r9 = interfaceinvoke r8.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        goto label1;

     label3:
        $r5 = new net.sourceforge.plantuml.core.DiagramDescription;

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>($r6);

        return $r5;
    }

    public java.lang.String getWarningOrError()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.NewpagedDiagram r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r5, $r8, $r9;
        java.lang.Object $r6;
        net.sourceforge.plantuml.core.Diagram r7;

        r2 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.core.Diagram) $r6;

        $i1 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label2:
        $r8 = interfaceinvoke r7.<net.sourceforge.plantuml.core.Diagram: java.lang.String getWarningOrError()>();

        if $r8 == null goto label3;

        $r9 = interfaceinvoke r7.<net.sourceforge.plantuml.core.Diagram: java.lang.String getWarningOrError()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label3:
        goto label1;

     label4:
        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label5;

        return null;

     label5:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void makeDiagramReady()
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.core.Diagram r4;
        net.sourceforge.plantuml.AbstractPSystem $r5;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        specialinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: void makeDiagramReady()>();

        $r1 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.core.Diagram) $r3;

        $r5 = (net.sourceforge.plantuml.AbstractPSystem) r4;

        virtualinvoke $r5.<net.sourceforge.plantuml.AbstractPSystem: void makeDiagramReady()>();

        goto label1;

     label2:
        return;
    }

    public java.lang.String checkFinalError()
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.String $r3, r7;
        java.lang.Object $r4;
        net.sourceforge.plantuml.core.Diagram r5;
        net.sourceforge.plantuml.AbstractPSystem $r6;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List getDiagrams()>();

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.core.Diagram) $r4;

        $r6 = (net.sourceforge.plantuml.AbstractPSystem) r5;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.AbstractPSystem: java.lang.String checkFinalError()>();

        if r7 == null goto label2;

        return r7;

     label2:
        goto label1;

     label3:
        $r3 = specialinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: java.lang.String checkFinalError()>();

        return $r3;
    }

    public final java.util.List getDiagrams()
    {
        net.sourceforge.plantuml.NewpagedDiagram r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.NewpagedDiagram;

        $r1 = r0.<net.sourceforge.plantuml.NewpagedDiagram: java.util.List diagrams>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }
}
