class net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer extends java.lang.Object
{
    private net.sourceforge.plantuml.skin.ComponentType defaultLineType;
    private final net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet;
    private final boolean showTail;
    private double freeX;
    private net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2;
    private net.sourceforge.plantuml.sequencediagram.graphic.Frontier lastFreeY2;
    private final double autonewpage;
    private net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet;
    private final net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack;

    public void <init>(net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, boolean, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2;
        net.sourceforge.plantuml.skin.rose.Rose r3;
        net.sourceforge.plantuml.ISkinParam r4;
        boolean z0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r3 := @parameter0: net.sourceforge.plantuml.skin.rose.Rose;

        r4 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        z0 := @parameter2: boolean;

        d0 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX> = 0.0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = null;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier lastFreeY2> = null;

        $r1 = new net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack> = $r1;

        $r2 = new net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void <init>(net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam)>(r3, r4);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet> = $r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: boolean showTail> = z0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double autonewpage> = d0;

        return;
    }

    private boolean useContinueLineBecauseOfDelay()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r1, $r6;
        net.sourceforge.plantuml.ISkinParam $r2;
        java.lang.String r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r7;
        java.util.Iterator r8;
        java.lang.Object $r9;
        net.sourceforge.plantuml.sequencediagram.Event r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("lifelineStrategy");

        $r4 = "nosolid";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = "solid";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Collection getAllEvents()>();

        r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.sequencediagram.Event) $r9;

        $z3 = r10 instanceof net.sourceforge.plantuml.sequencediagram.Delay;

        if $z3 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getFullParticipantRange()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2;
        java.util.Set $r3;
        int $i0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Set getAllParticipants()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange: void <init>(int,int)>(0, $i0);

        return $r0;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getParticipantRange(net.sourceforge.plantuml.sequencediagram.Event)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange $r1;
        net.sourceforge.plantuml.sequencediagram.Event r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getFullParticipantRange()>();

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet createDrawableSet(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r1, $r9, $r11, $r25, $r29, $r30, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z16, $z17;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2, $r6, $r7, $r10, $r13, $r16, $r20, $r24, $r27, $r48;
        java.util.Set $r3, $r8, $r14;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, $d9, $d10, $d11, $d12, $d13;
        int $i0, $i4, i5;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange $r12, $r26, $r52, r68;
        java.util.ArrayList $r15, $r19;
        java.util.Collection $r17, $r21;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r18, $r22;
        net.sourceforge.plantuml.Dimension2DDouble $r23;
        java.lang.Object $r28, $r45, $r47, $r54;
        byte $b1, $b2, $b3;
        java.lang.IllegalStateException $r31, $r56;
        net.sourceforge.plantuml.sequencediagram.Reference $r32;
        net.sourceforge.plantuml.sequencediagram.Delay $r33;
        net.sourceforge.plantuml.sequencediagram.HSpace $r34;
        net.sourceforge.plantuml.sequencediagram.Divider $r35;
        net.sourceforge.plantuml.sequencediagram.Newpage $r36, $r44;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r37;
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf $r38;
        net.sourceforge.plantuml.sequencediagram.LifeEvent $r39;
        net.sourceforge.plantuml.sequencediagram.Notes $r40;
        net.sourceforge.plantuml.sequencediagram.Note $r41;
        net.sourceforge.plantuml.sequencediagram.Message $r42;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r43;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r46;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r49;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation $r50;
        net.sourceforge.plantuml.graphic.SymbolContext $r53;
        net.sourceforge.plantuml.skin.ComponentType $r57;
        java.util.Iterator r58, r60, r64, r66;
        net.sourceforge.plantuml.sequencediagram.Participant r59, r61;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r62, r65;
        net.sourceforge.plantuml.sequencediagram.Event r67;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        if $r1 == null goto label01;

        $r56 = new java.lang.IllegalStateException;

        specialinvoke $r56.<java.lang.IllegalStateException: void <init>()>();

        throw $r56;

     label01:
        $z0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: boolean useContinueLineBecauseOfDelay()>();

        if $z0 == 0 goto label02;

        $r57 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType CONTINUE_LINE>;

        goto label03;

     label02:
        $r57 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType PARTICIPANT_LINE>;

     label03:
        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.skin.ComponentType defaultLineType> = $r57;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Set getAllParticipants()>();

        r58 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z16 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label05;

        $r54 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (net.sourceforge.plantuml.sequencediagram.Participant) $r54;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareParticipant(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Participant)>(r5, r59);

        goto label04;

     label05:
        $r4 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $d0 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Set getAllParticipants()>();

        $i0 = interfaceinvoke $r8.<java.util.Set: int size()>();

        specialinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: void <init>(double,int)>($d0, $i0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r4;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier lastFreeY2> = $r9;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r12 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getFullParticipantRange()>();

        $d1 = interfaceinvoke $r11.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($r12);

        virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void setTopStartingY(double)>($d1);

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Set getAllParticipants()>();

        r60 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r47 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (net.sourceforge.plantuml.sequencediagram.Participant) $r47;

        $r48 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        r62 = virtualinvoke $r48.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>(r61);

        i5 = 0;

     label07:
        $i4 = virtualinvoke r61.<net.sourceforge.plantuml.sequencediagram.Participant: int getInitialLife()>();

        if i5 >= $i4 goto label08;

        $r49 = virtualinvoke r62.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine getLifeLine()>();

        $r50 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation LARGER>;

        $r51 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r52 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getFullParticipantRange()>();

        $d13 = interfaceinvoke $r51.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($r52);

        $r53 = virtualinvoke r61.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.graphic.SymbolContext getLiveSpecificBackColors()>();

        virtualinvoke $r49.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void addSegmentVariation(net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation,double,net.sourceforge.plantuml.graphic.SymbolContext)>($r50, $d13, $r53);

        i5 = i5 + 1;

        goto label07;

     label08:
        goto label06;

     label09:
        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Collection getAllLivingParticipantBox()>();

        r64 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r45 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r45;

        $r46 = virtualinvoke r65.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r46);

        goto label10;

     label11:
        $r18 = new net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX>;

        specialinvoke $r18.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void <init>(java.util.Collection,double)>($r15, $d2);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet> = $r18;

        $r19 = new java.util.ArrayList;

        $r20 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Collection getAllEvents()>();

        specialinvoke $r19.<java.util.ArrayList: void <init>(java.util.Collection)>($r21);

        r66 = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label27;

        $r28 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        r67 = (net.sourceforge.plantuml.sequencediagram.Event) $r28;

        r68 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getParticipantRange(net.sourceforge.plantuml.sequencediagram.Event)>(r67);

        $r29 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d6 = interfaceinvoke $r29.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r68);

        $r30 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier lastFreeY2>;

        $d7 = interfaceinvoke $r30.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r68);

        d8 = $d6 - $d7;

        $d9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double autonewpage>;

        $b1 = $d9 cmpl 0.0;

        if $b1 <= 0 goto label13;

        $b2 = d8 cmpl 0.0;

        if $b2 <= 0 goto label13;

        $d10 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double getTotalHeight(double,net.sourceforge.plantuml.graphic.StringBounder)>(0.0, r5);

        $d12 = d8 + $d10;

        $d11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double autonewpage>;

        $b3 = $d12 cmpl $d11;

        if $b3 <= 0 goto label13;

        $r44 = new net.sourceforge.plantuml.sequencediagram.Newpage;

        specialinvoke $r44.<net.sourceforge.plantuml.sequencediagram.Newpage: void <init>(net.sourceforge.plantuml.cucadiagram.Display)>(null);

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareNewpageSpecial(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Newpage,net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r44, r67, r68);

     label13:
        $z17 = r67 instanceof net.sourceforge.plantuml.sequencediagram.MessageExo;

        if $z17 == 0 goto label14;

        $r43 = (net.sourceforge.plantuml.sequencediagram.MessageExo) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareMessageExo(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.MessageExo,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r43, r68);

        goto label26;

     label14:
        $z4 = r67 instanceof net.sourceforge.plantuml.sequencediagram.Message;

        if $z4 == 0 goto label15;

        $r42 = (net.sourceforge.plantuml.sequencediagram.Message) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareMessage(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Message,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r42, r68);

        goto label26;

     label15:
        $z5 = r67 instanceof net.sourceforge.plantuml.sequencediagram.Note;

        if $z5 == 0 goto label16;

        $r41 = (net.sourceforge.plantuml.sequencediagram.Note) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareNote(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r41, r68);

        goto label26;

     label16:
        $z6 = r67 instanceof net.sourceforge.plantuml.sequencediagram.Notes;

        if $z6 == 0 goto label17;

        $r40 = (net.sourceforge.plantuml.sequencediagram.Notes) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareNotes(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Notes,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r40, r68);

        goto label26;

     label17:
        $z7 = r67 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z7 == 0 goto label18;

        $r39 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareLiveEvent(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.LifeEvent,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r39, r68);

        goto label26;

     label18:
        $z8 = r67 instanceof net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        if $z8 == 0 goto label19;

        $r38 = (net.sourceforge.plantuml.sequencediagram.GroupingLeaf) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareGroupingLeaf(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.GroupingLeaf,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r38, r68);

        goto label26;

     label19:
        $z9 = r67 instanceof net.sourceforge.plantuml.sequencediagram.GroupingStart;

        if $z9 == 0 goto label20;

        $r37 = (net.sourceforge.plantuml.sequencediagram.GroupingStart) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareGroupingStart(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.GroupingStart,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r37, r68);

        goto label26;

     label20:
        $z10 = r67 instanceof net.sourceforge.plantuml.sequencediagram.Newpage;

        if $z10 == 0 goto label21;

        $r36 = (net.sourceforge.plantuml.sequencediagram.Newpage) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareNewpage(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Newpage,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r36, r68);

        goto label26;

     label21:
        $z11 = r67 instanceof net.sourceforge.plantuml.sequencediagram.Divider;

        if $z11 == 0 goto label22;

        $r35 = (net.sourceforge.plantuml.sequencediagram.Divider) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareDivider(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Divider,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r35, r68);

        goto label26;

     label22:
        $z12 = r67 instanceof net.sourceforge.plantuml.sequencediagram.HSpace;

        if $z12 == 0 goto label23;

        $r34 = (net.sourceforge.plantuml.sequencediagram.HSpace) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareHSpace(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.HSpace,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r34, r68);

        goto label26;

     label23:
        $z13 = r67 instanceof net.sourceforge.plantuml.sequencediagram.Delay;

        if $z13 == 0 goto label24;

        $r33 = (net.sourceforge.plantuml.sequencediagram.Delay) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareDelay(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Delay,java.util.List,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r33, $r15, r68);

        goto label26;

     label24:
        $z14 = r67 instanceof net.sourceforge.plantuml.sequencediagram.Reference;

        if $z14 == 0 goto label25;

        $r32 = (net.sourceforge.plantuml.sequencediagram.Reference) r67;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareReference(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Reference,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r5, $r32, r68);

        goto label26;

     label25:
        $r31 = new java.lang.IllegalStateException;

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>()>();

        throw $r31;

     label26:
        goto label12;

     label27:
        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void takeParticipantEngloberPadding(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $r22 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        virtualinvoke $r22.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void takeConstraintIntoAccount(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void takeParticipantEngloberTitleWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: void prepareMissingSpace(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $r24 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r23 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX>;

        $r25 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r26 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getFullParticipantRange()>();

        $d4 = interfaceinvoke $r25.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($r26);

        $d5 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double getTotalHeight(double,net.sourceforge.plantuml.graphic.StringBounder)>($d4, r5);

        specialinvoke $r23.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d3, $d5);

        virtualinvoke $r24.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void setDimension(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r23);

        $r27 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        return $r27;
    }

    private void takeParticipantEngloberPadding(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r1, $r5, $r10, $r14;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.PaddingParam $r3;
        double d0;
        byte $b0;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        java.util.List $r6;
        java.util.Iterator r7;
        boolean $z0;
        java.lang.Object $r8;
        net.sourceforge.plantuml.sequencediagram.Doll r9;
        net.sourceforge.plantuml.sequencediagram.Participant $r11, $r15;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r12, $r16;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r13, r17;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r18, $r19;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = <net.sourceforge.plantuml.PaddingParam: net.sourceforge.plantuml.PaddingParam BOX>;

        d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: double getPadding(net.sourceforge.plantuml.PaddingParam)>($r3);

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List getExistingParticipantEnglober(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.sequencediagram.Doll) $r8;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r11 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getFirst2TOBEPRIVATE()>();

        $r12 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r11);

        r13 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r15 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getLast2TOBEPRIVATE()>();

        $r16 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r15);

        r17 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushToLeftParticipantBox(double,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,boolean)>(d0, r13, 1);

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushToLeftParticipantBox(double,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,boolean)>(d0, r17, 0);

        goto label2;

     label3:
        return;
    }

    private void takeParticipantEngloberTitleWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2, $r7, $r8, $r12, $r16, $r17;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.Doll r6;
        double d0, d1, d2, $d3, d4, $d5, $d6;
        net.sourceforge.plantuml.sequencediagram.Participant $r9, $r13;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r10, $r14;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r11, r15;
        byte $b0;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r18, $r19;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List getExistingParticipantEnglober(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.Doll) $r5;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        d0 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getEngloberPreferedWidth(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Doll)>(r1, r6);

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r9 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getFirst2TOBEPRIVATE()>();

        $r10 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r9);

        r11 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r13 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getLast2TOBEPRIVATE()>();

        $r14 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r13);

        r15 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        d1 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getX1(net.sourceforge.plantuml.sequencediagram.Doll)>(r6);

        $r17 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        d2 = virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getX2(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Doll)>(r1, r6);

        $d3 = d2 - d1;

        d4 = d0 - $d3;

        $b0 = d4 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        $d5 = d4 / 2.0;

        virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushToLeftParticipantBox(double,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,boolean)>($d5, r11, 1);

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        $d6 = d4 / 2.0;

        virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushToLeftParticipantBox(double,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,boolean)>($d6, r15, 0);

     label2:
        goto label1;

     label3:
        return;
    }

    private double getTotalHeight(double, net.sourceforge.plantuml.graphic.StringBounder)
    {
        double d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        d1 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: boolean showTail>;

        $d2 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getTailHeight(net.sourceforge.plantuml.graphic.StringBounder,boolean)>(r1, $z0);

        $d3 = d1 + $d2;

        $d4 = $d3 + 0.0;

        return $d4;
    }

    public double getYposition(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Newpage)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.Newpage r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Event $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage r6;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Newpage;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.Event) $r3;

        $r5 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement getEvent(net.sourceforge.plantuml.sequencediagram.Event)>($r4);

        r6 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage) $r5;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage: double getStartingY()>();

        return $d0;
    }

    private void prepareMissingSpace(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r1, $r5, $r6;
        double $d0, $d1, $d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14, d15, d16, d17, $d18;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2;
        java.util.Collection $r3;
        java.util.Iterator r4;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        java.lang.Object $r7;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.graphic.StringBounder r9;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r10, r11;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r12;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r9 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: double getMaxX()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX> = $d0;

        d12 = 0.0;

        d13 = 0.0;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Collection getAllGraphicalElements()>();

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement) $r7;

        $z0 = r8 instanceof net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        if $z0 == 0 goto label2;

        $d8 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        $d9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX>;

        d14 = $d8 - $d9;

        $b4 = d14 cmpl 0.0;

        if $b4 <= 0 goto label1;

        $d10 = d14 / 2.0;

        d12 = staticinvoke <java.lang.Math: double max(double,double)>(d12, $d10);

        $d11 = d14 / 2.0;

        d13 = staticinvoke <java.lang.Math: double max(double,double)>(d13, $d11);

        goto label1;

     label2:
        d15 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        d3 = neg d15;

        $b1 = d3 cmpl d12;

        if $b1 <= 0 goto label3;

        d12 = d3;

     label3:
        $z1 = r8 instanceof net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        if $z1 == 0 goto label4;

        r10 = (net.sourceforge.plantuml.sequencediagram.graphic.Arrow) r8;

        $d7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX>;

        virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void setMaxX(double)>($d7);

     label4:
        d16 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        $z2 = r8 instanceof net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        if $z2 == 0 goto label5;

        r11 = (net.sourceforge.plantuml.sequencediagram.graphic.Arrow) r8;

        $d6 = virtualinvoke r11.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        $b3 = d16 cmpg $d6;

        if $b3 >= 0 goto label5;

        d16 = virtualinvoke r11.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

     label5:
        $z4 = r8 instanceof net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        if $z4 == 0 goto label6;

        r12 = (net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader) r8;

        $d5 = virtualinvoke r12.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        $b2 = d16 cmpg $d5;

        if $b2 >= 0 goto label6;

        d16 = virtualinvoke r12.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

     label6:
        d17 = d15 + d16;

        $d18 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX>;

        d4 = d17 - $d18;

        $b5 = d4 cmpl d13;

        if $b5 <= 0 goto label7;

        d13 = d4;

     label7:
        goto label1;

     label8:
        $b0 = d12 cmpl 0.0;

        if $b0 <= 0 goto label9;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushToLeft(double)>(d12);

     label9:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        $d1 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: double getMaxX()>();

        $d2 = $d1 + d13;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX> = $d2;

        return;
    }

    private void prepareNewpage(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Newpage, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r3, $r10, $r12, $r13;
        double $d0, $d1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r4, $r6, $r15;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.ISkinParam $r7;
        net.sourceforge.plantuml.skin.Component $r8;
        net.sourceforge.plantuml.graphic.StringBounder r11;
        net.sourceforge.plantuml.sequencediagram.Newpage r14;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r14 := @parameter1: net.sourceforge.plantuml.sequencediagram.Newpage;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r2);

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNewPage(net.sourceforge.plantuml.ISkinParam)>($r7);

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage: void <init>(double,net.sourceforge.plantuml.skin.Component)>($d0, $r8);

        $r10 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier lastFreeY2> = $r10;

        $r12 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d1, r2);

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r13;

        $r15 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r14, $r0);

        return;
    }

    private void prepareNewpageSpecial(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Newpage, net.sourceforge.plantuml.sequencediagram.Event, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r3, $r10, $r12, $r13;
        double $d0, $d1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r4, $r6, $r16;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.ISkinParam $r7;
        net.sourceforge.plantuml.skin.Component $r8;
        net.sourceforge.plantuml.graphic.StringBounder r11;
        net.sourceforge.plantuml.sequencediagram.Newpage r14;
        net.sourceforge.plantuml.sequencediagram.Event r15;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r14 := @parameter1: net.sourceforge.plantuml.sequencediagram.Newpage;

        r15 := @parameter2: net.sourceforge.plantuml.sequencediagram.Event;

        r2 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r2);

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNewPage(net.sourceforge.plantuml.ISkinParam)>($r7);

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage: void <init>(double,net.sourceforge.plantuml.skin.Component)>($d0, $r8);

        $r10 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier lastFreeY2> = $r10;

        $r12 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d1, r2);

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r13;

        $r16 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Newpage,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage,net.sourceforge.plantuml.sequencediagram.Event)>(r14, $r0, r15);

        return;
    }

    private void prepareDivider(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Divider, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r3, $r15, $r16;
        double $d0, $d1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r4, $r8, $r17;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.sequencediagram.Divider r6;
        net.sourceforge.plantuml.style.Style[] $r7;
        net.sourceforge.plantuml.skin.ComponentType $r9;
        net.sourceforge.plantuml.ISkinParam $r10;
        net.sourceforge.plantuml.cucadiagram.Display $r11;
        net.sourceforge.plantuml.skin.Component $r12;
        net.sourceforge.plantuml.graphic.StringBounder r14;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r14 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r6 := @parameter1: net.sourceforge.plantuml.sequencediagram.Divider;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r2);

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.Divider: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r9 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DIVIDER>;

        $r8 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r10 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r11 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.Divider: net.sourceforge.plantuml.cucadiagram.Display getText()>();

        $r12 = virtualinvoke $r5.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r7, $r9, null, $r10, $r11);

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: void <init>(double,net.sourceforge.plantuml.skin.Component)>($d0, $r12);

        $r15 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r14);

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d1, r2);

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r16;

        $r17 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r6, $r0);

        return;
    }

    private void prepareHSpace(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.HSpace, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalHSpace $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r3, $r7, $r8;
        double $d0, $d1;
        net.sourceforge.plantuml.sequencediagram.HSpace r4;
        int $i0;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r9;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.HSpace;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.GraphicalHSpace;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r2);

        $i0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.HSpace: int getPixel()>();

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalHSpace: void <init>(double,int)>($d0, $i0);

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalHSpace: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d1, r2);

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r8;

        $r9 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r4, $r0);

        return;
    }

    private void prepareDelay(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Delay, java.util.List, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r1, $r5, $r23;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.sequencediagram.Delay r3;
        net.sourceforge.plantuml.style.Style[] $r4;
        net.sourceforge.plantuml.skin.ComponentType $r6;
        net.sourceforge.plantuml.ISkinParam $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.skin.Component r9;
        java.util.List r10;
        java.lang.Object $r11, $r13, $r24;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r12, r14, r25;
        int $i0, $i1;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText $r15;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r16;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r17, $r21, $r22;
        double $d0, $d1;
        java.util.Iterator r19;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r20;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r20 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.Delay;

        r10 := @parameter2: java.util.List;

        r16 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Delay: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DELAY_TEXT>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Delay: net.sourceforge.plantuml.cucadiagram.Display getText()>();

        r9 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r4, $r6, null, $r7, $r8);

        $r11 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(0);

        r12 = (net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox) $r11;

        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r13 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>($i1);

        r14 = (net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox) $r13;

        $r15 = new net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        $r17 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r17.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r16);

        specialinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: void <init>(double,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox)>($d0, r9, r12, r14);

        r19 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r24 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r25 = (net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox) $r24;

        virtualinvoke r25.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void addDelay(net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText)>($r15);

        goto label1;

     label2:
        $r21 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = virtualinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r20);

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d1, r16);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r22;

        $r23 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r23.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r3, $r15);

        return;
    }

    private void prepareGroupingStart(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.GroupingStart, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingStart r0;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r1, $r2;
        net.sourceforge.plantuml.SkinParamBackcolored $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r4;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r5, $r10, $r26, $r31, $r42;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.ugraphic.color.HColor $r7, $r8;
        net.sourceforge.plantuml.skin.rose.Rose $r11, $r27;
        java.lang.CharSequence[] $r12, $r22, $r46;
        net.sourceforge.plantuml.skin.ComponentType $r13, $r29;
        java.lang.String $r14, $r21, $r23, $r24, $r47;
        net.sourceforge.plantuml.cucadiagram.Display $r15, $r49;
        net.sourceforge.plantuml.skin.Component r16, r30;
        net.sourceforge.plantuml.graphic.StringBounder r17;
        double d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r18;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r19, $r20, $r34, $r38, $r40, $r41, $r43;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.style.Style[] $r28;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r32;
        net.sourceforge.plantuml.sequencediagram.InGroupableList $r33;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r36;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader $r37;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack $r44, $r45;
        java.lang.IllegalStateException $r48;

        r4 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r17 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r18 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r2 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        if $r1 == $r2 goto label1;

        $r48 = new java.lang.IllegalStateException;

        specialinvoke $r48.<java.lang.IllegalStateException: void <init>()>();

        throw $r48;

     label1:
        $r3 = new net.sourceforge.plantuml.SkinParamBackcolored;

        $r5 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.ugraphic.color.HColor getBackColorElement()>();

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.ugraphic.color.HColor getBackColorGeneral()>();

        specialinvoke $r3.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>($r6, $r7, $r8);

        $r10 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r13 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType GROUPING_SPACE>;

        $r12 = newarray (java.lang.CharSequence)[1];

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getComment()>();

        $r12[0] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r12);

        r16 = virtualinvoke $r11.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>(null, $r13, null, $r3, $r15);

        d0 = interfaceinvoke r16.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r17);

        $r19 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d0, r18);

        r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r20;

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getTitle()>();

        $z0 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("group");

        if $z0 == 0 goto label2;

        $r46 = newarray (java.lang.CharSequence)[1];

        $r47 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getComment()>();

        $r46[0] = $r47;

        $r49 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r46);

        goto label3;

     label2:
        $r22 = newarray (java.lang.CharSequence)[2];

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getTitle()>();

        $r22[0] = $r23;

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getComment()>();

        $r22[1] = $r24;

        $r49 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r22);

     label3:
        $r26 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r27 = virtualinvoke $r26.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r29 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType GROUPING_HEADER>;

        r30 = virtualinvoke $r27.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r28, $r29, null, $r3, $r49);

        $r31 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        r32 = virtualinvoke $r31.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getVeryfirst()>();

        $r33 = new net.sourceforge.plantuml.sequencediagram.InGroupableList;

        $r34 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = interfaceinvoke $r34.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r18);

        specialinvoke $r33.<net.sourceforge.plantuml.sequencediagram.InGroupableList: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox,net.sourceforge.plantuml.sequencediagram.Grouping,double)>(r32, r0, $d1);

        $r36 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        virtualinvoke $r36.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void addList(net.sourceforge.plantuml.sequencediagram.InGroupableList)>($r33);

        $r37 = new net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        $r38 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d2 = interfaceinvoke $r38.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r18);

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: boolean isParallel()>();

        specialinvoke $r37.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: void <init>(double,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.sequencediagram.InGroupableList,boolean)>($d2, r30, $r33, $z1);

        $d3 = virtualinvoke $r37.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r17);

        virtualinvoke $r33.<net.sourceforge.plantuml.sequencediagram.InGroupableList: void setMinWidth(double)>($d3);

        $r40 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d4 = virtualinvoke $r37.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r17);

        $r41 = interfaceinvoke $r40.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d4, r18);

        r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r41;

        $r42 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r42.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r0, $r37);

        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.GroupingStart: boolean isParallel()>();

        if $z2 == 0 goto label4;

        $r43 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r44 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack) $r43;

        $r45 = interfaceinvoke $r44.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack openBar()>();

        r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r45;

     label4:
        return;
    }

    private void prepareGroupingLeaf(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.GroupingLeaf, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.SkinParamBackcolored $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2, $r14, $r22, $r32, $r38, $r40, $r47;
        net.sourceforge.plantuml.ISkinParam $r3, $r39, r72;
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r5;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r7, $r8, $r9, $r10;
        java.lang.IllegalStateException $r11;
        java.util.ArrayList $r12;
        java.util.List $r13;
        boolean $z0, $z1, $z2, $z4, $z5;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r15;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement $r16;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementTail $r17;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r18;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r19, $r29, $r30, $r33, $r34, $r56, $r59, $r60, $r63;
        double $d0, $d1, $d2, d3, d4;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r20, $r31, $r57, $r62;
        net.sourceforge.plantuml.sequencediagram.InGroupableList $r21, $r58;
        net.sourceforge.plantuml.skin.rose.Rose $r23, $r41, $r48;
        java.lang.CharSequence[] $r24, $r50;
        net.sourceforge.plantuml.skin.ComponentType $r25, $r44, $r51;
        java.lang.String $r26, $r52;
        net.sourceforge.plantuml.cucadiagram.Display $r27, $r45, $r53;
        net.sourceforge.plantuml.graphic.StringBounder r28;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack $r35, $r36, $r64, $r65;
        java.lang.Object $r37;
        net.sourceforge.plantuml.style.Style[] $r42, $r49;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r43;
        net.sourceforge.plantuml.skin.Component r46, r66, r74;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer$1 $r54;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse $r55, $r61;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement r68;
        java.util.Iterator r70;
        net.sourceforge.plantuml.sequencediagram.Note r71;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r73;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r28 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        r18 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.SkinParamBackcolored;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.ugraphic.color.HColor getBackColorGeneral()>();

        specialinvoke $r0.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>($r3, null, $r5);

        $r7 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r8 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType ELSE>;

        if $r7 != $r8 goto label2;

        $z4 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: boolean isParallel()>();

        if $z4 == 0 goto label1;

        $r63 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r64 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack) $r63;

        $r65 = interfaceinvoke $r64.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack restore()>();

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r65;

     label1:
        $r47 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r48 = virtualinvoke $r47.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r49 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r51 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType GROUPING_ELSE>;

        $r50 = newarray (java.lang.CharSequence)[1];

        $r52 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: java.lang.String getComment()>();

        $r50[0] = $r52;

        $r53 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r50);

        r66 = virtualinvoke $r48.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r49, $r51, null, $r0, $r53);

        $r54 = new net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer$1;

        specialinvoke $r54.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer$1: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer,net.sourceforge.plantuml.sequencediagram.GroupingLeaf)>(r1, r4);

        $r55 = new net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        $r56 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d2 = interfaceinvoke $r56.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r18);

        $r57 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        $r58 = virtualinvoke $r57.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: net.sourceforge.plantuml.sequencediagram.InGroupableList getTopGroupingStructure()>();

        $z5 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: boolean isParallel()>();

        specialinvoke $r55.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: void <init>(double,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.sequencediagram.InGroupableList,boolean,net.sourceforge.plantuml.sequencediagram.graphic.Lazy)>($d2, r66, $r58, $z5, $r54);

        r68 = $r55;

        d3 = virtualinvoke $r55.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r28);

        $r59 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r60 = interfaceinvoke $r59.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d3, r18);

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r60;

        $r62 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        $r61 = (net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse) $r55;

        virtualinvoke $r62.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void addElement(net.sourceforge.plantuml.sequencediagram.InGroupable)>($r61);

        goto label8;

     label2:
        $r9 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r10 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType END>;

        if $r9 != $r10 goto label7;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: java.util.List getNoteOnMessages()>();

        r70 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r70.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r37 = interfaceinvoke r70.<java.util.Iterator: java.lang.Object next()>();

        r71 = (net.sourceforge.plantuml.sequencediagram.Note) $r37;

        $r38 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r39 = virtualinvoke $r38.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r72 = virtualinvoke r71.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.ISkinParam getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r39);

        $r40 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r41 = virtualinvoke $r40.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r42 = virtualinvoke r71.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r43 = virtualinvoke r71.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NoteStyle getNoteStyle()>();

        $r44 = virtualinvoke $r43.<net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.skin.ComponentType getNoteComponentType()>();

        $r45 = virtualinvoke r71.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        r46 = virtualinvoke $r41.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNote(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r42, $r44, r72, $r45);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r46);

        goto label3;

     label4:
        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: boolean isParallel()>();

        if $z1 == 0 goto label5;

        $r34 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r35 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack) $r34;

        $r36 = interfaceinvoke $r35.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack closeBar()>();

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r36;

     label5:
        $r14 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r15 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart getGroupingStart()>();

        $r16 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement getEvent(net.sourceforge.plantuml.sequencediagram.Event)>($r15);

        r73 = (net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader) $r16;

        if r73 == null goto label6;

        $r33 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = interfaceinvoke $r33.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r18);

        virtualinvoke r73.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: void setEndY(double)>($d1);

        virtualinvoke r73.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: void addNotes(net.sourceforge.plantuml.graphic.StringBounder,java.util.Collection)>(r28, $r12);

     label6:
        $r17 = new net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementTail;

        $r19 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r18);

        $r20 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: net.sourceforge.plantuml.sequencediagram.InGroupableList getTopGroupingStructure()>();

        $z2 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: boolean isParallel()>();

        specialinvoke $r17.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementTail: void <init>(double,net.sourceforge.plantuml.sequencediagram.InGroupableList,boolean)>($d0, $r21, $z2);

        r68 = $r17;

        $r22 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r25 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType GROUPING_SPACE>;

        $r24 = newarray (java.lang.CharSequence)[1];

        $r26 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: java.lang.String getComment()>();

        $r24[0] = $r26;

        $r27 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r24);

        r74 = virtualinvoke $r23.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>(null, $r25, null, $r0, $r27);

        d4 = interfaceinvoke r74.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r28);

        $r29 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r30 = interfaceinvoke $r29.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d4, r18);

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r30;

        $r31 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        virtualinvoke $r31.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void pop()>();

        goto label8;

     label7:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label8:
        $r32 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r32.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r4, r68);

        return;
    }

    private void prepareNote(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Note, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.Note r2;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r3;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r4;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r7, $r8;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        r3 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        r4 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox createNoteBox(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r1, r2, r3);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void addElement(net.sourceforge.plantuml.sequencediagram.InGroupable)>(r4);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r2, r4);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d0, r3);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r8;

        return;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.NoteBox createNoteBox(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Note, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.Note r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2, $r5, $r12, $r18, $r24;
        net.sourceforge.plantuml.sequencediagram.Participant $r3, $r4, $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r7, $r9;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        double $d0, $d1, $d2;
        byte $b0;
        net.sourceforge.plantuml.skin.ComponentType r10;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r11;
        java.util.Collection $r13;
        boolean $z0;
        java.lang.Object $r14;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r15, r16, r17, r23;
        net.sourceforge.plantuml.ISkinParam $r19, r20;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r21;
        java.util.Iterator r22;
        net.sourceforge.plantuml.skin.rose.Rose $r25;
        net.sourceforge.plantuml.style.Style[] $r26;
        net.sourceforge.plantuml.cucadiagram.Display $r27;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r28, $r32;
        net.sourceforge.plantuml.skin.Component r29;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox $r30;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r31;
        net.sourceforge.plantuml.Url $r33;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        r11 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        r15 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r3);

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        if $r4 != null goto label1;

        r16 = null;

        goto label2;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        r16 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r6);

        $r7 = virtualinvoke r15.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d0 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r8);

        $r9 = virtualinvoke r16.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d1 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r8);

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

        r17 = r15;

        r15 = r16;

        r16 = r17;

     label2:
        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r19 = virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r20 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.ISkinParam getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r19);

        $r21 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NoteStyle getNoteStyle()>();

        r10 = virtualinvoke $r21.<net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.skin.ComponentType getNoteComponentType()>();

        if r15 != null goto label5;

        if r16 != null goto label5;

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Collection getAllLivingParticipantBox()>();

        r22 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r14 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r14;

        if r15 != null goto label4;

        r15 = r23;

     label4:
        r16 = r23;

        goto label3;

     label5:
        $r24 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r25 = virtualinvoke $r24.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r26 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r27 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        $r28 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        r29 = virtualinvoke $r25.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNote(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.sequencediagram.NotePosition)>($r26, r10, r20, $r27, $r28);

        $r30 = new net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        $r31 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d2 = interfaceinvoke $r31.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r11);

        $r32 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r33 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.Url getUrl()>();

        specialinvoke $r30.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: void <init>(double,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox,net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox,net.sourceforge.plantuml.sequencediagram.NotePosition,net.sourceforge.plantuml.Url)>($d2, r29, r15, r16, $r32, $r33);

        return $r30;
    }

    private void prepareNotes(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Notes, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r3, $r11, $r12;
        double $d0, $d1;
        net.sourceforge.plantuml.sequencediagram.Notes r5;
        java.util.Iterator r6;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r9;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r10, $r16, $r21;
        java.lang.Object $r13;
        net.sourceforge.plantuml.sequencediagram.Note r14;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r15;
        net.sourceforge.plantuml.sequencediagram.Participant $r17, $r20, $r22;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r18, $r23;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r19, $r25;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: net.sourceforge.plantuml.sequencediagram.Notes;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: void <init>(double)>($d0);

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.sequencediagram.Note) $r13;

        r15 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox createNoteBox(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r7, r14, r2);

        $r16 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r17 = virtualinvoke r14.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r18 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r17);

        r19 = virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $r20 = virtualinvoke r14.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        if $r20 != null goto label2;

        $r25 = null;

        goto label3;

     label2:
        $r21 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r22 = virtualinvoke r14.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        $r23 = virtualinvoke $r21.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r22);

        $r25 = virtualinvoke $r23.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

     label3:
        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: void add(net.sourceforge.plantuml.sequencediagram.graphic.NoteBox,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox)>(r15, r19, $r25);

        goto label1;

     label4:
        $r8 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: void ensureConstraints(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet)>(r7, $r8);

        $r9 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void addElement(net.sourceforge.plantuml.sequencediagram.InGroupable)>($r0);

        $r10 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r5, $r0);

        $r11 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d1 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d1, r2);

        r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r12;

        return;
    }

    private void prepareLiveEvent(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.LifeEvent, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r2, $r25, $r26;
        double d0, $d1, d2, $d3, $d4, $d5, d6, $d7, $d8, d9, d10, d12;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r3;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r4;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r5, $r6, $r7, $r8, $r27, $r28, $r39, $r40;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation $r9, $r33;
        net.sourceforge.plantuml.graphic.SymbolContext $r10, $r34;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElementLiveEvent $r11;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r12, $r13, $r15, $r19, $r24, $r29, $r36;
        net.sourceforge.plantuml.skin.rose.Rose $r14;
        net.sourceforge.plantuml.skin.ComponentType $r16;
        net.sourceforge.plantuml.ISkinParam $r17;
        net.sourceforge.plantuml.graphic.StringBounder r18;
        net.sourceforge.plantuml.sequencediagram.Participant $r20, $r30, r35;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy $r21;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r22;
        boolean $z0, $z1, $z2;
        int i0;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r31, $r37, r42;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r32, r38;
        net.sourceforge.plantuml.skin.Component r41;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r18 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r1);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.AbstractMessage getMessage()>();

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType getType()>();

        $r6 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType ACTIVATE>;

        if $r5 != $r6 goto label04;

        d6 = 0.0;

        if r4 == null goto label03;

        i0 = 0;

        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean isCreate()>();

        if $z1 == 0 goto label01;

        i0 = 0 + 10;

        goto label02;

     label01:
        $z2 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean isSelfMessage()>();

        if $z2 == 0 goto label02;

        i0 = 0 + 8;

     label02:
        $d7 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: double getPosYstartLevel()>();

        $d8 = (double) i0;

        d6 = $d7 + $d8;

     label03:
        $r29 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r30 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r31 = virtualinvoke $r29.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r30);

        r32 = virtualinvoke $r31.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine getLifeLine()>();

        $r33 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation LARGER>;

        $r34 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.graphic.SymbolContext getSpecificColors()>();

        virtualinvoke r32.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void addSegmentVariation(net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation,double,net.sourceforge.plantuml.graphic.SymbolContext)>($r33, d6, $r34);

        goto label08;

     label04:
        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType getType()>();

        $r8 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DESTROY>;

        if $r7 == $r8 goto label05;

        $r27 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType getType()>();

        $r28 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DEACTIVATE>;

        if $r27 != $r28 goto label08;

     label05:
        d9 = 0.0;

        if r4 == null goto label06;

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean isSelfMessage()>();

        if $z0 == 0 goto label06;

        d9 = 0.0 + 7.0;

     label06:
        r35 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r36 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r37 = virtualinvoke $r36.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>(r35);

        r38 = virtualinvoke $r37.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine getLifeLine()>();

        d10 = d0;

        if r4 == null goto label07;

        $d5 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: double getPosYendLevel()>();

        d10 = $d5 - d9;

     label07:
        $r9 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation SMALLER>;

        $r10 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.graphic.SymbolContext getSpecificColors()>();

        virtualinvoke r38.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void addSegmentVariation(net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation,double,net.sourceforge.plantuml.graphic.SymbolContext)>($r9, d10, $r10);

     label08:
        $r39 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType getType()>();

        $r40 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DESTROY>;

        if $r39 != $r40 goto label11;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r16 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DESTROY>;

        $r15 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r17 = virtualinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r41 = virtualinvoke $r14.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>(null, $r16, null, $r17, null);

        $d1 = interfaceinvoke r41.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r18);

        d2 = $d1 / 2.0;

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r20 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        r42 = virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r20);

        if r4 != null goto label09;

        d12 = d0;

        $r25 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d4 = interfaceinvoke r41.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r18);

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d4, r1);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r26;

        goto label10;

     label09:
        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: double getPosYendLevel()>();

        d12 = $d3 - d2;

     label10:
        $r21 = new net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy;

        $r22 = virtualinvoke r42.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        specialinvoke $r21.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: void <init>(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox,net.sourceforge.plantuml.skin.Component)>(d12, $r22, r41);

        $r24 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r24.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r3, $r21);

        goto label12;

     label11:
        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r11 = new net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElementLiveEvent;

        specialinvoke $r11.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElementLiveEvent: void <init>(double)>(d0);

        virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r3, $r11);

     label12:
        return;
    }

    private void prepareMessageExo(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.MessageExo, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1MessageExo $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.sequencediagram.MessageExo r3;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r4;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r5, $r10;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r9;

        r4 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.MessageExo;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.Step1MessageExo;

        $r6 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r5 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1MessageExo: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.MessageExo,net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet,net.sourceforge.plantuml.sequencediagram.graphic.Frontier)>(r1, r2, r3, $r6, $r5);

        $r9 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        $r8 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        $r10 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1MessageExo: net.sourceforge.plantuml.sequencediagram.graphic.Frontier prepareMessage(net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet,net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack)>($r9, $r8);

        r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r10;

        return;
    }

    private void prepareMessage(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Message, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Message $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.sequencediagram.Message r3;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r4;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r5, $r10;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r9;

        r4 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.Message;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.Step1Message;

        $r6 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r5 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Message: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Message,net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet,net.sourceforge.plantuml.sequencediagram.graphic.Frontier)>(r1, r2, r3, $r6, $r5);

        $r9 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        $r8 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        $r10 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Message: net.sourceforge.plantuml.sequencediagram.graphic.Frontier prepareMessage(net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet,net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack)>($r9, $r8);

        r4.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r10;

        return;
    }

    private void prepareReference(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Reference, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.Reference r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2, $r3, $r7, $r8, $r13, $r19, $r37;
        java.util.List $r4, $r9;
        net.sourceforge.plantuml.sequencediagram.Participant $r5, $r10;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r6, r11;
        net.sourceforge.plantuml.SkinParamBackcoloredReference $r12;
        net.sourceforge.plantuml.ISkinParam $r14;
        net.sourceforge.plantuml.ugraphic.color.HColor $r15, $r16;
        net.sourceforge.plantuml.cucadiagram.Display $r18, r40, r41, r42;
        net.sourceforge.plantuml.skin.rose.Rose $r20;
        net.sourceforge.plantuml.style.Style[] $r21;
        net.sourceforge.plantuml.skin.ComponentType $r22;
        net.sourceforge.plantuml.skin.Component r23;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference $r24;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r25;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r26, $r35, $r36;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8;
        net.sourceforge.plantuml.Url $r27;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r29, r30;
        net.sourceforge.plantuml.graphic.StringBounder r31;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet $r32, $r39;
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack $r33, $r34, $r38;
        net.sourceforge.plantuml.sequencediagram.graphic.Constraint r43;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r31 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Reference;

        r25 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List getParticipant()>();

        $r5 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.Participant getFirst(java.util.Collection)>($r4);

        r6 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r5);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List getParticipant()>();

        $r10 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.Participant getLast(java.util.Collection)>($r9);

        r11 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>($r10);

        $r12 = new net.sourceforge.plantuml.SkinParamBackcoloredReference;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.ugraphic.color.HColor getBackColorElement()>();

        $r16 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.ugraphic.color.HColor getBackColorGeneral()>();

        specialinvoke $r12.<net.sourceforge.plantuml.SkinParamBackcoloredReference: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>($r14, $r15, $r16);

        r40 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display empty()>();

        r41 = virtualinvoke r40.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display add(java.lang.CharSequence)>("ref");

        $r18 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        r42 = virtualinvoke r41.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display addAll(net.sourceforge.plantuml.cucadiagram.Display)>($r18);

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r21 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r22 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType REFERENCE>;

        r23 = virtualinvoke $r20.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r21, $r22, null, $r12, r42);

        $r24 = new net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        $r26 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d0 = interfaceinvoke $r26.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r25);

        $r27 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.Url getUrl()>();

        specialinvoke $r24.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: void <init>(double,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox,net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox,net.sourceforge.plantuml.Url)>($d0, r23, r6, r11, $r27);

        r29 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        r30 = virtualinvoke r11.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d1 = virtualinvoke $r24.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r31);

        $d2 = virtualinvoke r29.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r31);

        $d3 = $d2 / 2.0;

        $d4 = $d1 - $d3;

        $d5 = virtualinvoke r30.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r31);

        $d6 = $d5 / 2.0;

        d7 = $d4 - $d6;

        if r6 != r11 goto label1;

        $r39 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        r43 = virtualinvoke $r39.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraintAfter(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r29);

        goto label2;

     label1:
        $r32 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet constraintSet>;

        r43 = virtualinvoke $r32.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraint(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r29, r30);

     label2:
        virtualinvoke r43.<net.sourceforge.plantuml.sequencediagram.graphic.Constraint: void ensureValue(double)>(d7);

        $r33 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        virtualinvoke $r33.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void addElement(net.sourceforge.plantuml.sequencediagram.InGroupable)>($r24);

        $r34 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        virtualinvoke $r34.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void addElement(net.sourceforge.plantuml.sequencediagram.InGroupable)>(r6);

        if r6 == r11 goto label3;

        $r38 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack inGroupableStack>;

        virtualinvoke $r38.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: void addElement(net.sourceforge.plantuml.sequencediagram.InGroupable)>(r11);

     label3:
        $r35 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $d8 = virtualinvoke $r24.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r31);

        $r36 = interfaceinvoke $r35.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($d8, r25);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r36;

        $r37 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r37.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r1, $r24);

        return;
    }

    private void prepareParticipant(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.Participant r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.IllegalArgumentException $r17;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r18;
        net.sourceforge.plantuml.SkinParamBackcolored r19;
        net.sourceforge.plantuml.cucadiagram.Display r20;
        net.sourceforge.plantuml.skin.Component r21, r22, r24, r25, r40;
        net.sourceforge.plantuml.style.Style r23, $r36;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r26;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r28, $r33, $r37, $r43, $r48, $r55, $r57, $r60, $r68, $r72, $r74, $r77;
        net.sourceforge.plantuml.skin.rose.Rose $r29, $r58, $r61, $r69, $r75;
        net.sourceforge.plantuml.style.Style[] $r30, $r59, $r62, $r70;
        net.sourceforge.plantuml.skin.ComponentType $r31, $r38, r53, r54, $r63, $r71, $r76;
        net.sourceforge.plantuml.style.StyleSignature $r32, $r64, $r66;
        net.sourceforge.plantuml.ISkinParam $r34, $r39, $r44, $r56, $r73, $r78;
        net.sourceforge.plantuml.style.StyleBuilder $r35, $r67;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r41;
        net.sourceforge.plantuml.graphic.StringBounder r42;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r45, $r65;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r47;
        int $i0;
        byte $b1;

        r18 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r42 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.Participant;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r2 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType PARTICIPANT>;

        if $r1 != $r2 goto label01;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType PARTICIPANT_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType PARTICIPANT_TAIL>;

        goto label09;

     label01:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r4 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType ACTOR>;

        if $r3 != $r4 goto label02;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ACTOR_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ACTOR_TAIL>;

        goto label09;

     label02:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r6 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType BOUNDARY>;

        if $r5 != $r6 goto label03;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType BOUNDARY_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType BOUNDARY_TAIL>;

        goto label09;

     label03:
        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r8 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType CONTROL>;

        if $r7 != $r8 goto label04;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType CONTROL_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType CONTROL_TAIL>;

        goto label09;

     label04:
        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r10 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType ENTITY>;

        if $r9 != $r10 goto label05;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENTITY_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENTITY_TAIL>;

        goto label09;

     label05:
        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r12 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType QUEUE>;

        if $r11 != $r12 goto label06;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType QUEUE_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType QUEUE_TAIL>;

        goto label09;

     label06:
        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r14 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType DATABASE>;

        if $r13 != $r14 goto label07;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DATABASE_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DATABASE_TAIL>;

        goto label09;

     label07:
        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r16 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType COLLECTIONS>;

        if $r15 != $r16 goto label08;

        r53 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType COLLECTIONS_HEAD>;

        r54 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType COLLECTIONS_TAIL>;

        goto label09;

     label08:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r17;

     label09:
        $r55 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r56 = virtualinvoke $r55.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r19 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.SkinParamBackcolored getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r56);

        $z1 = interfaceinvoke r19.<net.sourceforge.plantuml.ISkinParam: boolean forceSequenceParticipantUnderlined()>();

        r20 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.cucadiagram.Display getDisplay(boolean)>($z1);

        $r57 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r58 = virtualinvoke $r57.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r59 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        r21 = virtualinvoke $r58.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r59, r53, null, r19, r20);

        $r60 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r61 = virtualinvoke $r60.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r62 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        r22 = virtualinvoke $r61.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r62, r54, null, r19, r20);

        $r63 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.skin.ComponentType defaultLineType>;

        $r64 = virtualinvoke $r63.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r65 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r66 = virtualinvoke $r64.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r65);

        $r67 = interfaceinvoke r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r23 = virtualinvoke $r66.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r67);

        $r68 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r69 = virtualinvoke $r68.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r70 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r70[0] = r23;

        $r71 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.skin.ComponentType defaultLineType>;

        $r72 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r73 = virtualinvoke $r72.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r24 = virtualinvoke $r69.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r70, $r71, null, $r73, r20);

        $r74 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r75 = virtualinvoke $r74.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r76 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DELAY_LINE>;

        $r77 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r78 = virtualinvoke $r77.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r25 = virtualinvoke $r75.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>(null, $r76, null, $r78, r20);

        $r26 = new net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        $d0 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX>;

        $i0 = interfaceinvoke r19.<net.sourceforge.plantuml.ISkinParam: int maxAsciiMessageLength()>();

        if $i0 <= 0 goto label10;

        $b1 = 1;

        goto label11;

     label10:
        $b1 = 5;

     label11:
        specialinvoke $r26.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void <init>(net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.skin.Component,double,int)>(r21, r24, r22, r25, $d0, $b1);

        $r28 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r29 = virtualinvoke $r28.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r30 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r31 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_CLOSE>;

        $r32 = virtualinvoke $r31.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r33 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r34 = virtualinvoke $r33.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r35 = interfaceinvoke $r34.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r36 = virtualinvoke $r32.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r35);

        $r30[0] = $r36;

        $r38 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_CLOSE>;

        $r37 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r39 = virtualinvoke $r37.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r40 = virtualinvoke $r29.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r30, $r38, null, $r39, null);

        $r41 = new net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        $d1 = interfaceinvoke r40.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r42);

        $r43 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r44 = virtualinvoke $r43.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r45 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = interfaceinvoke $r44.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r45);

        specialinvoke $r41.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,double,boolean)>($r26, $d1, $z0);

        $r48 = r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        $r47 = new net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        specialinvoke $r47.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox,net.sourceforge.plantuml.sequencediagram.graphic.LifeLine)>($r26, $r41);

        virtualinvoke $r48.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void setLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox)>(r0, $r47);

        $d2 = virtualinvoke $r26.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r42);

        r18.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: double freeX> = $d2;

        return;
    }

    public void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.ParticipantEnglober)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r2;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.sequencediagram.ParticipantEnglober)>(r1, r2);

        return;
    }

    public void addEvent(net.sourceforge.plantuml.sequencediagram.Event)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.Event r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void addEvent(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)>(r1, null);

        return;
    }

    static net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet access$000(net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r1;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawableSet>;

        return $r1;
    }
}
