public class net.sourceforge.plantuml.mindmap.Tetris extends java.lang.Object
{
    private final net.sourceforge.plantuml.mindmap.StripeFrontier frontier;
    private final java.util.List elements;
    private double minY;
    private double maxY;
    private java.lang.String name;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.mindmap.Tetris r0;
        net.sourceforge.plantuml.mindmap.StripeFrontier $r1;
        java.util.ArrayList $r2;
        java.lang.String r3;

        r0 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.mindmap.StripeFrontier;

        specialinvoke $r1.<net.sourceforge.plantuml.mindmap.StripeFrontier: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.Tetris: net.sourceforge.plantuml.mindmap.StripeFrontier frontier> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements> = $r2;

        r0.<net.sourceforge.plantuml.mindmap.Tetris: double minY> = 1.7976931348623157E308;

        r0.<net.sourceforge.plantuml.mindmap.Tetris: double maxY> = -1.7976931348623157E308;

        r0.<net.sourceforge.plantuml.mindmap.Tetris: java.lang.String name> = r3;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        net.sourceforge.plantuml.mindmap.Tetris r1;
        java.lang.String $r2, $r8;
        java.util.List $r5;
        int $i0;

        r1 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.mindmap.Tetris: java.lang.String name>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = r1.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void balance()
    {
        net.sourceforge.plantuml.mindmap.Tetris r0;
        java.util.List $r1, $r2, $r3;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        byte $b1;
        boolean $z0, $z1;
        java.util.Iterator r4, r10;
        java.lang.Object $r5, $r7;
        net.sourceforge.plantuml.mindmap.SymetricalTeePositioned r6, r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $d0 = r0.<net.sourceforge.plantuml.mindmap.Tetris: double minY>;

        $b1 = $d0 cmpl 1.7976931348623157E308;

        if $b1 == 0 goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label2:
        $r2 = r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.mindmap.SymetricalTeePositioned) $r7;

        $d5 = r0.<net.sourceforge.plantuml.mindmap.Tetris: double minY>;

        $d6 = virtualinvoke r8.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: double getMinY()>();

        $d7 = staticinvoke <java.lang.Math: double min(double,double)>($d5, $d6);

        r0.<net.sourceforge.plantuml.mindmap.Tetris: double minY> = $d7;

        $d8 = r0.<net.sourceforge.plantuml.mindmap.Tetris: double maxY>;

        $d9 = virtualinvoke r8.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: double getMaxY()>();

        $d10 = staticinvoke <java.lang.Math: double max(double,double)>($d8, $d9);

        r0.<net.sourceforge.plantuml.mindmap.Tetris: double maxY> = $d10;

        goto label3;

     label4:
        $d2 = r0.<net.sourceforge.plantuml.mindmap.Tetris: double minY>;

        $d1 = r0.<net.sourceforge.plantuml.mindmap.Tetris: double maxY>;

        $d3 = $d2 + $d1;

        d11 = $d3 / 2.0;

        $r3 = r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.mindmap.SymetricalTeePositioned) $r5;

        $d4 = neg d11;

        virtualinvoke r6.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: void move(double)>($d4);

        goto label5;

     label6:
        return;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.mindmap.Tetris r0;
        java.util.List $r1;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return 0.0;

     label1:
        $d1 = r0.<net.sourceforge.plantuml.mindmap.Tetris: double maxY>;

        $d0 = r0.<net.sourceforge.plantuml.mindmap.Tetris: double minY>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.mindmap.Tetris r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.mindmap.SymetricalTeePositioned r4;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.mindmap.SymetricalTeePositioned) $r3;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: double getMaxX()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public void add(net.sourceforge.plantuml.mindmap.SymetricalTee)
    {
        net.sourceforge.plantuml.mindmap.Tetris r0;
        net.sourceforge.plantuml.mindmap.StripeFrontier $r1, $r3, $r4;
        boolean $z0;
        net.sourceforge.plantuml.mindmap.SymetricalTee r2;
        double $d0, $d1, $d2, $d3, $d4, d5, d6;
        net.sourceforge.plantuml.mindmap.SymetricalTeePositioned $r5, $r7, r9, $r10;

        r0 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        r2 := @parameter0: net.sourceforge.plantuml.mindmap.SymetricalTee;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Tetris: net.sourceforge.plantuml.mindmap.StripeFrontier frontier>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.mindmap.StripeFrontier: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r10 = new net.sourceforge.plantuml.mindmap.SymetricalTeePositioned;

        specialinvoke $r10.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: void <init>(net.sourceforge.plantuml.mindmap.SymetricalTee)>(r2);

        specialinvoke r0.<net.sourceforge.plantuml.mindmap.Tetris: void addInternal(net.sourceforge.plantuml.mindmap.SymetricalTeePositioned)>($r10);

        return;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.mindmap.Tetris: net.sourceforge.plantuml.mindmap.StripeFrontier frontier>;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.mindmap.SymetricalTee: double getElongation1()>();

        d6 = virtualinvoke $r3.<net.sourceforge.plantuml.mindmap.StripeFrontier: double getContact(double,double)>(0.0, $d0);

        $r4 = r0.<net.sourceforge.plantuml.mindmap.Tetris: net.sourceforge.plantuml.mindmap.StripeFrontier frontier>;

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.mindmap.SymetricalTee: double getElongation1()>();

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.mindmap.SymetricalTee: double getElongation1()>();

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.mindmap.SymetricalTee: double getElongation2()>();

        $d4 = $d2 + $d3;

        d5 = virtualinvoke $r4.<net.sourceforge.plantuml.mindmap.StripeFrontier: double getContact(double,double)>($d1, $d4);

        $r5 = new net.sourceforge.plantuml.mindmap.SymetricalTeePositioned;

        specialinvoke $r5.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: void <init>(net.sourceforge.plantuml.mindmap.SymetricalTee)>(r2);

        virtualinvoke $r5.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: void moveSoThatSegmentA1isOn(double)>(d6);

        $r7 = new net.sourceforge.plantuml.mindmap.SymetricalTeePositioned;

        specialinvoke $r7.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: void <init>(net.sourceforge.plantuml.mindmap.SymetricalTee)>(r2);

        virtualinvoke $r7.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: void moveSoThatSegmentA2isOn(double)>(d5);

        r9 = virtualinvoke $r5.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: net.sourceforge.plantuml.mindmap.SymetricalTeePositioned getMax(net.sourceforge.plantuml.mindmap.SymetricalTeePositioned)>($r7);

        specialinvoke r0.<net.sourceforge.plantuml.mindmap.Tetris: void addInternal(net.sourceforge.plantuml.mindmap.SymetricalTeePositioned)>(r9);

        return;
    }

    private void addInternal(net.sourceforge.plantuml.mindmap.SymetricalTeePositioned)
    {
        net.sourceforge.plantuml.mindmap.Tetris r0;
        net.sourceforge.plantuml.mindmap.SymetricalTeePositioned r1;
        java.util.List $r2;
        java.awt.geom.Line2D r3, r5;
        net.sourceforge.plantuml.mindmap.StripeFrontier $r4, $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        boolean $z1, $z2;
        byte $b0, $b1, $b2;
        java.lang.AssertionError $r6, $r8;

        r0 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        r1 := @parameter0: net.sourceforge.plantuml.mindmap.SymetricalTeePositioned;

        $r2 = r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        r3 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: java.awt.geom.Line2D getSegmentB1()>();

        $r4 = r0.<net.sourceforge.plantuml.mindmap.Tetris: net.sourceforge.plantuml.mindmap.StripeFrontier frontier>;

        $d0 = virtualinvoke r3.<java.awt.geom.Line2D: double getX1()>();

        $d1 = virtualinvoke r3.<java.awt.geom.Line2D: double getX2()>();

        $d2 = virtualinvoke r3.<java.awt.geom.Line2D: double getY1()>();

        virtualinvoke $r4.<net.sourceforge.plantuml.mindmap.StripeFrontier: void addSegment(double,double,double)>($d0, $d1, $d2);

        $z1 = <net.sourceforge.plantuml.mindmap.Tetris: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $d10 = virtualinvoke r3.<java.awt.geom.Line2D: double getY1()>();

        $d11 = virtualinvoke r3.<java.awt.geom.Line2D: double getY2()>();

        $b2 = $d10 cmpl $d11;

        if $b2 == 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        r5 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: java.awt.geom.Line2D getSegmentB2()>();

        $d3 = virtualinvoke r5.<java.awt.geom.Line2D: double getX1()>();

        $d4 = virtualinvoke r5.<java.awt.geom.Line2D: double getX2()>();

        $b0 = $d3 cmpl $d4;

        if $b0 == 0 goto label2;

        $r7 = r0.<net.sourceforge.plantuml.mindmap.Tetris: net.sourceforge.plantuml.mindmap.StripeFrontier frontier>;

        $d7 = virtualinvoke r5.<java.awt.geom.Line2D: double getX1()>();

        $d8 = virtualinvoke r5.<java.awt.geom.Line2D: double getX2()>();

        $d9 = virtualinvoke r5.<java.awt.geom.Line2D: double getY1()>();

        virtualinvoke $r7.<net.sourceforge.plantuml.mindmap.StripeFrontier: void addSegment(double,double,double)>($d7, $d8, $d9);

     label2:
        $z2 = <net.sourceforge.plantuml.mindmap.Tetris: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $d5 = virtualinvoke r5.<java.awt.geom.Line2D: double getY1()>();

        $d6 = virtualinvoke r5.<java.awt.geom.Line2D: double getY2()>();

        $b1 = $d5 cmpl $d6;

        if $b1 == 0 goto label3;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label3:
        return;
    }

    public java.util.List getElements()
    {
        net.sourceforge.plantuml.mindmap.Tetris r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.mindmap.Tetris;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List elements>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/mindmap/Tetris;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.mindmap.Tetris: boolean $assertionsDisabled> = $z1;

        return;
    }
}
