public class net.sourceforge.plantuml.acearth.PSystemXearth extends net.sourceforge.plantuml.AbstractPSystem
{
    private final int width;
    private final int height;
    private final java.util.Map config;
    private final java.util.List markers;
    private final java.util.Collection enums;
    private final java.util.Collection doubles;
    private final java.util.Collection integers;
    private final java.util.Collection booleans;

    public void <init>(net.sourceforge.plantuml.core.UmlSource, int, int, java.util.Map, java.util.List)
    {
        net.sourceforge.plantuml.acearth.PSystemXearth r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.lang.String[] $r2, $r4, $r6, $r8;
        java.util.List $r3, $r5, $r7, $r9, r11;
        int i0, i1;
        java.util.Map r10;

        r0 := @this: net.sourceforge.plantuml.acearth.PSystemXearth;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r10 := @parameter3: java.util.Map;

        r11 := @parameter4: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "viewPositionType";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection enums> = $r3;

        $r4 = newarray (java.lang.String)[8];

        $r4[0] = "sunPosRelLat";

        $r4[1] = "sunPosRelLong";

        $r4[2] = "orbitPeriod";

        $r4[3] = "orbitInclination";

        $r4[4] = "viewPosLat";

        $r4[5] = "viewPosLong";

        $r4[6] = "starFrequency";

        $r4[7] = "viewMagnification";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection doubles> = $r5;

        $r6 = newarray (java.lang.String)[6];

        $r6[0] = "daySideBrightness";

        $r6[1] = "nightSideBrightness";

        $r6[2] = "terminatorDiscontinuity";

        $r6[3] = "gridDivision";

        $r6[4] = "gridPixelDivision";

        $r6[5] = "bigStars";

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection integers> = $r7;

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "shadeP";

        $r8[1] = "gridP";

        $r8[2] = "starsP";

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection booleans> = $r9;

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: int width> = i0;

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: int height> = i1;

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Map config> = r10;

        r0.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.List markers> = r11;

        return;
    }

    protected final net.sourceforge.plantuml.core.ImageData exportDiagramNow(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        ext.plantuml.com.ctreber.acearth.ACearth $r1;
        net.sourceforge.plantuml.acearth.PSystemXearth r2;
        java.util.List $r3;
        ext.plantuml.com.ctreber.acearth.ConfigurationACearth r5;
        int $i0, $i1, $i2, $i3, $i4, $i7, i8;
        java.util.Map $r6;
        java.util.Set $r7;
        java.util.Iterator r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.OutputStream r9;
        net.sourceforge.plantuml.api.ImageDataSimple $r10;
        java.lang.Object $r11, $r13, $r15;
        java.util.Map$Entry r12;
        java.lang.String r14, r16;
        java.util.Collection $r17, $r18, $r19, $r20;
        java.lang.UnsupportedOperationException $r21;
        double $d0;
        ext.plantuml.com.ctreber.aclib.gui.MOEnum $r22;
        java.util.Date r23;
        long $l5, $l6;
        java.lang.Throwable $r24;
        net.sourceforge.plantuml.FileFormatOption r26;

        r2 := @this: net.sourceforge.plantuml.acearth.PSystemXearth;

        r9 := @parameter0: java.io.OutputStream;

        i8 := @parameter1: int;

        r26 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        entermonitor class "Lnet/sourceforge/plantuml/acearth/PSystemXearth;";

     label01:
        $r1 = new ext.plantuml.com.ctreber.acearth.ACearth;

        $r3 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.List markers>;

        specialinvoke $r1.<ext.plantuml.com.ctreber.acearth.ACearth: void <init>(java.util.List)>($r3);

        r5 = virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.ACearth: ext.plantuml.com.ctreber.acearth.ConfigurationACearth getConf()>();

        $i0 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: int width>;

        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.ConfigurationACearth: void setInt(java.lang.String,int)>("imageWidth", $i0);

        $i1 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: int height>;

        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.ConfigurationACearth: void setInt(java.lang.String,int)>("imageHeight", $i1);

        $r6 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Map config>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r11 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        r14 = (java.lang.String) $r13;

        $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        r16 = (java.lang.String) $r15;

        $z1 = virtualinvoke r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("GMT");

        if $z1 == 0 goto label03;

        r23 = specialinvoke r2.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Date extractGmt(java.lang.String)>(r16);

        $l5 = virtualinvoke r23.<java.util.Date: long getTime()>();

        $l6 = $l5 / 1000L;

        $i7 = (int) $l6;

        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.ConfigurationACearth: void setInt(java.lang.String,int)>("fixedTime", $i7);

        goto label08;

     label03:
        $r17 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection enums>;

        $z2 = interfaceinvoke $r17.<java.util.Collection: boolean contains(java.lang.Object)>(r14);

        if $z2 == 0 goto label04;

        $r22 = virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.ConfigurationACearth: ext.plantuml.com.ctreber.aclib.gui.MOEnum getMOEnum(java.lang.String)>(r14);

        virtualinvoke $r22.<ext.plantuml.com.ctreber.aclib.gui.MOEnum: void set(java.lang.Object)>(r16);

        goto label08;

     label04:
        $r18 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection doubles>;

        $z3 = interfaceinvoke $r18.<java.util.Collection: boolean contains(java.lang.Object)>(r14);

        if $z3 == 0 goto label05;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r16);

        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.ConfigurationACearth: void setDouble(java.lang.String,double)>(r14, $d0);

        goto label08;

     label05:
        $r19 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection integers>;

        $z4 = interfaceinvoke $r19.<java.util.Collection: boolean contains(java.lang.Object)>(r14);

        if $z4 == 0 goto label06;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16);

        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.ConfigurationACearth: void setInt(java.lang.String,int)>(r14, $i4);

        goto label08;

     label06:
        $r20 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: java.util.Collection booleans>;

        $z5 = interfaceinvoke $r20.<java.util.Collection: boolean contains(java.lang.Object)>(r14);

        if $z5 == 0 goto label07;

        $z6 = virtualinvoke r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.ConfigurationACearth: void setBoolean(java.lang.String,boolean)>(r14, $z6);

        goto label08;

     label07:
        $r21 = new java.lang.UnsupportedOperationException;

        specialinvoke $r21.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r14);

        throw $r21;

     label08:
        goto label02;

     label09:
        virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.ACearth: void exportPng(java.io.OutputStream)>(r9);

        $r10 = new net.sourceforge.plantuml.api.ImageDataSimple;

        $i3 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: int width>;

        $i2 = r2.<net.sourceforge.plantuml.acearth.PSystemXearth: int height>;

        specialinvoke $r10.<net.sourceforge.plantuml.api.ImageDataSimple: void <init>(int,int)>($i3, $i2);

        exitmonitor class "Lnet/sourceforge/plantuml/acearth/PSystemXearth;";

     label10:
        return $r10;

     label11:
        $r24 := @caughtexception;

        exitmonitor class "Lnet/sourceforge/plantuml/acearth/PSystemXearth;";

     label12:
        throw $r24;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private java.util.Date extractGmt(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r1, $r10;
        java.text.SimpleDateFormat $r2, $r6, r12;
        java.util.Locale $r3, $r7;
        java.util.TimeZone $r4;
        java.util.Date $r5;
        java.text.ParseException $r8;
        net.sourceforge.plantuml.acearth.PSystemXearth r11;

        r11 := @this: net.sourceforge.plantuml.acearth.PSystemXearth;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("\\d{4}/\\d{2}/\\d{2} \\d{2}:\\d{2}:\\d{2}");

        if $z0 == 0 goto label1;

        $r6 = new java.text.SimpleDateFormat;

        $r7 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy/MM/dd HH:mm:ss", $r7);

        r12 = $r6;

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("\\d{4}/\\d{2}/\\d{2} \\d{2}:\\d{2}");

        if $z1 == 0 goto label2;

        $r2 = new java.text.SimpleDateFormat;

        $r3 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy/MM/dd HH:mm", $r3);

        r12 = $r2;

        goto label3;

     label2:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label3:
        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke r12.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

     label4:
        $r5 = virtualinvoke r12.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r0);

     label5:
        return $r5;

     label6:
        $r8 := @caughtexception;

        $r10 = new java.lang.UnsupportedOperationException;

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r0);

        throw $r10;

        catch java.text.ParseException from label4 to label5 with label6;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.acearth.PSystemXearth r1;

        r1 := @this: net.sourceforge.plantuml.acearth.PSystemXearth;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("(XEarth)");

        return $r0;
    }
}
