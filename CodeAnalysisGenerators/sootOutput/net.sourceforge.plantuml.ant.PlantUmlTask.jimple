public class net.sourceforge.plantuml.ant.PlantUmlTask extends org.apache.tools.ant.Task
{
    private java.lang.String dir;
    private final net.sourceforge.plantuml.Option option;
    private java.util.List filesets;
    private java.util.List filelists;
    private java.util.concurrent.atomic.AtomicInteger nbFiles;
    private java.util.concurrent.ExecutorService executorService;

    public void <init>()
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        net.sourceforge.plantuml.Option $r1;
        java.util.ArrayList $r2, $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        specialinvoke r0.<org.apache.tools.ant.Task: void <init>()>();

        r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.lang.String dir> = null;

        $r1 = new net.sourceforge.plantuml.Option;

        specialinvoke $r1.<net.sourceforge.plantuml.Option: void <init>()>();

        r0.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.List filesets> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.List filelists> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.atomic.AtomicInteger nbFiles> = $r4;

        return;
    }

    public void addFileset(org.apache.tools.ant.types.FileSet)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        org.apache.tools.ant.types.FileSet r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: org.apache.tools.ant.types.FileSet;

        $r2 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.List filesets>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addFilelist(org.apache.tools.ant.types.FileList)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        org.apache.tools.ant.types.FileList r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: org.apache.tools.ant.types.FileList;

        $r2 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.List filelists>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void execute() throws org.apache.tools.ant.BuildException
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        net.sourceforge.plantuml.Option $r1, $r9;
        boolean $z0, $z1, $z3, $z4;
        java.lang.String $r2, $r13, $r16, $r19, $r31;
        java.util.List $r3, $r4;
        java.util.concurrent.ExecutorService $r5, $r6, $r8;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Object $r10, $r11;
        java.lang.InterruptedException $r14;
        java.io.IOException $r17;
        java.io.File r20, r23, r26, $r34;
        java.util.Iterator r21, r24;
        org.apache.tools.ant.types.FileSet r22;
        org.apache.tools.ant.types.FileList r25;
        java.lang.StringBuilder $r28, $r30, $r35;
        java.util.concurrent.atomic.AtomicInteger $r29;
        int $i0;
        org.apache.tools.ant.BuildException $r36, $r37;
        java.lang.Throwable $r38, $r39;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        $r1 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.Option: boolean isSplash()>();

        if $z0 == 0 goto label01;

        staticinvoke <net.sourceforge.plantuml.Splash: void createSplash()>();

     label01:
        virtualinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void log(java.lang.String)>("Starting PlantUML");

     label02:
        $r2 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.lang.String dir>;

        if $r2 == null goto label03;

        $r34 = new java.io.File;

        $r13 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.lang.String dir>;

        specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>($r13);

        r20 = specialinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.io.File processingSingleDirectory(java.io.File)>($r34);

        specialinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void eventuallyFailfast(java.io.File)>(r20);

     label03:
        $r3 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.List filesets>;

        r21 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r11 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.tools.ant.types.FileSet) $r11;

        r23 = specialinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.io.File manageFileSet(org.apache.tools.ant.types.FileSet)>(r22);

        specialinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void eventuallyFailfast(java.io.File)>(r23);

        goto label04;

     label05:
        $r4 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.List filelists>;

        r24 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r10 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.apache.tools.ant.types.FileList) $r10;

        r26 = specialinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.io.File manageFileList(org.apache.tools.ant.types.FileList)>(r25);

        specialinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void eventuallyFailfast(java.io.File)>(r26);

        goto label06;

     label07:
        $r5 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.ExecutorService executorService>;

        if $r5 == null goto label08;

        $r6 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.ExecutorService executorService>;

        interfaceinvoke $r6.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r8 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.ExecutorService executorService>;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r7);

        $r9 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $z3 = virtualinvoke $r9.<net.sourceforge.plantuml.Option: boolean isSplash()>();

        if $z3 == 0 goto label08;

        staticinvoke <net.sourceforge.plantuml.Splash: void disposeSplash()>();

     label08:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nb images generated: ");

        $r29 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.atomic.AtomicInteger nbFiles>;

        $i0 = virtualinvoke $r29.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void log(java.lang.String)>($r31);

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.io.IOException: void printStackTrace()>();

        $r36 = new org.apache.tools.ant.BuildException;

        $r19 = virtualinvoke $r17.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r36.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>($r19);

        $r38 = (java.lang.Throwable) $r36;

        throw $r38;

     label11:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.InterruptedException: void printStackTrace()>();

        $r37 = new org.apache.tools.ant.BuildException;

        $r16 = virtualinvoke $r14.<java.lang.InterruptedException: java.lang.String toString()>();

        specialinvoke $r37.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>($r16);

        $r39 = (java.lang.Throwable) $r37;

        throw $r39;

     label12:
        return;

        catch java.io.IOException from label02 to label09 with label10;
        catch java.lang.InterruptedException from label02 to label09 with label11;
    }

    private void eventuallyFailfast(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        net.sourceforge.plantuml.ant.PlantUmlTask r1;
        net.sourceforge.plantuml.Option $r2;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r10, $r12, $r14, $r15;
        java.lang.String $r5, $r7, $r11, $r13;
        org.apache.tools.ant.BuildException $r16;
        java.lang.Throwable $r17;

        r1 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.io.File;

        if r0 == null goto label1;

        $r2 = r1.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.Option: boolean isFailfastOrFailfast2()>();

        if $z0 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in file ");

        $r5 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: void log(java.lang.String)>($r7);

        $r16 = new org.apache.tools.ant.BuildException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in file ");

        $r11 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>($r13);

        $r17 = (java.lang.Throwable) $r16;

        throw $r17;

     label1:
        return;
    }

    private java.io.File manageFileList(org.apache.tools.ant.types.FileList) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.tools.ant.types.FileList r0;
        net.sourceforge.plantuml.ant.PlantUmlTask r1;
        org.apache.tools.ant.Project $r2, $r4;
        java.io.File r3, $r8;
        java.lang.String[] r5;
        int i0, i1;
        java.lang.String r7;
        boolean z0;

        r1 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: org.apache.tools.ant.types.FileList;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: org.apache.tools.ant.Project getProject()>();

        r3 = virtualinvoke r0.<org.apache.tools.ant.types.FileList: java.io.File getDir(org.apache.tools.ant.Project)>($r2);

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: org.apache.tools.ant.Project getProject()>();

        r5 = virtualinvoke r0.<org.apache.tools.ant.types.FileList: java.lang.String[] getFiles(org.apache.tools.ant.Project)>($r4);

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r7 = r5[i1];

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, r7);

        z0 = specialinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: boolean processingSingleFile(java.io.File)>($r8);

        if z0 == 0 goto label2;

        return $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private java.io.File manageFileSet(org.apache.tools.ant.types.FileSet) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.tools.ant.types.FileSet r0;
        net.sourceforge.plantuml.ant.PlantUmlTask r1;
        org.apache.tools.ant.Project $r2, $r4;
        org.apache.tools.ant.DirectoryScanner r3;
        java.io.File r5, $r8, $r9, r16;
        java.lang.String[] r6, r7;
        int i0, i1, i2, i3;
        java.lang.String r11, r14;
        boolean z0;

        r1 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: org.apache.tools.ant.types.FileSet;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: org.apache.tools.ant.Project getProject()>();

        r3 = virtualinvoke r0.<org.apache.tools.ant.types.FileSet: org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)>($r2);

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: org.apache.tools.ant.Project getProject()>();

        r5 = virtualinvoke r0.<org.apache.tools.ant.types.FileSet: java.io.File getDir(org.apache.tools.ant.Project)>($r4);

        r6 = virtualinvoke r3.<org.apache.tools.ant.DirectoryScanner: java.lang.String[] getIncludedFiles()>();

        r7 = virtualinvoke r3.<org.apache.tools.ant.DirectoryScanner: java.lang.String[] getIncludedDirectories()>();

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r11 = r6[i1];

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, r11);

        z0 = specialinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: boolean processingSingleFile(java.io.File)>($r9);

        if z0 == 0 goto label2;

        return $r9;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i2 = lengthof r7;

        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        r14 = r7[i3];

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, r14);

        r16 = specialinvoke r1.<net.sourceforge.plantuml.ant.PlantUmlTask: java.io.File processingSingleDirectory(java.io.File)>($r8);

        if r16 == null goto label5;

        return r16;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return null;
    }

    private boolean processingSingleFile(java.io.File) throws java.io.IOException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.SourceFileReader $r1;
        java.io.File r2, $r6;
        net.sourceforge.plantuml.preproc.Defines $r3;
        net.sourceforge.plantuml.ant.PlantUmlTask r4;
        net.sourceforge.plantuml.Option $r5, $r7, $r9, $r11, $r14;
        java.util.List $r8;
        java.lang.String $r10, $r21, $r23;
        net.sourceforge.plantuml.FileFormatOption $r12;
        java.util.concurrent.ExecutorService $r15, $r17;
        net.sourceforge.plantuml.ant.PlantUmlTask$1 $r16;
        java.lang.StringBuilder $r19, $r20, $r22;

        r4 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r2 := @parameter0: java.io.File;

        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: boolean isVerbose()>();

        if $z0 == 0 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ");

        $r21 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<net.sourceforge.plantuml.ant.PlantUmlTask: void log(java.lang.String)>($r23);

     label1:
        $r1 = new net.sourceforge.plantuml.SourceFileReader;

        $r3 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(java.io.File)>(r2);

        $r5 = r4.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.Option: java.io.File getOutputDir()>();

        $r7 = r4.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.Option: java.util.List getConfig()>();

        $r9 = r4.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r11 = r4.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        specialinvoke $r1.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r3, r2, $r6, $r8, $r10, $r12);

        $r14 = r4.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $z1 = virtualinvoke $r14.<net.sourceforge.plantuml.Option: boolean isCheckOnly()>();

        if $z1 == 0 goto label2;

        $z3 = virtualinvoke $r1.<net.sourceforge.plantuml.SourceFileReader: boolean hasError()>();

        return $z3;

     label2:
        $r15 = r4.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.ExecutorService executorService>;

        if $r15 != null goto label3;

        $z2 = specialinvoke r4.<net.sourceforge.plantuml.ant.PlantUmlTask: boolean doFile(java.io.File,net.sourceforge.plantuml.SourceFileReader)>(r2, $r1);

        return $z2;

     label3:
        staticinvoke <net.sourceforge.plantuml.Splash: void incTotal(int)>(1);

        $r17 = r4.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.ExecutorService executorService>;

        $r16 = new net.sourceforge.plantuml.ant.PlantUmlTask$1;

        specialinvoke $r16.<net.sourceforge.plantuml.ant.PlantUmlTask$1: void <init>(net.sourceforge.plantuml.ant.PlantUmlTask,java.io.File,net.sourceforge.plantuml.SourceFileReader)>(r4, r2, $r1);

        interfaceinvoke $r17.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r16);

        return 0;
    }

    private boolean doFile(java.io.File, net.sourceforge.plantuml.SourceFileReader) throws java.io.IOException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.SourceFileReader r0;
        java.util.List r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, z3;
        net.sourceforge.plantuml.ant.PlantUmlTask r3;
        net.sourceforge.plantuml.Option $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r15, $r16, $r17, $r19;
        java.io.File r7;
        java.lang.String $r8, $r10, $r18, $r20;
        java.lang.Object $r11;
        net.sourceforge.plantuml.GeneratedImage r12;
        net.sourceforge.plantuml.OptionFlags $r13;
        java.util.concurrent.atomic.AtomicInteger $r14;
        int $i1;

        r3 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r7 := @parameter0: java.io.File;

        r0 := @parameter1: net.sourceforge.plantuml.SourceFileReader;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.SourceFileReader: java.util.List getGeneratedImages()>();

        z3 = 0;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (net.sourceforge.plantuml.GeneratedImage) $r11;

        $r13 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z2 = virtualinvoke $r13.<net.sourceforge.plantuml.OptionFlags: boolean isVerbose()>();

        if $z2 == 0 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = interfaceinvoke r12.<net.sourceforge.plantuml.GeneratedImage: java.lang.String getDescription()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<net.sourceforge.plantuml.ant.PlantUmlTask: void myLog(java.lang.String)>($r20);

     label2:
        $r14 = r3.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.atomic.AtomicInteger nbFiles>;

        virtualinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(1);

        $i1 = interfaceinvoke r12.<net.sourceforge.plantuml.GeneratedImage: int lineErrorRaw()>();

        if $i1 == -1 goto label3;

        z3 = 1;

     label3:
        goto label1;

     label4:
        staticinvoke <net.sourceforge.plantuml.Splash: void incDone(boolean)>(z3);

        if z3 == 0 goto label5;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r8 = virtualinvoke r7.<java.io.File: java.lang.String getCanonicalPath()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<net.sourceforge.plantuml.ant.PlantUmlTask: void myLog(java.lang.String)>($r10);

     label5:
        if z3 == 0 goto label6;

        $r4 = r3.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $z1 = virtualinvoke $r4.<net.sourceforge.plantuml.Option: boolean isFailfastOrFailfast2()>();

        if $z1 == 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    private synchronized void myLog(java.lang.String)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void log(java.lang.String)>(r1);

        return;
    }

    private java.io.File processingSingleDirectory(java.io.File) throws java.io.IOException, java.lang.InterruptedException
    {
        java.io.File r0, r2;
        boolean $z0, $z1, $z2, z3;
        java.io.File[] $r1, r12;
        int i0, i1;
        net.sourceforge.plantuml.ant.PlantUmlTask r3;
        java.lang.String $r4, $r7, r11;
        java.lang.StringBuilder $r6, $r8, $r9, $r13;
        org.apache.tools.ant.BuildException $r14;
        java.lang.Throwable $r15;

        r3 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The file ");

        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exists.");

        r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<net.sourceforge.plantuml.ant.PlantUmlTask: void log(java.lang.String)>(r11);

        $r14 = new org.apache.tools.ant.BuildException;

        specialinvoke $r14.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>(r11);

        $r15 = (java.lang.Throwable) $r14;

        throw $r15;

     label1:
        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 == null goto label6;

        r12 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r12;

        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        r2 = r12[i1];

        $z1 = virtualinvoke r2.<java.io.File: boolean isFile()>();

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $r4 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $z2 = specialinvoke r3.<net.sourceforge.plantuml.ant.PlantUmlTask: boolean fileToProcess(java.lang.String)>($r4);

        if $z2 != 0 goto label4;

        goto label5;

     label4:
        z3 = specialinvoke r3.<net.sourceforge.plantuml.ant.PlantUmlTask: boolean processingSingleFile(java.io.File)>(r2);

        if z3 == 0 goto label5;

        return r2;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        return null;
    }

    private boolean fileToProcess(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        net.sourceforge.plantuml.ant.PlantUmlTask r2;

        r2 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <net.sourceforge.plantuml.Option: java.lang.String getPattern()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>($r1);

        return $z0;
    }

    public void setDir(java.lang.String)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.ant.PlantUmlTask: java.lang.String dir> = r1;

        return;
    }

    public void setOutput(java.lang.String)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.io.File $r1;
        java.lang.String r2;
        net.sourceforge.plantuml.Option $r3;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r2 := @parameter0: java.lang.String;

        $r3 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        virtualinvoke $r3.<net.sourceforge.plantuml.Option: void setOutputDir(java.io.File)>($r1);

        return;
    }

    public void setCharset(java.lang.String)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.lang.String r1;
        net.sourceforge.plantuml.Option $r2;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        virtualinvoke $r2.<net.sourceforge.plantuml.Option: void setCharset(java.lang.String)>(r1);

        return;
    }

    public void setConfig(java.lang.String)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.lang.String r1, $r8;
        net.sourceforge.plantuml.Option $r2;
        java.io.IOException $r3;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        virtualinvoke $r2.<net.sourceforge.plantuml.Option: void initConfig(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void log(java.lang.String)>($r8);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setKeepTmpFiles(java.lang.String)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setDebugSvek(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        net.sourceforge.plantuml.ant.PlantUmlTask r2;
        net.sourceforge.plantuml.Option $r3;

        r2 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r3 = r2.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        virtualinvoke $r3.<net.sourceforge.plantuml.Option: void setDebugSvek(boolean)>(1);

     label1:
        return;
    }

    public void setVerbose(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        net.sourceforge.plantuml.OptionFlags $r2;
        net.sourceforge.plantuml.ant.PlantUmlTask r3;

        r3 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.OptionFlags: void setVerbose(boolean)>(1);

     label1:
        return;
    }

    public void setFormat(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        net.sourceforge.plantuml.ant.PlantUmlTask r14;
        net.sourceforge.plantuml.FileFormatOption $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r51;
        net.sourceforge.plantuml.FileFormat $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52;
        net.sourceforge.plantuml.Option $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r50, $r53;

        r14 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "scxml";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label01;

        $r53 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r51 = new net.sourceforge.plantuml.FileFormatOption;

        $r52 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SCXML>;

        specialinvoke $r51.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r52);

        virtualinvoke $r53.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r51);

     label01:
        $r2 = "xmi";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label02;

        $r50 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r48 = new net.sourceforge.plantuml.FileFormatOption;

        $r49 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STANDARD>;

        specialinvoke $r48.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r49);

        virtualinvoke $r50.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r48);

     label02:
        $r3 = "xmi:argo";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label03;

        $r47 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r45 = new net.sourceforge.plantuml.FileFormatOption;

        $r46 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_ARGO>;

        specialinvoke $r45.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r46);

        virtualinvoke $r47.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r45);

     label03:
        $r4 = "xmi:start";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label04;

        $r44 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r42 = new net.sourceforge.plantuml.FileFormatOption;

        $r43 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STAR>;

        specialinvoke $r42.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r43);

        virtualinvoke $r44.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r42);

     label04:
        $r5 = "eps";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label05;

        $r41 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r39 = new net.sourceforge.plantuml.FileFormatOption;

        $r40 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS>;

        specialinvoke $r39.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r40);

        virtualinvoke $r41.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r39);

     label05:
        $r6 = "braille";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 == 0 goto label06;

        $r38 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r36 = new net.sourceforge.plantuml.FileFormatOption;

        $r37 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BRAILLE_PNG>;

        specialinvoke $r36.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r37);

        virtualinvoke $r38.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r36);

     label06:
        $r7 = "pdf";

        $z6 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z6 == 0 goto label07;

        $r35 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r33 = new net.sourceforge.plantuml.FileFormatOption;

        $r34 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PDF>;

        specialinvoke $r33.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r34);

        virtualinvoke $r35.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r33);

     label07:
        $r8 = "latex";

        $z7 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z7 == 0 goto label08;

        $r32 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r30 = new net.sourceforge.plantuml.FileFormatOption;

        $r31 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX>;

        specialinvoke $r30.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r31);

        virtualinvoke $r32.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r30);

     label08:
        $r9 = "latex:nopreamble";

        $z8 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z8 == 0 goto label09;

        $r29 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r27 = new net.sourceforge.plantuml.FileFormatOption;

        $r28 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX_NO_PREAMBLE>;

        specialinvoke $r27.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r28);

        virtualinvoke $r29.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r27);

     label09:
        $r10 = "eps:text";

        $z9 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z9 == 0 goto label10;

        $r26 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r24 = new net.sourceforge.plantuml.FileFormatOption;

        $r25 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS_TEXT>;

        specialinvoke $r24.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r25);

        virtualinvoke $r26.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r24);

     label10:
        $r11 = "svg";

        $z10 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z10 == 0 goto label11;

        $r23 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r21 = new net.sourceforge.plantuml.FileFormatOption;

        $r22 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        specialinvoke $r21.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r22);

        virtualinvoke $r23.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r21);

     label11:
        $r12 = "txt";

        $z11 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z11 == 0 goto label12;

        $r20 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r18 = new net.sourceforge.plantuml.FileFormatOption;

        $r19 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ATXT>;

        specialinvoke $r18.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r19);

        virtualinvoke $r20.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r18);

     label12:
        $r13 = "utxt";

        $z12 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z12 == 0 goto label13;

        $r17 = r14.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $r15 = new net.sourceforge.plantuml.FileFormatOption;

        $r16 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat UTXT>;

        specialinvoke $r15.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r16);

        virtualinvoke $r17.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r15);

     label13:
        return;
    }

    public void setGraphvizDot(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.ant.PlantUmlTask r1;

        r1 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: void setDotExecutable(java.lang.String)>(r0);

        return;
    }

    public void setNbThread(java.lang.String)
    {
        java.lang.String r0, $r8;
        net.sourceforge.plantuml.ant.PlantUmlTask r1;
        net.sourceforge.plantuml.Option $r2, $r3, $r5, $r6;
        int $i0, $i1, i2, i3;
        java.util.concurrent.ExecutorService $r4, $r7;
        boolean $z0, $z1;

        r1 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z0 == 0 goto label1;

        $r5 = r1.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        virtualinvoke $r5.<net.sourceforge.plantuml.Option: void setNbThreads(int)>($i1);

        $r6 = r1.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        i2 = virtualinvoke $r6.<net.sourceforge.plantuml.Option: int getNbThreads()>();

        $r7 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(i2);

        r1.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.ExecutorService executorService> = $r7;

     label1:
        $r8 = "auto";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r2 = r1.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        $i0 = staticinvoke <net.sourceforge.plantuml.Option: int defaultNbThreads()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.Option: void setNbThreads(int)>($i0);

        $r3 = r1.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        i3 = virtualinvoke $r3.<net.sourceforge.plantuml.Option: int getNbThreads()>();

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(i3);

        r1.<net.sourceforge.plantuml.ant.PlantUmlTask: java.util.concurrent.ExecutorService executorService> = $r4;

     label2:
        return;
    }

    public void setNbThreads(java.lang.String)
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: void setNbThread(java.lang.String)>(r1);

        return;
    }

    public void setFailFast(java.lang.String)
    {
        java.lang.String r0, $r1, $r4, $r5;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.ant.PlantUmlTask r2;
        net.sourceforge.plantuml.Option $r3;

        r2 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r4 = "yes";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r5 = "on";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r3 = r2.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        virtualinvoke $r3.<net.sourceforge.plantuml.Option: void setFailfast(boolean)>($z4);

        return;
    }

    public void setFailFast2(java.lang.String)
    {
        java.lang.String r0, $r1, $r4, $r5;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.ant.PlantUmlTask r2;
        net.sourceforge.plantuml.Option $r3;

        r2 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r4 = "yes";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r5 = "on";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r3 = r2.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        virtualinvoke $r3.<net.sourceforge.plantuml.Option: void setFailfast2(boolean)>($z4);

        return;
    }

    public void setCheckOnly(java.lang.String)
    {
        java.lang.String r0, $r1, $r4, $r5;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.ant.PlantUmlTask r2;
        net.sourceforge.plantuml.Option $r3;

        r2 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r4 = "yes";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r5 = "on";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r3 = r2.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        virtualinvoke $r3.<net.sourceforge.plantuml.Option: void setCheckOnly(boolean)>($z4);

        return;
    }

    public void setOverwrite(java.lang.String)
    {
        java.lang.String r0, $r1, $r3, $r4;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.OptionFlags $r2;
        net.sourceforge.plantuml.ant.PlantUmlTask r5;

        r5 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r3 = "yes";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r4 = "on";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r2 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.OptionFlags: void setOverwrite(boolean)>($z4);

        return;
    }

    public void setFileSeparator(java.lang.String)
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        java.lang.String r1;
        net.sourceforge.plantuml.ant.PlantUmlTask r2;

        r2 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: void setFileSeparator(java.lang.String)>(r1);

        return;
    }

    public void setHtmlStats(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.ant.PlantUmlTask r4;

        r4 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "yes";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r3 = "on";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void setHtmlStats(boolean)>($z4);

        return;
    }

    public void setXmlStats(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.ant.PlantUmlTask r4;

        r4 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "yes";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r3 = "on";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void setXmlStats(boolean)>($z4);

        return;
    }

    public void setRealTimeStats(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.ant.PlantUmlTask r4;

        r4 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "yes";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r3 = "on";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void setRealTimeStats(boolean)>($z4);

        return;
    }

    public void setEnableStats(java.lang.String)
    {
        java.lang.String r0, $r1, $r3, $r4;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.OptionFlags $r2;
        net.sourceforge.plantuml.ant.PlantUmlTask r5;

        r5 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r3 = "yes";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r4 = "on";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r2 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.OptionFlags: void setEnableStats(boolean)>($z4);

        return;
    }

    public void setSplash(java.lang.String)
    {
        java.lang.String r0, $r1, $r4, $r5;
        boolean $z0, $z2, $z3, $z4;
        net.sourceforge.plantuml.ant.PlantUmlTask r2;
        net.sourceforge.plantuml.Option $r3;

        r2 := @this: net.sourceforge.plantuml.ant.PlantUmlTask;

        r0 := @parameter0: java.lang.String;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r4 = "yes";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r5 = "on";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r3 = r2.<net.sourceforge.plantuml.ant.PlantUmlTask: net.sourceforge.plantuml.Option option>;

        virtualinvoke $r3.<net.sourceforge.plantuml.Option: void setSplash(boolean)>($z4);

        return;
    }

    static boolean access$000(net.sourceforge.plantuml.ant.PlantUmlTask, java.io.File, net.sourceforge.plantuml.SourceFileReader) throws java.io.IOException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.ant.PlantUmlTask r0;
        java.io.File r1;
        net.sourceforge.plantuml.SourceFileReader r2;
        boolean $z0;

        r0 := @parameter0: net.sourceforge.plantuml.ant.PlantUmlTask;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: net.sourceforge.plantuml.SourceFileReader;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.ant.PlantUmlTask: boolean doFile(java.io.File,net.sourceforge.plantuml.SourceFileReader)>(r1, r2);

        return $z0;
    }
}
