public class net.sourceforge.plantuml.command.CommandExecutionResult extends java.lang.Object
{
    private final java.lang.String error;
    private final net.sourceforge.plantuml.AbstractPSystem newDiagram;
    private final java.util.List debugLines;
    private final int score;

    private void <init>(net.sourceforge.plantuml.AbstractPSystem, java.lang.String, int, java.util.List)
    {
        net.sourceforge.plantuml.command.CommandExecutionResult r0;
        java.lang.String r1;
        net.sourceforge.plantuml.AbstractPSystem r2;
        java.util.List r3;
        int i0;

        r0 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        r2 := @parameter0: net.sourceforge.plantuml.AbstractPSystem;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.command.CommandExecutionResult: java.lang.String error> = r1;

        r0.<net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.AbstractPSystem newDiagram> = r2;

        r0.<net.sourceforge.plantuml.command.CommandExecutionResult: java.util.List debugLines> = r3;

        r0.<net.sourceforge.plantuml.command.CommandExecutionResult: int score> = i0;

        return;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult withDiagram(net.sourceforge.plantuml.AbstractPSystem)
    {
        net.sourceforge.plantuml.command.CommandExecutionResult $r0, r2;
        net.sourceforge.plantuml.AbstractPSystem r1;
        java.lang.String $r3;

        r2 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        r1 := @parameter0: net.sourceforge.plantuml.AbstractPSystem;

        $r0 = new net.sourceforge.plantuml.command.CommandExecutionResult;

        $r3 = r2.<net.sourceforge.plantuml.command.CommandExecutionResult: java.lang.String error>;

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandExecutionResult: void <init>(net.sourceforge.plantuml.AbstractPSystem,java.lang.String,int,java.util.List)>(r1, $r3, 0, null);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        net.sourceforge.plantuml.command.CommandExecutionResult r1;
        java.lang.String $r2, $r5, $r7;

        r1 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<net.sourceforge.plantuml.command.CommandExecutionResult: java.lang.String error>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static net.sourceforge.plantuml.command.CommandExecutionResult newDiagram(net.sourceforge.plantuml.AbstractPSystem)
    {
        net.sourceforge.plantuml.command.CommandExecutionResult $r0;
        net.sourceforge.plantuml.AbstractPSystem r1;

        r1 := @parameter0: net.sourceforge.plantuml.AbstractPSystem;

        $r0 = new net.sourceforge.plantuml.command.CommandExecutionResult;

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandExecutionResult: void <init>(net.sourceforge.plantuml.AbstractPSystem,java.lang.String,int,java.util.List)>(r1, null, 0, null);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.CommandExecutionResult ok()
    {
        net.sourceforge.plantuml.command.CommandExecutionResult $r0;

        $r0 = new net.sourceforge.plantuml.command.CommandExecutionResult;

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandExecutionResult: void <init>(net.sourceforge.plantuml.AbstractPSystem,java.lang.String,int,java.util.List)>(null, null, 0, null);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.CommandExecutionResult badColor()
    {
        net.sourceforge.plantuml.command.CommandExecutionResult $r0;

        $r0 = new net.sourceforge.plantuml.command.CommandExecutionResult;

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandExecutionResult: void <init>(net.sourceforge.plantuml.AbstractPSystem,java.lang.String,int,java.util.List)>(null, "No such color", 1, null);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)
    {
        net.sourceforge.plantuml.command.CommandExecutionResult $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.CommandExecutionResult;

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandExecutionResult: void <init>(net.sourceforge.plantuml.AbstractPSystem,java.lang.String,int,java.util.List)>(null, r1, 0, null);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String, java.lang.Throwable)
    {
        net.sourceforge.plantuml.command.CommandExecutionResult $r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        java.util.List $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r0 = new net.sourceforge.plantuml.command.CommandExecutionResult;

        $r3 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: java.util.List getStackTrace(java.lang.Throwable)>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandExecutionResult: void <init>(net.sourceforge.plantuml.AbstractPSystem,java.lang.String,int,java.util.List)>(null, r1, 0, $r3);

        return $r0;
    }

    public static java.util.List getStackTrace(java.lang.Throwable)
    {
        java.util.ArrayList $r0;
        java.lang.Throwable r2, $r4, r23;
        java.lang.String $r3, $r7, $r9, $r13, $r15, $r18, $r20;
        java.lang.StringBuilder $r5, $r6, $r8, $r11, $r12, $r14, $r16, $r17, $r19;
        java.lang.StackTraceElement r10, r22;
        java.lang.StackTraceElement[] r21, r24;
        int i0, i1, i2, i3;

        r2 := @parameter0: java.lang.Throwable;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Throwable: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        r21 = virtualinvoke r2.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof r21;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r22 = r21[i1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r18 = virtualinvoke r22.<java.lang.StackTraceElement: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r20);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r4 == null goto label4;

        r23 = virtualinvoke r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("  ");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caused by ");

        $r7 = virtualinvoke r23.<java.lang.Throwable: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        r24 = virtualinvoke r23.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i2 = lengthof r24;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r10 = r24[i3];

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r13 = virtualinvoke r10.<java.lang.StackTraceElement: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15);

        i3 = i3 + 1;

        goto label3;

     label4:
        return $r0;
    }

    public boolean isOk()
    {
        net.sourceforge.plantuml.command.CommandExecutionResult r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandExecutionResult: java.lang.String error>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getError()
    {
        net.sourceforge.plantuml.command.CommandExecutionResult r0;
        boolean $z0;
        java.lang.String $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandExecutionResult: boolean isOk()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.command.CommandExecutionResult: java.lang.String error>;

        return $r1;
    }

    public int getScore()
    {
        net.sourceforge.plantuml.command.CommandExecutionResult r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        $i0 = r0.<net.sourceforge.plantuml.command.CommandExecutionResult: int score>;

        return $i0;
    }

    public net.sourceforge.plantuml.AbstractPSystem getNewDiagram()
    {
        net.sourceforge.plantuml.command.CommandExecutionResult r0;
        net.sourceforge.plantuml.AbstractPSystem $r1;

        r0 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.AbstractPSystem newDiagram>;

        return $r1;
    }

    public java.util.List getDebugLines()
    {
        net.sourceforge.plantuml.command.CommandExecutionResult r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.command.CommandExecutionResult;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandExecutionResult: java.util.List debugLines>;

        return $r1;
    }
}
