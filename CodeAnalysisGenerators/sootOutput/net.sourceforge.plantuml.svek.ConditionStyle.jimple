public final enum class net.sourceforge.plantuml.svek.ConditionStyle extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.svek.ConditionStyle EMPTY_DIAMOND;
    public static final enum net.sourceforge.plantuml.svek.ConditionStyle INSIDE_HEXAGON;
    public static final enum net.sourceforge.plantuml.svek.ConditionStyle INSIDE_DIAMOND;
    private static final net.sourceforge.plantuml.svek.ConditionStyle[] $VALUES;

    public static net.sourceforge.plantuml.svek.ConditionStyle[] values()
    {
        net.sourceforge.plantuml.svek.ConditionStyle[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.svek.ConditionStyle[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.svek.ConditionStyle valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.svek.ConditionStyle $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/svek/ConditionStyle;", r0);

        $r2 = (net.sourceforge.plantuml.svek.ConditionStyle) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.svek.ConditionStyle r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.svek.ConditionStyle;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.svek.ConditionStyle fromString(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.EnumSet $r5;
        java.util.Iterator r6;
        java.lang.Object $r7;
        net.sourceforge.plantuml.svek.ConditionStyle r8, $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.lang.String;

        $r1 = "InsideDiamond";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r13 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_DIAMOND>;

        return $r13;

     label1:
        $r2 = "Foo1";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r12 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_DIAMOND>;

        return $r12;

     label2:
        $r3 = "Diamond";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        $r11 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle EMPTY_DIAMOND>;

        return $r11;

     label3:
        $r4 = "Inside";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label4;

        $r10 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_HEXAGON>;

        return $r10;

     label4:
        $r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/svek/ConditionStyle;");

        r6 = virtualinvoke $r5.<java.util.EnumSet: java.util.Iterator iterator()>();

     label5:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.svek.ConditionStyle) $r7;

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.svek.ConditionStyle: java.lang.String toString()>();

        $z5 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 == 0 goto label6;

        return r8;

     label6:
        goto label5;

     label7:
        return null;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.svek.ConditionStyle $r0, $r1, $r2, $r4, $r5, $r6;
        net.sourceforge.plantuml.svek.ConditionStyle[] $r3;

        $r0 = new net.sourceforge.plantuml.svek.ConditionStyle;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ConditionStyle: void <init>(java.lang.String,int)>("EMPTY_DIAMOND", 0);

        <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle EMPTY_DIAMOND> = $r0;

        $r1 = new net.sourceforge.plantuml.svek.ConditionStyle;

        specialinvoke $r1.<net.sourceforge.plantuml.svek.ConditionStyle: void <init>(java.lang.String,int)>("INSIDE_HEXAGON", 1);

        <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_HEXAGON> = $r1;

        $r2 = new net.sourceforge.plantuml.svek.ConditionStyle;

        specialinvoke $r2.<net.sourceforge.plantuml.svek.ConditionStyle: void <init>(java.lang.String,int)>("INSIDE_DIAMOND", 2);

        <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_DIAMOND> = $r2;

        $r3 = newarray (net.sourceforge.plantuml.svek.ConditionStyle)[3];

        $r4 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle EMPTY_DIAMOND>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_HEXAGON>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_DIAMOND>;

        $r3[2] = $r6;

        <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle[] $VALUES> = $r3;

        return;
    }
}
