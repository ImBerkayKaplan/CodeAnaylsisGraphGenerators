public class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace;
    private final net.sourceforge.plantuml.sequencediagram.MessageExo message;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        return $r1;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace, net.sourceforge.plantuml.sequencediagram.MessageExo, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r3;
        net.sourceforge.plantuml.sequencediagram.MessageExo r4;
        net.sourceforge.plantuml.skin.rose.Rose r5;
        net.sourceforge.plantuml.ISkinParam r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.MessageExo;

        r5 := @parameter2: net.sourceforge.plantuml.skin.rose.Rose;

        r6 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        r1 := @parameter4: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.rose.Rose skin> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        return;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.ArrowComponent $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.ArrowComponent: double getYPoint(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        return $d0;
    }

    private net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r1, $r2, $r4, $r7;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r3;
        int $i0;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.style.Style[] $r6;
        net.sourceforge.plantuml.ISkinParam $r8;
        net.sourceforge.plantuml.cucadiagram.Display $r9;
        net.sourceforge.plantuml.skin.ArrowComponent r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;
        net.sourceforge.plantuml.skin.ArrowConfiguration r12;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        r12 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.skin.ArrowConfiguration getArrowConfiguration()>();

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $i0 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.MessageExoType: int getDirection()>();

        if $i0 != -1 goto label1;

        r12 = virtualinvoke r12.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowConfiguration reverse()>();

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r9 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.cucadiagram.Display getLabelNumbered()>();

        r10 = virtualinvoke $r5.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.ArrowComponent createComponentArrow(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r6, r12, $r8, $r9);

        return r10;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r1;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r5;
        int i0, $i1;
        net.sourceforge.plantuml.skin.ArrowConfiguration r6;
        net.sourceforge.plantuml.sequencediagram.MessageExoType r7, $r9, $r10, $r11, $r12, $r14;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r13, $r16, $r17;
        boolean $z0;
        double $d0, $d1, $d2, $d3, d4, d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.UGraphic r15, r28;
        net.sourceforge.plantuml.skin.ArrowDecoration $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        net.sourceforge.plantuml.skin.Area $r26;
        net.sourceforge.plantuml.ugraphic.UTranslate $r27;
        net.sourceforge.plantuml.skin.Context2D $r29;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        r15 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d4 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: double getPoint1Value(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d5 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: double getPoint2Value(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r4 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i0 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r1, $r4);

        if i0 <= 0 goto label2;

        $r13 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $z0 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.MessageExoType: boolean isRightBorder()>();

        if $z0 == 0 goto label1;

        $d2 = (double) i0;

        $d3 = 5.0 * $d2;

        d4 = d4 + $d3;

        goto label2;

     label1:
        $i1 = i0 - 2;

        $d0 = (double) $i1;

        $d1 = 5.0 * $d0;

        d5 = d5 + $d1;

     label2:
        $r16 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        r6 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.skin.ArrowConfiguration getArrowConfiguration()>();

        $r17 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        r7 = virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $r18 = virtualinvoke r6.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration1()>();

        $r19 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r18 != $r19 goto label3;

        $r12 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        if r7 != $r12 goto label3;

        d4 = d4 + 6.0;

     label3:
        $r20 = virtualinvoke r6.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration2()>();

        $r21 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r20 != $r21 goto label4;

        $r11 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        if r7 != $r11 goto label4;

        d4 = d4 + 6.0;

     label4:
        $r22 = virtualinvoke r6.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration2()>();

        $r23 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r22 != $r23 goto label5;

        $r10 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT>;

        if r7 != $r10 goto label5;

        d5 = d5 - 6.0;

     label5:
        $r24 = virtualinvoke r6.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration1()>();

        $r25 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r24 != $r25 goto label6;

        $r9 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT>;

        if r7 != $r9 goto label6;

        d5 = d5 - 6.0;

     label6:
        $r26 = new net.sourceforge.plantuml.skin.Area;

        $d6 = d5 - d4;

        $d7 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r26.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d6, $d7);

        $r27 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d4);

        r28 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r27);

        $r29 = (net.sourceforge.plantuml.skin.Context2D) r28;

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r28, $r26, $r29);

        return;
    }

    private boolean isShortArrow()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExo: boolean isShortArrow()>();

        return $z0;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    private double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3, $r8;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double d0;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r5;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r6;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r7;
        net.sourceforge.plantuml.real.Real $r9, $r11, $r12;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $z0 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.MessageExoType: boolean isRightBorder()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r9 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>($r8);

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.real.Real getOrigin()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(d0);

        interfaceinvoke $r9.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r12);

     label2:
        return;
    }

    protected final void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3, $r5;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        java.awt.geom.Point2D $r6;
        double d0, d1, $d2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r7;
        net.sourceforge.plantuml.sequencediagram.Event $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        d1 := @parameter0: double;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r6 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: java.awt.geom.Point2D getStartPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5, r4);

        d0 = virtualinvoke $r6.<java.awt.geom.Point2D: double getY()>();

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $d2 = d1 + d0;

        virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event,double)>($r8, $d2);

        return;
    }

    private net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r1;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r2;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r3;
        net.sourceforge.plantuml.real.Real $r4, $r7;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.MessageExoType: boolean isRightBorder()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        return $r7;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.real.Real getOrigin()>();

        return $r4;
    }

    private double getPoint1Value(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r1;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r2;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r3;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r5;
        net.sourceforge.plantuml.real.Real $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.MessageExoType: boolean isRightBorder()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d4 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        return $d4;

     label1:
        $z1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: boolean isShortArrow()>();

        if $z1 == 0 goto label2;

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: double getPoint2Value(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d3 = $d1 - $d2;

        return $d3;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: double getBorder1()>();

        return $d0;
    }

    private double getPoint2Value(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r1;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r2;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r4;
        net.sourceforge.plantuml.real.Real $r5;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.MessageExo message>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.MessageExoType: boolean isRightBorder()>();

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: boolean isShortArrow()>();

        if $z1 == 0 goto label1;

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: double getPoint1Value(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d4 = $d2 + $d3;

        return $d4;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $d1 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: double getBorder2()>();

        return $d1;

     label2:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d0 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        return $d0;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3, $r5;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double d0;
        net.sourceforge.plantuml.real.Real $r6, $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(d0);

        return $r7;
    }
}
