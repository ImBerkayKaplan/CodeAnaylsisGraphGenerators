public class net.sourceforge.plantuml.project.time.Day extends java.lang.Object implements java.lang.Comparable, net.sourceforge.plantuml.project.Value
{
    public static final long MILLISECONDS_PER_DAY;
    private static final java.util.Calendar gmt;
    private final int dayOfMonth;
    private final net.sourceforge.plantuml.project.time.MonthYear monthYear;
    private final long ms1;

    public static net.sourceforge.plantuml.project.time.Day create(int, java.lang.String, int)
    {
        net.sourceforge.plantuml.project.time.Day $r0;
        int i0, i1;
        java.lang.String r1;
        net.sourceforge.plantuml.project.time.Month $r2;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.project.time.Day;

        $r2 = staticinvoke <net.sourceforge.plantuml.project.time.Month: net.sourceforge.plantuml.project.time.Month fromString(java.lang.String)>(r1);

        specialinvoke $r0.<net.sourceforge.plantuml.project.time.Day: void <init>(int,net.sourceforge.plantuml.project.time.Month,int)>(i0, $r2, i1);

        return $r0;
    }

    public static net.sourceforge.plantuml.project.time.Day create(int, int, int)
    {
        net.sourceforge.plantuml.project.time.Day $r0;
        int i0, i1, $i2, i3;
        net.sourceforge.plantuml.project.time.Month[] $r1;
        net.sourceforge.plantuml.project.time.Month $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.project.time.Day;

        $r1 = staticinvoke <net.sourceforge.plantuml.project.time.Month: net.sourceforge.plantuml.project.time.Month[] values()>();

        $i2 = i1 - 1;

        $r2 = $r1[$i2];

        specialinvoke $r0.<net.sourceforge.plantuml.project.time.Day: void <init>(int,net.sourceforge.plantuml.project.time.Month,int)>(i0, $r2, i3);

        return $r0;
    }

    public static net.sourceforge.plantuml.project.time.Day create(long)
    {
        net.sourceforge.plantuml.project.time.Day $r0;
        long l0;

        l0 := @parameter0: long;

        $r0 = new net.sourceforge.plantuml.project.time.Day;

        specialinvoke $r0.<net.sourceforge.plantuml.project.time.Day: void <init>(long)>(l0);

        return $r0;
    }

    public static net.sourceforge.plantuml.project.time.Day today()
    {
        long $l0;
        net.sourceforge.plantuml.project.time.Day $r0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0 = staticinvoke <net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day create(long)>($l0);

        return $r0;
    }

    public int getWeekOfYear(net.sourceforge.plantuml.project.time.WeekNumberStrategy)
    {
        java.util.Calendar $r0, $r2, $r4, $r6, $r7, $r8;
        net.sourceforge.plantuml.project.time.Day r3;
        long $l0;
        net.sourceforge.plantuml.project.time.WeekNumberStrategy r5;
        int $i1, $i2, $i3;
        java.lang.Throwable $r9;

        r3 := @this: net.sourceforge.plantuml.project.time.Day;

        r5 := @parameter0: net.sourceforge.plantuml.project.time.WeekNumberStrategy;

        $r0 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        entermonitor $r0;

     label1:
        $r2 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        virtualinvoke $r2.<java.util.Calendar: void clear()>();

        $r4 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        $l0 = r3.<net.sourceforge.plantuml.project.time.Day: long ms1>;

        virtualinvoke $r4.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        $r6 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        $i1 = virtualinvoke r5.<net.sourceforge.plantuml.project.time.WeekNumberStrategy: int getFirstDayOfWeekAsLegacyInt()>();

        virtualinvoke $r6.<java.util.Calendar: void setFirstDayOfWeek(int)>($i1);

        $r7 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        $i2 = virtualinvoke r5.<net.sourceforge.plantuml.project.time.WeekNumberStrategy: int getMinimalDaysInFirstWeek()>();

        virtualinvoke $r7.<java.util.Calendar: void setMinimalDaysInFirstWeek(int)>($i2);

        $r8 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        $i3 = virtualinvoke $r8.<java.util.Calendar: int get(int)>(3);

        exitmonitor $r0;

     label2:
        return $i3;

     label3:
        $r9 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void <init>(int, net.sourceforge.plantuml.project.time.Month, int)
    {
        net.sourceforge.plantuml.project.time.Day r0;
        int i0, i1, $i2;
        net.sourceforge.plantuml.project.time.Month r1;
        net.sourceforge.plantuml.project.time.MonthYear $r2;
        java.util.Calendar $r3, $r5, $r6, $r7;
        long $l3;
        java.lang.Throwable $r8;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        i1 := @parameter0: int;

        r1 := @parameter1: net.sourceforge.plantuml.project.time.Month;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.project.time.Day: int dayOfMonth> = i0;

        $r2 = staticinvoke <net.sourceforge.plantuml.project.time.MonthYear: net.sourceforge.plantuml.project.time.MonthYear create(int,net.sourceforge.plantuml.project.time.Month)>(i1, r1);

        r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.MonthYear monthYear> = $r2;

        $r3 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        entermonitor $r3;

     label1:
        $r5 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        virtualinvoke $r5.<java.util.Calendar: void clear()>();

        $r6 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        $i2 = virtualinvoke r1.<net.sourceforge.plantuml.project.time.Month: int ordinal()>();

        virtualinvoke $r6.<java.util.Calendar: void set(int,int,int)>(i1, $i2, i0);

        $r7 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        $l3 = virtualinvoke $r7.<java.util.Calendar: long getTimeInMillis()>();

        r0.<net.sourceforge.plantuml.project.time.Day: long ms1> = $l3;

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void <init>(long)
    {
        net.sourceforge.plantuml.project.time.Day r0;
        long l0;
        java.util.Calendar $r1, $r3, $r4, $r5, $r6, $r7;
        int i1, i2, i3;
        net.sourceforge.plantuml.project.time.Month[] $r8;
        net.sourceforge.plantuml.project.time.Month $r9;
        net.sourceforge.plantuml.project.time.MonthYear $r10;
        java.lang.Throwable $r11;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.project.time.Day: long ms1> = l0;

        $r1 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        entermonitor $r1;

     label1:
        $r3 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        virtualinvoke $r3.<java.util.Calendar: void clear()>();

        $r4 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        virtualinvoke $r4.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r5 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        i1 = virtualinvoke $r5.<java.util.Calendar: int get(int)>(1);

        $r6 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        i2 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(2);

        $r7 = <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt>;

        i3 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(5);

        r0.<net.sourceforge.plantuml.project.time.Day: int dayOfMonth> = i3;

        $r8 = staticinvoke <net.sourceforge.plantuml.project.time.Month: net.sourceforge.plantuml.project.time.Month[] values()>();

        $r9 = $r8[i2];

        $r10 = staticinvoke <net.sourceforge.plantuml.project.time.MonthYear: net.sourceforge.plantuml.project.time.MonthYear create(int,net.sourceforge.plantuml.project.time.Month)>(i1, $r9);

        r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.MonthYear monthYear> = $r10;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r11;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public net.sourceforge.plantuml.project.time.Day increment()
    {
        net.sourceforge.plantuml.project.time.Day r0, $r1;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day addDays(int)>(1);

        return $r1;
    }

    public net.sourceforge.plantuml.project.time.Day decrement()
    {
        net.sourceforge.plantuml.project.time.Day r0, $r1;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day addDays(int)>(-1);

        return $r1;
    }

    public net.sourceforge.plantuml.project.time.Day addDays(int)
    {
        net.sourceforge.plantuml.project.time.Day r0, $r1;
        int $i0, i1, $i2;
        long $l3, $l4;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: int getAbsoluteDayNum()>();

        $i2 = $i0 + i1;

        $l3 = (long) $i2;

        $l4 = 86400000L * $l3;

        $r1 = staticinvoke <net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day create(long)>($l4);

        return $r1;
    }

    public final int getAbsoluteDayNum()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $l0 = r0.<net.sourceforge.plantuml.project.time.Day: long ms1>;

        $l1 = $l0 / 86400000L;

        $i2 = (int) $l1;

        return $i2;
    }

    public final long getMillis()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $l0 = r0.<net.sourceforge.plantuml.project.time.Day: long ms1>;

        return $l0;
    }

    public int year()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        net.sourceforge.plantuml.project.time.MonthYear $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $r1 = r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.MonthYear monthYear>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.project.time.MonthYear: int year()>();

        return $i0;
    }

    private int internalNumber()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        net.sourceforge.plantuml.project.time.Month $r1;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: int year()>();

        $i1 = $i0 * 100;

        $i2 = $i1 * 100;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Month month()>();

        $i3 = virtualinvoke $r1.<net.sourceforge.plantuml.project.time.Month: int ordinal()>();

        $i4 = $i3 * 100;

        $i6 = $i2 + $i4;

        $i5 = r0.<net.sourceforge.plantuml.project.time.Day: int dayOfMonth>;

        $i7 = $i6 + $i5;

        return $i7;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r6;
        net.sourceforge.plantuml.project.time.Day r1;
        net.sourceforge.plantuml.project.time.MonthYear $r2;
        java.lang.String $r3, $r7;
        int $i0;

        r1 := @this: net.sourceforge.plantuml.project.time.Day;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.MonthYear monthYear>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.project.time.MonthYear: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i0 = r1.<net.sourceforge.plantuml.project.time.Day: int dayOfMonth>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        net.sourceforge.plantuml.project.time.MonthYear $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $r1 = r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.MonthYear monthYear>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.project.time.MonthYear: int hashCode()>();

        $i1 = r0.<net.sourceforge.plantuml.project.time.Day: int dayOfMonth>;

        $i2 = $i1 * 17;

        $i3 = $i0 + $i2;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        net.sourceforge.plantuml.project.time.Day r1, r2;
        int $i0, $i1;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.project.time.Day;

        r0 := @parameter0: java.lang.Object;

        r1 = (net.sourceforge.plantuml.project.time.Day) r0;

        $i0 = specialinvoke r1.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        $i1 = specialinvoke r2.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int getDayOfMonth()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $i0 = r0.<net.sourceforge.plantuml.project.time.Day: int dayOfMonth>;

        return $i0;
    }

    private int daysPerMonth()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        net.sourceforge.plantuml.project.time.Month $r1;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Month month()>();

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: int year()>();

        $i1 = virtualinvoke $r1.<net.sourceforge.plantuml.project.time.Month: int getDaysPerMonth(int)>($i0);

        return $i1;
    }

    public net.sourceforge.plantuml.project.time.Month month()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        net.sourceforge.plantuml.project.time.MonthYear $r1;
        net.sourceforge.plantuml.project.time.Month $r2;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $r1 = r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.MonthYear monthYear>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.project.time.MonthYear: net.sourceforge.plantuml.project.time.Month month()>();

        return $r2;
    }

    public net.sourceforge.plantuml.project.time.MonthYear monthYear()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        net.sourceforge.plantuml.project.time.MonthYear $r1;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        $r1 = r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.MonthYear monthYear>;

        return $r1;
    }

    public net.sourceforge.plantuml.project.time.DayOfWeek getDayOfWeek()
    {
        net.sourceforge.plantuml.project.time.Day r0;
        int i0, i1, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18;
        net.sourceforge.plantuml.project.time.Month $r1;
        net.sourceforge.plantuml.project.time.DayOfWeek $r2;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        i0 = r0.<net.sourceforge.plantuml.project.time.Day: int dayOfMonth>;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Month month()>();

        i1 = virtualinvoke $r1.<net.sourceforge.plantuml.project.time.Month: int m()>();

        if i1 < 13 goto label1;

        $i17 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: int year()>();

        $i18 = $i17 - 1;

        goto label2;

     label1:
        $i18 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: int year()>();

     label2:
        i3 = $i18 % 100;

        i4 = $i18 / 100;

        $i5 = i1 + 1;

        $i6 = 13 * $i5;

        $i7 = $i6 / 5;

        $i8 = i0 + $i7;

        $i10 = $i8 + i3;

        $i9 = i3 / 4;

        $i12 = $i10 + $i9;

        $i11 = i4 / 4;

        $i14 = $i12 + $i11;

        $i13 = 5 * i4;

        $i15 = $i14 + $i13;

        i16 = $i15 % 7;

        $r2 = staticinvoke <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek fromH(int)>(i16);

        return $r2;
    }

    public int compareTo(net.sourceforge.plantuml.project.time.Day)
    {
        net.sourceforge.plantuml.project.time.Day r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        r1 := @parameter0: net.sourceforge.plantuml.project.time.Day;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        $i1 = specialinvoke r1.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public static net.sourceforge.plantuml.project.time.Day min(net.sourceforge.plantuml.project.time.Day, net.sourceforge.plantuml.project.time.Day)
    {
        net.sourceforge.plantuml.project.time.Day r0, r1;
        int $i0, $i1;

        r1 := @parameter0: net.sourceforge.plantuml.project.time.Day;

        r0 := @parameter1: net.sourceforge.plantuml.project.time.Day;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        $i1 = specialinvoke r1.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        if $i0 >= $i1 goto label1;

        return r0;

     label1:
        return r1;
    }

    public static net.sourceforge.plantuml.project.time.Day max(net.sourceforge.plantuml.project.time.Day, net.sourceforge.plantuml.project.time.Day)
    {
        net.sourceforge.plantuml.project.time.Day r0, r1;
        int $i0, $i1;

        r1 := @parameter0: net.sourceforge.plantuml.project.time.Day;

        r0 := @parameter1: net.sourceforge.plantuml.project.time.Day;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        $i1 = specialinvoke r1.<net.sourceforge.plantuml.project.time.Day: int internalNumber()>();

        if $i0 <= $i1 goto label1;

        return r0;

     label1:
        return r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.project.time.Day r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.project.time.Day;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.project.time.Day) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.project.time.Day: int compareTo(net.sourceforge.plantuml.project.time.Day)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r0;
        java.util.Calendar $r1;

        <net.sourceforge.plantuml.project.time.Day: long MILLISECONDS_PER_DAY> = 86400000L;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r0);

        <net.sourceforge.plantuml.project.time.Day: java.util.Calendar gmt> = $r1;

        return;
    }
}
