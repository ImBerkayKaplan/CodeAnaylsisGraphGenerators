public class net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2 extends net.sourceforge.plantuml.sequencediagram.command.CommandParticipant
{

    public void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2 r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2;

        $r1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.command.CommandParticipant: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r19, $r22;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r23, $r24, $r25;
        net.sourceforge.plantuml.command.regex.IRegex $r4, $r14;
        java.lang.StringBuilder $r17, $r18, $r20, $r21;
        net.sourceforge.plantuml.command.regex.RegexConcat $r26;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/command/CommandParticipantA2;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[17];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2: net.sourceforge.plantuml.command.regex.IRegex getRegexType()>();

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE", "([%pLN_.@]+)");

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[4] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r2[5] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[6] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("FULL", "[%g]([^%g]+)[%g]");

        $r2[7] = $r10;

        $r11 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<\\<.*\\>\\>)?");

        $r2[9] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[10] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2: net.sourceforge.plantuml.command.regex.IRegex getOrderRegex()>();

        $r2[11] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[12] = $r15;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r19 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r22);

        $r2[13] = $r16;

        $r23 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[14] = $r23;

        $r24 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r2[15] = $r24;

        $r25 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[16] = $r25;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r26;
    }
}
