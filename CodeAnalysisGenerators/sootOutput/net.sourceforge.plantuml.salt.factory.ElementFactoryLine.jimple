public class net.sourceforge.plantuml.salt.factory.ElementFactoryLine extends java.lang.Object implements net.sourceforge.plantuml.salt.factory.ElementFactory
{
    private final net.sourceforge.plantuml.salt.DataSource dataSource;

    public void <init>(net.sourceforge.plantuml.salt.DataSource)
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryLine r0;
        net.sourceforge.plantuml.salt.DataSource r1;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryLine;

        r1 := @parameter0: net.sourceforge.plantuml.salt.DataSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: net.sourceforge.plantuml.salt.DataSource dataSource> = r1;

        return;
    }

    public net.sourceforge.plantuml.salt.Terminated create()
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryLine r0;
        boolean $z0;
        net.sourceforge.plantuml.salt.DataSource $r1;
        java.lang.Object $r2, $r4;
        net.sourceforge.plantuml.salt.Terminated r3, $r6;
        java.lang.String r5;
        net.sourceforge.plantuml.salt.element.ElementLine $r7;
        char $c0;
        net.sourceforge.plantuml.salt.Terminator $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryLine;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: boolean ready()>();

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: net.sourceforge.plantuml.salt.DataSource dataSource>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.salt.DataSource: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.salt.Terminated) $r2;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r5 = (java.lang.String) $r4;

        $r6 = new net.sourceforge.plantuml.salt.Terminated;

        $r7 = new net.sourceforge.plantuml.salt.element.ElementLine;

        $c0 = virtualinvoke r5.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r7.<net.sourceforge.plantuml.salt.element.ElementLine: void <init>(char)>($c0);

        $r8 = virtualinvoke r3.<net.sourceforge.plantuml.salt.Terminated: net.sourceforge.plantuml.salt.Terminator getTerminator()>();

        specialinvoke $r6.<net.sourceforge.plantuml.salt.Terminated: void <init>(java.lang.Object,net.sourceforge.plantuml.salt.Terminator)>($r7, $r8);

        return $r6;
    }

    public boolean ready()
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryLine r0;
        net.sourceforge.plantuml.salt.DataSource $r1;
        net.sourceforge.plantuml.salt.Terminated $r2;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryLine;

        $r1 = r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: net.sourceforge.plantuml.salt.DataSource dataSource>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.salt.DataSource: net.sourceforge.plantuml.salt.Terminated peek(int)>(0);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r4 = (java.lang.String) $r3;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: boolean isLine(java.lang.String,char)>(r4, 45);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: boolean isLine(java.lang.String,char)>(r4, 61);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: boolean isLine(java.lang.String,char)>(r4, 126);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $z3 = specialinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: boolean isLine(java.lang.String,char)>(r4, 46);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private boolean isLine(java.lang.String, char)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        char c0;
        java.lang.String r4, r5;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.salt.factory.ElementFactoryLine r6;

        r6 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryLine;

        r5 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>(r4);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>(r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
