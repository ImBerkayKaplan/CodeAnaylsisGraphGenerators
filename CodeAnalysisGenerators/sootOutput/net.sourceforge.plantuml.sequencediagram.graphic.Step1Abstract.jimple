abstract class net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract extends java.lang.Object
{
    private final net.sourceforge.plantuml.graphic.StringBounder stringBounder;
    private final net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawingSet;
    private final net.sourceforge.plantuml.sequencediagram.AbstractMessage message;
    private net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2;
    private net.sourceforge.plantuml.skin.ArrowConfiguration config;
    private final java.util.List notes;
    private net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange range;

    void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.AbstractMessage, net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet, net.sourceforge.plantuml.sequencediagram.graphic.Frontier)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r4;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier r5, $r7;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        r3 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r4 := @parameter2: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        r8 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r5 := @parameter4: net.sourceforge.plantuml.sequencediagram.graphic.Frontier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: java.util.List notes> = $r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange range> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.AbstractMessage message> = r4;

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        $r7 = (net.sourceforge.plantuml.sequencediagram.graphic.Frontier) $r6;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r7;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawingSet> = r8;

        return;
    }

    protected final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange getParticipantRange()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange range>;

        return $r1;
    }

    abstract net.sourceforge.plantuml.sequencediagram.graphic.Frontier prepareMessage(net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet, net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack);

    protected final net.sourceforge.plantuml.skin.ArrowConfiguration getConfig()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.skin.ArrowConfiguration $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.skin.ArrowConfiguration config>;

        return $r1;
    }

    protected final void setConfig(net.sourceforge.plantuml.skin.ArrowConfiguration)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.skin.ArrowConfiguration r1, $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        r1 := @parameter0: net.sourceforge.plantuml.skin.ArrowConfiguration;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawingSet>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getArrowThickness()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowConfiguration withThickness(double)>($d0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.skin.ArrowConfiguration config> = $r3;

        return;
    }

    protected final java.util.List getNotes()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: java.util.List notes>;

        return $r1;
    }

    protected final void addNote(net.sourceforge.plantuml.skin.Component)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.skin.Component r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        r1 := @parameter0: net.sourceforge.plantuml.skin.Component;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: java.util.List notes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected final net.sourceforge.plantuml.graphic.StringBounder getStringBounder()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        return $r1;
    }

    protected final net.sourceforge.plantuml.sequencediagram.AbstractMessage getMessage()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.AbstractMessage message>;

        return $r1;
    }

    protected final net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet getDrawingSet()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet drawingSet>;

        return $r1;
    }

    protected final net.sourceforge.plantuml.sequencediagram.graphic.Frontier getFreeY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        return $r1;
    }

    protected final void incFreeY(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Frontier $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        d0 := @parameter0: double;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange range>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Frontier: net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d0, $r1);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract: net.sourceforge.plantuml.sequencediagram.graphic.Frontier freeY2> = $r3;

        return;
    }

    protected final net.sourceforge.plantuml.sequencediagram.graphic.NoteBox createNoteBox(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.graphic.Arrow, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.Note r2;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r3, $r7, $r10, $r11;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r4;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox $r5;
        double $d0, $d1;
        net.sourceforge.plantuml.skin.Component r6;
        net.sourceforge.plantuml.Url $r8;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract r12;

        r12 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        r6 := @parameter2: net.sourceforge.plantuml.skin.Component;

        r2 := @parameter3: net.sourceforge.plantuml.sequencediagram.Note;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.NotePosition)>(r1, $r3);

        $r5 = new net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getStartingY()>();

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.Url getUrl()>();

        specialinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: void <init>(double,net.sourceforge.plantuml.skin.Component,net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox,net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox,net.sourceforge.plantuml.sequencediagram.NotePosition,net.sourceforge.plantuml.Url)>($d0, r6, r4, null, $r7, $r8);

        $z0 = r0 instanceof net.sourceforge.plantuml.sequencediagram.graphic.MessageSelfArrow;

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r11 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if $r10 != $r11 goto label1;

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: void pushToRight(double)>($d1);

     label1:
        return $r5;
    }
}
