public abstract class net.sourceforge.plantuml.svek.image.EntityImageStateCommon extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    protected final net.sourceforge.plantuml.graphic.TextBlock desc;
    protected final net.sourceforge.plantuml.Url url;
    protected final net.sourceforge.plantuml.LineConfigurable lineConfig;

    public void <init>(net.sourceforge.plantuml.cucadiagram.IEntity, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.svek.image.EntityImageStateCommon r0;
        net.sourceforge.plantuml.cucadiagram.IEntity r1;
        net.sourceforge.plantuml.ISkinParam r2, $r5, $r14, $r16;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3;
        boolean $z0;
        net.sourceforge.plantuml.graphic.FontConfiguration $r4, r18;
        net.sourceforge.plantuml.FontParam $r6;
        net.sourceforge.plantuml.cucadiagram.Display $r7;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r8;
        net.sourceforge.plantuml.creole.CreoleMode $r9;
        net.sourceforge.plantuml.LineBreakStrategy $r10;
        net.sourceforge.plantuml.graphic.TextBlock $r11;
        net.sourceforge.plantuml.Url $r12;
        net.sourceforge.plantuml.style.Style $r13;
        net.sourceforge.plantuml.api.ThemeStyle $r15;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r17;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageStateCommon;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.LineConfigurable lineConfig> = r1;

        r3 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r13 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.style.Style getStyleStateHeader()>();

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r18 = virtualinvoke $r13.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r15, $r17);

        goto label2;

     label1:
        $r4 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r6 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam STATE>;

        specialinvoke $r4.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r5, $r6, r3);

        r18 = $r4;

     label2:
        $r7 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r8 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r9 = <net.sourceforge.plantuml.creole.CreoleMode: net.sourceforge.plantuml.creole.CreoleMode FULL>;

        $r10 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        $r11 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create8(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.creole.CreoleMode,net.sourceforge.plantuml.LineBreakStrategy)>(r18, $r8, r2, $r9, $r10);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.graphic.TextBlock desc> = $r11;

        $r12 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.Url url> = $r12;

        return;
    }

    private net.sourceforge.plantuml.style.Style getStyleStateHeader()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.style.StyleSignature $r6, $r10;
        net.sourceforge.plantuml.svek.image.EntityImageStateCommon r7;
        net.sourceforge.plantuml.cucadiagram.IEntity $r8;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r9;
        net.sourceforge.plantuml.ISkinParam $r11;
        net.sourceforge.plantuml.style.StyleBuilder $r12;
        net.sourceforge.plantuml.style.Style $r13;

        r7 := @this: net.sourceforge.plantuml.svek.image.EntityImageStateCommon;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName state>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName header>;

        $r0[4] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r10 = virtualinvoke $r6.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r9);

        $r11 = virtualinvoke r7.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r13 = virtualinvoke $r10.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r12);

        return $r13;
    }

    protected final net.sourceforge.plantuml.style.Style getStyleState()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5, $r9;
        net.sourceforge.plantuml.svek.image.EntityImageStateCommon r6;
        net.sourceforge.plantuml.cucadiagram.IEntity $r7;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r8;
        net.sourceforge.plantuml.ISkinParam $r10;
        net.sourceforge.plantuml.style.StyleBuilder $r11;
        net.sourceforge.plantuml.style.Style $r12;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageStateCommon;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName state>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r9 = virtualinvoke $r5.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r8);

        $r10 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r11 = interfaceinvoke $r10.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r12 = virtualinvoke $r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r11);

        return $r12;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getStrokeWIP()
    {
        net.sourceforge.plantuml.svek.image.EntityImageStateCommon r0;
        net.sourceforge.plantuml.LineConfigurable $r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3, r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageStateCommon;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.LineConfigurable lineConfig>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.LineConfigurable: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        if r4 != null goto label1;

        $r3 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r4 = $r3;

     label1:
        return r4;
    }

    public final net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageStateCommon r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageStateCommon;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType ROUND_RECTANGLE>;

        return $r0;
    }

    protected final net.sourceforge.plantuml.ugraphic.URectangle getShape(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.image.EntityImageStateCommon r0;
        net.sourceforge.plantuml.ISkinParam $r1;
        net.sourceforge.plantuml.cucadiagram.IEntity $r2;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.ugraphic.URectangle r5, $r12;
        net.sourceforge.plantuml.style.Style $r6, $r9;
        net.sourceforge.plantuml.style.PName $r7, $r10;
        net.sourceforge.plantuml.style.Value $r8, $r11;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageStateCommon;

        r4 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d0 = 0.0;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.style.Style getStyleState()>();

        $r7 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName RoundCorner>;

        $r8 = virtualinvoke $r6.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r7);

        d1 = interfaceinvoke $r8.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.style.Style getStyleState()>();

        $r10 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r11 = virtualinvoke $r9.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r10);

        d0 = interfaceinvoke $r11.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        goto label2;

     label1:
        d1 = 25.0;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r1.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r3);

        if $z1 == 0 goto label2;

        d0 = 4.0;

     label2:
        $r12 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r4);

        r5 = virtualinvoke $r12.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>(d1);

        virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(d0);

        return r5;
    }

    protected final net.sourceforge.plantuml.ugraphic.UGraphic applyColorAndStroke(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageStateCommon r0;
        net.sourceforge.plantuml.LineConfigurable $r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2, $r5;
        net.sourceforge.plantuml.graphic.color.ColorType $r3, $r6;
        net.sourceforge.plantuml.cucadiagram.IEntity $r4;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.ISkinParam $r7, $r14, $r16, $r19, $r26, $r28;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r8, $r20;
        net.sourceforge.plantuml.ColorParam[] $r9, $r21;
        net.sourceforge.plantuml.ColorParam $r10, $r22;
        net.sourceforge.plantuml.style.Style $r11, $r23;
        net.sourceforge.plantuml.style.PName $r12, $r24;
        net.sourceforge.plantuml.style.Value $r13, $r25;
        net.sourceforge.plantuml.api.ThemeStyle $r15, $r27;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r17, $r29;
        net.sourceforge.plantuml.ugraphic.UStroke $r18;
        net.sourceforge.plantuml.ugraphic.UGraphic r30, r32, r35;
        net.sourceforge.plantuml.ugraphic.color.HColor r31, r33;
        net.sourceforge.plantuml.ugraphic.UBackground $r34;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageStateCommon;

        r30 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.LineConfigurable lineConfig>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.LineConfigurable: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r3 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r31 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r3);

        if r31 != null goto label2;

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label1;

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.style.Style getStyleState()>();

        $r24 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r25 = virtualinvoke $r23.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r24);

        $r26 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r27 = interfaceinvoke $r26.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r29 = interfaceinvoke $r28.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r31 = interfaceinvoke $r25.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r27, $r29);

        goto label2;

     label1:
        $r19 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r21 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r22 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateBorder>;

        $r21[0] = $r22;

        r31 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r19, $r20, $r21);

     label2:
        $z2 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z2 != 0 goto label3;

        $r18 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ugraphic.UStroke getStrokeWIP()>();

        r30 = interfaceinvoke r30.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

     label3:
        r32 = interfaceinvoke r30.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r31);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r6 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r33 = virtualinvoke $r5.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r6);

        if r33 != null goto label5;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label4;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.style.Style getStyleState()>();

        $r12 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r13 = virtualinvoke $r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r12);

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r33 = interfaceinvoke $r13.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r15, $r17);

        goto label5;

     label4:
        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r9 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r10 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateBackground>;

        $r9[0] = $r10;

        r33 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r7, $r8, $r9);

     label5:
        $r34 = interfaceinvoke r33.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r35 = interfaceinvoke r32.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r34);

        return r35;
    }
}
