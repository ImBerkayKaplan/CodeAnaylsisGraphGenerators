public class net.sourceforge.plantuml.UrlBuilder extends java.lang.Object
{
    private static final java.lang.String S_QUOTED;
    private static final java.lang.String S_ONLY_TOOLTIP;
    private static final java.lang.String S_ONLY_TOOLTIP_AND_LABEL;
    private static final java.lang.String S_LINK_TOOLTIP_NOLABEL;
    private static final java.lang.String S_LINK_WITH_OPTIONAL_TOOLTIP_WITH_OPTIONAL_LABEL;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 QUOTED;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 ONLY_TOOLTIP;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 ONLY_TOOLTIP_AND_LABEL;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 LINK_TOOLTIP_NOLABEL;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 LINK_WITH_OPTIONAL_TOOLTIP_WITH_OPTIONAL_LABEL;
    private final java.lang.String topurl;
    private net.sourceforge.plantuml.UrlBuilder$ModeUrl mode;

    public static java.lang.String getRegexp()
    {
        return "\\[\\[[%s]*[%g]([^%g]+)[%g](?:[%s]*\\{([^{}]*)\\})?(?:[%s]([^%s\\{\\}\\[\\]][^\\[\\]]*))?[%s]*\\]\\]|\\[\\[[%s]*\\{(.*)\\}[%s]*\\]\\]|\\[\\[[%s]*\\{([^{}]*)\\}[%s]*([^\\[%s\\{\\}\\[\\]][^\\[\\]]*)[%s]*\\]\\]|\\[\\[[%s]*([^\\s%g{}\\[\\]]+?)[%s]*\\{(.+)\\}[%s]*\\]\\]|\\[\\[[%s]*([^%s%g\\[\\]]+?)(?:[%s]*\\{([^{}]*)\\})?(?:[%s]([^%s\\{\\}\\[\\]][^\\[\\]]*))?[%s]*\\]\\]";
    }

    public void <init>(java.lang.String, net.sourceforge.plantuml.UrlBuilder$ModeUrl)
    {
        net.sourceforge.plantuml.UrlBuilder r0;
        java.lang.String r1;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl r2;

        r0 := @this: net.sourceforge.plantuml.UrlBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.UrlBuilder$ModeUrl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.UrlBuilder: java.lang.String topurl> = r1;

        r0.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.UrlBuilder$ModeUrl mode> = r2;

        return;
    }

    public net.sourceforge.plantuml.Url getUrl(java.lang.String)
    {
        java.lang.String r0, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r24, $r25;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.UrlBuilder r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.Url $r7, $r12, $r16, $r19, $r21;
        net.sourceforge.plantuml.command.regex.Matcher2 r26, r27, r28, r29, r30;

        r2 := @this: net.sourceforge.plantuml.UrlBuilder;

        r0 := @parameter0: java.lang.String;

        $r1 = <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 QUOTED>;

        r26 = virtualinvoke $r1.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z0 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: boolean matchesOrFind(net.sourceforge.plantuml.command.regex.Matcher2)>(r26);

        if $z0 == 0 goto label1;

        $r21 = new net.sourceforge.plantuml.Url;

        $r22 = virtualinvoke r26.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r23 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: java.lang.String withTopUrl(java.lang.String)>($r22);

        $r24 = virtualinvoke r26.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        $r25 = virtualinvoke r26.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(3);

        specialinvoke $r21.<net.sourceforge.plantuml.Url: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r23, $r24, $r25);

        return $r21;

     label1:
        $r3 = <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 ONLY_TOOLTIP>;

        r27 = virtualinvoke $r3.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z1 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: boolean matchesOrFind(net.sourceforge.plantuml.command.regex.Matcher2)>(r27);

        if $z1 == 0 goto label2;

        $r19 = new net.sourceforge.plantuml.Url;

        $r20 = virtualinvoke r27.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        specialinvoke $r19.<net.sourceforge.plantuml.Url: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", $r20, null);

        return $r19;

     label2:
        $r4 = <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 ONLY_TOOLTIP_AND_LABEL>;

        r28 = virtualinvoke $r4.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z2 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: boolean matchesOrFind(net.sourceforge.plantuml.command.regex.Matcher2)>(r28);

        if $z2 == 0 goto label3;

        $r16 = new net.sourceforge.plantuml.Url;

        $r17 = virtualinvoke r28.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r18 = virtualinvoke r28.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        specialinvoke $r16.<net.sourceforge.plantuml.Url: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", $r17, $r18);

        return $r16;

     label3:
        $r5 = <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 LINK_TOOLTIP_NOLABEL>;

        r29 = virtualinvoke $r5.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z3 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: boolean matchesOrFind(net.sourceforge.plantuml.command.regex.Matcher2)>(r29);

        if $z3 == 0 goto label4;

        $r12 = new net.sourceforge.plantuml.Url;

        $r13 = virtualinvoke r29.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r14 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: java.lang.String withTopUrl(java.lang.String)>($r13);

        $r15 = virtualinvoke r29.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        specialinvoke $r12.<net.sourceforge.plantuml.Url: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r14, $r15, null);

        return $r12;

     label4:
        $r6 = <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 LINK_WITH_OPTIONAL_TOOLTIP_WITH_OPTIONAL_LABEL>;

        r30 = virtualinvoke $r6.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z4 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: boolean matchesOrFind(net.sourceforge.plantuml.command.regex.Matcher2)>(r30);

        if $z4 == 0 goto label5;

        $r7 = new net.sourceforge.plantuml.Url;

        $r8 = virtualinvoke r30.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r9 = specialinvoke r2.<net.sourceforge.plantuml.UrlBuilder: java.lang.String withTopUrl(java.lang.String)>($r8);

        $r10 = virtualinvoke r30.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        $r11 = virtualinvoke r30.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(3);

        specialinvoke $r7.<net.sourceforge.plantuml.Url: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r9, $r10, $r11);

        return $r7;

     label5:
        return null;
    }

    private boolean matchesOrFind(net.sourceforge.plantuml.command.regex.Matcher2)
    {
        net.sourceforge.plantuml.UrlBuilder r0;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r1, $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;
        net.sourceforge.plantuml.command.regex.Matcher2 r6;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.UrlBuilder;

        r6 := @parameter0: net.sourceforge.plantuml.command.regex.Matcher2;

        $r2 = r0.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.UrlBuilder$ModeUrl mode>;

        $r1 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        if $r2 != $r1 goto label1;

        $z1 = virtualinvoke r6.<net.sourceforge.plantuml.command.regex.Matcher2: boolean matches()>();

        return $z1;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.UrlBuilder$ModeUrl mode>;

        $r3 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl ANYWHERE>;

        if $r4 != $r3 goto label2;

        $z0 = virtualinvoke r6.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        return $z0;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;
    }

    private java.lang.String withTopUrl(java.lang.String)
    {
        java.lang.String r0, $r2, $r4, $r7;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.UrlBuilder r1;
        java.lang.StringBuilder $r3, $r5, $r6;

        r1 := @this: net.sourceforge.plantuml.UrlBuilder;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("https:");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z2 != 0 goto label1;

        $r2 = r1.<net.sourceforge.plantuml.UrlBuilder: java.lang.String topurl>;

        if $r2 == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r1.<net.sourceforge.plantuml.UrlBuilder: java.lang.String topurl>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label1:
        return r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.command.regex.Pattern2 $r0, $r1, $r2, $r3, $r4;

        <net.sourceforge.plantuml.UrlBuilder: java.lang.String S_LINK_WITH_OPTIONAL_TOOLTIP_WITH_OPTIONAL_LABEL> = "\\[\\[[%s]*([^%s%g\\[\\]]+?)(?:[%s]*\\{([^{}]*)\\})?(?:[%s]([^%s\\{\\}\\[\\]][^\\[\\]]*))?[%s]*\\]\\]";

        <net.sourceforge.plantuml.UrlBuilder: java.lang.String S_LINK_TOOLTIP_NOLABEL> = "\\[\\[[%s]*([^\\s%g{}\\[\\]]+?)[%s]*\\{(.+)\\}[%s]*\\]\\]";

        <net.sourceforge.plantuml.UrlBuilder: java.lang.String S_ONLY_TOOLTIP_AND_LABEL> = "\\[\\[[%s]*\\{([^{}]*)\\}[%s]*([^\\[%s\\{\\}\\[\\]][^\\[\\]]*)[%s]*\\]\\]";

        <net.sourceforge.plantuml.UrlBuilder: java.lang.String S_ONLY_TOOLTIP> = "\\[\\[[%s]*\\{(.*)\\}[%s]*\\]\\]";

        <net.sourceforge.plantuml.UrlBuilder: java.lang.String S_QUOTED> = "\\[\\[[%s]*[%g]([^%g]+)[%g](?:[%s]*\\{([^{}]*)\\})?(?:[%s]([^%s\\{\\}\\[\\]][^\\[\\]]*))?[%s]*\\]\\]";

        $r0 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\[\\[[%s]*[%g]([^%g]+)[%g](?:[%s]*\\{([^{}]*)\\})?(?:[%s]([^%s\\{\\}\\[\\]][^\\[\\]]*))?[%s]*\\]\\]");

        <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 QUOTED> = $r0;

        $r1 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\[\\[[%s]*\\{(.*)\\}[%s]*\\]\\]");

        <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 ONLY_TOOLTIP> = $r1;

        $r2 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\[\\[[%s]*\\{([^{}]*)\\}[%s]*([^\\[%s\\{\\}\\[\\]][^\\[\\]]*)[%s]*\\]\\]");

        <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 ONLY_TOOLTIP_AND_LABEL> = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\[\\[[%s]*([^\\s%g{}\\[\\]]+?)[%s]*\\{(.+)\\}[%s]*\\]\\]");

        <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 LINK_TOOLTIP_NOLABEL> = $r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\[\\[[%s]*([^%s%g\\[\\]]+?)(?:[%s]*\\{([^{}]*)\\})?(?:[%s]([^%s\\{\\}\\[\\]][^\\[\\]]*))?[%s]*\\]\\]");

        <net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.command.regex.Pattern2 LINK_WITH_OPTIONAL_TOOLTIP_WITH_OPTIONAL_LABEL> = $r4;

        return;
    }
}
