public class net.sourceforge.plantuml.salt.DataSourceImpl extends java.lang.Object implements net.sourceforge.plantuml.salt.DataSource
{
    private int i;
    private final java.util.List data;

    public void <init>(java.util.List)
    {
        net.sourceforge.plantuml.salt.DataSourceImpl r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.command.regex.Pattern2 r2;
        java.util.List r3;
        java.util.Iterator r4;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.lang.Object $r5;
        java.lang.String r6, $r9, r10, $r14, $r15, $r16;
        java.util.StringTokenizer $r7;
        net.sourceforge.plantuml.salt.Terminator r11, $r17, $r18, $r19;
        net.sourceforge.plantuml.command.regex.Matcher2 r12;
        int i0, $i1, $i2, i3, i4;

        r0 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        r3 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.DataSourceImpl: int i> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.DataSourceImpl: java.util.List data> = $r1;

        r2 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\{(?:[-+^#!*/]|S-|SI|S)?");

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r6, "|}", 1);

     label02:
        $z5 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z5 == 0 goto label12;

        $r9 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r10 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r9);

        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("|");

        if $z1 == 0 goto label03;

        goto label02;

     label03:
        $z2 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label04;

        $r18 = <net.sourceforge.plantuml.salt.Terminator: net.sourceforge.plantuml.salt.Terminator NEWCOL>;

        goto label05;

     label04:
        $r18 = <net.sourceforge.plantuml.salt.Terminator: net.sourceforge.plantuml.salt.Terminator NEWLINE>;

     label05:
        r11 = $r18;

        r12 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r10);

        z3 = virtualinvoke r12.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if z3 != 0 goto label06;

        specialinvoke r0.<net.sourceforge.plantuml.salt.DataSourceImpl: void addInternal(java.lang.String,net.sourceforge.plantuml.salt.Terminator)>(r10, $r18);

        goto label02;

     label06:
        i3 = 0;

     label07:
        i0 = virtualinvoke r12.<net.sourceforge.plantuml.command.regex.Matcher2: int start()>();

        if i0 <= i3 goto label08;

        $r16 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(i3, i0);

        $r17 = <net.sourceforge.plantuml.salt.Terminator: net.sourceforge.plantuml.salt.Terminator NEWCOL>;

        specialinvoke r0.<net.sourceforge.plantuml.salt.DataSourceImpl: void addInternal(java.lang.String,net.sourceforge.plantuml.salt.Terminator)>($r16, $r17);

     label08:
        i4 = virtualinvoke r12.<net.sourceforge.plantuml.command.regex.Matcher2: int end()>();

        $i1 = virtualinvoke r10.<java.lang.String: int length()>();

        if i4 != $i1 goto label09;

        $r19 = r11;

        goto label10;

     label09:
        $r19 = <net.sourceforge.plantuml.salt.Terminator: net.sourceforge.plantuml.salt.Terminator NEWCOL>;

     label10:
        $r14 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(i0, i4);

        specialinvoke r0.<net.sourceforge.plantuml.salt.DataSourceImpl: void addInternal(java.lang.String,net.sourceforge.plantuml.salt.Terminator)>($r14, $r19);

        i3 = i4;

        $z4 = virtualinvoke r12.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z4 != 0 goto label07;

        $i2 = virtualinvoke r10.<java.lang.String: int length()>();

        if i4 >= $i2 goto label11;

        $r15 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(i4);

        specialinvoke r0.<net.sourceforge.plantuml.salt.DataSourceImpl: void addInternal(java.lang.String,net.sourceforge.plantuml.salt.Terminator)>($r15, r11);

     label11:
        goto label02;

     label12:
        goto label01;

     label13:
        return;
    }

    private void addInternal(java.lang.String, net.sourceforge.plantuml.salt.Terminator)
    {
        int $i0;
        net.sourceforge.plantuml.salt.DataSourceImpl r0;
        net.sourceforge.plantuml.salt.Terminated $r1;
        net.sourceforge.plantuml.salt.Terminator r2;
        java.util.List $r3;
        java.lang.String r4, r5;

        r0 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.salt.Terminator;

        r5 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r4);

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: java.util.List data>;

        $r1 = new net.sourceforge.plantuml.salt.Terminated;

        specialinvoke $r1.<net.sourceforge.plantuml.salt.Terminated: void <init>(java.lang.Object,net.sourceforge.plantuml.salt.Terminator)>(r5, r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        return;
    }

    public net.sourceforge.plantuml.salt.Terminated peek(int)
    {
        net.sourceforge.plantuml.salt.DataSourceImpl r0;
        int i0, $i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.salt.Terminated $r3;

        r0 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: java.util.List data>;

        $i1 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: int i>;

        $i2 = $i1 + i0;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (net.sourceforge.plantuml.salt.Terminated) $r2;

        return $r3;
    }

    public boolean hasNext()
    {
        net.sourceforge.plantuml.salt.DataSourceImpl r0;
        java.util.List $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        $i0 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: int i>;

        $r1 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: java.util.List data>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.salt.Terminated next()
    {
        net.sourceforge.plantuml.salt.DataSourceImpl r0;
        int $i0, $i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.salt.Terminated r3;

        r0 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        $r1 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: java.util.List data>;

        $i0 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: int i>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (net.sourceforge.plantuml.salt.Terminated) $r2;

        $i1 = r0.<net.sourceforge.plantuml.salt.DataSourceImpl: int i>;

        $i2 = $i1 + 1;

        r0.<net.sourceforge.plantuml.salt.DataSourceImpl: int i> = $i2;

        return r3;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.salt.DataSourceImpl r1;

        r1 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r5;
        net.sourceforge.plantuml.salt.DataSourceImpl r1;
        java.lang.String $r2, $r6;
        boolean $z0;
        java.lang.Object $r7;

        r1 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.salt.DataSourceImpl: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.salt.DataSourceImpl: net.sourceforge.plantuml.salt.Terminated peek(int)>(0);

        goto label2;

     label1:
        $r7 = "$$$";

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public volatile java.lang.Object next()
    {
        net.sourceforge.plantuml.salt.DataSourceImpl r0;
        net.sourceforge.plantuml.salt.Terminated $r1;

        r0 := @this: net.sourceforge.plantuml.salt.DataSourceImpl;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.salt.DataSourceImpl: net.sourceforge.plantuml.salt.Terminated next()>();

        return $r1;
    }
}
