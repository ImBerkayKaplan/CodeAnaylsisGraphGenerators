public class net.sourceforge.plantuml.tim.stdlib.SplitStr extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.SplitStr r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.SplitStr;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.SplitStr r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.SplitStr;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%splitstr", 3);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.SplitStr r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.SplitStr;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.json.JsonArray $r0;
        java.util.List r2;
        java.lang.Object $r3, $r6;
        net.sourceforge.plantuml.tim.expression.TValue $r4, $r7, $r11;
        java.lang.String r5, r8, $r12;
        java.util.StringTokenizer $r9;
        boolean $z0;
        net.sourceforge.plantuml.tim.stdlib.SplitStr r14;
        net.sourceforge.plantuml.tim.TContext r15;
        net.sourceforge.plantuml.tim.TMemory r16;
        net.sourceforge.plantuml.LineLocation r17;
        java.util.Map r18;

        r14 := @this: net.sourceforge.plantuml.tim.stdlib.SplitStr;

        r15 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r16 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r17 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r2 := @parameter3: java.util.List;

        r18 := @parameter4: java.util.Map;

        $r0 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (net.sourceforge.plantuml.tim.expression.TValue) $r3;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r7 = (net.sourceforge.plantuml.tim.expression.TValue) $r6;

        r8 = virtualinvoke $r7.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r5, r8);

     label1:
        $z0 = virtualinvoke $r9.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(java.lang.String)>($r12);

        goto label1;

     label2:
        $r11 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.json.JsonValue)>($r0);

        return $r11;
    }
}
