class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal extends net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection implements net.sourceforge.plantuml.activitydiagram3.ftile.ConnectionTranslatable
{
    private final net.sourceforge.plantuml.graphic.Rainbow myArrowColor;
    private final boolean branchEmpty;
    final net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0;

    public void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.graphic.Rainbow, boolean)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r2, $r3;
        net.sourceforge.plantuml.graphic.Rainbow r4, $r6;
        boolean z0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks;

        r2 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r4 := @parameter2: net.sourceforge.plantuml.graphic.Rainbow;

        z0 := @parameter3: boolean;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0> = r1;

        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2>;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r2, $r3);

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.Rainbow: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r6 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.graphic.Rainbow access$000(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks)>(r1);

        goto label3;

     label2:
        $r6 = r4;

     label3:
        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.graphic.Rainbow myArrowColor> = $r6;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: boolean branchEmpty> = z0;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r4, $r6;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        java.awt.geom.Point2D r7, r8;
        double d0, d1, d2, d3;
        byte $b0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks $r10;
        net.sourceforge.plantuml.ISkinParam $r11;
        net.sourceforge.plantuml.graphic.Rainbow $r12;
        net.sourceforge.plantuml.Direction $r13;
        net.sourceforge.plantuml.ugraphic.UPolygon $r14;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r15;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile getFtile1()>();

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.ugraphic.UTranslate translate(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry translate(net.sourceforge.plantuml.ugraphic.UTranslate)>($r5);

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: java.awt.geom.Point2D getPointOut()>();

        r8 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: java.awt.geom.Point2D getP2(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d0 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        d1 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        d2 = virtualinvoke r8.<java.awt.geom.Point2D: double getX()>();

        d3 = virtualinvoke r8.<java.awt.geom.Point2D: double getY()>();

        $b0 = d2 cmpl d0;

        if $b0 <= 0 goto label2;

        $r14 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Arrows: net.sourceforge.plantuml.ugraphic.UPolygon asToRight()>();

        goto label3;

     label2:
        $r14 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Arrows: net.sourceforge.plantuml.ugraphic.UPolygon asToLeft()>();

     label3:
        $r10 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r12 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.graphic.Rainbow myArrowColor>;

        r15 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon)>($r11, $r12, $r14);

        $z1 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: boolean branchEmpty>;

        if $z1 == 0 goto label4;

        $r13 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        r15 = virtualinvoke r15.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake emphasizeDirection(net.sourceforge.plantuml.Direction)>($r13);

     label4:
        virtualinvoke r15.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d0, d1);

        virtualinvoke r15.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d0, d3);

        virtualinvoke r15.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d2, d3);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r15);

        return;
    }

    private java.awt.geom.Point2D getP2(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks $r1, $r6, $r9, $r12;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3, $r5, $r7, $r8, $r10;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r4;
        java.lang.IllegalStateException $r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r13;
        java.awt.geom.Point2D $r14, r15;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r3 = $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond2>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile getFtile1()>();

        $r6 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r7 = $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        if $r5 != $r7 goto label1;

        r15 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: java.awt.geom.Point2D getPointD()>();

        goto label3;

     label1:
        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile getFtile1()>();

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r10 = $r9.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        if $r8 != $r10 goto label2;

        r15 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: java.awt.geom.Point2D getPointB()>();

        goto label3;

     label2:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label3:
        $r12 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond2(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.ugraphic.UTranslate: java.awt.geom.Point2D getTranslated(java.awt.geom.Point2D)>(r15);

        return $r14;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate translate(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r1, $r3, $r4, $r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks $r2, $r5, $r9, $r11;
        java.lang.IllegalStateException $r7;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10, $r12;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile getFtile1()>();

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r3 = $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        if $r1 != $r3 goto label1;

        $r11 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)>(r8);

        return $r12;

     label1:
        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile getFtile1()>();

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r6 = $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        if $r4 != $r6 goto label2;

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate2(net.sourceforge.plantuml.graphic.StringBounder)>(r8);

        return $r10;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;
    }

    public void drawTranslate(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.UTranslate, net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r4, $r7;
        boolean $z0;
        java.awt.geom.Point2D r5, r8, r11, r13;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6, r10, r12;
        net.sourceforge.plantuml.Direction r9, r14;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, d25, d26;
        byte $b0, $b1, $b2, $b3, $b4;
        net.sourceforge.plantuml.ugraphic.UPolygon r15, $r39;
        java.awt.geom.Point2D$Double $r16, $r27;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks $r17, $r22, $r28, $r33;
        net.sourceforge.plantuml.ISkinParam $r18, $r23, $r29, $r34;
        net.sourceforge.plantuml.graphic.Rainbow $r19, $r24, $r30, $r35;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r20, $r25, $r31, $r36, r38, r41, r43, r44;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r21, $r26, $r32, $r37;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r10 := @parameter1: net.sourceforge.plantuml.ugraphic.UTranslate;

        r12 := @parameter2: net.sourceforge.plantuml.ugraphic.UTranslate;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile getFtile1()>();

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r5 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: java.awt.geom.Point2D getP2(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r6 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.ugraphic.UTranslate translate(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry translate(net.sourceforge.plantuml.ugraphic.UTranslate)>($r6);

        r8 = virtualinvoke $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: java.awt.geom.Point2D getPointOut()>();

        r9 = staticinvoke <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction leftOrRight(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r8, r5);

        d0 = virtualinvoke r8.<java.awt.geom.Point2D: double getX()>();

        d1 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.ugraphic.UTranslate: java.awt.geom.Point2D getTranslated(java.awt.geom.Point2D)>(r8);

        r13 = virtualinvoke r12.<net.sourceforge.plantuml.ugraphic.UTranslate: java.awt.geom.Point2D getTranslated(java.awt.geom.Point2D)>(r5);

        r14 = staticinvoke <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction leftOrRight(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r11, r13);

        $b0 = d1 cmpl d0;

        if $b0 <= 0 goto label2;

        $r39 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Arrows: net.sourceforge.plantuml.ugraphic.UPolygon asToRight()>();

        goto label3;

     label2:
        $r39 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Arrows: net.sourceforge.plantuml.ugraphic.UPolygon asToLeft()>();

     label3:
        r15 = $r39;

        if r9 != r14 goto label6;

        $b2 = d1 cmpl d0;

        if $b2 <= 0 goto label4;

        $b3 = -1;

        goto label5;

     label4:
        $b3 = 1;

     label5:
        $d12 = (double) $b3;

        $d13 = $d12 * 1.5;

        d24 = $d13 * 12.0;

        $r27 = new java.awt.geom.Point2D$Double;

        $d14 = virtualinvoke r13.<java.awt.geom.Point2D: double getX()>();

        $d15 = $d14 + d24;

        $d16 = virtualinvoke r13.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r27.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d15, $d16);

        $r28 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r29 = virtualinvoke $r28.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r30 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.graphic.Rainbow myArrowColor>;

        $r31 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.Rainbow)>($r29, $r30);

        $r32 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy LIMITED>;

        r41 = virtualinvoke $r31.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake withMerge(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r32);

        $d17 = virtualinvoke r11.<java.awt.geom.Point2D: double getY()>();

        $d18 = virtualinvoke r13.<java.awt.geom.Point2D: double getY()>();

        $d19 = $d17 + $d18;

        d25 = $d19 / 2.0;

        virtualinvoke r41.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>(r11);

        $d20 = virtualinvoke r11.<java.awt.geom.Point2D: double getX()>();

        virtualinvoke r41.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>($d20, d25);

        $d21 = virtualinvoke $r27.<java.awt.geom.Point2D: double getX()>();

        virtualinvoke r41.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>($d21, d25);

        virtualinvoke r41.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>($r27);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r41);

        $r33 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r34 = virtualinvoke $r33.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r35 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.graphic.Rainbow myArrowColor>;

        $r36 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon)>($r34, $r35, r15);

        $r37 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy LIMITED>;

        r38 = virtualinvoke $r36.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake withMerge(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r37);

        virtualinvoke r38.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>($r27);

        $d22 = virtualinvoke $r27.<java.awt.geom.Point2D: double getX()>();

        $d23 = virtualinvoke r13.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r38.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>($d22, $d23);

        virtualinvoke r38.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>(r13);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r38);

        goto label9;

     label6:
        $b1 = d1 cmpl d0;

        if $b1 <= 0 goto label7;

        $b4 = -1;

        goto label8;

     label7:
        $b4 = 1;

     label8:
        $d2 = (double) $b4;

        $d3 = $d2 * 1.5;

        d26 = $d3 * 12.0;

        $r16 = new java.awt.geom.Point2D$Double;

        $d4 = virtualinvoke r13.<java.awt.geom.Point2D: double getX()>();

        $d5 = $d4 + d26;

        $d6 = virtualinvoke r13.<java.awt.geom.Point2D: double getY()>();

        $d7 = $d6 - 18.0;

        specialinvoke $r16.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d7);

        $r17 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r19 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.graphic.Rainbow myArrowColor>;

        $r20 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.Rainbow)>($r18, $r19);

        $r21 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy LIMITED>;

        r43 = virtualinvoke $r20.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake withMerge(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r21);

        virtualinvoke r43.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>(r11);

        $d8 = virtualinvoke r11.<java.awt.geom.Point2D: double getX()>();

        $d9 = virtualinvoke $r16.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r43.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>($d8, $d9);

        virtualinvoke r43.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>($r16);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r43);

        $r22 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r24 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionVerticalThenHorizontal: net.sourceforge.plantuml.graphic.Rainbow myArrowColor>;

        $r25 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon)>($r23, $r24, r15);

        $r26 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy LIMITED>;

        r44 = virtualinvoke $r25.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake withMerge(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r26);

        virtualinvoke r44.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>($r16);

        $d10 = virtualinvoke $r16.<java.awt.geom.Point2D: double getX()>();

        $d11 = virtualinvoke r13.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r44.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>($d10, $d11);

        virtualinvoke r44.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(java.awt.geom.Point2D)>(r13);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r44);

     label9:
        return;
    }
}
