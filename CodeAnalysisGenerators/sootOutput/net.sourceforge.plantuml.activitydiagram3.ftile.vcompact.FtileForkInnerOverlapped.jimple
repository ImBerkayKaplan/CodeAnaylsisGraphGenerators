class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped extends net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile
{
    private final java.util.List forks;

    public void <init>(java.util.List)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped r0;
        java.util.List r1, $r9;
        java.lang.Object $r2, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3, r8;
        net.sourceforge.plantuml.ISkinParam $r4;
        java.util.ArrayList $r5;
        java.util.Iterator r6;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped;

        r1 := @parameter0: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r2;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ISkinParam skinParam()>();

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile: void <init>(net.sourceforge.plantuml.ISkinParam)>($r4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.List forks> = $r5;

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r7;

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.List forks>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label1;

     label2:
        return;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped r0;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.List forks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r2;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        return $r4;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        return $r1;
    }

    public java.util.Set getSwimlanes()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped r0;
        java.util.List $r1;
        java.util.Set $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.List forks>;

        $r2 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.Set mergeSwimlanes(java.util.List)>($r1);

        return $r2;
    }

    public static java.util.Set mergeSwimlanes(java.util.List)
    {
        java.util.HashSet $r0;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0;
        java.util.Set $r4, $r7;
        java.lang.Object $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r6;

        r2 := @parameter0: java.util.List;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r5;

        $r7 = interfaceinvoke r6.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, $r7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.List forks>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r3;

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(0.0);

        $r7 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r4);

        goto label1;

     label2:
        return;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionFtile(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped r0;
        java.util.List $r1;
        boolean $z0;
        net.sourceforge.plantuml.Dimension2DDouble $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r3, r7;
        double $d0, $d1, $d2, $d3, $d4, d5, d6;
        java.lang.Object $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        byte $b0;
        java.util.Iterator r8;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d5 = 0.0;

        d6 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.List forks>;

        r8 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r4;

        r7 = interfaceinvoke r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d3 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d6 = staticinvoke <java.lang.Math: double max(double,double)>(d6, $d3);

        $d4 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $b0 = $d4 cmpl d5;

        if $b0 <= 0 goto label2;

        d5 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

     label2:
        goto label1;

     label3:
        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d6, d5);

        $r3 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 / 2.0;

        $d2 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double,double)>($r2, $d1, 0.0, $d2);

        return $r3;
    }

    public net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r5, r6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7;
        net.sourceforge.plantuml.graphic.StringBounder r8;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped;

        r6 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r8 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped: java.util.List forks>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r4;

        if r5 != r6 goto label2;

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(0.0);

        return $r7;

     label2:
        goto label1;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }
}
