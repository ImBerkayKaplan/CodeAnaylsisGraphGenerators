public class net.sourceforge.plantuml.ugraphic.comp.Slot extends java.lang.Object implements java.lang.Comparable
{
    private final double start;
    private final double end;

    public void <init>(double, double)
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot r0;
        double d0, d1;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end> = d1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.ugraphic.comp.Slot r2;
        double $d0, $d1;
        java.lang.String $r7;

        r2 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public double getStart()
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        return $d0;
    }

    public double getEnd()
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        return $d0;
    }

    public double size()
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public boolean contains(double)
    {
        double d0, $d1, $d2;
        net.sourceforge.plantuml.ugraphic.comp.Slot r0;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $b0 = d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $d2 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $b1 = d0 cmpg $d2;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean intersect(net.sourceforge.plantuml.ugraphic.comp.Slot)
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot r0, r1;
        double $d0, $d1, $d2, $d3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.Slot;

        $d0 = r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: boolean contains(double)>($d0);

        if $z0 != 0 goto label1;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: boolean contains(double)>($d1);

        if $z1 != 0 goto label1;

        $d2 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $z2 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: boolean contains(double)>($d2);

        if $z2 != 0 goto label1;

        $d3 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $z3 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: boolean contains(double)>($d3);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public net.sourceforge.plantuml.ugraphic.comp.Slot merge(net.sourceforge.plantuml.ugraphic.comp.Slot)
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot $r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.Slot;

        $r0 = new net.sourceforge.plantuml.ugraphic.comp.Slot;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d0);

        $d4 = r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $d3 = r2.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d4, $d3);

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: void <init>(double,double)>($d2, $d5);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.comp.Slot intersect(double, double)
    {
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.comp.Slot r0, $r1;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $b0 = d0 cmpl $d1;

        if $b0 < 0 goto label1;

        return null;

     label1:
        $d3 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $b1 = d2 cmpg $d3;

        if $b1 > 0 goto label2;

        return null;

     label2:
        $r1 = new net.sourceforge.plantuml.ugraphic.comp.Slot;

        $d4 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d4, d0);

        $d6 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double end>;

        $d7 = staticinvoke <java.lang.Math: double min(double,double)>($d6, d2);

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: void <init>(double,double)>($d5, $d7);

        return $r1;
    }

    public int compareTo(net.sourceforge.plantuml.ugraphic.comp.Slot)
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot r0, r1;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.Slot;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $d0 = r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        $d3 = r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $d2 = r1.<net.sourceforge.plantuml.ugraphic.comp.Slot: double start>;

        $b1 = $d3 cmpl $d2;

        if $b1 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.comp.Slot r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Slot;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.ugraphic.comp.Slot) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.comp.Slot: int compareTo(net.sourceforge.plantuml.ugraphic.comp.Slot)>($r2);

        return $i0;
    }
}
