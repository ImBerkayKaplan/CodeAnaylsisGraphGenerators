public class net.sourceforge.plantuml.ugraphic.comp.ExpandTransform extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform
{
    private final java.util.Set all;

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.comp.ExpandTransform r0;
        java.util.TreeSet $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.ExpandTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.comp.ExpandTransform: java.util.Set all> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.ugraphic.comp.ExpandTransform r0;
        java.util.Set $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.ExpandTransform;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.comp.ExpandTransform: java.util.Set all>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public void addExpandIncludingLimit(double, double)
    {
        net.sourceforge.plantuml.ugraphic.comp.ExpandTransform r0;
        net.sourceforge.plantuml.ugraphic.comp.Expand $r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.comp.ExpandType $r2;
        java.util.Set $r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.ExpandTransform;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.comp.ExpandTransform: java.util.Set all>;

        $r1 = new net.sourceforge.plantuml.ugraphic.comp.Expand;

        $r2 = <net.sourceforge.plantuml.ugraphic.comp.ExpandType: net.sourceforge.plantuml.ugraphic.comp.ExpandType INCLUDING_LIMIT>;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.comp.Expand: void <init>(net.sourceforge.plantuml.ugraphic.comp.ExpandType,double,double)>($r2, d0, d1);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addExpandExcludingLimit(double, double)
    {
        net.sourceforge.plantuml.ugraphic.comp.ExpandTransform r0;
        net.sourceforge.plantuml.ugraphic.comp.Expand $r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.comp.ExpandType $r2;
        java.util.Set $r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.ExpandTransform;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.comp.ExpandTransform: java.util.Set all>;

        $r1 = new net.sourceforge.plantuml.ugraphic.comp.Expand;

        $r2 = <net.sourceforge.plantuml.ugraphic.comp.ExpandType: net.sourceforge.plantuml.ugraphic.comp.ExpandType EXCLUDING_LIMIT>;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.comp.Expand: void <init>(net.sourceforge.plantuml.ugraphic.comp.ExpandType,double,double)>($r2, d0, d1);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }

    public double transform(double)
    {
        double d0, $d1, $d2, $d3, $d4, d5;
        net.sourceforge.plantuml.ugraphic.comp.ExpandTransform r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.ugraphic.comp.Expand r4;
        net.sourceforge.plantuml.ugraphic.comp.ExpandType $r5, $r6, $r7, $r8;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.ExpandTransform;

        d0 := @parameter0: double;

        d5 = d0;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.comp.ExpandTransform: java.util.Set all>;

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.ugraphic.comp.Expand) $r3;

        $r5 = <net.sourceforge.plantuml.ugraphic.comp.ExpandType: net.sourceforge.plantuml.ugraphic.comp.ExpandType INCLUDING_LIMIT>;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Expand: net.sourceforge.plantuml.ugraphic.comp.ExpandType getType()>();

        if $r5 != $r6 goto label2;

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Expand: double getPosition()>();

        $b1 = d0 cmpl $d3;

        if $b1 < 0 goto label2;

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Expand: double getExtend()>();

        d5 = d5 + $d4;

     label2:
        $r7 = <net.sourceforge.plantuml.ugraphic.comp.ExpandType: net.sourceforge.plantuml.ugraphic.comp.ExpandType EXCLUDING_LIMIT>;

        $r8 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Expand: net.sourceforge.plantuml.ugraphic.comp.ExpandType getType()>();

        if $r7 != $r8 goto label3;

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Expand: double getPosition()>();

        $b0 = d0 cmpl $d1;

        if $b0 <= 0 goto label3;

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Expand: double getExtend()>();

        d5 = d5 + $d2;

     label3:
        goto label1;

     label4:
        return d5;
    }
}
