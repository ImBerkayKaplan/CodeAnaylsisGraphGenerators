public final enum class net.sourceforge.plantuml.FileFormat extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.FileFormat PNG;
    public static final enum net.sourceforge.plantuml.FileFormat SVG;
    public static final enum net.sourceforge.plantuml.FileFormat EPS;
    public static final enum net.sourceforge.plantuml.FileFormat EPS_TEXT;
    public static final enum net.sourceforge.plantuml.FileFormat ATXT;
    public static final enum net.sourceforge.plantuml.FileFormat UTXT;
    public static final enum net.sourceforge.plantuml.FileFormat XMI_STANDARD;
    public static final enum net.sourceforge.plantuml.FileFormat XMI_STAR;
    public static final enum net.sourceforge.plantuml.FileFormat XMI_ARGO;
    public static final enum net.sourceforge.plantuml.FileFormat SCXML;
    public static final enum net.sourceforge.plantuml.FileFormat PDF;
    public static final enum net.sourceforge.plantuml.FileFormat MJPEG;
    public static final enum net.sourceforge.plantuml.FileFormat ANIMATED_GIF;
    public static final enum net.sourceforge.plantuml.FileFormat HTML;
    public static final enum net.sourceforge.plantuml.FileFormat HTML5;
    public static final enum net.sourceforge.plantuml.FileFormat VDX;
    public static final enum net.sourceforge.plantuml.FileFormat LATEX;
    public static final enum net.sourceforge.plantuml.FileFormat LATEX_NO_PREAMBLE;
    public static final enum net.sourceforge.plantuml.FileFormat BASE64;
    public static final enum net.sourceforge.plantuml.FileFormat BRAILLE_PNG;
    public static final enum net.sourceforge.plantuml.FileFormat PREPROC;
    public static final enum net.sourceforge.plantuml.FileFormat DEBUG;
    private final java.lang.String mimeType;
    private static final java.awt.image.BufferedImage imDummy;
    public static final java.awt.Graphics2D gg;
    private static final net.sourceforge.plantuml.FileFormat[] $VALUES;

    public static net.sourceforge.plantuml.FileFormat[] values()
    {
        net.sourceforge.plantuml.FileFormat[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.FileFormat[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.FileFormat valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.FileFormat $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/FileFormat;", r0);

        $r2 = (net.sourceforge.plantuml.FileFormat) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        net.sourceforge.plantuml.FileFormat r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<net.sourceforge.plantuml.FileFormat: java.lang.String mimeType> = r2;

        return;
    }

    public java.lang.String getMimeType()
    {
        net.sourceforge.plantuml.FileFormat r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        $r1 = r0.<net.sourceforge.plantuml.FileFormat: java.lang.String mimeType>;

        return $r1;
    }

    public java.lang.String getFileSuffix()
    {
        net.sourceforge.plantuml.FileFormat r0, $r2, $r3, $r4, $r5, $r6, $r13;
        java.lang.String $r1, $r9, $r10, $r12, $r14;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r11;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormat: java.lang.String name()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("XMI");

        if $z0 == 0 goto label1;

        return ".xmi";

     label1:
        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat MJPEG>;

        if r0 != $r2 goto label2;

        return ".avi";

     label2:
        $r3 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX_NO_PREAMBLE>;

        if r0 != $r3 goto label3;

        return ".latex";

     label3:
        $r4 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ANIMATED_GIF>;

        if r0 != $r4 goto label4;

        return ".gif";

     label4:
        $r5 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BRAILLE_PNG>;

        if r0 != $r5 goto label5;

        return ".braille.png";

     label5:
        $r6 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS_TEXT>;

        if r0 != $r6 goto label6;

        $r13 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.FileFormat: java.lang.String getFileSuffix()>();

        return $r14;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormat: java.lang.String name()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public net.sourceforge.plantuml.graphic.StringBounder getDefaultStringBounder()
    {
        net.sourceforge.plantuml.FileFormat r0;
        net.sourceforge.plantuml.TikzFontDistortion $r1;
        net.sourceforge.plantuml.SvgCharSizeHack $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        $r1 = staticinvoke <net.sourceforge.plantuml.TikzFontDistortion: net.sourceforge.plantuml.TikzFontDistortion getDefault()>();

        $r2 = <net.sourceforge.plantuml.SvgCharSizeHack: net.sourceforge.plantuml.SvgCharSizeHack NO_HACK>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.graphic.StringBounder getDefaultStringBounder(net.sourceforge.plantuml.TikzFontDistortion,net.sourceforge.plantuml.SvgCharSizeHack)>($r1, $r2);

        return $r3;
    }

    public net.sourceforge.plantuml.graphic.StringBounder getDefaultStringBounder(net.sourceforge.plantuml.TikzFontDistortion, net.sourceforge.plantuml.SvgCharSizeHack)
    {
        net.sourceforge.plantuml.FileFormat r0, $r1, $r4, $r5, $r6, $r7;
        net.sourceforge.plantuml.TikzFontDistortion r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3, $r8, $r11, $r12;
        net.sourceforge.plantuml.ugraphic.debug.StringBounderDebug $r9;
        net.sourceforge.plantuml.SvgCharSizeHack r10;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        r2 := @parameter0: net.sourceforge.plantuml.TikzFontDistortion;

        r10 := @parameter1: net.sourceforge.plantuml.SvgCharSizeHack;

        $r1 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX>;

        if r0 == $r1 goto label1;

        $r4 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX_NO_PREAMBLE>;

        if r0 != $r4 goto label2;

     label1:
        $r3 = specialinvoke r0.<net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.graphic.StringBounder getTikzStringBounder(net.sourceforge.plantuml.TikzFontDistortion)>(r2);

        return $r3;

     label2:
        $r5 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BRAILLE_PNG>;

        if r0 != $r5 goto label3;

        $r12 = specialinvoke r0.<net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.graphic.StringBounder getBrailleStringBounder()>();

        return $r12;

     label3:
        $r6 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        if r0 != $r6 goto label4;

        $r11 = specialinvoke r0.<net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.graphic.StringBounder getSvgStringBounder(net.sourceforge.plantuml.SvgCharSizeHack)>(r10);

        return $r11;

     label4:
        $r7 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat DEBUG>;

        if r0 != $r7 goto label5;

        $r9 = new net.sourceforge.plantuml.ugraphic.debug.StringBounderDebug;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.debug.StringBounderDebug: void <init>()>();

        return $r9;

     label5:
        $r8 = specialinvoke r0.<net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.graphic.StringBounder getNormalStringBounder()>();

        return $r8;
    }

    private net.sourceforge.plantuml.graphic.StringBounder getSvgStringBounder(net.sourceforge.plantuml.SvgCharSizeHack)
    {
        net.sourceforge.plantuml.FileFormat$1 $r0;
        net.sourceforge.plantuml.FileFormat r1;
        net.sourceforge.plantuml.SvgCharSizeHack r2;

        r1 := @this: net.sourceforge.plantuml.FileFormat;

        r2 := @parameter0: net.sourceforge.plantuml.SvgCharSizeHack;

        $r0 = new net.sourceforge.plantuml.FileFormat$1;

        specialinvoke $r0.<net.sourceforge.plantuml.FileFormat$1: void <init>(net.sourceforge.plantuml.FileFormat,net.sourceforge.plantuml.SvgCharSizeHack)>(r1, r2);

        return $r0;
    }

    private net.sourceforge.plantuml.graphic.StringBounder getNormalStringBounder()
    {
        net.sourceforge.plantuml.FileFormat$2 $r0;
        net.sourceforge.plantuml.FileFormat r1;

        r1 := @this: net.sourceforge.plantuml.FileFormat;

        $r0 = new net.sourceforge.plantuml.FileFormat$2;

        specialinvoke $r0.<net.sourceforge.plantuml.FileFormat$2: void <init>(net.sourceforge.plantuml.FileFormat)>(r1);

        return $r0;
    }

    private static net.sourceforge.plantuml.Dimension2DDouble getJavaDimension(net.sourceforge.plantuml.ugraphic.UFont, java.lang.String)
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font r1;
        java.awt.Graphics2D $r2, $r5;
        java.awt.FontMetrics r3;
        java.lang.String r4;
        java.awt.geom.Rectangle2D r6;
        net.sourceforge.plantuml.Dimension2DDouble $r7;
        double $d0, $d1;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UFont;

        r4 := @parameter1: java.lang.String;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font getUnderlayingFont()>();

        $r2 = <net.sourceforge.plantuml.FileFormat: java.awt.Graphics2D gg>;

        r3 = virtualinvoke $r2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(r1);

        $r5 = <net.sourceforge.plantuml.FileFormat: java.awt.Graphics2D gg>;

        r6 = virtualinvoke r3.<java.awt.FontMetrics: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.Graphics)>(r4, $r5);

        $r7 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r6.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d1 = virtualinvoke r6.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $r7.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d1);

        return $r7;
    }

    private net.sourceforge.plantuml.graphic.StringBounder getBrailleStringBounder()
    {
        net.sourceforge.plantuml.FileFormat$3 $r0;
        net.sourceforge.plantuml.FileFormat r1;

        r1 := @this: net.sourceforge.plantuml.FileFormat;

        $r0 = new net.sourceforge.plantuml.FileFormat$3;

        specialinvoke $r0.<net.sourceforge.plantuml.FileFormat$3: void <init>(net.sourceforge.plantuml.FileFormat)>(r1);

        return $r0;
    }

    private net.sourceforge.plantuml.graphic.StringBounder getTikzStringBounder(net.sourceforge.plantuml.TikzFontDistortion)
    {
        net.sourceforge.plantuml.FileFormat$4 $r0;
        net.sourceforge.plantuml.FileFormat r1;
        net.sourceforge.plantuml.TikzFontDistortion r2;

        r1 := @this: net.sourceforge.plantuml.FileFormat;

        r2 := @parameter0: net.sourceforge.plantuml.TikzFontDistortion;

        $r0 = new net.sourceforge.plantuml.FileFormat$4;

        specialinvoke $r0.<net.sourceforge.plantuml.FileFormat$4: void <init>(net.sourceforge.plantuml.FileFormat,net.sourceforge.plantuml.TikzFontDistortion)>(r1, r2);

        return $r0;
    }

    public boolean isEps()
    {
        net.sourceforge.plantuml.FileFormat r0, $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        $r1 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS>;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS_TEXT>;

        if r0 != $r2 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.String changeName(java.lang.String, int)
    {
        int i0;
        net.sourceforge.plantuml.FileFormat r0;
        java.lang.String r1, $r4, $r8, $r10, $r12, $r13, $r14, $r15;
        java.lang.StringBuilder $r2, $r5, $r9, $r11;
        net.sourceforge.plantuml.OptionFlags $r3;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormat: java.lang.String getFileSuffix()>();

        $r15 = specialinvoke r0.<net.sourceforge.plantuml.FileFormat: java.lang.String changeName(java.lang.String,java.lang.String)>(r1, $r14);

        return $r15;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.OptionFlags: java.lang.String getFileSeparator()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%03d", $r6);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormat: java.lang.String getFileSuffix()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = specialinvoke r0.<net.sourceforge.plantuml.FileFormat: java.lang.String changeName(java.lang.String,java.lang.String)>(r1, $r12);

        return $r13;
    }

    private net.sourceforge.plantuml.security.SFile computeFilename(net.sourceforge.plantuml.security.SFile, int)
    {
        int i0;
        net.sourceforge.plantuml.security.SFile r0, r1, $r5;
        net.sourceforge.plantuml.FileFormat r2;
        java.lang.String $r3, $r4;

        r2 := @this: net.sourceforge.plantuml.FileFormat;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        $r4 = specialinvoke r2.<net.sourceforge.plantuml.FileFormat: java.lang.String computeFilenameInternal(java.lang.String,int)>($r3, i0);

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile file(java.lang.String)>($r4);

        return $r5;
    }

    private java.lang.String changeName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r6;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r4;
        net.sourceforge.plantuml.FileFormat r5;

        r5 := @this: net.sourceforge.plantuml.FileFormat;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r6 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.\\w+$", r1);

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r6;
    }

    private java.lang.String computeFilenameInternal(java.lang.String, int)
    {
        int i0;
        java.lang.String r0, $r4, $r7, $r10, $r14, $r16, $r18, $r19;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r8, $r11, $r15, $r17;
        net.sourceforge.plantuml.FileFormat r3;
        net.sourceforge.plantuml.OptionFlags $r9;
        java.lang.Object[] $r12;
        java.lang.Integer $r13;

        r3 := @this: net.sourceforge.plantuml.FileFormat;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.FileFormat: java.lang.String getFileSuffix()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.OptionFlags: java.lang.String getFileSeparator()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = newarray (java.lang.Object)[1];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[0] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%03d", $r12);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r3.<net.sourceforge.plantuml.FileFormat: java.lang.String getFileSuffix()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r7, $r18);

        return $r19;
    }

    public boolean doesSupportMetadata()
    {
        net.sourceforge.plantuml.FileFormat r0, $r1, $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        $r1 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        if r0 == $r1 goto label1;

        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        if r0 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean equalsMetadata(java.lang.String, net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.FileFormat r0, $r1, $r2;
        net.sourceforge.plantuml.security.SFile r3;
        java.lang.String r4, $r5, r6, r10, r11, r12;
        int $i0, $i1, i2;
        boolean $z0, z1;
        net.sourceforge.plantuml.png.MetadataTag $r7;
        java.io.IOException $r8;

        r0 := @this: net.sourceforge.plantuml.FileFormat;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: net.sourceforge.plantuml.security.SFile;

     label1:
        $r1 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        if r0 != $r1 goto label3;

        $r7 = new net.sourceforge.plantuml.png.MetadataTag;

        specialinvoke $r7.<net.sourceforge.plantuml.png.MetadataTag: void <init>(net.sourceforge.plantuml.security.SFile,java.lang.String)>(r3, "plantuml");

        r10 = virtualinvoke $r7.<net.sourceforge.plantuml.png.MetadataTag: java.lang.String getData()>();

        z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r10);

     label2:
        return z1;

     label3:
        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        if r0 != $r2 goto label7;

        r11 = staticinvoke <net.sourceforge.plantuml.FileUtils: java.lang.String readSvg(net.sourceforge.plantuml.security.SFile)>(r3);

        if r11 != null goto label5;

     label4:
        return 0;

     label5:
        r12 = staticinvoke <net.sourceforge.plantuml.svg.SvgGraphics: java.lang.String getMD5Hex(java.lang.String)>(r4);

        i2 = virtualinvoke r11.<java.lang.String: int lastIndexOf(java.lang.String)>("<!--MD5=[");

        if i2 == -1 goto label7;

        $r5 = "<!--MD5=[";

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i1 = i2 + $i0;

        r6 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>(r12);

     label6:
        return $z0;

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.io.IOException: void printStackTrace()>();

     label9:
        return 0;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
    }

    static net.sourceforge.plantuml.Dimension2DDouble access$000(net.sourceforge.plantuml.ugraphic.UFont, java.lang.String)
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.lang.String r1;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UFont;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.Dimension2DDouble getJavaDimension(net.sourceforge.plantuml.ugraphic.UFont,java.lang.String)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.FileFormat $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;
        net.sourceforge.plantuml.FileFormat[] $r22;
        java.awt.image.BufferedImage $r45, $r46;
        java.awt.Graphics2D $r47, $r50;
        java.lang.Object $r48;
        java.awt.RenderingHints$Key $r49;

        $r0 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r0.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("PNG", 0, "image/png");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG> = $r0;

        $r1 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r1.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("SVG", 1, "image/svg+xml");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG> = $r1;

        $r2 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r2.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("EPS", 2, "application/postscript");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS> = $r2;

        $r3 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r3.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("EPS_TEXT", 3, "application/postscript");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS_TEXT> = $r3;

        $r4 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r4.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("ATXT", 4, "text/plain");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ATXT> = $r4;

        $r5 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r5.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("UTXT", 5, "text/plain;charset=UTF-8");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat UTXT> = $r5;

        $r6 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r6.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("XMI_STANDARD", 6, "application/vnd.xmi+xml");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STANDARD> = $r6;

        $r7 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r7.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("XMI_STAR", 7, "application/vnd.xmi+xml");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STAR> = $r7;

        $r8 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r8.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("XMI_ARGO", 8, "application/vnd.xmi+xml");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_ARGO> = $r8;

        $r9 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r9.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("SCXML", 9, "application/scxml+xml");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SCXML> = $r9;

        $r10 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r10.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("PDF", 10, "application/pdf");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PDF> = $r10;

        $r11 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r11.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("MJPEG", 11, "video/x-msvideo");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat MJPEG> = $r11;

        $r12 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r12.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("ANIMATED_GIF", 12, "image/gif");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ANIMATED_GIF> = $r12;

        $r13 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r13.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("HTML", 13, "text/html");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat HTML> = $r13;

        $r14 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r14.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("HTML5", 14, "text/html");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat HTML5> = $r14;

        $r15 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r15.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("VDX", 15, "application/vnd.visio.xml");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat VDX> = $r15;

        $r16 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r16.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("LATEX", 16, "application/x-latex");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX> = $r16;

        $r17 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r17.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("LATEX_NO_PREAMBLE", 17, "application/x-latex");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX_NO_PREAMBLE> = $r17;

        $r18 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r18.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("BASE64", 18, "text/plain; charset=x-user-defined");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BASE64> = $r18;

        $r19 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r19.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("BRAILLE_PNG", 19, "image/png");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BRAILLE_PNG> = $r19;

        $r20 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r20.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("PREPROC", 20, "text/plain");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PREPROC> = $r20;

        $r21 = new net.sourceforge.plantuml.FileFormat;

        specialinvoke $r21.<net.sourceforge.plantuml.FileFormat: void <init>(java.lang.String,int,java.lang.String)>("DEBUG", 21, "text/plain");

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat DEBUG> = $r21;

        $r22 = newarray (net.sourceforge.plantuml.FileFormat)[22];

        $r23 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        $r22[0] = $r23;

        $r24 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        $r22[1] = $r24;

        $r25 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS>;

        $r22[2] = $r25;

        $r26 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS_TEXT>;

        $r22[3] = $r26;

        $r27 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ATXT>;

        $r22[4] = $r27;

        $r28 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat UTXT>;

        $r22[5] = $r28;

        $r29 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STANDARD>;

        $r22[6] = $r29;

        $r30 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STAR>;

        $r22[7] = $r30;

        $r31 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_ARGO>;

        $r22[8] = $r31;

        $r32 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SCXML>;

        $r22[9] = $r32;

        $r33 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PDF>;

        $r22[10] = $r33;

        $r34 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat MJPEG>;

        $r22[11] = $r34;

        $r35 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ANIMATED_GIF>;

        $r22[12] = $r35;

        $r36 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat HTML>;

        $r22[13] = $r36;

        $r37 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat HTML5>;

        $r22[14] = $r37;

        $r38 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat VDX>;

        $r22[15] = $r38;

        $r39 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX>;

        $r22[16] = $r39;

        $r40 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX_NO_PREAMBLE>;

        $r22[17] = $r40;

        $r41 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BASE64>;

        $r22[18] = $r41;

        $r42 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BRAILLE_PNG>;

        $r22[19] = $r42;

        $r43 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PREPROC>;

        $r22[20] = $r43;

        $r44 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat DEBUG>;

        $r22[21] = $r44;

        <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat[] $VALUES> = $r22;

        $r45 = new java.awt.image.BufferedImage;

        specialinvoke $r45.<java.awt.image.BufferedImage: void <init>(int,int,int)>(800, 100, 1);

        <net.sourceforge.plantuml.FileFormat: java.awt.image.BufferedImage imDummy> = $r45;

        $r46 = <net.sourceforge.plantuml.FileFormat: java.awt.image.BufferedImage imDummy>;

        $r47 = virtualinvoke $r46.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        <net.sourceforge.plantuml.FileFormat: java.awt.Graphics2D gg> = $r47;

        $r50 = <net.sourceforge.plantuml.FileFormat: java.awt.Graphics2D gg>;

        $r49 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r48 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        virtualinvoke $r50.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r49, $r48);

        return;
    }
}
