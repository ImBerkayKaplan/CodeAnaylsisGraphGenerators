public class net.sourceforge.plantuml.xmi.XmiDescriptionDiagram extends java.lang.Object implements net.sourceforge.plantuml.xmi.IXmiClassDiagram
{
    private final net.sourceforge.plantuml.descdiagram.DescriptionDiagram diagram;
    private final org.w3c.dom.Document document;
    private final org.w3c.dom.Element ownedElement;

    public void <init>(net.sourceforge.plantuml.descdiagram.DescriptionDiagram) throws javax.xml.parsers.ParserConfigurationException
    {
        net.sourceforge.plantuml.xmi.XmiDescriptionDiagram r0;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram r1;
        javax.xml.parsers.DocumentBuilder r2;
        org.w3c.dom.Document $r3, $r4, $r5, $r6, $r8, $r10, $r13, $r16, $r19, $r28;
        org.w3c.dom.Element r7, r11, r14, r17, r20, $r29, $r30, $r38, $r41;
        java.lang.String $r21, $r24, $r26;
        java.lang.StringBuilder $r22, $r23, $r25;
        java.util.Collection $r32, $r33;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r34;
        java.lang.Object $r35, $r36, $r39;
        net.sourceforge.plantuml.cucadiagram.IGroup $r37, $r40, r43;
        java.util.Iterator r42, r44, r46;
        net.sourceforge.plantuml.cucadiagram.IEntity r45;
        net.sourceforge.plantuml.cucadiagram.Link r47;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiDescriptionDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.descdiagram.DescriptionDiagram;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: net.sourceforge.plantuml.descdiagram.DescriptionDiagram diagram> = r1;

        r2 = staticinvoke <net.sourceforge.plantuml.xml.XmlFactories: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r3 = virtualinvoke r2.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document> = $r3;

        $r4 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        interfaceinvoke $r4.<org.w3c.dom.Document: void setXmlVersion(java.lang.String)>("1.0");

        $r5 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        interfaceinvoke $r5.<org.w3c.dom.Document: void setXmlStandalone(boolean)>(1);

        $r6 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r7 = interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI");

        interfaceinvoke r7.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.version", "1.1");

        interfaceinvoke r7.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmlns:UML", "href://org.omg/UML/1.3");

        $r8 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r7);

        $r10 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r11 = interfaceinvoke $r10.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI.header");

        interfaceinvoke r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r11);

        $r13 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r14 = interfaceinvoke $r13.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI.metamodel");

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.name", "UML");

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.version", "1.3");

        interfaceinvoke r11.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r14);

        $r16 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r17 = interfaceinvoke $r16.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("XMI.content");

        interfaceinvoke r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r17);

        $r19 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r20 = interfaceinvoke $r19.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Model");

        $r21 = staticinvoke <net.sourceforge.plantuml.xmi.CucaDiagramXmiMaker: java.lang.String getModel(net.sourceforge.plantuml.UmlDiagram)>(r1);

        interfaceinvoke r20.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PlantUML ");

        $r24 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r20.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r26);

        interfaceinvoke r17.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r20);

        $r28 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        $r29 = interfaceinvoke $r28.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Namespace.ownedElement");

        r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Element ownedElement> = $r29;

        $r30 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Element ownedElement>;

        interfaceinvoke r20.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r30);

        $r32 = virtualinvoke r1.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: java.util.Collection getGroups(boolean)>(0);

        r42 = interfaceinvoke $r32.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r39 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (net.sourceforge.plantuml.cucadiagram.IGroup) $r39;

        $r40 = interfaceinvoke r43.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        $z4 = $r40 instanceof net.sourceforge.plantuml.cucadiagram.GroupRoot;

        if $z4 == 0 goto label2;

        $r41 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Element ownedElement>;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: void addState(net.sourceforge.plantuml.cucadiagram.IEntity,org.w3c.dom.Element)>(r43, $r41);

     label2:
        goto label1;

     label3:
        $r33 = virtualinvoke r1.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: java.util.Collection getLeafsvalues()>();

        r44 = interfaceinvoke $r33.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r36 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r36;

        $r37 = interfaceinvoke r45.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        $z3 = $r37 instanceof net.sourceforge.plantuml.cucadiagram.GroupRoot;

        if $z3 == 0 goto label5;

        $r38 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Element ownedElement>;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: void addState(net.sourceforge.plantuml.cucadiagram.IEntity,org.w3c.dom.Element)>(r45, $r38);

     label5:
        goto label4;

     label6:
        $r34 = virtualinvoke r1.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: java.util.List getLinks()>();

        r46 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r35 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (net.sourceforge.plantuml.cucadiagram.Link) $r35;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: void addLink(net.sourceforge.plantuml.cucadiagram.Link)>(r47);

        goto label7;

     label8:
        return;
    }

    private void addState(net.sourceforge.plantuml.cucadiagram.IEntity, org.w3c.dom.Element)
    {
        net.sourceforge.plantuml.xmi.XmiDescriptionDiagram r0;
        net.sourceforge.plantuml.cucadiagram.IEntity r1, r14, r16;
        org.w3c.dom.Element r2, r3;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram $r5, $r7;
        java.util.Collection $r6, $r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r11;
        net.sourceforge.plantuml.cucadiagram.IGroup $r10, $r12;
        java.util.Iterator r13, r15;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiDescriptionDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        r3 := @parameter1: org.w3c.dom.Element;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Element createEntityNode(net.sourceforge.plantuml.cucadiagram.IEntity)>(r1);

        interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r2);

        $r5 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: net.sourceforge.plantuml.descdiagram.DescriptionDiagram diagram>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: java.util.Collection getGroups(boolean)>(0);

        r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r11;

        $r12 = interfaceinvoke r14.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        if $r12 != r1 goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: void addState(net.sourceforge.plantuml.cucadiagram.IEntity,org.w3c.dom.Element)>(r14, r2);

     label2:
        goto label1;

     label3:
        $r7 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: net.sourceforge.plantuml.descdiagram.DescriptionDiagram diagram>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: java.util.Collection getLeafsvalues()>();

        r15 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r9;

        $r10 = interfaceinvoke r16.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        if $r10 != r1 goto label5;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: void addState(net.sourceforge.plantuml.cucadiagram.IEntity,org.w3c.dom.Element)>(r16, r2);

     label5:
        goto label4;

     label6:
        return;
    }

    public static java.lang.String forXMI(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(58, 32);

        return $r1;
    }

    public static java.lang.String forXMI(net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.cucadiagram.Display r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(58, 32);

        return $r3;
    }

    private void addLink(net.sourceforge.plantuml.cucadiagram.Link)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r15, $r16, $r17, $r34, $r35, $r36;
        int $i0, $i1, $i2;
        java.lang.String r3, $r8, $r18, $r20, $r21, $r37, $r39, $r40, $r54, $r55, $r56, $r57, $r59;
        net.sourceforge.plantuml.xmi.XmiDescriptionDiagram r4;
        org.w3c.dom.Document $r5, $r11, $r13, $r22, $r32, $r41;
        org.w3c.dom.Element r6, r12, r14, r23, r33, r42, $r52;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram $r7;
        net.sourceforge.plantuml.cucadiagram.Link r9;
        net.sourceforge.plantuml.cucadiagram.Display $r10, $r58;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.IEntity $r19, $r38;
        net.sourceforge.plantuml.cucadiagram.LinkType $r24, $r27, $r43, $r46;
        net.sourceforge.plantuml.cucadiagram.LinkDecor $r25, $r26, $r28, $r29, $r44, $r45, $r47, $r48;

        r4 := @this: net.sourceforge.plantuml.xmi.XmiDescriptionDiagram;

        r9 := @parameter0: net.sourceforge.plantuml.cucadiagram.Link;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ass");

        $i0 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Association");

        interfaceinvoke r6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", r3);

        $r7 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: net.sourceforge.plantuml.descdiagram.DescriptionDiagram diagram>;

        $r8 = staticinvoke <net.sourceforge.plantuml.xmi.CucaDiagramXmiMaker: java.lang.String getModel(net.sourceforge.plantuml.UmlDiagram)>($r7);

        interfaceinvoke r6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("namespace", $r8);

        $r10 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: boolean isNull(net.sourceforge.plantuml.cucadiagram.Display)>($r10);

        if $z0 != 0 goto label1;

        $r58 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $r59 = staticinvoke <net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: java.lang.String forXMI(net.sourceforge.plantuml.cucadiagram.Display)>($r58);

        interfaceinvoke r6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r59);

     label1:
        $r11 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r12 = interfaceinvoke $r11.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Association.connection");

        $r13 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r14 = interfaceinvoke $r13.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:AssociationEnd");

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("end");

        $i1 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r18);

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("association", r3);

        $r19 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity1()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getUid()>();

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("type", $r20);

        $r21 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier1()>();

        if $r21 == null goto label2;

        $r56 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier1()>();

        $r57 = staticinvoke <net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: java.lang.String forXMI(java.lang.String)>($r56);

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r57);

     label2:
        $r22 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r23 = interfaceinvoke $r22.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:AssociationEnd.participant");

        $r24 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $r25 = virtualinvoke $r24.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.cucadiagram.LinkDecor getDecor2()>();

        $r26 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor COMPOSITION>;

        if $r25 != $r26 goto label3;

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("aggregation", "composite");

     label3:
        $r27 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $r28 = virtualinvoke $r27.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.cucadiagram.LinkDecor getDecor2()>();

        $r29 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor AGREGATION>;

        if $r28 != $r29 goto label4;

        interfaceinvoke r14.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("aggregation", "aggregate");

     label4:
        interfaceinvoke r14.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r23);

        interfaceinvoke r12.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r14);

        $r32 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r33 = interfaceinvoke $r32.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:AssociationEnd");

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("end");

        $i2 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r33.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r37);

        interfaceinvoke r33.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("association", r3);

        $r38 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity2()>();

        $r39 = interfaceinvoke $r38.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getUid()>();

        interfaceinvoke r33.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("type", $r39);

        $r40 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier2()>();

        if $r40 == null goto label5;

        $r54 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier2()>();

        $r55 = staticinvoke <net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: java.lang.String forXMI(java.lang.String)>($r54);

        interfaceinvoke r33.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r55);

     label5:
        $r41 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r42 = interfaceinvoke $r41.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:AssociationEnd.participant");

        $r43 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $r44 = virtualinvoke $r43.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.cucadiagram.LinkDecor getDecor1()>();

        $r45 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor COMPOSITION>;

        if $r44 != $r45 goto label6;

        interfaceinvoke r33.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("aggregation", "composite");

     label6:
        $r46 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $r47 = virtualinvoke $r46.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.cucadiagram.LinkDecor getDecor1()>();

        $r48 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor AGREGATION>;

        if $r47 != $r48 goto label7;

        interfaceinvoke r33.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("aggregation", "aggregate");

     label7:
        interfaceinvoke r33.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r42);

        interfaceinvoke r12.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r33);

        interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r12);

        $r52 = r4.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Element ownedElement>;

        interfaceinvoke $r52.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r6);

        return;
    }

    private org.w3c.dom.Element createEntityNode(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.xmi.XmiDescriptionDiagram r0;
        org.w3c.dom.Document $r1, $r10;
        org.w3c.dom.Element r2, r11;
        net.sourceforge.plantuml.cucadiagram.IEntity r3;
        java.lang.String $r4, $r7, $r9;
        net.sourceforge.plantuml.cucadiagram.Display $r5;
        java.lang.CharSequence $r6;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram $r8;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiDescriptionDiagram;

        r3 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r1 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Component");

        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getUid()>();

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xmi.id", $r4);

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", $r7);

        $r8 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: net.sourceforge.plantuml.descdiagram.DescriptionDiagram diagram>;

        $r9 = staticinvoke <net.sourceforge.plantuml.xmi.CucaDiagramXmiMaker: java.lang.String getModel(net.sourceforge.plantuml.UmlDiagram)>($r8);

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("namespace", $r9);

        $r10 = r0.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        r11 = interfaceinvoke $r10.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("UML:Classifier.feature");

        interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r11);

        return r2;
    }

    public void transformerXml(java.io.OutputStream) throws javax.xml.transform.TransformerException, javax.xml.parsers.ParserConfigurationException
    {
        javax.xml.transform.dom.DOMSource $r0;
        net.sourceforge.plantuml.xmi.XmiDescriptionDiagram r1;
        org.w3c.dom.Document $r2;
        javax.xml.transform.stream.StreamResult $r4;
        java.io.OutputStream r5;
        javax.xml.transform.Transformer r7;
        java.nio.charset.Charset $r8;
        java.lang.String $r9;

        r1 := @this: net.sourceforge.plantuml.xmi.XmiDescriptionDiagram;

        r5 := @parameter0: java.io.OutputStream;

        $r0 = new javax.xml.transform.dom.DOMSource;

        $r2 = r1.<net.sourceforge.plantuml.xmi.XmiDescriptionDiagram: org.w3c.dom.Document document>;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r2);

        $r4 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r4.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>(r5);

        r7 = staticinvoke <net.sourceforge.plantuml.xml.XmlFactories: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke r7.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r7.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("encoding", $r9);

        virtualinvoke r7.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r0, $r4);

        return;
    }
}
