public class net.sourceforge.plantuml.tim.EaterUndef extends net.sourceforge.plantuml.tim.Eater
{

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterUndef r0;
        net.sourceforge.plantuml.StringLocated r1, $r2;

        r0 := @this: net.sourceforge.plantuml.tim.EaterUndef;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterUndef r0;
        java.lang.String r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        net.sourceforge.plantuml.tim.TContext r3;

        r0 := @this: net.sourceforge.plantuml.tim.EaterUndef;

        r3 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterUndef: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterUndef: void checkAndEatChar(java.lang.String)>("!undef");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterUndef: void skipSpaces()>();

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterUndef: java.lang.String eatAndGetVarname()>();

        interfaceinvoke r2.<net.sourceforge.plantuml.tim.TMemory: void removeVariable(java.lang.String)>(r1);

        return;
    }
}
