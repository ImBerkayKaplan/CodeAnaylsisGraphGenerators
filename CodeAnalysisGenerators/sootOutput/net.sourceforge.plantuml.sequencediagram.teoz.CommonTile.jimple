public abstract class net.sourceforge.plantuml.sequencediagram.teoz.CommonTile extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.teoz.Tile, net.sourceforge.plantuml.graphic.UDrawable
{
    private final net.sourceforge.plantuml.graphic.StringBounder stringBounder;
    private double y;

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double y> = -1.0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = r1;

        return;
    }

    public final void callbackY(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double y> = d0;

        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: void callbackY_internal(double)>(d0);

        return;
    }

    protected void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        d0 := @parameter0: double;

        return;
    }

    protected final net.sourceforge.plantuml.graphic.StringBounder getStringBounder()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        return $r1;
    }

    public final double getMiddleX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r0;
        net.sourceforge.plantuml.real.Real $r1, $r2;
        double d0, d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: net.sourceforge.plantuml.real.Real getMaxX()>();

        d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: net.sourceforge.plantuml.real.Real getMinX()>();

        d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d2 = d1 + d0;

        $d3 = $d2 / 2.0;

        return $d3;
    }

    public final double getY()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double y>;

        return $d0;
    }
}
