public class net.sourceforge.plantuml.ugraphic.UMotif extends java.lang.Object
{
    private final java.util.List points;
    static final boolean $assertionsDisabled;

    public transient void <init>(int[])
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        java.util.ArrayList $r1;
        boolean $z0;
        int[] r2;
        java.awt.geom.Point2D$Double $r3;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        double $d0, $d1;
        java.util.List $r4;
        java.lang.AssertionError $r5;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        r2 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points> = $r1;

        $z0 = <net.sourceforge.plantuml.ugraphic.UMotif: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = lengthof r2;

        $i4 = $i3 % 2;

        if $i4 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        i5 = 0;

     label2:
        $i6 = lengthof r2;

        if i5 >= $i6 goto label3;

        $r4 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        $r3 = new java.awt.geom.Point2D$Double;

        $i0 = r2[i5];

        $d1 = (double) $i0;

        $i1 = i5 + 1;

        $i2 = r2[$i1];

        $d0 = (double) $i2;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        i5 = i5 + 2;

        goto label2;

     label3:
        return;
    }

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        java.util.ArrayList $r1;
        java.awt.geom.Point2D$Double $r2, $r6;
        java.lang.String r4;
        int $i0, i2;
        char $c1;
        java.awt.geom.Point2D r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.List $r7;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points> = $r1;

        $r2 = new java.awt.geom.Point2D$Double;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke r4.<java.lang.String: char charAt(int)>(i2);

        r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UMotif: java.awt.geom.Point2D convertPoint(char)>($c1);

        $d0 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        virtualinvoke $r2.<java.awt.geom.Point2D: void setLocation(double,double)>($d2, $d5);

        $r7 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        $r6 = new java.awt.geom.Point2D$Double;

        $d6 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $d7 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d6, $d7);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    double getLength()
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        java.util.List $r1, $r3, $r5;
        java.lang.Object $r2, $r6;
        java.awt.geom.Point2D $r4, $r7;
        int $i0, $i1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.awt.geom.Point2D) $r2;

        $r5 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $r7 = (java.awt.geom.Point2D) $r6;

        $d0 = virtualinvoke $r4.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r7);

        return $d0;
    }

    java.util.List getPoints()
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.posimo.DotPath getRectangle(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        double d0, d1, $d2, d3, $d4, $d5, $d6;
        int i0, i1;
        java.awt.geom.Point2D $r1, $r2;
        net.sourceforge.plantuml.posimo.DotPath r3, r4, r5;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        d1 := @parameter0: double;

        d3 := @parameter1: double;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UMotif: double getLength()>();

        $d2 = d1 / d0;

        i0 = (int) $d2;

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UMotif: net.sourceforge.plantuml.posimo.DotPath drawHorizontal(double,double,int)>(0.0, 0.0, i0);

        $d4 = d3 / d0;

        i1 = (int) $d4;

        $r1 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        $d5 = virtualinvoke $r1.<java.awt.geom.Point2D: double getX()>();

        $r2 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        $d6 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UMotif: net.sourceforge.plantuml.posimo.DotPath drawVertical(double,double,int)>($d5, $d6, i1);

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath addAfter(net.sourceforge.plantuml.posimo.DotPath)>(r3);

        return r5;
    }

    static java.awt.geom.Point2D convertPoint(char)
    {
        char c0;
        int i1, i2, i3, $i4, $i5;
        java.awt.geom.Point2D$Double $r0;
        double $d0, $d1;

        c0 := @parameter0: char;

        i1 = staticinvoke <net.sourceforge.plantuml.ugraphic.UMotif: int convertFromChar(char)>(c0);

        i2 = i1 % 7;

        i3 = i1 / 7;

        $r0 = new java.awt.geom.Point2D$Double;

        $i4 = i2 - 3;

        $d1 = (double) $i4;

        $i5 = i3 - 3;

        $d0 = (double) $i5;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    static int convertFromChar(char)
    {
        char c0;
        java.lang.IllegalArgumentException $r0;
        int $i1, $i2, $i3;

        c0 := @parameter0: char;

        if c0 < 65 goto label1;

        if c0 > 90 goto label1;

        $i3 = c0 - 65;

        return $i3;

     label1:
        if c0 < 97 goto label2;

        if c0 > 119 goto label2;

        $i1 = c0 - 97;

        $i2 = $i1 + 26;

        return $i2;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public void drawHorizontal(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, int)
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        double d0, d1;
        int i0;
        net.sourceforge.plantuml.posimo.DotPath r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UMotif: net.sourceforge.plantuml.posimo.DotPath drawHorizontal(double,double,int)>(d0, d1, i0);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r1);

        return;
    }

    public void drawVertical(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, int)
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        double d0, d1;
        int i0;
        net.sourceforge.plantuml.posimo.DotPath r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UMotif: net.sourceforge.plantuml.posimo.DotPath drawVertical(double,double,int)>(d0, d1, i0);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r1);

        return;
    }

    net.sourceforge.plantuml.posimo.DotPath drawHorizontal(double, double, int)
    {
        net.sourceforge.plantuml.posimo.DotPath $r0, r4;
        int i0, i1;
        net.sourceforge.plantuml.ugraphic.UMotif r1;
        java.awt.geom.Point2D $r2, $r3;
        double d0, d1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.posimo.DotPath;

        specialinvoke $r0.<net.sourceforge.plantuml.posimo.DotPath: void <init>()>();

        r4 = $r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = specialinvoke r1.<net.sourceforge.plantuml.ugraphic.UMotif: net.sourceforge.plantuml.posimo.DotPath addHorizontal(double,double,net.sourceforge.plantuml.posimo.DotPath)>(d0, d1, r4);

        $r2 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        d0 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $r3 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        d1 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return r4;
    }

    net.sourceforge.plantuml.posimo.DotPath drawVertical(double, double, int)
    {
        net.sourceforge.plantuml.posimo.DotPath $r0, r4;
        int i0, i1;
        net.sourceforge.plantuml.ugraphic.UMotif r1;
        java.awt.geom.Point2D $r2, $r3;
        double d0, d1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.posimo.DotPath;

        specialinvoke $r0.<net.sourceforge.plantuml.posimo.DotPath: void <init>()>();

        r4 = $r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = specialinvoke r1.<net.sourceforge.plantuml.ugraphic.UMotif: net.sourceforge.plantuml.posimo.DotPath addVertical(double,double,net.sourceforge.plantuml.posimo.DotPath)>(d0, d1, r4);

        $r2 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        d0 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $r3 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        d1 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return r4;
    }

    private net.sourceforge.plantuml.posimo.DotPath addHorizontal(double, double, net.sourceforge.plantuml.posimo.DotPath)
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.Point2D r4;
        double d0, d1, d2, d3, $d4, d5, $d6, d7, d8, d9;
        java.awt.geom.CubicCurve2D$Double $r5;
        net.sourceforge.plantuml.posimo.DotPath r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r6 := @parameter2: net.sourceforge.plantuml.posimo.DotPath;

        d8 = 0.0;

        d9 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.Point2D) $r3;

        d1 = d8 + d0;

        d3 = d9 + d2;

        $d4 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        d5 = $d4 + d0;

        $d6 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        d7 = $d6 + d2;

        $r5 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r5.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>(d1, d3, d1, d3, d5, d7, d5, d7);

        r6 = virtualinvoke r6.<net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath addAfter(java.awt.geom.CubicCurve2D$Double)>($r5);

        d8 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        d9 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        goto label1;

     label2:
        return r6;
    }

    private net.sourceforge.plantuml.posimo.DotPath addVertical(double, double, net.sourceforge.plantuml.posimo.DotPath)
    {
        net.sourceforge.plantuml.ugraphic.UMotif r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.Point2D r4;
        double d0, d1, d2, d3, $d4, d5, $d6, d7, d8, d9;
        java.awt.geom.CubicCurve2D$Double $r5;
        net.sourceforge.plantuml.posimo.DotPath r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UMotif;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r6 := @parameter2: net.sourceforge.plantuml.posimo.DotPath;

        d8 = 0.0;

        d9 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UMotif: java.util.List points>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.Point2D) $r3;

        d1 = d8 + d0;

        d3 = d9 + d2;

        $d4 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        d5 = $d4 + d0;

        $d6 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        d7 = $d6 + d2;

        $r5 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r5.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>(d1, d3, d1, d3, d5, d7, d5, d7);

        r6 = virtualinvoke r6.<net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath addAfter(java.awt.geom.CubicCurve2D$Double)>($r5);

        d8 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        d9 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        goto label1;

     label2:
        return r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/ugraphic/UMotif;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.ugraphic.UMotif: boolean $assertionsDisabled> = $z1;

        return;
    }
}
