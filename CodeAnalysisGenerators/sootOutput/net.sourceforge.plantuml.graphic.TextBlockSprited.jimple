public class net.sourceforge.plantuml.graphic.TextBlockSprited extends net.sourceforge.plantuml.graphic.AbstractTextBlock
{
    private final net.sourceforge.plantuml.graphic.TextBlock parent;
    private final net.sourceforge.plantuml.graphic.TextBlock sprite;

    public void <init>(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.graphic.TextBlockSprited r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockSprited;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockSprited: net.sourceforge.plantuml.graphic.TextBlock sprite> = r1;

        r0.<net.sourceforge.plantuml.graphic.TextBlockSprited: net.sourceforge.plantuml.graphic.TextBlock parent> = r2;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockSprited r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3, r5;
        net.sourceforge.plantuml.Dimension2DDouble $r6;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockSprited;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockSprited: double getCircledCharacterWithAndMargin(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockSprited: net.sourceforge.plantuml.graphic.TextBlock sprite>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r4 = r0.<net.sourceforge.plantuml.graphic.TextBlockSprited: net.sourceforge.plantuml.graphic.TextBlock parent>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d2 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = $d2 + d0;

        $d4 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d4);

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d3, $d5);

        return $r6;
    }

    private double getCircledCharacterWithAndMargin(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockSprited r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockSprited;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockSprited: net.sourceforge.plantuml.graphic.TextBlock sprite>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 + 6.0;

        return $d1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r6;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlockSprited r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r4;
        double d0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r2 := @this: net.sourceforge.plantuml.graphic.TextBlockSprited;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.graphic.TextBlockSprited: net.sourceforge.plantuml.graphic.TextBlock sprite>;

        interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        d0 = specialinvoke r2.<net.sourceforge.plantuml.graphic.TextBlockSprited: double getCircledCharacterWithAndMargin(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r2.<net.sourceforge.plantuml.graphic.TextBlockSprited: net.sourceforge.plantuml.graphic.TextBlock parent>;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d0);

        $r6 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r6);

        return;
    }
}
