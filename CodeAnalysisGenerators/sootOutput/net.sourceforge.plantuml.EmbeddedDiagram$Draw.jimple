public class net.sourceforge.plantuml.EmbeddedDiagram$Draw extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.Line, net.sourceforge.plantuml.creole.atom.Atom
{
    private java.awt.image.BufferedImage image;
    private final net.sourceforge.plantuml.ISkinSimple skinParam;
    final net.sourceforge.plantuml.EmbeddedDiagram this$0;

    public java.util.List splitInTwo(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.creole.atom.Atom[] $r0;
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r1;
        java.util.List $r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double d0;

        r1 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        $r0 = newarray (net.sourceforge.plantuml.creole.atom.Atom)[1];

        $r0[0] = r1;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r2;
    }

    private void <init>(net.sourceforge.plantuml.EmbeddedDiagram, net.sourceforge.plantuml.ISkinSimple)
    {
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r0;
        net.sourceforge.plantuml.EmbeddedDiagram r1;
        net.sourceforge.plantuml.ISkinSimple r2;

        r0 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        r1 := @parameter0: net.sourceforge.plantuml.EmbeddedDiagram;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinSimple;

        r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: net.sourceforge.plantuml.EmbeddedDiagram this$0> = r1;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: net.sourceforge.plantuml.ISkinSimple skinParam> = r2;

        return;
    }

    public double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r0;
        net.sourceforge.plantuml.Dimension2DDouble $r1, $r3;
        int $i0, $i1;
        double $d0, $d1;
        java.lang.InterruptedException $r2;
        java.io.IOException $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        java.awt.image.BufferedImage r6;

        r0 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

     label1:
        r6 = specialinvoke r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: java.awt.image.BufferedImage getImage()>();

        $r1 = new net.sourceforge.plantuml.Dimension2DDouble;

        $i0 = virtualinvoke r6.<java.awt.image.BufferedImage: int getWidth()>();

        $d0 = (double) $i0;

        $i1 = virtualinvoke r6.<java.awt.image.BufferedImage: int getHeight()>();

        $d1 = (double) $i1;

        specialinvoke $r1.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d1);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

        goto label5;

     label4:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.InterruptedException: void printStackTrace()>();

     label5:
        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(42.0, 42.0);

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r1;
        net.sourceforge.plantuml.ugraphic.UImage $r2;
        net.sourceforge.plantuml.ugraphic.PixelImage $r3;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r4;
        net.sourceforge.plantuml.ugraphic.UImageSvg $r5;
        java.lang.InterruptedException $r6;
        java.io.IOException $r7;
        boolean z0;
        java.lang.String r8;
        java.awt.image.BufferedImage r10;

        r1 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

     label1:
        z0 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: boolean matchesProperty(java.lang.String)>("SVG");

        if z0 == 0 goto label3;

        r8 = specialinvoke r1.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: java.lang.String getImageSvg()>();

        $r5 = new net.sourceforge.plantuml.ugraphic.UImageSvg;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UImageSvg: void <init>(java.lang.String,double)>(r8, 1.0);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

     label2:
        return;

     label3:
        r10 = specialinvoke r1.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: java.awt.image.BufferedImage getImage()>();

        $r2 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r3 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r4 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>(r10, $r4);

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r3);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

        goto label7;

     label6:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.InterruptedException: void printStackTrace()>();

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.InterruptedException from label3 to label4 with label6;
    }

    private java.lang.String getImageSvg() throws java.io.IOException, java.lang.InterruptedException
    {
        boolean z0;
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r0;
        net.sourceforge.plantuml.core.Diagram r1;
        java.io.ByteArrayOutputStream $r2;
        net.sourceforge.plantuml.FileFormatOption $r4;
        net.sourceforge.plantuml.FileFormat $r5;
        java.lang.String $r7;
        byte[] $r8;

        r0 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        r1 = specialinvoke r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: net.sourceforge.plantuml.core.Diagram getSystem()>();

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new net.sourceforge.plantuml.FileFormatOption;

        $r5 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        specialinvoke $r4.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r5);

        interfaceinvoke r1.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.ImageData exportDiagram(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>($r2, 0, $r4);

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void close()>();

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(z0);

        $r7 = new java.lang.String;

        $r8 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r8);

        return $r7;
    }

    private java.awt.image.BufferedImage getImage() throws java.io.IOException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r0;
        java.awt.image.BufferedImage $r1, $r2, $r3;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        $r1 = r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: java.awt.image.BufferedImage image>;

        if $r1 != null goto label1;

        z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: java.awt.image.BufferedImage getImageSlow()>();

        r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: java.awt.image.BufferedImage image> = $r3;

        staticinvoke <net.sourceforge.plantuml.UseStyle: void setBetaStyle(boolean)>(z0);

     label1:
        $r2 = r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: java.awt.image.BufferedImage image>;

        return $r2;
    }

    private java.awt.image.BufferedImage getImageSlow() throws java.io.IOException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r0;
        net.sourceforge.plantuml.core.Diagram r1;
        java.io.ByteArrayOutputStream $r2;
        net.sourceforge.plantuml.FileFormatOption $r4;
        net.sourceforge.plantuml.FileFormat $r5;
        byte[] $r7;
        java.awt.image.BufferedImage $r8;

        r0 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: net.sourceforge.plantuml.core.Diagram getSystem()>();

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new net.sourceforge.plantuml.FileFormatOption;

        $r5 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r4.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r5);

        interfaceinvoke r1.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.ImageData exportDiagram(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>($r2, 0, $r4);

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void close()>();

        $r7 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.awt.image.BufferedImage read(byte[])>($r7);

        return $r8;
    }

    public net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()
    {
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r0;
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r1;

        r1 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        $r0 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        return $r0;
    }

    private net.sourceforge.plantuml.core.Diagram getSystem() throws java.io.IOException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.BlockUml $r0;
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r1;
        net.sourceforge.plantuml.ISkinSimple $r2, $r8;
        net.sourceforge.plantuml.api.ThemeStyle $r3;
        net.sourceforge.plantuml.EmbeddedDiagram $r4;
        net.sourceforge.plantuml.cucadiagram.Display $r5;
        java.util.List $r6;
        net.sourceforge.plantuml.preproc.Defines $r7;
        net.sourceforge.plantuml.core.Diagram $r10;

        r1 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        $r0 = new net.sourceforge.plantuml.BlockUml;

        $r2 = r1.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: net.sourceforge.plantuml.ISkinSimple skinParam>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinSimple: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r4 = r1.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: net.sourceforge.plantuml.EmbeddedDiagram this$0>;

        $r5 = staticinvoke <net.sourceforge.plantuml.EmbeddedDiagram: net.sourceforge.plantuml.cucadiagram.Display access$100(net.sourceforge.plantuml.EmbeddedDiagram)>($r4);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.cucadiagram.Display: java.util.List as2()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r8 = r1.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: net.sourceforge.plantuml.ISkinSimple skinParam>;

        specialinvoke $r0.<net.sourceforge.plantuml.BlockUml: void <init>(net.sourceforge.plantuml.api.ThemeStyle,java.util.List,net.sourceforge.plantuml.preproc.Defines,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.preproc2.PreprocessorModeSet,java.nio.charset.Charset)>($r3, $r6, $r7, $r8, null, null);

        $r10 = virtualinvoke $r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        return $r10;
    }

    void <init>(net.sourceforge.plantuml.EmbeddedDiagram, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.EmbeddedDiagram$1)
    {
        net.sourceforge.plantuml.EmbeddedDiagram$Draw r0;
        net.sourceforge.plantuml.EmbeddedDiagram r1;
        net.sourceforge.plantuml.ISkinSimple r2;
        net.sourceforge.plantuml.EmbeddedDiagram$1 r3;

        r0 := @this: net.sourceforge.plantuml.EmbeddedDiagram$Draw;

        r1 := @parameter0: net.sourceforge.plantuml.EmbeddedDiagram;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinSimple;

        r3 := @parameter2: net.sourceforge.plantuml.EmbeddedDiagram$1;

        specialinvoke r0.<net.sourceforge.plantuml.EmbeddedDiagram$Draw: void <init>(net.sourceforge.plantuml.EmbeddedDiagram,net.sourceforge.plantuml.ISkinSimple)>(r1, r2);

        return;
    }
}
