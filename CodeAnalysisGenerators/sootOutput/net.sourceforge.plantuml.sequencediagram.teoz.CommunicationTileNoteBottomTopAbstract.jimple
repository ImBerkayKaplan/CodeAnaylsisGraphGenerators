public abstract class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
{
    protected final net.sourceforge.plantuml.sequencediagram.teoz.Tile tile;
    protected final net.sourceforge.plantuml.sequencediagram.AbstractMessage message;
    protected final net.sourceforge.plantuml.skin.rose.Rose skin;
    protected final net.sourceforge.plantuml.ISkinParam skinParam;
    protected final net.sourceforge.plantuml.sequencediagram.Note noteOnMessage;
    protected final double spacey;

    public final net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.AbstractMessage message>;

        return $r1;
    }

    public final double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getContactPointRelative()>();

        return $d0;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.teoz.Tile, net.sourceforge.plantuml.sequencediagram.AbstractMessage, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r1;
        net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r4;
        net.sourceforge.plantuml.skin.rose.Rose r5;
        net.sourceforge.plantuml.ISkinParam r6;
        net.sourceforge.plantuml.sequencediagram.Note r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        r5 := @parameter2: net.sourceforge.plantuml.skin.rose.Rose;

        r6 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        r7 := @parameter4: net.sourceforge.plantuml.sequencediagram.Note;

        $r2 = (net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile) r1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: double spacey> = 10.0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: double spacey> = 10.0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.AbstractMessage message> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.skin.rose.Rose skin> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage> = r7;

        return;
    }

    protected final void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void callbackY(double)>(d0);

        return;
    }

    protected final net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.Note $r1, $r5, $r8;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r7;
        net.sourceforge.plantuml.skin.ComponentType $r6;
        net.sourceforge.plantuml.cucadiagram.Display $r9;
        net.sourceforge.plantuml.skin.Component r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.ISkinParam getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r4);

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        r10 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNote(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r6, $r7, $r9);

        return r10;
    }

    protected final net.sourceforge.plantuml.real.Real getNotePosition(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.real.Real r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMinX()>();

        return r2;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r16;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r2;
        net.sourceforge.plantuml.skin.Component r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.skin.Area $r5;
        double $d0, $d1, $d2, $d3, $d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r7, $r9, $r11, $r14, $r18;
        net.sourceforge.plantuml.graphic.UDrawable $r8;
        net.sourceforge.plantuml.real.Real $r10, $r12, $r13;
        net.sourceforge.plantuml.ugraphic.UTranslate $r15;
        net.sourceforge.plantuml.skin.Context2D $r17;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = new net.sourceforge.plantuml.skin.Area;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r5.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d0, $d1);

        $r7 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r8 = (net.sourceforge.plantuml.graphic.UDrawable) $r7;

        interfaceinvoke $r8.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        $r9 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMinX()>();

        $d2 = interfaceinvoke $r10.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r11 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        $d3 = interfaceinvoke $r12.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d4 = $d2 + $d3;

        d5 = $d4 / 2.0;

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.real.Real getNotePosition(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d6 = interfaceinvoke $r13.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r14 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        d7 = interfaceinvoke $r14.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        $r15 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d8 = d7 + 10.0;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, $d8);

        $r16 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r15);

        $r17 = (net.sourceforge.plantuml.skin.Context2D) r0;

        interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r16, $r5, $r17);

        $r18 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $d9 = interfaceinvoke $r18.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getContactPointRelative()>();

        $d10 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d11 = $d10 / 2.0;

        $d14 = d6 + $d11;

        $d12 = d7 + 10.0;

        $d13 = $d12 + 5.0;

        virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r0, d5, $d9, $d14, $d13);

        return;
    }

    protected final void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double, double)
    {
        boolean $z0;
        net.sourceforge.plantuml.skin.rose.Rose $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r1;
        net.sourceforge.plantuml.ColorParam $r2;
        net.sourceforge.plantuml.ISkinParam $r3, $r16, $r20, $r22;
        double d0, d1, d2, d3, d4, d5;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, $r6, $r7, $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.ugraphic.UStroke $r8;
        net.sourceforge.plantuml.ugraphic.ULine $r10;
        net.sourceforge.plantuml.style.SName[] $r11;
        net.sourceforge.plantuml.style.SName $r12, $r13, $r14;
        net.sourceforge.plantuml.style.StyleSignature $r15;
        net.sourceforge.plantuml.style.StyleBuilder $r17;
        net.sourceforge.plantuml.style.PName $r18;
        net.sourceforge.plantuml.style.Value $r19;
        net.sourceforge.plantuml.api.ThemeStyle $r21;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r23;
        net.sourceforge.plantuml.style.Style r24;
        net.sourceforge.plantuml.ugraphic.color.HColor r25;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        d0 := @parameter3: double;

        d2 := @parameter4: double;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r11 = newarray (net.sourceforge.plantuml.style.SName)[3];

        $r12 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r11[0] = $r12;

        $r13 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r11[1] = $r13;

        $r14 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName sequenceDiagram>;

        $r11[2] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r11);

        $r16 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r24 = virtualinvoke $r15.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r17);

        $r18 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r19 = virtualinvoke r24.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r18);

        $r20 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r22 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r23 = interfaceinvoke $r22.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r25 = interfaceinvoke $r19.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r21, $r23);

        goto label2;

     label1:
        $r0 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r2 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        r25 = virtualinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>($r3, $r2);

     label2:
        d5 = d0 - d1;

        d4 = d2 - d3;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d1, d3);

        $r6 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r25);

        $r8 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double,double,double)>(2.0, 2.0, 1.0);

        $r9 = interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        $r10 = new net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(d5, d4);

        interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r10);

        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $d0 = interfaceinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = $d0 + $d1;

        $d3 = $d2 + 10.0;

        return $d3;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void addConstraints()>();

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMinX()>();

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        return $r2;
    }
}
