public class net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.graphic.Pushable
{
    private static int CPT;
    private final int outMargin;
    private double startingX;
    private final net.sourceforge.plantuml.skin.Component head;
    private final net.sourceforge.plantuml.skin.Component line;
    private final net.sourceforge.plantuml.skin.Component tail;
    private final net.sourceforge.plantuml.skin.Component delayLine;
    private int cpt;
    private final java.util.List delays;

    public void <init>(net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.skin.Component, double, int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        int $i0, $i1, i2;
        java.util.ArrayList $r1;
        double d0;
        net.sourceforge.plantuml.skin.Component r2, r3, r4, r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r2 := @parameter0: net.sourceforge.plantuml.skin.Component;

        r3 := @parameter1: net.sourceforge.plantuml.skin.Component;

        r4 := @parameter2: net.sourceforge.plantuml.skin.Component;

        r5 := @parameter3: net.sourceforge.plantuml.skin.Component;

        d0 := @parameter4: double;

        i2 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int CPT>;

        $i1 = $i0 + 1;

        <net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int CPT> = $i1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int cpt> = $i0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays> = $r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int outMargin> = i2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component tail> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component delayLine> = r5;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r2;
        int $i0;
        java.lang.String $r4;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PB");

        $i0 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int cpt>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public double getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX>;

        $i0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int outMargin>;

        $d0 = (double) $i0;

        $d2 = $d1 + $d0;

        return $d2;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0, $d1, $d2, $d3, $d4;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d3 = $d0 + $d1;

        $i0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int outMargin>;

        $i1 = 2 * $i0;

        $d2 = (double) $i1;

        $d4 = $d3 + $d2;

        return $d4;
    }

    public double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d1 / 2.0;

        $d4 = $d0 + $d2;

        $i0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int outMargin>;

        $d3 = (double) $i0;

        $d5 = $d4 + $d3;

        return $d5;
    }

    public double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2, $r3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line>;

        $d1 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d1 / 2.0;

        $d3 = $d0 + $d2;

        return $d3;
    }

    public double getHeadHeightOnly(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getTailHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2, $r3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component tail>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line>;

        $d1 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d1 / 2.0;

        $d3 = $d0 + $d2;

        return $d3;
    }

    public void pushToLeft(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        double d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX> = $d2;

        return;
    }

    public void drawHeadTailU(net.sourceforge.plantuml.ugraphic.UGraphic, double, boolean, double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, $d12, $d13, $d14, d15, d16;
        byte $b0, $b1;
        net.sourceforge.plantuml.graphic.StringBounder r0;
        boolean z0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r1;
        net.sourceforge.plantuml.skin.Component $r2, $r6, $r7, $r8, $r10, $r11, $r13, $r17, $r18;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3, $r12;
        net.sourceforge.plantuml.skin.Area $r4, $r15;
        net.sourceforge.plantuml.Dimension2DDouble $r5, $r16;
        net.sourceforge.plantuml.skin.SimpleContext2D $r9, $r19;
        net.sourceforge.plantuml.ugraphic.UGraphic $r14, r21, r22;
        java.lang.IllegalStateException $r20;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r21 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        z0 := @parameter2: boolean;

        d15 := @parameter3: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setTopStartingY cannot be zero");

        throw $r20;

     label1:
        r0 = interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        if z0 == 0 goto label2;

        $r10 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d7 = interfaceinvoke $r10.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d8 = d0 - $d7;

        $r11 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line>;

        $d9 = interfaceinvoke $r11.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d10 = $d9 / 2.0;

        d11 = $d8 - $d10;

        $r13 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $r12 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d12 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getMinX()>();

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d12, d11);

        $r14 = interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r15 = new net.sourceforge.plantuml.skin.Area;

        $r16 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r17 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d13 = interfaceinvoke $r17.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r18 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d14 = interfaceinvoke $r18.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        specialinvoke $r16.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d13, $d14);

        specialinvoke $r15.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r16);

        $r19 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r19.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke $r13.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r14, $r15, $r19);

     label2:
        $b1 = d15 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line>;

        $d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d2 = $d1 / 2.0;

        $d3 = $d2 - 1.0;

        d16 = d15 + $d3;

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getMinX()>();

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d4, d16);

        r22 = interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component tail>;

        $r4 = new net.sourceforge.plantuml.skin.Area;

        $r5 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component tail>;

        $d5 = interfaceinvoke $r6.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r8 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component tail>;

        $d6 = interfaceinvoke $r8.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        specialinvoke $r5.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d5, $d6);

        specialinvoke $r4.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5);

        $r9 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke $r7.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r22, $r4, $r9);

     label3:
        return;
    }

    public void drawParticipantHead(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r5;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r2;
        int $i0;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.skin.Component $r3, $r8, $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4;
        net.sourceforge.plantuml.skin.Area $r6;
        net.sourceforge.plantuml.Dimension2DDouble $r7;
        net.sourceforge.plantuml.skin.SimpleContext2D $r10;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $i0 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int outMargin>;

        $d0 = (double) $i0;

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d0);

        $r5 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        $r6 = new net.sourceforge.plantuml.skin.Area;

        $r7 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r8 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d1 = interfaceinvoke $r8.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r9 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d2 = interfaceinvoke $r9.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        specialinvoke $r7.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d2);

        specialinvoke $r6.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r7);

        $r10 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r10.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r5, $r6, $r10);

        return;
    }

    public void drawLineU22(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        double $d0, d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15;
        net.sourceforge.plantuml.ugraphic.UTranslate $r1;
        java.util.List $r2, $r4, $r6, $r7, $r10, $r11;
        int $i0, $i1, $i2, $i4, $i5;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.util.Iterator r5;
        boolean $z0, z1;
        java.lang.Object $r8, $r12, $r14;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText $r9, $r13, r15;
        byte $b3, $b6;
        net.sourceforge.plantuml.skin.Component $r16, $r17, $r20;
        net.sourceforge.plantuml.ugraphic.UGraphic r18, r19;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r18 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d15 := @parameter1: double;

        d1 := @parameter2: double;

        z1 := @parameter3: boolean;

        d3 := @parameter4: double;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX>;

        $r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d0);

        r19 = interfaceinvoke r18.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        r3 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r15 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText) $r14;

        $d6 = virtualinvoke r15.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getStartingY()>();

        $d7 = $d6 - d3;

        $b6 = $d7 cmpl d15;

        if $b6 < 0 goto label2;

        $d8 = virtualinvoke r15.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getStartingY()>();

        $d9 = $d8 - d3;

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line>;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void drawLineIfLowerThan(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.skin.Component,double)>(r19, d15, $d9, $r16, d1);

        $d10 = virtualinvoke r15.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getStartingY()>();

        $d11 = $d10 - d3;

        $d12 = virtualinvoke r15.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getEndingY(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d13 = $d12 - d3;

        $r17 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component delayLine>;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void drawLineIfLowerThan(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.skin.Component,double)>(r19, $d11, $d13, $r17, d1);

        $d14 = virtualinvoke r15.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getEndingY(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        d15 = $d14 - d3;

     label2:
        goto label1;

     label3:
        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i2);

        $r9 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText) $r8;

        $d2 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getEndingY(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d4 = $d2 - d3;

        $b3 = $d4 cmpl d15;

        if $b3 <= 0 goto label4;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        $i4 = interfaceinvoke $r10.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>($i5);

        $r13 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText) $r12;

        $d5 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getEndingY(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        d15 = $d5 - d3;

     label4:
        $r20 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line>;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void drawLineIfLowerThan(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.skin.Component,double)>(r19, d15, d1, $r20, d1);

        return;
    }

    private void drawLineIfLowerThan(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, net.sourceforge.plantuml.skin.Component, double)
    {
        double d0, d1, d2, d3, d4;
        byte $b0, $b1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.skin.Component r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.skin.Component;

        d0 := @parameter4: double;

        d3 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d0);

        d4 = staticinvoke <java.lang.Math: double min(double,double)>(d2, d0);

        $b0 = d3 cmpg d0;

        if $b0 < 0 goto label1;

        $b1 = d4 cmpg d0;

        if $b1 >= 0 goto label2;

     label1:
        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.skin.Component)>(r1, d3, d4, r2);

     label2:
        return;
    }

    private void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, net.sourceforge.plantuml.skin.Component)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component r2, $r8;
        double d0, $d1, $d2, d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.skin.Area $r5;
        net.sourceforge.plantuml.Dimension2DDouble $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r7;
        int $i0, $i1;
        net.sourceforge.plantuml.skin.SimpleContext2D $r9;

        r7 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d3 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.skin.Component;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d0);

        $r4 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = new net.sourceforge.plantuml.skin.Area;

        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r8 = r7.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component head>;

        $d1 = interfaceinvoke $r8.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $i0 = r7.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int outMargin>;

        $i1 = $i0 * 2;

        $d2 = (double) $i1;

        $d5 = $d1 + $d2;

        $d4 = d3 - d0;

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d5, $d4);

        specialinvoke $r5.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r6);

        $r9 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r4, $r5, $r9);

        return;
    }

    public double magicMargin(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: net.sourceforge.plantuml.skin.Component line>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = $d0 / 2.0;

        return $d1;
    }

    public double getStartingX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double startingX>;

        return $d0;
    }

    public void addDelay(net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.Collection getDelays(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox$1 $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox$1;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox$1: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox,net.sourceforge.plantuml.graphic.StringBounder)>(r1, r2);

        return $r0;
    }

    static java.util.List access$000(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r0;
        java.util.List $r1;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: java.util.List delays>;

        return $r1;
    }

    static void <clinit>()
    {
        <net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: int CPT> = 0;

        return;
    }
}
