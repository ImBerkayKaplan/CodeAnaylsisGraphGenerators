public final class net.sourceforge.plantuml.tim.expression.TValue extends java.lang.Object
{
    private final int intValue;
    private final java.lang.String stringValue;
    private final net.sourceforge.plantuml.json.JsonValue jsonValue;

    private void <init>(int)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue> = i0;

        r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String stringValue> = null;

        r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue> = null;

        return;
    }

    private void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue> = 0;

        r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue> = null;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String stringValue> = $r3;

        return;
    }

    public void <init>(net.sourceforge.plantuml.json.JsonValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        net.sourceforge.plantuml.json.JsonValue r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue> = r1;

        r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue> = 0;

        r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String stringValue> = null;

        return;
    }

    public static net.sourceforge.plantuml.tim.expression.TValue fromInt(int)
    {
        net.sourceforge.plantuml.tim.expression.TValue $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.tim.expression.TValue;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(int)>(i0);

        return $r0;
    }

    public static net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)
    {
        net.sourceforge.plantuml.tim.expression.TValue $r0;
        boolean z0;
        byte $b0;

        z0 := @parameter0: boolean;

        $r0 = new net.sourceforge.plantuml.tim.expression.TValue;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(int)>($b0);

        return $r0;
    }

    public static net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.json.JsonValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue $r0;
        net.sourceforge.plantuml.json.JsonValue r1;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new net.sourceforge.plantuml.tim.expression.TValue;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(net.sourceforge.plantuml.json.JsonValue)>(r1);

        return $r0;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        net.sourceforge.plantuml.json.JsonValue $r1, $r2, $r9, $r11, $r12;
        java.lang.String $r3, $r4, $r8, $r10, $r13;
        java.lang.StringBuilder $r5, $r6, $r7;
        int $i0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        if $r1 == null goto label1;

        $r11 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        $z0 = virtualinvoke $r11.<net.sourceforge.plantuml.json.JsonValue: boolean isString()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.json.JsonValue: java.lang.String asString()>();

        return $r13;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        if $r2 == null goto label2;

        $r9 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        return $r10;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String stringValue>;

        if $r3 != null goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i0 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label3:
        $r4 = r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String stringValue>;

        return $r4;
    }

    public static net.sourceforge.plantuml.tim.expression.TValue fromString(net.sourceforge.plantuml.tim.expression.Token)
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        net.sourceforge.plantuml.tim.expression.TokenType $r1, $r2;
        net.sourceforge.plantuml.tim.expression.TValue $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: net.sourceforge.plantuml.tim.expression.Token;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r2 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType QUOTED_STRING>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $r3 = new net.sourceforge.plantuml.tim.expression.TValue;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String getSurface()>();

        specialinvoke $r3.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(java.lang.String)>($r4);

        return $r3;
    }

    public static net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)
    {
        net.sourceforge.plantuml.tim.expression.TValue $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.tim.expression.TValue;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.tim.expression.TValue fromNumber(net.sourceforge.plantuml.tim.expression.Token)
    {
        net.sourceforge.plantuml.tim.expression.Token r0;
        net.sourceforge.plantuml.tim.expression.TokenType $r1, $r2;
        net.sourceforge.plantuml.tim.expression.TValue $r3;
        java.lang.String $r4;
        int $i0;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: net.sourceforge.plantuml.tim.expression.Token;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r2 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType NUMBER>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $r3 = new net.sourceforge.plantuml.tim.expression.TValue;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String getSurface()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        specialinvoke $r3.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(int)>($i0);

        return $r3;
    }

    public net.sourceforge.plantuml.tim.expression.TValue add(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, $r1, r5, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r7;
        java.lang.String $r3, $r6, $r8;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r5 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label1;

        $r9 = new net.sourceforge.plantuml.tim.expression.TValue;

        $i1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i0 = r5.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i2 = $i1 + $i0;

        specialinvoke $r9.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(int)>($i2);

        return $r9;

     label1:
        $r1 = new net.sourceforge.plantuml.tim.expression.TValue;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(java.lang.String)>($r8);

        return $r1;
    }

    public net.sourceforge.plantuml.tim.expression.TValue minus(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, $r1, r5, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r7;
        java.lang.String $r3, $r6, $r8;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r5 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label1;

        $r9 = new net.sourceforge.plantuml.tim.expression.TValue;

        $i1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i0 = r5.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i2 = $i1 - $i0;

        specialinvoke $r9.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(int)>($i2);

        return $r9;

     label1:
        $r1 = new net.sourceforge.plantuml.tim.expression.TValue;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(java.lang.String)>($r8);

        return $r1;
    }

    public net.sourceforge.plantuml.tim.expression.TValue multiply(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, $r1, r6, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r5, $r8;
        java.lang.String $r3, $r7, $r9;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r6 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label1;

        $r10 = new net.sourceforge.plantuml.tim.expression.TValue;

        $i1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i0 = r6.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i2 = $i1 * $i0;

        specialinvoke $r10.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(int)>($i2);

        return $r10;

     label1:
        $r1 = new net.sourceforge.plantuml.tim.expression.TValue;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*");

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(java.lang.String)>($r9);

        return $r1;
    }

    public net.sourceforge.plantuml.tim.expression.TValue dividedBy(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, $r1, r6, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r5, $r8;
        java.lang.String $r3, $r7, $r9;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r6 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label1;

        $r10 = new net.sourceforge.plantuml.tim.expression.TValue;

        $i1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i0 = r6.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i2 = $i1 / $i0;

        specialinvoke $r10.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(int)>($i2);

        return $r10;

     label1:
        $r1 = new net.sourceforge.plantuml.tim.expression.TValue;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<net.sourceforge.plantuml.tim.expression.TValue: void <init>(java.lang.String)>($r9);

        return $r1;
    }

    public boolean isNumber()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        net.sourceforge.plantuml.json.JsonValue $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        if $r1 != null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String stringValue>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isJson()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        net.sourceforge.plantuml.json.JsonValue $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isString()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String stringValue>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.Token toToken()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.tim.expression.Token $r1, $r4, $r8;
        java.lang.String $r2, $r5, $r9;
        net.sourceforge.plantuml.tim.expression.TokenType $r3, $r7, $r10;
        net.sourceforge.plantuml.json.JsonValue $r6;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label1;

        $r8 = new net.sourceforge.plantuml.tim.expression.Token;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r10 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType NUMBER>;

        specialinvoke $r8.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r9, $r10, null);

        return $r8;

     label1:
        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isJson()>();

        if $z1 == 0 goto label2;

        $r4 = new net.sourceforge.plantuml.tim.expression.Token;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r7 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType JSON_DATA>;

        $r6 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        specialinvoke $r4.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r5, $r7, $r6);

        return $r4;

     label2:
        $r1 = new net.sourceforge.plantuml.tim.expression.Token;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r3 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType QUOTED_STRING>;

        specialinvoke $r1.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r2, $r3, null);

        return $r1;
    }

    public net.sourceforge.plantuml.tim.expression.TValue greaterThanOrEquals(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label3;

        $i2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i1 = r2.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        if $i2 < $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 < 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z3);

        return $r4;
    }

    public net.sourceforge.plantuml.tim.expression.TValue greaterThan(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label3;

        $i2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i1 = r2.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        if $i2 <= $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 <= 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z3);

        return $r4;
    }

    public net.sourceforge.plantuml.tim.expression.TValue lessThanOrEquals(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label3;

        $i2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i1 = r2.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        if $i2 > $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 > 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z3);

        return $r4;
    }

    public net.sourceforge.plantuml.tim.expression.TValue lessThan(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label3;

        $i2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i1 = r2.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        if $i2 >= $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 >= 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z3);

        return $r4;
    }

    public net.sourceforge.plantuml.tim.expression.TValue equalsOperation(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label3;

        $i2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i1 = r2.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        if $i2 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z3);

        return $r4;
    }

    public net.sourceforge.plantuml.tim.expression.TValue notEquals(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label3;

        $i2 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        $i1 = r2.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        if $i2 == $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z3);

        return $r4;
    }

    public boolean toBoolean()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label3;

        $i1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public int toInt()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $i0 = r0.<net.sourceforge.plantuml.tim.expression.TValue: int intValue>;

        return $i0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue logicalAnd(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r1 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean toBoolean()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.tim.expression.TValue: boolean toBoolean()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r2 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r2;
    }

    public net.sourceforge.plantuml.tim.expression.TValue logicalOr(net.sourceforge.plantuml.tim.expression.TValue)
    {
        net.sourceforge.plantuml.tim.expression.TValue r0, $r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TValue: boolean toBoolean()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean toBoolean()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r1 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>($z2);

        return $r1;
    }

    public net.sourceforge.plantuml.json.JsonValue toJson()
    {
        net.sourceforge.plantuml.tim.expression.TValue r0;
        net.sourceforge.plantuml.json.JsonValue $r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TValue;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue jsonValue>;

        return $r1;
    }
}
