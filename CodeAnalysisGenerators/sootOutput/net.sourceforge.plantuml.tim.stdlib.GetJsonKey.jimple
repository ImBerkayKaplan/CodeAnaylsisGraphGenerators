public class net.sourceforge.plantuml.tim.stdlib.GetJsonKey extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.GetJsonKey r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonKey;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.GetJsonKey r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonKey;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%get_json_keys", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.GetJsonKey r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonKey;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0, $r9, $r15;
        java.lang.Object $r1, $r7, $r11, $r17;
        net.sourceforge.plantuml.tim.expression.TValue r2, $r6, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.json.JsonValue r3, r32;
        net.sourceforge.plantuml.tim.EaterException $r4, $r19;
        net.sourceforge.plantuml.json.JsonArray $r5, $r14, r29;
        net.sourceforge.plantuml.json.JsonObject r8, r25;
        java.util.Iterator r10, r27, r31;
        java.lang.String r12, r28;
        net.sourceforge.plantuml.tim.stdlib.GetJsonKey r20;
        net.sourceforge.plantuml.tim.TContext r21;
        net.sourceforge.plantuml.tim.TMemory r22;
        net.sourceforge.plantuml.LineLocation r23;
        java.util.Map r24;

        r20 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonKey;

        r21 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r22 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r23 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r24 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isJson()>();

        if $z0 != 0 goto label1;

        $r19 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("Not JSON data");

        throw $r19;

     label1:
        r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isObject()>();

        if $z1 == 0 goto label4;

        r25 = (net.sourceforge.plantuml.json.JsonObject) r3;

        $r14 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r14.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        $r15 = virtualinvoke r25.<net.sourceforge.plantuml.json.JsonObject: java.util.List names()>();

        r27 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label3;

        $r17 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.lang.String) $r17;

        virtualinvoke $r14.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(java.lang.String)>(r28);

        goto label2;

     label3:
        $r16 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.json.JsonValue)>($r14);

        return $r16;

     label4:
        $z2 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isArray()>();

        if $z2 == 0 goto label9;

        r29 = (net.sourceforge.plantuml.json.JsonArray) r3;

        $r5 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r5.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        r31 = virtualinvoke r29.<net.sourceforge.plantuml.json.JsonArray: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r7 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (net.sourceforge.plantuml.json.JsonValue) $r7;

        r8 = (net.sourceforge.plantuml.json.JsonObject) r32;

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.json.JsonObject: java.util.List names()>();

        r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        virtualinvoke $r5.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(java.lang.String)>(r12);

        goto label6;

     label7:
        goto label5;

     label8:
        $r6 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.json.JsonValue)>($r5);

        return $r6;

     label9:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("Bad JSON type");

        throw $r4;
    }
}
