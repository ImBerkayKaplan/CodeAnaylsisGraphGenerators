public class net.sourceforge.plantuml.OptionFlags extends java.lang.Object
{
    private static final net.sourceforge.plantuml.OptionFlags singleton;
    public static boolean ALLOW_INCLUDE;
    public static final boolean USE_HECTOR;
    public static boolean ADD_NICE_FOR_DOT;
    public static final boolean STRICT_SELFMESSAGE_POSITION;
    public static final boolean FORCE_TEOZ;
    public static final boolean USE_INTERFACE_EYE1;
    public static final boolean USE_INTERFACE_EYE2;
    private boolean verbose;
    private boolean extractFromMetadata;
    private boolean word;
    private boolean systemExit;
    private boolean gui;
    private boolean quiet;
    private boolean checkDotError;
    private boolean printFonts;
    private boolean encodesprite;
    private boolean dumpHtmlStats;
    private boolean dumpStats;
    private boolean loopStats;
    private boolean overwrite;
    private boolean enableStats;
    private boolean stdLib;
    private boolean silentlyCompletelyIgnoreErrors;
    private boolean replaceWhiteBackgroundByTransparent;
    private boolean extractStdLib;
    private boolean clipboardLoop;
    private boolean clipboard;
    private java.lang.String fileSeparator;
    private long timeoutMs;
    private net.sourceforge.plantuml.security.SFile logData;
    private final java.util.concurrent.atomic.AtomicBoolean logDataInitized;

    public static void setAllowIncludeFalse()
    {
        <net.sourceforge.plantuml.OptionFlags: boolean ALLOW_INCLUDE> = 0;

        return;
    }

    public static void setMaxPixel(int)
    {
        int i0;

        i0 := @parameter0: int;

        return;
    }

    public void reset()
    {
        net.sourceforge.plantuml.OptionFlags r0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        specialinvoke r0.<net.sourceforge.plantuml.OptionFlags: void reset(boolean)>(0);

        staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: void setDotExecutable(java.lang.String)>(null);

        return;
    }

    public final void setDotExecutable(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.OptionFlags r1;

        r1 := @this: net.sourceforge.plantuml.OptionFlags;

        r0 := @parameter0: java.lang.String;

        staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: void setDotExecutable(java.lang.String)>(r0);

        return;
    }

    private void <init>()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: boolean defaultForStats()>();

        r0.<net.sourceforge.plantuml.OptionFlags: boolean enableStats> = $z0;

        r0.<net.sourceforge.plantuml.OptionFlags: java.lang.String fileSeparator> = "_";

        r0.<net.sourceforge.plantuml.OptionFlags: long timeoutMs> = 900000L;

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<net.sourceforge.plantuml.OptionFlags: java.util.concurrent.atomic.AtomicBoolean logDataInitized> = $r1;

        specialinvoke r0.<net.sourceforge.plantuml.OptionFlags: void reset(boolean)>(1);

        return;
    }

    private void reset(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean verbose> = 0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean extractFromMetadata> = 0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean word> = 0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean systemExit> = z0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean gui> = 0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean quiet> = 0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean checkDotError> = 0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean printFonts> = 0;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean encodesprite> = 0;

        return;
    }

    public boolean useJavaInsteadOfDot()
    {
        net.sourceforge.plantuml.OptionFlags r0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        return 0;
    }

    public static net.sourceforge.plantuml.OptionFlags getInstance()
    {
        net.sourceforge.plantuml.OptionFlags $r0;

        $r0 = <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags singleton>;

        return $r0;
    }

    public final boolean isVerbose()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean verbose>;

        return $z0;
    }

    public final void setVerbose(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean verbose> = z0;

        return;
    }

    public final boolean isExtractFromMetadata()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean extractFromMetadata>;

        return $z0;
    }

    public final void setExtractFromMetadata(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean extractFromMetadata> = z0;

        return;
    }

    public final boolean isWord()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean word>;

        return $z0;
    }

    public final void setWord(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean word> = z0;

        return;
    }

    public final boolean isSystemExit()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean systemExit>;

        return $z0;
    }

    public final void setSystemExit(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean systemExit> = z0;

        return;
    }

    public final boolean isGui()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean gui>;

        return $z0;
    }

    public final void setGui(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean gui> = z0;

        return;
    }

    public final boolean isQuiet()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean quiet>;

        return $z0;
    }

    public final void setQuiet(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean quiet> = z0;

        return;
    }

    public final boolean isCheckDotError()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean checkDotError>;

        return $z0;
    }

    public final void setCheckDotError(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean checkDotError> = z0;

        return;
    }

    public void logData(net.sourceforge.plantuml.security.SFile, net.sourceforge.plantuml.core.Diagram)
    {
        net.sourceforge.plantuml.core.Diagram r0;
        java.lang.String r1, $r11, $r13, $r16, $r18, $r29, r34;
        net.sourceforge.plantuml.OptionFlags r2;
        java.util.concurrent.atomic.AtomicBoolean $r3, $r19, $r20;
        net.sourceforge.plantuml.security.SFile $r5, $r6, r10, $r21, $r27, $r35;
        java.io.FileOutputStream $r7;
        java.lang.StringBuilder $r8, $r9, $r12, $r14, $r15, $r17, $r25, $r26, $r28;
        boolean $z0;
        java.lang.Throwable $r22, $r30, $r33;
        java.io.FileNotFoundException $r24;
        java.io.PrintStream r36;

        r2 := @this: net.sourceforge.plantuml.OptionFlags;

        r10 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r0 := @parameter1: net.sourceforge.plantuml.core.Diagram;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.core.Diagram: java.lang.String getWarningOrError()>();

        if r1 != null goto label01;

        return;

     label01:
        $r3 = r2.<net.sourceforge.plantuml.OptionFlags: java.util.concurrent.atomic.AtomicBoolean logDataInitized>;

        entermonitor $r3;

     label02:
        $r5 = r2.<net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.security.SFile logData>;

        if $r5 != null goto label04;

        $r19 = r2.<net.sourceforge.plantuml.OptionFlags: java.util.concurrent.atomic.AtomicBoolean logDataInitized>;

        $z0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label04;

        r34 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: java.lang.String getenvLogData()>();

        if r34 == null goto label03;

        $r21 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r21.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>(r34);

        virtualinvoke r2.<net.sourceforge.plantuml.OptionFlags: void setLogData(net.sourceforge.plantuml.security.SFile)>($r21);

     label03:
        $r20 = r2.<net.sourceforge.plantuml.OptionFlags: java.util.concurrent.atomic.AtomicBoolean logDataInitized>;

        virtualinvoke $r20.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label04:
        $r35 = r2.<net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.security.SFile logData>;

        if $r35 != null goto label06;

        exitmonitor $r3;

     label05:
        return;

     label06:
        $r6 = r2.<net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.security.SFile logData>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.security.SFile: java.io.FileOutputStream createFileOutputStream(boolean)>(1);

        r36 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.io.PrintStream createPrintStream(java.io.OutputStream)>($r7);

     label07:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start of ");

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r36.<java.io.PrintStream: void println(java.lang.String)>($r13);

        virtualinvoke r36.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("End of ");

        $r16 = virtualinvoke r10.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r36.<java.io.PrintStream: void println(java.lang.String)>($r18);

        virtualinvoke r36.<java.io.PrintStream: void println()>();

     label08:
        if r36 == null goto label14;

        virtualinvoke r36.<java.io.PrintStream: void close()>();

        goto label14;

     label09:
        $r33 := @caughtexception;

        if r36 == null goto label13;

     label10:
        virtualinvoke r36.<java.io.PrintStream: void close()>();

     label11:
        goto label13;

     label12:
        $r30 := @caughtexception;

        virtualinvoke $r33.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r30);

     label13:
        throw $r33;

     label14:
        goto label16;

     label15:
        $r24 := @caughtexception;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot open ");

        $r27 = r2.<net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.security.SFile logData>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r29);

        virtualinvoke $r24.<java.io.FileNotFoundException: void printStackTrace()>();

     label16:
        exitmonitor $r3;

     label17:
        goto label20;

     label18:
        $r22 := @caughtexception;

        exitmonitor $r3;

     label19:
        throw $r22;

     label20:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.io.FileNotFoundException from label06 to label14 with label15;
        catch java.lang.Throwable from label02 to label05 with label18;
        catch java.lang.Throwable from label06 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public final void setLogData(net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.io.FileOutputStream $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8, $r11;
        java.io.PrintStream r12;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r0.<net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.security.SFile logData> = r1;

        virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: void delete()>();

     label01:
        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: java.io.FileOutputStream createFileOutputStream()>();

        r12 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.io.PrintStream createPrintStream(java.io.OutputStream)>($r2);

     label02:
        virtualinvoke r12.<java.io.PrintStream: void println()>();

     label03:
        if r12 == null goto label09;

        virtualinvoke r12.<java.io.PrintStream: void close()>();

        goto label09;

     label04:
        $r11 := @caughtexception;

        if r12 == null goto label08;

     label05:
        virtualinvoke r12.<java.io.PrintStream: void close()>();

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label08:
        throw $r11;

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot open ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r7);

        virtualinvoke $r3.<java.io.FileNotFoundException: void printStackTrace()>();

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.io.FileNotFoundException from label01 to label09 with label10;
    }

    public final boolean isPrintFonts()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean printFonts>;

        return $z0;
    }

    public final void setPrintFonts(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean printFonts> = z0;

        return;
    }

    public final boolean isUseSuggestEngine2()
    {
        net.sourceforge.plantuml.OptionFlags r0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        return 0;
    }

    public final boolean isEncodesprite()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean encodesprite>;

        return $z0;
    }

    public final void setEncodesprite(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean encodesprite> = z0;

        return;
    }

    public final boolean isOverwrite()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean overwrite>;

        return $z0;
    }

    public final void setOverwrite(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean overwrite> = z0;

        return;
    }

    public final java.lang.String getFileSeparator()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $r1 = r0.<net.sourceforge.plantuml.OptionFlags: java.lang.String fileSeparator>;

        return $r1;
    }

    public final void setFileSeparator(java.lang.String)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.OptionFlags: java.lang.String fileSeparator> = r1;

        return;
    }

    public final boolean isDumpHtmlStats()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean dumpHtmlStats>;

        return $z0;
    }

    public final void setDumpHtmlStats(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean dumpHtmlStats> = z0;

        return;
    }

    public final boolean isDumpStats()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean dumpStats>;

        return $z0;
    }

    public final void setDumpStats(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean dumpStats> = z0;

        return;
    }

    public final boolean isLoopStats()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean loopStats>;

        return $z0;
    }

    public final void setLoopStats(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean loopStats> = z0;

        return;
    }

    private static boolean defaultForStats()
    {
        java.lang.String $r0, $r1;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("PLANTUML_STATS");

        $z0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: boolean isTrue(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("PLANTUML_STATS");

        $z1 = staticinvoke <net.sourceforge.plantuml.OptionFlags: boolean isTrue(java.lang.String)>($r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isTrue(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = "on";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "true";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isEnableStats()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean enableStats>;

        return $z0;
    }

    public void setEnableStats(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean enableStats> = z0;

        return;
    }

    public final long getTimeoutMs()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $l0 = r0.<net.sourceforge.plantuml.OptionFlags: long timeoutMs>;

        return $l0;
    }

    public final void setTimeoutMs(long)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        long l0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        l0 := @parameter0: long;

        r0.<net.sourceforge.plantuml.OptionFlags: long timeoutMs> = l0;

        return;
    }

    public void setExtractStdLib(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean extractStdLib> = z0;

        return;
    }

    public boolean isExtractStdLib()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean extractStdLib>;

        return $z0;
    }

    public final boolean isClipboardLoop()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean clipboardLoop>;

        return $z0;
    }

    public final void setClipboardLoop(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean clipboardLoop> = z0;

        return;
    }

    public final boolean isClipboard()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean clipboard>;

        return $z0;
    }

    public final void setClipboard(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean clipboard> = z0;

        return;
    }

    public final boolean isStdLib()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean stdLib>;

        return $z0;
    }

    public final void setStdLib(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean stdLib> = z0;

        return;
    }

    public final boolean isSilentlyCompletelyIgnoreErrors()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean silentlyCompletelyIgnoreErrors>;

        return $z0;
    }

    public final void setSilentlyCompletelyIgnoreErrors(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean silentlyCompletelyIgnoreErrors> = z0;

        return;
    }

    public final boolean isReplaceWhiteBackgroundByTransparent()
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        $z0 = r0.<net.sourceforge.plantuml.OptionFlags: boolean replaceWhiteBackgroundByTransparent>;

        return $z0;
    }

    public final void setReplaceWhiteBackgroundByTransparent(boolean)
    {
        net.sourceforge.plantuml.OptionFlags r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.OptionFlags;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.OptionFlags: boolean replaceWhiteBackgroundByTransparent> = z0;

        return;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.OptionFlags $r0;

        <net.sourceforge.plantuml.OptionFlags: boolean USE_INTERFACE_EYE2> = 0;

        <net.sourceforge.plantuml.OptionFlags: boolean USE_INTERFACE_EYE1> = 0;

        <net.sourceforge.plantuml.OptionFlags: boolean FORCE_TEOZ> = 0;

        <net.sourceforge.plantuml.OptionFlags: boolean STRICT_SELFMESSAGE_POSITION> = 1;

        <net.sourceforge.plantuml.OptionFlags: boolean USE_HECTOR> = 0;

        $r0 = new net.sourceforge.plantuml.OptionFlags;

        specialinvoke $r0.<net.sourceforge.plantuml.OptionFlags: void <init>()>();

        <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags singleton> = $r0;

        <net.sourceforge.plantuml.OptionFlags: boolean ALLOW_INCLUDE> = 1;

        <net.sourceforge.plantuml.OptionFlags: boolean ADD_NICE_FOR_DOT> = 0;

        return;
    }
}
