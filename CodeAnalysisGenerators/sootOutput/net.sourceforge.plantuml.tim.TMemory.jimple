public interface  net.sourceforge.plantuml.tim.TMemory extends java.lang.Object
{

    public abstract net.sourceforge.plantuml.tim.expression.TValue getVariable(java.lang.String);

    public abstract void putVariable(java.lang.String, net.sourceforge.plantuml.tim.expression.TValue, net.sourceforge.plantuml.tim.TVariableScope) throws net.sourceforge.plantuml.tim.EaterException;

    public abstract void removeVariable(java.lang.String);

    public abstract boolean isEmpty();

    public abstract java.util.Set variablesNames();

    public abstract net.sourceforge.plantuml.tim.Trie variablesNames3();

    public abstract net.sourceforge.plantuml.tim.TMemory forkFromGlobal(java.util.Map);

    public abstract net.sourceforge.plantuml.tim.ExecutionContextIf peekIf();

    public abstract boolean areAllIfOk(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException;

    public abstract void addIf(net.sourceforge.plantuml.tim.ExecutionContextIf);

    public abstract void addWhile(net.sourceforge.plantuml.tim.ExecutionContextWhile);

    public abstract void addForeach(net.sourceforge.plantuml.tim.ExecutionContextForeach);

    public abstract net.sourceforge.plantuml.tim.ExecutionContextIf pollIf();

    public abstract net.sourceforge.plantuml.tim.ExecutionContextWhile pollWhile();

    public abstract net.sourceforge.plantuml.tim.ExecutionContextWhile peekWhile();

    public abstract net.sourceforge.plantuml.tim.ExecutionContextForeach pollForeach();

    public abstract net.sourceforge.plantuml.tim.ExecutionContextForeach peekForeach();

    public abstract void dumpDebug(java.lang.String);
}
