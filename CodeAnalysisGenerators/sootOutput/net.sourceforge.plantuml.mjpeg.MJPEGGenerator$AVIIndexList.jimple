class net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList extends java.lang.Object
{
    public byte[] fcc;
    public int cb;
    public java.util.ArrayList ind;
    final net.sourceforge.plantuml.mjpeg.MJPEGGenerator this$0;

    public void <init>(net.sourceforge.plantuml.mjpeg.MJPEGGenerator)
    {
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList r0;
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator r1;
        byte[] $r2;
        java.util.ArrayList $r3;

        r0 := @this: net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList;

        r1 := @parameter0: net.sourceforge.plantuml.mjpeg.MJPEGGenerator;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: net.sourceforge.plantuml.mjpeg.MJPEGGenerator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[4];

        $r2[0] = 105;

        $r2[1] = 100;

        $r2[2] = 120;

        $r2[3] = 49;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: byte[] fcc> = $r2;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: int cb> = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: java.util.ArrayList ind> = $r3;

        return;
    }

    public void addAVIIndex(net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex)
    {
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList r0;
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex r1;
        java.util.ArrayList $r2;

        r0 := @this: net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList;

        r1 := @parameter0: net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex;

        $r2 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: java.util.ArrayList ind>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAVIIndex(int, int)
    {
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList r0;
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex $r1;
        int i0, i1;
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator $r2;
        java.util.ArrayList $r3;

        r0 := @this: net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: java.util.ArrayList ind>;

        $r1 = new net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex;

        $r2 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: net.sourceforge.plantuml.mjpeg.MJPEGGenerator this$0>;

        specialinvoke $r1.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex: void <init>(net.sourceforge.plantuml.mjpeg.MJPEGGenerator,int,int)>($r2, i0, i1);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    public byte[] toBytes() throws java.io.IOException
    {
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList r0;
        java.util.ArrayList $r1, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.io.ByteArrayOutputStream $r2;
        byte[] $r4, $r5, $r7, $r11;
        java.lang.Object $r9;
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex r10;

        r0 := @this: net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList;

        $r1 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: java.util.ArrayList ind>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = 16 * $i0;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: int cb> = $i1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: byte[] fcc>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[])>($r4);

        $i2 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: int cb>;

        $i3 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i2);

        $r5 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i3);

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[])>($r5);

        i5 = 0;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: java.util.ArrayList ind>;

        $i4 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i5 >= $i4 goto label2;

        $r8 = r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndexList: java.util.ArrayList ind>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r10 = (net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex) $r9;

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIIndex: byte[] toBytes()>();

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[])>($r11);

        i5 = i5 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void close()>();

        $r7 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r7;
    }
}
