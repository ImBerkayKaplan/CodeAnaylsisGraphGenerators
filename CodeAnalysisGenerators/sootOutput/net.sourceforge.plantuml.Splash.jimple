public class net.sourceforge.plantuml.Splash extends java.awt.Window implements java.awt.event.MouseListener, java.awt.event.MouseMotionListener
{
    private static final java.awt.Color LINK_NORMAL;
    private static final java.awt.Color LINK_HOVER;
    private static net.sourceforge.plantuml.Splash singleton;
    private final int width;
    private final int height;
    private final java.awt.image.BufferedImage logo;
    private final java.util.concurrent.atomic.AtomicInteger total;
    private final java.util.concurrent.atomic.AtomicInteger done;
    private final java.util.concurrent.atomic.AtomicInteger errors;
    private final java.awt.Font font;
    private int xClicked;
    private int yClicked;
    private int limY;
    private int limX;
    private java.awt.Color link;

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <net.sourceforge.plantuml.Splash: void createSplash()>();

        staticinvoke <net.sourceforge.plantuml.Splash: void incTotal(int)>(30);

        i0 = 0;

     label1:
        if i0 >= 20 goto label4;

        if i0 <= 3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <net.sourceforge.plantuml.Splash: void incDone(boolean)>($z0);

        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    private void <init>()
    {
        net.sourceforge.plantuml.Splash r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2, $r3;
        java.awt.Font $r4;
        java.awt.Color $r5;
        java.awt.image.BufferedImage $r6;
        java.awt.Toolkit $r7;
        java.awt.Dimension r8;
        double $d0, $d1, $d2, $d3;
        int $i0, i1, $i2, i3;

        r0 := @this: net.sourceforge.plantuml.Splash;

        specialinvoke r0.<java.awt.Window: void <init>(java.awt.Frame)>(null);

        r0.<net.sourceforge.plantuml.Splash: int height> = 80;

        r0.<net.sourceforge.plantuml.Splash: int width> = 280;

        r0.<net.sourceforge.plantuml.Splash: int width> = 280;

        r0.<net.sourceforge.plantuml.Splash: int height> = 80;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger total> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger done> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger errors> = $r3;

        $r4 = new java.awt.Font;

        specialinvoke $r4.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 1, 12);

        r0.<net.sourceforge.plantuml.Splash: java.awt.Font font> = $r4;

        $r5 = <net.sourceforge.plantuml.Splash: java.awt.Color LINK_NORMAL>;

        r0.<net.sourceforge.plantuml.Splash: java.awt.Color link> = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getPlantumlImage()>();

        r0.<net.sourceforge.plantuml.Splash: java.awt.image.BufferedImage logo> = $r6;

        $r7 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        r8 = virtualinvoke $r7.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>();

        $d0 = virtualinvoke r8.<java.awt.Dimension: double getWidth()>();

        $d1 = $d0 - 280.0;

        $i0 = (int) $d1;

        i1 = $i0 / 2;

        $d2 = virtualinvoke r8.<java.awt.Dimension: double getHeight()>();

        $d3 = $d2 - 80.0;

        $i2 = (int) $d3;

        i3 = $i2 / 2;

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void setBounds(int,int,int,int)>(i1, i3, 280, 80);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void setVisible(boolean)>(1);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void setAlwaysOnTop(boolean)>(1);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void setFocusable(boolean)>(0);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void setFocusableWindowState(boolean)>(0);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void addMouseListener(java.awt.event.MouseListener)>(r0);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void addMouseMotionListener(java.awt.event.MouseMotionListener)>(r0);

        return;
    }

    public void mouseDragged(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        net.sourceforge.plantuml.Splash r1;

        r1 := @this: net.sourceforge.plantuml.Splash;

        r0 := @parameter0: java.awt.event.MouseEvent;

        i0 = virtualinvoke r0.<java.awt.event.MouseEvent: int getXOnScreen()>();

        i1 = virtualinvoke r0.<java.awt.event.MouseEvent: int getYOnScreen()>();

        $i2 = r1.<net.sourceforge.plantuml.Splash: int xClicked>;

        $i5 = i0 - $i2;

        $i3 = r1.<net.sourceforge.plantuml.Splash: int yClicked>;

        $i4 = i1 - $i3;

        virtualinvoke r1.<net.sourceforge.plantuml.Splash: void setBounds(int,int,int,int)>($i5, $i4, 280, 80);

        return;
    }

    public void mouseMoved(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r0;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.Splash r1;
        java.awt.Color $r2, $r3;

        r1 := @this: net.sourceforge.plantuml.Splash;

        r0 := @parameter0: java.awt.event.MouseEvent;

        $i0 = virtualinvoke r0.<java.awt.event.MouseEvent: int getY()>();

        $i1 = r1.<net.sourceforge.plantuml.Splash: int limY>;

        if $i0 <= $i1 goto label1;

        $i2 = virtualinvoke r0.<java.awt.event.MouseEvent: int getX()>();

        $i3 = r1.<net.sourceforge.plantuml.Splash: int limX>;

        if $i2 >= $i3 goto label1;

        $r3 = <net.sourceforge.plantuml.Splash: java.awt.Color LINK_HOVER>;

        specialinvoke r1.<net.sourceforge.plantuml.Splash: void updateLinkColor(java.awt.Color)>($r3);

        goto label2;

     label1:
        $r2 = <net.sourceforge.plantuml.Splash: java.awt.Color LINK_NORMAL>;

        specialinvoke r1.<net.sourceforge.plantuml.Splash: void updateLinkColor(java.awt.Color)>($r2);

     label2:
        return;
    }

    private void updateLinkColor(java.awt.Color)
    {
        net.sourceforge.plantuml.Splash r0;
        java.awt.Color r1, $r2, $r3, $r4;
        java.awt.Cursor $r6;

        r0 := @this: net.sourceforge.plantuml.Splash;

        r1 := @parameter0: java.awt.Color;

        $r2 = r0.<net.sourceforge.plantuml.Splash: java.awt.Color link>;

        if $r2 == r1 goto label3;

        r0.<net.sourceforge.plantuml.Splash: java.awt.Color link> = r1;

        $r4 = r0.<net.sourceforge.plantuml.Splash: java.awt.Color link>;

        $r3 = <net.sourceforge.plantuml.Splash: java.awt.Color LINK_NORMAL>;

        if $r4 != $r3 goto label1;

        $r6 = staticinvoke <java.awt.Cursor: java.awt.Cursor getDefaultCursor()>();

        goto label2;

     label1:
        $r6 = staticinvoke <java.awt.Cursor: java.awt.Cursor getPredefinedCursor(int)>(12);

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void setCursor(java.awt.Cursor)>($r6);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void repaint()>();

     label3:
        return;
    }

    public void mouseReleased(java.awt.event.MouseEvent)
    {
        net.sourceforge.plantuml.Splash r0;
        java.awt.event.MouseEvent r1;

        r0 := @this: net.sourceforge.plantuml.Splash;

        r1 := @parameter0: java.awt.event.MouseEvent;

        return;
    }

    public void mousePressed(java.awt.event.MouseEvent)
    {
        net.sourceforge.plantuml.Splash r0;
        java.awt.event.MouseEvent r1;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.Splash;

        r1 := @parameter0: java.awt.event.MouseEvent;

        $i0 = virtualinvoke r1.<java.awt.event.MouseEvent: int getX()>();

        r0.<net.sourceforge.plantuml.Splash: int xClicked> = $i0;

        $i1 = virtualinvoke r1.<java.awt.event.MouseEvent: int getY()>();

        r0.<net.sourceforge.plantuml.Splash: int yClicked> = $i1;

        return;
    }

    public void mouseClicked(java.awt.event.MouseEvent)
    {
        net.sourceforge.plantuml.Splash r0;
        java.awt.Color $r1, $r2;
        java.awt.event.MouseEvent r3;
        int $i0, $i1;
        java.awt.Desktop $r4;
        java.net.URL $r5;
        java.net.URI $r6;
        java.lang.Exception $r7;

        r0 := @this: net.sourceforge.plantuml.Splash;

        r3 := @parameter0: java.awt.event.MouseEvent;

        $r2 = r0.<net.sourceforge.plantuml.Splash: java.awt.Color link>;

        $r1 = <net.sourceforge.plantuml.Splash: java.awt.Color LINK_NORMAL>;

        if $r2 == $r1 goto label5;

     label1:
        $r4 = staticinvoke <java.awt.Desktop: java.awt.Desktop getDesktop()>();

        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>("https://plantuml.com");

        $r6 = virtualinvoke $r5.<java.net.URL: java.net.URI toURI()>();

        virtualinvoke $r4.<java.awt.Desktop: void browse(java.net.URI)>($r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

     label5:
        $i0 = virtualinvoke r3.<java.awt.event.MouseEvent: int getX()>();

        r0.<net.sourceforge.plantuml.Splash: int xClicked> = $i0;

        $i1 = virtualinvoke r3.<java.awt.event.MouseEvent: int getY()>();

        r0.<net.sourceforge.plantuml.Splash: int yClicked> = $i1;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void mouseExited(java.awt.event.MouseEvent)
    {
        net.sourceforge.plantuml.Splash r0;
        java.awt.Color $r1;
        java.awt.event.MouseEvent r2;

        r0 := @this: net.sourceforge.plantuml.Splash;

        r2 := @parameter0: java.awt.event.MouseEvent;

        $r1 = <net.sourceforge.plantuml.Splash: java.awt.Color LINK_NORMAL>;

        specialinvoke r0.<net.sourceforge.plantuml.Splash: void updateLinkColor(java.awt.Color)>($r1);

        return;
    }

    public void mouseEntered(java.awt.event.MouseEvent)
    {
        net.sourceforge.plantuml.Splash r0;
        java.awt.event.MouseEvent r1;

        r0 := @this: net.sourceforge.plantuml.Splash;

        r1 := @parameter0: java.awt.event.MouseEvent;

        return;
    }

    private void incTotalInternal(int)
    {
        net.sourceforge.plantuml.Splash r0;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: net.sourceforge.plantuml.Splash;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger total>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(i0);

        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void repaint()>();

        return;
    }

    private void incDoneInternal(boolean)
    {
        net.sourceforge.plantuml.Splash r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.Splash;

        z0 := @parameter0: boolean;

        $r1 = r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger done>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        if z0 == 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger errors>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.Splash: void repaint()>();

        return;
    }

    public void paint(java.awt.Graphics)
    {
        net.sourceforge.plantuml.Splash r0;
        java.awt.Graphics r1;
        java.awt.Color $r2, $r3, $r11, $r19;
        java.awt.image.BufferedImage $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11;
        java.util.concurrent.atomic.AtomicInteger $r7, $r8, $r9;
        java.awt.geom.Rectangle2D r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r17, r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: net.sourceforge.plantuml.Splash;

        r1 := @parameter0: java.awt.Graphics;

        specialinvoke r0.<java.awt.Window: void paint(java.awt.Graphics)>(r1);

        $r2 = <java.awt.Color: java.awt.Color WHITE>;

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, 280, 80);

        $r3 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        virtualinvoke r1.<java.awt.Graphics: void drawRect(int,int,int,int)>(0, 0, 279, 79);

        virtualinvoke r1.<java.awt.Graphics: void drawRect(int,int,int,int)>(1, 1, 277, 77);

        $r5 = r0.<net.sourceforge.plantuml.Splash: java.awt.image.BufferedImage logo>;

        $r4 = r0.<net.sourceforge.plantuml.Splash: java.awt.image.BufferedImage logo>;

        $i0 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = 280 - $i0;

        $i2 = $i1 - 4;

        $r6 = r0.<net.sourceforge.plantuml.Splash: java.awt.image.BufferedImage logo>;

        $i3 = virtualinvoke $r6.<java.awt.image.BufferedImage: int getHeight()>();

        $i4 = 80 - $i3;

        $i5 = $i4 - 4;

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r5, $i2, $i5, null);

        $r7 = r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger done>;

        $i6 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int intValue()>();

        $r8 = r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger total>;

        $i7 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int intValue()>();

        specialinvoke r0.<net.sourceforge.plantuml.Splash: void drawProgessBar(java.awt.Graphics,int,int)>(r1, $i6, $i7);

        $r9 = r0.<net.sourceforge.plantuml.Splash: java.util.concurrent.atomic.AtomicInteger errors>;

        i8 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i8 <= 0 goto label3;

        $r11 = <java.awt.Color: java.awt.Color RED>;

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        if i8 <= 1 goto label1;

        $r17 = " diagrams";

        goto label2;

     label1:
        $r17 = " diagram";

     label2:
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains errors");

        r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(r18, 10, 20);

     label3:
        $r19 = r0.<net.sourceforge.plantuml.Splash: java.awt.Color link>;

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r19);

        r10 = specialinvoke r0.<net.sourceforge.plantuml.Splash: java.awt.geom.Rectangle2D getUsed(java.awt.Graphics,java.lang.String)>(r1, "http://plantuml.com");

        $d0 = virtualinvoke r10.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $d1 = 80.0 - $d0;

        $i9 = (int) $d1;

        virtualinvoke r1.<java.awt.Graphics: void drawString(java.lang.String,int,int)>("http://plantuml.com", 10, $i9);

        $d2 = virtualinvoke r10.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $d3 = 80.0 - $d2;

        $d4 = virtualinvoke r10.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d5 = $d3 + $d4;

        $i10 = (int) $d5;

        r0.<net.sourceforge.plantuml.Splash: int limY> = $i10;

        $d6 = virtualinvoke r10.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $d7 = 10.0 + $d6;

        $i11 = (int) $d7;

        r0.<net.sourceforge.plantuml.Splash: int limX> = $i11;

        return;
    }

    private void drawProgessBar(java.awt.Graphics, int, int)
    {
        int i0, i1, i5, $i7, i8, $i9, $i10;
        java.awt.Graphics r0;
        net.sourceforge.plantuml.Splash r1;
        java.awt.Font $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String r8;
        java.awt.geom.Rectangle2D r9;
        double $d0, $d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, d12;
        java.awt.Color $r10, $r11;

        r1 := @this: net.sourceforge.plantuml.Splash;

        r0 := @parameter0: java.awt.Graphics;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.Splash: java.awt.Font font>;

        virtualinvoke r0.<java.awt.Graphics: void setFont(java.awt.Font)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = specialinvoke r1.<net.sourceforge.plantuml.Splash: java.awt.geom.Rectangle2D getUsed(java.awt.Graphics,java.lang.String)>(r0, r8);

        $d0 = virtualinvoke r9.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d1 = $d0 + 2.0;

        i5 = (int) $d1;

        $r10 = new java.awt.Color;

        specialinvoke $r10.<java.awt.Color: void <init>(int,int,int)>(230, 230, 230);

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r10);

        $i7 = 170 * i1;

        i8 = $i7 / i0;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(10, 33, i8, i5);

        $r11 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r11);

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>(10, 33, 170, i5);

        $d2 = virtualinvoke r9.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d3 = 170.0 - $d2;

        $d4 = $d3 / 2.0;

        d5 = 10.0 + $d4;

        $d6 = virtualinvoke r9.<java.awt.geom.Rectangle2D: double getY()>();

        $d7 = 33.0 - $d6;

        $d8 = (double) i5;

        $d9 = virtualinvoke r9.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d10 = $d8 - $d9;

        $d11 = $d10 / 2.0;

        d12 = $d7 + $d11;

        $i10 = (int) d5;

        $i9 = (int) d12;

        virtualinvoke r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(r8, $i10, $i9);

        return;
    }

    private java.awt.geom.Rectangle2D getUsed(java.awt.Graphics, java.lang.String)
    {
        java.awt.Graphics r0;
        java.awt.FontMetrics $r1;
        java.lang.String r2;
        java.awt.geom.Rectangle2D $r3;
        net.sourceforge.plantuml.Splash r4;

        r4 := @this: net.sourceforge.plantuml.Splash;

        r0 := @parameter0: java.awt.Graphics;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();

        $r3 = virtualinvoke $r1.<java.awt.FontMetrics: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.Graphics)>(r2, r0);

        return $r3;
    }

    public static synchronized void createSplash()
    {
        net.sourceforge.plantuml.Splash $r0, $r1;

        $r0 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        if $r0 != null goto label1;

        $r1 = new net.sourceforge.plantuml.Splash;

        specialinvoke $r1.<net.sourceforge.plantuml.Splash: void <init>()>();

        <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton> = $r1;

     label1:
        return;
    }

    public static void incTotal(int)
    {
        net.sourceforge.plantuml.Splash $r0, $r1;
        int i0;

        i0 := @parameter0: int;

        $r0 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        if $r0 == null goto label1;

        $r1 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        specialinvoke $r1.<net.sourceforge.plantuml.Splash: void incTotalInternal(int)>(i0);

     label1:
        return;
    }

    public static void incDone(boolean)
    {
        net.sourceforge.plantuml.Splash $r0, $r1;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        if $r0 == null goto label1;

        $r1 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        specialinvoke $r1.<net.sourceforge.plantuml.Splash: void incDoneInternal(boolean)>(z0);

     label1:
        return;
    }

    public static synchronized void disposeSplash()
    {
        net.sourceforge.plantuml.Splash $r0, $r1, $r2;

        $r0 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        if $r0 == null goto label1;

        $r1 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        virtualinvoke $r1.<net.sourceforge.plantuml.Splash: void setVisible(boolean)>(0);

        $r2 = <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton>;

        virtualinvoke $r2.<net.sourceforge.plantuml.Splash: void dispose()>();

        <net.sourceforge.plantuml.Splash: net.sourceforge.plantuml.Splash singleton> = null;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.awt.Color $r0, $r1;

        $r0 = <java.awt.Color: java.awt.Color BLUE>;

        <net.sourceforge.plantuml.Splash: java.awt.Color LINK_NORMAL> = $r0;

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(int,int,int)>(127, 0, 127);

        <net.sourceforge.plantuml.Splash: java.awt.Color LINK_HOVER> = $r1;

        return;
    }
}
