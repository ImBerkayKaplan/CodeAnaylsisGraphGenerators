public class net.sourceforge.plantuml.tim.stdlib.Dec2hex extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.Dec2hex r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Dec2hex;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.Dec2hex r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.Dec2hex;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%dec2hex", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.Dec2hex r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Dec2hex;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.lang.StringBuilder $r0, $r1, $r6;
        java.util.List r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.tim.expression.TValue $r4, $r8, $r11;
        int $i0;
        java.lang.String $r5, $r7;
        java.lang.Throwable $r9;
        net.sourceforge.plantuml.tim.stdlib.Dec2hex r12;
        net.sourceforge.plantuml.tim.TContext r13;
        net.sourceforge.plantuml.tim.TMemory r14;
        net.sourceforge.plantuml.LineLocation r15;
        java.util.Map r16;

        r12 := @this: net.sourceforge.plantuml.tim.stdlib.Dec2hex;

        r13 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r14 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r15 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r2 := @parameter3: java.util.List;

        r16 := @parameter4: java.util.Map;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (net.sourceforge.plantuml.tim.expression.TValue) $r3;

        $i0 = virtualinvoke $r4.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>($r7);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r11 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("");

        return $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
