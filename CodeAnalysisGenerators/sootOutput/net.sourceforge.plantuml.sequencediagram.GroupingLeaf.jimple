public final class net.sourceforge.plantuml.sequencediagram.GroupingLeaf extends net.sourceforge.plantuml.sequencediagram.Grouping implements net.sourceforge.plantuml.sequencediagram.EventWithDeactivate
{
    private final net.sourceforge.plantuml.sequencediagram.GroupingStart start;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral;
    private double posYendLevel;
    private java.util.List noteOnMessages;

    public void <init>(java.lang.String, java.lang.String, net.sourceforge.plantuml.sequencediagram.GroupingType, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.sequencediagram.GroupingStart, net.sourceforge.plantuml.style.StyleBuilder)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        java.lang.String r1, r2;
        net.sourceforge.plantuml.sequencediagram.GroupingType r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r4, r7;
        net.sourceforge.plantuml.style.StyleBuilder r5;
        java.util.ArrayList $r6;
        net.sourceforge.plantuml.sequencediagram.GroupingStart r8, $r10;
        java.lang.Object $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: net.sourceforge.plantuml.sequencediagram.GroupingType;

        r7 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter4: net.sourceforge.plantuml.ugraphic.color.HColor;

        r8 := @parameter5: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r5 := @parameter6: net.sourceforge.plantuml.style.StyleBuilder;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.Grouping: void <init>(java.lang.String,java.lang.String,net.sourceforge.plantuml.sequencediagram.GroupingType,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.style.StyleBuilder)>(r1, r2, r3, r4, r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: java.util.List noteOnMessages> = $r6;

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral> = r7;

        $r9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        $r10 = (net.sourceforge.plantuml.sequencediagram.GroupingStart) $r9;

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start> = $r10;

        virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.GroupingStart: void addChildren(net.sourceforge.plantuml.sequencediagram.GroupingLeaf)>(r0);

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.Grouping getJustAfter()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r1, $r3, $r5;
        java.util.List $r2, $r4, $r6;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r7;
        net.sourceforge.plantuml.sequencediagram.Grouping $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.util.List getChildren()>();

        i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r0);

        if i0 != -1 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label1:
        $i1 = i0 + 1;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.util.List getChildren()>();

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 < $i2 goto label2;

        return null;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.util.List getChildren()>();

        $i3 = i0 + 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i3);

        $r8 = (net.sourceforge.plantuml.sequencediagram.Grouping) $r7;

        return $r8;
    }

    public net.sourceforge.plantuml.sequencediagram.GroupingStart getGroupingStart()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        return $r1;
    }

    public int getLevel()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.GroupingStart: int getLevel()>();

        return $i0;
    }

    public final net.sourceforge.plantuml.ugraphic.color.HColor getBackColorGeneral()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, $r2, $r4;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral>;

        if $r1 != null goto label1;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.ugraphic.color.HColor getBackColorGeneral()>();

        return $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.ugraphic.color.HColor backColorGeneral>;

        return $r2;
    }

    public boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        return 0;
    }

    public net.sourceforge.plantuml.Url getUrl()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        return null;
    }

    public boolean hasUrl()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        return 0;
    }

    public boolean isParallel()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.GroupingStart: boolean isParallel()>();

        return $z0;
    }

    public void setPosYendLevel(double)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: double posYendLevel> = d0;

        return;
    }

    public double getPosYendLevel()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: double posYendLevel>;

        return $d0;
    }

    public boolean addLifeEvent(net.sourceforge.plantuml.sequencediagram.LifeEvent)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        return 1;
    }

    public final void setNote(net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.Note r0;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r1, $r2, $r5, $r6;
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r3;
        java.util.List $r4;
        java.lang.IllegalArgumentException $r7;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.Note;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r2 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if $r1 == $r2 goto label1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r6 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if $r5 == $r6 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        $r4 = r3.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: java.util.List noteOnMessages>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public final java.util.List getNoteOnMessages()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: java.util.List noteOnMessages>;

        return $r1;
    }
}
