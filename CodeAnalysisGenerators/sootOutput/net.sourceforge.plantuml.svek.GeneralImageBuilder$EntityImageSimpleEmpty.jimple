class net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty extends java.lang.Object implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColor;

    void <init>(net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = r1;

        return;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r0;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        return 0;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        $r1 = r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty: net.sourceforge.plantuml.ugraphic.color.HColor backColor>;

        return $r1;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(10.0, 10.0);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        net.sourceforge.plantuml.ugraphic.MinMax $r3;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax fromDim(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r2);

        return $r3;
    }

    public java.awt.geom.Rectangle2D getInnerPosition(java.lang.String, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.InnerStrategy)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.InnerStrategy r3;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.InnerStrategy;

        return null;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r1;

        r1 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Margins $r0;
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r0;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.svek.GeneralImageBuilder$EntityImageSimpleEmpty;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }
}
