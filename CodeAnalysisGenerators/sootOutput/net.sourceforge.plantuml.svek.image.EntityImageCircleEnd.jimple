public class net.sourceforge.plantuml.svek.image.EntityImageCircleEnd extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private static final int SIZE;
    private final net.sourceforge.plantuml.ColorParam param;

    public net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionCircle()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.style.StyleSignature $r6;
        net.sourceforge.plantuml.svek.image.EntityImageCircleEnd r7;

        r7 := @this: net.sourceforge.plantuml.svek.image.EntityImageCircleEnd;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activityDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName circle>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName end>;

        $r0[4] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r6;
    }

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ColorParam)
    {
        net.sourceforge.plantuml.svek.image.EntityImageCircleEnd r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.ColorParam r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageCircleEnd;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.ColorParam;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.ColorParam param> = r3;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.image.EntityImageCircleEnd r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageCircleEnd;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(20.0, 20.0);

        return $r0;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0, $r15;
        net.sourceforge.plantuml.svek.image.EntityImageCircleEnd r2;
        net.sourceforge.plantuml.ISkinParam $r3, $r6, $r24, $r28, $r30;
        net.sourceforge.plantuml.cucadiagram.IEntity $r4;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r5, $r7;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ColorParam[] $r8;
        net.sourceforge.plantuml.ColorParam $r9;
        net.sourceforge.plantuml.ugraphic.UGraphic r10, $r13, $r14, $r18, $r20, $r22;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r11, $r19;
        net.sourceforge.plantuml.ugraphic.UBackground $r12, $r17;
        net.sourceforge.plantuml.ugraphic.UTranslate $r21;
        net.sourceforge.plantuml.style.StyleSignature $r23;
        net.sourceforge.plantuml.style.StyleBuilder $r25;
        net.sourceforge.plantuml.style.PName $r26, $r32;
        net.sourceforge.plantuml.style.Value $r27, $r33;
        net.sourceforge.plantuml.api.ThemeStyle $r29;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r31;
        double d0;
        net.sourceforge.plantuml.ugraphic.color.HColor r34;
        net.sourceforge.plantuml.style.Style r35;

        r2 := @this: net.sourceforge.plantuml.svek.image.EntityImageCircleEnd;

        r10 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(20.0, 20.0);

        d0 = 0.0;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = interfaceinvoke $r3.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r5);

        if $z0 == 0 goto label1;

        d0 = 3.0;

     label1:
        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r8 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r9 = r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.ColorParam param>;

        $r8[0] = $r9;

        r34 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r6, $r7, $r8);

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label2;

        $r23 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionCircle()>();

        $r24 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r25 = interfaceinvoke $r24.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r35 = virtualinvoke $r23.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r25);

        $r26 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r27 = virtualinvoke r35.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r26);

        $r28 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r29 = interfaceinvoke $r28.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r30 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r34 = interfaceinvoke $r27.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r29, $r31);

        $r32 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r33 = virtualinvoke r35.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r32);

        d0 = interfaceinvoke $r33.<net.sourceforge.plantuml.style.Value: double asDouble()>();

     label2:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>(d0);

        $r11 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r13 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r34);

        interfaceinvoke $r14.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r15 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(12.0, 12.0);

        $r17 = interfaceinvoke r34.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r18 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        $r19 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r19.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r20 = interfaceinvoke $r18.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r19);

        $r21 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r21.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(4.5, 4.5);

        $r22 = interfaceinvoke $r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

        interfaceinvoke $r22.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r15);

        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageCircleEnd r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageCircleEnd;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType CIRCLE>;

        return $r0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.image.EntityImageCircleEnd: int SIZE> = 20;

        return;
    }
}
