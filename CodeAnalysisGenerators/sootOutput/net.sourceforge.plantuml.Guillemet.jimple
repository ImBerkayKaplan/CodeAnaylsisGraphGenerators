public class net.sourceforge.plantuml.Guillemet extends java.lang.Object
{
    public static final net.sourceforge.plantuml.Guillemet NONE;
    public static final net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR;
    public static final net.sourceforge.plantuml.Guillemet GUILLEMET;
    private final java.lang.String start;
    private final java.lang.String end;

    public net.sourceforge.plantuml.Guillemet fromDescription(java.lang.String)
    {
        java.lang.String r0, $r2, $r3, $r4, $r8, $r9;
        net.sourceforge.plantuml.Guillemet $r1, $r7, $r10, $r11, $r12, r13;
        boolean $z0, $z1, $z2, $z3;
        java.util.StringTokenizer $r5;

        r13 := @this: net.sourceforge.plantuml.Guillemet;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label4;

        $r2 = "false";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r12 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        return $r12;

     label1:
        $r3 = "<< >>";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r11 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        return $r11;

     label2:
        $r4 = "none";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        $r10 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet NONE>;

        return $r10;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z3 == 0 goto label4;

        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, " ");

        $r7 = new net.sourceforge.plantuml.Guillemet;

        $r8 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r9 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke $r7.<net.sourceforge.plantuml.Guillemet: void <init>(java.lang.String,java.lang.String)>($r8, $r9);

        return $r7;

     label4:
        $r1 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet GUILLEMET>;

        return $r1;
    }

    private void <init>(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.Guillemet r0;
        java.lang.String r1, r2;

        r0 := @this: net.sourceforge.plantuml.Guillemet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.Guillemet: java.lang.String start> = r1;

        r0.<net.sourceforge.plantuml.Guillemet: java.lang.String end> = r2;

        return;
    }

    public java.lang.String manageGuillemet(java.lang.String)
    {
        net.sourceforge.plantuml.Guillemet r0, $r1;
        java.lang.String r2, $r4, $r5, $r8, $r9, $r11, $r12;
        java.lang.StringBuilder $r3, $r6, $r7, $r10;

        r0 := @this: net.sourceforge.plantuml.Guillemet;

        r2 := @parameter0: java.lang.String;

        $r1 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        if r0 != $r1 goto label1;

        return r2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.Guillemet: java.lang.String start>;

        $r5 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$1");

        $r8 = r0.<net.sourceforge.plantuml.Guillemet: java.lang.String end>;

        $r9 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\<\\<\\s?((?:\\<&\\w+\\>|[^<>])+?)\\s?\\>\\>", $r11);

        return $r12;
    }

    public java.lang.String manageGuillemetStrict(java.lang.String)
    {
        net.sourceforge.plantuml.Guillemet r0, $r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r21;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r5, $r8, $r10, $r13, $r15, $r18, $r20, r22;

        r0 := @this: net.sourceforge.plantuml.Guillemet;

        r22 := @parameter0: java.lang.String;

        $r1 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        if r0 != $r1 goto label1;

        return r22;

     label1:
        $z0 = virtualinvoke r22.<java.lang.String: boolean startsWith(java.lang.String)>("<< ");

        if $z0 == 0 goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = r0.<net.sourceforge.plantuml.Guillemet: java.lang.String start>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int)>(3);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $z1 = virtualinvoke r22.<java.lang.String: boolean startsWith(java.lang.String)>("<<");

        if $z1 == 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<net.sourceforge.plantuml.Guillemet: java.lang.String start>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int)>(2);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $z3 = virtualinvoke r22.<java.lang.String: boolean endsWith(java.lang.String)>(" >>");

        if $z3 == 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $i2 = virtualinvoke r22.<java.lang.String: int length()>();

        $i3 = $i2 - 3;

        $r8 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = r0.<net.sourceforge.plantuml.Guillemet: java.lang.String end>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r22 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $z2 = virtualinvoke r22.<java.lang.String: boolean endsWith(java.lang.String)>(">>");

        if $z2 == 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r22.<java.lang.String: int length()>();

        $i1 = $i0 - 2;

        $r3 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.Guillemet: java.lang.String end>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r22 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        return r22;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.Guillemet $r0, $r1, $r2;

        $r0 = new net.sourceforge.plantuml.Guillemet;

        specialinvoke $r0.<net.sourceforge.plantuml.Guillemet: void <init>(java.lang.String,java.lang.String)>("", "");

        <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet NONE> = $r0;

        $r1 = new net.sourceforge.plantuml.Guillemet;

        specialinvoke $r1.<net.sourceforge.plantuml.Guillemet: void <init>(java.lang.String,java.lang.String)>("<<", ">>");

        <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR> = $r1;

        $r2 = new net.sourceforge.plantuml.Guillemet;

        specialinvoke $r2.<net.sourceforge.plantuml.Guillemet: void <init>(java.lang.String,java.lang.String)>("\u00ab", "\u00bb");

        <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet GUILLEMET> = $r2;

        return;
    }
}
