public class net.sourceforge.plantuml.ugraphic.LimitFinder extends net.sourceforge.plantuml.ugraphic.UGraphicNo
{
    private final net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax;
    private final net.sourceforge.plantuml.ugraphic.UClip clip;
    private static final double HACK_X_FOR_POLYGON;

    public net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder $r0, r1;
        net.sourceforge.plantuml.ugraphic.UChange r2;

        r1 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UChange;

        $r0 = new net.sourceforge.plantuml.ugraphic.LimitFinder;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void <init>(net.sourceforge.plantuml.ugraphic.LimitFinder,net.sourceforge.plantuml.ugraphic.UChange)>(r1, r2);

        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, boolean)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        z0 := @parameter1: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphicNo: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMaxMutable: net.sourceforge.plantuml.ugraphic.MinMaxMutable getEmpty(boolean)>(z0);

        r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax> = $r2;

        r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UClip clip> = null;

        return;
    }

    private void <init>(net.sourceforge.plantuml.ugraphic.LimitFinder, net.sourceforge.plantuml.ugraphic.UChange)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0, r1;
        net.sourceforge.plantuml.ugraphic.UChange r2;
        java.lang.Class[] $r3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r4;
        net.sourceforge.plantuml.ugraphic.UClip $r5, $r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;
        java.lang.UnsupportedOperationException $r8;
        java.lang.Class $r9;
        java.lang.String $r10;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.LimitFinder;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.UChange;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphicNo: void <init>(net.sourceforge.plantuml.ugraphic.UGraphicNo,net.sourceforge.plantuml.ugraphic.UChange)>(r1, r2);

        $r3 = newarray (java.lang.Class)[7];

        $r3[0] = class "Lnet/sourceforge/plantuml/ugraphic/UAntiAliasing;";

        $r3[1] = class "Lnet/sourceforge/plantuml/ugraphic/UBackground;";

        $r3[2] = class "Lnet/sourceforge/plantuml/ugraphic/UClip;";

        $r3[3] = class "Lnet/sourceforge/plantuml/ugraphic/color/HColor;";

        $r3[4] = class "Lnet/sourceforge/plantuml/ugraphic/UHidden;";

        $r3[5] = class "Lnet/sourceforge/plantuml/ugraphic/UStroke;";

        $r3[6] = class "Lnet/sourceforge/plantuml/ugraphic/UTranslate;";

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.ObjectUtils: boolean instanceOfAny(java.lang.Object,java.lang.Class[])>(r2, $r3);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.UnsupportedOperationException;

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label1:
        $z1 = r2 instanceof net.sourceforge.plantuml.ugraphic.UClip;

        if $z1 == 0 goto label2;

        $r5 = (net.sourceforge.plantuml.ugraphic.UClip) r2;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate()>();

        $r11 = virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UClip: net.sourceforge.plantuml.ugraphic.UClip translate(net.sourceforge.plantuml.ugraphic.UTranslate)>($r6);

        goto label3;

     label2:
        $r11 = r1.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UClip clip>;

     label3:
        r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UClip clip> = $r11;

        $r4 = r1.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax> = $r4;

        return;
    }

    private void addPoint(double, double)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.ugraphic.UClip $r1, $r3;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UClip clip>;

        if $r1 == null goto label1;

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UClip clip>;

        $z0 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>(d0, d1);

        if $z0 == 0 goto label2;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: void addPoint(double,double)>(d0, d1);

     label2:
        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UShape)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r1, $r2;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.UShape r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.UnsupportedOperationException $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        net.sourceforge.plantuml.graphic.TextBlock r7;
        net.sourceforge.plantuml.ugraphic.UEmpty $r8;
        net.sourceforge.plantuml.ugraphic.UImageSvg $r9;
        net.sourceforge.plantuml.ugraphic.UImage $r10;
        net.sourceforge.plantuml.posimo.DotPath $r11;
        net.sourceforge.plantuml.ugraphic.URectangle $r12;
        net.sourceforge.plantuml.ugraphic.UPath $r13;
        net.sourceforge.plantuml.ugraphic.UPolygon $r14;
        net.sourceforge.plantuml.ugraphic.UEllipse $r15;
        net.sourceforge.plantuml.ugraphic.ULine $r16;
        net.sourceforge.plantuml.ugraphic.UText $r17;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate()>();

        d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate()>();

        d1 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $z0 = r3 instanceof net.sourceforge.plantuml.ugraphic.UText;

        if $z0 == 0 goto label01;

        $r17 = (net.sourceforge.plantuml.ugraphic.UText) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawText(double,double,net.sourceforge.plantuml.ugraphic.UText)>(d0, d1, $r17);

        goto label17;

     label01:
        $z1 = r3 instanceof net.sourceforge.plantuml.ugraphic.ULine;

        if $z1 == 0 goto label02;

        $r16 = (net.sourceforge.plantuml.ugraphic.ULine) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawULine(double,double,net.sourceforge.plantuml.ugraphic.ULine)>(d0, d1, $r16);

        goto label17;

     label02:
        $z2 = r3 instanceof net.sourceforge.plantuml.ugraphic.UEllipse;

        if $z2 == 0 goto label03;

        $r15 = (net.sourceforge.plantuml.ugraphic.UEllipse) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawEllipse(double,double,net.sourceforge.plantuml.ugraphic.UEllipse)>(d0, d1, $r15);

        goto label17;

     label03:
        $z3 = r3 instanceof net.sourceforge.plantuml.ugraphic.UPolygon;

        if $z3 == 0 goto label04;

        $r14 = (net.sourceforge.plantuml.ugraphic.UPolygon) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawUPolygon(double,double,net.sourceforge.plantuml.ugraphic.UPolygon)>(d0, d1, $r14);

        goto label17;

     label04:
        $z4 = r3 instanceof net.sourceforge.plantuml.ugraphic.UPath;

        if $z4 == 0 goto label05;

        $r13 = (net.sourceforge.plantuml.ugraphic.UPath) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawUPath(double,double,net.sourceforge.plantuml.ugraphic.UPath)>(d0, d1, $r13);

        goto label17;

     label05:
        $z5 = r3 instanceof net.sourceforge.plantuml.ugraphic.URectangle;

        if $z5 == 0 goto label06;

        $r12 = (net.sourceforge.plantuml.ugraphic.URectangle) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawRectangle(double,double,net.sourceforge.plantuml.ugraphic.URectangle)>(d0, d1, $r12);

        goto label17;

     label06:
        $z6 = r3 instanceof net.sourceforge.plantuml.posimo.DotPath;

        if $z6 == 0 goto label07;

        $r11 = (net.sourceforge.plantuml.posimo.DotPath) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawDotPath(double,double,net.sourceforge.plantuml.posimo.DotPath)>(d0, d1, $r11);

        goto label17;

     label07:
        $z7 = r3 instanceof net.sourceforge.plantuml.ugraphic.UImage;

        if $z7 == 0 goto label08;

        $r10 = (net.sourceforge.plantuml.ugraphic.UImage) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawImage(double,double,net.sourceforge.plantuml.ugraphic.UImage)>(d0, d1, $r10);

        goto label17;

     label08:
        $z8 = r3 instanceof net.sourceforge.plantuml.ugraphic.UImageSvg;

        if $z8 == 0 goto label09;

        $r9 = (net.sourceforge.plantuml.ugraphic.UImageSvg) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawImageSvg(double,double,net.sourceforge.plantuml.ugraphic.UImageSvg)>(d0, d1, $r9);

        goto label17;

     label09:
        $z9 = r3 instanceof net.sourceforge.plantuml.ugraphic.UComment;

        if $z9 == 0 goto label10;

        goto label17;

     label10:
        $z10 = r3 instanceof net.sourceforge.plantuml.ugraphic.UEmpty;

        if $z10 == 0 goto label11;

        $r8 = (net.sourceforge.plantuml.ugraphic.UEmpty) r3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void drawEmpty(double,double,net.sourceforge.plantuml.ugraphic.UEmpty)>(d0, d1, $r8);

        goto label17;

     label11:
        $z11 = r3 instanceof net.sourceforge.plantuml.graphic.TextBlock;

        if $z11 == 0 goto label12;

        r7 = (net.sourceforge.plantuml.graphic.TextBlock) r3;

        interfaceinvoke r7.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        goto label17;

     label12:
        $z12 = r3 instanceof net.sourceforge.plantuml.ugraphic.UCenteredCharacter;

        if $z12 == 0 goto label13;

        goto label17;

     label13:
        $z13 = r3 instanceof net.sourceforge.plantuml.activitydiagram3.ftile.CenteredText;

        if $z13 == 0 goto label14;

        goto label17;

     label14:
        $z14 = r3 instanceof net.sourceforge.plantuml.graphic.SpecialText;

        if $z14 == 0 goto label15;

        goto label17;

     label15:
        $z15 = r3 instanceof net.sourceforge.plantuml.ugraphic.UPixel;

        if $z15 == 0 goto label16;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d0, d1);

        goto label17;

     label16:
        $r4 = new java.lang.UnsupportedOperationException;

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label17:
        return;
    }

    private void drawEmpty(double, double, net.sourceforge.plantuml.ugraphic.UEmpty)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.UEmpty r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.UEmpty;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d0, d1);

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEmpty: double getWidth()>();

        $d3 = d0 + $d2;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEmpty: double getHeight()>();

        $d5 = d1 + $d4;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d3, $d5);

        return;
    }

    private void drawUPath(double, double, net.sourceforge.plantuml.ugraphic.UPath)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        net.sourceforge.plantuml.ugraphic.UPath r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.UPath;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMinX()>();

        $d3 = d0 + $d1;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMinY()>();

        $d5 = d2 + $d4;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d3, $d5);

        $d6 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMaxX()>();

        $d7 = d0 + $d6;

        $d8 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMaxY()>();

        $d9 = d2 + $d8;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d7, $d9);

        return;
    }

    private void drawUPolygon(double, double, net.sourceforge.plantuml.ugraphic.UPolygon)
    {
        net.sourceforge.plantuml.ugraphic.UPolygon r0;
        java.util.List $r1;
        int $i0;
        net.sourceforge.plantuml.ugraphic.LimitFinder r2;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r2 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        r0 := @parameter2: net.sourceforge.plantuml.ugraphic.UPolygon;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPolygon: java.util.List getPoints()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPolygon: double getMinX()>();

        $d2 = d0 + $d1;

        $d4 = $d2 - 10.0;

        $d5 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPolygon: double getMinY()>();

        $d6 = d3 + $d5;

        specialinvoke r2.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d4, $d6);

        $d7 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPolygon: double getMaxX()>();

        $d8 = d0 + $d7;

        $d9 = $d8 + 10.0;

        $d10 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPolygon: double getMaxY()>();

        $d11 = d3 + $d10;

        specialinvoke r2.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d9, $d11);

        return;
    }

    private void drawULine(double, double, net.sourceforge.plantuml.ugraphic.ULine)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.ULine r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d0, d1);

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.ULine: double getDX()>();

        $d3 = d0 + $d2;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.ULine: double getDY()>();

        $d5 = d1 + $d4;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d3, $d5);

        return;
    }

    private void drawRectangle(double, double, net.sourceforge.plantuml.ugraphic.URectangle)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        net.sourceforge.plantuml.ugraphic.URectangle r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.URectangle;

        $d3 = d0 - 1.0;

        $d2 = d1 - 1.0;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d3, $d2);

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.URectangle: double getWidth()>();

        $d5 = d0 + $d4;

        $d6 = $d5 - 1.0;

        $d7 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.URectangle: double getDeltaShadow()>();

        $d8 = $d7 * 2.0;

        $d9 = $d6 + $d8;

        $d10 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.URectangle: double getHeight()>();

        $d11 = d1 + $d10;

        $d12 = $d11 - 1.0;

        $d13 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.URectangle: double getDeltaShadow()>();

        $d14 = $d13 * 2.0;

        $d15 = $d12 + $d14;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d9, $d15);

        return;
    }

    private void drawDotPath(double, double, net.sourceforge.plantuml.posimo.DotPath)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        net.sourceforge.plantuml.ugraphic.MinMax r1;
        net.sourceforge.plantuml.ugraphic.LimitFinder r2;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r2 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r0 := @parameter2: net.sourceforge.plantuml.posimo.DotPath;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.ugraphic.MinMax getMinMax()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $d3 = d0 + $d1;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $d5 = d2 + $d4;

        specialinvoke r2.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d3, $d5);

        $d6 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $d7 = d0 + $d6;

        $d8 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $d9 = d2 + $d8;

        specialinvoke r2.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d7, $d9);

        return;
    }

    private void drawImage(double, double, net.sourceforge.plantuml.ugraphic.UImage)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.UImage r1;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.UImage;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d0, d1);

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UImage: int getWidth()>();

        $d2 = (double) $i0;

        $d3 = d0 + $d2;

        $d4 = $d3 - 1.0;

        $i1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UImage: int getHeight()>();

        $d5 = (double) $i1;

        $d6 = d1 + $d5;

        $d7 = $d6 - 1.0;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d4, $d7);

        return;
    }

    private void drawImageSvg(double, double, net.sourceforge.plantuml.ugraphic.UImageSvg)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.UImageSvg r1;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.UImageSvg;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d0, d1);

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UImageSvg: int getWidth()>();

        $d2 = (double) $i0;

        $d3 = d0 + $d2;

        $d4 = $d3 - 1.0;

        $i1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UImageSvg: int getHeight()>();

        $d5 = (double) $i1;

        $d6 = d1 + $d5;

        $d7 = $d6 - 1.0;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d4, $d7);

        return;
    }

    private void drawEllipse(double, double, net.sourceforge.plantuml.ugraphic.UEllipse)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        net.sourceforge.plantuml.ugraphic.UEllipse r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d0, d1);

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getWidth()>();

        $d3 = d0 + $d2;

        $d4 = $d3 - 1.0;

        $d5 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getDeltaShadow()>();

        $d6 = $d5 * 2.0;

        $d7 = $d4 + $d6;

        $d8 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getHeight()>();

        $d9 = d1 + $d8;

        $d10 = $d9 - 1.0;

        $d11 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getDeltaShadow()>();

        $d12 = $d11 * 2.0;

        $d13 = $d10 + $d12;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d7, $d13);

        return;
    }

    private void drawText(double, double, net.sourceforge.plantuml.ugraphic.UText)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        net.sourceforge.plantuml.ugraphic.UText r2;
        net.sourceforge.plantuml.graphic.FontConfiguration $r3;
        net.sourceforge.plantuml.ugraphic.UFont $r4;
        java.lang.String $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        d2 := @parameter0: double;

        d11 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.UText;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UText: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.UFont getFont()>();

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UText: java.lang.String getText()>();

        r6 = interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.StringBounder: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.ugraphic.UFont,java.lang.String)>($r4, $r5);

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = $d0 - 1.5;

        d12 = d11 - $d1;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d2, d12);

        $d3 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d4 = d12 + $d3;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>(d2, $d4);

        $d5 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = d2 + $d5;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d6, d12);

        $d7 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d8 = d2 + $d7;

        $d9 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d10 = d12 + $d9;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void addPoint(double,double)>($d8, $d10);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.color.ColorMapper getColorMapper()
    {
        net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity $r0;
        net.sourceforge.plantuml.ugraphic.LimitFinder r1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        $r0 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity: void <init>()>();

        return $r0;
    }

    public double getMaxX()
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMaxX()>();

        return $d0;
    }

    public double getMaxY()
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMaxY()>();

        return $d0;
    }

    public double getMinX()
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMinX()>();

        return $d0;
    }

    public double getMinY()
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMinY()>();

        return $d0;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax()
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder r0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r1, $r2;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.MinMax $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.ugraphic.LimitFinder;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: boolean isInfinity()>();

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(1);

        return $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMaxMutable minmax>;

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax fromMutable(net.sourceforge.plantuml.ugraphic.MinMaxMutable)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.ugraphic.LimitFinder: double HACK_X_FOR_POLYGON> = 10.0;

        return;
    }
}
