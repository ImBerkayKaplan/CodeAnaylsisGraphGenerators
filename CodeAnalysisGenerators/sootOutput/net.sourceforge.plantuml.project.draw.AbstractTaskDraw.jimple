public abstract class net.sourceforge.plantuml.project.draw.AbstractTaskDraw extends java.lang.Object implements net.sourceforge.plantuml.project.draw.TaskDraw
{
    private net.sourceforge.plantuml.project.lang.CenterBorderColor colors;
    private int completion;
    protected net.sourceforge.plantuml.Url url;
    protected net.sourceforge.plantuml.cucadiagram.Display note;
    protected final net.sourceforge.plantuml.project.timescale.TimeScale timeScale;
    private net.sourceforge.plantuml.real.Real y;
    protected final java.lang.String prettyDisplay;
    protected final net.sourceforge.plantuml.project.time.Day start;
    private final net.sourceforge.plantuml.style.StyleBuilder styleBuilder;
    private final net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet;
    private final net.sourceforge.plantuml.project.core.Task task;
    private final net.sourceforge.plantuml.project.ToTaskDraw toTaskDraw;

    public final java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r1;
        java.lang.String $r2, $r7;
        net.sourceforge.plantuml.project.core.Task $r5;

        r1 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.core.Task task>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final void setColorsAndCompletion(net.sourceforge.plantuml.project.lang.CenterBorderColor, int, net.sourceforge.plantuml.Url, net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.project.lang.CenterBorderColor r1;
        int i0;
        net.sourceforge.plantuml.Url r2;
        net.sourceforge.plantuml.cucadiagram.Display r3;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        r1 := @parameter0: net.sourceforge.plantuml.project.lang.CenterBorderColor;

        i0 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.Url;

        r3 := @parameter3: net.sourceforge.plantuml.cucadiagram.Display;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.lang.CenterBorderColor colors> = r1;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: int completion> = i0;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.Url url> = r2;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.cucadiagram.Display note> = r3;

        return;
    }

    public void <init>(net.sourceforge.plantuml.project.timescale.TimeScale, net.sourceforge.plantuml.real.Real, java.lang.String, net.sourceforge.plantuml.project.time.Day, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.project.core.Task, net.sourceforge.plantuml.project.ToTaskDraw, net.sourceforge.plantuml.style.StyleBuilder, net.sourceforge.plantuml.ugraphic.color.HColorSet)
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.real.Real r1;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r2;
        net.sourceforge.plantuml.style.StyleBuilder r3;
        net.sourceforge.plantuml.project.ToTaskDraw r4;
        net.sourceforge.plantuml.project.time.Day r5;
        java.lang.String r6;
        net.sourceforge.plantuml.project.timescale.TimeScale r7;
        net.sourceforge.plantuml.project.core.Task r8;
        net.sourceforge.plantuml.ISkinParam r9;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        r7 := @parameter0: net.sourceforge.plantuml.project.timescale.TimeScale;

        r1 := @parameter1: net.sourceforge.plantuml.real.Real;

        r6 := @parameter2: java.lang.String;

        r5 := @parameter3: net.sourceforge.plantuml.project.time.Day;

        r9 := @parameter4: net.sourceforge.plantuml.ISkinParam;

        r8 := @parameter5: net.sourceforge.plantuml.project.core.Task;

        r4 := @parameter6: net.sourceforge.plantuml.project.ToTaskDraw;

        r3 := @parameter7: net.sourceforge.plantuml.style.StyleBuilder;

        r2 := @parameter8: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: int completion> = 100;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.real.Real y> = r1;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet> = r2;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder styleBuilder> = r3;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.ToTaskDraw toTaskDraw> = r4;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.time.Day start> = r5;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: java.lang.String prettyDisplay> = r6;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.timescale.TimeScale timeScale> = r7;

        r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.core.Task task> = r8;

        return;
    }

    abstract net.sourceforge.plantuml.style.StyleSignature getStyleSignature();

    private net.sourceforge.plantuml.style.StyleSignature getStyleSignatureUnstarted()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.style.StyleSignature $r6;
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r7;

        r7 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName ganttDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName task>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName unstarted>;

        $r0[4] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r6;
    }

    protected final net.sourceforge.plantuml.ugraphic.color.HColor getLineColor()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2, $r6, $r14;
        net.sourceforge.plantuml.style.Style $r3, $r11;
        net.sourceforge.plantuml.style.PName $r4, $r12;
        net.sourceforge.plantuml.style.Value $r5, $r13;
        net.sourceforge.plantuml.SkinParam $r7, $r15;
        net.sourceforge.plantuml.api.ThemeStyle $r8, $r16;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r9, $r17;
        net.sourceforge.plantuml.ugraphic.color.HColor r10, r18, $r19;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleSignature getStyleSignatureUnstarted()>();

        $r2 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        $r4 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r5 = virtualinvoke $r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r4);

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r9 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        r10 = interfaceinvoke $r5.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r8, $r9);

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.Style getStyle()>();

        $r12 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r13 = virtualinvoke $r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r12);

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r17 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        r18 = interfaceinvoke $r13.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r16, $r17);

        $i0 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: int completion>;

        $r19 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor unlinear(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,int)>(r10, r18, $i0);

        return $r19;
    }

    protected final net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2, $r6, $r14;
        net.sourceforge.plantuml.style.Style $r3, $r11;
        net.sourceforge.plantuml.style.PName $r4, $r12;
        net.sourceforge.plantuml.style.Value $r5, $r13;
        net.sourceforge.plantuml.SkinParam $r7, $r15;
        net.sourceforge.plantuml.api.ThemeStyle $r8, $r16;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r9, $r17;
        net.sourceforge.plantuml.ugraphic.color.HColor r10, r18, $r19;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleSignature getStyleSignatureUnstarted()>();

        $r2 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        $r4 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r5 = virtualinvoke $r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r4);

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r9 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        r10 = interfaceinvoke $r5.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r8, $r9);

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.Style getStyle()>();

        $r12 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r13 = virtualinvoke $r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r12);

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r17 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        r18 = interfaceinvoke $r13.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r16, $r17);

        $i0 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: int completion>;

        $r19 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor unlinear(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,int)>(r10, r18, $i0);

        return $r19;
    }

    protected final net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.Style $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.SkinParam $r3;
        net.sourceforge.plantuml.api.ThemeStyle $r4;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r5;
        net.sourceforge.plantuml.graphic.FontConfiguration $r6;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.Style getStyle()>();

        $r2 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r5 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        $r6 = virtualinvoke $r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r4, $r5);

        return $r6;
    }

    protected final net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style $r3;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        return $r3;
    }

    public final double getTitleWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r4;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.graphic.TextBlock $r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r7;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.graphic.TextBlock getTitle()>();

        $r7 = interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d1 = virtualinvoke $r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getRight()>();

        $d4 = $d2 + $d3;

        return $d4;
    }

    protected abstract net.sourceforge.plantuml.graphic.TextBlock getTitle();

    protected abstract double getShapeHeight(net.sourceforge.plantuml.graphic.StringBounder);

    public final double getFullHeightTask(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.Style r1;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r2;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.graphic.StringBounder r3;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.Style getStyle()>();

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: double getShapeHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getBottom()>();

        $d4 = $d2 + $d3;

        return $d4;
    }

    public net.sourceforge.plantuml.project.draw.TaskDraw getTrueRow()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.project.core.Task $r1, $r3;
        net.sourceforge.plantuml.project.ToTaskDraw $r2;
        net.sourceforge.plantuml.project.draw.TaskDraw $r4;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r2 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.ToTaskDraw toTaskDraw>;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.core.Task task>;

        $r3 = interfaceinvoke $r1.<net.sourceforge.plantuml.project.core.Task: net.sourceforge.plantuml.project.core.Task getRow()>();

        $r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.project.ToTaskDraw: net.sourceforge.plantuml.project.draw.TaskDraw getTaskDraw(net.sourceforge.plantuml.project.core.Task)>($r3);

        return $r4;
    }

    public final net.sourceforge.plantuml.real.Real getY(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.project.core.Task $r1, $r2;
        net.sourceforge.plantuml.project.draw.TaskDraw $r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.real.Real $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.core.Task task>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.project.core.Task: net.sourceforge.plantuml.project.core.Task getRow()>();

        if $r2 != null goto label1;

        $r6 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.real.Real y>;

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.draw.TaskDraw getTrueRow()>();

        $r5 = interfaceinvoke $r3.<net.sourceforge.plantuml.project.draw.TaskDraw: net.sourceforge.plantuml.real.Real getY(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        return $r5;
    }

    public final net.sourceforge.plantuml.project.core.Task getTask()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.project.core.Task $r1;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.core.Task task>;

        return $r1;
    }

    public final double getY(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.Style r1;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r2;
        double $d0, $d1, d2, $d3, d4, $d5, $d6;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.real.Real $r5;
        net.sourceforge.plantuml.Direction r6, $r7, $r8;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r6 := @parameter1: net.sourceforge.plantuml.Direction;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.Style getStyle()>();

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        virtualinvoke r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getPadding()>();

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.real.Real getY(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d1 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d2 = $d0 + $d1;

        $d3 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: double getShapeHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        d4 = d2 + $d3;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        if r6 != $r7 goto label1;

        return d2;

     label1:
        $r8 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        if r6 != $r8 goto label2;

        return d4;

     label2:
        $d5 = d2 + d4;

        $d6 = $d5 / 2.0;

        return $d6;
    }

    protected final net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.style.StyleBuilder $r1;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        return $r1;
    }

    protected final net.sourceforge.plantuml.ugraphic.color.HColorSet getColorSet()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r1;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        return $r1;
    }

    protected net.sourceforge.plantuml.project.lang.CenterBorderColor getColors()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        net.sourceforge.plantuml.project.lang.CenterBorderColor $r1;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: net.sourceforge.plantuml.project.lang.CenterBorderColor colors>;

        return $r1;
    }

    protected int getCompletion()
    {
        net.sourceforge.plantuml.project.draw.AbstractTaskDraw r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.project.draw.AbstractTaskDraw;

        $i0 = r0.<net.sourceforge.plantuml.project.draw.AbstractTaskDraw: int completion>;

        return $i0;
    }
}
