public class net.sourceforge.plantuml.creole.atom.AtomTree extends net.sourceforge.plantuml.creole.atom.AbstractAtom implements net.sourceforge.plantuml.creole.atom.Atom
{
    private final net.sourceforge.plantuml.ugraphic.color.HColor lineColor;
    private final java.util.List cells;
    private final java.util.Map levels;
    private final double margin;

    public void <init>(net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.creole.atom.AtomTree r0;
        java.util.ArrayList $r1;
        java.util.HashMap $r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomTree;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AbstractAtom: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.atom.AtomTree: double margin> = 2.0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.atom.AtomTree: java.util.List cells> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.atom.AtomTree: java.util.Map levels> = $r2;

        r0.<net.sourceforge.plantuml.creole.atom.AtomTree: double margin> = 2.0;

        r0.<net.sourceforge.plantuml.creole.atom.AtomTree: net.sourceforge.plantuml.ugraphic.color.HColor lineColor> = r3;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.salt.element.Skeleton2 $r0;
        net.sourceforge.plantuml.creole.atom.AtomTree r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        net.sourceforge.plantuml.Dimension2DDouble $r5;
        java.lang.Object $r6;
        net.sourceforge.plantuml.creole.atom.Atom r7;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        net.sourceforge.plantuml.awt.geom.Dimension2D r9;
        double $d0, $d1, $d2, $d3, $d4, d5, d6;
        int i0;

        r2 := @this: net.sourceforge.plantuml.creole.atom.AtomTree;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.salt.element.Skeleton2;

        specialinvoke $r0.<net.sourceforge.plantuml.salt.element.Skeleton2: void <init>()>();

        d5 = 0.0;

        d6 = 0.0;

        $r3 = r2.<net.sourceforge.plantuml.creole.atom.AtomTree: java.util.List cells>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.creole.atom.Atom) $r6;

        r9 = interfaceinvoke r7.<net.sourceforge.plantuml.creole.atom.Atom: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r8);

        $d0 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d6 = d6 + $d0;

        i0 = specialinvoke r2.<net.sourceforge.plantuml.creole.atom.AtomTree: int getLevel(net.sourceforge.plantuml.creole.atom.Atom)>(r7);

        $d1 = virtualinvoke $r0.<net.sourceforge.plantuml.salt.element.Skeleton2: double getXEndForLevel(int)>(i0);

        $d2 = $d1 + 2.0;

        $d3 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = $d2 + $d3;

        d5 = staticinvoke <java.lang.Math: double max(double,double)>(d5, $d4);

        goto label1;

     label2:
        $r5 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r5.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d5, d6);

        return $r5;
    }

    public double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomTree r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomTree;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.salt.element.Skeleton2 $r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r7, $r11, r15;
        net.sourceforge.plantuml.creole.atom.AtomTree r3;
        java.util.List $r4;
        java.util.Iterator r5;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r6;
        java.lang.Object $r8;
        net.sourceforge.plantuml.creole.atom.Atom r9;
        int i0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10, $r14;
        net.sourceforge.plantuml.graphic.StringBounder $r12;
        net.sourceforge.plantuml.awt.geom.Dimension2D r13;

        r3 := @this: net.sourceforge.plantuml.creole.atom.AtomTree;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.salt.element.Skeleton2;

        specialinvoke $r0.<net.sourceforge.plantuml.salt.element.Skeleton2: void <init>()>();

        d7 = 0.0;

        r15 = r2;

        $r4 = r3.<net.sourceforge.plantuml.creole.atom.AtomTree: java.util.List cells>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.creole.atom.Atom) $r8;

        i0 = specialinvoke r3.<net.sourceforge.plantuml.creole.atom.AtomTree: int getLevel(net.sourceforge.plantuml.creole.atom.Atom)>(r9);

        $d0 = virtualinvoke $r0.<net.sourceforge.plantuml.salt.element.Skeleton2: double getXEndForLevel(int)>(i0);

        $d1 = 2.0 + $d0;

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d1);

        $r11 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        interfaceinvoke r9.<net.sourceforge.plantuml.creole.atom.Atom: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r11);

        $r12 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r13 = interfaceinvoke r9.<net.sourceforge.plantuml.creole.atom.Atom: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r12);

        $d2 = virtualinvoke r13.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 / 2.0;

        $d4 = d7 + $d3;

        virtualinvoke $r0.<net.sourceforge.plantuml.salt.element.Skeleton2: void add(int,double)>(i0, $d4);

        $d5 = virtualinvoke r13.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r14 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d5);

        r15 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r14);

        $d6 = virtualinvoke r13.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d7 = d7 + $d6;

        goto label1;

     label2:
        $r6 = r3.<net.sourceforge.plantuml.creole.atom.AtomTree: net.sourceforge.plantuml.ugraphic.color.HColor lineColor>;

        $r7 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        virtualinvoke $r0.<net.sourceforge.plantuml.salt.element.Skeleton2: void draw(net.sourceforge.plantuml.ugraphic.UGraphic)>($r7);

        return;
    }

    private int getLevel(net.sourceforge.plantuml.creole.atom.Atom)
    {
        net.sourceforge.plantuml.creole.atom.AtomTree r0;
        net.sourceforge.plantuml.creole.atom.Atom r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomTree;

        r1 := @parameter0: net.sourceforge.plantuml.creole.atom.Atom;

        $r2 = r0.<net.sourceforge.plantuml.creole.atom.AtomTree: java.util.Map levels>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public void addCell(net.sourceforge.plantuml.creole.atom.Atom, int)
    {
        net.sourceforge.plantuml.creole.atom.AtomTree r0;
        net.sourceforge.plantuml.creole.atom.Atom r1;
        java.util.List $r2;
        int i0;
        java.util.Map $r3;
        java.lang.Integer $r4;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomTree;

        r1 := @parameter0: net.sourceforge.plantuml.creole.atom.Atom;

        i0 := @parameter1: int;

        $r2 = r0.<net.sourceforge.plantuml.creole.atom.AtomTree: java.util.List cells>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.creole.atom.AtomTree: java.util.Map levels>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return;
    }
}
