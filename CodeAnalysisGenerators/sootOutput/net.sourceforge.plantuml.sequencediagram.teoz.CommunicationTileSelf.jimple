public class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1;
    private final net.sourceforge.plantuml.sequencediagram.Message message;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        return $r1;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.ArrowComponent $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.ArrowComponent: double getYPoint(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        return $d0;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace, net.sourceforge.plantuml.sequencediagram.Message, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r3;
        net.sourceforge.plantuml.sequencediagram.Message r4;
        net.sourceforge.plantuml.skin.rose.Rose r5;
        net.sourceforge.plantuml.ISkinParam r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r4 := @parameter2: net.sourceforge.plantuml.sequencediagram.Message;

        r5 := @parameter3: net.sourceforge.plantuml.skin.rose.Rose;

        r6 := @parameter4: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter5: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.skin.rose.Rose skin> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        return;
    }

    private net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1, $r2, $r5;
        net.sourceforge.plantuml.skin.rose.Rose $r3;
        net.sourceforge.plantuml.style.Style[] $r4;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.cucadiagram.Display $r7;
        net.sourceforge.plantuml.skin.ArrowComponent r8;
        net.sourceforge.plantuml.graphic.StringBounder r9;
        net.sourceforge.plantuml.skin.ArrowConfiguration r10, r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        r9 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        r10 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.skin.ArrowConfiguration getArrowConfiguration()>();

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowConfiguration self()>();

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.cucadiagram.Display getLabelNumbered()>();

        r8 = virtualinvoke $r3.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.ArrowComponent createComponentArrow(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r4, r11, $r6, $r7);

        return r8;
    }

    protected final void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3, $r5, $r7;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        java.awt.geom.Point2D r6, r8;
        net.sourceforge.plantuml.sequencediagram.Message $r9, $r10, $r11;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r12, $r14, $r16;
        net.sourceforge.plantuml.sequencediagram.Event $r13, $r15, $r17;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r6 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: java.awt.geom.Point2D getStartPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5, r4);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r8 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: java.awt.geom.Point2D getEndPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r7, r4);

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        $z0 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.Message: boolean isActivate()>();

        if $z0 == 0 goto label1;

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $d5 = virtualinvoke r8.<java.awt.geom.Point2D: double getY()>();

        $d6 = d0 + $d5;

        virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event,double)>($r17, $d6);

        goto label3;

     label1:
        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        $z1 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.Message: boolean isDeactivate()>();

        if $z1 == 0 goto label2;

        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $d3 = virtualinvoke r6.<java.awt.geom.Point2D: double getY()>();

        $d4 = d0 + $d3;

        virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event,double)>($r15, $d4);

        goto label3;

     label2:
        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        $z2 = virtualinvoke $r11.<net.sourceforge.plantuml.sequencediagram.Message: boolean isDestroy()>();

        if $z2 == 0 goto label3;

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $d1 = virtualinvoke r8.<java.awt.geom.Point2D: double getY()>();

        $d2 = d0 + $d1;

        virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event,double)>($r13, $d2);

     label3:
        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r1;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.real.Real $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode $r5, $r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r6, $r8;
        int i0, i1, $i2;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        net.sourceforge.plantuml.skin.Area $r15;
        net.sourceforge.plantuml.ugraphic.UTranslate $r17;
        net.sourceforge.plantuml.skin.Context2D $r18;
        net.sourceforge.plantuml.ugraphic.UGraphic r19, r20;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        r19 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r4 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d6 = interfaceinvoke $r4.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r5 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_ACTIVATE>;

        i0 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r1, $r5);

        $r8 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r7 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode CONSIDERE_FUTURE_DEACTIVATE>;

        i1 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r1, $r7);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommunicationTileSelf::drawU levelIgnore=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" levelConsidere=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r14);

        $d0 = (double) i0;

        $d1 = 5.0 * $d0;

        d7 = d6 + $d1;

        if i0 >= i1 goto label1;

        d7 = d7 + 5.0;

     label1:
        $r15 = new net.sourceforge.plantuml.skin.Area;

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r15.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d2, $d3);

        $i2 = i0 - i1;

        $d4 = (double) $i2;

        $d5 = $d4 * 5.0;

        virtualinvoke $r15.<net.sourceforge.plantuml.skin.Area: void setDeltaX1(double)>($d5);

        $r17 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d7);

        r20 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        $r18 = (net.sourceforge.plantuml.skin.Context2D) r20;

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r20, $r15, $r18);

        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r5, $r7;
        net.sourceforge.plantuml.real.Real $r2, $r3, $r6, $r8, $r9;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r4, r10, r11;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: boolean isReverseDefine()>();

        if $z0 == 0 goto label2;

        r10 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getPrevious()>();

        if r10 == null goto label1;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r8 = virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>($r7);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: double getCompWidth()>();

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r9);

     label1:
        goto label3;

     label2:
        r11 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getNext()>();

        if r11 == null goto label3;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = virtualinvoke r11.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.real.Real getMaxX()>();

        interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r3);

     label3:
        return;
    }

    private boolean isReverseDefine()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1;
        net.sourceforge.plantuml.skin.ArrowConfiguration $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.skin.ArrowConfiguration getArrowConfiguration()>();

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.ArrowConfiguration: boolean isReverseDefine()>();

        return $z0;
    }

    private net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getPrevious()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r5, $r6, r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        r7 = null;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r4;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        if r5 != $r6 goto label2;

        return r7;

     label2:
        r7 = r5;

        goto label1;

     label3:
        return null;
    }

    private net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getNext()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r5, $r6, $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r4;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        if r5 != $r6 goto label2;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r7;

        return $r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    private net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.real.Real $r2, $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: boolean isReverseDefine()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        return $r4;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r1, $r5;
        net.sourceforge.plantuml.graphic.StringBounder $r2, $r6;
        net.sourceforge.plantuml.real.Real $r3, $r4, $r7;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: boolean isReverseDefine()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC2(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        return $r7;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC2(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: double getCompWidth()>();

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        return $r4;
    }

    private double getCompWidth()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke $r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }
}
