public class net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian extends java.lang.Object
{
    private static final byte[] hex_digits;
    private static final byte[] HEX_digits;

    public void <init>()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian r0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toHexStr(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: java.lang.String toHexStr(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String toHexStr(byte[], boolean)
    {
        byte[] r0, r1, r2, $r4;
        int i0, $i1, $i3, $i4, $i7, $i8, $i10, $i13, i14;
        boolean z0;
        java.lang.String $r3;
        byte $b2, $b5, $b6, $b9, $b11, $b12;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        i0 = lengthof r0;

        $i1 = i0 * 2;

        r1 = newarray (byte)[$i1];

        if z0 == 0 goto label1;

        $r4 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: byte[] HEX_digits>;

        goto label2;

     label1:
        $r4 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: byte[] hex_digits>;

     label2:
        r2 = $r4;

        i14 = 0;

     label3:
        if i14 >= i0 goto label4;

        $i7 = i14 * 2;

        $b2 = r0[i14];

        $i3 = $b2 >> 4;

        $i4 = $i3 & 15;

        $b5 = (byte) $i4;

        $b6 = r2[$b5];

        r1[$i7] = $b6;

        $i8 = i14 * 2;

        $i13 = $i8 + 1;

        $b9 = r0[i14];

        $i10 = $b9 & 15;

        $b11 = (byte) $i10;

        $b12 = r2[$b11];

        r1[$i13] = $b12;

        i14 = i14 + 1;

        goto label3;

     label4:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r1);

        return $r3;
    }

    public static int readInt(byte[], int)
    {
        byte[] r0;
        byte $b0, $b1, $b4, $b7;
        int $i2, $i3, $i5, $i6, $i8, i9, i10, i11, i12, i13, i14, i15, i16;

        r0 := @parameter0: byte[];

        i9 := @parameter1: int;

        i10 = i9 + 1;

        $b0 = r0[i9];

        i11 = $b0 & 255;

        i12 = i10 + 1;

        $b1 = r0[i10];

        $i2 = $b1 & 255;

        $i3 = $i2 << 8;

        i13 = i11 | $i3;

        i14 = i12 + 1;

        $b4 = r0[i12];

        $i5 = $b4 & 255;

        $i6 = $i5 << 16;

        i15 = i13 | $i6;

        $b7 = r0[i14];

        $i8 = $b7 << 24;

        i16 = i15 | $i8;

        return i16;
    }

    public static long readLong(byte[], int)
    {
        byte[] r0;
        byte $b0, $b2, $b6, $b10, $b14, $b18, $b22, $b26;
        long $l1, $l3, $l4, $l5, $l7, $l8, $l9, $l11, $l12, $l13, $l15, $l16, $l17, $l19, $l20, $l21, $l23, $l24, $l25, $l27, $l28, l31, l33, l35, l37, l39, l41, l43, l44;
        int i29, i30, i32, i34, i36, i38, i40, i42;

        r0 := @parameter0: byte[];

        i29 := @parameter1: int;

        i30 = i29 + 1;

        $b0 = r0[i29];

        $l1 = (long) $b0;

        l31 = $l1 & 255L;

        i32 = i30 + 1;

        $b2 = r0[i30];

        $l3 = (long) $b2;

        $l4 = $l3 & 255L;

        $l5 = $l4 << 8;

        l33 = l31 | $l5;

        i34 = i32 + 1;

        $b6 = r0[i32];

        $l7 = (long) $b6;

        $l8 = $l7 & 255L;

        $l9 = $l8 << 16;

        l35 = l33 | $l9;

        i36 = i34 + 1;

        $b10 = r0[i34];

        $l11 = (long) $b10;

        $l12 = $l11 & 255L;

        $l13 = $l12 << 24;

        l37 = l35 | $l13;

        i38 = i36 + 1;

        $b14 = r0[i36];

        $l15 = (long) $b14;

        $l16 = $l15 & 255L;

        $l17 = $l16 << 32;

        l39 = l37 | $l17;

        i40 = i38 + 1;

        $b18 = r0[i38];

        $l19 = (long) $b18;

        $l20 = $l19 & 255L;

        $l21 = $l20 << 40;

        l41 = l39 | $l21;

        i42 = i40 + 1;

        $b22 = r0[i40];

        $l23 = (long) $b22;

        $l24 = $l23 & 255L;

        $l25 = $l24 << 48;

        l43 = l41 | $l25;

        $b26 = r0[i42];

        $l27 = (long) $b26;

        $l28 = $l27 << 56;

        l44 = l43 | $l28;

        return l44;
    }

    public static void writeLong(long, byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i3, $i5, $i6, $i8, $i9, $i11, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i23;
        byte $b2, $b4, $b7, $b10, $b13, $b16, $b19, $b22;
        long l24, l25, l26, l27, l28, l29, l30, l31;

        l24 := @parameter0: long;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i1 = (int) l24;

        $b2 = (byte) $i1;

        r0[i0] = $b2;

        l25 = l24 >>> 8;

        $i5 = i0 + 1;

        $i3 = (int) l25;

        $b4 = (byte) $i3;

        r0[$i5] = $b4;

        l26 = l25 >>> 8;

        $i8 = i0 + 2;

        $i6 = (int) l26;

        $b7 = (byte) $i6;

        r0[$i8] = $b7;

        l27 = l26 >>> 8;

        $i11 = i0 + 3;

        $i9 = (int) l27;

        $b10 = (byte) $i9;

        r0[$i11] = $b10;

        l28 = l27 >>> 8;

        $i14 = i0 + 4;

        $i12 = (int) l28;

        $b13 = (byte) $i12;

        r0[$i14] = $b13;

        l29 = l28 >>> 8;

        $i17 = i0 + 5;

        $i15 = (int) l29;

        $b16 = (byte) $i15;

        r0[$i17] = $b16;

        l30 = l29 >>> 8;

        $i20 = i0 + 6;

        $i18 = (int) l30;

        $b19 = (byte) $i18;

        r0[$i20] = $b19;

        l31 = l30 >>> 8;

        $i23 = i0 + 7;

        $i21 = (int) l31;

        $b22 = (byte) $i21;

        r0[$i23] = $b22;

        return;
    }

    public static void writeInt(int, byte[], int)
    {
        byte[] r0;
        int i0, $i3, $i5, $i7, i8, i9, i10, i11;
        byte $b1, $b2, $b4, $b6;

        i8 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $b1 = (byte) i8;

        r0[i0] = $b1;

        i9 = i8 >>> 8;

        $i3 = i0 + 1;

        $b2 = (byte) i9;

        r0[$i3] = $b2;

        i10 = i9 >>> 8;

        $i5 = i0 + 2;

        $b4 = (byte) i10;

        r0[$i5] = $b4;

        i11 = i10 >>> 8;

        $i7 = i0 + 3;

        $b6 = (byte) i11;

        r0[$i7] = $b6;

        return;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1;

        $r0 = newarray (byte)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: byte[] hex_digits> = $r0;

        $r1 = newarray (byte)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: byte[] HEX_digits> = $r1;

        return;
    }
}
