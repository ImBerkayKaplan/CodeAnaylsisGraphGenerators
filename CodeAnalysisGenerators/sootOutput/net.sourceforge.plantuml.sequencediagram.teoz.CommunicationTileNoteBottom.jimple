public class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom extends net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract
{

    public void <init>(net.sourceforge.plantuml.sequencediagram.teoz.Tile, net.sourceforge.plantuml.sequencediagram.AbstractMessage, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r1;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r2;
        net.sourceforge.plantuml.skin.rose.Rose r3;
        net.sourceforge.plantuml.ISkinParam r4;
        net.sourceforge.plantuml.sequencediagram.Note r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        r3 := @parameter2: net.sourceforge.plantuml.skin.rose.Rose;

        r4 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        r5 := @parameter4: net.sourceforge.plantuml.sequencediagram.Note;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottomTopAbstract: void <init>(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.AbstractMessage,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.sequencediagram.Note)>(r1, r2, r3, r4, r5);

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r16;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom r2;
        net.sourceforge.plantuml.skin.Component r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.skin.Area $r5;
        double $d0, $d1, $d2, $d3, $d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r7, $r9, $r11, $r14, $r18;
        net.sourceforge.plantuml.graphic.UDrawable $r8;
        net.sourceforge.plantuml.real.Real $r10, $r12, $r13;
        net.sourceforge.plantuml.ugraphic.UTranslate $r15;
        net.sourceforge.plantuml.skin.Context2D $r17;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = new net.sourceforge.plantuml.skin.Area;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r5.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d0, $d1);

        $r7 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r8 = (net.sourceforge.plantuml.graphic.UDrawable) $r7;

        interfaceinvoke $r8.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        $r9 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMinX()>();

        $d2 = interfaceinvoke $r10.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r11 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        $d3 = interfaceinvoke $r12.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d4 = $d2 + $d3;

        d5 = $d4 / 2.0;

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: net.sourceforge.plantuml.real.Real getNotePosition(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d6 = interfaceinvoke $r13.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r14 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        d7 = interfaceinvoke $r14.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        $r15 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d8 = d7 + 10.0;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, $d8);

        $r16 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r15);

        $r17 = (net.sourceforge.plantuml.skin.Context2D) r0;

        interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r16, $r5, $r17);

        $r18 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $d9 = interfaceinvoke $r18.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getContactPointRelative()>();

        $d10 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d11 = $d10 / 2.0;

        $d14 = d6 + $d11;

        $d12 = d7 + 10.0;

        $d13 = $d12 + 5.0;

        virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r0, d5, $d9, $d14, $d13);

        return;
    }
}
