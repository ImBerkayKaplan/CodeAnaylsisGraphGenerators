public class net.sourceforge.plantuml.salt.element.Grid2 extends java.lang.Object
{
    private final java.util.List rowsStart;
    private final java.util.List colsStart;
    private final net.sourceforge.plantuml.salt.element.TableStrategy strategy;

    public void <init>(java.util.List, java.util.List, net.sourceforge.plantuml.salt.element.TableStrategy)
    {
        net.sourceforge.plantuml.salt.element.Grid2 r0;
        java.util.List r1, r2;
        net.sourceforge.plantuml.salt.element.TableStrategy r3;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid2;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: net.sourceforge.plantuml.salt.element.TableStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List rowsStart> = r1;

        r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List colsStart> = r2;

        r0.<net.sourceforge.plantuml.salt.element.Grid2: net.sourceforge.plantuml.salt.element.TableStrategy strategy> = r3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.salt.element.Grid2 r0;
        java.util.List $r1, $r4, $r5, $r8, $r11, $r12, $r30, $r35;
        java.lang.Object $r2, $r6, $r9, $r13, $r31, $r36;
        java.lang.Double $r3, $r7, $r10, $r14, r43, r45;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.salt.element.TableStrategy $r15, $r16, $r40, $r41;
        net.sourceforge.plantuml.ugraphic.UGraphic r17, $r19, $r22, $r25, $r28, $r33, $r38;
        net.sourceforge.plantuml.ugraphic.UTranslate $r18, $r21, $r24, $r27, $r32, $r37;
        net.sourceforge.plantuml.ugraphic.ULine $r20, $r23, $r26, $r29, $r34, $r39;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator r42, r44;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid2;

        r17 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List colsStart>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.Double) $r2;

        d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r5 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List colsStart>;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List colsStart>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $r7 = (java.lang.Double) $r6;

        d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List rowsStart>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.lang.Double) $r9;

        d2 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $r12 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List rowsStart>;

        $r11 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List rowsStart>;

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        $r14 = (java.lang.Double) $r13;

        d3 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $r16 = r0.<net.sourceforge.plantuml.salt.element.Grid2: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r15 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE>;

        if $r16 == $r15 goto label1;

        $r41 = r0.<net.sourceforge.plantuml.salt.element.Grid2: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r40 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_OUTSIDE_WITH_TITLE>;

        if $r41 != $r40 goto label2;

     label1:
        $r18 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r18.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d2);

        $r19 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        $d4 = d1 - d0;

        $r20 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d4);

        interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r20);

        $r21 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r21.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d3);

        $r22 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

        $d5 = d1 - d0;

        $r23 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d5);

        interfaceinvoke $r22.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r23);

        $r24 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d2);

        $r25 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        $d6 = d3 - d2;

        $r26 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>($d6);

        interfaceinvoke $r25.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r26);

        $r27 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r27.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d1, d2);

        $r28 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r27);

        $d7 = d3 - d2;

        $r29 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>($d7);

        interfaceinvoke $r28.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r29);

     label2:
        $z3 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.Grid2: boolean drawHorizontal()>();

        if $z3 == 0 goto label4;

        $r35 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List rowsStart>;

        r42 = interfaceinvoke $r35.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r36 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.lang.Double) $r36;

        $r37 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d10 = virtualinvoke r43.<java.lang.Double: double doubleValue()>();

        specialinvoke $r37.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, $d10);

        $r38 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r37);

        $d11 = d1 - d0;

        $r39 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d11);

        interfaceinvoke $r38.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r39);

        goto label3;

     label4:
        $z0 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.Grid2: boolean drawVertical()>();

        if $z0 == 0 goto label6;

        $r30 = r0.<net.sourceforge.plantuml.salt.element.Grid2: java.util.List colsStart>;

        r44 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r31 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.lang.Double) $r31;

        $r32 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d8 = virtualinvoke r45.<java.lang.Double: double doubleValue()>();

        specialinvoke $r32.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d8, d2);

        $r33 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r32);

        $d9 = d3 - d2;

        $r34 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>($d9);

        interfaceinvoke $r33.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r34);

        goto label5;

     label6:
        return;
    }

    private boolean drawHorizontal()
    {
        net.sourceforge.plantuml.salt.element.Grid2 r0;
        net.sourceforge.plantuml.salt.element.TableStrategy $r1, $r2, $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid2;

        $r2 = r0.<net.sourceforge.plantuml.salt.element.Grid2: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r1 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_HORIZONTAL>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.Grid2: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r3 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_ALL>;

        if $r4 != $r3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean drawVertical()
    {
        net.sourceforge.plantuml.salt.element.Grid2 r0;
        net.sourceforge.plantuml.salt.element.TableStrategy $r1, $r2, $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.salt.element.Grid2;

        $r2 = r0.<net.sourceforge.plantuml.salt.element.Grid2: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r1 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_VERTICAL>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.Grid2: net.sourceforge.plantuml.salt.element.TableStrategy strategy>;

        $r3 = <net.sourceforge.plantuml.salt.element.TableStrategy: net.sourceforge.plantuml.salt.element.TableStrategy DRAW_ALL>;

        if $r4 != $r3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
}
