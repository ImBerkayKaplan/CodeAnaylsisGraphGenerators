public class net.sourceforge.plantuml.sprite.SpriteMonochrome extends java.lang.Object implements net.sourceforge.plantuml.sprite.Sprite
{
    private final int width;
    private final int height;
    private final int grayLevel;
    private final int[][] gray;

    public boolean isSameKind(net.sourceforge.plantuml.sprite.SpriteMonochrome)
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        r1 := @parameter0: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $i1 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i0 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        $i3 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $i2 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if $i3 == $i2 goto label2;

        return 0;

     label2:
        $i5 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        $i4 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        if $i5 == $i4 goto label3;

        return 0;

     label3:
        return 1;
    }

    public boolean isSame(net.sourceforge.plantuml.sprite.SpriteMonochrome)
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0, r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, i4, i5;
        int[][] $r2, $r4;
        int[] $r3, $r5;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        r1 := @parameter0: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: boolean isSameKind(net.sourceforge.plantuml.sprite.SpriteMonochrome)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i4 = 0;

     label2:
        $i0 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i4 >= $i0 goto label6;

        i5 = 0;

     label3:
        $i1 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i5 >= $i1 goto label5;

        $r2 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r3 = $r2[i5];

        $i3 = $r3[i4];

        $r4 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r5 = $r4[i5];

        $i2 = $r5[i4];

        if $i3 == $i2 goto label4;

        return 0;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        i4 = i4 + 1;

        goto label2;

     label6:
        return 1;
    }

    public net.sourceforge.plantuml.sprite.SpriteMonochrome xor(net.sourceforge.plantuml.sprite.SpriteMonochrome)
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0, r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        int[][] $r4, $r5, $r7;
        int[] $r6, $r8, $r9;
        java.lang.IllegalStateException $r10, $r11, $r12;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        r1 := @parameter0: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $i1 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i0 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if $i1 == $i0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label1:
        $i3 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $i2 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if $i3 == $i2 goto label2;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label2:
        $i5 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        $i4 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        if $i5 == $i4 goto label3;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>()>();

        throw $r10;

     label3:
        $r2 = new net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $i8 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i7 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $i6 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        specialinvoke $r2.<net.sourceforge.plantuml.sprite.SpriteMonochrome: void <init>(int,int,int)>($i8, $i7, $i6);

        i14 = 0;

     label4:
        $i9 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i14 >= $i9 goto label7;

        i15 = 0;

     label5:
        $i10 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i15 >= $i10 goto label6;

        $r4 = $r2.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r9 = $r4[i15];

        $r5 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r6 = $r5[i15];

        $i12 = $r6[i14];

        $r7 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r8 = $r7[i15];

        $i11 = $r8[i14];

        $i13 = $i12 ^ $i11;

        $r9[i14] = $i13;

        i15 = i15 + 1;

        goto label5;

     label6:
        i14 = i14 + 1;

        goto label4;

     label7:
        return $r2;
    }

    public void <init>(int, int, int)
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0;
        int i0, i1, i2;
        java.lang.IllegalArgumentException $r1;
        int[][] $r2;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 == 2 goto label1;

        if i0 == 4 goto label1;

        if i0 == 8 goto label1;

        if i0 == 16 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width> = i1;

        r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height> = i2;

        r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel> = i0;

        $r2 = newmultiarray (int)[i2][i1];

        r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray> = $r2;

        return;
    }

    public net.sourceforge.plantuml.sprite.SpriteMonochrome xSymetric()
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome $r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, i12, $i13, $i14, i15, i16, i17, i18;

        r1 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $r0 = new net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $i2 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i1 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $i0 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        specialinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: void <init>(int,int,int)>($i2, $i1, $i0);

        i15 = 0;

     label1:
        $i3 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i15 >= $i3 goto label4;

        i16 = 0;

     label2:
        $i13 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i16 >= $i13 goto label3;

        $i14 = virtualinvoke r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i15, i16);

        virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: void setGray(int,int,int)>(i15, i16, $i14);

        i16 = i16 + 1;

        goto label2;

     label3:
        i15 = i15 + 1;

        goto label1;

     label4:
        i17 = 0;

     label5:
        $i4 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i17 >= $i4 goto label8;

        i18 = 0;

     label6:
        $i5 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i6 = $i5 / 2;

        if i18 >= $i6 goto label7;

        $i7 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i8 = $i7 - 1;

        i9 = $i8 - i18;

        $i10 = virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i18, i17);

        $i11 = virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i9, i17);

        i12 = $i10 ^ $i11;

        virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: void setGray(int,int,int)>(i9, i17, i12);

        i18 = i18 + 1;

        goto label6;

     label7:
        i17 = i17 + 1;

        goto label5;

     label8:
        return $r0;
    }

    public net.sourceforge.plantuml.sprite.SpriteMonochrome ySymetric()
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome $r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, i12, $i13, $i14, i15, i16, i17, i18;

        r1 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $r0 = new net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $i2 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i1 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $i0 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        specialinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: void <init>(int,int,int)>($i2, $i1, $i0);

        i15 = 0;

     label1:
        $i3 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i15 >= $i3 goto label4;

        i16 = 0;

     label2:
        $i13 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i16 >= $i13 goto label3;

        $i14 = virtualinvoke r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i15, i16);

        virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: void setGray(int,int,int)>(i15, i16, $i14);

        i16 = i16 + 1;

        goto label2;

     label3:
        i15 = i15 + 1;

        goto label1;

     label4:
        i17 = 0;

     label5:
        $i4 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i17 >= $i4 goto label8;

        i18 = 0;

     label6:
        $i5 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $i6 = $i5 / 2;

        if i18 >= $i6 goto label7;

        $i7 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $i8 = $i7 - 1;

        i9 = $i8 - i18;

        $i10 = virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i17, i18);

        $i11 = virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i17, i9);

        i12 = $i10 ^ $i11;

        virtualinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: void setGray(int,int,int)>(i17, i9, i12);

        i18 = i18 + 1;

        goto label6;

     label7:
        i17 = i17 + 1;

        goto label5;

     label8:
        return $r0;
    }

    public void setGray(int, int, int)
    {
        int i0, $i1, i2, $i3, i4, $i5, $i6;
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        int[][] $r8;
        int[] $r9;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i4 := @parameter2: int;

        if i0 < 0 goto label1;

        $i1 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i0 < $i1 goto label2;

     label1:
        return;

     label2:
        if i2 < 0 goto label3;

        $i3 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i2 < $i3 goto label4;

     label3:
        return;

     label4:
        if i4 < 0 goto label5;

        $i6 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        if i4 < $i6 goto label6;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("level=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" grayLevel=");

        $i5 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label6:
        $r8 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r9 = $r8[i2];

        $r9[i0] = i4;

        return;
    }

    public int getGray(int, int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, $i6;
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0;
        int[][] $r1;
        int[] $r2;
        java.lang.IllegalArgumentException $r3, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r9, $r16;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i0 < $i1 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" width=");

        $i6 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label1:
        $i3 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i2 < $i3 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("y=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" height=");

        $i5 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r1 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r2 = $r1[i2];

        $i4 = $r2[i0];

        return $i4;
    }

    public int getHeight()
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $i0 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        return $i0;
    }

    public int getWidth()
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        $i0 = r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        return $i0;
    }

    public net.sourceforge.plantuml.ugraphic.UImage toUImage(net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r0, $r1, $r2, $r3;
        net.sourceforge.plantuml.sprite.SpriteMonochrome r4;
        net.sourceforge.plantuml.ugraphic.UImage $r7;
        net.sourceforge.plantuml.ugraphic.PixelImage $r8;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9;
        int[][] $r10;
        int[] $r11;
        double $d0, $d1, $d2, d3;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r12;
        java.awt.Color r13;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.color.HColor r14, r15;
        java.awt.image.BufferedImage $r16;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient $r17;

        r4 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r14 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r15 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        if r14 == null goto label1;

        $z1 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: boolean isTransparent(net.sourceforge.plantuml.ugraphic.color.HColor)>(r14);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple WHITE>;

        $r0 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        r14 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: net.sourceforge.plantuml.ugraphic.color.HColor withDark(net.sourceforge.plantuml.ugraphic.color.HColor)>($r0);

     label2:
        if r15 == null goto label3;

        $z0 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: boolean isTransparent(net.sourceforge.plantuml.ugraphic.color.HColor)>(r15);

        if $z0 == 0 goto label4;

     label3:
        $r3 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        $r2 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple WHITE>;

        r15 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: net.sourceforge.plantuml.ugraphic.color.HColor withDark(net.sourceforge.plantuml.ugraphic.color.HColor)>($r2);

     label4:
        $r16 = new java.awt.image.BufferedImage;

        $i5 = r4.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i6 = r4.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        specialinvoke $r16.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i5, $i6, 1);

        $r17 = new net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        specialinvoke $r17.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,char)>(r14, r15, 0);

        i7 = 0;

     label5:
        $i8 = r4.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i7 >= $i8 goto label8;

        i9 = 0;

     label6:
        $i0 = r4.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i9 >= $i0 goto label7;

        $r10 = r4.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r11 = $r10[i9];

        $i1 = $r11[i7];

        $d0 = (double) $i1;

        $d2 = 1.0 * $d0;

        $i2 = r4.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        $i3 = $i2 - 1;

        $d1 = (double) $i3;

        d3 = $d2 / $d1;

        r13 = virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: java.awt.Color getColor(net.sourceforge.plantuml.ugraphic.color.ColorMapper,double)>(r12, d3);

        $i4 = virtualinvoke r13.<java.awt.Color: int getRGB()>();

        virtualinvoke $r16.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(i7, i9, $i4);

        i9 = i9 + 1;

        goto label6;

     label7:
        i7 = i7 + 1;

        goto label5;

     label8:
        $r7 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r8 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r9 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r16, $r9);

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r8);

        return $r7;
    }

    private net.sourceforge.plantuml.ugraphic.UImage special(net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.color.HColorGradient, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        java.awt.image.BufferedImage $r0;
        net.sourceforge.plantuml.sprite.SpriteMonochrome r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        net.sourceforge.plantuml.ugraphic.UImage $r3;
        net.sourceforge.plantuml.ugraphic.PixelImage $r4;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r5;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r6;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient r7, $r11;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        java.awt.Color $r9, r16;
        net.sourceforge.plantuml.ugraphic.color.HColor r12;
        int[][] $r14;
        int[] $r15;

        r1 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r7 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        r12 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r0 = new java.awt.image.BufferedImage;

        $i1 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        $i0 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i1, $i0, 1);

        i9 = 0;

     label1:
        $i2 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int width>;

        if i9 >= $i2 goto label4;

        i10 = 0;

     label2:
        $i3 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        if i10 >= $i3 goto label3;

        $r6 = new net.sourceforge.plantuml.ugraphic.color.HColorSimple;

        $d0 = (double) i10;

        $d2 = 1.0 * $d0;

        $i4 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int height>;

        $d1 = (double) $i4;

        $d3 = $d2 / $d1;

        $r9 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: java.awt.Color getColor(net.sourceforge.plantuml.ugraphic.color.ColorMapper,double)>(r8, $d3);

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: void <init>(java.awt.Color,boolean)>($r9, 0);

        $r11 = new net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,char)>($r6, r12, 0);

        $r14 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int[][] gray>;

        $r15 = $r14[i10];

        $i5 = $r15[i9];

        $d4 = (double) $i5;

        $d6 = 1.0 * $d4;

        $i6 = r1.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int grayLevel>;

        $i7 = $i6 - 1;

        $d5 = (double) $i7;

        d7 = $d6 / $d5;

        r16 = virtualinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: java.awt.Color getColor(net.sourceforge.plantuml.ugraphic.color.ColorMapper,double)>(r8, d7);

        $i8 = virtualinvoke r16.<java.awt.Color: int getRGB()>();

        virtualinvoke $r0.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(i9, i10, $i8);

        i10 = i10 + 1;

        goto label2;

     label3:
        i9 = i9 + 1;

        goto label1;

     label4:
        $r3 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r4 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r5 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r0, $r5);

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r4);

        return $r3;
    }

    public net.sourceforge.plantuml.graphic.TextBlock asTextBlock(net.sourceforge.plantuml.ugraphic.color.HColor, double)
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome$1 $r0;
        net.sourceforge.plantuml.sprite.SpriteMonochrome r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        double d0;

        r1 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        d0 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.sprite.SpriteMonochrome$1;

        specialinvoke $r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome$1: void <init>(net.sourceforge.plantuml.sprite.SpriteMonochrome,net.sourceforge.plantuml.ugraphic.color.HColor,double)>(r1, r2, d0);

        return $r0;
    }

    public void exportSprite1(java.io.OutputStream) throws java.io.IOException
    {
        net.sourceforge.plantuml.sprite.SpriteMonochrome r0;
        int $i0, $i1, i2, $i3, $i4, $i6, $i7, $i8, i9, i10, $i11;
        java.io.OutputStream r1;

        r0 := @this: net.sourceforge.plantuml.sprite.SpriteMonochrome;

        r1 := @parameter0: java.io.OutputStream;

        i9 = 0;

     label1:
        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getHeight()>();

        if i9 >= $i0 goto label6;

        i10 = 0;

     label2:
        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getWidth()>();

        if i10 >= $i1 goto label5;

        i2 = virtualinvoke r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i10, i9);

        $i3 = i9 + 1;

        $i4 = virtualinvoke r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getHeight()>();

        if $i3 >= $i4 goto label3;

        $i8 = i9 + 1;

        $i11 = virtualinvoke r0.<net.sourceforge.plantuml.sprite.SpriteMonochrome: int getGray(int,int)>(i10, $i8);

        goto label4;

     label3:
        $i11 = i2;

     label4:
        $i6 = i2 * 16;

        $i7 = $i6 + $i11;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i7);

        i10 = i10 + 1;

        goto label2;

     label5:
        i9 = i9 + 2;

        goto label1;

     label6:
        return;
    }
}
