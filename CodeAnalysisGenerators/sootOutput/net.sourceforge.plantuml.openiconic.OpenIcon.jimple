public class net.sourceforge.plantuml.openiconic.OpenIcon extends java.lang.Object
{
    private net.sourceforge.plantuml.openiconic.SvgPath svgPath;
    private java.util.List rawData;
    private final java.lang.String id;

    public static net.sourceforge.plantuml.openiconic.OpenIcon retrieve(java.lang.String)
    {
        java.lang.String r0;
        java.io.InputStream r1;
        net.sourceforge.plantuml.openiconic.OpenIcon $r2;
        java.io.IOException $r3;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.openiconic.OpenIcon: java.io.InputStream getResource(java.lang.String)>(r0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = new net.sourceforge.plantuml.openiconic.OpenIcon;

        specialinvoke $r2.<net.sourceforge.plantuml.openiconic.OpenIcon: void <init>(java.io.InputStream,java.lang.String)>(r1, r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void <init>(java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.openiconic.OpenIcon r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: net.sourceforge.plantuml.openiconic.OpenIcon;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <net.sourceforge.plantuml.openiconic.OpenIcon: java.io.InputStream getResource(java.lang.String)>(r1);

        specialinvoke r0.<net.sourceforge.plantuml.openiconic.OpenIcon: void <init>(java.io.InputStream,java.lang.String)>($r2, r1);

        return;
    }

    private static java.io.InputStream getResource(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String r2, $r5;
        java.io.InputStream $r6;

        r2 := @parameter0: java.lang.String;

        $r1 = class "Lnet/sourceforge/plantuml/openiconic/data/DummyIcon;";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".svg");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r5);

        return $r6;
    }

    private void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.openiconic.OpenIcon r0;
        java.util.ArrayList $r1;
        java.lang.String r2, $r12, $r15;
        java.io.BufferedReader $r3;
        java.io.InputStreamReader $r4;
        java.io.InputStream r5;
        java.util.List $r7, $r8, $r10;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.lang.IllegalStateException $r9;
        boolean $z0;
        net.sourceforge.plantuml.openiconic.SvgPath $r11;
        java.lang.Throwable $r13, $r14;

        r0 := @this: net.sourceforge.plantuml.openiconic.OpenIcon;

        r5 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData> = $r1;

        r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.lang.String id> = r2;

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r5);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

     label1:
        $r15 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r15 == null goto label2;

        $r10 = r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r15);

        $z0 = virtualinvoke $r15.<java.lang.String: boolean contains(java.lang.CharSequence)>("<path");

        if $z0 == 0 goto label1;

        i5 = virtualinvoke $r15.<java.lang.String: int indexOf(int)>(34);

        $i2 = i5 + 1;

        i3 = virtualinvoke $r15.<java.lang.String: int indexOf(int,int)>(34, $i2);

        $r11 = new net.sourceforge.plantuml.openiconic.SvgPath;

        $i4 = i5 + 1;

        $r12 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>($i4, i3);

        specialinvoke $r11.<net.sourceforge.plantuml.openiconic.SvgPath: void <init>(java.lang.String)>($r12);

        r0.<net.sourceforge.plantuml.openiconic.OpenIcon: net.sourceforge.plantuml.openiconic.SvgPath svgPath> = $r11;

        goto label1;

     label2:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

        goto label8;

     label3:
        $r14 := @caughtexception;

     label4:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

     label7:
        throw $r14;

     label8:
        $r7 = r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 == 3 goto label9;

        $r8 = r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i1 == 4 goto label9;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void saveCopy(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.PrintWriter r1;
        net.sourceforge.plantuml.openiconic.OpenIcon r2;
        java.util.List $r3, $r8, $r9;
        java.lang.Object $r4, $r10;
        java.lang.String $r5, $r7, $r11;
        net.sourceforge.plantuml.openiconic.SvgPath $r6;
        int $i0, $i1;
        java.lang.Throwable $r12, $r15;

        r2 := @this: net.sourceforge.plantuml.openiconic.OpenIcon;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.PrintWriter createPrintWriter()>();

     label1:
        $r3 = r2.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = r2.<net.sourceforge.plantuml.openiconic.OpenIcon: net.sourceforge.plantuml.openiconic.SvgPath svgPath>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.openiconic.SvgPath: java.lang.String toSvg()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r9 = r2.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        $r8 = r2.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i1);

        $r11 = (java.lang.String) $r10;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

     label2:
        if r1 == null goto label8;

        virtualinvoke r1.<java.io.PrintWriter: void close()>();

        goto label8;

     label3:
        $r15 := @caughtexception;

        if r1 == null goto label7;

     label4:
        virtualinvoke r1.<java.io.PrintWriter: void close()>();

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label7:
        throw $r15;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(double)
    {
        net.sourceforge.plantuml.openiconic.OpenIcon r0;
        java.util.List $r1, $r5;
        java.lang.Object $r2, $r6;
        java.lang.String $r3, r4, $r7, r8;
        net.sourceforge.plantuml.Dimension2DDouble $r9;
        int $i0, $i1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.openiconic.OpenIcon;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r2;

        r4 = specialinvoke r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.lang.String getNumber(java.lang.String,java.lang.String)>($r3, "width");

        $r5 = r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.util.List rawData>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (java.lang.String) $r6;

        r8 = specialinvoke r0.<net.sourceforge.plantuml.openiconic.OpenIcon: java.lang.String getNumber(java.lang.String,java.lang.String)>($r7, "height");

        $r9 = new net.sourceforge.plantuml.Dimension2DDouble;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        $d1 = (double) $i0;

        $d2 = $d1 * d0;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        $d3 = (double) $i1;

        $d4 = $d3 * d0;

        specialinvoke $r9.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d4);

        return $r9;
    }

    private java.lang.String getNumber(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int $i0, i1, $i2, i3, i4;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        net.sourceforge.plantuml.openiconic.OpenIcon r6;

        r6 := @this: net.sourceforge.plantuml.openiconic.OpenIcon;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i3 != -1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("\"", i3);

        if i4 != -1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $i0 = i4 + 1;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("\"", $i0);

        if i1 != -1 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label3:
        $i2 = i4 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, i1);

        return $r2;
    }

    public net.sourceforge.plantuml.graphic.TextBlock asTextBlock(net.sourceforge.plantuml.ugraphic.color.HColor, double)
    {
        net.sourceforge.plantuml.openiconic.OpenIcon$1 $r0;
        net.sourceforge.plantuml.openiconic.OpenIcon r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        double d0;

        r1 := @this: net.sourceforge.plantuml.openiconic.OpenIcon;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        d0 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.openiconic.OpenIcon$1;

        specialinvoke $r0.<net.sourceforge.plantuml.openiconic.OpenIcon$1: void <init>(net.sourceforge.plantuml.openiconic.OpenIcon,net.sourceforge.plantuml.ugraphic.color.HColor,double)>(r1, r2, d0);

        return $r0;
    }

    static net.sourceforge.plantuml.openiconic.SvgPath access$000(net.sourceforge.plantuml.openiconic.OpenIcon)
    {
        net.sourceforge.plantuml.openiconic.OpenIcon r0;
        net.sourceforge.plantuml.openiconic.SvgPath $r1;

        r0 := @parameter0: net.sourceforge.plantuml.openiconic.OpenIcon;

        $r1 = r0.<net.sourceforge.plantuml.openiconic.OpenIcon: net.sourceforge.plantuml.openiconic.SvgPath svgPath>;

        return $r1;
    }

    static net.sourceforge.plantuml.awt.geom.Dimension2D access$100(net.sourceforge.plantuml.openiconic.OpenIcon, double)
    {
        net.sourceforge.plantuml.openiconic.OpenIcon r0;
        double d0;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r1;

        r0 := @parameter0: net.sourceforge.plantuml.openiconic.OpenIcon;

        d0 := @parameter1: double;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.openiconic.OpenIcon: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(double)>(d0);

        return $r1;
    }
}
