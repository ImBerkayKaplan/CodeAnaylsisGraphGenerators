public final class net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal extends net.sourceforge.plantuml.skin.AbstractTextualComponent
{
    private final int cornersize;
    private final net.sourceforge.plantuml.graphic.SymbolContext symbolContext;

    public void <init>(net.sourceforge.plantuml.style.Style, net.sourceforge.plantuml.graphic.SymbolContext, net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal r0;
        net.sourceforge.plantuml.style.Style r1;
        net.sourceforge.plantuml.ISkinSimple r2;
        net.sourceforge.plantuml.LineBreakStrategy $r3;
        net.sourceforge.plantuml.cucadiagram.Display r4;
        net.sourceforge.plantuml.graphic.FontConfiguration r5;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r6;
        boolean $z0;
        net.sourceforge.plantuml.graphic.SymbolContext r7, $r10;
        net.sourceforge.plantuml.api.ThemeStyle $r8;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r9;

        r0 := @this: net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal;

        r1 := @parameter0: net.sourceforge.plantuml.style.Style;

        r7 := @parameter1: net.sourceforge.plantuml.graphic.SymbolContext;

        r5 := @parameter2: net.sourceforge.plantuml.graphic.FontConfiguration;

        r4 := @parameter3: net.sourceforge.plantuml.cucadiagram.Display;

        r2 := @parameter4: net.sourceforge.plantuml.ISkinSimple;

        r6 := @parameter5: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r3 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinSimple: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        specialinvoke r0.<net.sourceforge.plantuml.skin.AbstractTextualComponent: void <init>(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.LineBreakStrategy,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,int,int,int,net.sourceforge.plantuml.ISkinSimple,boolean,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor)>(r1, $r3, r4, r5, r6, 12, 12, 4, r2, 0, null, null);

        r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: int cornersize> = 10;

        r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: int cornersize> = 10;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinSimple: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.SymbolContext getSymbolContext(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r8, $r9);

        r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: net.sourceforge.plantuml.graphic.SymbolContext symbolContext> = $r10;

        goto label2;

     label1:
        r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: net.sourceforge.plantuml.graphic.SymbolContext symbolContext> = r7;

     label2:
        return;
    }

    public final double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2, d3;

        r0 := @this: net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getPaddingX()>();

        $d2 = 2.0 * $d1;

        d3 = $d0 + $d2;

        return d3;
    }

    public final double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getPaddingY()>();

        $d2 = 2.0 * $d1;

        $d3 = $d0 + $d2;

        return $d3;
    }

    public double getPaddingX()
    {
        net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal r0;

        r0 := @this: net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal;

        return 5.0;
    }

    public double getPaddingY()
    {
        net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal r0;

        r0 := @this: net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal;

        return 5.0;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal r1;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        net.sourceforge.plantuml.skin.Area r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3, $r4, $r13;
        byte $b1, $b2;
        net.sourceforge.plantuml.ugraphic.UPolygon $r5;
        net.sourceforge.plantuml.graphic.SymbolContext $r7, $r8;
        net.sourceforge.plantuml.ugraphic.UStroke $r9;
        net.sourceforge.plantuml.graphic.TextBlock $r10;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11;
        net.sourceforge.plantuml.ugraphic.UGraphic $r12, r15, r16, r17;
        java.lang.IllegalArgumentException $r14;

        r1 := @this: net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal;

        r15 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r2 := @parameter1: net.sourceforge.plantuml.skin.Area;

        r0 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        i0 = (int) $d0;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        i9 = (int) $d1;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $d2 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d4 = $d2 - $d3;

        $b1 = d4 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label1:
        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $d5 = virtualinvoke $r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $b2 = $d5 cmpl $d6;

        if $b2 <= 0 goto label2;

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $d19 = virtualinvoke $r13.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d20 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: double getPaddingX()>();

        $d21 = 2.0 * $d20;

        $d22 = $d19 - $d21;

        i9 = (int) $d22;

     label2:
        $r5 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(10.0, 0.0);

        $i3 = i9 - 10;

        $d7 = (double) $i3;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d7, 0.0);

        $d9 = (double) i9;

        $i4 = i0 / 2;

        $d8 = (double) $i4;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d9, $d8);

        $i5 = i9 - 10;

        $d11 = (double) $i5;

        $d10 = (double) i0;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d11, $d10);

        $d12 = (double) i0;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(10.0, $d12);

        $i6 = i0 / 2;

        $d13 = (double) $i6;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, $d13);

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(10.0, 0.0);

        $r7 = r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        r16 = virtualinvoke $r7.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UGraphic)>(r15);

        $r8 = r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d14 = virtualinvoke $r8.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void setDeltaShadow(double)>($d14);

        interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        $r9 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>()>();

        r17 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: net.sourceforge.plantuml.graphic.TextBlock getTextBlock()>();

        $r11 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $i7 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: int getMarginX1()>();

        $d16 = (double) $i7;

        $d15 = d4 / 2.0;

        $d17 = $d16 + $d15;

        $i8 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal: int getMarginY()>();

        $d18 = (double) $i8;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d17, $d18);

        $r12 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        interfaceinvoke $r10.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r12);

        return;
    }
}
