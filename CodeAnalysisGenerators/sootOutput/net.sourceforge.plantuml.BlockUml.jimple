public class net.sourceforge.plantuml.BlockUml extends java.lang.Object
{
    private final java.util.List rawSource;
    private final java.util.List data;
    private java.util.List debug;
    private net.sourceforge.plantuml.core.Diagram system;
    private final net.sourceforge.plantuml.preproc.Defines localDefines;
    private final net.sourceforge.plantuml.ISkinSimple skinParam;
    private final java.util.Set included;
    private final net.sourceforge.plantuml.api.ThemeStyle style;
    private boolean preprocessorError;

    public java.util.Set getIncluded()
    {
        net.sourceforge.plantuml.BlockUml r0;
        java.util.Set $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        $r1 = r0.<net.sourceforge.plantuml.BlockUml: java.util.Set included>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    transient void <init>(net.sourceforge.plantuml.api.ThemeStyle, java.lang.String[])
    {
        net.sourceforge.plantuml.BlockUml r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        java.lang.String[] r2;
        java.util.List $r3;
        net.sourceforge.plantuml.preproc.Defines $r4;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: java.lang.String[];

        $r3 = staticinvoke <net.sourceforge.plantuml.BlockUml: java.util.List convert(java.lang.String[])>(r2);

        $r4 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        specialinvoke r0.<net.sourceforge.plantuml.BlockUml: void <init>(net.sourceforge.plantuml.api.ThemeStyle,java.util.List,net.sourceforge.plantuml.preproc.Defines,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.preproc2.PreprocessorModeSet,java.nio.charset.Charset)>(r1, $r3, $r4, null, null, null);

        return;
    }

    public java.lang.String getEncodedUrl() throws java.io.IOException
    {
        net.sourceforge.plantuml.code.Transcoder r0;
        net.sourceforge.plantuml.BlockUml r1;
        net.sourceforge.plantuml.core.Diagram $r2;
        net.sourceforge.plantuml.core.UmlSource $r3;
        java.lang.String r4, r5;

        r1 := @this: net.sourceforge.plantuml.BlockUml;

        r0 = staticinvoke <net.sourceforge.plantuml.code.TranscoderUtil: net.sourceforge.plantuml.code.Transcoder getDefaultTranscoder()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.UmlSource getSource()>();

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.core.UmlSource: java.lang.String getPlainString()>();

        r5 = interfaceinvoke r0.<net.sourceforge.plantuml.code.Transcoder: java.lang.String encode(java.lang.String)>(r4);

        return r5;
    }

    public java.lang.String getFlashData()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.BlockUml r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.String $r5, $r8;
        java.lang.Object $r6;
        net.sourceforge.plantuml.StringLocated r7;

        r2 := @this: net.sourceforge.plantuml.BlockUml;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.StringLocated) $r6;

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(13);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static transient java.util.List convert(java.lang.String[])
    {
        java.lang.String[] r0;
        java.util.List $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <net.sourceforge.plantuml.BlockUml: java.util.List convert(java.util.List)>($r1);

        return $r2;
    }

    public static java.util.List convert(java.util.List)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.LineLocationImpl $r2, r8;
        java.util.List r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String r6;
        net.sourceforge.plantuml.StringLocated $r7;

        r3 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new net.sourceforge.plantuml.LineLocationImpl;

        specialinvoke $r2.<net.sourceforge.plantuml.LineLocationImpl: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>("block", null);

        r8 = $r2;

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        r8 = virtualinvoke r8.<net.sourceforge.plantuml.LineLocationImpl: net.sourceforge.plantuml.LineLocationImpl oneLineRead()>();

        $r7 = new net.sourceforge.plantuml.StringLocated;

        specialinvoke $r7.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>(r6, r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r0;
    }

    public void <init>(java.util.List, net.sourceforge.plantuml.preproc.Defines, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.preproc2.PreprocessorModeSet)
    {
        net.sourceforge.plantuml.BlockUml r0;
        java.util.List r1;
        net.sourceforge.plantuml.preproc.Defines r2;
        net.sourceforge.plantuml.ISkinSimple r3;
        net.sourceforge.plantuml.preproc2.PreprocessorModeSet r4;
        net.sourceforge.plantuml.api.ThemeStyle $r5;
        java.lang.String $r6;
        java.nio.charset.Charset $r7;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: net.sourceforge.plantuml.preproc.Defines;

        r3 := @parameter2: net.sourceforge.plantuml.ISkinSimple;

        r4 := @parameter3: net.sourceforge.plantuml.preproc2.PreprocessorModeSet;

        $r5 = <net.sourceforge.plantuml.api.ThemeStyle: net.sourceforge.plantuml.api.ThemeStyle LIGHT_REGULAR>;

        $r6 = interfaceinvoke r4.<net.sourceforge.plantuml.preproc2.PreprocessorModeSet: java.lang.String getCharset()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.utils.CharsetUtils: java.nio.charset.Charset charsetOrDefault(java.lang.String)>($r6);

        specialinvoke r0.<net.sourceforge.plantuml.BlockUml: void <init>(net.sourceforge.plantuml.api.ThemeStyle,java.util.List,net.sourceforge.plantuml.preproc.Defines,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.preproc2.PreprocessorModeSet,java.nio.charset.Charset)>($r5, r1, r2, r3, r4, $r7);

        return;
    }

    public void <init>(net.sourceforge.plantuml.api.ThemeStyle, java.util.List, net.sourceforge.plantuml.preproc.Defines, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.preproc2.PreprocessorModeSet, java.nio.charset.Charset)
    {
        net.sourceforge.plantuml.BlockUml r0;
        java.util.HashSet $r1;
        net.sourceforge.plantuml.api.ThemeStyle r2;
        java.util.ArrayList $r3, $r21;
        java.util.List r4, $r19, $r20;
        net.sourceforge.plantuml.preproc.Defines r5;
        net.sourceforge.plantuml.ISkinSimple r6;
        java.lang.Object $r7;
        net.sourceforge.plantuml.StringLocated $r8, $r9;
        java.lang.String r10;
        boolean $z0, $z2;
        net.sourceforge.plantuml.preproc2.PreprocessorModeSet r11;
        net.sourceforge.plantuml.tim.TimLoader $r12;
        net.sourceforge.plantuml.preproc.ImportedFiles $r13;
        java.nio.charset.Charset r14;
        net.sourceforge.plantuml.DefinitionsContainer $r15;
        java.util.Set $r17, $r18;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        r2 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r4 := @parameter1: java.util.List;

        r5 := @parameter2: net.sourceforge.plantuml.preproc.Defines;

        r6 := @parameter3: net.sourceforge.plantuml.ISkinSimple;

        r11 := @parameter4: net.sourceforge.plantuml.preproc2.PreprocessorModeSet;

        r14 := @parameter5: java.nio.charset.Charset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.BlockUml: java.util.Set included> = $r1;

        r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.api.ThemeStyle style> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r4);

        r0.<net.sourceforge.plantuml.BlockUml: java.util.List rawSource> = $r3;

        r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.preproc.Defines localDefines> = r5;

        r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.ISkinSimple skinParam> = r6;

        $r7 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (net.sourceforge.plantuml.StringLocated) $r7;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        r10 = virtualinvoke $r9.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean startsWithSymbolAnd(java.lang.String,java.lang.String)>("start", r10);

        if $z0 != 0 goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r22;

     label1:
        if r11 != null goto label2;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>(java.util.Collection)>(r4);

        r0.<net.sourceforge.plantuml.BlockUml: java.util.List data> = $r21;

        goto label3;

     label2:
        $r12 = new net.sourceforge.plantuml.tim.TimLoader;

        $r13 = interfaceinvoke r11.<net.sourceforge.plantuml.preproc2.PreprocessorModeSet: net.sourceforge.plantuml.preproc.ImportedFiles getImportedFiles()>();

        $r15 = (net.sourceforge.plantuml.DefinitionsContainer) r11;

        specialinvoke $r12.<net.sourceforge.plantuml.tim.TimLoader: void <init>(net.sourceforge.plantuml.preproc.ImportedFiles,net.sourceforge.plantuml.preproc.Defines,java.nio.charset.Charset,net.sourceforge.plantuml.DefinitionsContainer)>($r13, r5, r14, $r15);

        $r17 = r0.<net.sourceforge.plantuml.BlockUml: java.util.Set included>;

        $r18 = virtualinvoke $r12.<net.sourceforge.plantuml.tim.TimLoader: java.util.Set load(java.util.List)>(r4);

        interfaceinvoke $r17.<java.util.Set: boolean addAll(java.util.Collection)>($r18);

        $r19 = virtualinvoke $r12.<net.sourceforge.plantuml.tim.TimLoader: java.util.List getResultList()>();

        r0.<net.sourceforge.plantuml.BlockUml: java.util.List data> = $r19;

        $r20 = virtualinvoke $r12.<net.sourceforge.plantuml.tim.TimLoader: java.util.List getDebug()>();

        r0.<net.sourceforge.plantuml.BlockUml: java.util.List debug> = $r20;

        $z2 = virtualinvoke $r12.<net.sourceforge.plantuml.tim.TimLoader: boolean isPreprocessorError()>();

        r0.<net.sourceforge.plantuml.BlockUml: boolean preprocessorError> = $z2;

     label3:
        return;
    }

    public java.lang.String getFileOrDirname()
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        boolean $z0, z1, $z2;
        net.sourceforge.plantuml.BlockUml r1;
        java.util.List $r2;
        net.sourceforge.plantuml.command.regex.Pattern2 $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.StringLocated $r5;
        java.lang.String $r6, $r7, $r9, $r10, r11, r12;
        net.sourceforge.plantuml.command.regex.Matcher2 r8;
        int i0, $i1, $i3, i4, $i5;
        char c2;

        r1 := @this: net.sourceforge.plantuml.BlockUml;

        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: boolean isWord()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = <net.sourceforge.plantuml.utils.StartUtils: net.sourceforge.plantuml.command.regex.Pattern2 patternFilename>;

        $r2 = r1.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (net.sourceforge.plantuml.StringLocated) $r4;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r6);

        r8 = virtualinvoke $r3.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>($r7);

        z1 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if z1 != 0 goto label2;

        return null;

     label2:
        r11 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        i0 = virtualinvoke r11.<java.lang.String: int indexOf(int)>(44);

        if i0 == -1 goto label3;

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label3:
        i4 = 0;

     label4:
        $i5 = virtualinvoke r11.<java.lang.String: int length()>();

        if i4 >= $i5 goto label6;

        c2 = virtualinvoke r11.<java.lang.String: char charAt(int)>(i4);

        $r10 = "<>|";

        $i3 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(c2);

        if $i3 == -1 goto label5;

        return null;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        $z2 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("file://");

        if $z2 == 0 goto label7;

        $r9 = "file://";

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i1);

     label7:
        r12 = virtualinvoke r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.\\w\\w\\w$", "");

        return r12;
    }

    public net.sourceforge.plantuml.core.Diagram getDiagram()
    {
        net.sourceforge.plantuml.BlockUml r0;
        net.sourceforge.plantuml.core.Diagram $r1, $r7, $r11;
        boolean $z0;
        net.sourceforge.plantuml.PSystemBuilder $r2;
        java.util.List $r3, $r4, $r9, $r10;
        net.sourceforge.plantuml.ISkinSimple $r5;
        net.sourceforge.plantuml.api.ThemeStyle $r6;
        net.sourceforge.plantuml.error.PSystemErrorPreprocessor $r8;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        $r1 = r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram system>;

        if $r1 != null goto label2;

        $z0 = r0.<net.sourceforge.plantuml.BlockUml: boolean preprocessorError>;

        if $z0 == 0 goto label1;

        $r8 = new net.sourceforge.plantuml.error.PSystemErrorPreprocessor;

        $r10 = r0.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        $r9 = r0.<net.sourceforge.plantuml.BlockUml: java.util.List debug>;

        specialinvoke $r8.<net.sourceforge.plantuml.error.PSystemErrorPreprocessor: void <init>(java.util.List,java.util.List)>($r10, $r9);

        r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram system> = $r8;

        goto label2;

     label1:
        $r2 = new net.sourceforge.plantuml.PSystemBuilder;

        specialinvoke $r2.<net.sourceforge.plantuml.PSystemBuilder: void <init>()>();

        $r6 = r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.api.ThemeStyle style>;

        $r5 = r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.ISkinSimple skinParam>;

        $r4 = r0.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        $r3 = r0.<net.sourceforge.plantuml.BlockUml: java.util.List rawSource>;

        $r7 = virtualinvoke $r2.<net.sourceforge.plantuml.PSystemBuilder: net.sourceforge.plantuml.core.Diagram createPSystem(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ISkinSimple,java.util.List,java.util.List)>($r6, $r5, $r4, $r3);

        r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram system> = $r7;

     label2:
        $r11 = r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram system>;

        return $r11;
    }

    public final java.util.List getData()
    {
        net.sourceforge.plantuml.BlockUml r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        $r1 = r0.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        return $r1;
    }

    private java.lang.String internalEtag()
    {
        net.sourceforge.plantuml.code.AsciiEncoder $r0;
        java.security.MessageDigest r1;
        net.sourceforge.plantuml.BlockUml r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.String $r4, $r7;
        java.lang.Object $r5;
        net.sourceforge.plantuml.StringLocated r6;
        java.nio.charset.Charset $r8;
        byte[] $r9, r13;
        java.lang.Exception $r10;
        java.util.Iterator r12;

        r2 := @this: net.sourceforge.plantuml.BlockUml;

     label1:
        $r0 = new net.sourceforge.plantuml.code.AsciiEncoder;

        specialinvoke $r0.<net.sourceforge.plantuml.code.AsciiEncoder: void <init>()>();

        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r3 = r2.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        r12 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.StringLocated) $r5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>($r9);

        goto label2;

     label3:
        r13 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

        $r4 = virtualinvoke $r0.<net.sourceforge.plantuml.code.AsciiEncoder: java.lang.String encode(byte[])>(r13);

     label4:
        return $r4;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        return "NOETAG";

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public java.lang.String etag()
    {
        java.lang.StringBuilder $r0, $r2, $r5;
        java.lang.String $r1, $r4, $r6;
        net.sourceforge.plantuml.BlockUml r3;

        r3 := @this: net.sourceforge.plantuml.BlockUml;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String etag()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = specialinvoke r3.<net.sourceforge.plantuml.BlockUml: java.lang.String internalEtag()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public long lastModified()
    {
        long $l0, $l1, $l2, $l3, $l4, $l6, $l7, $l8, $l9;
        int $i5;
        net.sourceforge.plantuml.BlockUml r0;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        $l0 = staticinvoke <net.sourceforge.plantuml.version.Version: long compileTime()>();

        $l1 = $l0 / 1000L;

        $l2 = $l1 / 60L;

        $l3 = $l2 * 1000L;

        $l4 = $l3 * 60L;

        $i5 = staticinvoke <net.sourceforge.plantuml.version.Version: int beta()>();

        $l6 = (long) $i5;

        $l7 = $l6 * 1000L;

        $l8 = $l7 * 3600L;

        $l9 = $l4 + $l8;

        return $l9;
    }

    public boolean isStartDef(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String r2, r5, $r10;
        net.sourceforge.plantuml.BlockUml r6;
        java.util.List $r7;
        java.lang.Object $r8;
        net.sourceforge.plantuml.StringLocated $r9;
        boolean $z0;

        r6 := @this: net.sourceforge.plantuml.BlockUml;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@startdef(id=");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r6.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (net.sourceforge.plantuml.StringLocated) $r8;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        return $z0;
    }

    public java.util.List getDefinition(boolean)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.BlockUml r2;
        java.util.List $r3, $r5, $r6, $r7;
        java.util.Iterator r4;
        boolean $z0, z1;
        int $i0, $i1;
        java.lang.Object $r8;
        net.sourceforge.plantuml.StringLocated r9;
        java.lang.String $r10;

        r2 := @this: net.sourceforge.plantuml.BlockUml;

        z1 := @parameter0: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.BlockUml: java.util.List data>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.StringLocated) $r8;

        $r10 = virtualinvoke r9.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        if z1 == 0 goto label3;

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r7;

     label3:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.List subList(int,int)>(1, $i1);

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r5);

        return $r6;
    }

    public net.sourceforge.plantuml.preproc.Defines getLocalDefines()
    {
        net.sourceforge.plantuml.BlockUml r0;
        net.sourceforge.plantuml.preproc.Defines $r1;

        r0 := @this: net.sourceforge.plantuml.BlockUml;

        $r1 = r0.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.preproc.Defines localDefines>;

        return $r1;
    }
}
