public class net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard extends net.sourceforge.plantuml.xmi.XmiSequenceDiagram
{
    private java.util.Stack covered;
    private java.util.HashMap activeParticipants;

    public void <init>(net.sourceforge.plantuml.sequencediagram.SequenceDiagram, org.w3c.dom.Document)
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r1;
        org.w3c.dom.Document r2;
        java.util.Stack $r3, $r5;
        java.util.HashSet $r4;
        java.util.HashMap $r7;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter1: org.w3c.dom.Document;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagram: void <init>(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,org.w3c.dom.Document)>(r1, r2);

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.Stack covered> = $r3;

        $r5 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.Stack covered>;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        virtualinvoke $r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.HashMap activeParticipants> = $r7;

        return;
    }

    public void build()
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        java.lang.String[][] $r1, $r28;
        java.lang.String[] $r2, $r3, $r4, $r5, $r29;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram $r6, $r11, $r14, $r17, $r19;
        org.w3c.dom.Document $r7;
        java.lang.String $r8, $r31;
        org.w3c.dom.Element $r9, $r12, $r15, $r32;
        org.w3c.dom.Node $r10, r13, r36;
        java.util.Collection $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r20;
        java.lang.Object $r21, $r27;
        net.sourceforge.plantuml.sequencediagram.Event r22;
        net.sourceforge.plantuml.sequencediagram.Grouping $r23;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r24;
        net.sourceforge.plantuml.sequencediagram.LifeEvent $r25;
        net.sourceforge.plantuml.sequencediagram.Note $r26;
        net.sourceforge.plantuml.cucadiagram.Display $r30;
        java.util.Iterator r34, r37;
        net.sourceforge.plantuml.sequencediagram.Participant r35;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        $r7 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Document document>;

        $r1 = newarray (java.lang.String[])[4];

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "xmlns:uml";

        $r2[1] = "http://www.omg.org/spec/UML/20110701";

        $r1[0] = $r2;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "xmlns:xmi";

        $r3[1] = "http://schema.omg.org/spec/XMI/2.1";

        $r1[1] = $r3;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "xmi:version";

        $r4[1] = "2.1";

        $r1[2] = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "xmi:id";

        $r6 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: net.sourceforge.plantuml.sequencediagram.SequenceDiagram diagram>;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("uml:Model", $r6);

        $r5[1] = $r8;

        $r1[3] = $r5;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.String,java.lang.String[][])>("uml:Model", $r1);

        $r10 = interfaceinvoke $r7.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r9);

        $r11 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: net.sourceforge.plantuml.sequencediagram.SequenceDiagram diagram>;

        $r12 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>($r11, "packagedElement", "Interaction");

        r13 = interfaceinvoke $r10.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        $r14 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: net.sourceforge.plantuml.sequencediagram.SequenceDiagram diagram>;

        $r15 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>($r14, "nestedClassifier", "Collaboration");

        interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r15);

        $r17 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: net.sourceforge.plantuml.sequencediagram.SequenceDiagram diagram>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Collection participants()>();

        r34 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r27 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (net.sourceforge.plantuml.sequencediagram.Participant) $r27;

        $r28 = newarray (java.lang.String[])[1];

        $r29 = newarray (java.lang.String)[2];

        $r29[0] = "name";

        $r30 = virtualinvoke r35.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.cucadiagram.Display getDisplay(boolean)>(0);

        $r31 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getDisplayString(net.sourceforge.plantuml.cucadiagram.Display)>($r30);

        $r29[1] = $r31;

        $r28[0] = $r29;

        $r32 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.Object,java.lang.String,java.lang.String[][])>(r35, "lifeline", $r28);

        interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r32);

        goto label1;

     label2:
        r36 = r13;

        $r19 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: net.sourceforge.plantuml.sequencediagram.SequenceDiagram diagram>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events()>();

        r37 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r21 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r22 = (net.sourceforge.plantuml.sequencediagram.Event) $r21;

        $z2 = r22 instanceof net.sourceforge.plantuml.sequencediagram.Note;

        if $z2 == 0 goto label4;

        $r26 = (net.sourceforge.plantuml.sequencediagram.Note) r22;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildNoteEvent(org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.Note)>(r13, $r26);

        goto label7;

     label4:
        $z3 = r22 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z3 == 0 goto label5;

        $r25 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r22;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildLifeEvent(org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.LifeEvent)>(r13, $r25);

        goto label7;

     label5:
        $z4 = r22 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z4 == 0 goto label6;

        $r24 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) r22;

        specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildMessage(org.w3c.dom.Node,org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.AbstractMessage)>(r13, r36, $r24);

        goto label7;

     label6:
        $z5 = r22 instanceof net.sourceforge.plantuml.sequencediagram.Grouping;

        if $z5 == 0 goto label7;

        $r23 = (net.sourceforge.plantuml.sequencediagram.Grouping) r22;

        r36 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Node buildGrouping(org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.Grouping)>(r36, $r23);

     label7:
        goto label3;

     label8:
        return;
    }

    private void buildLifeEvent(org.w3c.dom.Node, net.sourceforge.plantuml.sequencediagram.LifeEvent)
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r5;
        java.util.HashMap $r6, $r19, $r23;
        net.sourceforge.plantuml.sequencediagram.Participant $r7, $r14, $r20, $r24;
        java.lang.Object $r8, $r10, $r25;
        java.util.Stack $r9, $r21, $r26;
        org.w3c.dom.Element $r11, r13;
        java.lang.String $r12, $r15, $r16;
        org.w3c.dom.Node r17;

        r5 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r17 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType getType()>();

        $r2 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType ACTIVATE>;

        if $r1 != $r2 goto label1;

        r13 = specialinvoke r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>(r0, "fragment", "BehaviorExecutionSpecification");

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r15 = virtualinvoke r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r14);

        interfaceinvoke r13.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("covered", $r15);

        $r16 = specialinvoke r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getLifeEventOccurrenceId(net.sourceforge.plantuml.sequencediagram.LifeEvent)>(r0);

        interfaceinvoke r13.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("start", $r16);

        interfaceinvoke r17.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r13);

        $r19 = r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.HashMap activeParticipants>;

        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r21 = new java.util.Stack;

        specialinvoke $r21.<java.util.Stack: void <init>()>();

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r23 = r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.HashMap activeParticipants>;

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r25 = virtualinvoke $r23.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r24);

        $r26 = (java.util.Stack) $r25;

        virtualinvoke $r26.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r13);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType getType()>();

        $r4 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DEACTIVATE>;

        if $r3 != $r4 goto label2;

        $r6 = r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.HashMap activeParticipants>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.util.Stack) $r8;

        $r10 = virtualinvoke $r9.<java.util.Stack: java.lang.Object pop()>();

        $r11 = (org.w3c.dom.Element) $r10;

        $r12 = specialinvoke r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getLifeEventOccurrenceId(net.sourceforge.plantuml.sequencediagram.LifeEvent)>(r0);

        interfaceinvoke $r11.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("finish", $r12);

     label2:
        return;
    }

    private net.sourceforge.plantuml.sequencediagram.Participant getReceiver(net.sourceforge.plantuml.sequencediagram.AbstractMessage)
    {
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.sequencediagram.MessageExo r1;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r2;
        java.lang.String $r3;
        net.sourceforge.plantuml.sequencediagram.Participant $r4, $r5;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r6;

        r6 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        $z0 = r0 instanceof net.sourceforge.plantuml.sequencediagram.Message;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        return $r5;

     label1:
        $z1 = r0 instanceof net.sourceforge.plantuml.sequencediagram.MessageExo;

        if $z1 == 0 goto label2;

        r1 = (net.sourceforge.plantuml.sequencediagram.MessageExo) r0;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.MessageExoType: java.lang.String toString()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("FROM_");

        if $z2 == 0 goto label2;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        return $r4;

     label2:
        return null;
    }

    private java.lang.String getLifeEventOccurrenceId(net.sourceforge.plantuml.sequencediagram.LifeEvent)
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.Participant $r1, $r4;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r2;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r3, $r5, $r7;
        java.lang.String $r6, $r8;

        r2 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.AbstractMessage getMessage()>();

        $r4 = specialinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: net.sourceforge.plantuml.sequencediagram.Participant getReceiver(net.sourceforge.plantuml.sequencediagram.AbstractMessage)>($r3);

        if $r1 != $r4 goto label1;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.AbstractMessage getMessage()>();

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("receiveEvent", $r7);

        return $r8;

     label1:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.AbstractMessage getMessage()>();

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("sendEvent", $r5);

        return $r6;
    }

    private void buildMessage(org.w3c.dom.Node, org.w3c.dom.Node, net.sourceforge.plantuml.sequencediagram.AbstractMessage)
    {
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.Participant $r1, $r6, $r11, $r17;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r2;
        java.util.Stack $r3, $r8;
        java.lang.Object $r4, $r9;
        java.util.HashSet $r5, $r10;
        java.lang.String $r7, $r12;
        org.w3c.dom.Node r13, r14;
        net.sourceforge.plantuml.sequencediagram.MessageExo $r15;
        net.sourceforge.plantuml.sequencediagram.Message $r16;

        r2 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r13 := @parameter0: org.w3c.dom.Node;

        r14 := @parameter1: org.w3c.dom.Node;

        r0 := @parameter2: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        $z0 = r0 instanceof net.sourceforge.plantuml.sequencediagram.Message;

        if $z0 == 0 goto label1;

        $r16 = (net.sourceforge.plantuml.sequencediagram.Message) r0;

        specialinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildMessage(org.w3c.dom.Node,org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.Message)>(r13, r14, $r16);

        goto label2;

     label1:
        $z1 = r0 instanceof net.sourceforge.plantuml.sequencediagram.MessageExo;

        if $z1 == 0 goto label2;

        $r15 = (net.sourceforge.plantuml.sequencediagram.MessageExo) r0;

        specialinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildMessageExo(org.w3c.dom.Node,org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.MessageExo)>(r13, r14, $r15);

     label2:
        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        if $r17 == null goto label3;

        $r8 = r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.Stack covered>;

        $r9 = virtualinvoke $r8.<java.util.Stack: java.lang.Object peek()>();

        $r10 = (java.util.HashSet) $r9;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r11);

        virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>($r12);

     label3:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        if $r1 == null goto label4;

        $r3 = r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.Stack covered>;

        $r4 = virtualinvoke $r3.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (java.util.HashSet) $r4;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r6);

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r7);

     label4:
        return;
    }

    private void buildNoteEvent(org.w3c.dom.Node, net.sourceforge.plantuml.sequencediagram.Note)
    {
        java.util.HashSet $r0;
        net.sourceforge.plantuml.sequencediagram.Note r2;
        net.sourceforge.plantuml.sequencediagram.Participant $r3, $r4, $r7, $r9;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r5;
        org.w3c.dom.Node r6;
        java.lang.String $r8, $r10;

        r5 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r6 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        if $r3 == null goto label1;

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r10 = virtualinvoke r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r9);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r10);

     label1:
        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        if $r4 == null goto label2;

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        $r8 = virtualinvoke r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r7);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r8);

     label2:
        specialinvoke r5.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildNote(org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.Note,java.util.HashSet)>(r6, r2, $r0);

        return;
    }

    private java.util.HashSet getAnnotatedElements(net.sourceforge.plantuml.sequencediagram.Note, net.sourceforge.plantuml.sequencediagram.Message)
    {
        java.util.HashSet $r0;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r2;
        net.sourceforge.plantuml.sequencediagram.Message r3;
        net.sourceforge.plantuml.sequencediagram.Participant $r4, $r5, $r10, $r13;
        int i0, i1;
        net.sourceforge.plantuml.sequencediagram.Note r7;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r8, $r15;
        java.lang.String $r9, $r11, $r12, $r14;

        r2 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r7 := @parameter0: net.sourceforge.plantuml.sequencediagram.Note;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.Message;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        i0 = specialinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: int getParticipantNumber(net.sourceforge.plantuml.sequencediagram.Participant)>($r4);

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        i1 = specialinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: int getParticipantNumber(net.sourceforge.plantuml.sequencediagram.Participant)>($r5);

        if i0 >= i1 goto label1;

        $r15 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        goto label2;

     label1:
        $r15 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

     label2:
        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        if $r8 != $r15 goto label3;

        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("sendEvent", r3);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r12);

        $r13 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        $r14 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r13);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r14);

        goto label4;

     label3:
        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("receiveEvent", r3);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        $r11 = virtualinvoke r2.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r10);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r11);

     label4:
        return $r0;
    }

    private void buildNote(org.w3c.dom.Node, net.sourceforge.plantuml.sequencediagram.Note, java.util.HashSet)
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        net.sourceforge.plantuml.sequencediagram.Note r1;
        org.w3c.dom.Element r2, $r5;
        java.util.HashSet r3;
        boolean $z0;
        org.w3c.dom.Document $r4, $r7;
        org.w3c.dom.Node $r6, r12;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        java.lang.String $r9, $r14;
        org.w3c.dom.Text $r10;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r12 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        r3 := @parameter2: java.util.HashSet;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>(r1, "ownedComment", "Comment");

        $z0 = virtualinvoke r3.<java.util.HashSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r14 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" ", r3);

        interfaceinvoke r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("annotatedElement", $r14);

     label1:
        $r4 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Document document>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("body");

        $r6 = interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        $r7 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Document document>;

        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getDisplayString(net.sourceforge.plantuml.cucadiagram.Display)>($r8);

        $r10 = interfaceinvoke $r7.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r9);

        interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

        interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r2);

        return;
    }

    private int getParticipantNumber(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram $r1;
        java.util.Collection $r2;
        java.lang.Object[] $r3;
        java.util.List $r4;
        net.sourceforge.plantuml.sequencediagram.Participant r5;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r5 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r1 = r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: net.sourceforge.plantuml.sequencediagram.SequenceDiagram diagram>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Collection participants()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $i0 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>(r5);

        return $i0;
    }

    private void buildMessageExo(org.w3c.dom.Node, org.w3c.dom.Node, net.sourceforge.plantuml.sequencediagram.MessageExo)
    {
        net.sourceforge.plantuml.sequencediagram.MessageExo r0;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r1;
        java.lang.String $r2, r5, $r15, $r22, $r27;
        boolean $z0, $z3;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r4;
        org.w3c.dom.Node r6, $r8, r10;
        net.sourceforge.plantuml.sequencediagram.Participant $r7, $r21;
        org.w3c.dom.Element $r11, $r17;
        java.lang.String[][] $r12;
        java.lang.String[] $r13, $r16;
        net.sourceforge.plantuml.cucadiagram.Display $r14;
        java.util.HashSet $r19;
        java.util.List $r23;
        java.util.Iterator r24;
        java.lang.Object $r25;
        net.sourceforge.plantuml.sequencediagram.Note r26;

        r4 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r10 := @parameter0: org.w3c.dom.Node;

        r6 := @parameter1: org.w3c.dom.Node;

        r0 := @parameter2: net.sourceforge.plantuml.sequencediagram.MessageExo;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.MessageExoType getType()>();

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExoType: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("TO_");

        if $z0 == 0 goto label1;

        $r27 = "sendEvent";

        goto label2;

     label1:
        $r27 = "receiveEvent";

     label2:
        r5 = virtualinvoke r4.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>($r27, r0);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        $r8 = specialinvoke r4.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Node createMessageOccurrence(java.lang.Object,java.lang.String,net.sourceforge.plantuml.sequencediagram.Participant)>(r0, $r27, $r7);

        interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        $r11 = specialinvoke r4.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>(r0, "message", "Message");

        $r12 = newarray (java.lang.String[])[2];

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "name";

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $r15 = virtualinvoke r4.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getDisplayString(net.sourceforge.plantuml.cucadiagram.Display)>($r14);

        $r13[1] = $r15;

        $r12[0] = $r13;

        $r16 = newarray (java.lang.String)[2];

        $r16[0] = $r27;

        $r16[1] = r5;

        $r12[1] = $r16;

        $r17 = virtualinvoke r4.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element setAttributes(org.w3c.dom.Element,java.lang.String[][])>($r11, $r12);

        interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r17);

        $r19 = new java.util.HashSet;

        specialinvoke $r19.<java.util.HashSet: void <init>()>();

        virtualinvoke $r19.<java.util.HashSet: boolean add(java.lang.Object)>(r5);

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.MessageExo: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        $r22 = virtualinvoke r4.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", $r21);

        virtualinvoke $r19.<java.util.HashSet: boolean add(java.lang.Object)>($r22);

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.MessageExo: java.util.List getNoteOnMessages()>();

        r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (net.sourceforge.plantuml.sequencediagram.Note) $r25;

        specialinvoke r4.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildNote(org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.Note,java.util.HashSet)>(r10, r26, $r19);

        goto label3;

     label4:
        return;
    }

    private void buildMessage(org.w3c.dom.Node, org.w3c.dom.Node, net.sourceforge.plantuml.sequencediagram.Message)
    {
        org.w3c.dom.Node r0, $r4, $r7, r9;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r1;
        net.sourceforge.plantuml.sequencediagram.Message r2;
        net.sourceforge.plantuml.sequencediagram.Participant $r3, $r6;
        org.w3c.dom.Element $r10, $r19;
        java.lang.String[][] $r11;
        java.lang.String[] $r12, $r15, $r17;
        net.sourceforge.plantuml.cucadiagram.Display $r13;
        java.lang.String $r14, $r16, $r18;
        java.util.List $r21;
        java.util.Iterator r22;
        boolean $z0;
        java.lang.Object $r23;
        net.sourceforge.plantuml.sequencediagram.Note r24;
        java.util.HashSet $r25;

        r1 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r9 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: org.w3c.dom.Node;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.Message;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        $r4 = specialinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Node createMessageOccurrence(java.lang.Object,java.lang.String,net.sourceforge.plantuml.sequencediagram.Participant)>(r2, "sendEvent", $r3);

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        $r7 = specialinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Node createMessageOccurrence(java.lang.Object,java.lang.String,net.sourceforge.plantuml.sequencediagram.Participant)>(r2, "receiveEvent", $r6);

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

        $r10 = specialinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>(r2, "message", "Message");

        $r11 = newarray (java.lang.String[])[3];

        $r12 = newarray (java.lang.String)[2];

        $r12[0] = "name";

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $r14 = virtualinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getDisplayString(net.sourceforge.plantuml.cucadiagram.Display)>($r13);

        $r12[1] = $r14;

        $r11[0] = $r12;

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = "receiveEvent";

        $r16 = virtualinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("receiveEvent", r2);

        $r15[1] = $r16;

        $r11[1] = $r15;

        $r17 = newarray (java.lang.String)[2];

        $r17[0] = "sendEvent";

        $r18 = virtualinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("sendEvent", r2);

        $r17[1] = $r18;

        $r11[2] = $r17;

        $r19 = virtualinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element setAttributes(org.w3c.dom.Element,java.lang.String[][])>($r10, $r11);

        interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r19);

        $r21 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Message: java.util.List getNoteOnMessages()>();

        r22 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r23 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (net.sourceforge.plantuml.sequencediagram.Note) $r23;

        $r25 = specialinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.HashSet getAnnotatedElements(net.sourceforge.plantuml.sequencediagram.Note,net.sourceforge.plantuml.sequencediagram.Message)>(r24, r2);

        specialinvoke r1.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: void buildNote(org.w3c.dom.Node,net.sourceforge.plantuml.sequencediagram.Note,java.util.HashSet)>(r9, r24, $r25);

        goto label1;

     label2:
        return;
    }

    private org.w3c.dom.Node buildGrouping(org.w3c.dom.Node, net.sourceforge.plantuml.sequencediagram.Grouping)
    {
        net.sourceforge.plantuml.sequencediagram.Grouping r0;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r1, $r2, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r7;
        org.w3c.dom.Document $r8;
        java.util.Stack $r9, $r16, $r30;
        java.lang.Object $r10, $r17;
        java.util.HashSet r11, $r18, $r29;
        java.lang.String $r12, $r24;
        org.w3c.dom.Node $r13, $r19, $r20, $r22, $r27, r32;
        org.w3c.dom.NamedNodeMap $r14;
        org.w3c.dom.Element $r21, $r26, r33;
        org.w3c.dom.Attr r34;

        r7 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r32 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.Grouping;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Grouping: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r2 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        if $r1 != $r2 goto label1;

        r33 = specialinvoke r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>(r0, "fragment", "CombinedFragment");

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Grouping: java.lang.String getTitle()>();

        interfaceinvoke r33.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("interactionOperator", $r24);

        interfaceinvoke r32.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r33);

        $r26 = specialinvoke r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.Object,java.lang.String)>(r0, "operand");

        r32 = interfaceinvoke r33.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r26);

        $r27 = specialinvoke r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Node createGuardElement(net.sourceforge.plantuml.sequencediagram.Grouping)>(r0);

        interfaceinvoke r32.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r27);

        $r30 = r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.Stack covered>;

        $r29 = new java.util.HashSet;

        specialinvoke $r29.<java.util.HashSet: void <init>()>();

        virtualinvoke $r30.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r29);

        goto label3;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Grouping: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r4 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType ELSE>;

        if $r3 != $r4 goto label2;

        $r20 = interfaceinvoke r32.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r21 = specialinvoke r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.Object,java.lang.String)>(r0, "operand");

        r32 = interfaceinvoke $r20.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r21);

        $r22 = specialinvoke r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Node createGuardElement(net.sourceforge.plantuml.sequencediagram.Grouping)>(r0);

        interfaceinvoke r32.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r22);

        goto label3;

     label2:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Grouping: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r6 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType END>;

        if $r5 != $r6 goto label3;

        $r8 = r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Document document>;

        r34 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Attr createAttribute(java.lang.String)>("covered");

        $r9 = r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.Stack covered>;

        $r10 = virtualinvoke $r9.<java.util.Stack: java.lang.Object pop()>();

        r11 = (java.util.HashSet) $r10;

        $r12 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" ", r11);

        interfaceinvoke r34.<org.w3c.dom.Node: void setTextContent(java.lang.String)>($r12);

        $r13 = interfaceinvoke r32.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r14 = interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        interfaceinvoke $r14.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)>(r34);

        $r16 = r7.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.util.Stack covered>;

        $r17 = virtualinvoke $r16.<java.util.Stack: java.lang.Object peek()>();

        $r18 = (java.util.HashSet) $r17;

        virtualinvoke $r18.<java.util.HashSet: boolean addAll(java.util.Collection)>(r11);

        $r19 = interfaceinvoke r32.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r32 = interfaceinvoke $r19.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label3:
        return r32;
    }

    private org.w3c.dom.Node createGuardElement(net.sourceforge.plantuml.sequencediagram.Grouping)
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        net.sourceforge.plantuml.sequencediagram.Grouping r1;
        org.w3c.dom.Element r2, $r3, $r5;
        java.lang.String $r4;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Grouping;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.Object,java.lang.String)>(r1, "guard");

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>(r1, "specification", "LiteralString");

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Grouping: java.lang.String getComment()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element setAttribute(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r3, "value", $r4);

        interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        return r2;
    }

    private org.w3c.dom.Element createElement(java.lang.Object, java.lang.String)
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        java.lang.String r1, $r5;
        java.lang.String[][] $r2;
        java.lang.String[] $r3;
        java.lang.Object r4;
        org.w3c.dom.Element $r6;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.String[])[1];

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "xmi:id";

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>(r1, r4);

        $r3[1] = $r5;

        $r2[0] = $r3;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.String,java.lang.String[][])>(r1, $r2);

        return $r6;
    }

    private org.w3c.dom.Element createElement(java.lang.Object, java.lang.String, java.lang.String[][])
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        java.lang.String r1, $r5;
        java.lang.String[][] $r2, r7;
        java.lang.String[] $r3;
        java.lang.Object r4;
        org.w3c.dom.Element $r6, $r8;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String[][];

        $r2 = newarray (java.lang.String[])[1];

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "xmi:id";

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>(r1, r4);

        $r3[1] = $r5;

        $r2[0] = $r3;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.String,java.lang.String[][])>(r1, $r2);

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element setAttributes(org.w3c.dom.Element,java.lang.String[][])>($r6, r7);

        return $r8;
    }

    private org.w3c.dom.Element createUmlElement(java.lang.Object, java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        java.lang.String r1, r6, $r8, $r11;
        java.lang.String[][] $r2;
        java.lang.String[] $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Object r10;
        org.w3c.dom.Element $r12;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r10 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $r2 = newarray (java.lang.String[])[2];

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "xmi:type";

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uml:");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[1] = $r8;

        $r2[0] = $r3;

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = "xmi:id";

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>(r6, r10);

        $r9[1] = $r11;

        $r2[1] = $r9;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createElement(java.lang.String,java.lang.String[][])>(r1, $r2);

        return $r12;
    }

    private org.w3c.dom.Node createMessageOccurrence(java.lang.Object, java.lang.String, net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard r0;
        java.lang.Object r1;
        org.w3c.dom.Element $r2, $r12;
        java.lang.String[][] $r3;
        java.lang.String[] $r4, $r7, $r10;
        java.lang.String r5, $r6, $r9, $r11;
        net.sourceforge.plantuml.sequencediagram.Participant r8;

        r0 := @this: net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element createUmlElement(java.lang.Object,java.lang.String,java.lang.String)>(r1, "fragment", "MessageOccurrenceSpecification");

        $r3 = newarray (java.lang.String[])[3];

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "xmi:id";

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>(r5, r1);

        $r4[1] = $r6;

        $r3[0] = $r4;

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "covered";

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("lifeline", r8);

        $r7[1] = $r9;

        $r3[1] = $r7;

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "message";

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: java.lang.String getXmiId(java.lang.String,java.lang.Object)>("Message", r1);

        $r10[1] = $r11;

        $r3[2] = $r10;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.xmi.XmiSequenceDiagramStandard: org.w3c.dom.Element setAttributes(org.w3c.dom.Element,java.lang.String[][])>($r2, $r3);

        return $r12;
    }
}
