public class net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy extends net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participant;
    private final net.sourceforge.plantuml.skin.Component comp;

    public void <init>(double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox, net.sourceforge.plantuml.skin.Component)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r1;
        net.sourceforge.plantuml.skin.Component r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r2 := @parameter2: net.sourceforge.plantuml.skin.Component;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void <init>(double)>(d0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participant> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: net.sourceforge.plantuml.skin.Component comp> = r2;

        return;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy r2;
        double $d0, $d1, d2;
        net.sourceforge.plantuml.skin.Context2D r3;
        net.sourceforge.plantuml.skin.Component $r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, r6;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d2 := @parameter1: double;

        r3 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r0 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r1 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: double getStartingY()>();

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d0, $d1);

        r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        $r4 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: net.sourceforge.plantuml.skin.Component comp>;

        interfaceinvoke $r4.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r6, null, r3);

        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participant>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d1 / 2.0;

        $d3 = $d0 - $d2;

        return $d3;
    }
}
