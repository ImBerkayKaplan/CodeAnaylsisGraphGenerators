public class net.sourceforge.plantuml.preproc.Stdlib extends java.lang.Object
{
    private static final java.util.Map all;
    private static final java.lang.String SEPARATOR;
    private static final java.util.regex.Pattern sizePattern;
    private final java.util.Map cache;
    private final java.lang.String name;
    private final java.util.Map info;

    public static java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.String $r0, $r1, $r3, r4, r9, r10;
        int i0, $i1, $i2;
        java.util.Map $r2;
        java.io.ByteArrayInputStream $r5;
        java.nio.charset.Charset $r6;
        byte[] $r7;
        java.io.IOException $r8;
        net.sourceforge.plantuml.preproc.Stdlib r11;

        r9 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r9.<java.lang.String: java.lang.String toLowerCase()>();

        r10 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".puml", "");

        i0 = virtualinvoke r10.<java.lang.String: int indexOf(int)>(47);

        if i0 != -1 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r11 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: net.sourceforge.plantuml.preproc.Stdlib retrieve(java.lang.String)>($r1);

        if r11 == null goto label2;

        $r2 = r11.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map info>;

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i1 != 0 goto label3;

     label2:
        return null;

     label3:
        $i2 = i0 + 1;

        $r3 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>($i2);

        r4 = specialinvoke r11.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String loadRessource(java.lang.String)>($r3);

        if r4 != null goto label5;

     label4:
        return null;

     label5:
        $r5 = new java.io.ByteArrayInputStream;

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

     label6:
        return $r5;

     label7:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.io.IOException: void printStackTrace()>();

        return null;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public static net.sourceforge.plantuml.preproc.Stdlib retrieve(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r4;
        java.util.Map $r1, $r6;
        java.lang.Object $r2;
        java.io.DataInputStream r3;
        net.sourceforge.plantuml.preproc.Stdlib $r5, r8;

        r0 := @parameter0: java.lang.String;

        $r1 = <net.sourceforge.plantuml.preproc.Stdlib: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (net.sourceforge.plantuml.preproc.Stdlib) $r2;

        if r8 != null goto label2;

        r3 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: java.io.DataInputStream getDataStream(java.lang.String)>(r0);

        if r3 != null goto label1;

        return null;

     label1:
        r4 = virtualinvoke r3.<java.io.DataInputStream: java.lang.String readUTF()>();

        virtualinvoke r3.<java.io.DataInputStream: void close()>();

        $r5 = new net.sourceforge.plantuml.preproc.Stdlib;

        specialinvoke $r5.<net.sourceforge.plantuml.preproc.Stdlib: void <init>(java.lang.String,java.lang.String)>(r0, r4);

        r8 = $r5;

        $r6 = <net.sourceforge.plantuml.preproc.Stdlib: java.util.Map all>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

     label2:
        return r8;
    }

    private java.lang.String loadRessource(java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.preproc.Stdlib r0;
        java.lang.String r1, $r3, $r9, r11, $r13, $r14, r15, $r18, $r24, r28, r31, r32;
        java.util.Map $r2, $r17;
        java.lang.Object $r4, $r25;
        java.lang.ref.SoftReference r5, $r19;
        java.lang.StringBuilder $r6, $r7, $r8, $r20, $r21, $r22, $r23, r30;
        java.io.InputStream r10;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.regex.Pattern $r12;
        int i0, i1;
        java.io.IOException $r16;
        java.lang.Throwable $r26;
        java.io.DataInputStream r29;
        java.util.regex.Matcher r34;

        r0 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map cache>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.lang.ref.SoftReference) $r4;

        if r5 == null goto label01;

        $r25 = virtualinvoke r5.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r28 = (java.lang.String) $r25;

        if r28 == null goto label01;

        return r28;

     label01:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No cache for ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r9);

        r29 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: java.io.DataInputStream getDataStream()>();

        if r29 != null goto label02;

        return null;

     label02:
        virtualinvoke r29.<java.io.DataInputStream: java.lang.String readUTF()>();

        r10 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: java.io.InputStream getSpriteStream()>();

        if r10 != null goto label03;

        virtualinvoke r29.<java.io.DataInputStream: void close()>();

        return null;

     label03:
        r30 = null;

     label04:
        r11 = virtualinvoke r29.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("\uf8ff");

        if $z0 == 0 goto label06;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not found ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r24);

     label05:
        virtualinvoke r29.<java.io.DataInputStream: void close()>();

        virtualinvoke r10.<java.io.InputStream: void close()>();

        return null;

     label06:
        $z1 = virtualinvoke r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label07;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        r30 = $r20;

     label07:
        r31 = virtualinvoke r29.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z3 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("\uf8ff");

        if $z3 == 0 goto label09;

        if r30 == null goto label14;

        r32 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map cache>;

        $r18 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r19 = new java.lang.ref.SoftReference;

        specialinvoke $r19.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r32);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

     label08:
        virtualinvoke r29.<java.io.DataInputStream: void close()>();

        virtualinvoke r10.<java.io.InputStream: void close()>();

        return r32;

     label09:
        if r30 == null goto label10;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label10:
        $z2 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: boolean isSpriteLine(java.lang.String)>(r31);

        if $z2 == 0 goto label13;

        $r12 = <net.sourceforge.plantuml.preproc.Stdlib: java.util.regex.Pattern sizePattern>;

        r34 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r31);

        z4 = virtualinvoke r34.<java.util.regex.Matcher: boolean find()>();

        if z4 != 0 goto label11;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>(r31);

        throw $r16;

     label11:
        $r13 = virtualinvoke r34.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        $r14 = virtualinvoke r34.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

        if r30 != null goto label12;

        specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: void skipSprite(int,int,java.io.InputStream)>(i0, i1, r10);

        goto label13;

     label12:
        r15 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String readSprite(int,int,java.io.InputStream)>(i0, i1, r10);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}\n");

     label13:
        goto label07;

     label14:
        goto label04;

     label15:
        $r26 := @caughtexception;

     label16:
        virtualinvoke r29.<java.io.DataInputStream: void close()>();

        virtualinvoke r10.<java.io.InputStream: void close()>();

        throw $r26;

        catch java.lang.Throwable from label03 to label05 with label15;
        catch java.lang.Throwable from label06 to label08 with label15;
        catch java.lang.Throwable from label09 to label16 with label15;
    }

    private void <init>(java.lang.String, java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.preproc.Stdlib r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.HashMap $r2;
        java.lang.String r3, r4;

        r0 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map cache> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map info> = $r2;

        r0.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String name> = r3;

        specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: void fillMap(java.lang.String)>(r4);

        return;
    }

    private void skipSprite(int, int, java.io.InputStream) throws java.io.IOException
    {
        int i0, $i1, i2, i3, $i4;
        java.io.InputStream r0;
        long $l5;
        net.sourceforge.plantuml.preproc.Stdlib r1;

        r1 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        r0 := @parameter2: java.io.InputStream;

        $i1 = i0 + 1;

        i2 = $i1 / 2;

        $i4 = i2 * i3;

        $l5 = (long) $i4;

        virtualinvoke r0.<java.io.InputStream: long skip(long)>($l5);

        return;
    }

    private java.lang.String readSprite(int, int, java.io.InputStream) throws java.io.IOException
    {
        int i0, $i1, i2, i3, i4, $i5, i6, i7, i8, i9, i10;
        java.lang.StringBuilder $r0, $r3, $r5;
        java.lang.String $r2, $r7, $r10, $r15, $r17;
        java.io.InputStream r13;
        net.sourceforge.plantuml.preproc.Stdlib r14;

        r14 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        r13 := @parameter2: java.io.InputStream;

        $i1 = i0 + 1;

        i2 = $i1 / 2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i8 = 0;

        i9 = 0;

     label1:
        if i9 >= i2 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        i10 = 0;

     label2:
        if i10 >= i3 goto label3;

        i4 = virtualinvoke r13.<java.io.InputStream: int read()>();

        $i5 = i4 & 240;

        i6 = $i5 >> 4;

        i7 = i4 & 15;

        $r15 = specialinvoke r14.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String toHexString(int)>(i6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = specialinvoke r14.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String toHexString(int)>(i7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        i10 = i10 + 1;

        goto label2;

     label3:
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i8 = i8 + 1;

        if i8 >= i0 goto label4;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i8 = i8 + 1;

     label4:
        i9 = i9 + 1;

        goto label1;

     label5:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private java.lang.String toHexString(int)
    {
        int i0;
        java.lang.String $r0, $r1;
        net.sourceforge.plantuml.preproc.Stdlib r2;

        r2 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase()>();

        return $r1;
    }

    private boolean isSpriteLine(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.preproc.Stdlib r3;

        r3 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("sprite");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("{");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private void fillMap(java.lang.String)
    {
        java.lang.String r0, r2, $r5, $r6;
        java.lang.String[] r1, r3;
        int i0, i1;
        boolean $z0;
        net.sourceforge.plantuml.preproc.Stdlib r4;
        java.util.Map $r7;

        r4 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("=");

        if $z0 == 0 goto label2;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $r7 = r4.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map info>;

        $r6 = r3[0];

        $r5 = r3[1];

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private static java.io.DataInputStream getDataStream(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.InputStream r1;
        java.io.DataInputStream $r2;
        net.sourceforge.plantuml.brotli.BrotliInputStream $r3;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: java.io.InputStream getInternalInputStream(java.lang.String,java.lang.String)>(r0, "-abx.repx");

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.io.DataInputStream;

        $r3 = new net.sourceforge.plantuml.brotli.BrotliInputStream;

        specialinvoke $r3.<net.sourceforge.plantuml.brotli.BrotliInputStream: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);

        return $r2;
    }

    private java.io.DataInputStream getDataStream() throws java.io.IOException
    {
        net.sourceforge.plantuml.preproc.Stdlib r0;
        java.lang.String $r1;
        java.io.DataInputStream $r2;

        r0 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String name>;

        $r2 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: java.io.DataInputStream getDataStream(java.lang.String)>($r1);

        return $r2;
    }

    private java.io.InputStream getSpriteStream() throws java.io.IOException
    {
        net.sourceforge.plantuml.preproc.Stdlib r0;
        java.lang.String $r1;
        java.io.InputStream r2;
        net.sourceforge.plantuml.brotli.BrotliInputStream $r3;

        r0 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String name>;

        r2 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: java.io.InputStream getInternalInputStream(java.lang.String,java.lang.String)>($r1, "-dex.repx");

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new net.sourceforge.plantuml.brotli.BrotliInputStream;

        specialinvoke $r3.<net.sourceforge.plantuml.brotli.BrotliInputStream: void <init>(java.io.InputStream)>(r2);

        return $r3;
    }

    private static java.io.InputStream getInternalInputStream(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r5;
        java.lang.String r2, r4, r6;
        java.lang.Class $r7;
        java.io.InputStream $r8;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/stdlib/");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = class "Lnet/sourceforge/plantuml/preproc/Stdlib;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r6);

        return $r8;
    }

    public static void extractStdLib() throws java.io.IOException
    {
        java.util.Collection $r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.String r3;
        net.sourceforge.plantuml.preproc.Stdlib r4;

        $r0 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: java.util.Collection getAll()>();

        r1 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        r4 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: net.sourceforge.plantuml.preproc.Stdlib retrieve(java.lang.String)>(r3);

        specialinvoke r4.<net.sourceforge.plantuml.preproc.Stdlib: void extractMeFull()>();

        goto label1;

     label2:
        return;
    }

    private static java.util.Collection getAll() throws java.io.IOException
    {
        java.util.TreeSet $r0;
        java.io.InputStream r2;
        java.io.BufferedReader $r3;
        java.io.InputStreamReader $r4;
        java.lang.String $r6;
        java.util.Collection $r8;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        r2 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: java.io.InputStream getInternalInputStream(java.lang.String,java.lang.String)>("home", ".repx");

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

     label1:
        $r6 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r6 == null goto label2;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r8 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r0);

        return $r8;
    }

    private void extractMeFull() throws java.io.IOException
    {
        net.sourceforge.plantuml.preproc.Stdlib r0;
        java.io.DataInputStream r1;
        java.io.InputStream r3;
        java.lang.String r4, $r8, $r13, r17, $r20, $r21, r22;
        boolean $z0, $z1, $z2, z3;
        net.sourceforge.plantuml.security.SFile $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12;
        java.io.PrintWriter r16;
        java.util.regex.Pattern $r18;
        java.util.regex.Matcher r19;
        int i0, i1;
        java.io.IOException $r23;
        java.lang.Throwable $r24;

        r0 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: java.io.DataInputStream getDataStream()>();

        if r1 != null goto label01;

        return;

     label01:
        virtualinvoke r1.<java.io.DataInputStream: java.lang.String readUTF()>();

        r3 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: java.io.InputStream getSpriteStream()>();

     label02:
        r4 = virtualinvoke r1.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("\uf8ff");

        if $z0 == 0 goto label04;

     label03:
        virtualinvoke r1.<java.io.DataInputStream: void close()>();

        virtualinvoke r3.<java.io.InputStream: void close()>();

        return;

     label04:
        $r5 = new net.sourceforge.plantuml.security.SFile;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stdlib/");

        $r8 = r0.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String name>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".puml");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>($r13);

        $r15 = virtualinvoke $r5.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

        virtualinvoke $r15.<net.sourceforge.plantuml.security.SFile: void mkdirs()>();

        r16 = virtualinvoke $r5.<net.sourceforge.plantuml.security.SFile: java.io.PrintWriter createPrintWriter()>();

     label05:
        r17 = virtualinvoke r1.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z1 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("\uf8ff");

        if $z1 == 0 goto label06;

        goto label09;

     label06:
        virtualinvoke r16.<java.io.PrintWriter: void println(java.lang.String)>(r17);

        $z2 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: boolean isSpriteLine(java.lang.String)>(r17);

        if $z2 == 0 goto label08;

        $r18 = <net.sourceforge.plantuml.preproc.Stdlib: java.util.regex.Pattern sizePattern>;

        r19 = virtualinvoke $r18.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r17);

        z3 = virtualinvoke r19.<java.util.regex.Matcher: boolean find()>();

        if z3 != 0 goto label07;

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>(r17);

        throw $r23;

     label07:
        $r20 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r20);

        $r21 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21);

        r22 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String readSprite(int,int,java.io.InputStream)>(i0, i1, r3);

        virtualinvoke r16.<java.io.PrintWriter: void println(java.lang.String)>(r22);

        virtualinvoke r16.<java.io.PrintWriter: void println(java.lang.String)>("}");

     label08:
        goto label05;

     label09:
        virtualinvoke r16.<java.io.PrintWriter: void close()>();

        goto label02;

     label10:
        $r24 := @caughtexception;

     label11:
        virtualinvoke r1.<java.io.DataInputStream: void close()>();

        virtualinvoke r3.<java.io.InputStream: void close()>();

        throw $r24;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label11 with label10;
    }

    public java.util.List extractAllSprites() throws java.io.IOException
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.preproc.Stdlib r2;
        java.io.DataInputStream r3;
        java.io.InputStream r5;
        java.lang.String r6, $r9, $r10, r11, $r17, r23;
        boolean $z0, $z1, $z2, z3, $z4;
        java.util.regex.Pattern $r7;
        java.util.regex.Matcher r8;
        int i0, i1;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;
        java.io.IOException $r18;
        java.util.List $r19, r22;
        java.lang.Throwable $r20;

        r2 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r3 = specialinvoke r2.<net.sourceforge.plantuml.preproc.Stdlib: java.io.DataInputStream getDataStream()>();

        if r3 != null goto label01;

        $r19 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r19;

     label01:
        virtualinvoke r3.<java.io.DataInputStream: java.lang.String readUTF()>();

        r5 = specialinvoke r2.<net.sourceforge.plantuml.preproc.Stdlib: java.io.InputStream getSpriteStream()>();

     label02:
        r6 = virtualinvoke r3.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("\uf8ff");

        if $z0 == 0 goto label04;

        r22 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

     label03:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

        virtualinvoke r5.<java.io.InputStream: void close()>();

        return r22;

     label04:
        r23 = virtualinvoke r3.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z1 = virtualinvoke r23.<java.lang.String: boolean equals(java.lang.Object)>("\uf8ff");

        if $z1 == 0 goto label05;

        goto label08;

     label05:
        $z2 = specialinvoke r2.<net.sourceforge.plantuml.preproc.Stdlib: boolean isSpriteLine(java.lang.String)>(r23);

        if $z2 == 0 goto label07;

        $r7 = <net.sourceforge.plantuml.preproc.Stdlib: java.util.regex.Pattern sizePattern>;

        r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r23);

        z3 = virtualinvoke r8.<java.util.regex.Matcher: boolean find()>();

        if z3 != 0 goto label06;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>(r23);

        throw $r18;

     label06:
        $r9 = virtualinvoke r8.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $r10 = virtualinvoke r8.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        r11 = specialinvoke r2.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String readSprite(int,int,java.io.InputStream)>(i0, i1, r5);

        $z4 = virtualinvoke r23.<java.lang.String: boolean contains(java.lang.CharSequence)>("_LARGE");

        if $z4 != 0 goto label07;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r17);

     label07:
        goto label04;

     label08:
        goto label02;

     label09:
        $r20 := @caughtexception;

     label10:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

        virtualinvoke r5.<java.io.InputStream: void close()>();

        throw $r20;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label10 with label09;
    }

    public static void addInfoVersion(java.util.List, boolean)
    {
        java.util.Collection $r0;
        boolean $z0, z1;
        java.lang.Object $r1;
        java.lang.String r2, $r9, $r12, $r16, $r19, $r21, $r24, $r26, $r31;
        net.sourceforge.plantuml.preproc.Stdlib r3;
        java.util.List r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r25, $r28, $r29, $r30;
        java.io.IOException $r27;
        java.util.Iterator r32;

        r4 := @parameter0: java.util.List;

        z1 := @parameter1: boolean;

     label1:
        $r0 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: java.util.Collection getAll()>();

        r32 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r1;

        r3 = staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: net.sourceforge.plantuml.preproc.Stdlib retrieve(java.lang.String)>(r2);

        if z1 == 0 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<b>");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version ");

        $r19 = specialinvoke r3.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String getVersion()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delivered by ");

        $r24 = specialinvoke r3.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String getSource()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r26);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(" ");

        goto label4;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Version ");

        $r9 = specialinvoke r3.<net.sourceforge.plantuml.preproc.Stdlib: java.lang.String getVersion()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r12);

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r31);

        return;

     label7:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    private java.lang.String getVersion()
    {
        net.sourceforge.plantuml.preproc.Stdlib r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map info>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("VERSION");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    private java.lang.String getSource()
    {
        net.sourceforge.plantuml.preproc.Stdlib r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.preproc.Stdlib;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Stdlib: java.util.Map info>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("SOURCE");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static void printStdLib()
    {
        java.util.ArrayList $r0;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4, $r6;
        java.io.PrintStream $r5;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: void addInfoVersion(java.util.List,boolean)>($r0, 1);

        r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("<b>", "");

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        java.util.regex.Pattern $r1;

        <net.sourceforge.plantuml.preproc.Stdlib: java.lang.String SEPARATOR> = "\uf8ff";

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <net.sourceforge.plantuml.preproc.Stdlib: java.util.Map all> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\[(\\d+)x(\\d+)/16\\]");

        <net.sourceforge.plantuml.preproc.Stdlib: java.util.regex.Pattern sizePattern> = $r1;

        return;
    }
}
