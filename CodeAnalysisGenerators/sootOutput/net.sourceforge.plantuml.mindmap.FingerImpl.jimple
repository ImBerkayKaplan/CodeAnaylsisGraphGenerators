public class net.sourceforge.plantuml.mindmap.FingerImpl extends java.lang.Object implements net.sourceforge.plantuml.mindmap.Finger, net.sourceforge.plantuml.graphic.UDrawable
{
    private final net.sourceforge.plantuml.cucadiagram.Display label;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColor;
    private final java.lang.String stereotype;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.style.StyleBuilder styleBuilder;
    private final net.sourceforge.plantuml.mindmap.IdeaShape shape;
    private final net.sourceforge.plantuml.Direction direction;
    private final int level;
    private boolean drawPhalanx;
    private double marginLeft;
    private double marginRight;
    private double marginTop;
    private double marginBottom;
    private final java.util.List nail;
    private net.sourceforge.plantuml.mindmap.Tetris tetris;
    static final boolean $assertionsDisabled;

    private net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionNode()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, $r13, $r23, $r33, $r45, $r55;
        net.sourceforge.plantuml.mindmap.IdeaShape $r2, $r3, $r4, $r5;
        java.util.List $r6, $r36;
        net.sourceforge.plantuml.style.SName[] $r7, $r16, $r26, $r37, $r48;
        net.sourceforge.plantuml.style.SName $r8, $r9, $r10, $r11, $r17, $r18, $r19, $r20, $r21, $r27, $r28, $r29, $r30, $r31, $r38, $r39, $r40, $r41, $r42, $r43, $r49, $r50, $r51, $r52, $r53;
        net.sourceforge.plantuml.style.StyleSignature $r12, $r14, $r15, $r22, $r24, $r25, $r32, $r34, $r35, $r44, $r46, $r47, $r54, $r56, $r57;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $i0 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: int level>;

        r1 = staticinvoke <net.sourceforge.plantuml.style.SName: java.lang.String depth(int)>($i0);

        $i1 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: int level>;

        if $i1 != 0 goto label1;

        $r48 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r49 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r48[0] = $r49;

        $r50 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r48[1] = $r50;

        $r51 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName mindmapDiagram>;

        $r48[2] = $r51;

        $r52 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName node>;

        $r48[3] = $r52;

        $r53 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName rootNode>;

        $r48[4] = $r53;

        $r54 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r48);

        $r55 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.lang.String stereotype>;

        $r56 = virtualinvoke $r54.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>(r1);

        return $r57;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.IdeaShape shape>;

        $r2 = <net.sourceforge.plantuml.mindmap.IdeaShape: net.sourceforge.plantuml.mindmap.IdeaShape NONE>;

        if $r3 != $r2 goto label2;

        $r36 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail>;

        $i3 = interfaceinvoke $r36.<java.util.List: int size()>();

        if $i3 != 0 goto label2;

        $r37 = newarray (net.sourceforge.plantuml.style.SName)[6];

        $r38 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r37[0] = $r38;

        $r39 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r37[1] = $r39;

        $r40 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName mindmapDiagram>;

        $r37[2] = $r40;

        $r41 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName node>;

        $r37[3] = $r41;

        $r42 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName leafNode>;

        $r37[4] = $r42;

        $r43 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName boxless>;

        $r37[5] = $r43;

        $r44 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r37);

        $r45 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.lang.String stereotype>;

        $r46 = virtualinvoke $r44.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>(r1);

        return $r47;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.IdeaShape shape>;

        $r4 = <net.sourceforge.plantuml.mindmap.IdeaShape: net.sourceforge.plantuml.mindmap.IdeaShape NONE>;

        if $r5 != $r4 goto label3;

        $r26 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r27 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r26[0] = $r27;

        $r28 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r26[1] = $r28;

        $r29 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName mindmapDiagram>;

        $r26[2] = $r29;

        $r30 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName node>;

        $r26[3] = $r30;

        $r31 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName boxless>;

        $r26[4] = $r31;

        $r32 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r26);

        $r33 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.lang.String stereotype>;

        $r34 = virtualinvoke $r32.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>(r1);

        return $r35;

     label3:
        $r6 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 != 0 goto label4;

        $r16 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r17 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r16[0] = $r17;

        $r18 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r16[1] = $r18;

        $r19 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName mindmapDiagram>;

        $r16[2] = $r19;

        $r20 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName node>;

        $r16[3] = $r20;

        $r21 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName leafNode>;

        $r16[4] = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r16);

        $r23 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.lang.String stereotype>;

        $r24 = virtualinvoke $r22.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>(r1);

        return $r25;

     label4:
        $r7 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r8 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r7[0] = $r8;

        $r9 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r7[1] = $r9;

        $r10 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName mindmapDiagram>;

        $r7[2] = $r10;

        $r11 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName node>;

        $r7[3] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r7);

        $r13 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.lang.String stereotype>;

        $r14 = virtualinvoke $r12.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>(r1);

        return $r15;
    }

    public net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionArrow()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        int $i0;
        java.lang.String r1, $r8;
        net.sourceforge.plantuml.style.SName[] $r2;
        net.sourceforge.plantuml.style.SName $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.style.StyleSignature $r7, $r9, $r10;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $i0 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: int level>;

        r1 = staticinvoke <net.sourceforge.plantuml.style.SName: java.lang.String depth(int)>($i0);

        $r2 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r2[0] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r2[1] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName mindmapDiagram>;

        $r2[2] = $r5;

        $r6 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName arrow>;

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r2);

        $r8 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.lang.String stereotype>;

        $r9 = virtualinvoke $r7.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(java.lang.String)>(r1);

        return $r10;
    }

    public static net.sourceforge.plantuml.mindmap.FingerImpl build(net.sourceforge.plantuml.mindmap.Idea, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl $r0, $r14;
        net.sourceforge.plantuml.mindmap.Idea r1, r13;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3;
        net.sourceforge.plantuml.cucadiagram.Display $r4;
        net.sourceforge.plantuml.ISkinParam r5;
        net.sourceforge.plantuml.mindmap.IdeaShape $r6;
        net.sourceforge.plantuml.Direction r7;
        int $i0;
        java.lang.String $r8;
        java.util.Collection $r10;
        java.util.Iterator r11;
        boolean $z0;
        java.lang.Object $r12;

        r1 := @parameter0: net.sourceforge.plantuml.mindmap.Idea;

        r5 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r7 := @parameter2: net.sourceforge.plantuml.Direction;

        $r0 = new net.sourceforge.plantuml.mindmap.FingerImpl;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: net.sourceforge.plantuml.mindmap.IdeaShape getShape()>();

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: int getLevel()>();

        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: java.lang.String getStereotype()>();

        specialinvoke $r0.<net.sourceforge.plantuml.mindmap.FingerImpl: void <init>(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.mindmap.IdeaShape,net.sourceforge.plantuml.Direction,int,java.lang.String)>($r2, $r3, $r4, r5, $r6, r7, $i0, $r8);

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: java.util.Collection getChildren()>();

        r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (net.sourceforge.plantuml.mindmap.Idea) $r12;

        $r14 = staticinvoke <net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.FingerImpl build(net.sourceforge.plantuml.mindmap.Idea,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.Direction)>(r13, r5, r7);

        virtualinvoke $r0.<net.sourceforge.plantuml.mindmap.FingerImpl: void addInNail(net.sourceforge.plantuml.mindmap.FingerImpl)>($r14);

        goto label1;

     label2:
        return $r0;
    }

    public void addInNail(net.sourceforge.plantuml.mindmap.FingerImpl)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0, r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r1 := @parameter0: net.sourceforge.plantuml.mindmap.FingerImpl;

        $r2 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void <init>(net.sourceforge.plantuml.style.StyleBuilder, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.mindmap.IdeaShape, net.sourceforge.plantuml.Direction, int, java.lang.String)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        java.lang.String r3;
        int i0;
        net.sourceforge.plantuml.cucadiagram.Display r4;
        net.sourceforge.plantuml.ISkinParam r5;
        net.sourceforge.plantuml.mindmap.IdeaShape r6;
        net.sourceforge.plantuml.style.StyleBuilder r7;
        net.sourceforge.plantuml.Direction r8;
        net.sourceforge.plantuml.style.StyleSignature $r9;
        net.sourceforge.plantuml.style.Style r10;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r11, $r12, $r13, $r14;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r7 := @parameter0: net.sourceforge.plantuml.style.StyleBuilder;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter2: net.sourceforge.plantuml.cucadiagram.Display;

        r5 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        r6 := @parameter4: net.sourceforge.plantuml.mindmap.IdeaShape;

        r8 := @parameter5: net.sourceforge.plantuml.Direction;

        i0 := @parameter6: int;

        r3 := @parameter7: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: boolean drawPhalanx> = 1;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginLeft> = 10.0;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginRight> = 10.0;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginTop> = 10.0;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginBottom> = 10.0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail> = $r1;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris> = null;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = r2;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.lang.String stereotype> = r3;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: int level> = i0;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.cucadiagram.Display label> = r4;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ISkinParam skinParam> = r5;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.IdeaShape shape> = r6;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleBuilder styleBuilder> = r7;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.Direction direction> = r8;

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionNode()>();

        r10 = virtualinvoke $r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>(r7);

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d0 = virtualinvoke $r11.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginLeft> = $d0;

        $r12 = virtualinvoke r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d1 = virtualinvoke $r12.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getRight()>();

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginRight> = $d1;

        $r13 = virtualinvoke r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d2 = virtualinvoke $r13.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginTop> = $d2;

        $r14 = virtualinvoke r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d3 = virtualinvoke $r14.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getBottom()>();

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginBottom> = $d3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r17, $r19, $r21, $r25;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.mindmap.FingerImpl r2, r30;
        net.sourceforge.plantuml.graphic.TextBlock r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        boolean $z0;
        java.awt.geom.Point2D$Double $r5, $r14;
        double $d0, $d1, $d2, $d3, $d5, $d6, $d7, $d8, $d9, $d10, d11, $d12, $d14, $d15;
        java.util.List $r6, $r9, $r29;
        java.lang.Object $r7, $r10;
        net.sourceforge.plantuml.mindmap.Tetris $r8;
        net.sourceforge.plantuml.mindmap.SymetricalTeePositioned r11;
        net.sourceforge.plantuml.Direction $r12, $r13, $r22, $r23, $r26, $r27;
        net.sourceforge.plantuml.ugraphic.UTranslate $r16, $r24;
        net.sourceforge.plantuml.ugraphic.color.HColor $r18;
        net.sourceforge.plantuml.ugraphic.UStroke $r20;
        int i0, $i1;

        r2 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = specialinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.graphic.TextBlock getPhalanx()>();

        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: boolean drawPhalanx>;

        if $z0 == 0 goto label3;

        $d8 = virtualinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: double getPhalanxThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d9 = neg $d8;

        d11 = $d9 / 2.0;

        $r23 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.Direction direction>;

        $r22 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r23 != $r22 goto label1;

        $d12 = 0.0;

        goto label2;

     label1:
        $d10 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d12 = neg $d10;

     label2:
        $r24 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d12, d11);

        $r25 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        interfaceinvoke r3.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r25);

     label3:
        $r5 = new java.awt.geom.Point2D$Double;

        $r26 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.Direction direction>;

        $r27 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r26 != $r27 goto label4;

        $d14 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        goto label5;

     label4:
        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d14 = neg $d0;

     label5:
        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d14, 0.0);

        i0 = 0;

     label6:
        $r29 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail>;

        $i1 = interfaceinvoke $r29.<java.util.List: int size()>();

        if i0 >= $i1 goto label9;

        $r6 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        r30 = (net.sourceforge.plantuml.mindmap.FingerImpl) $r7;

        $r8 = specialinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.mindmap.Tetris: java.util.List getElements()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i0);

        r11 = (net.sourceforge.plantuml.mindmap.SymetricalTeePositioned) $r10;

        $r13 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.Direction direction>;

        $r12 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r13 != $r12 goto label7;

        $d6 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d7 = virtualinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: double getX12()>();

        $d15 = $d6 + $d7;

        goto label8;

     label7:
        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = neg $d1;

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: double getX12()>();

        $d15 = $d2 - $d3;

     label8:
        $r14 = new java.awt.geom.Point2D$Double;

        $d5 = virtualinvoke r11.<net.sourceforge.plantuml.mindmap.SymetricalTeePositioned: double getY()>();

        specialinvoke $r14.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d15, $d5);

        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>($r14);

        $r17 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        virtualinvoke r30.<net.sourceforge.plantuml.mindmap.FingerImpl: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r17);

        $r18 = specialinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ugraphic.color.HColor getLinkColor()>();

        $r19 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        $r20 = specialinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ugraphic.UStroke getUStroke()>();

        $r21 = interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r20);

        specialinvoke r2.<net.sourceforge.plantuml.mindmap.FingerImpl: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Point2D,java.awt.geom.Point2D)>($r21, $r5, $r14);

        i0 = i0 + 1;

        goto label6;

     label9:
        return;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getLinkColor()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.style.PName $r4;
        net.sourceforge.plantuml.style.Value $r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r8;
        net.sourceforge.plantuml.api.ThemeStyle $r7;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r9;
        net.sourceforge.plantuml.ugraphic.color.HColor $r10;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionArrow()>();

        $r2 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        $r4 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r4);

        $r6 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r8 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r10 = interfaceinvoke $r5.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r7, $r9);

        return $r10;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getUStroke()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.ugraphic.UStroke $r4;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionArrow()>();

        $r2 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        return $r4;
    }

    private void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.mindmap.FingerImpl r2;
        net.sourceforge.plantuml.Direction $r3, $r4, $r5, $r6;
        double d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        java.awt.geom.Point2D r7, r8;
        net.sourceforge.plantuml.ugraphic.UGraphic r9;

        r2 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r7 := @parameter1: java.awt.geom.Point2D;

        r8 := @parameter2: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $r4 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.Direction direction>;

        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r4 != $r3 goto label1;

        $d14 = 10.0;

        goto label2;

     label1:
        $d14 = -10.0;

     label2:
        d0 = $d14;

        $r6 = r2.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.Direction direction>;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r6 != $r5 goto label3;

        $d15 = 25.0;

        goto label4;

     label3:
        $d15 = -25.0;

     label4:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(java.awt.geom.Point2D)>(r7);

        $d2 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        $d3 = $d2 + d0;

        $d4 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d3, $d4);

        $d5 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        $d6 = $d5 + $d15;

        $d7 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        $d8 = virtualinvoke r8.<java.awt.geom.Point2D: double getX()>();

        $d9 = $d8 - $d15;

        $d10 = virtualinvoke r8.<java.awt.geom.Point2D: double getY()>();

        $d11 = virtualinvoke r8.<java.awt.geom.Point2D: double getX()>();

        $d12 = $d11 - d0;

        $d13 = virtualinvoke r8.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d6, $d7, $d9, $d10, $d12, $d13);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(java.awt.geom.Point2D)>(r8);

        interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        return;
    }

    private net.sourceforge.plantuml.mindmap.Tetris tetris(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0, r10;
        net.sourceforge.plantuml.mindmap.Tetris $r1, $r2, $r3, $r8, $r12;
        net.sourceforge.plantuml.cucadiagram.Display $r4;
        java.lang.String $r5;
        java.util.List $r6;
        java.util.Iterator r7;
        boolean $z0;
        java.lang.Object $r9;
        net.sourceforge.plantuml.graphic.StringBounder r11;
        net.sourceforge.plantuml.mindmap.SymetricalTee $r13;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris>;

        if $r1 != null goto label3;

        $r3 = new net.sourceforge.plantuml.mindmap.Tetris;

        $r4 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.cucadiagram.Display label>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.String toString()>();

        specialinvoke $r3.<net.sourceforge.plantuml.mindmap.Tetris: void <init>(java.lang.String)>($r5);

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris> = $r3;

        $r6 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail>;

        r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.mindmap.FingerImpl) $r9;

        $r12 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris>;

        $r13 = specialinvoke r10.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.SymetricalTee asSymetricalTee(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        virtualinvoke $r12.<net.sourceforge.plantuml.mindmap.Tetris: void add(net.sourceforge.plantuml.mindmap.SymetricalTee)>($r13);

        goto label1;

     label2:
        $r8 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris>;

        virtualinvoke $r8.<net.sourceforge.plantuml.mindmap.Tetris: void balance()>();

     label3:
        $r2 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris>;

        return $r2;
    }

    private net.sourceforge.plantuml.mindmap.SymetricalTee asSymetricalTee(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7;
        java.util.List $r2;
        int $i0;
        net.sourceforge.plantuml.mindmap.SymetricalTee $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getPhalanxThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getPhalanxElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: java.util.List nail>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r4 = new net.sourceforge.plantuml.mindmap.SymetricalTee;

        specialinvoke $r4.<net.sourceforge.plantuml.mindmap.SymetricalTee: void <init>(double,double,double,double)>(d0, d1, 0.0, 0.0);

        return $r4;

     label1:
        d2 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getNailThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d3 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getNailElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = new net.sourceforge.plantuml.mindmap.SymetricalTee;

        $d4 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getX1()>();

        $d5 = d1 + $d4;

        $d6 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getX2()>();

        $d7 = $d6 + d3;

        specialinvoke $r3.<net.sourceforge.plantuml.mindmap.SymetricalTee: void <init>(double,double,double,double)>(d0, $d5, d2, $d7);

        return $r3;
    }

    private double getX1()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $d0 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginLeft>;

        return $d0;
    }

    private double getX2()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $d0 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginRight>;

        $d1 = $d0 + 30.0;

        return $d1;
    }

    public double getX12()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getX1()>();

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getX2()>();

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getPhalanxThickness(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.graphic.TextBlock getPhalanx()>();

        $r3 = interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    public double getPhalanxElongation(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.graphic.TextBlock getPhalanx()>();

        $r3 = interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getPhalanx()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.mindmap.IdeaShape $r1, $r2, $r19, $r20;
        net.sourceforge.plantuml.style.StyleSignature $r3, $r30;
        net.sourceforge.plantuml.style.StyleBuilder $r4, $r28;
        net.sourceforge.plantuml.ISkinParam $r5, $r8, $r12, $r23;
        net.sourceforge.plantuml.cucadiagram.Display $r6, $r29;
        net.sourceforge.plantuml.api.ThemeStyle $r7;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r9;
        net.sourceforge.plantuml.graphic.FontConfiguration $r10;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r11;
        net.sourceforge.plantuml.LineBreakStrategy $r13;
        net.sourceforge.plantuml.creole.CreoleMode $r14;
        net.sourceforge.plantuml.Direction $r15, $r16;
        net.sourceforge.plantuml.graphic.TextBlock $r17, $r18, $r31, $r32, r34, r36;
        java.lang.AssertionError $r21;
        net.sourceforge.plantuml.SkinParamColors $r22;
        net.sourceforge.plantuml.graphic.color.Colors $r24, $r27;
        net.sourceforge.plantuml.ugraphic.color.HColor $r25;
        net.sourceforge.plantuml.graphic.color.ColorType $r26;
        double $d0, $d1;
        net.sourceforge.plantuml.style.Style r35;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        $z0 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: boolean drawPhalanx>;

        if $z0 != 0 goto label1;

        $r32 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        return $r32;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.IdeaShape shape>;

        $r1 = <net.sourceforge.plantuml.mindmap.IdeaShape: net.sourceforge.plantuml.mindmap.IdeaShape BOX>;

        if $r2 != $r1 goto label2;

        $r22 = new net.sourceforge.plantuml.SkinParamColors;

        $r23 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r24 = staticinvoke <net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors empty()>();

        $r26 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r25 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ugraphic.color.HColor backColor>;

        $r27 = virtualinvoke $r24.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors add(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r26, $r25);

        specialinvoke $r22.<net.sourceforge.plantuml.SkinParamColors: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.color.Colors)>($r23, $r27);

        $r28 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r29 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.cucadiagram.Display label>;

        $r30 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionNode()>();

        r34 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBoxOld: net.sourceforge.plantuml.graphic.TextBlock createMindMap(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.style.StyleSignature)>($r28, $r22, $r29, $r30);

        $d1 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginTop>;

        $d0 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double marginBottom>;

        $r31 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>(r34, 0.0, 0.0, $d1, $d0);

        return $r31;

     label2:
        $z1 = <net.sourceforge.plantuml.mindmap.FingerImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r20 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.IdeaShape shape>;

        $r19 = <net.sourceforge.plantuml.mindmap.IdeaShape: net.sourceforge.plantuml.mindmap.IdeaShape NONE>;

        if $r20 == $r19 goto label3;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label3:
        $r3 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionNode()>();

        $r4 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        r35 = virtualinvoke $r3.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r4);

        $r6 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.cucadiagram.Display label>;

        $r5 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r8 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r10 = virtualinvoke r35.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r7, $r9);

        $r11 = virtualinvoke r35.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        $r12 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r13 = virtualinvoke r35.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        $r14 = <net.sourceforge.plantuml.creole.CreoleMode: net.sourceforge.plantuml.creole.CreoleMode FULL>;

        r36 = virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create0(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.LineBreakStrategy,net.sourceforge.plantuml.creole.CreoleMode,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor)>($r10, $r11, $r12, $r13, $r14, null, null);

        $r16 = r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.Direction direction>;

        $r15 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r16 != $r15 goto label4;

        $r18 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>(r36, 3.0, 0.0, 1.0, 1.0);

        return $r18;

     label4:
        $r17 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>(r36, 0.0, 3.0, 1.0, 1.0);

        return $r17;
    }

    public double getNailThickness(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.mindmap.Tetris $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.mindmap.Tetris: double getHeight()>();

        return $d0;
    }

    public double getNailElongation(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.mindmap.Tetris $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.Tetris tetris(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.mindmap.Tetris: double getWidth()>();

        return $d0;
    }

    public double getFullThickness(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1, $d2;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getPhalanxThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getNailThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        return $d2;
    }

    public double getFullElongation(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getPhalanxElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.FingerImpl: double getNailElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d0 + $d1;

        return $d2;
    }

    public void doNotDrawFirstPhalanx()
    {
        net.sourceforge.plantuml.mindmap.FingerImpl r0;

        r0 := @this: net.sourceforge.plantuml.mindmap.FingerImpl;

        r0.<net.sourceforge.plantuml.mindmap.FingerImpl: boolean drawPhalanx> = 0;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/mindmap/FingerImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.mindmap.FingerImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
