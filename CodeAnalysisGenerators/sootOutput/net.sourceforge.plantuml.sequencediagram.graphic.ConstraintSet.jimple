public class net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet extends java.lang.Object
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple firstBorder;
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple lastborder;
    private final java.util.List participantList;
    private final java.util.Map constraints;
    static final boolean $assertionsDisabled;

    public void <init>(java.util.Collection, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        java.util.ArrayList $r1;
        java.util.HashMap $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple $r3, $r7;
        java.util.List $r4, $r6, $r8;
        java.util.Collection r5;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r5 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.Map constraints> = $r2;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        $r3 = new net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple;

        specialinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple: void <init>(double,java.lang.String)>(0.0, "LEFT");

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple firstBorder> = $r3;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>(r5);

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        $r7 = new net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple;

        specialinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple: void <init>(double,java.lang.String)>(d0, "RIGHT");

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple lastborder> = $r7;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.Map constraints>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public double getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple lastborder>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(null);

        return $d0;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraint(net.sourceforge.plantuml.sequencediagram.graphic.Pushable, net.sourceforge.plantuml.sequencediagram.graphic.Pushable)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r0, r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r2;
        java.util.List $r3, $r4, r7;
        int i0, i1;
        java.lang.IllegalArgumentException $r5, $r14;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable[] $r6;
        java.util.Map $r8, $r11;
        java.lang.Object $r9;
        net.sourceforge.plantuml.sequencediagram.graphic.Constraint $r10, $r13, r15;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        if r0 == null goto label1;

        if r1 == null goto label1;

        if r0 != r1 goto label2;

     label1:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label2:
        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        i0 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r0);

        $r4 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        i1 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>(r1);

        if i0 == -1 goto label3;

        if i1 != -1 goto label4;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label4:
        if i0 <= i1 goto label5;

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraint(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r1, r0);

        return $r13;

     label5:
        $r6 = newarray (net.sourceforge.plantuml.sequencediagram.graphic.Pushable)[2];

        $r6[0] = r0;

        $r6[1] = r1;

        r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.Map constraints>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r15 = (net.sourceforge.plantuml.sequencediagram.graphic.Constraint) $r9;

        if r15 != null goto label6;

        $r10 = new net.sourceforge.plantuml.sequencediagram.graphic.Constraint;

        specialinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.Constraint: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r0, r1);

        r15 = $r10;

        $r11 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.Map constraints>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r10);

     label6:
        return r15;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraintAfter(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r1, $r3, $r4;
        java.lang.Object $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Constraint $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.sequencediagram.graphic.Pushable) $r2;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Pushable getNext(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r1);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraint(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>($r3, $r4);

        return $r5;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraintBefore(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r1, $r3, $r4;
        java.lang.Object $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Constraint $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.sequencediagram.graphic.Pushable) $r2;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Pushable getPrevious(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r1);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraint(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>($r3, $r4);

        return $r5;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.Pushable getPrevious(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Pushable getOtherParticipant(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,int)>(r1, -1);

        return $r2;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.Pushable getNext(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Pushable getOtherParticipant(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,int)>(r1, 1);

        return $r2;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.Pushable getOtherParticipant(net.sourceforge.plantuml.sequencediagram.graphic.Pushable, int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r1, $r5;
        java.util.List $r2, $r3;
        int i0, i1, $i2;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        i1 := @parameter1: int;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        if i0 != -1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        $i2 = i0 + i1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.Pushable) $r4;

        return $r5;
    }

    public void takeConstraintIntoAccount(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        java.util.List $r1;
        int $i0, i1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        i1 = 1;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushEverybody(net.sourceforge.plantuml.graphic.StringBounder,int)>(r2, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void pushEverybody(net.sourceforge.plantuml.graphic.StringBounder, int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        java.util.List $r1, $r2, $r5;
        int $i0, i1, $i2, $i3, i4;
        java.lang.Object $r3, $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r4, r7;
        net.sourceforge.plantuml.sequencediagram.graphic.Constraint r8;
        net.sourceforge.plantuml.graphic.StringBounder r9;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r9 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        i1 := @parameter1: int;

        i4 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = $i0 - i1;

        if i4 >= $i2 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i4);

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.Pushable) $r3;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        $i3 = i4 + i1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i3);

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.Pushable) $r6;

        r8 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraint(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r4, r7);

        $d0 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.graphic.Constraint: double getValue()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void ensureSpaceAfter(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,double)>(r9, r4, r7, $d0);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void pushToLeftParticipantBox(double, net.sourceforge.plantuml.sequencediagram.graphic.Pushable, boolean)
    {
        double d0;
        byte $b0;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r0, r6;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r2;
        java.util.List $r3;
        java.util.Iterator r4;
        java.lang.Object $r5;
        boolean $z0, z1, z2, $z3;
        java.lang.IllegalArgumentException $r7;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        d0 := @parameter0: double;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        z1 := @parameter2: boolean;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        z2 = 0;

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: java.util.List participantList>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.graphic.Pushable) $r5;

        $z0 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        z2 = 1;

        if z1 != 0 goto label3;

        goto label2;

     label3:
        if z2 == 0 goto label4;

        interfaceinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: void pushToLeft(double)>(d0);

     label4:
        goto label2;

     label5:
        return;
    }

    public void pushToLeft(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple firstBorder>;

        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushToLeftParticipantBox(double,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,boolean)>(d0, $r1, 1);

        return;
    }

    private void ensureSpaceAfter(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.graphic.Pushable, net.sourceforge.plantuml.sequencediagram.graphic.Pushable, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r0, r1;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1, $d2, $d3, d4, d5, $d6, $d7, $d8;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r3;
        java.lang.AssertionError $r4;
        java.lang.IllegalArgumentException $r5;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        d5 := @parameter3: double;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $d0 = interfaceinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = interfaceinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

        specialinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void ensureSpaceAfter(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,double)>(r2, r1, r0, d5);

        return;

     label2:
        $z1 = <net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $d7 = interfaceinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d8 = interfaceinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $b2 = $d7 cmpg $d8;

        if $b2 < 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $d2 = interfaceinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d3 = interfaceinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        d4 = $d2 - $d3;

        $b1 = d4 cmpg d5;

        if $b1 >= 0 goto label4;

        $d6 = d5 - d4;

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: void pushToLeftParticipantBox(double,net.sourceforge.plantuml.sequencediagram.graphic.Pushable,boolean)>($d6, r1, 1);

     label4:
        return;
    }

    public final net.sourceforge.plantuml.sequencediagram.graphic.Pushable getFirstBorder()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple firstBorder>;

        return $r1;
    }

    public final net.sourceforge.plantuml.sequencediagram.graphic.Pushable getLastborder()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple lastborder>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/ConstraintSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
