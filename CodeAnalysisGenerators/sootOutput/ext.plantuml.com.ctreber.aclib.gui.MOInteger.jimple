public class ext.plantuml.com.ctreber.aclib.gui.MOInteger extends ext.plantuml.com.ctreber.aclib.gui.MonitoredObject
{
    private int fInteger;
    private boolean fCheckRange;
    private int fMin;
    private int fMax;

    public void <init>()
    {
        ext.plantuml.com.ctreber.aclib.gui.MOInteger r0;

        r0 := @this: ext.plantuml.com.ctreber.aclib.gui.MOInteger;

        specialinvoke r0.<ext.plantuml.com.ctreber.aclib.gui.MonitoredObject: void <init>()>();

        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: boolean fCheckRange> = 0;

        return;
    }

    public void <init>(int)
    {
        ext.plantuml.com.ctreber.aclib.gui.MOInteger r0;
        int i0;

        r0 := @this: ext.plantuml.com.ctreber.aclib.gui.MOInteger;

        i0 := @parameter0: int;

        specialinvoke r0.<ext.plantuml.com.ctreber.aclib.gui.MonitoredObject: void <init>()>();

        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: boolean fCheckRange> = 0;

        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fInteger> = i0;

        return;
    }

    public void <init>(int, int, int)
    {
        ext.plantuml.com.ctreber.aclib.gui.MOInteger r0;
        int i0, i1, i2;

        r0 := @this: ext.plantuml.com.ctreber.aclib.gui.MOInteger;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<ext.plantuml.com.ctreber.aclib.gui.MonitoredObject: void <init>()>();

        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: boolean fCheckRange> = 0;

        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fMin> = i0;

        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fMax> = i1;

        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: boolean fCheckRange> = 1;

        virtualinvoke r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: void set(int)>(i2);

        return;
    }

    public void set(int)
    {
        ext.plantuml.com.ctreber.aclib.gui.MOInteger r0;
        int i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.String $r6, $r9, $r12;

        r0 := @this: ext.plantuml.com.ctreber.aclib.gui.MOInteger;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: boolean checkRange(int)>(i0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' out of range [");

        $i1 = r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fMin>;

        $r6 = staticinvoke <ext.plantuml.com.ctreber.aclib.gui.MOInteger: java.lang.String niceFormat(int)>($i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $i2 = r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fMax>;

        $r9 = staticinvoke <ext.plantuml.com.ctreber.aclib.gui.MOInteger: java.lang.String niceFormat(int)>($i2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r1;

     label1:
        r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fInteger> = i0;

        virtualinvoke r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: void fireValueChanged()>();

        return;
    }

    private static java.lang.String niceFormat(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 != 2147483647 goto label1;

        return "Infinity";

     label1:
        if i0 != -2147483648 goto label2;

        return "-Infinity";

     label2:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    public int get()
    {
        ext.plantuml.com.ctreber.aclib.gui.MOInteger r0;
        int $i0;

        r0 := @this: ext.plantuml.com.ctreber.aclib.gui.MOInteger;

        $i0 = r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fInteger>;

        return $i0;
    }

    private boolean checkRange(int)
    {
        ext.plantuml.com.ctreber.aclib.gui.MOInteger r0;
        boolean $z0, $z1;
        int i0, $i1, $i2;

        r0 := @this: ext.plantuml.com.ctreber.aclib.gui.MOInteger;

        i0 := @parameter0: int;

        $z0 = r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: boolean fCheckRange>;

        if $z0 == 0 goto label1;

        $i1 = r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fMin>;

        if $i1 > i0 goto label2;

        $i2 = r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fMax>;

        if i0 > $i2 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean checkRange()
    {
        ext.plantuml.com.ctreber.aclib.gui.MOInteger r0;
        int $i0;
        boolean $z0;

        r0 := @this: ext.plantuml.com.ctreber.aclib.gui.MOInteger;

        $i0 = r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: int fInteger>;

        $z0 = specialinvoke r0.<ext.plantuml.com.ctreber.aclib.gui.MOInteger: boolean checkRange(int)>($i0);

        return $z0;
    }
}
