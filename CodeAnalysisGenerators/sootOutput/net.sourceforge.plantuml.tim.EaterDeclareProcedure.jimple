public class net.sourceforge.plantuml.tim.EaterDeclareProcedure extends net.sourceforge.plantuml.tim.Eater
{
    private net.sourceforge.plantuml.tim.TFunctionImpl function;
    private final net.sourceforge.plantuml.LineLocation location;
    private boolean finalFlag;

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterDeclareProcedure r0;
        net.sourceforge.plantuml.StringLocated r1, $r2;
        net.sourceforge.plantuml.LineLocation $r3;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDeclareProcedure;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.LineLocation location> = $r3;

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterDeclareProcedure r0;
        boolean $z0, $z1, $z2, z3, $z4;
        net.sourceforge.plantuml.tim.TContext r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        net.sourceforge.plantuml.LineLocation $r3;
        net.sourceforge.plantuml.tim.TFunctionImpl $r4;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDeclareProcedure;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void checkAndEatChar(java.lang.String)>("!");

        z3 = 0;

     label1:
        $z4 = specialinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: boolean peekUnquoted()>();

        if $z4 != 0 goto label2;

        $z2 = specialinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: boolean peekFinal()>();

        if $z2 == 0 goto label4;

     label2:
        $z0 = specialinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: boolean peekUnquoted()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void checkAndEatChar(java.lang.String)>("unquoted");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void skipSpaces()>();

        z3 = 1;

        goto label1;

     label3:
        $z1 = specialinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: boolean peekFinal()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void checkAndEatChar(java.lang.String)>("final");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void skipSpaces()>();

        r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: boolean finalFlag> = 1;

        goto label1;

     label4:
        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void checkAndEatChar(java.lang.String)>("procedure");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void skipSpaces()>();

        $r3 = r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.LineLocation location>;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.tim.TFunctionImpl eatDeclareProcedure(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,boolean,net.sourceforge.plantuml.LineLocation)>(r1, r2, z3, $r3);

        r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.tim.TFunctionImpl function> = $r4;

        return;
    }

    private boolean peekUnquoted()
    {
        net.sourceforge.plantuml.tim.EaterDeclareProcedure r0;
        char $c0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDeclareProcedure;

        $c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: char peekChar()>();

        if $c0 != 117 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean peekFinal()
    {
        net.sourceforge.plantuml.tim.EaterDeclareProcedure r0;
        char $c0, $c1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDeclareProcedure;

        $c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: char peekChar()>();

        if $c0 != 102 goto label1;

        $c1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: char peekCharN2()>();

        if $c1 != 105 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.TFunctionImpl getFunction()
    {
        net.sourceforge.plantuml.tim.EaterDeclareProcedure r0;
        net.sourceforge.plantuml.tim.TFunctionImpl $r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDeclareProcedure;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.tim.TFunctionImpl function>;

        return $r1;
    }

    public final boolean getFinalFlag()
    {
        net.sourceforge.plantuml.tim.EaterDeclareProcedure r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDeclareProcedure;

        $z0 = r0.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: boolean finalFlag>;

        return $z0;
    }
}
