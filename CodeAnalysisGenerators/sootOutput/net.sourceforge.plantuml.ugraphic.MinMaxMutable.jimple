public class net.sourceforge.plantuml.ugraphic.MinMaxMutable extends java.lang.Object
{
    private double maxX;
    private double maxY;
    private double minX;
    private double minY;

    public static net.sourceforge.plantuml.ugraphic.MinMaxMutable getEmpty(boolean)
    {
        boolean z0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable $r0, $r1;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = new net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 0.0);

        return $r1;

     label1:
        $r0 = new net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: void <init>(double,double,double,double)>(1.7976931348623157E308, 1.7976931348623157E308, -1.7976931348623157E308, -1.7976931348623157E308);

        return $r0;
    }

    public boolean isInfinity()
    {
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minX>;

        $b0 = $d0 cmpl 1.7976931348623157E308;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r2;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r10;

        r2 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X=");

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minX>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxX>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Y=");

        $d2 = r2.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minY>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d3 = r2.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxY>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        double d0, d1, d2, d3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z2 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label3:
        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3);

        if $z3 == 0 goto label4;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label4:
        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minX> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minY> = d2;

        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxX> = d1;

        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxY> = d3;

        return;
    }

    public void addPoint(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        $d2 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxX>;

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>(d0, $d2);

        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxX> = $d3;

        $d4 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxY>;

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d4);

        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxY> = $d5;

        $d6 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minX>;

        $d7 = staticinvoke <java.lang.Math: double min(double,double)>(d0, $d6);

        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minX> = $d7;

        $d8 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minY>;

        $d9 = staticinvoke <java.lang.Math: double min(double,double)>(d1, $d8);

        r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minY> = $d9;

        return;
    }

    public static net.sourceforge.plantuml.ugraphic.MinMaxMutable fromMax(double, double)
    {
        double d0, d1;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        java.lang.IllegalArgumentException $r1, $r2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        r0 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMaxMutable: net.sourceforge.plantuml.ugraphic.MinMaxMutable getEmpty(boolean)>(1);

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: void addPoint(double,double)>(d0, d1);

        return r0;
    }

    public final double getMaxX()
    {
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxX>;

        return $d0;
    }

    public final double getMaxY()
    {
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxY>;

        return $d0;
    }

    public final double getMinX()
    {
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minX>;

        return $d0;
    }

    public final double getMinY()
    {
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minY>;

        return $d0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxX>;

        $d0 = r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minX>;

        $d5 = $d1 - $d0;

        $d3 = r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double maxY>;

        $d2 = r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double minY>;

        $d4 = $d3 - $d2;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d5, $d4);

        return $r0;
    }
}
