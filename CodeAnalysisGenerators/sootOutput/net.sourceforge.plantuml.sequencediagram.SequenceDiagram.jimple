public class net.sourceforge.plantuml.sequencediagram.SequenceDiagram extends net.sourceforge.plantuml.UmlDiagram
{
    private boolean hideUnlinkedData;
    private final java.util.List participantsList;
    private final java.util.List events;
    private final java.util.Map participantEnglobers2;
    private final net.sourceforge.plantuml.skin.rose.Rose skin2;
    private net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate;
    private boolean ignoreNewpage;
    private int autonewpage;
    private net.sourceforge.plantuml.sequencediagram.Delay lastDelay;
    private final java.util.Stack activationState;
    private net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate;
    private final java.util.List openGroupings;
    private final net.sourceforge.plantuml.sequencediagram.AutoNumber autoNumber;
    private boolean showFootbox;
    private net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober;
    private boolean autoactivate;
    private final java.util.Set hiddenPortions;
    private final java.util.List linkAnchors;
    static final boolean $assertionsDisabled;

    public final boolean isHideUnlinkedData()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean hideUnlinkedData>;

        return $z0;
    }

    public final void setHideUnlinkedData(boolean)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean hideUnlinkedData> = z0;

        return;
    }

    public void <init>(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.ISkinSimple)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        net.sourceforge.plantuml.ISkinSimple r3;
        net.sourceforge.plantuml.UmlDiagramType $r4;
        java.util.ArrayList $r5, $r6, $r10, $r13;
        java.util.HashMap $r7;
        net.sourceforge.plantuml.skin.rose.Rose $r8;
        java.util.Stack $r9;
        net.sourceforge.plantuml.sequencediagram.AutoNumber $r11;
        java.util.EnumSet $r12;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r3 := @parameter2: net.sourceforge.plantuml.ISkinSimple;

        $r4 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType SEQUENCE>;

        specialinvoke r0.<net.sourceforge.plantuml.UmlDiagram: void <init>(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.UmlDiagramType,net.sourceforge.plantuml.ISkinSimple)>(r1, r2, $r4, r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Map participantEnglobers2> = $r7;

        $r8 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r8.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.skin.rose.Rose skin2> = $r8;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean ignoreNewpage> = 0;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: int autonewpage> = -1;

        $r9 = new java.util.Stack;

        specialinvoke $r9.<java.util.Stack: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Stack activationState> = $r9;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate> = null;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List openGroupings> = $r10;

        $r11 = new net.sourceforge.plantuml.sequencediagram.AutoNumber;

        specialinvoke $r11.<net.sourceforge.plantuml.sequencediagram.AutoNumber: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.AutoNumber autoNumber> = $r11;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean showFootbox> = 1;

        $r12 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/cucadiagram/EntityPortion;");

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Set hiddenPortions> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List linkAnchors> = $r13;

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.Participant getOrCreateParticipant(java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.lang.String r1;
        net.sourceforge.plantuml.cucadiagram.Display $r2;
        net.sourceforge.plantuml.sequencediagram.Participant $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant getOrCreateParticipant(java.lang.String,net.sourceforge.plantuml.cucadiagram.Display)>(r1, $r2);

        return $r3;
    }

    public net.sourceforge.plantuml.sequencediagram.Participant getOrCreateParticipant(java.lang.String, net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.lang.String r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2, r11;
        net.sourceforge.plantuml.cucadiagram.Display r3;
        net.sourceforge.plantuml.sequencediagram.ParticipantType $r4;
        java.util.Set $r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.style.StyleBuilder $r7;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r8;
        java.util.Map $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.Display;

        r11 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant participantsget(java.lang.String)>(r1);

        if r11 != null goto label1;

        $r2 = new net.sourceforge.plantuml.sequencediagram.Participant;

        $r4 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType PARTICIPANT>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Set hiddenPortions>;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.Participant: void <init>(net.sourceforge.plantuml.sequencediagram.ParticipantType,java.lang.String,net.sourceforge.plantuml.cucadiagram.Display,java.util.Set,int,net.sourceforge.plantuml.style.StyleBuilder)>($r4, r1, r3, $r5, 0, $r7);

        r11 = $r2;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void addWithOrder(net.sourceforge.plantuml.sequencediagram.Participant)>($r2);

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Map participantEnglobers2>;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

     label1:
        return r11;
    }

    private net.sourceforge.plantuml.sequencediagram.Participant participantsget(java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Participant r4;
        java.lang.String $r5, r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.Participant) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.Participant: java.lang.String getCode()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public net.sourceforge.plantuml.sequencediagram.EventWithDeactivate getLastEventWithDeactivate()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.EventWithDeactivate $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate>;

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.Participant createNewParticipant(net.sourceforge.plantuml.sequencediagram.ParticipantType, java.lang.String, net.sourceforge.plantuml.cucadiagram.Display, int)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.lang.String r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2, $r3;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.ParticipantType r4;
        int i0;
        java.util.Set $r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.style.StyleBuilder $r7;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r9;
        java.util.Map $r10;
        java.lang.IllegalArgumentException $r12;
        net.sourceforge.plantuml.cucadiagram.Display r13;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r4 := @parameter0: net.sourceforge.plantuml.sequencediagram.ParticipantType;

        r1 := @parameter1: java.lang.String;

        r13 := @parameter2: net.sourceforge.plantuml.cucadiagram.Display;

        i0 := @parameter3: int;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant participantsget(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label1:
        $z0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: boolean isNull(net.sourceforge.plantuml.cucadiagram.Display)>(r13);

        if $z0 == 0 goto label2;

        r13 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r1);

     label2:
        $r3 = new net.sourceforge.plantuml.sequencediagram.Participant;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Set hiddenPortions>;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Participant: void <init>(net.sourceforge.plantuml.sequencediagram.ParticipantType,java.lang.String,net.sourceforge.plantuml.cucadiagram.Display,java.util.Set,int,net.sourceforge.plantuml.style.StyleBuilder)>(r4, r1, r13, $r5, i0, $r7);

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void addWithOrder(net.sourceforge.plantuml.sequencediagram.Participant)>($r3);

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Map participantEnglobers2>;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r9);

        return $r3;
    }

    private void addWithOrder(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1, $r3, $r4, $r7;
        int $i0, $i1, $i2, i3;
        net.sourceforge.plantuml.sequencediagram.Participant r2, $r6;
        java.lang.Object $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        i3 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label3;

        $i1 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: int getOrder()>();

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (net.sourceforge.plantuml.sequencediagram.Participant) $r5;

        $i2 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.Participant: int getOrder()>();

        if $i1 >= $i2 goto label2;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(i3, r2);

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public java.util.Collection participants()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public boolean participantsContainsKey(java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.lang.String r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant participantsget(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String addMessage(net.sourceforge.plantuml.sequencediagram.AbstractMessage)
    {
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r0, $r14;
        boolean $z0, $z2;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r1;
        java.util.List $r2;
        net.sourceforge.plantuml.sequencediagram.LifeEvent $r3, $r4, $r6, $r9;
        net.sourceforge.plantuml.sequencediagram.Participant $r5, $r10;
        java.lang.StringBuilder $r7, $r8, $r11, $r12;
        java.lang.String $r13;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean isParallel()>();

        if $z0 == 0 goto label1;

        $r14 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.AbstractMessage getLastAbstractMessage()>();

        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: void setParallelBrother(net.sourceforge.plantuml.sequencediagram.AbstractMessage)>($r14);

     label1:
        r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate> = r0;

        r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Delay lastDelay> = null;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate>;

        if $r3 == null goto label3;

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean compatibleForCreate(net.sourceforge.plantuml.sequencediagram.Participant)>($r5);

        if $z2 != 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("After create command, you have to send a message to \"");

        $r9 = r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label2:
        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate>;

        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean addLifeEvent(net.sourceforge.plantuml.sequencediagram.LifeEvent)>($r6);

        r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate> = null;

     label3:
        return null;
    }

    private net.sourceforge.plantuml.sequencediagram.AbstractMessage getLastAbstractMessage()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1, $r2, $r4;
        int $i0, i1;
        java.lang.Object $r3, $r5;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 <= 0 goto label3;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r3 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z0 == 0 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) $r5;

        return $r6;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    public void addNote(net.sourceforge.plantuml.sequencediagram.Note, boolean)
    {
        boolean z0, $z2, $z3;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.Note r1, $r9;
        java.util.List $r2, $r3, $r4, $r11, $r12, $r14;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.Event r6;
        net.sourceforge.plantuml.sequencediagram.Notes $r7, $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Note;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        r6 = (net.sourceforge.plantuml.sequencediagram.Event) $r5;

        $z2 = r6 instanceof net.sourceforge.plantuml.sequencediagram.Note;

        if $z2 == 0 goto label1;

        $r8 = new net.sourceforge.plantuml.sequencediagram.Notes;

        $r9 = (net.sourceforge.plantuml.sequencediagram.Note) r6;

        specialinvoke $r8.<net.sourceforge.plantuml.sequencediagram.Notes: void <init>(net.sourceforge.plantuml.sequencediagram.Note,net.sourceforge.plantuml.sequencediagram.Note)>($r9, r1);

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $i3 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        interfaceinvoke $r12.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i4, $r8);

        return;

     label1:
        $z3 = r6 instanceof net.sourceforge.plantuml.sequencediagram.Notes;

        if $z3 == 0 goto label2;

        $r7 = (net.sourceforge.plantuml.sequencediagram.Notes) r6;

        virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.Notes: void add(net.sourceforge.plantuml.sequencediagram.Note)>(r1);

        return;

     label2:
        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void newpage(net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.Newpage $r1;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        java.util.List $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean ignoreNewpage>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r1 = new net.sourceforge.plantuml.sequencediagram.Newpage;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Newpage: void <init>(net.sourceforge.plantuml.cucadiagram.Display)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void ignoreNewpage()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean ignoreNewpage> = 1;

        return;
    }

    public final int getAutonewpage()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $i0 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: int autonewpage>;

        return $i0;
    }

    public void setAutonewpage(int)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: int autonewpage> = i0;

        return;
    }

    public void divider(net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.Divider $r1;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        java.util.List $r3;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.style.StyleBuilder $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r1 = new net.sourceforge.plantuml.sequencediagram.Divider;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Divider: void <init>(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.style.StyleBuilder)>(r2, $r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void hspace()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.HSpace $r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r1 = new net.sourceforge.plantuml.sequencediagram.HSpace;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.HSpace: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void hspace(int)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.HSpace $r1;
        int i0;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        i0 := @parameter0: int;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r1 = new net.sourceforge.plantuml.sequencediagram.HSpace;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.HSpace: void <init>(int)>(i0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void delay(net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.sequencediagram.Delay $r0;
        net.sourceforge.plantuml.cucadiagram.Display r1;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r2;
        net.sourceforge.plantuml.ISkinParam $r3;
        net.sourceforge.plantuml.style.StyleBuilder $r4;
        java.util.List $r6;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        $r0 = new net.sourceforge.plantuml.sequencediagram.Delay;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.Delay: void <init>(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.style.StyleBuilder)>(r1, $r4);

        $r6 = r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r0);

        r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Delay lastDelay> = $r0;

        return;
    }

    public java.util.List events()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.FileMaker getSequenceDiagramPngMaker(int, net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.FileFormatOption r0;
        net.sourceforge.plantuml.FileFormat r1, $r2, $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramTxtMaker $r3;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r4;
        java.lang.String $r6;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramFileMakerPuma2 $r7;
        net.sourceforge.plantuml.skin.rose.Rose $r8, $r10;
        net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz $r9;
        int i0;
        net.sourceforge.plantuml.xmi.SequenceDiagramXmiMaker $r11;

        r4 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        i0 := @parameter0: int;

        r0 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ATXT>;

        if r1 == $r2 goto label1;

        $r5 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat UTXT>;

        if r1 != $r5 goto label2;

     label1:
        $r3 = new net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramTxtMaker;

        specialinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramTxtMaker: void <init>(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.FileFormat)>(r4, r1);

        return $r3;

     label2:
        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.FileFormat: java.lang.String name()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("XMI");

        if $z0 == 0 goto label3;

        $r11 = new net.sourceforge.plantuml.xmi.SequenceDiagramXmiMaker;

        specialinvoke $r11.<net.sourceforge.plantuml.xmi.SequenceDiagramXmiMaker: void <init>(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.FileFormat)>(r4, r1);

        return $r11;

     label3:
        $z1 = specialinvoke r4.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean modeTeoz()>();

        if $z1 == 0 goto label4;

        $r9 = new net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz;

        $r10 = r4.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.skin.rose.Rose skin2>;

        specialinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz: void <init>(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.FileFormatOption,int)>(r4, $r10, r0, i0);

        return $r9;

     label4:
        $r7 = new net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramFileMakerPuma2;

        $r8 = r4.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.skin.rose.Rose skin2>;

        specialinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramFileMakerPuma2: void <init>(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.FileFormatOption)>(r4, $r8, r0);

        return $r7;
    }

    private boolean modeTeoz()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.Pragma $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.Pragma getPragma()>();

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.Pragma: boolean useTeozLayout()>();

        return $z0;
    }

    public net.sourceforge.plantuml.ugraphic.ImageBuilder createImageBuilder(net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.FileFormatOption r1;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.ugraphic.ImageBuilder createImageBuilder(net.sourceforge.plantuml.FileFormatOption)>(r1);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder annotations(boolean)>(0);

        return $r3;
    }

    protected net.sourceforge.plantuml.core.ImageData exportDiagramInternal(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        int i0;
        net.sourceforge.plantuml.FileFormatOption r1;
        net.sourceforge.plantuml.sequencediagram.graphic.FileMaker r2;
        java.io.OutputStream r3;
        boolean $z0;
        net.sourceforge.plantuml.core.ImageData $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r3 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r1 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.graphic.FileMaker getSequenceDiagramPngMaker(int,net.sourceforge.plantuml.FileFormatOption)>(i0, r1);

        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.FileFormatOption: boolean isWithMetadata()>();

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.FileMaker: net.sourceforge.plantuml.core.ImageData createOne(java.io.OutputStream,int,boolean)>(r3, i0, $z0);

        return $r4;
    }

    public net.sourceforge.plantuml.sequencediagram.AbstractMessage getActivatingMessage()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.Stack $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Stack activationState>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean empty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Stack activationState>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r4 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) $r3;

        return $r4;
    }

    public java.lang.String activate(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.LifeEventType, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        net.sourceforge.plantuml.sequencediagram.LifeEventType r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3;
        java.lang.String $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.LifeEventType;

        r3 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.lang.String activate(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.sequencediagram.LifeEventType,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r1, r2, r3, null);

        return $r4;
    }

    public java.lang.String activate(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.LifeEventType, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.Delay $r1;
        net.sourceforge.plantuml.sequencediagram.LifeEvent $r2;
        net.sourceforge.plantuml.sequencediagram.Participant r3;
        net.sourceforge.plantuml.sequencediagram.LifeEventType r4, $r10, $r12, $r13, $r29;
        net.sourceforge.plantuml.graphic.SymbolContext $r5, $r30;
        net.sourceforge.plantuml.ugraphic.color.HColor r6, r7;
        java.util.List $r9;
        net.sourceforge.plantuml.sequencediagram.EventWithDeactivate $r11, $r19, $r24, $r25, $r31, $r32;
        boolean z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r14, $r15, $r17;
        java.lang.String $r16, $r18;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r20, $r26;
        java.util.Stack $r21, $r22, $r27;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.LifeEventType;

        r6 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r7 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Delay lastDelay>;

        if $r1 == null goto label1;

        return "You cannot Activate/Deactivate just after a ...";

     label1:
        $r2 = new net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r5 = new net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r6, r7);

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.LifeEvent: void <init>(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.sequencediagram.LifeEventType,net.sourceforge.plantuml.graphic.SymbolContext)>(r3, r4, $r5);

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r10 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType CREATE>;

        if r4 != $r10 goto label2;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.LifeEvent pendingCreate> = $r2;

        return null;

     label2:
        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate>;

        if $r11 != null goto label5;

        $r29 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType ACTIVATE>;

        if r4 != $r29 goto label3;

        $r30 = new net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke $r30.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r6, r7);

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Participant: void incInitialLife(net.sourceforge.plantuml.graphic.SymbolContext)>($r30);

        return null;

     label3:
        $i0 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Participant: int getInitialLife()>();

        if $i0 != 0 goto label4;

        return "You cannot deactivate here";

     label4:
        return null;

     label5:
        $r12 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType ACTIVATE>;

        if r4 != $r12 goto label6;

        $r24 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate>;

        $z3 = $r24 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z3 == 0 goto label6;

        $r27 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Stack activationState>;

        $r25 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate>;

        $r26 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) $r25;

        virtualinvoke $r27.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r26);

        goto label7;

     label6:
        $r13 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DEACTIVATE>;

        if r4 != $r13 goto label7;

        $r21 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Stack activationState>;

        $z2 = virtualinvoke $r21.<java.util.Stack: boolean empty()>();

        if $z2 != 0 goto label7;

        $r22 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Stack activationState>;

        virtualinvoke $r22.<java.util.Stack: java.lang.Object pop()>();

     label7:
        $r31 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate>;

        z1 = interfaceinvoke $r31.<net.sourceforge.plantuml.sequencediagram.EventWithDeactivate: boolean addLifeEvent(net.sourceforge.plantuml.sequencediagram.LifeEvent)>($r2);

        $r32 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate>;

        $z4 = $r32 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z4 == 0 goto label8;

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate>;

        r20 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) $r19;

        virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.LifeEvent: void setMessage(net.sourceforge.plantuml.sequencediagram.AbstractMessage)>(r20);

     label8:
        if z1 == 0 goto label9;

        return null;

     label9:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activate/Deactivate already done on ");

        $r16 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Participant: java.lang.String getCode()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    public boolean grouping(java.lang.String, java.lang.String, net.sourceforge.plantuml.sequencediagram.GroupingType, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingType r0, $r1, $r5, $r13, $r14;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r2;
        java.util.List $r3, $r12, $r15, $r19, $r23, $r27;
        int $i0, $i1;
        java.lang.String r6, r7;
        net.sourceforge.plantuml.ugraphic.color.HColor r8, r28;
        net.sourceforge.plantuml.ISkinParam $r9, $r21, $r25;
        net.sourceforge.plantuml.style.StyleBuilder $r10, $r22;
        net.sourceforge.plantuml.sequencediagram.Grouping r11, $r30;
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf $r17, $r32;
        boolean z1;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r18, $r20, $r29, $r31;
        java.lang.Object $r24;
        net.sourceforge.plantuml.ColorParam $r26;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: net.sourceforge.plantuml.sequencediagram.GroupingType;

        r28 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        r8 := @parameter4: net.sourceforge.plantuml.ugraphic.color.HColor;

        z1 := @parameter5: boolean;

        $r1 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        if r0 == $r1 goto label1;

        $r27 = r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List openGroupings>;

        $i1 = interfaceinvoke $r27.<java.util.List: int size()>();

        if $i1 != 0 goto label1;

        return 0;

     label1:
        if r28 != null goto label2;

        $r25 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r26 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam sequenceGroupBodyBackground>;

        r28 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r26, null, 0);

     label2:
        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List openGroupings>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $r23 = r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List openGroupings>;

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(0);

        $r29 = (net.sourceforge.plantuml.sequencediagram.GroupingStart) $r24;

        goto label4;

     label3:
        $r29 = null;

     label4:
        $r5 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        if r0 != $r5 goto label5;

        $r31 = new net.sourceforge.plantuml.sequencediagram.GroupingStart;

        $r30 = $r31;

        $r21 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r31.<net.sourceforge.plantuml.sequencediagram.GroupingStart: void <init>(java.lang.String,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.sequencediagram.GroupingStart,net.sourceforge.plantuml.style.StyleBuilder)>(r6, r7, r28, r8, $r29, $r22);

        goto label6;

     label5:
        $r32 = new net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        $r30 = $r32;

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r32.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: void <init>(java.lang.String,java.lang.String,net.sourceforge.plantuml.sequencediagram.GroupingType,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.sequencediagram.GroupingStart,net.sourceforge.plantuml.style.StyleBuilder)>(r6, r7, r0, r28, r8, $r29, $r10);

     label6:
        r11 = $r30;

        $r12 = r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r30);

        $r13 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        if r0 != $r13 goto label8;

        if z1 == 0 goto label7;

        $r20 = (net.sourceforge.plantuml.sequencediagram.GroupingStart) $r30;

        virtualinvoke $r20.<net.sourceforge.plantuml.sequencediagram.GroupingStart: void goParallel()>();

     label7:
        $r19 = r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List openGroupings>;

        $r18 = (net.sourceforge.plantuml.sequencediagram.GroupingStart) r11;

        interfaceinvoke $r19.<java.util.List: void add(int,java.lang.Object)>(0, $r18);

        goto label9;

     label8:
        $r14 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType END>;

        if r0 != $r14 goto label9;

        $r15 = r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List openGroupings>;

        interfaceinvoke $r15.<java.util.List: java.lang.Object remove(int)>(0);

        $r17 = (net.sourceforge.plantuml.sequencediagram.GroupingLeaf) $r30;

        r2.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate lastEventWithDeactivate> = $r17;

     label9:
        return 1;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r3;
        java.util.List $r4;
        int $i0;
        java.lang.String $r7;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r4 = r3.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" participants)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>($r7);

        return $r0;
    }

    public final void autonumberGo(net.sourceforge.plantuml.sequencediagram.DottedNumber, int, java.text.DecimalFormat)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.DottedNumber r1;
        int i0;
        java.text.DecimalFormat r2;
        net.sourceforge.plantuml.sequencediagram.AutoNumber $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.DottedNumber;

        i0 := @parameter1: int;

        r2 := @parameter2: java.text.DecimalFormat;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.AutoNumber autoNumber>;

        virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.AutoNumber: void go(net.sourceforge.plantuml.sequencediagram.DottedNumber,int,java.text.DecimalFormat)>(r1, i0, r2);

        return;
    }

    public final void autonumberStop()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.AutoNumber $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.AutoNumber autoNumber>;

        virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.AutoNumber: void stop()>();

        return;
    }

    public final net.sourceforge.plantuml.sequencediagram.AutoNumber getAutoNumber()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.AutoNumber $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.AutoNumber autoNumber>;

        return $r1;
    }

    public java.lang.String getNextMessageNumber()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.AutoNumber $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.AutoNumber autoNumber>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.AutoNumber: java.lang.String getNextMessageNumber()>();

        return $r2;
    }

    public boolean isShowFootbox()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.ISkinParam $r1, $r2;
        boolean $z0, $z1, $z2;
        java.lang.String r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.ISkinParam: boolean strictUmlStyle()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("footbox");

        if r3 != null goto label2;

        $z2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean showFootbox>;

        return $z2;

     label2:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("hide");

        if $z1 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public void setShowFootbox(boolean)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean showFootbox> = z0;

        return;
    }

    public void boxStart(net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r1, $r5, $r6, $r7;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3;
        net.sourceforge.plantuml.cucadiagram.Stereotype r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter2: net.sourceforge.plantuml.cucadiagram.Stereotype;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober build(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r2, r3, r4);

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober> = $r7;

        goto label2;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober newChild(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r2, r3, r4);

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober> = $r6;

     label2:
        return;
    }

    public void endBox()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r1, $r2, $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParent()>();

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober> = $r3;

        return;
    }

    public boolean isBoxPending()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getNbImages()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.FileFormatOption $r1;
        net.sourceforge.plantuml.FileFormat $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.FileMaker $r3;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

     label1:
        $r1 = new net.sourceforge.plantuml.FileFormatOption;

        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat DEBUG>;

        specialinvoke $r1.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r2);

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.graphic.FileMaker getSequenceDiagramPngMaker(int,net.sourceforge.plantuml.FileFormatOption)>(1, $r1);

        $i0 = interfaceinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.FileMaker: int getNbPages()>();

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void printStackTrace()>();

        return 1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeHiddenParticipants()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.Participant r5;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        r3 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.Participant) $r4;

        $z1 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean isAlone(net.sourceforge.plantuml.sequencediagram.Participant)>(r5);

        if $z1 == 0 goto label2;

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void remove(net.sourceforge.plantuml.sequencediagram.Participant)>(r5);

     label2:
        goto label1;

     label3:
        return;
    }

    private void remove(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.List $r2;
        boolean z0;
        java.util.Map $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Map participantEnglobers2>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    private boolean isAlone(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Event r4;
        net.sourceforge.plantuml.sequencediagram.Participant r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r5 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.Event) $r3;

        $z1 = interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.Event: boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)>(r5);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public void putParticipantInLast(java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.lang.String r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2, r4;
        java.lang.Object $r3;
        java.util.List $r5;
        boolean z0, $z1;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r6;
        java.util.Map $r7;
        java.lang.AssertionError $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant participantsget(java.lang.String)>(r1);

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r2, r1);

        r4 = (net.sourceforge.plantuml.sequencediagram.Participant) $r3;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        z0 = interfaceinvoke $r5.<java.util.List: boolean remove(java.lang.Object)>(r4);

        $z1 = <net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        if z0 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void addWithOrder(net.sourceforge.plantuml.sequencediagram.Participant)>(r4);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Map participantEnglobers2>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober participantEnglober>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r6);

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getEnglober(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Map participantEnglobers2>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.ParticipantEnglober) $r3;

        return $r4;
    }

    public final void setAutoactivate(boolean)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean autoactivate> = z0;

        return;
    }

    public final boolean isAutoactivate()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean autoactivate>;

        return $z0;
    }

    public boolean hasUrl()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.cucadiagram.DisplayPositioned $r3, $r4;
        java.lang.Object $r5, $r6;
        net.sourceforge.plantuml.Url $r7;
        java.util.Iterator r8, r10;
        net.sourceforge.plantuml.sequencediagram.Participant r9;
        net.sourceforge.plantuml.sequencediagram.Event r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        r8 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.sequencediagram.Participant) $r6;

        $r7 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.Url getUrl()>();

        if $r7 == null goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (net.sourceforge.plantuml.sequencediagram.Event) $r5;

        $z4 = interfaceinvoke r11.<net.sourceforge.plantuml.sequencediagram.Event: boolean hasUrl()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        goto label4;

     label6:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.cucadiagram.DisplayPositioned getLegend()>();

        $z2 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.DisplayPositioned: boolean isNull()>();

        if $z2 != 0 goto label7;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.cucadiagram.DisplayPositioned getLegend()>();

        $z3 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.DisplayPositioned: boolean hasUrl()>();

        if $z3 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    public void addReference(net.sourceforge.plantuml.sequencediagram.Reference)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.Reference r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Reference;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean isOk()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List participantsList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.lang.String checkFinalError()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean isHideUnlinkedData()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void removeHiddenParticipants()>();

     label1:
        $r1 = specialinvoke r0.<net.sourceforge.plantuml.UmlDiagram: java.lang.String checkFinalError()>();

        return $r1;
    }

    public void hideOrShow(java.util.Set, boolean)
    {
        boolean z0;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.Set r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Set hiddenPortions>;

        interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1);

        goto label2;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.Set hiddenPortions>;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

     label2:
        return;
    }

    public net.sourceforge.plantuml.cucadiagram.Display manageVariable(net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.cucadiagram.Display r0, $r4;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r1;
        net.sourceforge.plantuml.sequencediagram.AutoNumber $r2;
        java.lang.String $r3;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.AutoNumber autoNumber>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.AutoNumber: java.lang.String getCurrentMessageNumber(boolean)>(0);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display replace(java.lang.String,java.lang.String)>("%autonumber%", $r3);

        return $r4;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult linkAnchor(java.lang.String, java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.LinkAnchor $r1;
        java.lang.String r2, r3, r4;
        java.util.List $r5;
        net.sourceforge.plantuml.command.CommandExecutionResult $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List linkAnchors>;

        $r1 = new net.sourceforge.plantuml.sequencediagram.LinkAnchor;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r6 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r6;
    }

    public java.util.List getLinkAnchors()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List linkAnchors>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getDefaultMargins()
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        boolean $z0;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean modeTeoz()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft same(double)>(5.0);

        goto label2;

     label1:
        $r1 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft topRightBottomLeft(double,double,double,double)>(5.0, 5.0, 5.0, 0.0);

     label2:
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/SequenceDiagram;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean $assertionsDisabled> = $z1;

        return;
    }
}
