class net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2 extends java.lang.Object implements java.util.Iterator
{
    private final java.util.Iterator it;
    private final double pos1Initial;
    final net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored this$0;

    public void <init>(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored, java.util.Iterator, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2 r0;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r1;
        java.util.Iterator r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        r2 := @parameter1: java.util.Iterator;

        d0 := @parameter2: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: java.util.Iterator it> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: double pos1Initial> = d0;

        return;
    }

    public boolean hasNext()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: java.util.Iterator it>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored next()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r0, $r4, $r7;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2 r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r5;
        net.sourceforge.plantuml.graphic.SymbolContext $r6;
        boolean $z0;
        double $d0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: java.util.Iterator it>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.Segment) $r3;

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored this$0>;

        $r6 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext access$000(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored)>($r4);

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored this$0>;

        $z0 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: boolean access$100(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored)>($r7);

        $d0 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: double pos1Initial>;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Segment,net.sourceforge.plantuml.graphic.SymbolContext,boolean,double,net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$1)>($r5, $r6, $z0, $d0, null);

        return $r0;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2 r1;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2 r0;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Iterator2: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored next()>();

        return $r1;
    }
}
