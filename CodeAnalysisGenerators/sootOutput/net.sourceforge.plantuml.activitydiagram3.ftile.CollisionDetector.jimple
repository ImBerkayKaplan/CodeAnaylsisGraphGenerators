public class net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector extends net.sourceforge.plantuml.ugraphic.UGraphicNo
{
    private final net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context;

    public net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector $r0, r1;
        net.sourceforge.plantuml.ugraphic.UChange r2;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UChange;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector,net.sourceforge.plantuml.ugraphic.UChange)>(r1, r2);

        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphicNo: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        specialinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: void <init>()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context> = $r2;

        return;
    }

    private void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector, net.sourceforge.plantuml.ugraphic.UChange)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r0, r1;
        net.sourceforge.plantuml.ugraphic.UChange r2;
        java.lang.Class[] $r3;
        boolean $z0;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context $r4;
        java.lang.UnsupportedOperationException $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.UChange;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphicNo: void <init>(net.sourceforge.plantuml.ugraphic.UGraphicNo,net.sourceforge.plantuml.ugraphic.UChange)>(r1, r2);

        $r3 = newarray (java.lang.Class)[4];

        $r3[0] = class "Lnet/sourceforge/plantuml/ugraphic/UBackground;";

        $r3[1] = class "Lnet/sourceforge/plantuml/ugraphic/color/HColor;";

        $r3[2] = class "Lnet/sourceforge/plantuml/ugraphic/UStroke;";

        $r3[3] = class "Lnet/sourceforge/plantuml/ugraphic/UTranslate;";

        $z0 = staticinvoke <net.sourceforge.plantuml.utils.ObjectUtils: boolean instanceOfAny(java.lang.Object,java.lang.Class[])>(r2, $r3);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label1:
        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context>;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context> = $r4;

        return;
    }

    private static boolean collisionCheck(net.sourceforge.plantuml.ugraphic.MinMax, java.awt.geom.Line2D)
    {
        java.awt.geom.Line2D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, $d9, $d10, d11, $d12, $d13;
        byte $b0, $b1, $b2, $b3, $b4;
        net.sourceforge.plantuml.ugraphic.MinMax r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMax;

        r0 := @parameter1: java.awt.geom.Line2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Line2D: double getY1()>();

        $d1 = virtualinvoke r0.<java.awt.geom.Line2D: double getY2()>();

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $d2 = virtualinvoke r0.<java.awt.geom.Line2D: double getY1()>();

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $b1 = $d2 cmpg $d3;

        if $b1 >= 0 goto label2;

        return 0;

     label2:
        $d4 = virtualinvoke r0.<java.awt.geom.Line2D: double getY1()>();

        $d5 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $b2 = $d4 cmpl $d5;

        if $b2 <= 0 goto label3;

        return 0;

     label3:
        $d6 = virtualinvoke r0.<java.awt.geom.Line2D: double getX1()>();

        $d7 = virtualinvoke r0.<java.awt.geom.Line2D: double getX2()>();

        d8 = staticinvoke <java.lang.Math: double min(double,double)>($d6, $d7);

        $d9 = virtualinvoke r0.<java.awt.geom.Line2D: double getX1()>();

        $d10 = virtualinvoke r0.<java.awt.geom.Line2D: double getX2()>();

        d11 = staticinvoke <java.lang.Math: double max(double,double)>($d9, $d10);

        $d12 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $b3 = d11 cmpg $d12;

        if $b3 >= 0 goto label4;

        return 0;

     label4:
        $d13 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $b4 = d8 cmpl $d13;

        if $b4 <= 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UShape)
    {
        net.sourceforge.plantuml.ugraphic.UShape r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r2;
        net.sourceforge.plantuml.ugraphic.URectangle $r3;
        net.sourceforge.plantuml.ugraphic.UPolygon $r4;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        $z0 = r0 instanceof net.sourceforge.plantuml.ugraphic.UPolygon;

        if $z0 == 0 goto label1;

        $r4 = (net.sourceforge.plantuml.ugraphic.UPolygon) r0;

        specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: void drawPolygone(net.sourceforge.plantuml.ugraphic.UPolygon)>($r4);

        goto label3;

     label1:
        $z1 = r0 instanceof net.sourceforge.plantuml.ugraphic.URectangle;

        if $z1 == 0 goto label2;

        $r3 = (net.sourceforge.plantuml.ugraphic.URectangle) r0;

        specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: void drawRectangle(net.sourceforge.plantuml.ugraphic.URectangle)>($r3);

        goto label3;

     label2:
        $z2 = r0 instanceof net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        if $z2 == 0 goto label3;

        $r2 = (net.sourceforge.plantuml.activitydiagram3.ftile.Snake) r0;

        specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: void drawSnake(net.sourceforge.plantuml.activitydiagram3.ftile.Snake)>($r2);

     label3:
        return;
    }

    private void drawSnake(net.sourceforge.plantuml.activitydiagram3.ftile.Snake)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context $r1, $r2;
        boolean $z0;
        java.util.List $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r4, $r6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r4 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context>;

        $z0 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: boolean access$100(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context>;

        $r3 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List access$200(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context)>($r2);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate()>();

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake translate(net.sourceforge.plantuml.ugraphic.UTranslate)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label1:
        return;
    }

    private void drawRectangle(net.sourceforge.plantuml.ugraphic.URectangle)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context $r1;
        java.util.List $r2;
        net.sourceforge.plantuml.ugraphic.URectangle r3;
        net.sourceforge.plantuml.ugraphic.MinMax $r4, $r6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.URectangle;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context>;

        $r2 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List access$300(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context)>($r1);

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.MinMax getMinMax()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate()>();

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax translate(net.sourceforge.plantuml.ugraphic.UTranslate)>($r5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    private void drawPolygone(net.sourceforge.plantuml.ugraphic.UPolygon)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context $r1;
        java.util.List $r2;
        net.sourceforge.plantuml.ugraphic.UPolygon r3;
        net.sourceforge.plantuml.ugraphic.MinMax $r4, $r6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UPolygon;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context>;

        $r2 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List access$300(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context)>($r1);

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UPolygon: net.sourceforge.plantuml.ugraphic.MinMax getMinMax()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate()>();

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax translate(net.sourceforge.plantuml.ugraphic.UTranslate)>($r5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    public void drawDebug(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context>;

        virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: void drawDebug(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        return;
    }

    public final void setManageSnakes(boolean)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector r0;
        boolean z0;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector;

        z0 := @parameter0: boolean;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context context>;

        staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: boolean access$102(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context,boolean)>($r1, z0);

        return;
    }

    static boolean access$000(net.sourceforge.plantuml.ugraphic.MinMax, java.awt.geom.Line2D)
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        java.awt.geom.Line2D r1;
        boolean $z0;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMax;

        r1 := @parameter1: java.awt.geom.Line2D;

        $z0 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: boolean collisionCheck(net.sourceforge.plantuml.ugraphic.MinMax,java.awt.geom.Line2D)>(r0, r1);

        return $z0;
    }
}
