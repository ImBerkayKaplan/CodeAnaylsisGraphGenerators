public class net.sourceforge.plantuml.svek.DotStringFactory extends java.lang.Object implements net.sourceforge.plantuml.posimo.Moveable
{
    private final net.sourceforge.plantuml.svek.Bibliotekon bibliotekon;
    private final java.util.Set rankMin;
    private final net.sourceforge.plantuml.svek.ColorSequence colorSequence;
    private final net.sourceforge.plantuml.svek.Cluster root;
    private net.sourceforge.plantuml.svek.Cluster current;
    private final net.sourceforge.plantuml.UmlDiagramType umlDiagramType;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.svek.DotMode dotMode;
    private net.sourceforge.plantuml.cucadiagram.dot.DotSplines dotSplines;
    private final net.sourceforge.plantuml.graphic.StringBounder stringBounder;
    private net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion graphvizVersion;

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.cucadiagram.dot.DotData)
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1;
        java.util.HashSet $r2;
        net.sourceforge.plantuml.cucadiagram.dot.DotData r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r11;
        net.sourceforge.plantuml.UmlDiagramType $r5;
        net.sourceforge.plantuml.svek.DotMode $r6;
        net.sourceforge.plantuml.svek.ColorSequence $r7, $r10;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        net.sourceforge.plantuml.svek.Cluster $r9, $r13;
        net.sourceforge.plantuml.cucadiagram.IGroup $r12;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.dot.DotData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.svek.Bibliotekon;

        specialinvoke $r1.<net.sourceforge.plantuml.svek.Bibliotekon: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: java.util.Set rankMin> = $r2;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam> = $r4;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.UmlDiagramType umlDiagramType> = $r5;

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.svek.DotMode getDotMode()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.DotMode dotMode> = $r6;

        $r7 = new net.sourceforge.plantuml.svek.ColorSequence;

        specialinvoke $r7.<net.sourceforge.plantuml.svek.ColorSequence: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence colorSequence> = $r7;

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = r8;

        $r9 = new net.sourceforge.plantuml.svek.Cluster;

        $r10 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence colorSequence>;

        $r11 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r12 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.cucadiagram.IGroup getRootGroup()>();

        specialinvoke $r9.<net.sourceforge.plantuml.svek.Cluster: void <init>(net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IGroup)>($r10, $r11, $r12);

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster root> = $r9;

        $r13 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster root>;

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current> = $r13;

        return;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.cucadiagram.CucaDiagram)
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1;
        java.util.HashSet $r2;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r11;
        net.sourceforge.plantuml.UmlDiagramType $r5;
        net.sourceforge.plantuml.svek.DotMode $r6;
        net.sourceforge.plantuml.svek.ColorSequence $r7, $r10;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        net.sourceforge.plantuml.svek.Cluster $r9, $r14;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory $r12;
        net.sourceforge.plantuml.cucadiagram.IGroup $r13;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.CucaDiagram;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.svek.Bibliotekon;

        specialinvoke $r1.<net.sourceforge.plantuml.svek.Bibliotekon: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: java.util.Set rankMin> = $r2;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam> = $r4;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.UmlDiagramType umlDiagramType> = $r5;

        $r6 = <net.sourceforge.plantuml.svek.DotMode: net.sourceforge.plantuml.svek.DotMode NORMAL>;

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.DotMode dotMode> = $r6;

        $r7 = new net.sourceforge.plantuml.svek.ColorSequence;

        specialinvoke $r7.<net.sourceforge.plantuml.svek.ColorSequence: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence colorSequence> = $r7;

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = r8;

        $r9 = new net.sourceforge.plantuml.svek.Cluster;

        $r10 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence colorSequence>;

        $r11 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r12 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory getEntityFactory()>();

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: net.sourceforge.plantuml.cucadiagram.IGroup getRootGroup()>();

        specialinvoke $r9.<net.sourceforge.plantuml.svek.Cluster: void <init>(net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IGroup)>($r10, $r11, $r13);

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster root> = $r9;

        $r14 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster root>;

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current> = $r14;

        return;
    }

    public void addNode(net.sourceforge.plantuml.svek.SvekNode)
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.SvekNode r1;
        net.sourceforge.plantuml.svek.Cluster $r2;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r1 := @parameter0: net.sourceforge.plantuml.svek.SvekNode;

        $r2 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current>;

        virtualinvoke $r2.<net.sourceforge.plantuml.svek.Cluster: void addNode(net.sourceforge.plantuml.svek.SvekNode)>(r1);

        return;
    }

    private void printMinRanking(java.lang.StringBuilder)
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        java.util.Set $r1, $r4;
        int $i0;
        java.lang.StringBuilder r2;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.String r8;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r2 := @parameter0: java.lang.StringBuilder;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: java.util.Set rankMin>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{ rank = min;");

        $r4 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: java.util.Set rankMin>;

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        goto label2;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        return;
    }

    private double getHorizontalDzeta()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        double $d0, d1, d2;
        java.lang.Object $r4;
        net.sourceforge.plantuml.svek.SvekLine r5;
        net.sourceforge.plantuml.graphic.StringBounder $r6;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        d2 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.svek.SvekLine) $r4;

        $r6 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        d1 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekLine: double getHorizontalDzeta(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $b0 = d1 cmpl d2;

        if $b0 <= 0 goto label2;

        d2 = d1;

     label2:
        goto label1;

     label3:
        $d0 = d2 / 10.0;

        return $d0;
    }

    private double getVerticalDzeta()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        double $d0, d1, d2;
        java.lang.Object $r4;
        net.sourceforge.plantuml.svek.SvekLine r5;
        net.sourceforge.plantuml.graphic.StringBounder $r6;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        d2 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.svek.SvekLine) $r4;

        $r6 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        d1 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekLine: double getVerticalDzeta(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $b0 = d1 cmpl d2;

        if $b0 <= 0 goto label2;

        d2 = d1;

     label2:
        goto label1;

     label3:
        $d0 = d2 / 10.0;

        return $d0;
    }

    transient java.lang.String createDotString(java.lang.String[])
    {
        java.lang.StringBuilder $r0, $r51, $r52, $r53, $r54, $r57, $r58, $r59, $r60;
        net.sourceforge.plantuml.svek.DotStringFactory r2;
        int $i0, $i3, $i6, $i7, i8, i9;
        double $d0, $d1, $d2, $d3, d4, d5;
        byte $b1, $b2, $b4, $b5;
        net.sourceforge.plantuml.ISkinParam $r3, $r5, $r11, $r63, $r64, $r66;
        java.lang.String r4, r6, $r36, r49, $r55, $r61;
        java.lang.String[] r8;
        net.sourceforge.plantuml.cucadiagram.dot.DotSplines $r12, $r13, $r14, $r15, $r16, $r39, $r43;
        net.sourceforge.plantuml.svek.Bibliotekon $r17, $r21, $r25, $r33;
        net.sourceforge.plantuml.svek.Cluster $r18, $r24, $r26;
        java.util.List $r19, $r22, $r27, $r34;
        net.sourceforge.plantuml.graphic.StringBounder $r20, $r28;
        java.util.Set $r23;
        net.sourceforge.plantuml.svek.DotMode $r29, $r40, $r44;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion $r30, $r38, $r42;
        net.sourceforge.plantuml.UmlDiagramType $r31;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r37, $r41;
        net.sourceforge.plantuml.cucadiagram.Rankdir $r67, $r68;
        java.util.Iterator r69, r71;
        net.sourceforge.plantuml.svek.SvekLine r70, r72;

        r2 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r8 := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        d4 = specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: double getHorizontalDzeta()>();

        $i0 = specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: int getMinNodeSep()>();

        $d0 = (double) $i0;

        $b1 = d4 cmpg $d0;

        if $b1 >= 0 goto label01;

        $i7 = specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: int getMinNodeSep()>();

        d4 = (double) $i7;

     label01:
        $r3 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $d1 = interfaceinvoke $r3.<net.sourceforge.plantuml.ISkinParam: double getNodesep()>();

        $b2 = $d1 cmpl 0.0;

        if $b2 == 0 goto label02;

        $r64 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        d4 = interfaceinvoke $r64.<net.sourceforge.plantuml.ISkinParam: double getNodesep()>();

     label02:
        r4 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: java.lang.String pixelToInches(double)>(d4);

        d5 = specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: double getVerticalDzeta()>();

        $i3 = specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: int getMinRankSep()>();

        $d2 = (double) $i3;

        $b4 = d5 cmpg $d2;

        if $b4 >= 0 goto label03;

        $i6 = specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: int getMinRankSep()>();

        d5 = (double) $i6;

     label03:
        $r5 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $d3 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: double getRanksep()>();

        $b5 = $d3 cmpl 0.0;

        if $b5 == 0 goto label04;

        $r63 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        d5 = interfaceinvoke $r63.<net.sourceforge.plantuml.ISkinParam: double getRanksep()>();

     label04:
        r6 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: java.lang.String pixelToInches(double)>(d5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("digraph unix {");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

        i8 = lengthof r8;

        i9 = 0;

     label05:
        if i9 >= i8 goto label09;

        r49 = r8[i9];

        $z1 = virtualinvoke r49.<java.lang.String: boolean startsWith(java.lang.String)>("ranksep");

        if $z1 == 0 goto label06;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ranksep=");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        goto label08;

     label06:
        $z2 = virtualinvoke r49.<java.lang.String: boolean startsWith(java.lang.String)>("nodesep");

        if $z2 == 0 goto label07;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nodesep=");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        goto label08;

     label07:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

     label08:
        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

        i9 = i9 + 1;

        goto label05;

     label09:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remincross=true;");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("searchsize=500;");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

        $r11 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.cucadiagram.dot.DotSplines getDotSplines()>();

        r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.DotSplines dotSplines> = $r12;

        $r14 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.DotSplines dotSplines>;

        $r13 = <net.sourceforge.plantuml.cucadiagram.dot.DotSplines: net.sourceforge.plantuml.cucadiagram.dot.DotSplines POLYLINE>;

        if $r14 != $r13 goto label10;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splines=polyline;");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

        goto label11;

     label10:
        $r16 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.DotSplines dotSplines>;

        $r15 = <net.sourceforge.plantuml.cucadiagram.dot.DotSplines: net.sourceforge.plantuml.cucadiagram.dot.DotSplines ORTHO>;

        if $r16 != $r15 goto label11;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splines=ortho;");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forcelabels=true;");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

     label11:
        $r66 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r67 = interfaceinvoke $r66.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.cucadiagram.Rankdir getRankdir()>();

        $r68 = <net.sourceforge.plantuml.cucadiagram.Rankdir: net.sourceforge.plantuml.cucadiagram.Rankdir LEFT_TO_RIGHT>;

        if $r67 != $r68 goto label12;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rankdir=LR;");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

     label12:
        specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: void manageMinMaxCluster(java.lang.StringBuilder)>($r0);

        $r18 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster root>;

        $r17 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r19 = virtualinvoke $r17.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        $r20 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        virtualinvoke $r18.<net.sourceforge.plantuml.svek.Cluster: void printCluster1(java.lang.StringBuilder,java.util.Collection,net.sourceforge.plantuml.graphic.StringBounder)>($r0, $r19, $r20);

        $r21 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0()>();

        r69 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z3 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r41 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        r70 = (net.sourceforge.plantuml.svek.SvekLine) $r41;

        $r42 = virtualinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion()>();

        $r44 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.DotMode dotMode>;

        $r43 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.DotSplines dotSplines>;

        virtualinvoke r70.<net.sourceforge.plantuml.svek.SvekLine: void appendLine(net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,java.lang.StringBuilder,net.sourceforge.plantuml.svek.DotMode,net.sourceforge.plantuml.cucadiagram.dot.DotSplines)>($r42, $r0, $r44, $r43);

        goto label13;

     label14:
        $r24 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster root>;

        $r23 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: java.util.Set rankMin>;

        virtualinvoke $r24.<net.sourceforge.plantuml.svek.Cluster: void fillRankMin(java.util.Set)>($r23);

        $r26 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster root>;

        $r25 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r27 = virtualinvoke $r25.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        $r28 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $r29 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.DotMode dotMode>;

        $r30 = virtualinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion()>();

        $r31 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.UmlDiagramType umlDiagramType>;

        virtualinvoke $r26.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.SvekNode printCluster2(java.lang.StringBuilder,java.util.Collection,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.svek.DotMode,net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.UmlDiagramType)>($r0, $r27, $r28, $r29, $r30, $r31);

        specialinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: void printMinRanking(java.lang.StringBuilder)>($r0);

        $r33 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r34 = virtualinvoke $r33.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines1()>();

        r71 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke r71.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r37 = interfaceinvoke r71.<java.util.Iterator: java.lang.Object next()>();

        r72 = (net.sourceforge.plantuml.svek.SvekLine) $r37;

        $r38 = virtualinvoke r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion()>();

        $r40 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.DotMode dotMode>;

        $r39 = r2.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.DotSplines dotSplines>;

        virtualinvoke r72.<net.sourceforge.plantuml.svek.SvekLine: void appendLine(net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,java.lang.StringBuilder,net.sourceforge.plantuml.svek.DotMode,net.sourceforge.plantuml.cucadiagram.dot.DotSplines)>($r38, $r0, $r40, $r39);

        goto label15;

     label16:
        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>($r0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r36 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r36;
    }

    private void manageMinMaxCluster(java.lang.StringBuilder)
    {
        java.util.ArrayList $r0, $r2;
        net.sourceforge.plantuml.svek.DotStringFactory r4;
        net.sourceforge.plantuml.svek.Bibliotekon $r5;
        java.util.List $r6;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.lang.StringBuilder r7;
        java.lang.Object $r10, $r16, $r20;
        net.sourceforge.plantuml.UmlDiagramType $r21, $r23;
        java.lang.String r22, r24, r28, r30;
        java.util.Iterator r25, r27, r29;
        net.sourceforge.plantuml.svek.Cluster r26;

        r4 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r7 := @parameter0: java.lang.StringBuilder;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r5 = r4.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster()>();

        r25 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r20 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (net.sourceforge.plantuml.svek.Cluster) $r20;

        $r21 = r4.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.UmlDiagramType umlDiagramType>;

        r22 = virtualinvoke r26.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getMinPoint(net.sourceforge.plantuml.UmlDiagramType)>($r21);

        if r22 == null goto label02;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r22);

     label02:
        $r23 = r4.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.UmlDiagramType umlDiagramType>;

        r24 = virtualinvoke r26.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getMaxPoint(net.sourceforge.plantuml.UmlDiagramType)>($r23);

        if r24 == null goto label03;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r24);

     label03:
        goto label01;

     label04:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label07;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{rank=min;");

        r27 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r16 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.lang.String) $r16;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=point,width=.01,label=\"\"]");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        goto label05;

     label06:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r7);

     label07:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label10;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{rank=max;");

        r29 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r10 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.lang.String) $r10;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=point,width=.01,label=\"\"]");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        goto label08;

     label09:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r7);

     label10:
        return;
    }

    private int getMinRankSep()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.UmlDiagramType $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r2 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.UmlDiagramType umlDiagramType>;

        $r1 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType ACTIVITY>;

        if $r2 != $r1 goto label1;

        return 40;

     label1:
        return 60;
    }

    private int getMinNodeSep()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.UmlDiagramType $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r2 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.UmlDiagramType umlDiagramType>;

        $r1 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType ACTIVITY>;

        if $r2 != $r1 goto label1;

        return 20;

     label1:
        return 35;
    }

    public net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion $r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion graphvizVersion>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersionInternal()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion graphvizVersion> = $r3;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion graphvizVersion>;

        return $r2;
    }

    private net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersionInternal()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        java.lang.String[] $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.cucadiagram.dot.Graphviz r3;
        boolean $z0;
        java.io.File r4;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersions $r5;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion $r6, $r7;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r2 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "svg";

        r3 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: net.sourceforge.plantuml.cucadiagram.dot.Graphviz create(net.sourceforge.plantuml.ISkinParam,java.lang.String,java.lang.String[])>($r2, "foo;", $r1);

        $z0 = r3 instanceof net.sourceforge.plantuml.vizjs.GraphvizJs;

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <net.sourceforge.plantuml.vizjs.GraphvizJs: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion(boolean)>(0);

        return $r7;

     label1:
        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.dot.Graphviz: java.io.File getDotExe()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersions: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersions getInstance()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersions: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getVersion(java.io.File)>(r4);

        return $r6;
    }

    public java.lang.String getSvg(net.sourceforge.plantuml.BaseFile, java.lang.String[]) throws java.io.IOException
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        java.lang.String[] r1, $r3, $r19;
        net.sourceforge.plantuml.BaseFile r2;
        net.sourceforge.plantuml.ISkinParam $r4, $r20;
        java.io.ByteArrayOutputStream $r5, $r21, r32;
        net.sourceforge.plantuml.cucadiagram.dot.ProcessState $r6, $r22, r33, r37;
        boolean $z0, $z1;
        java.lang.String $r7, $r14, $r27, r29, r35;
        java.nio.charset.Charset $r8;
        net.sourceforge.plantuml.security.SFile r9, r30;
        java.lang.IllegalStateException $r10, $r23;
        java.lang.StringBuilder $r11, $r12, $r13, $r24, $r25, $r26;
        java.lang.Throwable $r15, $r28;
        net.sourceforge.plantuml.vizjs.GraphvizJsRuntimeException $r16;
        java.io.PrintStream $r17;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion $r18;
        net.sourceforge.plantuml.cucadiagram.dot.Graphviz r31, r36;
        byte[] r38;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r2 := @parameter0: net.sourceforge.plantuml.BaseFile;

        r1 := @parameter1: java.lang.String[];

        r29 = virtualinvoke r0.<net.sourceforge.plantuml.svek.DotStringFactory: java.lang.String createDotString(java.lang.String[])>(r1);

        if r2 == null goto label1;

        r30 = virtualinvoke r2.<net.sourceforge.plantuml.BaseFile: net.sourceforge.plantuml.security.SFile getTraceFile(java.lang.String)>("svek.dot");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void traceString(net.sourceforge.plantuml.security.SFile,java.lang.String)>(r30, r29);

     label1:
        $r4 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "svg";

        r31 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: net.sourceforge.plantuml.cucadiagram.dot.Graphviz create(net.sourceforge.plantuml.ISkinParam,java.lang.String,java.lang.String[])>($r4, r29, $r3);

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r32 = $r5;

     label2:
        r33 = interfaceinvoke r31.<net.sourceforge.plantuml.cucadiagram.dot.Graphviz: net.sourceforge.plantuml.cucadiagram.dot.ProcessState createFile3(java.io.OutputStream)>($r5);

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void close()>();

        $r6 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.ProcessState: net.sourceforge.plantuml.cucadiagram.dot.ProcessState TERMINATED_OK()>();

        $z0 = virtualinvoke r33.<net.sourceforge.plantuml.cucadiagram.dot.ProcessState: boolean differs(net.sourceforge.plantuml.cucadiagram.dot.ProcessState)>($r6);

        if $z0 == 0 goto label3;

        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout4 ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r33.<net.sourceforge.plantuml.cucadiagram.dot.ProcessState: java.lang.Throwable getCause()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r15);

        throw $r10;

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("GraphvizJsRuntimeException");

        $r18 = staticinvoke <net.sourceforge.plantuml.vizjs.GraphvizJs: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion(boolean)>(1);

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion graphvizVersion> = $r18;

        r35 = virtualinvoke r0.<net.sourceforge.plantuml.svek.DotStringFactory: java.lang.String createDotString(java.lang.String[])>(r1);

        $r20 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r19 = newarray (java.lang.String)[1];

        $r19[0] = "svg";

        r36 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: net.sourceforge.plantuml.cucadiagram.dot.Graphviz create(net.sourceforge.plantuml.ISkinParam,java.lang.String,java.lang.String[])>($r20, r35, $r19);

        $r21 = new java.io.ByteArrayOutputStream;

        specialinvoke $r21.<java.io.ByteArrayOutputStream: void <init>()>();

        r32 = $r21;

        r37 = interfaceinvoke r36.<net.sourceforge.plantuml.cucadiagram.dot.Graphviz: net.sourceforge.plantuml.cucadiagram.dot.ProcessState createFile3(java.io.OutputStream)>($r21);

        virtualinvoke $r21.<java.io.ByteArrayOutputStream: void close()>();

        $r22 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.ProcessState: net.sourceforge.plantuml.cucadiagram.dot.ProcessState TERMINATED_OK()>();

        $z1 = virtualinvoke r37.<net.sourceforge.plantuml.cucadiagram.dot.ProcessState: boolean differs(net.sourceforge.plantuml.cucadiagram.dot.ProcessState)>($r22);

        if $z1 == 0 goto label5;

        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout4 ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke r37.<net.sourceforge.plantuml.cucadiagram.dot.ProcessState: java.lang.Throwable getCause()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r27, $r28);

        throw $r23;

     label5:
        r38 = virtualinvoke r32.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r7 = new java.lang.String;

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r38, $r8);

        if r2 == null goto label6;

        r9 = virtualinvoke r2.<net.sourceforge.plantuml.BaseFile: net.sourceforge.plantuml.security.SFile getTraceFile(java.lang.String)>("svek.svg");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void traceString(net.sourceforge.plantuml.security.SFile,java.lang.String)>(r9, $r7);

     label6:
        return $r7;

        catch net.sourceforge.plantuml.vizjs.GraphvizJsRuntimeException from label2 to label3 with label4;
    }

    public boolean illegalDotExe()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        java.lang.String[] $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.cucadiagram.dot.Graphviz r3;
        boolean $z0, $z1, $z2, $z3;
        java.io.File r4;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r2 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = newarray (java.lang.String)[0];

        r3 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: net.sourceforge.plantuml.cucadiagram.dot.Graphviz create(net.sourceforge.plantuml.ISkinParam,java.lang.String,java.lang.String[])>($r2, "svg", $r1);

        $z0 = r3 instanceof net.sourceforge.plantuml.vizjs.GraphvizJs;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.dot.Graphviz: java.io.File getDotExe()>();

        if r4 == null goto label2;

        $z1 = virtualinvoke r4.<java.io.File: boolean isFile()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r4.<java.io.File: boolean canRead()>();

        if $z2 != 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public java.io.File getDotExe()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        java.lang.String[] $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.cucadiagram.dot.Graphviz r3;
        java.io.File $r4;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r2 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = newarray (java.lang.String)[0];

        r3 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: net.sourceforge.plantuml.cucadiagram.dot.Graphviz create(net.sourceforge.plantuml.ISkinParam,java.lang.String,java.lang.String[])>($r2, "svg", $r1);

        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.dot.Graphviz: java.io.File getDotExe()>();

        return $r4;
    }

    public void solve(boolean, net.sourceforge.plantuml.cucadiagram.entity.EntityFactory, java.lang.String) throws java.io.IOException, java.lang.InterruptedException
    {
        java.lang.String r0, $r3, $r33, $r36, $r63, $r66, $r68;
        int $i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i17, i19;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher r2;
        boolean $z0, $z1, $z2, $z3, z4, $z6;
        net.sourceforge.plantuml.svek.YDelta $r4;
        double $d0, d1, d2, d3, d5, d6, d7, d8, d9, d10, d11, $d12, $d13, d14, d15, d16, $d17, $d18, d19, d20, d21;
        net.sourceforge.plantuml.svek.SvgResult $r6, $r22, $r23, $r51, $r69, $r70, $r72, $r77;
        net.sourceforge.plantuml.svek.DotStringFactory r8;
        net.sourceforge.plantuml.svek.Bibliotekon $r9, $r11, $r13, $r15, $r18;
        java.util.Collection $r10, $r19;
        java.util.List $r12, $r14, $r16, r24, $r71, r78, r80, r81, r85;
        java.lang.Object $r17, $r20, $r21, $r27, $r30;
        java.util.Set $r25;
        java.util.Iterator $r26, r75, r82, r86, r88;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory r28;
        net.sourceforge.plantuml.cucadiagram.IGroup $r29, r84;
        java.lang.StringBuilder $r31, $r32, $r34, $r35, $r61, $r64, $r65, $r67;
        net.sourceforge.plantuml.svek.ShapeType $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r62;
        java.lang.IllegalStateException $r60, $r73;
        net.sourceforge.plantuml.svek.EmptySvgException $r74;
        net.sourceforge.plantuml.svek.SvekNode r76;
        net.sourceforge.plantuml.graphic.StringBounder $r79;
        net.sourceforge.plantuml.svek.Cluster r83;
        net.sourceforge.plantuml.svek.SvekLine r87, r89;

        r8 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        z4 := @parameter0: boolean;

        r28 := @parameter1: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory;

        r0 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        $r74 = new net.sourceforge.plantuml.svek.EmptySvgException;

        specialinvoke $r74.<net.sourceforge.plantuml.svek.EmptySvgException: void <init>()>();

        throw $r74;

     label01:
        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?m)\\<svg\\s+width=\"(\\d+)pt\"\\s+height=\"(\\d+)pt\"");

        r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label02;

        $r73 = new java.lang.IllegalStateException;

        specialinvoke $r73.<java.lang.IllegalStateException: void <init>()>();

        throw $r73;

     label02:
        $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = new net.sourceforge.plantuml.svek.YDelta;

        $d0 = (double) i1;

        specialinvoke $r4.<net.sourceforge.plantuml.svek.YDelta: void <init>(double)>($d0);

        $r6 = new net.sourceforge.plantuml.svek.SvgResult;

        specialinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: void <init>(java.lang.String,net.sourceforge.plantuml.svek.Point2DFunction)>(r0, $r4);

        $r9 = r8.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Collection allNodes()>();

        r75 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r30 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        r76 = (net.sourceforge.plantuml.svek.SvekNode) $r30;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<title>");

        $r33 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</title>");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        i11 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r36);

        $r37 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r38 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        if $r37 == $r38 goto label04;

        $r39 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r40 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_HTML_FOR_PORTS>;

        if $r39 == $r40 goto label04;

        $r41 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r42 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_WITH_CIRCLE_INSIDE>;

        if $r41 == $r42 goto label04;

        $r43 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r44 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType FOLDER>;

        if $r43 == $r44 goto label04;

        $r45 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r46 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType DIAMOND>;

        if $r45 != $r46 goto label05;

     label04:
        $r77 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i11);

        r78 = virtualinvoke $r77.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("points=\"");

        d6 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinY(java.util.List)>(r78);

        $r79 = r8.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)>($r79);

        d5 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinX(java.util.List)>(r78);

        virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: void moveSvek(double,double)>(d5, d6);

        goto label15;

     label05:
        $r47 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r48 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType ROUND_RECTANGLE>;

        if $r47 != $r48 goto label10;

        $i8 = i11 + 1;

        i12 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("d=\"", $i8);

        $i9 = i11 + 1;

        i13 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("points=\"", $i9);

        if i12 == -1 goto label07;

        if i13 == -1 goto label06;

        if i12 >= i13 goto label07;

     label06:
        $r72 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i12);

        r80 = virtualinvoke $r72.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("d=\"");

        goto label09;

     label07:
        $r69 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i13);

        r80 = virtualinvoke $r69.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("points=\"");

        i14 = 0;

     label08:
        if i14 >= 3 goto label09;

        $i10 = i13 + 1;

        i13 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("points=\"", $i10);

        $r70 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i13);

        $r71 = virtualinvoke $r70.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("points=\"");

        interfaceinvoke r80.<java.util.List: boolean addAll(java.util.Collection)>($r71);

        i14 = i14 + 1;

        goto label08;

     label09:
        d7 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinX(java.util.List)>(r80);

        d8 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinY(java.util.List)>(r80);

        virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: void moveSvek(double,double)>(d7, d8);

        goto label15;

     label10:
        $r49 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r50 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType OCTAGON>;

        if $r49 == $r50 goto label11;

        $r52 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r53 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType HEXAGON>;

        if $r52 != $r53 goto label12;

     label11:
        $i7 = i11 + 1;

        i15 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("points=\"", $i7);

        $r51 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i15);

        r81 = virtualinvoke $r51.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("points=\"");

        d9 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinX(java.util.List)>(r81);

        d10 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinY(java.util.List)>(r81);

        virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: void moveSvek(double,double)>(d9, d10);

        virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: void setPolygon(double,double,java.util.List)>(d9, d10, r81);

        goto label15;

     label12:
        $r54 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r55 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType CIRCLE>;

        if $r54 == $r55 goto label13;

        $r56 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r57 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType CIRCLE_IN_RECT>;

        if $r56 == $r57 goto label13;

        $r58 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r59 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType OVAL>;

        if $r58 != $r59 goto label14;

     label13:
        d11 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getValue(java.lang.String,int,java.lang.String)>(r0, i11, "cx");

        $d12 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getValue(java.lang.String,int,java.lang.String)>(r0, i11, "cy");

        $d13 = (double) i1;

        d14 = $d12 + $d13;

        d15 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getValue(java.lang.String,int,java.lang.String)>(r0, i11, "rx");

        d16 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getValue(java.lang.String,int,java.lang.String)>(r0, i11, "ry");

        $d17 = d11 - d15;

        $d18 = d14 - d16;

        virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: void moveSvek(double,double)>($d17, $d18);

        goto label15;

     label14:
        $r60 = new java.lang.IllegalStateException;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r63 = virtualinvoke $r62.<net.sourceforge.plantuml.svek.ShapeType: java.lang.String toString()>();

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r66 = virtualinvoke r76.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r68);

        throw $r60;

     label15:
        goto label03;

     label16:
        $r11 = r8.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster()>();

        r82 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z6 = interfaceinvoke r82.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label20;

        $r21 = interfaceinvoke r82.<java.util.Iterator: java.lang.Object next()>();

        r83 = (net.sourceforge.plantuml.svek.Cluster) $r21;

        if z4 == 0 goto label18;

        $r25 = virtualinvoke r83.<net.sourceforge.plantuml.svek.Cluster: java.util.Set getGroups()>();

        $r26 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r84 = (net.sourceforge.plantuml.cucadiagram.IGroup) $r27;

        $r29 = virtualinvoke r28.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: net.sourceforge.plantuml.cucadiagram.IGroup isIntricated(net.sourceforge.plantuml.cucadiagram.IGroup)>(r84);

        if $r29 == null goto label18;

        goto label17;

     label18:
        $i2 = virtualinvoke r83.<net.sourceforge.plantuml.svek.Cluster: int getColor()>();

        i17 = specialinvoke r8.<net.sourceforge.plantuml.svek.DotStringFactory: int getClusterIndex(java.lang.String,int)>(r0, $i2);

        $r22 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i17);

        r85 = virtualinvoke $r22.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("points=\"");

        d19 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinX(java.util.List)>(r85);

        d20 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinY(java.util.List)>(r85);

        d21 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMaxX(java.util.List)>(r85);

        d1 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMaxY(java.util.List)>(r85);

        virtualinvoke r83.<net.sourceforge.plantuml.svek.Cluster: void setPosition(double,double,double,double)>(d19, d20, d21, d1);

        $i3 = virtualinvoke r83.<net.sourceforge.plantuml.svek.Cluster: int getTitleAndAttributeWidth()>();

        if $i3 == 0 goto label17;

        $i4 = virtualinvoke r83.<net.sourceforge.plantuml.svek.Cluster: int getTitleAndAttributeHeight()>();

        if $i4 != 0 goto label19;

        goto label17;

     label19:
        $i5 = virtualinvoke r83.<net.sourceforge.plantuml.svek.Cluster: int getTitleColor()>();

        i19 = specialinvoke r8.<net.sourceforge.plantuml.svek.DotStringFactory: int getClusterIndex(java.lang.String,int)>(r0, $i5);

        $r23 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i19);

        r24 = virtualinvoke $r23.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("points=\"");

        d2 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinX(java.util.List)>(r24);

        d3 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: double getMinY(java.util.List)>(r24);

        virtualinvoke r83.<net.sourceforge.plantuml.svek.Cluster: void setTitlePosition(double,double)>(d2, d3);

        goto label17;

     label20:
        $r13 = r8.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        r86 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z2 = interfaceinvoke r86.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label22;

        $r20 = interfaceinvoke r86.<java.util.Iterator: java.lang.Object next()>();

        r87 = (net.sourceforge.plantuml.svek.SvekLine) $r20;

        virtualinvoke r87.<net.sourceforge.plantuml.svek.SvekLine: void solveLine(net.sourceforge.plantuml.svek.SvgResult)>($r6);

        goto label21;

     label22:
        $r15 = r8.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z3 = interfaceinvoke r88.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label24;

        $r17 = interfaceinvoke r88.<java.util.Iterator: java.lang.Object next()>();

        r89 = (net.sourceforge.plantuml.svek.SvekLine) $r17;

        $r18 = r8.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r19 = virtualinvoke $r18.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Collection allNodes()>();

        virtualinvoke r89.<net.sourceforge.plantuml.svek.SvekLine: void manageCollision(java.util.Collection)>($r19);

        goto label23;

     label24:
        return;
    }

    private int getClusterIndex(java.lang.String, int)
    {
        int i0, i1;
        java.lang.String $r0, r1, r6, r7, $r12, r17;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r13, $r14, $r15, $r16;
        java.lang.IllegalStateException $r8;
        net.sourceforge.plantuml.svek.DotStringFactory r18;

        r18 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>(i0);

        r1 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>($r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String)>(r6);

        if i1 != -1 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stroke:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String)>(r17);

     label1:
        if i1 != -1 goto label2;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find color ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label2:
        return i1;
    }

    public void openCluster(int, int, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        int i0, i1;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2;
        net.sourceforge.plantuml.cucadiagram.IGroup r3;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.svek.ColorSequence $r5;
        net.sourceforge.plantuml.svek.Cluster $r6, $r7, $r8;
        net.sourceforge.plantuml.svek.Bibliotekon $r9;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter4: net.sourceforge.plantuml.cucadiagram.IGroup;

        $r6 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current>;

        $r5 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence colorSequence>;

        $r4 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.Cluster createChild(int,int,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IGroup)>(i0, i1, r1, r2, $r5, $r4, r3);

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current> = $r7;

        $r9 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r8 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current>;

        virtualinvoke $r9.<net.sourceforge.plantuml.svek.Bibliotekon: void addCluster(net.sourceforge.plantuml.svek.Cluster)>($r8);

        return;
    }

    public void closeCluster()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.Cluster $r1, $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.Cluster getParentCluster()>();

        if $r2 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.Cluster getParentCluster()>();

        r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Cluster current> = $r4;

        return;
    }

    public void moveSvek(double, double)
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1, $r3, $r5;
        java.util.Collection $r2;
        boolean $z0, $z1, $z2;
        java.util.List $r4, $r6;
        java.lang.Object $r7, $r8, $r9;
        double d0, d1;
        java.util.Iterator r10, r12, r14;
        net.sourceforge.plantuml.svek.SvekNode r11;
        net.sourceforge.plantuml.svek.SvekLine r13;
        net.sourceforge.plantuml.svek.Cluster r15;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Collection allNodes()>();

        r10 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (net.sourceforge.plantuml.svek.SvekNode) $r9;

        virtualinvoke r11.<net.sourceforge.plantuml.svek.SvekNode: void moveSvek(double,double)>(d0, d1);

        goto label1;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        r12 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (net.sourceforge.plantuml.svek.SvekLine) $r8;

        virtualinvoke r13.<net.sourceforge.plantuml.svek.SvekLine: void moveSvek(double,double)>(d0, d1);

        goto label3;

     label4:
        $r5 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster()>();

        r14 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (net.sourceforge.plantuml.svek.Cluster) $r7;

        virtualinvoke r15.<net.sourceforge.plantuml.svek.Cluster: void moveSvek(double,double)>(d0, d1);

        goto label5;

     label6:
        return;
    }

    public final net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        return $r1;
    }

    public net.sourceforge.plantuml.svek.ColorSequence getColorSequence()
    {
        net.sourceforge.plantuml.svek.DotStringFactory r0;
        net.sourceforge.plantuml.svek.ColorSequence $r1;

        r0 := @this: net.sourceforge.plantuml.svek.DotStringFactory;

        $r1 = r0.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.ColorSequence colorSequence>;

        return $r1;
    }
}
