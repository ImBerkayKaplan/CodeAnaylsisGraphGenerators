class net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox extends net.sourceforge.plantuml.sequencediagram.graphic.Arrow implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow;
    private final java.util.List noteBoxes;

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.graphic.Arrow, java.util.List)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r1;
        double $d0, d1, d2, d3, d4, d5, $d6, $d7;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.skin.ArrowComponent $r3;
        net.sourceforge.plantuml.Url $r4;
        java.util.ArrayList $r5;
        java.util.List r6, $r7;
        java.util.Iterator r8;
        boolean $z1;
        java.lang.Object $r9;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        r6 := @parameter2: java.util.List;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getStartingY()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.Url getUrl()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void <init>(double,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.skin.ArrowComponent,net.sourceforge.plantuml.Url)>($d0, $r2, $r3, $r4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: java.util.List noteBoxes> = $r5;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow> = r1;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: java.util.List noteBoxes>;

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>(r6);

        r8 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r9;

        d1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        d2 = virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        d3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        d4 = d3 - d1;

        d5 = d3 - d2;

        $b0 = d4 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $d7 = d4 / 2.0;

        virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void pushToDown(double)>($d7);

     label2:
        $b1 = d5 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $d6 = d5 / 2.0;

        virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: void pushToDown(double)>($d6);

     label3:
        goto label1;

     label4:
        return;
    }

    public final double getArrowOnlyWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public void setMaxX(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void setMaxX(double)>(d0);

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void setMaxX(double)>(d0);

        return;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        double d0;
        net.sourceforge.plantuml.skin.Context2D r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r3;
        java.util.List $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>(r1, d0, r2);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: java.util.List noteBoxes>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r6;

        virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>(r1, d0, r2);

        goto label1;

     label2:
        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r6;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        d1 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: java.util.List noteBoxes>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r5;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2, $r3, $r10;
        double $d0, $d1, $d2, $d3, d4, d5, d6;
        java.util.List $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r7;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r8, $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        d4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d5 = staticinvoke <java.lang.Math: double max(double,double)>(d4, $d0);

        d6 = d5;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: java.util.List noteBoxes>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r6;

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d6 = d6 + $d1;

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition getNotePosition()>();

        $r9 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if $r8 != $r9 goto label2;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d2 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getStartingY()>();

        $d3 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getRightShift(double)>($d2);

        d6 = d6 + $d3;

     label2:
        goto label1;

     label3:
        return d6;
    }

    public double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r6;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        d1 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: java.util.List noteBoxes>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r5;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = staticinvoke <java.lang.Math: double min(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public int getDirection(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $i0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: int getDirection(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $i0;
    }

    public double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getArrowYEndLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getArrowYEndLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.NotePosition)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.NotePosition r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.NotePosition;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.NotePosition)>(r1, r2);

        return $r4;
    }
}
