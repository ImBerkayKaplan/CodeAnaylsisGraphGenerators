public class net.sourceforge.plantuml.tim.stdlib.JsonKeyExists extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.JsonKeyExists r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.JsonKeyExists;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.JsonKeyExists r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.JsonKeyExists;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%json_key_exists", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.JsonKeyExists r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.JsonKeyExists;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1, $r4;
        net.sourceforge.plantuml.tim.expression.TValue r2, r5, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String r6;
        net.sourceforge.plantuml.json.JsonObject r7;
        net.sourceforge.plantuml.tim.stdlib.JsonKeyExists r13;
        net.sourceforge.plantuml.tim.TContext r14;
        net.sourceforge.plantuml.tim.TMemory r15;
        net.sourceforge.plantuml.LineLocation r16;
        java.util.Map r17;

        r13 := @this: net.sourceforge.plantuml.tim.stdlib.JsonKeyExists;

        r14 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r15 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r16 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r17 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isJson()>();

        if $z0 != 0 goto label1;

        $r12 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>(0);

        return $r12;

     label1:
        r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isObject()>();

        if $z1 != 0 goto label2;

        $r11 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>(0);

        return $r11;

     label2:
        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        r5 = (net.sourceforge.plantuml.tim.expression.TValue) $r4;

        $z2 = virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TValue: boolean isString()>();

        if $z2 != 0 goto label3;

        $r10 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>(0);

        return $r10;

     label3:
        r6 = virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        r7 = (net.sourceforge.plantuml.json.JsonObject) r3;

        $z3 = virtualinvoke r7.<net.sourceforge.plantuml.json.JsonObject: boolean contains(java.lang.String)>(r6);

        if $z3 == 0 goto label4;

        $r9 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>(1);

        return $r9;

     label4:
        $r8 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromBoolean(boolean)>(0);

        return $r8;
    }
}
