public class net.sourceforge.plantuml.sequencediagram.graphic.Segment extends java.lang.Object
{
    private final double pos1;
    private final double pos2;
    static final boolean $assertionsDisabled;

    public void <init>(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0;
        double d0, d1;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2> = d1;

        $b0 = d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r1, r2;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        r0 := @parameter0: java.lang.Object;

        r1 = (net.sourceforge.plantuml.sequencediagram.graphic.Segment) r0;

        $d1 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $d0 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label1;

        $d3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $d2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $b1 = $d3 cmpl $d2;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0;
        double $d0, $d1;
        java.lang.Double $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i0 = virtualinvoke $r1.<java.lang.Double: int hashCode()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $i1 = virtualinvoke $r2.<java.lang.Double: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public final boolean contains(double)
    {
        double d0, $d1, $d2;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $b0 = d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $b1 = d0 cmpg $d2;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean contains(net.sourceforge.plantuml.sequencediagram.graphic.Segment)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0, r1;
        double $d0, $d1;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d0 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: boolean contains(double)>($d0);

        if $z0 == 0 goto label1;

        $d1 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: boolean contains(double)>($d1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r2;
        double $d0, $d1;
        java.lang.String $r6;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $d1 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public final double getLength()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public final double getPos1()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        return $d0;
    }

    public final double getPos2()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        return $d0;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.Segment merge(net.sourceforge.plantuml.sequencediagram.graphic.Segment)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d1 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $d0 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d0);

        $d4 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $d3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d4, $d3);

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: void <init>(double,double)>($d2, $d5);

        return $r0;
    }

    public java.util.Collection cutSegmentIfNeed(java.util.Collection)
    {
        java.util.ArrayList $r0, $r4;
        java.util.Collection r1, $r8, $r14;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment$SortPos1 $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r6, $r9, r11, $r12, $r15;
        java.util.Iterator r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        java.lang.Object $r10;
        boolean $z1, $z2, $z5;
        java.lang.AssertionError $r13;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r3 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment$SortPos1;

        specialinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Segment$SortPos1: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        d10 = r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        r7 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label8;

        $r10 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r11 = (net.sourceforge.plantuml.sequencediagram.graphic.Segment) $r10;

        $d2 = r11.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $b1 = $d2 cmpl d10;

        if $b1 != 0 goto label2;

        d10 = r11.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        goto label1;

     label2:
        $d3 = r11.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $b2 = $d3 cmpg d10;

        if $b2 >= 0 goto label3;

        goto label1;

     label3:
        $d5 = r11.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $d4 = r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $b3 = $d5 cmpl $d4;

        if $b3 <= 0 goto label5;

        $d8 = r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $b5 = d10 cmpg $d8;

        if $b5 >= 0 goto label4;

        $r15 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d9 = r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        specialinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: void <init>(double,double)>(d10, $d9);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r15);

     label4:
        $r14 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r4);

        return $r14;

     label5:
        $z1 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: boolean contains(net.sourceforge.plantuml.sequencediagram.graphic.Segment)>(r11);

        if $z1 == 0 goto label7;

        $z2 = <net.sourceforge.plantuml.sequencediagram.graphic.Segment: boolean $assertionsDisabled>;

        if $z2 != 0 goto label6;

        $d7 = r11.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        $b4 = d10 cmpg $d7;

        if $b4 < 0 goto label6;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label6:
        $r12 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d6 = r11.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        specialinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: void <init>(double,double)>(d10, $d6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r12);

        d10 = r11.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

     label7:
        goto label1;

     label8:
        $d0 = r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        $b0 = d10 cmpg $d0;

        if $b0 >= 0 goto label9;

        $r9 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d1 = r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos2>;

        specialinvoke $r9.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: void <init>(double,double)>(d10, $d1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

     label9:
        $r8 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r4);

        return $r8;
    }

    static double access$000(net.sourceforge.plantuml.sequencediagram.graphic.Segment)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r0;
        double $d0;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double pos1>;

        return $d0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/Segment;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.Segment: boolean $assertionsDisabled> = $z1;

        return;
    }
}
