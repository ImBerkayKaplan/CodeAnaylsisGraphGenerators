public class net.sourceforge.plantuml.salt.element.ListWidth extends java.lang.Object
{
    private final java.util.List allWidth;

    public void <init>()
    {
        net.sourceforge.plantuml.salt.element.ListWidth r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.salt.element.ListWidth;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth> = $r1;

        return;
    }

    public void add(double)
    {
        net.sourceforge.plantuml.salt.element.ListWidth r0;
        double d0;
        java.util.List $r1;
        java.lang.Double $r2;

        r0 := @this: net.sourceforge.plantuml.salt.element.ListWidth;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public net.sourceforge.plantuml.salt.element.ListWidth mergeMax(net.sourceforge.plantuml.salt.element.ListWidth)
    {
        net.sourceforge.plantuml.salt.element.ListWidth $r0, r2, r4;
        java.util.List $r3, $r5;
        int $i0, $i1, i2;
        double d0, d1, $d2;

        r2 := @this: net.sourceforge.plantuml.salt.element.ListWidth;

        r4 := @parameter0: net.sourceforge.plantuml.salt.element.ListWidth;

        $r0 = new net.sourceforge.plantuml.salt.element.ListWidth;

        specialinvoke $r0.<net.sourceforge.plantuml.salt.element.ListWidth: void <init>()>();

        i2 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 < $i0 goto label2;

        $r5 = r4.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i2 >= $i1 goto label3;

     label2:
        d0 = specialinvoke r2.<net.sourceforge.plantuml.salt.element.ListWidth: double getWidthSafe(int)>(i2);

        d1 = specialinvoke r4.<net.sourceforge.plantuml.salt.element.ListWidth: double getWidthSafe(int)>(i2);

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        virtualinvoke $r0.<net.sourceforge.plantuml.salt.element.ListWidth: void add(double)>($d2);

        i2 = i2 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private double getWidthSafe(int)
    {
        int i0, $i1;
        net.sourceforge.plantuml.salt.element.ListWidth r0;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        java.lang.Double $r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.salt.element.ListWidth;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        return $d0;

     label1:
        return 0.0;
    }

    public double getTotalWidthWithMargin(double)
    {
        net.sourceforge.plantuml.salt.element.ListWidth r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Double r4;
        byte $b0;
        double $d0, d1, d2;

        r0 := @this: net.sourceforge.plantuml.salt.element.ListWidth;

        d1 := @parameter0: double;

        d2 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Double) $r3;

        $b0 = d2 cmpl 0.0;

        if $b0 <= 0 goto label2;

        d2 = d2 + d1;

     label2:
        $d0 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        d2 = d2 + $d0;

        goto label1;

     label3:
        return d2;
    }

    public java.util.Iterator iterator()
    {
        net.sourceforge.plantuml.salt.element.ListWidth r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: net.sourceforge.plantuml.salt.element.ListWidth;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ListWidth: java.util.List allWidth>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }
}
