public class net.sourceforge.plantuml.tim.stdlib.Filename extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{
    private final java.lang.String value;

    public void <init>(net.sourceforge.plantuml.preproc.Defines)
    {
        net.sourceforge.plantuml.tim.stdlib.Filename r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Filename;

        r1 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.preproc.Defines: java.lang.String getEnvironmentValue(java.lang.String)>("filename");

        r0.<net.sourceforge.plantuml.tim.stdlib.Filename: java.lang.String value> = $r2;

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.Filename r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.Filename;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%filename", 0);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.Filename r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Filename;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.stdlib.Filename r0;
        java.lang.String $r1, $r2;
        net.sourceforge.plantuml.tim.expression.TValue $r3, $r4;
        net.sourceforge.plantuml.tim.TContext r5;
        net.sourceforge.plantuml.tim.TMemory r6;
        net.sourceforge.plantuml.LineLocation r7;
        java.util.List r8;
        java.util.Map r9;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Filename;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r6 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r7 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r8 := @parameter3: java.util.List;

        r9 := @parameter4: java.util.Map;

        $r1 = r0.<net.sourceforge.plantuml.tim.stdlib.Filename: java.lang.String value>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("");

        return $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.tim.stdlib.Filename: java.lang.String value>;

        $r3 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>($r2);

        return $r3;
    }
}
