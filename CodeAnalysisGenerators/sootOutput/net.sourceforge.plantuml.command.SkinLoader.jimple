public class net.sourceforge.plantuml.command.SkinLoader extends java.lang.Object
{
    public static final net.sourceforge.plantuml.command.regex.Pattern2 p1;
    private final java.util.List context;
    private final net.sourceforge.plantuml.TitledDiagram diagram;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.TitledDiagram)
    {
        net.sourceforge.plantuml.command.SkinLoader r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.TitledDiagram r2;

        r0 := @this: net.sourceforge.plantuml.command.SkinLoader;

        r2 := @parameter0: net.sourceforge.plantuml.TitledDiagram;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.command.SkinLoader: java.util.List context> = $r1;

        r0.<net.sourceforge.plantuml.command.SkinLoader: net.sourceforge.plantuml.TitledDiagram diagram> = r2;

        return;
    }

    private void push(java.lang.String)
    {
        net.sourceforge.plantuml.command.SkinLoader r0;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.command.SkinLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.command.SkinLoader: java.util.List context>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void pop()
    {
        net.sourceforge.plantuml.command.SkinLoader r0;
        java.util.List $r1, $r2;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.command.SkinLoader;

        $r2 = r0.<net.sourceforge.plantuml.command.SkinLoader: java.util.List context>;

        $r1 = r0.<net.sourceforge.plantuml.command.SkinLoader: java.util.List context>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        return;
    }

    private java.lang.String getFullParam()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.command.SkinLoader r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.String $r5, r7;
        java.lang.Object $r6;

        r2 := @this: net.sourceforge.plantuml.command.SkinLoader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.command.SkinLoader: java.util.List context>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult execute(net.sourceforge.plantuml.command.BlocLines, java.lang.String)
    {
        java.lang.String r0, $r5, $r7, $r9, $r10, $r14, $r17, $r20, $r22, r24, $r26, $r27, $r29;
        net.sourceforge.plantuml.command.BlocLines $r1, r33, r34, r35;
        net.sourceforge.plantuml.command.CommandExecutionResult $r2, $r32;
        java.lang.Object $r3;
        net.sourceforge.plantuml.StringLocated r4;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.command.regex.Pattern2 $r6;
        net.sourceforge.plantuml.command.regex.Matcher2 r8;
        java.lang.IllegalStateException $r11, $r28;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r18, $r21, $r23;
        net.sourceforge.plantuml.command.SkinLoader r19;
        net.sourceforge.plantuml.TitledDiagram $r25;
        int $i0;
        java.lang.AssertionError $r30;
        net.sourceforge.plantuml.style.NoStyleAvailableException $r31;
        java.util.Iterator r36;

        r19 := @this: net.sourceforge.plantuml.command.SkinLoader;

        r33 := @parameter0: net.sourceforge.plantuml.command.BlocLines;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        specialinvoke r19.<net.sourceforge.plantuml.command.SkinLoader: void push(java.lang.String)>(r0);

     label01:
        r34 = virtualinvoke r33.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines subExtract(int,int)>(1, 1);

        $r1 = virtualinvoke r34.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines trim()>();

        r35 = virtualinvoke $r1.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines removeEmptyLines()>();

        r36 = virtualinvoke r35.<net.sourceforge.plantuml.command.BlocLines: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r3 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.StringLocated) $r3;

        $z0 = <net.sourceforge.plantuml.command.SkinLoader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        $r29 = virtualinvoke r4.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $i0 = virtualinvoke $r29.<java.lang.String: int length()>();

        if $i0 > 0 goto label03;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label03:
        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("}");

        if $z1 == 0 goto label04;

        specialinvoke r19.<net.sourceforge.plantuml.command.SkinLoader: void pop()>();

        goto label02;

     label04:
        $r6 = <net.sourceforge.plantuml.command.SkinLoader: net.sourceforge.plantuml.command.regex.Pattern2 p1>;

        $r7 = virtualinvoke r4.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r8 = virtualinvoke $r6.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>($r7);

        $z2 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z2 != 0 goto label05;

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>()>();

        throw $r28;

     label05:
        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        if $r9 == null goto label06;

        $r27 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        specialinvoke r19.<net.sourceforge.plantuml.command.SkinLoader: void push(java.lang.String)>($r27);

        goto label08;

     label06:
        $r10 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(3);

        if $r10 == null goto label07;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = specialinvoke r19.<net.sourceforge.plantuml.command.SkinLoader: java.lang.String getFullParam()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = r19.<net.sourceforge.plantuml.command.SkinLoader: net.sourceforge.plantuml.TitledDiagram diagram>;

        $r26 = virtualinvoke r8.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(3);

        virtualinvoke $r25.<net.sourceforge.plantuml.TitledDiagram: void setParam(java.lang.String,java.lang.String)>(r24, $r26);

        goto label08;

     label07:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r14 = virtualinvoke r4.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label08:
        goto label02;

     label09:
        $r2 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

     label10:
        return $r2;

     label11:
        $r31 := @caughtexception;

        $r32 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("General failure: no style available.");

        return $r32;

        catch net.sourceforge.plantuml.style.NoStyleAvailableException from label01 to label10 with label11;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;

        $r0 = class "Lnet/sourceforge/plantuml/command/SkinLoader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.command.SkinLoader: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^([\\w.]*(?:\\<\\<.*\\>\\>)?[\\w.]*)[%s]+(?:(\\{)|(.*))$|^\\}?$");

        <net.sourceforge.plantuml.command.SkinLoader: net.sourceforge.plantuml.command.regex.Pattern2 p1> = $r1;

        return;
    }
}
