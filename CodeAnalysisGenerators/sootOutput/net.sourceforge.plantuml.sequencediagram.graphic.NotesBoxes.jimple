final class net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes extends net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final java.util.List notes;
    private final java.util.List participants1;
    private final java.util.List participants2;

    void <init>(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        double d0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void <init>(double)>(d0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants1> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants2> = $r3;

        return;
    }

    public void add(net.sourceforge.plantuml.sequencediagram.graphic.NoteBox, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r1;
        java.util.List $r2, $r4, $r6, $r7;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r3, r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r5 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants1>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        if r5 != null goto label1;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants2>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label2;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants2>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        return;
    }

    public void ensureConstraints(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        java.util.List $r1, $r2, $r5, $r8, $r15, $r16, $r19;
        int $i0, $i1, i2, i3;
        java.lang.Object $r3, $r6, $r9, $r17, $r20;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r4, r18;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r7, r10, r21;
        net.sourceforge.plantuml.graphic.StringBounder r11;
        double d0, $d1, $d2, d3, $d4, $d5;
        net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet r12;
        net.sourceforge.plantuml.sequencediagram.graphic.Constraint $r13, $r14, $r22;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r12 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet;

        i2 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i2 >= $i0 goto label4;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r3;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants1>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2);

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox) $r6;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants2>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i2);

        r10 = (net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox) $r9;

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraintBefore(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r7);

        $d1 = d0 / 2.0;

        virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.Constraint: void ensureValue(double)>($d1);

        $r14 = virtualinvoke r12.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraintAfter(net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r10);

        $d2 = d0 / 2.0;

        virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.graphic.Constraint: void ensureValue(double)>($d2);

        i3 = i2 + 1;

     label2:
        $r15 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        $i1 = interfaceinvoke $r15.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i3);

        r18 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r17;

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List participants1>;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i3);

        r21 = (net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox) $r20;

        d3 = virtualinvoke r18.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r11);

        $r22 = virtualinvoke r12.<net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet: net.sourceforge.plantuml.sequencediagram.graphic.Constraint getConstraint(net.sourceforge.plantuml.sequencediagram.graphic.Pushable,net.sourceforge.plantuml.sequencediagram.graphic.Pushable)>(r10, r21);

        $d4 = d0 + d3;

        $d5 = $d4 / 2.0;

        virtualinvoke $r22.<net.sourceforge.plantuml.sequencediagram.graphic.Constraint: void ensureValue(double)>($d5);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double d0, d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 1.7976931348623157E308;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r3;

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        d1 = d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double d0, d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = -1.7976931348623157E308;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r3;

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label2;

        d1 = d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5;
        double d0;
        net.sourceforge.plantuml.skin.Context2D r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        r6 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r3;

        virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>(r5, d0, r6);

        goto label1;

     label2:
        return;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double d0, d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 1.7976931348623157E308;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r3;

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        d1 = d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d2 = $d0 - $d1;

        return d2;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double d0, d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes: java.util.List notes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.NoteBox) $r3;

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label2;

        d1 = d0;

     label2:
        goto label1;

     label3:
        return d1;
    }
}
