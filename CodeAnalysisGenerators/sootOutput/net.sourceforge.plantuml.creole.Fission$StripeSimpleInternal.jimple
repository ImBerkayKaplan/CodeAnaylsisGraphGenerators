class net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal extends java.lang.Object implements net.sourceforge.plantuml.creole.Stripe
{
    private final java.util.List atoms;
    private double totalWidth;

    private void <init>(net.sourceforge.plantuml.creole.atom.Atom)
    {
        net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.creole.atom.Atom r2;
        java.util.List $r3;

        r0 := @this: net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal;

        r2 := @parameter0: net.sourceforge.plantuml.creole.atom.Atom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: java.util.List atoms> = $r1;

        if r2 == null goto label1;

        $r3 = r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: java.util.List atoms>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label1:
        return;
    }

    public java.util.List getAtoms()
    {
        net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal;

        $r1 = r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: java.util.List atoms>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    private void addAtom(net.sourceforge.plantuml.creole.atom.Atom, double)
    {
        net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal r0;
        net.sourceforge.plantuml.creole.atom.Atom r1;
        java.util.List $r2;
        double d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal;

        r1 := @parameter0: net.sourceforge.plantuml.creole.atom.Atom;

        d0 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: java.util.List atoms>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $d1 = r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: double totalWidth>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: double totalWidth> = $d2;

        return;
    }

    public net.sourceforge.plantuml.creole.atom.Atom getLHeader()
    {
        net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal r0;

        r0 := @this: net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal;

        return null;
    }

    void <init>(net.sourceforge.plantuml.creole.atom.Atom, net.sourceforge.plantuml.creole.Fission$1)
    {
        net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal r0;
        net.sourceforge.plantuml.creole.atom.Atom r1;
        net.sourceforge.plantuml.creole.Fission$1 r2;

        r0 := @this: net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal;

        r1 := @parameter0: net.sourceforge.plantuml.creole.atom.Atom;

        r2 := @parameter1: net.sourceforge.plantuml.creole.Fission$1;

        specialinvoke r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: void <init>(net.sourceforge.plantuml.creole.atom.Atom)>(r1);

        return;
    }

    static void access$100(net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal, net.sourceforge.plantuml.creole.atom.Atom, double)
    {
        net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal r0;
        net.sourceforge.plantuml.creole.atom.Atom r1;
        double d0;

        r0 := @parameter0: net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal;

        r1 := @parameter1: net.sourceforge.plantuml.creole.atom.Atom;

        d0 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.creole.Fission$StripeSimpleInternal: void addAtom(net.sourceforge.plantuml.creole.atom.Atom,double)>(r1, d0);

        return;
    }
}
