public final class net.sourceforge.plantuml.command.note.CommandFactoryNote extends java.lang.Object implements net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.command.note.CommandFactoryNote r0;

        r0 := @this: net.sourceforge.plantuml.command.note.CommandFactoryNote;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r15, $r17, $r18;
        java.lang.Class $r1;
        java.lang.String $r2, $r5, $r16, $r19;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r20, $r21, $r22;
        net.sourceforge.plantuml.command.regex.RegexConcat $r23;
        net.sourceforge.plantuml.command.note.CommandFactoryNote r24;

        r24 := @this: net.sourceforge.plantuml.command.note.CommandFactoryNote;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/note/CommandFactoryNote;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("multi");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[11];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("note");

        $r6[1] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[2] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r6[3] = $r10;

        $r11 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[4] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE", "([%pLN_.]+)");

        $r6[5] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[6] = $r13;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r19);

        $r6[7] = $r14;

        $r20 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[8] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r6[9] = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[10] = $r22;

        $r23 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r23;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r19, $r21, $r22;
        java.lang.Class $r1;
        java.lang.String $r2, $r5, $r20, $r23;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r24, $r25, $r26;
        net.sourceforge.plantuml.command.regex.RegexConcat $r27;
        net.sourceforge.plantuml.command.note.CommandFactoryNote r28;

        r28 := @this: net.sourceforge.plantuml.command.note.CommandFactoryNote;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/note/CommandFactoryNote;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("single");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[15];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("note");

        $r6[1] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[2] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[%g]");

        $r6[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY", "([^%g]+)");

        $r6[4] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[%g]");

        $r6[5] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[6] = $r13;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r6[7] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[8] = $r15;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE", "([%pLN_.]+)");

        $r6[9] = $r16;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[10] = $r17;

        $r18 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r23);

        $r6[11] = $r18;

        $r24 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[12] = $r24;

        $r25 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r6[13] = $r25;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[14] = $r26;

        $r27 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r27;
    }

    public net.sourceforge.plantuml.command.Command createSingleLine()
    {
        net.sourceforge.plantuml.command.note.CommandFactoryNote$1 $r0;
        net.sourceforge.plantuml.command.note.CommandFactoryNote r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;

        r1 := @this: net.sourceforge.plantuml.command.note.CommandFactoryNote;

        $r0 = new net.sourceforge.plantuml.command.note.CommandFactoryNote$1;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.note.CommandFactoryNote: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()>();

        specialinvoke $r0.<net.sourceforge.plantuml.command.note.CommandFactoryNote$1: void <init>(net.sourceforge.plantuml.command.note.CommandFactoryNote,net.sourceforge.plantuml.command.regex.IRegex)>(r1, $r2);

        return $r0;
    }

    public net.sourceforge.plantuml.command.Command createMultiLine(boolean)
    {
        net.sourceforge.plantuml.command.note.CommandFactoryNote$2 $r0;
        net.sourceforge.plantuml.command.note.CommandFactoryNote r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;
        net.sourceforge.plantuml.command.MultilinesStrategy $r3;
        boolean z0;

        r1 := @this: net.sourceforge.plantuml.command.note.CommandFactoryNote;

        z0 := @parameter0: boolean;

        $r0 = new net.sourceforge.plantuml.command.note.CommandFactoryNote$2;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.note.CommandFactoryNote: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()>();

        $r3 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy KEEP_STARTING_QUOTE>;

        specialinvoke $r0.<net.sourceforge.plantuml.command.note.CommandFactoryNote$2: void <init>(net.sourceforge.plantuml.command.note.CommandFactoryNote,net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>(r1, $r2, $r3);

        return $r0;
    }

    private net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r9, $r15, $r21, $r23;
        net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram r2;
        net.sourceforge.plantuml.cucadiagram.Ident r3;
        boolean $z0, $z1, $z3, $z4;
        net.sourceforge.plantuml.cucadiagram.Code r4, $r26;
        net.sourceforge.plantuml.command.BlocLines r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6;
        net.sourceforge.plantuml.cucadiagram.LeafType $r7;
        net.sourceforge.plantuml.cucadiagram.ILeaf r8;
        net.sourceforge.plantuml.graphic.color.ColorType $r10;
        net.sourceforge.plantuml.ISkinParam $r11, $r13;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r12;
        net.sourceforge.plantuml.api.ThemeStyle $r14;
        net.sourceforge.plantuml.command.CommandExecutionResult $r16, $r24;
        java.lang.AssertionError $r18;
        java.lang.StringBuilder $r19, $r20, $r22;
        net.sourceforge.plantuml.command.note.CommandFactoryNote r25;
        net.sourceforge.plantuml.ugraphic.color.HColor $r27;

        r25 := @this: net.sourceforge.plantuml.command.note.CommandFactoryNote;

        r2 := @parameter0: net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r5 := @parameter2: net.sourceforge.plantuml.command.BlocLines;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("CODE", 0);

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean V1972()>();

        if $z0 == 0 goto label1;

        $r26 = r3;

        goto label2;

     label1:
        $r26 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r1);

     label2:
        r4 = $r26;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean V1972()>();

        if $z1 == 0 goto label3;

        $z4 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean leafExistSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r3);

        goto label4;

     label3:
        $z4 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean leafExist(net.sourceforge.plantuml.cucadiagram.Code)>($r26);

     label4:
        if $z4 == 0 goto label5;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Note already created: ");

        $r21 = interfaceinvoke r4.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r23);

        return $r24;

     label5:
        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.cucadiagram.Display toDisplay()>();

        $r7 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType NOTE>;

        r8 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, r4, $r6, $r7, null);

        $z3 = <net.sourceforge.plantuml.command.note.CommandFactoryNote: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        if r8 != null goto label6;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label6:
        r9 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COLOR", 0);

        $r10 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        if r9 != null goto label7;

        $r27 = null;

        goto label8;

     label7:
        $r11 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r27 = virtualinvoke $r12.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r14, r9);

     label8:
        interfaceinvoke r8.<net.sourceforge.plantuml.cucadiagram.IEntity: void setSpecificColorTOBEREMOVED(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r10, $r27);

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TAGS", 0);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void addTags(net.sourceforge.plantuml.cucadiagram.IEntity,java.lang.String)>(r8, $r15);

        $r16 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r16;
    }

    static net.sourceforge.plantuml.command.CommandExecutionResult access$000(net.sourceforge.plantuml.command.note.CommandFactoryNote, net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.note.CommandFactoryNote r0;
        net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram r1;
        net.sourceforge.plantuml.command.regex.RegexResult r2;
        net.sourceforge.plantuml.command.BlocLines r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @parameter0: net.sourceforge.plantuml.command.note.CommandFactoryNote;

        r1 := @parameter1: net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram;

        r2 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter3: net.sourceforge.plantuml.command.BlocLines;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.command.note.CommandFactoryNote: net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.command.BlocLines)>(r1, r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/command/note/CommandFactoryNote;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.command.note.CommandFactoryNote: boolean $assertionsDisabled> = $z1;

        return;
    }
}
