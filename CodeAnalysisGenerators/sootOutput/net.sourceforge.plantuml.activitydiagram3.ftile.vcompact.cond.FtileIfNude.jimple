public class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude extends net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileDimensionMemoize
{
    protected final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1;
    protected final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane in;

    void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1, r3;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r3 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r4 := @parameter2: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ISkinParam skinParam()>();

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileDimensionMemoize: void <init>(net.sourceforge.plantuml.ISkinParam)>($r2);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1> = r1;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2> = r3;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane in> = r4;

        return;
    }

    public java.util.Collection getMyChildren()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile[] $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r3;
        java.util.List $r4;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        $r0 = newarray (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)[2];

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        $r0[0] = $r2;

        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        $r0[1] = $r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r4;
    }

    public boolean hasTwoBranches(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r3, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = virtualinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z1 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.util.Set getSwimlanes()
    {
        java.util.HashSet $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r3, $r9;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r4, $r6;
        java.util.Set $r5, $r7, $r8;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        if $r3 == null goto label1;

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label1:
        $r4 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        $r8 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r8;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane in>;

        return $r1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        return $r1;
    }

    protected net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(0.0, 0.0);

        return $r0;
    }

    protected net.sourceforge.plantuml.ugraphic.UTranslate getTranslate2(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r2, r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3;
        double $d0, $d1, d2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d2 = $d0 - $d1;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d2, 0.0);

        return $r5;
    }

    public net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0, $r2, $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r1;
        java.lang.UnsupportedOperationException $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6, $r7;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        if r0 != $r2 goto label1;

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        return $r7;

     label1:
        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        if r0 != $r3 goto label2;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate2(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        return $r6;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r4, $r7;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3, $r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r5, $r8;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate2(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        return;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionFtile(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r2, $r4, $r6, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = virtualinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z1 = virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z1 == 0 goto label2;

     label1:
        return r2;

     label2:
        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry withoutPointOut()>();

        return $r7;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternalSlow(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3, r5, $r7;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: double widthInner(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d2 = $d1 + d0;

        $d3 = virtualinvoke r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $d4 = virtualinvoke r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d5 = $d3 - $d4;

        d6 = $d2 + $d5;

        r6 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D mergeLR(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r3, r5);

        $r7 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d7 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d8 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d9 = d0 / 2.0;

        $d10 = $d8 + $d9;

        specialinvoke $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double)>(d6, $d7, $d10, 0.0);

        return $r7;
    }

    protected double widthInner(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3, r5;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d4 = $d2 + $d3;

        return $d4;
    }
}
