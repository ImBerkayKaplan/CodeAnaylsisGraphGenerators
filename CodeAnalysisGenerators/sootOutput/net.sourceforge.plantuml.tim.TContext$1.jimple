class net.sourceforge.plantuml.tim.TContext$1 extends java.lang.Object implements net.sourceforge.plantuml.tim.expression.Knowledge
{
    final net.sourceforge.plantuml.tim.TMemory val$memory;
    final net.sourceforge.plantuml.LineLocation val$location;
    final net.sourceforge.plantuml.tim.TContext this$0;

    void <init>(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation)
    {
        net.sourceforge.plantuml.tim.TContext$1 r0;
        net.sourceforge.plantuml.tim.TContext r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        net.sourceforge.plantuml.LineLocation r3;

        r0 := @this: net.sourceforge.plantuml.tim.TContext$1;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.tim.TContext this$0> = r1;

        r0.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.tim.TMemory val$memory> = r2;

        r0.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.LineLocation val$location> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.expression.TValue getVariable(java.lang.String) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.lang.String r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.tim.TContext$1 r1;
        net.sourceforge.plantuml.LineLocation $r2;
        net.sourceforge.plantuml.tim.TMemory $r3, $r6;
        net.sourceforge.plantuml.tim.TContext $r4;
        net.sourceforge.plantuml.tim.expression.TValue r5, $r7;

        r1 := @this: net.sourceforge.plantuml.tim.TContext$1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");

        if $z1 == 0 goto label2;

     label1:
        $r4 = r1.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.tim.TContext this$0>;

        $r3 = r1.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.tim.TMemory val$memory>;

        $r2 = r1.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.LineLocation val$location>;

        r5 = staticinvoke <net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue access$000(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.lang.String,net.sourceforge.plantuml.LineLocation)>($r4, $r3, r0, $r2);

        return r5;

     label2:
        $r6 = r1.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.tim.TMemory val$memory>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.expression.TValue getVariable(java.lang.String)>(r0);

        return $r7;
    }

    public net.sourceforge.plantuml.tim.TFunction getFunction(net.sourceforge.plantuml.tim.TFunctionSignature)
    {
        net.sourceforge.plantuml.tim.TContext$1 r0;
        net.sourceforge.plantuml.tim.TContext $r1;
        net.sourceforge.plantuml.tim.TFunctionSignature r2;
        net.sourceforge.plantuml.tim.FunctionsSet $r3;
        net.sourceforge.plantuml.tim.TFunction $r4;

        r0 := @this: net.sourceforge.plantuml.tim.TContext$1;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TFunctionSignature;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext$1: net.sourceforge.plantuml.tim.TContext this$0>;

        $r3 = $r1.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunction getFunctionSmart(net.sourceforge.plantuml.tim.TFunctionSignature)>(r2);

        return $r4;
    }
}
