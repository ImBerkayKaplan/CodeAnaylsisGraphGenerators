public class net.sourceforge.plantuml.elk.proxy.Reflect extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.elk.proxy.Reflect r0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.Reflect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class clazz(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r1;
        java.lang.Throwable $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Enum getEnum(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r3, $r5;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object r4;
        boolean $z0;
        java.lang.Enum $r6;
        java.lang.Throwable $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.Class r9;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

     label1:
        r9 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Class clazz(java.lang.String)>(r0);

        r1 = virtualinvoke r9.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r4 = r1[i1];

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label4;

        $r6 = (java.lang.Enum) r4;

     label3:
        return $r6;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r3);

        throw $r2;

     label6:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label6 with label6;
    }

    public static java.lang.Object opt(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.reflect.Field r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Class r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        r2 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void printStackTrace()>();

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object newInstance(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Class r4;

        r0 := @parameter0: java.lang.String;

     label1:
        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r1 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace()>();

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object newInstance(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Class[] $r1;
        java.lang.Object r2, $r6;
        java.lang.Class $r3, r9;
        java.lang.reflect.Constructor r4;
        java.lang.Object[] $r5;
        java.lang.Throwable $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

     label1:
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r1 = newarray (java.lang.Class)[1];

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r1[0] = $r3;

        r4 = virtualinvoke r9.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r2;

        $r6 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object newInstance(java.lang.String, double, double, double, double)
    {
        java.lang.String r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2, $r3, $r4, $r5, r15;
        java.lang.reflect.Constructor r6;
        java.lang.Object[] $r7;
        double d0, d1, d2, d3;
        java.lang.Double $r8, $r9, $r10, $r11;
        java.lang.Object $r12;
        java.lang.Throwable $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

     label1:
        r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r1 = newarray (java.lang.Class)[4];

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r1[0] = $r2;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r1[1] = $r3;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r1[2] = $r4;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r1[3] = $r5;

        r6 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        $r7 = newarray (java.lang.Object)[4];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r7[2] = $r10;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r7[3] = $r11;

        $r12 = virtualinvoke r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

     label2:
        return $r12;

     label3:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Throwable: void printStackTrace()>();

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object field(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.reflect.Field r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Class r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        r2 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void printStackTrace()>();

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object callStatic(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Method r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = newarray (java.lang.Class)[0];

        r3 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object callStatic(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.lang.String r0, r1;
        java.lang.Class[] $r2;
        java.lang.Object r3, $r7;
        java.lang.Class $r4, r10;
        java.lang.reflect.Method r5;
        java.lang.Object[] $r6;
        java.lang.Throwable $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

     label1:
        r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = newarray (java.lang.Class)[1];

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r2[0] = $r4;

        r5 = virtualinvoke r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r2);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r3;

        $r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void printStackTrace()>();

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object callStatic(java.lang.String, java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0, r1;
        java.lang.Class[] $r2;
        java.lang.Object r3, r5, $r9;
        java.lang.Class $r4, $r6, r12;
        java.lang.reflect.Method r7;
        java.lang.Object[] $r8;
        java.lang.Throwable $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object;

     label1:
        r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = newarray (java.lang.Class)[2];

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r2[0] = $r4;

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r2[1] = $r6;

        r7 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r2);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r3;

        $r8[1] = r5;

        $r9 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void printStackTrace()>();

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object callStatic2(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.lang.String r0, r1;
        java.lang.reflect.Method r2;
        java.lang.Object[] $r3;
        java.lang.Object r4, $r5;
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object;

     label1:
        r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.reflect.Method getStaticMethod(java.lang.Class,java.lang.String,int)>(r8, r1, 1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r4;

        $r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object callStatic2(java.lang.String, java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0, r1;
        java.lang.reflect.Method r2;
        java.lang.Object[] $r3;
        java.lang.Object r4, r5, $r6;
        java.lang.Throwable $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.Class r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object;

     label1:
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.reflect.Method getStaticMethod(java.lang.Class,java.lang.String,int)>(r9, r1, 2);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r4;

        $r3[1] = r5;

        $r6 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method getStaticMethod(java.lang.Class, java.lang.String, int)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1;
        int i0, i1, $i2, i3;
        java.lang.IllegalArgumentException $r2;
        java.lang.reflect.Method r3;
        java.lang.String $r4, r5;
        boolean $z0;
        java.lang.reflect.Parameter[] $r6;

        r0 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r1[i3];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.reflect.Parameter[] getParameters()>();

        $i2 = lengthof $r6;

        if $i2 != i1 goto label2;

        return r3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    public static java.lang.Object call(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0, $r5;
        java.lang.Class $r1;
        java.lang.String r2;
        java.lang.Class[] $r3;
        java.lang.Object[] $r4;
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.reflect.Method r8;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[0];

        r8 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r3);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object call(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.lang.Object r0, r4, $r7;
        java.lang.Class $r1, $r5;
        java.lang.String r2;
        java.lang.Class[] $r3;
        java.lang.Object[] $r6;
        java.lang.Throwable $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.reflect.Method r10;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[1];

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r3[0] = $r5;

        r10 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r3);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r4;

        $r7 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void printStackTrace()>();

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object call(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r4, r6, $r9;
        java.lang.Class $r1, $r5, $r7;
        java.lang.String r2;
        java.lang.Class[] $r3;
        java.lang.Object[] $r8;
        java.lang.Throwable $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.reflect.Method r12;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Object;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[2];

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r3[0] = $r5;

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r3[1] = $r7;

        r12 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r3);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r4;

        $r8[1] = r6;

        $r9 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r8);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void printStackTrace()>();

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object call2(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r3, r4, $r5;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.reflect.Method r8;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

     label1:
        r8 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.reflect.Method getMethod(java.lang.Object,java.lang.String,int)>(r0, r1, 2);

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r3;

        $r2[1] = r4;

        $r5 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method getMethod(java.lang.Object, java.lang.String, int)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.reflect.Method[] r2;
        int i0, i1, $i2, i3;
        java.lang.IllegalArgumentException $r3;
        java.lang.reflect.Method r4;
        java.lang.String $r5, r6;
        boolean $z0;
        java.lang.reflect.Parameter[] $r7;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r4 = r2[i3];

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.reflect.Parameter[] getParameters()>();

        $i2 = lengthof $r7;

        if $i2 != i1 goto label2;

        return r4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }
}
