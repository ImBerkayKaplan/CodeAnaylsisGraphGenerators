public class net.sourceforge.plantuml.project.lang.ComplementSeveralDays extends java.lang.Object implements net.sourceforge.plantuml.project.lang.Something
{

    public void <init>()
    {
        net.sourceforge.plantuml.project.lang.ComplementSeveralDays r0;

        r0 := @this: net.sourceforge.plantuml.project.lang.ComplementSeveralDays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.command.regex.IRegex toRegex(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String r5, $r7;
        net.sourceforge.plantuml.project.lang.ComplementSeveralDays r8;

        r8 := @this: net.sourceforge.plantuml.project.lang.ComplementSeveralDays;

        r5 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[1];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("COMPLEMENT");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r7, "(\\d+)[%s]+(day|week)s?(?:[%s]+and[%s]+(\\d+)[%s]+(day|week)s?)?");

        $r1[0] = $r2;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    public net.sourceforge.plantuml.project.Failable getMe(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19;
        java.lang.String r3, $r5, r6, $r10, $r11, $r15, r16, $r20, $r21;
        boolean $z0, $z1;
        int $i1, i2, $i4, $i5, i6, $i7, $i8;
        net.sourceforge.plantuml.project.GanttDiagram r22;
        net.sourceforge.plantuml.project.lang.ComplementSeveralDays r23;
        net.sourceforge.plantuml.project.Load $r24;
        net.sourceforge.plantuml.project.Failable $r25;

        r23 := @this: net.sourceforge.plantuml.project.lang.ComplementSeveralDays;

        r22 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("COMPLEMENT");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("COMPLEMENT");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r10, 1);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("w");

        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r22.<net.sourceforge.plantuml.project.GanttDiagram: int daysInWeek()>();

        goto label2;

     label1:
        $i5 = 1;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r6);

        i2 = $i1 * $i5;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("COMPLEMENT");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r16 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r15, 2);

        i6 = 0;

        if r16 == null goto label5;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("COMPLEMENT");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r20, 3);

        $z1 = virtualinvoke $r21.<java.lang.String: boolean startsWith(java.lang.String)>("w");

        if $z1 == 0 goto label3;

        $i7 = virtualinvoke r22.<net.sourceforge.plantuml.project.GanttDiagram: int daysInWeek()>();

        goto label4;

     label3:
        $i7 = 1;

     label4:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16);

        i6 = $i4 * $i7;

     label5:
        $i8 = i2 + i6;

        $r24 = staticinvoke <net.sourceforge.plantuml.project.Load: net.sourceforge.plantuml.project.Load inWinks(int)>($i8);

        $r25 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r24);

        return $r25;
    }
}
