public class net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea extends java.lang.Object
{
    private final double sequenceWidth;
    private final double sequenceHeight;
    private double headerWidth;
    private double headerHeight;
    private double headerMargin;
    private double titleWidth;
    private double titleHeight;
    private double captionWidth;
    private double captionHeight;
    private double footerWidth;
    private double footerHeight;
    private double footerMargin;
    private double legendWidth;
    private double legendHeight;
    private boolean isLegendTop;
    private net.sourceforge.plantuml.graphic.HorizontalAlignment legendHorizontalAlignment;

    public void setLegend(net.sourceforge.plantuml.awt.geom.Dimension2D, boolean, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double $d0, $d1;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        r2 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        z0 := @parameter1: boolean;

        r1 := @parameter2: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: net.sourceforge.plantuml.graphic.HorizontalAlignment legendHorizontalAlignment> = r1;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendWidth> = $d0;

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendHeight> = $d1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: boolean isLegendTop> = z0;

        return;
    }

    public double getLegendWidth()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendWidth>;

        return $d0;
    }

    public boolean hasLegend()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendHeight>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendWidth>;

        $b1 = $d1 cmpl 0.0;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double getLegendX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r1, $r2, $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: net.sourceforge.plantuml.graphic.HorizontalAlignment legendHorizontalAlignment>;

        $r1 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        if $r2 != $r1 goto label1;

        return 0.0;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: net.sourceforge.plantuml.graphic.HorizontalAlignment legendHorizontalAlignment>;

        $r3 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        if $r4 != $r3 goto label2;

        $d5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendWidth>;

        $d7 = $d5 - $d6;

        $d8 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d7);

        return $d8;

     label2:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendWidth>;

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d2);

        $d4 = $d3 / 2.0;

        return $d4;
    }

    public void <init>(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceWidth> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceHeight> = d1;

        return;
    }

    public void setTitleArea(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleWidth> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight> = d1;

        return;
    }

    private void setCaptionArea(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double captionWidth> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double captionHeight> = d1;

        return;
    }

    public void setCaptionArea(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        r1 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: void setCaptionArea(double,double)>($d0, $d1);

        return;
    }

    public void setHeaderArea(double, double, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double d0, d1, d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerWidth> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight> = d1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin> = d2;

        return;
    }

    public void setFooterArea(double, double, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double d0, d1, d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerWidth> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerHeight> = d1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerMargin> = d2;

        return;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceWidth>;

        $d3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerWidth>;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleWidth>;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerWidth>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double captionWidth>;

        $d5 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double,double,double)>($d4, $d3, $d2, $d1, $d0);

        return $d5;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceHeight>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight>;

        $d3 = $d1 + $d0;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin>;

        $d5 = $d3 + $d2;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight>;

        $d7 = $d5 + $d4;

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerMargin>;

        $d9 = $d7 + $d6;

        $d8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerHeight>;

        $d11 = $d9 + $d8;

        $d10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double captionHeight>;

        $d13 = $d11 + $d10;

        $d12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendHeight>;

        $d14 = $d13 + $d12;

        return $d14;
    }

    public double getFooterY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceHeight>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight>;

        $d3 = $d1 + $d0;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin>;

        $d5 = $d3 + $d2;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight>;

        $d7 = $d5 + $d4;

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerMargin>;

        $d9 = $d7 + $d6;

        $d8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double captionHeight>;

        $d11 = $d9 + $d8;

        $d10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendHeight>;

        $d12 = $d11 + $d10;

        return $d12;
    }

    public double getCaptionY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceHeight>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight>;

        $d3 = $d1 + $d0;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin>;

        $d5 = $d3 + $d2;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight>;

        $d7 = $d5 + $d4;

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendHeight>;

        $d8 = $d7 + $d6;

        return $d8;
    }

    public double getLegendY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: boolean isLegendTop>;

        if $z0 == 0 goto label1;

        $d8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight>;

        $d7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight>;

        $d10 = $d8 + $d7;

        $d9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin>;

        $d11 = $d10 + $d9;

        return $d11;

     label1:
        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceHeight>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight>;

        $d3 = $d1 + $d0;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin>;

        $d5 = $d3 + $d2;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight>;

        $d6 = $d5 + $d4;

        return $d6;
    }

    public double getTitleX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleWidth>;

        $d2 = $d0 - $d1;

        $d3 = $d2 / 2.0;

        return $d3;
    }

    public double getTitleY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin>;

        $d2 = $d1 + $d0;

        return $d2;
    }

    public double getHeaderHeightMargin()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerHeight>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerMargin>;

        $d2 = $d1 + $d0;

        return $d2;
    }

    public double getCaptionX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double captionWidth>;

        $d2 = $d0 - $d1;

        $d3 = $d2 / 2.0;

        return $d3;
    }

    public double getSequenceAreaX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double sequenceWidth>;

        $d2 = $d0 - $d1;

        $d3 = $d2 / 2.0;

        return $d3;
    }

    public double getSequenceAreaY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: boolean isLegendTop>;

        if $z0 == 0 goto label1;

        $d3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getTitleY()>();

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight>;

        $d6 = $d3 + $d4;

        $d5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double legendHeight>;

        $d7 = $d6 + $d5;

        return $d7;

     label1:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getTitleY()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double titleHeight>;

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getHeaderY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        return 0.0;
    }

    public double getFooterX(net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.HorizontalAlignment r0, $r1, $r2, $r3;
        java.lang.IllegalStateException $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r5 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r1 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        if r0 != $r1 goto label1;

        return 0.0;

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        if r0 != $r2 goto label2;

        $d4 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d5 = r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerWidth>;

        $d6 = $d4 - $d5;

        return $d6;

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        if r0 != $r3 goto label3;

        $d0 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d1 = r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double footerWidth>;

        $d2 = $d0 - $d1;

        $d3 = $d2 / 2.0;

        return $d3;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;
    }

    public double getHeaderX(net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.HorizontalAlignment r0, $r1, $r2, $r3;
        java.lang.IllegalStateException $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r5 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r1 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        if r0 != $r1 goto label1;

        return 0.0;

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        if r0 != $r2 goto label2;

        $d4 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d5 = r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerWidth>;

        $d6 = $d4 - $d5;

        return $d6;

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        if r0 != $r3 goto label3;

        $d0 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double getWidth()>();

        $d1 = r5.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: double headerWidth>;

        $d2 = $d0 - $d1;

        $d3 = $d2 / 2.0;

        return $d3;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;
    }

    public void initFooter(net.sourceforge.plantuml.png.PngTitler, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.png.PngTitler r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r3;
        double $d0, $d1, $d2, $d3;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        r0 := @parameter0: net.sourceforge.plantuml.png.PngTitler;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.png.PngTitler: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        if r2 == null goto label2;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: void setFooterArea(double,double,double)>($d2, $d3, 0.0);

        goto label2;

     label1:
        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: void setFooterArea(double,double,double)>($d0, $d1, 3.0);

     label2:
        return;
    }

    public void initHeader(net.sourceforge.plantuml.png.PngTitler, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.png.PngTitler r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea r3;
        double $d0, $d1, $d2, $d3;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea;

        r0 := @parameter0: net.sourceforge.plantuml.png.PngTitler;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.png.PngTitler: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        if r2 == null goto label2;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: void setHeaderArea(double,double,double)>($d2, $d3, 0.0);

        goto label2;

     label1:
        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea: void setHeaderArea(double,double,double)>($d0, $d1, 3.0);

     label2:
        return;
    }
}
