public class net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile implements net.sourceforge.plantuml.sequencediagram.teoz.Tile
{
    private final net.sourceforge.plantuml.sequencediagram.Reference reference;
    private final net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments;
    private net.sourceforge.plantuml.real.Real first;
    private net.sourceforge.plantuml.real.Real last;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;
        net.sourceforge.plantuml.sequencediagram.Reference $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.Reference reference>;

        return $r1;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.Reference, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.sequencediagram.Reference r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.Reference;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.Reference reference> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments> = r1;

        return;
    }

    private void init(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;
        net.sourceforge.plantuml.real.Real $r1, $r7, $r8, $r9, $r10, $r11, r15, $r16, $r17, $r18, $r19, $r20, $r23;
        net.sourceforge.plantuml.sequencediagram.Reference $r2, $r5;
        java.util.List $r3, $r6;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.Object $r12;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r13;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r14;
        byte $b1, $b2;
        java.util.Iterator r21;
        net.sourceforge.plantuml.sequencediagram.Participant r22;
        net.sourceforge.plantuml.skin.Component r24;
        net.sourceforge.plantuml.awt.geom.Dimension2D r25;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.Reference reference>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List getParticipant()>();

        r21 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r12 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (net.sourceforge.plantuml.sequencediagram.Participant) $r12;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLivingSpace(net.sourceforge.plantuml.sequencediagram.Participant)>(r22);

        r15 = virtualinvoke r14.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first>;

        if $r16 == null goto label3;

        $d3 = interfaceinvoke r15.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r20 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first>;

        $d4 = interfaceinvoke $r20.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $b2 = $d3 cmpg $d4;

        if $b2 >= 0 goto label4;

     label3:
        $r17 = virtualinvoke r14.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first> = $r17;

     label4:
        $r23 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last>;

        if $r23 == null goto label5;

        $d1 = interfaceinvoke r15.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last>;

        $d2 = interfaceinvoke $r19.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $b1 = $d1 cmpl $d2;

        if $b1 <= 0 goto label6;

     label5:
        $r18 = virtualinvoke r14.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last> = $r18;

     label6:
        goto label2;

     label7:
        r24 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        r25 = interfaceinvoke r24.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.Reference reference>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.Reference: java.util.List getParticipant()>();

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 != 1 goto label8;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last>;

        $r11 = interfaceinvoke $r10.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addAtLeast(double)>(0.0);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last> = $r11;

     label8:
        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last>;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first>;

        $d0 = virtualinvoke r25.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        interfaceinvoke $r7.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r9);

        return;
    }

    private net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;
        net.sourceforge.plantuml.sequencediagram.Reference $r1, $r5;
        net.sourceforge.plantuml.cucadiagram.Display $r2, r12, r13, r14;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r3, $r7;
        net.sourceforge.plantuml.skin.rose.Rose $r4;
        net.sourceforge.plantuml.style.Style[] $r6;
        net.sourceforge.plantuml.skin.ComponentType $r8;
        net.sourceforge.plantuml.ISkinParam $r9;
        net.sourceforge.plantuml.skin.Component r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r12 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display empty()>();

        r13 = virtualinvoke r12.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display add(java.lang.CharSequence)>("ref");

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.Reference reference>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        r14 = virtualinvoke r13.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display addAll(net.sourceforge.plantuml.cucadiagram.Display)>($r2);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.Reference reference>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.Reference: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r8 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType REFERENCE>;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r9 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r10 = virtualinvoke $r4.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r6, $r8, null, $r9, r14);

        return r10;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.skin.Area $r4;
        net.sourceforge.plantuml.real.Real $r5, $r6, $r8;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r9;
        net.sourceforge.plantuml.skin.Context2D $r10;
        net.sourceforge.plantuml.ugraphic.UGraphic r11, r12;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        r11 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: void init(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r4 = new net.sourceforge.plantuml.skin.Area;

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last>;

        $d0 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first>;

        $d1 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r4.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d2, $d3);

        $r8 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first>;

        $d4 = interfaceinvoke $r8.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        r12 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r10 = (net.sourceforge.plantuml.skin.Context2D) r12;

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r12, $r4, $r10);

        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: void init(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real first>;

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: void init(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile: net.sourceforge.plantuml.real.Real last>;

        return $r2;
    }
}
