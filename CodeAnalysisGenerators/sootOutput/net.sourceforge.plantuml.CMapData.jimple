public class net.sourceforge.plantuml.CMapData extends java.lang.Object
{
    private final java.lang.StringBuilder stringBuilder;

    public void <init>()
    {
        net.sourceforge.plantuml.CMapData r0;
        java.lang.StringBuilder $r1;

        r0 := @this: net.sourceforge.plantuml.CMapData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<net.sourceforge.plantuml.CMapData: java.lang.StringBuilder stringBuilder> = $r1;

        return;
    }

    public java.lang.String asString(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r10, $r11;
        java.lang.String r2, $r9, $r12;
        net.sourceforge.plantuml.CMapData r7;

        r7 := @this: net.sourceforge.plantuml.CMapData;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<map id=\"");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_map\" name=\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_map\">\n");

        $r8 = r7.<net.sourceforge.plantuml.CMapData: java.lang.StringBuilder stringBuilder>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</map>\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public boolean containsData()
    {
        net.sourceforge.plantuml.CMapData r0;
        java.lang.StringBuilder $r1;
        int $i0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.CMapData;

        $r1 = r0.<net.sourceforge.plantuml.CMapData: java.lang.StringBuilder stringBuilder>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void appendString(java.lang.String)
    {
        net.sourceforge.plantuml.CMapData r0;
        java.lang.String r1;
        java.lang.StringBuilder $r2;

        r0 := @this: net.sourceforge.plantuml.CMapData;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.CMapData: java.lang.StringBuilder stringBuilder>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;
    }

    public void appendLong(long)
    {
        net.sourceforge.plantuml.CMapData r0;
        long l0;
        java.lang.StringBuilder $r1;

        r0 := @this: net.sourceforge.plantuml.CMapData;

        l0 := @parameter0: long;

        $r1 = r0.<net.sourceforge.plantuml.CMapData: java.lang.StringBuilder stringBuilder>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        return;
    }

    private void appendUrl(int, net.sourceforge.plantuml.Url, double)
    {
        net.sourceforge.plantuml.CMapData r0;
        int i0;
        long $l1;
        net.sourceforge.plantuml.Url r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, r7, $r8;
        double d0;

        r0 := @this: net.sourceforge.plantuml.CMapData;

        i0 := @parameter0: int;

        r1 := @parameter1: net.sourceforge.plantuml.Url;

        d0 := @parameter2: double;

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>("<area shape=\"rect\" id=\"id");

        $l1 = (long) i0;

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendLong(long)>($l1);

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>("\" href=\"");

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.Url: java.lang.String getUrl()>();

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>($r2);

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>("\" title=\"");

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.Url: java.lang.String getTooltip()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\n", "\n");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&#38;");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&#34;");

        r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&#39;");

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>(r7);

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>("\" alt=\"\" coords=\"");

        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.Url: java.lang.String getCoords(double)>(d0);

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>($r8);

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>("\"/>");

        virtualinvoke r0.<net.sourceforge.plantuml.CMapData: void appendString(java.lang.String)>("\n");

        return;
    }

    public static net.sourceforge.plantuml.CMapData cmapString(java.util.Set, double)
    {
        net.sourceforge.plantuml.CMapData $r0;
        java.util.ArrayList $r2;
        java.util.Set r3;
        java.util.Comparator $r5;
        java.util.Iterator r6;
        java.lang.Object $r7;
        net.sourceforge.plantuml.Url r8;
        boolean $z0, $z1;
        double d0;
        int i0;

        r3 := @parameter0: java.util.Set;

        d0 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.CMapData;

        specialinvoke $r0.<net.sourceforge.plantuml.CMapData: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        $r5 = <net.sourceforge.plantuml.Url: java.util.Comparator SURFACE_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r2, $r5);

        i0 = 1;

        r6 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.Url) $r7;

        $z0 = virtualinvoke r8.<net.sourceforge.plantuml.Url: boolean hasData()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        specialinvoke $r0.<net.sourceforge.plantuml.CMapData: void appendUrl(int,net.sourceforge.plantuml.Url,double)>(i0, r8, d0);

        i0 = i0 + 1;

        goto label1;

     label3:
        return $r0;
    }
}
