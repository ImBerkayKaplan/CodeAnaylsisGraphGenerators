public class net.sourceforge.plantuml.nwdiag.next.NTetris extends java.lang.Object
{
    private final java.util.Map all;
    private final net.sourceforge.plantuml.nwdiag.next.BooleanGrid grid;

    public void <init>()
    {
        net.sourceforge.plantuml.nwdiag.next.NTetris r0;
        java.util.LinkedHashMap $r1;
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid $r2;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.NTetris;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: java.util.Map all> = $r1;

        $r2 = new net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        specialinvoke $r2.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: void <init>()>();

        r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: net.sourceforge.plantuml.nwdiag.next.BooleanGrid grid> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.nwdiag.next.NTetris r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.NTetris;

        $r1 = r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: java.util.Map all>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public void add(net.sourceforge.plantuml.nwdiag.next.Staged)
    {
        net.sourceforge.plantuml.nwdiag.next.NTetris r0;
        net.sourceforge.plantuml.nwdiag.next.Staged r1;
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid $r2, $r7;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.util.Map $r4;
        java.lang.Integer $r5;
        int i0;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.NTetris;

        r1 := @parameter0: net.sourceforge.plantuml.nwdiag.next.Staged;

        i0 = 0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: net.sourceforge.plantuml.nwdiag.next.BooleanGrid grid>;

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: boolean isSpaceAvailable(net.sourceforge.plantuml.nwdiag.next.Staged,int)>(r1, i0);

        if $z0 == 0 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: java.util.Map all>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        $r7 = r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: net.sourceforge.plantuml.nwdiag.next.BooleanGrid grid>;

        virtualinvoke $r7.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: void useSpace(net.sourceforge.plantuml.nwdiag.next.Staged,int)>(r1, i0);

        return;

     label2:
        i0 = i0 + 1;

        if i0 <= 100 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }

    public final java.util.Map getPositions()
    {
        net.sourceforge.plantuml.nwdiag.next.NTetris r0;
        java.util.Map $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.NTetris;

        $r1 = r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: java.util.Map all>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public int getNWidth()
    {
        net.sourceforge.plantuml.nwdiag.next.NTetris r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4, $r6, $r8;
        java.util.Map$Entry r5;
        java.lang.Integer $r7;
        int $i0, $i1, $i2, i3;
        net.sourceforge.plantuml.nwdiag.next.Staged $r9;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.NTetris;

        i3 = 0;

        $r1 = r0.<net.sourceforge.plantuml.nwdiag.next.NTetris: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (net.sourceforge.plantuml.nwdiag.next.Staged) $r8;

        $i1 = interfaceinvoke $r9.<net.sourceforge.plantuml.nwdiag.next.Staged: int getNWidth()>();

        $i2 = $i0 + $i1;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i2);

        goto label1;

     label2:
        return i3;
    }
}
