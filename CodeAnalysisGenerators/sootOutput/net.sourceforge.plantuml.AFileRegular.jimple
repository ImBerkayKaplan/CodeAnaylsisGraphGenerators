public class net.sourceforge.plantuml.AFileRegular extends java.lang.Object implements net.sourceforge.plantuml.AFile
{
    private final net.sourceforge.plantuml.security.SFile file;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r5;
        net.sourceforge.plantuml.AFileRegular r2;
        net.sourceforge.plantuml.security.SFile $r3;
        java.lang.String $r4, $r6;

        r2 := @this: net.sourceforge.plantuml.AFileRegular;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AFileRegular::");

        $r3 = r2.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.security.SFile: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void <init>(net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.AFileRegular r0;
        net.sourceforge.plantuml.security.SFile r1;

        r0 := @this: net.sourceforge.plantuml.AFileRegular;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file> = r1;

        return;
    }

    public java.io.InputStream openFile()
    {
        net.sourceforge.plantuml.AFileRegular r0;
        net.sourceforge.plantuml.security.SFile $r1;
        java.io.InputStream $r2;

        r0 := @this: net.sourceforge.plantuml.AFileRegular;

        $r1 = r0.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: java.io.InputStream openFile()>();

        return $r2;
    }

    public boolean isOk()
    {
        net.sourceforge.plantuml.AFileRegular r0;
        net.sourceforge.plantuml.security.SFile $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.AFileRegular;

        $r1 = r0.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $z1 = virtualinvoke $r2.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.AFileRegular r0;
        net.sourceforge.plantuml.security.SFile $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.AFileRegular;

        $r1 = r0.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.AFileRegular r1, $r2;
        net.sourceforge.plantuml.security.SFile $r3, $r4;

        r1 := @this: net.sourceforge.plantuml.AFileRegular;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof net.sourceforge.plantuml.AFileRegular;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r1.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $r2 = (net.sourceforge.plantuml.AFileRegular) r0;

        $r3 = $r2.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $z1 = virtualinvoke $r4.<net.sourceforge.plantuml.security.SFile: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public net.sourceforge.plantuml.AParentFolder getParentFile()
    {
        net.sourceforge.plantuml.AParentFolderRegular $r0;
        net.sourceforge.plantuml.AFileRegular r1;
        net.sourceforge.plantuml.security.SFile $r2, $r3;

        r1 := @this: net.sourceforge.plantuml.AFileRegular;

        $r0 = new net.sourceforge.plantuml.AParentFolderRegular;

        $r2 = r1.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

        specialinvoke $r0.<net.sourceforge.plantuml.AParentFolderRegular: void <init>(net.sourceforge.plantuml.security.SFile)>($r3);

        return $r0;
    }

    public net.sourceforge.plantuml.security.SFile getUnderlyingFile()
    {
        net.sourceforge.plantuml.AFileRegular r0;
        net.sourceforge.plantuml.security.SFile $r1;

        r0 := @this: net.sourceforge.plantuml.AFileRegular;

        $r1 = r0.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        return $r1;
    }

    public net.sourceforge.plantuml.security.SFile getSystemFolder() throws java.io.IOException
    {
        net.sourceforge.plantuml.AFileRegular r0;
        net.sourceforge.plantuml.security.SFile $r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.AFileRegular;

        $r1 = r0.<net.sourceforge.plantuml.AFileRegular: net.sourceforge.plantuml.security.SFile file>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getCanonicalFile()>();

        return $r3;
    }
}
