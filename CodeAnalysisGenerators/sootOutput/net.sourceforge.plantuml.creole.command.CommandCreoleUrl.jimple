public class net.sourceforge.plantuml.creole.command.CommandCreoleUrl extends java.lang.Object implements net.sourceforge.plantuml.creole.command.Command
{
    private static final net.sourceforge.plantuml.command.regex.Pattern2 pattern;

    public java.lang.String startingChars()
    {
        net.sourceforge.plantuml.creole.command.CommandCreoleUrl r0;

        r0 := @this: net.sourceforge.plantuml.creole.command.CommandCreoleUrl;

        return "[";
    }

    public static net.sourceforge.plantuml.creole.command.Command create()
    {
        net.sourceforge.plantuml.creole.command.CommandCreoleUrl $r0;

        $r0 = new net.sourceforge.plantuml.creole.command.CommandCreoleUrl;

        specialinvoke $r0.<net.sourceforge.plantuml.creole.command.CommandCreoleUrl: void <init>()>();

        return $r0;
    }

    private void <init>()
    {
        net.sourceforge.plantuml.creole.command.CommandCreoleUrl r0;

        r0 := @this: net.sourceforge.plantuml.creole.command.CommandCreoleUrl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int matchingSize(java.lang.String)
    {
        java.lang.String r0, $r3;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        boolean $z0;
        int $i0;
        net.sourceforge.plantuml.creole.command.CommandCreoleUrl r4;

        r4 := @this: net.sourceforge.plantuml.creole.command.CommandCreoleUrl;

        r0 := @parameter0: java.lang.String;

        $r1 = <net.sourceforge.plantuml.creole.command.CommandCreoleUrl: net.sourceforge.plantuml.command.regex.Pattern2 pattern>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        return $i0;
    }

    public java.lang.String executeAndGetRemaining(java.lang.String, net.sourceforge.plantuml.creole.legacy.StripeSimple)
    {
        java.lang.String r0, $r6, $r9, $r11, $r12;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        boolean $z0;
        net.sourceforge.plantuml.UrlBuilder $r3;
        net.sourceforge.plantuml.creole.legacy.StripeSimple r4;
        net.sourceforge.plantuml.ISkinSimple $r5;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r7;
        net.sourceforge.plantuml.Url r10;
        int $i0;
        java.lang.IllegalStateException $r13;
        net.sourceforge.plantuml.creole.command.CommandCreoleUrl r14;

        r14 := @this: net.sourceforge.plantuml.creole.command.CommandCreoleUrl;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: net.sourceforge.plantuml.creole.legacy.StripeSimple;

        $r1 = <net.sourceforge.plantuml.creole.command.CommandCreoleUrl: net.sourceforge.plantuml.command.regex.Pattern2 pattern>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 != 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>()>();

        throw $r13;

     label1:
        $r3 = new net.sourceforge.plantuml.UrlBuilder;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.creole.legacy.StripeSimple: net.sourceforge.plantuml.ISkinSimple getSkinParam()>();

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinSimple: java.lang.String getValue(java.lang.String)>("topurl");

        $r7 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r3.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r6, $r7);

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        r10 = virtualinvoke $r3.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>($r9);

        virtualinvoke r4.<net.sourceforge.plantuml.creole.legacy.StripeSimple: void addUrl(net.sourceforge.plantuml.Url)>(r10);

        $r11 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r12;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        net.sourceforge.plantuml.command.regex.Pattern2 $r6;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^(");

        $r2 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>($r5);

        <net.sourceforge.plantuml.creole.command.CommandCreoleUrl: net.sourceforge.plantuml.command.regex.Pattern2 pattern> = $r6;

        return;
    }
}
