class net.sourceforge.plantuml.svek.extremity.ExtremityExtends extends net.sourceforge.plantuml.svek.extremity.Extremity
{
    private net.sourceforge.plantuml.ugraphic.UPolygon polygon;
    private final net.sourceforge.plantuml.ugraphic.color.HColor fill;
    private final java.awt.geom.Point2D contact;

    public java.awt.geom.Point2D somePoint()
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtends r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtends;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: java.awt.geom.Point2D contact>;

        return $r1;
    }

    public void <init>(java.awt.geom.Point2D, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtends r0;
        net.sourceforge.plantuml.ugraphic.UPolygon $r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        java.awt.geom.Point2D$Double $r3;
        java.awt.geom.Point2D r4;
        double $d0, $d1, $d4, $d5, $d6, d7, d8;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtends;

        r4 := @parameter0: java.awt.geom.Point2D;

        d7 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.Extremity: void <init>()>();

        $r1 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon> = $r1;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.color.HColor fill> = r2;

        $r3 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: java.awt.geom.Point2D contact> = $r3;

        d8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: double manageround(double)>(d7);

        $r5 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        $r6 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(-19.0, -7.0);

        $r7 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(-19.0, 7.0);

        $r8 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        $r9 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        $d4 = d8 + 1.5707963267948966;

        virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.UPolygon: void rotate(double)>($d4);

        $r10 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        $d5 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        $d6 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.ugraphic.UPolygon: net.sourceforge.plantuml.ugraphic.UPolygon translate(double,double)>($d5, $d6);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon> = $r11;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtends r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;
        net.sourceforge.plantuml.ugraphic.UBackground $r2;
        net.sourceforge.plantuml.ugraphic.UPolygon $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, r5;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtends;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.color.HColor fill>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r5 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r3 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtends: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r3);

        return;
    }
}
