public class net.sourceforge.plantuml.sequencediagram.teoz.NotesTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile implements net.sourceforge.plantuml.sequencediagram.teoz.Tile
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.sequencediagram.Notes notes;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.sequencediagram.Notes $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.Notes notes>;

        return $r1;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces, net.sourceforge.plantuml.sequencediagram.Notes, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r2;
        net.sourceforge.plantuml.sequencediagram.Notes r3;
        net.sourceforge.plantuml.skin.rose.Rose r4;
        net.sourceforge.plantuml.ISkinParam r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r3 := @parameter2: net.sourceforge.plantuml.sequencediagram.Notes;

        r4 := @parameter3: net.sourceforge.plantuml.skin.rose.Rose;

        r5 := @parameter4: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.Notes notes> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.skin.rose.Rose skin> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.ISkinParam skinParam> = r5;

        return;
    }

    private net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.sequencediagram.Note r1;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r4;
        net.sourceforge.plantuml.skin.ComponentType $r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r9;
        net.sourceforge.plantuml.skin.Component r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NoteStyle getNoteStyle()>();

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.skin.ComponentType getNoteComponentType(net.sourceforge.plantuml.sequencediagram.NoteStyle)>($r4);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.ISkinParam getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r6);

        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        r10 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNote(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.sequencediagram.NotePosition)>($r3, $r5, $r7, $r8, $r9);

        return r10;
    }

    private net.sourceforge.plantuml.skin.ComponentType getNoteComponentType(net.sourceforge.plantuml.sequencediagram.NoteStyle)
    {
        net.sourceforge.plantuml.sequencediagram.NoteStyle r0, $r1, $r2;
        net.sourceforge.plantuml.skin.ComponentType $r3, $r4, $r5;
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r6;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.NoteStyle;

        $r1 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle HEXAGONAL>;

        if r0 != $r1 goto label1;

        $r5 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE_HEXAGONAL>;

        return $r5;

     label1:
        $r2 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle BOX>;

        if r0 != $r2 goto label2;

        $r4 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE_BOX>;

        return $r4;

     label2:
        $r3 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        return $r3;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, r13;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r2;
        net.sourceforge.plantuml.sequencediagram.Notes $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.Note r6;
        net.sourceforge.plantuml.skin.Component r7;
        net.sourceforge.plantuml.awt.geom.Dimension2D r8;
        net.sourceforge.plantuml.real.Real $r9;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.skin.Area $r10;
        net.sourceforge.plantuml.ugraphic.UTranslate $r12;
        net.sourceforge.plantuml.skin.Context2D $r14;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.Notes notes>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.Note) $r5;

        r7 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>(r1, r6);

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r9 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>(r1, r6);

        d0 = interfaceinvoke $r9.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r10 = new net.sourceforge.plantuml.skin.Area;

        $d1 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>(r1, r6);

        $d2 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r10.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d1, $d2);

        $r12 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d0);

        r13 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r14 = (net.sourceforge.plantuml.skin.Context2D) r13;

        interfaceinvoke r7.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r13, $r10, $r14);

        goto label1;

     label2:
        return;
    }

    private double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.Note r2;
        net.sourceforge.plantuml.skin.Component r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>(r1, r2);

        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return d0;
    }

    private net.sourceforge.plantuml.real.Real getXcenter(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.sequencediagram.Note r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r2;
        net.sourceforge.plantuml.sequencediagram.Participant $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.real.Real $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)>($r3);

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        return $r6;
    }

    private net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.sequencediagram.Note r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r2, $r15;
        net.sourceforge.plantuml.sequencediagram.Participant $r3, $r16;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r4, r25;
        net.sourceforge.plantuml.sequencediagram.NotePosition r5, $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        java.lang.UnsupportedOperationException $r11;
        java.lang.String $r12;
        net.sourceforge.plantuml.real.Real $r13, $r14, r17, $r18, $r19, $r21, $r22, $r23, $r24, r26;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode $r20;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)>($r3);

        r5 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>(r6, r1);

        $r7 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if r5 != $r7 goto label1;

        $r23 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d6 = neg d0;

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d6);

        return $r24;

     label1:
        $r8 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if r5 != $r8 goto label2;

        $r20 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r20);

        $d5 = (double) i0;

        d7 = $d5 * 5.0;

        $r21 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(d7);

        return $r22;

     label2:
        $r9 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if r5 != $r9 goto label3;

        $r15 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        $r16 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        r25 = virtualinvoke $r15.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)>($r16);

        r26 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        r17 = virtualinvoke r25.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $r18 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real middle(net.sourceforge.plantuml.real.Real,net.sourceforge.plantuml.real.Real)>(r26, r17);

        $d3 = neg d0;

        $d4 = $d3 / 2.0;

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d4);

        return $r19;

     label3:
        $r10 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER>;

        if r5 != $r10 goto label4;

        $r13 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d1 = neg d0;

        $d2 = $d1 / 2.0;

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d2);

        return $r14;

     label4:
        $r11 = new java.lang.UnsupportedOperationException;

        $r12 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.NotePosition: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.sequencediagram.Notes $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Note r4;
        net.sourceforge.plantuml.graphic.StringBounder $r5, $r7;
        net.sourceforge.plantuml.skin.Component r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r8;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.Notes notes>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.Note) $r3;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r5, r4);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r8 = interfaceinvoke r6.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r7);

        $d0 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.sequencediagram.Notes $r1;
        java.util.List r2;
        int $i0, $i1, $i2, i4, i5;
        net.sourceforge.plantuml.graphic.StringBounder $r3, $r7, $r11, $r14, $r17, $r20;
        java.lang.Object $r4, $r8, $r12, $r15, $r18, $r21;
        net.sourceforge.plantuml.sequencediagram.Note $r5, $r9, $r13, $r16, $r19, $r22;
        net.sourceforge.plantuml.real.Real $r6, $r10, r23, r24, r25, r26;
        double d0, d1;
        byte $b3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.Notes notes>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List asList()>();

        i4 = 0;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i4 >= $i1 goto label6;

        i5 = i4 + 1;

     label2:
        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if i5 >= $i2 goto label5;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r5 = (net.sourceforge.plantuml.sequencediagram.Note) $r4;

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getXcenter(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r3, $r5);

        d0 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r9 = (net.sourceforge.plantuml.sequencediagram.Note) $r8;

        $r10 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getXcenter(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r7, $r9);

        d1 = interfaceinvoke $r10.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $b3 = d1 cmpl d0;

        if $b3 <= 0 goto label3;

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r18 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r19 = (net.sourceforge.plantuml.sequencediagram.Note) $r18;

        r23 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX2(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r17, $r19);

        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r21 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r22 = (net.sourceforge.plantuml.sequencediagram.Note) $r21;

        r24 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r20, $r22);

        interfaceinvoke r24.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>(r23);

        goto label4;

     label3:
        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r13 = (net.sourceforge.plantuml.sequencediagram.Note) $r12;

        r25 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r11, $r13);

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r16 = (net.sourceforge.plantuml.sequencediagram.Note) $r15;

        r26 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX2(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r14, $r16);

        interfaceinvoke r25.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>(r26);

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r2;
        net.sourceforge.plantuml.sequencediagram.Notes $r3;
        java.util.Iterator r4;
        boolean $z0;
        net.sourceforge.plantuml.real.Real $r5, $r9;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.Note r7;
        net.sourceforge.plantuml.graphic.StringBounder $r8;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.Notes notes>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Note) $r6;

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r9 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r8, r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real min(java.util.Collection)>($r0);

        return $r5;
    }

    private net.sourceforge.plantuml.real.Real getX2(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.Note r2;
        net.sourceforge.plantuml.real.Real $r3, $r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>(r1, r2);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>(r1, r2);

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        return $r4;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.NotesTile r2;
        net.sourceforge.plantuml.sequencediagram.Notes $r3;
        java.util.Iterator r4;
        boolean $z0;
        net.sourceforge.plantuml.real.Real $r5, $r9;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.Note r7;
        net.sourceforge.plantuml.graphic.StringBounder $r8;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NotesTile;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.sequencediagram.Notes notes>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Note) $r6;

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r9 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.NotesTile: net.sourceforge.plantuml.real.Real getX2(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Note)>($r8, r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r5 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real max(java.util.Collection)>($r0);

        return $r5;
    }
}
