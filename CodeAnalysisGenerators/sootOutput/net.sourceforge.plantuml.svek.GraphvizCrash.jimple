public class net.sourceforge.plantuml.svek.GraphvizCrash extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final net.sourceforge.plantuml.graphic.TextBlock text1;
    private final java.awt.image.BufferedImage flashCode;
    private final java.lang.String text;
    private final boolean graphviz244onWindows;

    public void <init>(java.lang.String, boolean, java.lang.Throwable)
    {
        net.sourceforge.plantuml.svek.GraphvizCrash r0;
        java.lang.String r1;
        boolean z0;
        net.sourceforge.plantuml.flashcode.FlashCodeUtils r2;
        java.awt.Color $r3, $r4;
        java.awt.image.BufferedImage $r5, $r8;
        java.lang.Throwable r6;
        java.util.List $r7;
        net.sourceforge.plantuml.graphic.GraphicPosition $r9;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r10;

        r0 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r6 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.lang.String text> = r1;

        r0.<net.sourceforge.plantuml.svek.GraphvizCrash: boolean graphviz244onWindows> = z0;

        r2 = staticinvoke <net.sourceforge.plantuml.flashcode.FlashCodeFactory: net.sourceforge.plantuml.flashcode.FlashCodeUtils getFlashCodeUtils()>();

        $r4 = <java.awt.Color: java.awt.Color BLACK>;

        $r3 = <java.awt.Color: java.awt.Color WHITE>;

        $r5 = interfaceinvoke r2.<net.sourceforge.plantuml.flashcode.FlashCodeUtils: java.awt.image.BufferedImage exportFlashcode(java.lang.String,java.awt.Color,java.awt.Color)>(r1, $r4, $r3);

        r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.awt.image.BufferedImage flashCode> = $r5;

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.util.List init(java.lang.Throwable)>(r6);

        $r8 = staticinvoke <net.sourceforge.plantuml.fun.IconLoader: java.awt.image.BufferedImage getRandom()>();

        $r9 = <net.sourceforge.plantuml.graphic.GraphicPosition: net.sourceforge.plantuml.graphic.GraphicPosition BACKGROUND_CORNER_TOP_RIGHT>;

        $r10 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhite(java.util.List,java.awt.image.BufferedImage,net.sourceforge.plantuml.graphic.GraphicPosition)>($r7, $r8, $r9);

        r0.<net.sourceforge.plantuml.svek.GraphvizCrash: net.sourceforge.plantuml.graphic.TextBlock text1> = $r10;

        return;
    }

    public static java.util.List anErrorHasOccured(java.lang.Throwable, java.lang.String)
    {
        java.util.ArrayList $r0;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19;
        java.lang.String $r6, $r7, r8, $r12, r15, $r20;
        int $i0, $i1;

        r2 := @parameter0: java.lang.Throwable;

        r15 := @parameter1: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        if r2 != null goto label1;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("An error has occured!");

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error has occured : ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        $r7 = staticinvoke <net.sourceforge.plantuml.graphic.QuoteUtils: java.lang.String getSomeQuote()>();

        r8 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String rot(java.lang.String)>($r7);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<i>");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Diagram size: ");

        $i0 = staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: int lines(java.lang.String)>(r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lines / ");

        $i1 = virtualinvoke r15.<java.lang.String: int length()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r20);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        return $r0;
    }

    private static int lines(java.lang.String)
    {
        java.lang.String r0;
        int $i0, i2, i3;
        char $c1;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c1 != 10 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public static void checkOldVersionWarning(java.util.List)
    {
        long $l0, $l1, $l2, $l3, $l4, l5;
        byte $b6;
        java.util.List r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.util.List;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = staticinvoke <net.sourceforge.plantuml.version.Version: long compileTime()>();

        $l2 = $l0 - $l1;

        $l3 = $l2 / 1000L;

        $l4 = $l3 / 3600L;

        l5 = $l4 / 24L;

        $b6 = l5 cmp 90L;

        if $b6 < 0 goto label1;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<b>This version of PlantUML is ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" days old, so you should");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("<b>consider upgrading from https://plantuml.com/download");

     label1:
        return;
    }

    public static void pleaseGoTo(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Please go to https://plantuml.com/graphviz-dot to check your GraphViz version.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        return;
    }

    public static void youShouldSendThisDiagram(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("You should send this diagram and this image to <b>plantuml@gmail.com</b> or");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("post to <b>https://plantuml.com/qa</b> to solve this issue.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("You can try to turn arround this issue by simplifing your diagram.");

        return;
    }

    public static void thisMayBeCaused(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("This may be caused by :");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" - a bug in PlantUML");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" - a problem in GraphViz");

        return;
    }

    private java.util.List init(java.lang.Throwable)
    {
        net.sourceforge.plantuml.svek.GraphvizCrash r0;
        java.lang.String $r1, $r7, $r10, $r13, $r17, $r23, $r25, r26;
        java.util.List r2, $r19;
        java.lang.StringBuilder $r3, $r4, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r16, $r21, $r22, $r24;
        java.lang.Throwable r5, $r20;
        java.awt.image.BufferedImage $r18;

        r0 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        r5 := @parameter0: java.lang.Throwable;

        $r1 = r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.lang.String text>;

        r2 = staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: java.util.List anErrorHasOccured(java.lang.Throwable,java.lang.String)>(null, $r1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>("For some reason, dot/GraphViz has crashed.");

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>("");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RootCause ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        if r5 == null goto label1;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: java.util.List getStackTrace(java.lang.Throwable)>(r5);

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r19);

     label1:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>("");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This has been generated with PlantUML (");

        $r10 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13);

        staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: void checkOldVersionWarning(java.util.List)>(r2);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(" ");

        staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: void addProperties(java.util.List)>(r2);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(" ");

     label2:
        r26 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: java.lang.String dotVersion()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default dot version: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r17);

     label3:
        goto label5;

     label4:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot determine dot version: ");

        $r23 = virtualinvoke $r20.<java.lang.Throwable: java.lang.String toString()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r25);

     label5:
        staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: void pleaseGoTo(java.util.List)>(r2);

        staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: void youShouldSendThisDiagram(java.util.List)>(r2);

        $r18 = r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.awt.image.BufferedImage flashCode>;

        if $r18 == null goto label6;

        staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: void addDecodeHint(java.util.List)>(r2);

     label6:
        return r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private java.util.List getText2()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.svek.GraphvizCrash r2;

        r2 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("<b>It looks like you are running GraphViz 2.44 under Windows.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("If you have just installed GraphViz, you <i>may</i> have to execute");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("the post-install command <b>dot -c</b> like in the following example:");

        return $r0;
    }

    private java.util.List getText3()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.svek.GraphvizCrash r2;

        r2 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("You may have to have <i>Administrator rights</i> to avoid the following error message:");

        return $r0;
    }

    public static void addDecodeHint(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" Diagram source: (Use http://zxing.org/w/decode.jspx to decode the qrcode)");

        return;
    }

    public static void addProperties(java.util.List)
    {
        java.util.List r0;
        java.util.Collection $r1, $r2;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.util.Collection interestingProperties()>();

        interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.util.Collection interestingValues()>();

        interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.GraphvizCrash r0;

        r0 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        return 0;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r0;
        net.sourceforge.plantuml.svek.GraphvizCrash r1;

        r1 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        $r0 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple WHITE>;

        return $r0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.GraphvizCrash r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.svek.GraphvizCrash: net.sourceforge.plantuml.graphic.TextBlock getMain()>();

        $r3 = interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r3;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.GraphvizCrash r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r0 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.svek.GraphvizCrash: net.sourceforge.plantuml.graphic.TextBlock getMain()>();

        interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r2);

        return;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getMain()
    {
        net.sourceforge.plantuml.svek.GraphvizCrash r0;
        java.awt.image.BufferedImage $r1, $r6, $r15, $r22;
        boolean $z0;
        java.util.List $r2, $r10;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r3, $r9, $r12, $r18, $r23;
        net.sourceforge.plantuml.ugraphic.UImage $r4, $r13, $r19, r25;
        net.sourceforge.plantuml.ugraphic.PixelImage $r5, $r14, $r20;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r7, $r16, $r21;
        net.sourceforge.plantuml.svek.TextBlockBackcolored r11, r26;
        net.sourceforge.plantuml.graphic.TextBlock r24, r27, r28, r29;

        r0 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        r24 = r0.<net.sourceforge.plantuml.svek.GraphvizCrash: net.sourceforge.plantuml.graphic.TextBlock text1>;

        $r1 = r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.awt.image.BufferedImage flashCode>;

        if $r1 == null goto label1;

        $r19 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r20 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r22 = r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.awt.image.BufferedImage flashCode>;

        $r21 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_NEAREST_NEIGHBOR>;

        specialinvoke $r20.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r22, $r21);

        specialinvoke $r19.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r20);

        r25 = virtualinvoke $r19.<net.sourceforge.plantuml.ugraphic.UImage: net.sourceforge.plantuml.ugraphic.UImage scale(double)>(3.0);

        $r23 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        r24 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ugraphic.UImage,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r24, r25, $r23);

     label1:
        $z0 = r0.<net.sourceforge.plantuml.svek.GraphvizCrash: boolean graphviz244onWindows>;

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.util.List getText2()>();

        r26 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhite(java.util.List)>($r2);

        $r3 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        r27 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r24, r26, $r3);

        $r4 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r5 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r6 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getDotc()>();

        $r7 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r6, $r7);

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r5);

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        r28 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ugraphic.UImage,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r27, $r4, $r9);

        $r10 = specialinvoke r0.<net.sourceforge.plantuml.svek.GraphvizCrash: java.util.List getText3()>();

        r11 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhite(java.util.List)>($r10);

        $r12 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        r29 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r28, r11, $r12);

        $r13 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r14 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r15 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getDotd()>();

        $r16 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r15, $r16);

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r14);

        $r18 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        r24 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ugraphic.UImage,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r29, $r13, $r18);

     label2:
        return r24;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.GraphvizCrash r1;

        r1 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Margins $r0;
        net.sourceforge.plantuml.svek.GraphvizCrash r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r0;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.GraphvizCrash r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.svek.GraphvizCrash;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }
}
