public class net.sourceforge.plantuml.creole.atom.AtomOpenIcon extends net.sourceforge.plantuml.creole.atom.AbstractAtom implements net.sourceforge.plantuml.creole.atom.Atom
{
    private final net.sourceforge.plantuml.openiconic.OpenIcon openIcon;
    private final double factor;
    private final net.sourceforge.plantuml.Url url;
    private final net.sourceforge.plantuml.ugraphic.color.HColor color;

    public void <init>(net.sourceforge.plantuml.ugraphic.color.HColor, double, net.sourceforge.plantuml.openiconic.OpenIcon, net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.Url)
    {
        net.sourceforge.plantuml.creole.atom.AtomOpenIcon r0;
        net.sourceforge.plantuml.Url r1;
        net.sourceforge.plantuml.openiconic.OpenIcon r2;
        double d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.graphic.FontConfiguration r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r4, $r6;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomOpenIcon;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        d0 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.openiconic.OpenIcon;

        r3 := @parameter3: net.sourceforge.plantuml.graphic.FontConfiguration;

        r1 := @parameter4: net.sourceforge.plantuml.Url;

        specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AbstractAtom: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.Url url> = r1;

        r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.openiconic.OpenIcon openIcon> = r2;

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.graphic.FontConfiguration: double getSize2D()>();

        $d2 = d0 * $d1;

        $d3 = $d2 / 12.0;

        r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: double factor> = $d3;

        if r4 != null goto label1;

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        goto label2;

     label1:
        $r6 = r4;

     label2:
        r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.ugraphic.color.HColor color> = $r6;

        return;
    }

    private net.sourceforge.plantuml.graphic.TextBlock asTextBlock()
    {
        net.sourceforge.plantuml.creole.atom.AtomOpenIcon r0;
        double $d0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;
        net.sourceforge.plantuml.openiconic.OpenIcon $r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomOpenIcon;

        $r2 = r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.openiconic.OpenIcon openIcon>;

        $r1 = r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.ugraphic.color.HColor color>;

        $d0 = r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: double factor>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.openiconic.OpenIcon: net.sourceforge.plantuml.graphic.TextBlock asTextBlock(net.sourceforge.plantuml.ugraphic.color.HColor,double)>($r1, $d0);

        $r4 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>($r3, 1.0, 0.0);

        return $r4;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomOpenIcon r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomOpenIcon;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.graphic.TextBlock asTextBlock()>();

        $r3 = interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r3;
    }

    public double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomOpenIcon r0;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomOpenIcon;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: double factor>;

        $d1 = -3.0 * $d0;

        return $d1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.creole.atom.AtomOpenIcon r0;
        net.sourceforge.plantuml.Url $r1, $r4, $r5;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.ugraphic.UGraphic r3;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomOpenIcon;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        $r5 = r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r5);

     label1:
        $r2 = specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.graphic.TextBlock asTextBlock()>();

        interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r3);

        $r4 = r0.<net.sourceforge.plantuml.creole.atom.AtomOpenIcon: net.sourceforge.plantuml.Url url>;

        if $r4 == null goto label2;

        interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label2:
        return;
    }
}
