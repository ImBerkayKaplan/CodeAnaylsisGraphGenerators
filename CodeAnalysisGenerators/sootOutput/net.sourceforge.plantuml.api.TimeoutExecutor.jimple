public final class net.sourceforge.plantuml.api.TimeoutExecutor extends java.lang.Object
{
    private final long ms;

    public void <init>(long)
    {
        net.sourceforge.plantuml.api.TimeoutExecutor r0;
        long l0;

        r0 := @this: net.sourceforge.plantuml.api.TimeoutExecutor;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.api.TimeoutExecutor: long ms> = l0;

        return;
    }

    public boolean executeNow(net.sourceforge.plantuml.api.MyRunnable)
    {
        net.sourceforge.plantuml.api.TimeoutExecutor$MyThread $r0;
        net.sourceforge.plantuml.api.TimeoutExecutor r1;
        net.sourceforge.plantuml.api.MyRunnable r2;
        long $l0;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r7, $r15;
        java.lang.Throwable $r5;
        java.lang.InterruptedException $r8;
        java.lang.StringBuilder $r10, $r12, $r13;
        java.io.PrintStream $r11;
        java.lang.String $r14;
        boolean z2, z3, z4;

        r1 := @this: net.sourceforge.plantuml.api.TimeoutExecutor;

        r2 := @parameter0: net.sourceforge.plantuml.api.MyRunnable;

        $r0 = new net.sourceforge.plantuml.api.TimeoutExecutor$MyThread;

        specialinvoke $r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: void <init>(net.sourceforge.plantuml.api.TimeoutExecutor,net.sourceforge.plantuml.api.MyRunnable,net.sourceforge.plantuml.api.TimeoutExecutor$1)>(r1, r2, null);

     label1:
        virtualinvoke $r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: void start()>();

        $l0 = r1.<net.sourceforge.plantuml.api.TimeoutExecutor: long ms>;

        virtualinvoke $r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: void join(long)>($l0);

     label2:
        $r4 = staticinvoke <net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: java.util.concurrent.atomic.AtomicBoolean access$100(net.sourceforge.plantuml.api.TimeoutExecutor$MyThread)>($r0);

        z2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if z2 != 0 goto label9;

        interfaceinvoke r2.<net.sourceforge.plantuml.api.MyRunnable: void cancelJob()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: void interrupt()>();

        goto label9;

     label3:
        $r8 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TimeoutExecutorA ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        virtualinvoke $r8.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        $r15 = staticinvoke <net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: java.util.concurrent.atomic.AtomicBoolean access$100(net.sourceforge.plantuml.api.TimeoutExecutor$MyThread)>($r0);

        z3 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if z3 != 0 goto label5;

        interfaceinvoke r2.<net.sourceforge.plantuml.api.MyRunnable: void cancelJob()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: void interrupt()>();

     label5:
        return 0;

     label6:
        $r5 := @caughtexception;

     label7:
        $r7 = staticinvoke <net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: java.util.concurrent.atomic.AtomicBoolean access$100(net.sourceforge.plantuml.api.TimeoutExecutor$MyThread)>($r0);

        z4 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if z4 != 0 goto label8;

        interfaceinvoke r2.<net.sourceforge.plantuml.api.MyRunnable: void cancelJob()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: void interrupt()>();

     label8:
        throw $r5;

     label9:
        return z2;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }
}
