public class net.sourceforge.plantuml.creole.Parser extends java.lang.Object
{
    public static final java.lang.String MONOSPACED;

    public void <init>()
    {
        net.sourceforge.plantuml.creole.Parser r0;

        r0 := @this: net.sourceforge.plantuml.creole.Parser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.creole.SheetBuilder build(net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.creole.CreoleMode)
    {
        net.sourceforge.plantuml.graphic.FontConfiguration r0, r1;
        net.sourceforge.plantuml.creole.legacy.CreoleParser $r2;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r3;
        net.sourceforge.plantuml.ISkinSimple r4;
        net.sourceforge.plantuml.creole.CreoleMode r5;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.FontConfiguration;

        r3 := @parameter1: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r4 := @parameter2: net.sourceforge.plantuml.ISkinSimple;

        r5 := @parameter3: net.sourceforge.plantuml.creole.CreoleMode;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.graphic.FontConfiguration forceFont(net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor)>(null, null);

        $r2 = new net.sourceforge.plantuml.creole.legacy.CreoleParser;

        specialinvoke $r2.<net.sourceforge.plantuml.creole.legacy.CreoleParser: void <init>(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.creole.CreoleMode,net.sourceforge.plantuml.graphic.FontConfiguration)>(r0, r3, r4, r5, r1);

        return $r2;
    }

    public static net.sourceforge.plantuml.creole.SheetBuilder build(net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.creole.CreoleMode, net.sourceforge.plantuml.graphic.FontConfiguration)
    {
        net.sourceforge.plantuml.creole.legacy.CreoleParser $r0;
        net.sourceforge.plantuml.graphic.FontConfiguration r1, r5;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r2;
        net.sourceforge.plantuml.ISkinSimple r3;
        net.sourceforge.plantuml.creole.CreoleMode r4;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.FontConfiguration;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r3 := @parameter2: net.sourceforge.plantuml.ISkinSimple;

        r4 := @parameter3: net.sourceforge.plantuml.creole.CreoleMode;

        r5 := @parameter4: net.sourceforge.plantuml.graphic.FontConfiguration;

        $r0 = new net.sourceforge.plantuml.creole.legacy.CreoleParser;

        specialinvoke $r0.<net.sourceforge.plantuml.creole.legacy.CreoleParser: void <init>(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.creole.CreoleMode,net.sourceforge.plantuml.graphic.FontConfiguration)>(r1, r2, r3, r4, r5);

        return $r0;
    }

    public static boolean isCodeStart(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("<code>");

        return $z0;
    }

    public static boolean isCodeEnd(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("</code>");

        return $z0;
    }

    public static boolean isTreeStart(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("|_");

        return $z0;
    }

    public static double getScale(java.lang.String, double)
    {
        java.lang.String r0, $r3;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher r2;
        boolean $z0;
        double d0, $d1;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        if r0 != null goto label1;

        return d0;

     label1:
        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:scale=|\\*)([0-9.]+)");

        r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        return $d1;

     label2:
        return d0;
    }

    public static java.lang.String getColor(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("color[= :](#[0-9a-fA-F]{6}|\\w+)");

        r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        return $r3;

     label2:
        return null;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.creole.Parser: java.lang.String MONOSPACED> = "monospaced";

        return;
    }
}
