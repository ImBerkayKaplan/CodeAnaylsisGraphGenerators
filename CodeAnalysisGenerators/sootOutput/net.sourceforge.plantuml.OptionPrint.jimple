public class net.sourceforge.plantuml.OptionPrint extends java.lang.Object
{
    private static java.lang.String hostname;

    public void <init>()
    {
        net.sourceforge.plantuml.OptionPrint r0;

        r0 := @this: net.sourceforge.plantuml.OptionPrint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void printTestDot() throws java.lang.InterruptedException
    {
        java.util.ArrayList $r0;
        int i0;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4;
        java.io.PrintStream $r5, $r6;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int addDotStatus(java.util.List,boolean)>($r0, 0);

        r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        if i0 != 0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(r4);

        goto label3;

     label2:
        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r4);

     label3:
        goto label1;

     label4:
        staticinvoke <net.sourceforge.plantuml.OptionPrint: void exit(int)>(i0);

        return;
    }

    public static void printHelp() throws java.lang.InterruptedException
    {
        java.nio.charset.Charset $r0;
        java.lang.String r1, $r11, $r14, $r18, $r21, $r51, $r61, $r68, $r97;
        java.io.PrintStream $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r16, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r43, $r53, $r62, $r64, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r93, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119;
        java.lang.StringBuilder $r8, $r10, $r12, $r13, $r15, $r17, $r19, $r20, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r52, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r63, $r65, $r66, $r67, $r92, $r94, $r95, $r96;
        char c0;
        int $i1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        r1 = virtualinvoke $r0.<java.nio.charset.Charset: java.lang.String displayName()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Usage: java -jar plantuml.jar [options] -gui");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("\t(to execute the GUI)");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("    or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("\t(to process files or directories)");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println()>();

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("You can use the following wildcards in files/dirs:");

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t*\tmeans any characters but \'");

        $r11 = <net.sourceforge.plantuml.security.SFile: java.lang.String separator>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t?\tone and only one character but \'");

        $r18 = <net.sourceforge.plantuml.security.SFile: java.lang.String separator>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>("\t**\tmeans any characters (used to recurse through directories)");

        $r23 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r23.<java.io.PrintStream: void println()>();

        $r24 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>("where options include:");

        $r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>("    -gui\t\tTo run the graphical user interface");

        $r26 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("    -tpng\t\tTo generate images using PNG format (default)");

        $r27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>("    -tsvg\t\tTo generate images using SVG format");

        $r28 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>("    -teps\t\tTo generate images using EPS format");

        $r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>("    -tpdf\t\tTo generate images using PDF format");

        $r30 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>("    -tvdx\t\tTo generate images using VDX format");

        $r31 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("    -txmi\t\tTo generate XMI file for class diagram");

        $r32 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>("    -tscxml\t\tTo generate SCXML file for state diagram");

        $r33 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>("    -thtml\t\tTo generate HTML file for class diagram");

        $r34 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>("    -ttxt\t\tTo generate images with ASCII art");

        $r35 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>("    -tutxt\t\tTo generate images with ASCII art using Unicode characters");

        $r36 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>("    -tlatex\t\tTo generate images using LaTeX/Tikz format");

        $r37 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>("    -tlatex:nopreamble\tTo generate images using LaTeX/Tikz format without preamble");

        $r38 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>("    -o[utput] \"dir\"\tTo generate images in the specified directory");

        $r39 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.String)>("    -DVAR1=value\tTo set a preprocessing variable as if \'!define VAR1 value\' were used");

        $r40 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>("    -Sparam1=value\tTo set a skin parameter as if \'skinparam param1 value\' were used");

        $r41 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>("    -Ppragma1=value\tTo set pragma as if \'!pragma pragma1 value\' were used");

        c0 = <net.sourceforge.plantuml.security.SFile: char separatorChar>;

        $r43 = <java.lang.System: java.io.PrintStream out>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    -I");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("path");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("to");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file\tTo include file as if \'!include file\' were used");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<java.io.PrintStream: void println(java.lang.String)>($r51);

        $r53 = <java.lang.System: java.io.PrintStream out>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    -I");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("path");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("to");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*.puml\tTo include files with pattern");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<java.io.PrintStream: void println(java.lang.String)>($r61);

        $r62 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r62.<java.io.PrintStream: void println(java.lang.String)>("    -theme xxx\t\tTo use a specific theme");

        $r64 = <java.lang.System: java.io.PrintStream out>;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    -charset xxx\tTo use a specific charset (default is ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r64.<java.io.PrintStream: void println(java.lang.String)>($r68);

        $r69 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r69.<java.io.PrintStream: void println(java.lang.String)>("    -e[x]clude pattern\tTo exclude files that match the provided pattern");

        $r70 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>("    -metadata\t\tTo retrieve PlantUML sources from PNG images");

        $r71 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r71.<java.io.PrintStream: void println(java.lang.String)>("    -nometadata\t\tTo NOT export metadata in PNG/SVG generated files");

        $r72 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r72.<java.io.PrintStream: void println(java.lang.String)>("    -checkmetadata\t\tSkip PNG files that don\'t need to be regenerated");

        $r73 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r73.<java.io.PrintStream: void println(java.lang.String)>("    -version\t\tTo display information about PlantUML and Java versions");

        $r74 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r74.<java.io.PrintStream: void println(java.lang.String)>("    -v[erbose]\t\tTo have log information");

        $r75 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r75.<java.io.PrintStream: void println(java.lang.String)>("    -quiet\t\tTo NOT print error message into the console");

        $r76 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r76.<java.io.PrintStream: void println(java.lang.String)>("    -debugsvek\t\tTo generate intermediate svek files");

        $r77 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r77.<java.io.PrintStream: void println(java.lang.String)>("    -h[elp]\t\tTo display this help message");

        $r78 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r78.<java.io.PrintStream: void println(java.lang.String)>("    -testdot\t\tTo test the installation of graphviz");

        $r79 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r79.<java.io.PrintStream: void println(java.lang.String)>("    -graphvizdot \"exe\"\tTo specify dot executable");

        $r80 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r80.<java.io.PrintStream: void println(java.lang.String)>("    -p[ipe]\t\tTo use stdin for PlantUML source and stdout for PNG/SVG/EPS generation");

        $r81 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r81.<java.io.PrintStream: void println(java.lang.String)>("    -encodesprite 4|8|16[z] \"file\"\tTo encode a sprite at gray level (z for compression) from an image");

        $r82 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r82.<java.io.PrintStream: void println(java.lang.String)>("    -computeurl|-encodeurl\tTo compute the encoded URL of a PlantUML source file");

        $r83 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r83.<java.io.PrintStream: void println(java.lang.String)>("    -decodeurl\t\tTo retrieve the PlantUML source from an encoded URL");

        $r84 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r84.<java.io.PrintStream: void println(java.lang.String)>("    -syntax\t\tTo report any syntax error from standard input without generating images");

        $r85 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r85.<java.io.PrintStream: void println(java.lang.String)>("    -language\t\tTo print the list of PlantUML keywords");

        $r86 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r86.<java.io.PrintStream: void println(java.lang.String)>("    -checkonly\t\tTo check the syntax of files without generating images");

        $r87 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r87.<java.io.PrintStream: void println(java.lang.String)>("    -failfast\t\tTo stop processing as soon as a syntax error in diagram occurs");

        $r88 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r88.<java.io.PrintStream: void println(java.lang.String)>("    -failfast2\t\tTo do a first syntax check before processing files, to fail even faster");

        $r89 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r89.<java.io.PrintStream: void println(java.lang.String)>("    -noerror\t\tTo skip images when error in diagrams");

        $r90 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r90.<java.io.PrintStream: void println(java.lang.String)>("    -duration\t\tTo print the duration of complete diagrams processing");

        $r91 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r91.<java.io.PrintStream: void println(java.lang.String)>("    -nbthread N\t\tTo use (N) threads for processing");

        $r93 = <java.lang.System: java.io.PrintStream out>;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    -nbthread auto\tTo use ");

        $i1 = staticinvoke <net.sourceforge.plantuml.Option: int defaultNbThreads()>();

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threads for processing");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r93.<java.io.PrintStream: void println(java.lang.String)>($r97);

        $r98 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r98.<java.io.PrintStream: void println(java.lang.String)>("    -timeout N\t\tProcessing timeout in (N) seconds. Defaults to 15 minutes (900 seconds).");

        $r99 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r99.<java.io.PrintStream: void println(java.lang.String)>("    -author[s]\t\tTo print information about PlantUML authors");

        $r100 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r100.<java.io.PrintStream: void println(java.lang.String)>("    -overwrite\t\tTo allow to overwrite read only files");

        $r101 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r101.<java.io.PrintStream: void println(java.lang.String)>("    -printfonts\t\tTo print fonts available on your system");

        $r102 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r102.<java.io.PrintStream: void println(java.lang.String)>("    -enablestats\tTo enable statistics computation");

        $r103 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r103.<java.io.PrintStream: void println(java.lang.String)>("    -disablestats\tTo disable statistics computation (default)");

        $r104 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r104.<java.io.PrintStream: void println(java.lang.String)>("    -htmlstats\t\tTo output general statistics in file plantuml-stats.html");

        $r105 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r105.<java.io.PrintStream: void println(java.lang.String)>("    -xmlstats\t\tTo output general statistics in file plantuml-stats.xml");

        $r106 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r106.<java.io.PrintStream: void println(java.lang.String)>("    -realtimestats\tTo generate statistics on the fly rather than at the end");

        $r107 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r107.<java.io.PrintStream: void println(java.lang.String)>("    -loopstats\t\tTo continuously print statistics about usage");

        $r108 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r108.<java.io.PrintStream: void println(java.lang.String)>("    -splash\t\tTo display a splash screen with some progress bar");

        $r109 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r109.<java.io.PrintStream: void println(java.lang.String)>("    -progress\t\tTo display a textual progress bar in console");

        $r110 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r110.<java.io.PrintStream: void println(java.lang.String)>("    -pipeimageindex N\tTo generate the Nth image with pipe option");

        $r111 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r111.<java.io.PrintStream: void println(java.lang.String)>("    -stdlib\t\tTo print standard library info");

        $r112 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r112.<java.io.PrintStream: void println(java.lang.String)>("    -extractstdlib\tTo extract PlantUML Standard Library into stdlib folder");

        $r113 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r113.<java.io.PrintStream: void println(java.lang.String)>("    -filedir xxx\tTo behave as if the PlantUML source is in this dir (only affects \'-pipe\' and PicoWeb \'POST /render\')");

        $r114 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r114.<java.io.PrintStream: void println(java.lang.String)>("    -filename \"example.puml\"\tTo override %filename% variable");

        $r115 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r115.<java.io.PrintStream: void println(java.lang.String)>("    -preproc\t\tTo output preprocessor text of diagrams");

        $r116 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r116.<java.io.PrintStream: void println(java.lang.String)>("    -cypher\t\tTo cypher texts of diagrams so that you can share them");

        $r117 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r117.<java.io.PrintStream: void println(java.lang.String)>("    -picoweb\t\tTo start internal HTTP Server. See https://plantuml.com/picoweb");

        $r118 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r118.<java.io.PrintStream: void println()>();

        $r119 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r119.<java.io.PrintStream: void println(java.lang.String)>("If needed, you can setup the environment variable GRAPHVIZ_DOT.");

        staticinvoke <net.sourceforge.plantuml.OptionPrint: void exit(int)>(0);

        return;
    }

    private static void exit(int) throws java.lang.InterruptedException
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        boolean $z0;
        int i0;
        java.lang.InterruptedException $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: boolean isSystemExit()>();

        if $z0 != 0 goto label1;

        if i0 == 0 goto label2;

     label1:
        staticinvoke <java.lang.System: void exit(int)>(i0);

     label2:
        $r1 = new java.lang.InterruptedException;

        specialinvoke $r1.<java.lang.InterruptedException: void <init>(java.lang.String)>("exit");

        throw $r1;
    }

    public static void printLicense() throws java.lang.InterruptedException
    {
        net.sourceforge.plantuml.version.License $r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4;
        java.io.PrintStream $r5;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r1 = virtualinvoke $r0.<net.sourceforge.plantuml.version.License: java.util.List getTextFull()>();

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r4);

        goto label1;

     label2:
        staticinvoke <net.sourceforge.plantuml.OptionPrint: void exit(int)>(0);

        return;
    }

    public static void printVersion() throws java.lang.InterruptedException
    {
        java.io.PrintStream $r0, $r3, $r11, $r16, $r18, $r20;
        java.lang.String $r1, $r8, r15, r22, r24;
        java.lang.StringBuilder $r2, $r4, $r6, $r7;
        net.sourceforge.plantuml.version.License $r5;
        java.util.Collection $r9, $r10;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r12;
        java.util.Iterator r13, r21, r23;
        java.lang.Object $r14, $r17, $r19;
        int i0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String fullDescription()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" source distribution)");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r9 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.util.Collection interestingProperties()>();

        r21 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r19 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r19;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>(r22);

        goto label1;

     label2:
        $r10 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.util.Collection interestingValues()>();

        r23 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r17 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r17;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>(r24);

        goto label3;

     label4:
        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        i0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int addDotStatus(java.util.List,boolean)>($r12, 0);

        r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(r15);

        goto label5;

     label6:
        staticinvoke <net.sourceforge.plantuml.OptionPrint: void exit(int)>(i0);

        return;
    }

    public static java.util.Collection interestingProperties()
    {
        java.util.Properties r0;
        net.sourceforge.plantuml.security.SecurityProfile $r1, $r2;
        java.lang.String[] $r3, $r16;
        java.util.ArrayList $r4;
        java.lang.StringBuilder $r6, $r9, $r10, $r14;
        int $i0, i1, $i2;
        java.lang.Object $r7, $r11;
        java.lang.String $r8, $r12, $r13, $r15;
        java.util.List r17;

        r0 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r1 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r2 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r1 != $r2 goto label1;

        $r16 = newarray (java.lang.String)[16];

        $r16[0] = "java.runtime.name";

        $r16[1] = "Java Runtime";

        $r16[2] = "java.vm.name";

        $r16[3] = "JVM";

        $r16[4] = "java.runtime.version";

        $r16[5] = "Java Version";

        $r16[6] = "os.name";

        $r16[7] = "Operating System";

        $r16[8] = "os.version";

        $r16[9] = "OS Version";

        $r16[10] = "file.encoding";

        $r16[11] = "Default Encoding";

        $r16[12] = "user.language";

        $r16[13] = "Language";

        $r16[14] = "user.country";

        $r16[15] = "Country";

        r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        goto label2;

     label1:
        $r3 = newarray (java.lang.String)[10];

        $r3[0] = "java.runtime.name";

        $r3[1] = "Java Runtime";

        $r3[2] = "java.vm.name";

        $r3[3] = "JVM";

        $r3[4] = "file.encoding";

        $r3[5] = "Default Encoding";

        $r3[6] = "user.language";

        $r3[7] = "Language";

        $r3[8] = "user.country";

        $r3[9] = "Country";

        r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label3:
        $i2 = interfaceinvoke r17.<java.util.List: int size()>();

        if i1 >= $i2 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $i0 = i1 + 1;

        $r7 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>($i0);

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>(i1);

        $r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r15);

        i1 = i1 + 2;

        goto label3;

     label4:
        return $r4;
    }

    public static java.util.Collection interestingValues()
    {
        java.util.ArrayList $r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r9, $r10, $r12, $r17, $r18, $r20, $r22, $r23, $r25, $r27, $r28, $r30, $r32, $r33, $r35, $r37, $r38, $r39;
        int $i0, $i1, i6;
        java.lang.String $r5, $r13, $r19, $r21, $r24, $r26, $r29, $r31, $r34, $r36, $r40;
        net.sourceforge.plantuml.security.SecurityProfile $r6, $r7;
        java.util.Collection $r8;
        java.lang.Runtime $r11, $r14, $r15, $r16;
        long l2, l3, l4, l5;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PLANTUML_LIMIT_SIZE: ");

        $i0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int getenvImageLimit()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r7 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r6 != $r7 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processors: ");

        $r11 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r11.<java.lang.Runtime: int availableProcessors()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        l2 = virtualinvoke $r14.<java.lang.Runtime: long freeMemory()>();

        $r15 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        l3 = virtualinvoke $r15.<java.lang.Runtime: long maxMemory()>();

        $r16 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        l4 = virtualinvoke $r16.<java.lang.Runtime: long totalMemory()>();

        l5 = l4 - l2;

        i6 = staticinvoke <java.lang.Thread: int activeCount()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max Memory: ");

        $r19 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.lang.String format(long)>(l3);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total Memory: ");

        $r24 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.lang.String format(long)>(l4);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r26);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Free Memory: ");

        $r29 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.lang.String format(long)>(l2);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Used Memory: ");

        $r34 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.lang.String format(long)>(l5);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread Active Count: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r40);

     label1:
        $r8 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r0);

        return $r8;
    }

    public static synchronized java.lang.String getHostName()
    {
        java.lang.String $r0, $r1, $r2;

        $r0 = <net.sourceforge.plantuml.OptionPrint: java.lang.String hostname>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.lang.String getHostNameSlow()>();

        <net.sourceforge.plantuml.OptionPrint: java.lang.String hostname> = $r2;

     label1:
        $r1 = <net.sourceforge.plantuml.OptionPrint: java.lang.String hostname>;

        return $r1;
    }

    private static java.lang.String getHostNameSlow()
    {
        java.lang.String $r0, $r4, $r6;
        java.lang.Throwable $r1;
        java.util.Map r2;
        boolean $z0, $z1;
        java.lang.Object $r3, $r5;
        java.net.InetAddress r7;

     label1:
        r7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

        $r0 = virtualinvoke r7.<java.net.InetAddress: java.lang.String getHostName()>();

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        r2 = staticinvoke <java.lang.System: java.util.Map getenv()>();

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>("COMPUTERNAME");

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("COMPUTERNAME");

        $r6 = (java.lang.String) $r5;

        return $r6;

     label4:
        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>("HOSTNAME");

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("HOSTNAME");

        $r4 = (java.lang.String) $r3;

        return $r4;

     label5:
        return "Unknown Computer";

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.String format(long)
    {
        java.lang.Object[] $r0;
        long l0;
        java.util.Locale $r1;
        java.lang.Long $r2;
        java.lang.String $r3;

        l0 := @parameter0: long;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%,d", $r0);

        return $r3;
    }

    public static void printAbout() throws java.lang.InterruptedException
    {
        java.util.List $r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.String r3;
        java.io.PrintStream $r4;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.util.List getAuthorsStrings(boolean)>(0);

        r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r3);

        goto label1;

     label2:
        staticinvoke <net.sourceforge.plantuml.OptionPrint: void exit(int)>(0);

        return;
    }

    public static void printLanguage() throws java.lang.InterruptedException
    {
        net.sourceforge.plantuml.syntax.LanguageDescriptor $r0;
        java.io.PrintStream $r1;

        $r0 = new net.sourceforge.plantuml.syntax.LanguageDescriptor;

        specialinvoke $r0.<net.sourceforge.plantuml.syntax.LanguageDescriptor: void <init>()>();

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.LanguageDescriptor: void print(java.io.PrintStream)>($r1);

        staticinvoke <net.sourceforge.plantuml.OptionPrint: void exit(int)>(0);

        return;
    }
}
