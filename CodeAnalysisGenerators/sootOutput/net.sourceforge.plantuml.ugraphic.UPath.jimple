public class net.sourceforge.plantuml.ugraphic.UPath extends net.sourceforge.plantuml.ugraphic.AbstractShadowable implements java.lang.Iterable, net.sourceforge.plantuml.ugraphic.UShapeIgnorableForCompression
{
    private final java.lang.String comment;
    private final java.lang.String codeLine;
    private final java.util.List segments;
    private net.sourceforge.plantuml.ugraphic.MinMax minmax;
    private boolean isOpenIconic;
    private boolean ignoreForCompressionOnX;
    private boolean ignoreForCompressionOnY;

    public void <init>(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.ugraphic.MinMax $r2;
        java.lang.String r3, r4;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractShadowable: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.UPath: java.util.List segments> = $r1;

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(0);

        r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax> = $r2;

        r0.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String comment> = r3;

        r0.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String codeLine> = r4;

        return;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>(java.lang.String,java.lang.String)>(null, null);

        return;
    }

    public void add(double[], net.sourceforge.plantuml.ugraphic.USegmentType)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        net.sourceforge.plantuml.ugraphic.USegment $r1;
        double[] r2;
        net.sourceforge.plantuml.ugraphic.USegmentType r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r2 := @parameter0: double[];

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.USegmentType;

        $r1 = new net.sourceforge.plantuml.ugraphic.USegment;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.USegment: void <init>(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>(r2, r3);

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void addInternal(net.sourceforge.plantuml.ugraphic.USegment)>($r1);

        return;
    }

    public boolean isEmpty()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.util.List $r1;
        int $i0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: java.util.List segments>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void addInternal(net.sourceforge.plantuml.ugraphic.USegment)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        net.sourceforge.plantuml.ugraphic.USegment r1;
        java.util.List $r2;
        double[] r3;
        net.sourceforge.plantuml.ugraphic.USegmentType $r4, $r5;
        int $i0, $i1, i2;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.ugraphic.MinMax $r6, $r7, $r8, $r9;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.USegment;

        $r2 = r0.<net.sourceforge.plantuml.ugraphic.UPath: java.util.List segments>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        r3 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegmentType getSegmentType()>();

        $r5 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        if $r4 != $r5 goto label1;

        $r8 = r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax>;

        $d3 = r3[5];

        $d2 = r3[6];

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d3, $d2);

        r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax> = $r9;

        goto label3;

     label1:
        i2 = 0;

     label2:
        $i0 = lengthof r3;

        if i2 >= $i0 goto label3;

        $r6 = r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax>;

        $d1 = r3[i2];

        $i1 = i2 + 1;

        $d0 = r3[$i1];

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d1, $d0);

        r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax> = $r7;

        i2 = i2 + 2;

        goto label2;

     label3:
        return;
    }

    public net.sourceforge.plantuml.ugraphic.UPath translate(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0, r1;
        java.lang.String $r2, $r3;
        java.util.List $r5;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.Object $r7;
        net.sourceforge.plantuml.ugraphic.USegment r8, $r9;
        double d0, d1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        $r3 = r1.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String comment>;

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String codeLine>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>(java.lang.String,java.lang.String)>($r3, $r2);

        $r5 = r1.<net.sourceforge.plantuml.ugraphic.UPath: java.util.List segments>;

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.ugraphic.USegment) $r7;

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegment translate(double,double)>(d0, d1);

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void addInternal(net.sourceforge.plantuml.ugraphic.USegment)>($r9);

        goto label1;

     label2:
        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UPath rotate(double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0, r1;
        java.lang.String $r2, $r3;
        java.util.List $r5;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.Object $r7;
        net.sourceforge.plantuml.ugraphic.USegment r8, $r9;
        double d0;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        $r3 = r1.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String comment>;

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String codeLine>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>(java.lang.String,java.lang.String)>($r3, $r2);

        $r5 = r1.<net.sourceforge.plantuml.ugraphic.UPath: java.util.List segments>;

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.ugraphic.USegment) $r7;

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegment rotate(double)>(d0);

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void addInternal(net.sourceforge.plantuml.ugraphic.USegment)>($r9);

        goto label1;

     label2:
        return $r0;
    }

    public void moveTo(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>($d0, $d1);

        return;
    }

    public void lineTo(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d0, $d1);

        return;
    }

    public void moveTo(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double[] $r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.USegmentType $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = newarray (double)[2];

        $r1[0] = d0;

        $r1[1] = d1;

        $r2 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r1, $r2);

        return;
    }

    public void lineTo(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double[] $r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.USegmentType $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = newarray (double)[2];

        $r1[0] = d0;

        $r1[1] = d1;

        $r2 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r1, $r2);

        return;
    }

    public void cubicTo(java.awt.geom.Point2D, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.awt.geom.Point2D r1, r2, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Point2D;

        r3 := @parameter2: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d2 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d5 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return;
    }

    public void cubicTo(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double[] $r1;
        double d0, d1, d2, d3, d4, d5;
        net.sourceforge.plantuml.ugraphic.USegmentType $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $r1 = newarray (double)[6];

        $r1[0] = d0;

        $r1[1] = d1;

        $r1[2] = d2;

        $r1[3] = d3;

        $r1[4] = d4;

        $r1[5] = d5;

        $r2 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r1, $r2);

        return;
    }

    public void quadTo(double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double[] $r1;
        double d0, d1, d2, d3;
        net.sourceforge.plantuml.ugraphic.USegmentType $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r1 = newarray (double)[6];

        $r1[0] = d0;

        $r1[1] = d1;

        $r1[2] = d0;

        $r1[3] = d1;

        $r1[4] = d2;

        $r1[5] = d3;

        $r2 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r1, $r2);

        return;
    }

    public void quadTo(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.awt.geom.Point2D r1, r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d2 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void quadTo(double,double,double,double)>($d0, $d1, $d2, $d3);

        return;
    }

    public void arcTo(double, double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double[] $r1;
        double d0, d1, d2, d3, d4, d5, d6;
        net.sourceforge.plantuml.ugraphic.USegmentType $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $r1 = newarray (double)[7];

        $r1[0] = d0;

        $r1[1] = d1;

        $r1[2] = d2;

        $r1[3] = d3;

        $r1[4] = d4;

        $r1[5] = d5;

        $r1[6] = d6;

        $r2 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r1, $r2);

        return;
    }

    public void arcTo(java.awt.geom.Point2D, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double[] $r1;
        double d0, d1, d2, $d3, $d4;
        java.awt.geom.Point2D r2;
        net.sourceforge.plantuml.ugraphic.USegmentType $r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r2 := @parameter0: java.awt.geom.Point2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r1 = newarray (double)[7];

        $r1[0] = d0;

        $r1[1] = d0;

        $r1[2] = 0.0;

        $r1[3] = d1;

        $r1[4] = d2;

        $d3 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $r1[5] = $d3;

        $d4 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $r1[6] = $d4;

        $r3 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r1, $r3);

        return;
    }

    public void closePath()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        return;
    }

    public double getMaxX()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        net.sourceforge.plantuml.ugraphic.MinMax $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        return $d0;
    }

    public double getMaxY()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        net.sourceforge.plantuml.ugraphic.MinMax $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        return $d0;
    }

    public double getMinX()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        net.sourceforge.plantuml.ugraphic.MinMax $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        return $d0;
    }

    public double getMinY()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        net.sourceforge.plantuml.ugraphic.MinMax $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: net.sourceforge.plantuml.ugraphic.MinMax minmax>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        return $d0;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: java.util.List segments>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: java.util.List segments>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean isOpenIconic()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $z0 = r0.<net.sourceforge.plantuml.ugraphic.UPath: boolean isOpenIconic>;

        return $z0;
    }

    public void setOpenIconic(boolean)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.ugraphic.UPath: boolean isOpenIconic> = z0;

        return;
    }

    public final java.lang.String getComment()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String comment>;

        return $r1;
    }

    public final java.lang.String getCodeLine()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UPath: java.lang.String codeLine>;

        return $r1;
    }

    public void setIgnoreForCompressionOnX()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r0.<net.sourceforge.plantuml.ugraphic.UPath: boolean ignoreForCompressionOnX> = 1;

        return;
    }

    public void setIgnoreForCompressionOnY()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r0.<net.sourceforge.plantuml.ugraphic.UPath: boolean ignoreForCompressionOnY> = 1;

        return;
    }

    public void drawWhenCompressed(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.comp.CompressionMode)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.comp.CompressionMode;

        return;
    }

    public boolean isIgnoreForCompressionOn(net.sourceforge.plantuml.ugraphic.comp.CompressionMode)
    {
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        net.sourceforge.plantuml.ugraphic.UPath r4;
        boolean $z0, $z1;

        r4 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.CompressionMode;

        $r1 = <net.sourceforge.plantuml.ugraphic.comp.CompressionMode: net.sourceforge.plantuml.ugraphic.comp.CompressionMode ON_X>;

        if r0 != $r1 goto label1;

        $z1 = r4.<net.sourceforge.plantuml.ugraphic.UPath: boolean ignoreForCompressionOnX>;

        return $z1;

     label1:
        $r2 = <net.sourceforge.plantuml.ugraphic.comp.CompressionMode: net.sourceforge.plantuml.ugraphic.comp.CompressionMode ON_Y>;

        if r0 != $r2 goto label2;

        $z0 = r4.<net.sourceforge.plantuml.ugraphic.UPath: boolean ignoreForCompressionOnY>;

        return $z0;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    public volatile void setDeltaShadow(double)
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractShadowable: void setDeltaShadow(double)>(d0);

        return;
    }

    public volatile double getDeltaShadow()
    {
        net.sourceforge.plantuml.ugraphic.UPath r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UPath;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractShadowable: double getDeltaShadow()>();

        return $d0;
    }
}
