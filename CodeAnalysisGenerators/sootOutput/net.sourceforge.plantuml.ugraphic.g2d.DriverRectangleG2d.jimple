public class net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d extends net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d implements net.sourceforge.plantuml.ugraphic.UDriver
{
    private final double dpiFactor;
    private final net.sourceforge.plantuml.EnsureVisible visible;

    public void <init>(double, net.sourceforge.plantuml.EnsureVisible)
    {
        net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d r0;
        double d0;
        net.sourceforge.plantuml.EnsureVisible r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.EnsureVisible;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: double dpiFactor> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: net.sourceforge.plantuml.EnsureVisible visible> = r1;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.URectangle, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.awt.Graphics2D)
    {
        java.awt.Graphics2D r0;
        java.awt.BasicStroke $r1;
        net.sourceforge.plantuml.ugraphic.UParam r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3;
        double $d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        float $f0;
        net.sourceforge.plantuml.ugraphic.URectangle r4;
        byte $b0, $b1, $b2;
        java.awt.geom.RoundRectangle2D$Double $r5;
        net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d r6;
        net.sourceforge.plantuml.ugraphic.color.HColor r7, r8, $r9, $r10, $r12;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r11;
        java.awt.Color $r13;
        java.awt.GradientPaint r14;
        java.awt.geom.Rectangle2D$Double $r15;
        java.awt.geom.RectangularShape r16;
        net.sourceforge.plantuml.EnsureVisible $r17, $r18;

        r6 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.URectangle;

        d3 := @parameter1: double;

        d4 := @parameter2: double;

        r11 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r2 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r0 := @parameter5: java.awt.Graphics2D;

        $r1 = new java.awt.BasicStroke;

        $r3 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        $f0 = (float) $d0;

        specialinvoke $r1.<java.awt.BasicStroke: void <init>(float)>($f0);

        virtualinvoke r0.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r1);

        d1 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getRx()>();

        d2 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getRy()>();

        $b0 = d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b1 = d2 cmpl 0.0;

        if $b1 != 0 goto label1;

        $r15 = new java.awt.geom.Rectangle2D$Double;

        $d13 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getWidth()>();

        $d14 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getHeight()>();

        specialinvoke $r15.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(d3, d4, $d13, $d14);

        r16 = $r15;

        goto label2;

     label1:
        $r5 = new java.awt.geom.RoundRectangle2D$Double;

        $d5 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getWidth()>();

        $d6 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getHeight()>();

        specialinvoke $r5.<java.awt.geom.RoundRectangle2D$Double: void <init>(double,double,double,double,double,double)>(d3, d4, $d5, $d6, d1, d2);

        r16 = $r5;

     label2:
        $r17 = r6.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: net.sourceforge.plantuml.EnsureVisible visible>;

        interfaceinvoke $r17.<net.sourceforge.plantuml.EnsureVisible: void ensureVisible(double,double)>(d3, d4);

        $r18 = r6.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: net.sourceforge.plantuml.EnsureVisible visible>;

        $d15 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getWidth()>();

        $d16 = d3 + $d15;

        $d17 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getHeight()>();

        $d18 = d4 + $d17;

        interfaceinvoke $r18.<net.sourceforge.plantuml.EnsureVisible: void ensureVisible(double,double)>($d16, $d18);

        r7 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $d19 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getDeltaShadow()>();

        $b2 = $d19 cmpl 0.0;

        if $b2 == 0 goto label4;

        $z1 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: boolean isTransparent(net.sourceforge.plantuml.ugraphic.color.HColor)>(r7);

        if $z1 == 0 goto label3;

        $d11 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getDeltaShadow()>();

        $d12 = r6.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: double dpiFactor>;

        virtualinvoke r6.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: void drawOnlyLineShadowSpecial(java.awt.Graphics2D,java.awt.Shape,double,double)>(r0, r16, $d11, $d12);

        goto label4;

     label3:
        $d9 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getDeltaShadow()>();

        $d10 = r6.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: double dpiFactor>;

        virtualinvoke r6.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: void drawShadow(java.awt.Graphics2D,java.awt.Shape,double,double)>(r0, r16, $d9, $d10);

     label4:
        r8 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $z2 = r7 instanceof net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        if $z2 == 0 goto label5;

        $d7 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getWidth()>();

        $d8 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.URectangle: double getHeight()>();

        r14 = staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: java.awt.GradientPaint getPaintGradient(double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,double,double,net.sourceforge.plantuml.ugraphic.color.HColor)>(d3, d4, r11, $d7, $d8, r7);

        virtualinvoke r0.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r14);

        virtualinvoke r0.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r16);

        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: void drawBorder(net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UShapeSized,java.awt.Shape,java.awt.Graphics2D,double,double)>(r2, r8, r11, r4, r16, r0, d3, d4);

        goto label7;

     label5:
        $r9 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        if $r9 == null goto label6;

        $r12 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $r13 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r12);

        virtualinvoke r0.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r13);

        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverLineG2d: void manageStroke(net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>(r2, r0);

        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: void managePattern(net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>(r2, r0);

        virtualinvoke r0.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r16);

     label6:
        if r8 == null goto label7;

        $r10 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label7;

        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: void drawBorder(net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UShapeSized,java.awt.Shape,java.awt.Graphics2D,double,double)>(r2, r8, r11, r4, r16, r0, d3, d4);

     label7:
        return;
    }

    public static void drawBorder(net.sourceforge.plantuml.ugraphic.UParam, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UShapeSized, java.awt.Shape, java.awt.Graphics2D, double, double)
    {
        net.sourceforge.plantuml.ugraphic.color.HColor r0;
        boolean $z0;
        java.awt.Graphics2D r1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        java.awt.Color $r3;
        net.sourceforge.plantuml.ugraphic.UParam r4;
        java.awt.Shape r5;
        double d0, d1, $d2, $d3;
        net.sourceforge.plantuml.ugraphic.UShapeSized r6;
        java.awt.GradientPaint r7;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UParam;

        r0 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r6 := @parameter3: net.sourceforge.plantuml.ugraphic.UShapeSized;

        r5 := @parameter4: java.awt.Shape;

        r1 := @parameter5: java.awt.Graphics2D;

        d0 := @parameter6: double;

        d1 := @parameter7: double;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = r0 instanceof net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        if $z0 == 0 goto label2;

        $d2 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UShapeSized: double getWidth()>();

        $d3 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UShapeSized: double getHeight()>();

        r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: java.awt.GradientPaint getPaintGradient(double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,double,double,net.sourceforge.plantuml.ugraphic.color.HColor)>(d0, d1, r2, $d2, $d3, r0);

        virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r7);

        goto label3;

     label2:
        $r3 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r0);

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r3);

     label3:
        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverLineG2d: void manageStroke(net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>(r4, r1);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r5);

        return;
    }

    public static java.awt.GradientPaint getPaintGradient(double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, double, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.ugraphic.color.HColor r0, $r4, $r6, $r9, $r11, $r14, $r16, $r19, $r21;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient r1;
        char c0;
        java.awt.GradientPaint $r2, $r8, $r13, $r18, r23;
        double d0, d1, d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        java.awt.Color $r5, $r7, $r10, $r12, $r15, $r17, $r20, $r22;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r3 := @parameter2: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        d2 := @parameter3: double;

        d4 := @parameter4: double;

        r0 := @parameter5: net.sourceforge.plantuml.ugraphic.color.HColor;

        r1 = (net.sourceforge.plantuml.ugraphic.color.HColorGradient) r0;

        c0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: char getPolicy()>();

        if c0 != 124 goto label1;

        $r18 = new java.awt.GradientPaint;

        $f15 = (float) d0;

        $d11 = d1 + d4;

        $f14 = (float) $d11;

        $f16 = $f14 / 2.0F;

        $r19 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r20 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r19);

        $d12 = d0 + d2;

        $f18 = (float) $d12;

        $d13 = d1 + d4;

        $f17 = (float) $d13;

        $f19 = $f17 / 2.0F;

        $r21 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r22 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r21);

        specialinvoke $r18.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f15, $f16, $r20, $f18, $f19, $r22);

        r23 = $r18;

        goto label4;

     label1:
        if c0 != 92 goto label2;

        $r13 = new java.awt.GradientPaint;

        $f10 = (float) d0;

        $d9 = d1 + d4;

        $f11 = (float) $d9;

        $r14 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r15 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r14);

        $d10 = d0 + d2;

        $f12 = (float) $d10;

        $f13 = (float) d1;

        $r16 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r17 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r16);

        specialinvoke $r13.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f10, $f11, $r15, $f12, $f13, $r17);

        r23 = $r13;

        goto label4;

     label2:
        if c0 != 45 goto label3;

        $r8 = new java.awt.GradientPaint;

        $d6 = d0 + d2;

        $f4 = (float) $d6;

        $f5 = $f4 / 2.0F;

        $f6 = (float) d1;

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r10 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r9);

        $d7 = d0 + d2;

        $f7 = (float) $d7;

        $f8 = $f7 / 2.0F;

        $d8 = d1 + d4;

        $f9 = (float) $d8;

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r12 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r11);

        specialinvoke $r8.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f5, $f6, $r10, $f8, $f9, $r12);

        r23 = $r8;

        goto label4;

     label3:
        $r2 = new java.awt.GradientPaint;

        $f0 = (float) d0;

        $f1 = (float) d1;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r4);

        $d3 = d0 + d2;

        $f2 = (float) $d3;

        $d5 = d1 + d4;

        $f3 = (float) $d5;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r7 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r6);

        specialinvoke $r2.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f0, $f1, $r5, $f2, $f3, $r7);

        r23 = $r2;

     label4:
        return r23;
    }

    public static void managePattern(net.sourceforge.plantuml.ugraphic.UParam, java.awt.Graphics2D)
    {
        net.sourceforge.plantuml.ugraphic.UParam r0;
        net.sourceforge.plantuml.ugraphic.UPattern r1, $r2, $r3, $r4;
        java.awt.image.BufferedImage $r5, $r12, $r18;
        java.awt.Rectangle $r6, $r13, $r19;
        net.sourceforge.plantuml.ugraphic.color.HColor $r7, $r14, $r20;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r8, $r15, $r21;
        java.awt.Color $r9, $r16, $r22;
        java.awt.Graphics2D r10;
        java.awt.TexturePaint $r11, $r17, $r23;
        int i0, i1, i2, i3, i4, i5, i6;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UParam;

        r10 := @parameter1: java.awt.Graphics2D;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UPattern getPattern()>();

        $r2 = <net.sourceforge.plantuml.ugraphic.UPattern: net.sourceforge.plantuml.ugraphic.UPattern VERTICAL_STRIPE>;

        if r1 != $r2 goto label07;

        $r18 = new java.awt.image.BufferedImage;

        specialinvoke $r18.<java.awt.image.BufferedImage: void <init>(int,int,int)>(4, 4, 2);

        $r19 = new java.awt.Rectangle;

        specialinvoke $r19.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, 4, 4);

        $r20 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $r21 = (net.sourceforge.plantuml.ugraphic.color.HColorSimple) $r20;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: java.awt.Color getColor999()>();

        i0 = virtualinvoke $r22.<java.awt.Color: int getRGB()>();

        i1 = 0;

     label01:
        if i1 >= 4 goto label06;

        i2 = 0;

     label02:
        if i2 >= 4 goto label05;

        if i1 == 0 goto label03;

        if i1 != 1 goto label04;

     label03:
        virtualinvoke $r18.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(i1, i2, i0);

     label04:
        i2 = i2 + 1;

        goto label02;

     label05:
        i1 = i1 + 1;

        goto label01;

     label06:
        $r23 = new java.awt.TexturePaint;

        specialinvoke $r23.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r18, $r19);

        virtualinvoke r10.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r23);

        goto label15;

     label07:
        $r3 = <net.sourceforge.plantuml.ugraphic.UPattern: net.sourceforge.plantuml.ugraphic.UPattern HORIZONTAL_STRIPE>;

        if r1 != $r3 goto label14;

        $r12 = new java.awt.image.BufferedImage;

        specialinvoke $r12.<java.awt.image.BufferedImage: void <init>(int,int,int)>(4, 4, 2);

        $r13 = new java.awt.Rectangle;

        specialinvoke $r13.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, 4, 4);

        $r14 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $r15 = (net.sourceforge.plantuml.ugraphic.color.HColorSimple) $r14;

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: java.awt.Color getColor999()>();

        i3 = virtualinvoke $r16.<java.awt.Color: int getRGB()>();

        i4 = 0;

     label08:
        if i4 >= 4 goto label13;

        i5 = 0;

     label09:
        if i5 >= 4 goto label12;

        if i5 == 0 goto label10;

        if i5 != 1 goto label11;

     label10:
        virtualinvoke $r12.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(i4, i5, i3);

     label11:
        i5 = i5 + 1;

        goto label09;

     label12:
        i4 = i4 + 1;

        goto label08;

     label13:
        $r17 = new java.awt.TexturePaint;

        specialinvoke $r17.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r12, $r13);

        virtualinvoke r10.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r17);

        goto label15;

     label14:
        $r4 = <net.sourceforge.plantuml.ugraphic.UPattern: net.sourceforge.plantuml.ugraphic.UPattern SMALL_CIRCLE>;

        if r1 != $r4 goto label15;

        $r5 = new java.awt.image.BufferedImage;

        specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(int,int,int)>(4, 4, 2);

        $r6 = new java.awt.Rectangle;

        specialinvoke $r6.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, 4, 4);

        $r7 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $r8 = (net.sourceforge.plantuml.ugraphic.color.HColorSimple) $r7;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: java.awt.Color getColor999()>();

        i6 = virtualinvoke $r9.<java.awt.Color: int getRGB()>();

        virtualinvoke $r5.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(0, 1, i6);

        virtualinvoke $r5.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(1, 0, i6);

        virtualinvoke $r5.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(1, 1, i6);

        virtualinvoke $r5.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(1, 2, i6);

        virtualinvoke $r5.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(2, 1, i6);

        $r11 = new java.awt.TexturePaint;

        specialinvoke $r11.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r5, $r6);

        virtualinvoke r10.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r11);

     label15:
        return;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        java.awt.Graphics2D $r5;
        net.sourceforge.plantuml.ugraphic.URectangle $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.URectangle) r1;

        $r5 = (java.awt.Graphics2D) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: void draw(net.sourceforge.plantuml.ugraphic.URectangle,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
