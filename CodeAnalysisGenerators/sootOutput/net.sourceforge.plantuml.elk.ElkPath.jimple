public class net.sourceforge.plantuml.elk.ElkPath extends java.lang.Object implements net.sourceforge.plantuml.graphic.UDrawable
{
    private final net.sourceforge.plantuml.cucadiagram.Link link;
    private final net.sourceforge.plantuml.elk.proxy.graph.ElkEdge edge;
    private final net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram;
    private final net.sourceforge.plantuml.graphic.TextBlock centerLabel;
    private final net.sourceforge.plantuml.graphic.TextBlock headLabel;
    private final net.sourceforge.plantuml.graphic.TextBlock tailLabel;
    private final net.sourceforge.plantuml.skin.rose.Rose rose;
    private final net.sourceforge.plantuml.style.SName styleName;

    public void <init>(net.sourceforge.plantuml.cucadiagram.CucaDiagram, net.sourceforge.plantuml.style.SName, net.sourceforge.plantuml.cucadiagram.Link, net.sourceforge.plantuml.elk.proxy.graph.ElkEdge, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.elk.ElkPath r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1;
        net.sourceforge.plantuml.cucadiagram.Link r2;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge r3;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram r4;
        net.sourceforge.plantuml.graphic.TextBlock r5, r6, r7;
        net.sourceforge.plantuml.style.SName r8;

        r0 := @this: net.sourceforge.plantuml.elk.ElkPath;

        r4 := @parameter0: net.sourceforge.plantuml.cucadiagram.CucaDiagram;

        r8 := @parameter1: net.sourceforge.plantuml.style.SName;

        r2 := @parameter2: net.sourceforge.plantuml.cucadiagram.Link;

        r3 := @parameter3: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge;

        r5 := @parameter4: net.sourceforge.plantuml.graphic.TextBlock;

        r6 := @parameter5: net.sourceforge.plantuml.graphic.TextBlock;

        r7 := @parameter6: net.sourceforge.plantuml.graphic.TextBlock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r1.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.skin.rose.Rose rose> = $r1;

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link> = r2;

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge edge> = r3;

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram> = r4;

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.TextBlock centerLabel> = r5;

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.TextBlock tailLabel> = r6;

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.TextBlock headLabel> = r7;

        r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.style.SName styleName> = r8;

        return;
    }

    private net.sourceforge.plantuml.ColorParam getArrowColorParam()
    {
        net.sourceforge.plantuml.elk.ElkPath r0;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r1, $r4, $r7, $r10, $r13;
        net.sourceforge.plantuml.UmlDiagramType $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.IllegalStateException $r16;
        net.sourceforge.plantuml.ColorParam $r17, $r18, $r19, $r20, $r21;

        r0 := @this: net.sourceforge.plantuml.elk.ElkPath;

        $r1 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r3 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType CLASS>;

        if $r2 != $r3 goto label1;

        $r21 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r21;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r6 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType OBJECT>;

        if $r5 != $r6 goto label2;

        $r20 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r20;

     label2:
        $r7 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r9 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType DESCRIPTION>;

        if $r8 != $r9 goto label3;

        $r19 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r19;

     label3:
        $r10 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r12 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType ACTIVITY>;

        if $r11 != $r12 goto label4;

        $r18 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r18;

     label4:
        $r13 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r15 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if $r14 != $r15 goto label5;

        $r17 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r17;

     label5:
        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>()>();

        throw $r16;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r4, $r5;
        net.sourceforge.plantuml.elk.ElkPath r3;
        net.sourceforge.plantuml.style.StyleSignature r6;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r7;
        net.sourceforge.plantuml.style.StyleBuilder $r8;
        net.sourceforge.plantuml.style.Style $r9;

        r3 := @this: net.sourceforge.plantuml.elk.ElkPath;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r4 = r3.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.style.SName styleName>;

        $r0[2] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName arrow>;

        $r0[3] = $r5;

        r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r7 = r3.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r9 = virtualinvoke r6.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r8);

        return $r9;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.elk.ElkPath r0;
        net.sourceforge.plantuml.cucadiagram.Link $r1, $r7, $r9, $r12, $r17, $r41, $r44, $r46, $r47, $r59, $r64;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r2;
        net.sourceforge.plantuml.ISkinParam r3;
        net.sourceforge.plantuml.ColorParam[] $r4;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.ColorParam $r6;
        net.sourceforge.plantuml.graphic.color.Colors $r8, $r42, $r45, $r48, $r65;
        net.sourceforge.plantuml.ugraphic.color.HColor $r10, r57, r58;
        java.util.List r11;
        net.sourceforge.plantuml.cucadiagram.LinkType $r13, $r18, r60;
        net.sourceforge.plantuml.cucadiagram.LinkDecor $r14, $r19;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r15, $r20;
        net.sourceforge.plantuml.graphic.UDrawable r16, r21;
        java.lang.Object $r22, $r24, $r28, $r30;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection $r23, $r25, $r29, $r31;
        net.sourceforge.plantuml.ugraphic.UTranslate $r26, $r32;
        net.sourceforge.plantuml.ugraphic.UGraphic $r27, $r33, r56, $r66, r67;
        java.io.PrintStream $r34, $r36;
        java.lang.StringBuilder $r35, $r37, $r39;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge $r38, $r68;
        java.lang.String $r40;
        net.sourceforge.plantuml.ugraphic.UStroke $r43, $r62, r63;
        net.sourceforge.plantuml.graphic.color.ColorType $r49, $r50;
        net.sourceforge.plantuml.style.Style $r51;
        net.sourceforge.plantuml.style.PName $r52;
        net.sourceforge.plantuml.style.Value $r53;
        net.sourceforge.plantuml.api.ThemeStyle $r54;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r55;
        net.sourceforge.plantuml.LineParam $r61;
        int $i0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.elk.ElkPath;

        r56 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.Link: boolean isHidden()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r2 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label02;

        $r51 = specialinvoke r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.style.Style getStyle()>();

        $r52 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r53 = virtualinvoke $r51.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r52);

        $r54 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r55 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r57 = interfaceinvoke $r53.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r54, $r55);

        goto label03;

     label02:
        $r5 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.skin.rose.Rose rose>;

        $r4 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.ColorParam getArrowColorParam()>();

        $r4[0] = $r6;

        r57 = virtualinvoke $r5.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>(r3, null, $r4);

     label03:
        $r7 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        if $r8 == null goto label05;

        $r47 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r48 = virtualinvoke $r47.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r50 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType ARROW>;

        $r49 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r58 = virtualinvoke $r48.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.graphic.color.ColorType)>($r50, $r49);

        if r58 == null goto label04;

        r57 = r58;

     label04:
        goto label06;

     label05:
        $r9 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.ugraphic.color.HColor getSpecificColor()>();

        if $r10 == null goto label06;

        $r46 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        r57 = virtualinvoke $r46.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.ugraphic.color.HColor getSpecificColor()>();

     label06:
        $r59 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        r60 = virtualinvoke $r59.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $r61 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam arrow>;

        $r62 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r61, null);

        r63 = virtualinvoke r60.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.ugraphic.UStroke getStroke3(net.sourceforge.plantuml.ugraphic.UStroke)>($r62);

        $r64 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r65 = virtualinvoke $r64.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        if $r65 == null goto label07;

        $r41 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r42 = virtualinvoke $r41.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r43 = virtualinvoke $r42.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        if $r43 == null goto label07;

        $r44 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r45 = virtualinvoke $r44.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r63 = virtualinvoke $r45.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

     label07:
        $r66 = interfaceinvoke r56.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r63);

        r67 = interfaceinvoke $r66.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r57);

        $r68 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge edge>;

        r11 = virtualinvoke $r68.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: java.util.List getSections()>();

        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        if $i0 != 0 goto label08;

        $r34 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>("Strange: no section?");

        $r36 = <java.lang.System: java.io.PrintStream err>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Maybe a \'Long hierarchical edge\' ");

        $r38 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge edge>;

        $z2 = virtualinvoke $r38.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: boolean isHierarchical()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>($r40);

        return;

     label08:
        specialinvoke r0.<net.sourceforge.plantuml.elk.ElkPath: void drawSections(net.sourceforge.plantuml.ugraphic.UGraphic,java.util.Collection)>(r67, r11);

        $r12 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.cucadiagram.LinkDecor getDecor1()>();

        $r15 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple WHITE>;

        r16 = specialinvoke r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.UDrawable getDecors(net.sourceforge.plantuml.cucadiagram.LinkDecor,double,net.sourceforge.plantuml.ugraphic.color.HColor)>($r14, 1.5707963267948966, $r15);

        $r17 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.cucadiagram.Link link>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $r19 = virtualinvoke $r18.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.cucadiagram.LinkDecor getDecor2()>();

        $r20 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple WHITE>;

        r21 = specialinvoke r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.UDrawable getDecors(net.sourceforge.plantuml.cucadiagram.LinkDecor,double,net.sourceforge.plantuml.ugraphic.color.HColor)>($r19, -1.5707963267948966, $r20);

        if r16 == null goto label09;

        $r28 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);

        $r29 = (net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection) $r28;

        d0 = virtualinvoke $r29.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getEndX()>();

        $r30 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);

        $r31 = (net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection) $r30;

        d1 = virtualinvoke $r31.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getEndY()>();

        $r32 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r32.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d1);

        $r33 = interfaceinvoke r67.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r32);

        interfaceinvoke r16.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r33);

     label09:
        if r21 == null goto label10;

        $r22 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection) $r22;

        d2 = virtualinvoke $r23.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getStartX()>();

        $r24 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);

        $r25 = (net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection) $r24;

        d3 = virtualinvoke $r25.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getStartY()>();

        $r26 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r26.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d2, d3);

        $r27 = interfaceinvoke r67.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r26);

        interfaceinvoke r21.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r27);

     label10:
        specialinvoke r0.<net.sourceforge.plantuml.elk.ElkPath: void drawLabels(net.sourceforge.plantuml.ugraphic.UGraphic)>(r67);

        return;
    }

    private net.sourceforge.plantuml.graphic.UDrawable getDecors(net.sourceforge.plantuml.cucadiagram.LinkDecor, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.cucadiagram.LinkDecor r0, $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        net.sourceforge.plantuml.svek.extremity.ExtremityFactory r3;
        java.awt.geom.Point2D$Double $r4, $r7;
        double d0;
        net.sourceforge.plantuml.graphic.UDrawable $r5, $r8;
        net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtends $r6;
        net.sourceforge.plantuml.elk.ElkPath r9;

        r9 := @this: net.sourceforge.plantuml.elk.ElkPath;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.LinkDecor;

        d0 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r1 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor EXTENDS>;

        if r0 != $r1 goto label1;

        $r6 = new net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtends;

        specialinvoke $r6.<net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtends: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor)>(r2);

        $r7 = new java.awt.geom.Point2D$Double;

        specialinvoke $r7.<java.awt.geom.Point2D$Double: void <init>()>();

        $r8 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtends: net.sourceforge.plantuml.graphic.UDrawable createUDrawable(java.awt.geom.Point2D,double,net.sourceforge.plantuml.svek.Side)>($r7, d0, null);

        return $r8;

     label1:
        r3 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.svek.extremity.ExtremityFactory getExtremityFactory(net.sourceforge.plantuml.ugraphic.color.HColor)>(r2);

        if r3 != null goto label2;

        return null;

     label2:
        $r4 = new java.awt.geom.Point2D$Double;

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>()>();

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.svek.extremity.ExtremityFactory: net.sourceforge.plantuml.graphic.UDrawable createUDrawable(java.awt.geom.Point2D,double,net.sourceforge.plantuml.svek.Side)>($r4, d0, null);

        return $r5;
    }

    private void drawLabels(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.elk.ElkPath r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r5;
        double d0, d1;
        java.lang.String r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.ugraphic.UGraphic r10, $r13;
        net.sourceforge.plantuml.graphic.TextBlock r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r12;

        r0 := @this: net.sourceforge.plantuml.elk.ElkPath;

        r10 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge edge>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: java.util.Collection getLabels()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.elk.proxy.graph.ElkLabel) $r4;

        d0 = virtualinvoke r5.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: double getX()>();

        d1 = virtualinvoke r5.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: double getY()>();

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: java.lang.String getText()>();

        $r7 = "X";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        r11 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.TextBlock centerLabel>;

        goto label4;

     label2:
        $r8 = "1";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label3;

        r11 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.TextBlock tailLabel>;

        goto label4;

     label3:
        $r9 = "2";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z2 == 0 goto label1;

        r11 = r0.<net.sourceforge.plantuml.elk.ElkPath: net.sourceforge.plantuml.graphic.TextBlock headLabel>;

     label4:
        $r12 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d1);

        $r13 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        interfaceinvoke r11.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r13);

        goto label1;

     label5:
        return;
    }

    private void drawSections(net.sourceforge.plantuml.ugraphic.UGraphic, java.util.Collection)
    {
        java.util.Collection r0, r4;
        java.util.Iterator r1, r5;
        boolean $z0, $z1;
        java.lang.Object $r2, $r8;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r3;
        net.sourceforge.plantuml.elk.ElkPath r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r7;
        double $d0, $d1, $d2, $d3, d4, d5;
        net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint r9;

        r6 := @this: net.sourceforge.plantuml.elk.ElkPath;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection) $r2;

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.util.Collection getBendPoints()>();

        d4 = virtualinvoke r3.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getStartX()>();

        d5 = virtualinvoke r3.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getStartY()>();

        r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint) $r8;

        $d2 = virtualinvoke r9.<net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint: double getX()>();

        $d3 = virtualinvoke r9.<net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint: double getY()>();

        specialinvoke r6.<net.sourceforge.plantuml.elk.ElkPath: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r7, d4, d5, $d2, $d3);

        d4 = virtualinvoke r9.<net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint: double getX()>();

        d5 = virtualinvoke r9.<net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint: double getY()>();

        goto label2;

     label3:
        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getEndX()>();

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: double getEndY()>();

        specialinvoke r6.<net.sourceforge.plantuml.elk.ElkPath: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r7, d4, d5, $d0, $d1);

        goto label1;

     label4:
        return;
    }

    private void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.ULine $r0;
        double d0, d1, d2, d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.elk.ElkPath r5;

        r5 := @this: net.sourceforge.plantuml.elk.ElkPath;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        d0 := @parameter3: double;

        d2 := @parameter4: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d5 = d0 - d1;

        $d4 = d2 - d3;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>($d5, $d4);

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d1, d3);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        return;
    }
}
