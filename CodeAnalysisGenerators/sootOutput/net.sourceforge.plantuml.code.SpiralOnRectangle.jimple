public class net.sourceforge.plantuml.code.SpiralOnRectangle extends java.lang.Object
{
    private final net.sourceforge.plantuml.code.Spiral spiral;
    private final int width;
    private final int height;
    private final net.sourceforge.plantuml.code.PairInt delta;

    public void <init>(int, int)
    {
        net.sourceforge.plantuml.code.SpiralOnRectangle r0;
        net.sourceforge.plantuml.code.Spiral $r1;
        int i0, i1, $i2, $i3;
        net.sourceforge.plantuml.code.PairInt $r2;

        r0 := @this: net.sourceforge.plantuml.code.SpiralOnRectangle;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.code.Spiral;

        specialinvoke $r1.<net.sourceforge.plantuml.code.Spiral: void <init>()>();

        r0.<net.sourceforge.plantuml.code.SpiralOnRectangle: net.sourceforge.plantuml.code.Spiral spiral> = $r1;

        r0.<net.sourceforge.plantuml.code.SpiralOnRectangle: int width> = i0;

        r0.<net.sourceforge.plantuml.code.SpiralOnRectangle: int height> = i1;

        $r2 = new net.sourceforge.plantuml.code.PairInt;

        $i3 = i0 / 2;

        $i2 = i1 / 2;

        specialinvoke $r2.<net.sourceforge.plantuml.code.PairInt: void <init>(int,int)>($i3, $i2);

        r0.<net.sourceforge.plantuml.code.SpiralOnRectangle: net.sourceforge.plantuml.code.PairInt delta> = $r2;

        return;
    }

    private boolean inside(net.sourceforge.plantuml.code.PairInt)
    {
        net.sourceforge.plantuml.code.PairInt r0;
        int i0, i1, $i2, $i3;
        net.sourceforge.plantuml.code.SpiralOnRectangle r1;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.code.SpiralOnRectangle;

        r0 := @parameter0: net.sourceforge.plantuml.code.PairInt;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.code.PairInt: int getX()>();

        i1 = virtualinvoke r0.<net.sourceforge.plantuml.code.PairInt: int getY()>();

        if i0 < 0 goto label1;

        $i2 = r1.<net.sourceforge.plantuml.code.SpiralOnRectangle: int width>;

        if i0 >= $i2 goto label1;

        if i1 < 0 goto label1;

        $i3 = r1.<net.sourceforge.plantuml.code.SpiralOnRectangle: int height>;

        if i1 >= $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.code.PairInt nextPoint()
    {
        net.sourceforge.plantuml.code.SpiralOnRectangle r0;
        net.sourceforge.plantuml.code.Spiral $r1;
        net.sourceforge.plantuml.code.PairInt $r2, $r3, r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.code.SpiralOnRectangle;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.code.SpiralOnRectangle: net.sourceforge.plantuml.code.Spiral spiral>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt nextPoint()>();

        $r3 = r0.<net.sourceforge.plantuml.code.SpiralOnRectangle: net.sourceforge.plantuml.code.PairInt delta>;

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.code.PairInt: net.sourceforge.plantuml.code.PairInt plus(net.sourceforge.plantuml.code.PairInt)>($r3);

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.code.SpiralOnRectangle: boolean inside(net.sourceforge.plantuml.code.PairInt)>(r4);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        goto label1;
    }
}
