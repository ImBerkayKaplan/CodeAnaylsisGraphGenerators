public class net.sourceforge.plantuml.svek.image.EntityImageClass extends net.sourceforge.plantuml.svek.AbstractEntityImage implements net.sourceforge.plantuml.creole.Stencil, net.sourceforge.plantuml.svek.WithPorts
{
    private final net.sourceforge.plantuml.graphic.TextBlock body;
    private final net.sourceforge.plantuml.svek.Margins shield;
    private final net.sourceforge.plantuml.svek.image.EntityImageClassHeader header;
    private final net.sourceforge.plantuml.Url url;
    private final double roundCorner;
    private final net.sourceforge.plantuml.cucadiagram.LeafType leafType;
    private final net.sourceforge.plantuml.LineConfigurable lineConfig;

    public void <init>(net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion, net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.PortionShower)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2;
        net.sourceforge.plantuml.ISkinParam r3, $r4, $r6, $r19, $r24;
        net.sourceforge.plantuml.cucadiagram.LeafType $r5;
        boolean $z0, z1, z2, $z3, $z4;
        net.sourceforge.plantuml.CornerParam $r7;
        double $d0, $d1;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion r8;
        net.sourceforge.plantuml.cucadiagram.PortionShower r9;
        net.sourceforge.plantuml.style.Style $r10, $r21;
        net.sourceforge.plantuml.style.PName $r11;
        net.sourceforge.plantuml.style.Value $r12;
        net.sourceforge.plantuml.svek.Margins $r14;
        net.sourceforge.plantuml.cucadiagram.EntityPortion $r15, $r16;
        net.sourceforge.plantuml.cucadiagram.Bodier $r17;
        net.sourceforge.plantuml.FontParam $r18;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r20;
        net.sourceforge.plantuml.graphic.TextBlock $r22;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader $r23;
        net.sourceforge.plantuml.Url $r25;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r8 := @parameter0: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r3 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r9 := @parameter3: net.sourceforge.plantuml.cucadiagram.PortionShower;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ISkinParam mute(net.sourceforge.plantuml.ISkinParam)>(r3);

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, $r4);

        $r5 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.LeafType leafType> = $r5;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.LineConfigurable lineConfig> = r1;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r10 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.style.Style getStyle()>();

        $r11 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName RoundCorner>;

        $r12 = virtualinvoke $r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r11);

        $d1 = interfaceinvoke $r12.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: double roundCorner> = $d1;

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        $d0 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: double getRoundCorner(net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r7, null);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: double roundCorner> = $d0;

     label2:
        if r8 == null goto label3;

        $z3 = interfaceinvoke r8.<net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion: boolean useShield()>();

        if $z3 == 0 goto label3;

        $z4 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean hasNearDecoration()>();

        if $z4 == 0 goto label3;

        $r14 = staticinvoke <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins uniform(double)>(16.0);

        goto label4;

     label3:
        $r14 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

     label4:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.Margins shield> = $r14;

        $r15 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion METHOD>;

        z1 = interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r15, r1);

        $r16 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion FIELD>;

        z2 = interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r16, r1);

        $r17 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r18 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CLASS_ATTRIBUTE>;

        $r19 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r21 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.style.Style getStyle()>();

        $r22 = interfaceinvoke $r17.<net.sourceforge.plantuml.cucadiagram.Bodier: net.sourceforge.plantuml.graphic.TextBlock getBody(net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ISkinParam,boolean,boolean,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.graphic.FontConfiguration)>($r18, $r19, z1, z2, $r20, $r21, null);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body> = $r22;

        $r23 = new net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        specialinvoke $r23.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.PortionShower)>(r1, $r24, r9);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.image.EntityImageClassHeader header> = $r23;

        $r25 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.Url url> = $r25;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r6, $r10;
        net.sourceforge.plantuml.graphic.TextBlock $r4, $r5;
        double $d0, $d1, $d2, $d3, $d4, d5, d6;
        net.sourceforge.plantuml.ISkinParam $r7, $r9;
        byte $b0;
        net.sourceforge.plantuml.Dimension2DDouble $r11, $r12;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.image.EntityImageClassHeader header>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body>;

        if $r4 != null goto label1;

        $r11 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r10 = $r11;

        specialinvoke $r11.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        goto label2;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body>;

        $r10 = interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

     label2:
        r6 = $r10;

        $d0 = virtualinvoke $r10.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d6 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $d2 = interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: double minClassWidth()>();

        $b0 = d6 cmpg $d2;

        if $b0 >= 0 goto label3;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        d6 = interfaceinvoke $r9.<net.sourceforge.plantuml.ISkinParam: double minClassWidth()>();

     label3:
        $d3 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d4 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d5 = $d3 + $d4;

        $r12 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r12.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d6, d5);

        return $r12;
    }

    public java.awt.geom.Rectangle2D getInnerPosition(java.lang.String, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.InnerStrategy)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.InnerStrategy r3;
        net.sourceforge.plantuml.graphic.TextBlock $r4;
        java.awt.geom.Rectangle2D r5, $r9;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7;
        double $d0;
        net.sourceforge.plantuml.ugraphic.UTranslate r8;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.InnerStrategy;

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: java.awt.geom.Rectangle2D getInnerPosition(java.lang.String,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.InnerStrategy)>(r1, r2, r3);

        if r5 != null goto label1;

        return r5;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.image.EntityImageClassHeader header>;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d0);

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.UTranslate: java.awt.geom.Rectangle2D apply(java.awt.geom.Rectangle2D)>(r5);

        return $r9;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        net.sourceforge.plantuml.ugraphic.UComment $r1;
        java.lang.StringBuilder $r2, $r3, $r7, $r12, $r14, $r17, $r18, $r21, $r23, $r26;
        net.sourceforge.plantuml.svek.image.EntityImageClass r4;
        net.sourceforge.plantuml.cucadiagram.IEntity $r5, $r15, $r24;
        java.lang.String $r6, $r8, $r19, $r27;
        net.sourceforge.plantuml.Url $r9, $r29, $r30;
        java.util.EnumMap $r10;
        net.sourceforge.plantuml.ugraphic.UGroupType $r13, $r22;
        net.sourceforge.plantuml.cucadiagram.Code $r16, $r25;

        r4 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = new net.sourceforge.plantuml.ugraphic.UComment;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("class ");

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getCodeGetName()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UComment: void <init>(java.lang.String)>($r8);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        $r9 = r4.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.Url url>;

        if $r9 == null goto label1;

        $r30 = r4.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r30);

     label1:
        $r10 = new java.util.EnumMap;

        specialinvoke $r10.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/UGroupType;");

        $r13 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType CLASS>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem ");

        $r15 = virtualinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" selected");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r19);

        $r22 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem_");

        $r24 = virtualinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r25 = interfaceinvoke $r24.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r27);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r10);

        specialinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageClass: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        $r29 = r4.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.Url url>;

        if $r29 == null goto label2;

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label2:
        return;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5, $r9, $r12;
        net.sourceforge.plantuml.svek.image.EntityImageClass r6;
        net.sourceforge.plantuml.cucadiagram.IEntity $r7, $r10;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r8;
        net.sourceforge.plantuml.cucadiagram.Stereostyles $r11;
        net.sourceforge.plantuml.ISkinParam $r13;
        net.sourceforge.plantuml.style.StyleBuilder $r14;
        net.sourceforge.plantuml.style.Style $r15;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName classDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName class_>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r9 = virtualinvoke $r5.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r8);

        $r10 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r11 = interfaceinvoke $r10.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereostyles getStereostyles()>();

        $r12 = virtualinvoke $r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereostyles)>($r11);

        $r13 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r15 = virtualinvoke $r12.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r14);

        return $r15;
    }

    private void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.svek.image.EntityImageClass r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2, r4;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader $r3, $r91;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16;
        net.sourceforge.plantuml.ugraphic.URectangle $r5, $r6, r11, $r28, $r29, $r41, r88;
        net.sourceforge.plantuml.cucadiagram.IEntity $r7, $r9, $r15, $r18, $r22;
        java.lang.String $r8, $r10;
        net.sourceforge.plantuml.LineConfigurable $r12;
        net.sourceforge.plantuml.graphic.color.Colors $r13, $r16, $r19;
        net.sourceforge.plantuml.graphic.color.ColorType $r14, $r17, $r20;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.ISkinParam $r21, $r44, $r49, $r53, $r58, $r68, $r70, $r75, $r77;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r23, $r46, $r50, $r54, $r59;
        net.sourceforge.plantuml.ugraphic.UStroke r24;
        net.sourceforge.plantuml.graphic.TextBlock $r25, $r92;
        net.sourceforge.plantuml.ugraphic.UGraphic $r26, $r27, $r31, $r32, $r33, $r35, $r36, $r39, $r40, $r43, r79, r83, r85, r86, $r90, r93;
        net.sourceforge.plantuml.ugraphic.UBackground $r30, $r38, $r42, $r84;
        net.sourceforge.plantuml.ugraphic.UTranslate $r34, r94;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r37;
        net.sourceforge.plantuml.ColorParam $r45, $r52, $r56, $r57, $r61;
        net.sourceforge.plantuml.cucadiagram.LeafType $r47, $r48;
        net.sourceforge.plantuml.ColorParam[] $r51, $r55, $r60;
        net.sourceforge.plantuml.style.Style $r62, $r65, $r72;
        net.sourceforge.plantuml.style.PName $r63, $r66, $r73;
        net.sourceforge.plantuml.style.Value $r64, $r67, $r74;
        net.sourceforge.plantuml.api.ThemeStyle $r69, $r76;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r71, $r78;
        net.sourceforge.plantuml.ugraphic.color.HColor r80, r81, r82;
        byte $b0, $b1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r79 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r79.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r3 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.image.EntityImageClassHeader header>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r5 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        $d2 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: double roundCorner>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>($d2);

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getCodeGetName()>();

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getCodeLine()>();

        r11 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle withCommentAndCodeLine(java.lang.String,java.lang.String)>($r8, $r10);

        d12 = 0.0;

        $r12 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.LineConfigurable lineConfig>;

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.LineConfigurable: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r14 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r80 = virtualinvoke $r13.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r14);

        $r15 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r17 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType HEADER>;

        r81 = virtualinvoke $r16.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r17);

        $r18 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r20 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r82 = virtualinvoke $r19.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r20);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label03;

        $r62 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.style.Style getStyle()>();

        $r63 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r64 = virtualinvoke $r62.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r63);

        d12 = interfaceinvoke $r64.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        if r80 != null goto label01;

        $r72 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.style.Style getStyle()>();

        $r73 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r74 = virtualinvoke $r72.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r73);

        $r75 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r76 = interfaceinvoke $r75.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r77 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r78 = interfaceinvoke $r77.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r80 = interfaceinvoke $r74.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r76, $r78);

     label01:
        if r82 != null goto label02;

        $r65 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.style.Style getStyle()>();

        $r66 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r67 = virtualinvoke $r65.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r66);

        $r68 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r69 = interfaceinvoke $r68.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r70 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r71 = interfaceinvoke $r70.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r82 = interfaceinvoke $r67.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r69, $r71);

     label02:
        if r81 != null goto label08;

        r81 = r82;

        goto label08;

     label03:
        $r21 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r22 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r23 = interfaceinvoke $r22.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r21.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r23);

        if $z1 == 0 goto label04;

        d12 = 4.0;

     label04:
        if r80 != null goto label05;

        $r58 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r59 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r60 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r61 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classBorder>;

        $r60[0] = $r61;

        r80 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r58, $r59, $r60);

     label05:
        if r82 != null goto label07;

        $r48 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.LeafType leafType>;

        $r47 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType ENUM>;

        if $r48 != $r47 goto label06;

        $r53 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r54 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r55 = newarray (net.sourceforge.plantuml.ColorParam)[2];

        $r56 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam enumBackground>;

        $r55[0] = $r56;

        $r57 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classBackground>;

        $r55[1] = $r57;

        r82 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r53, $r54, $r55);

        goto label07;

     label06:
        $r49 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r50 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r51 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r52 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classBackground>;

        $r51[0] = $r52;

        r82 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r49, $r50, $r51);

     label07:
        if r81 != null goto label08;

        $r44 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r45 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classHeaderBackground>;

        $r46 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        r81 = interfaceinvoke $r44.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r45, $r46, 0);

     label08:
        interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>(d12);

        r83 = interfaceinvoke r79.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r80);

        $r84 = interfaceinvoke r82.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r85 = interfaceinvoke r83.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r84);

        r24 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        r86 = r85;

        $d13 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: double roundCorner>;

        $b0 = $d13 cmpl 0.0;

        if $b0 != 0 goto label09;

        if r81 == null goto label09;

        $z3 = virtualinvoke r82.<java.lang.Object: boolean equals(java.lang.Object)>(r81);

        if $z3 != 0 goto label09;

        $r40 = interfaceinvoke r85.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r24);

        interfaceinvoke $r40.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r11);

        $r41 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d11 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r41.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, $d11);

        interfaceinvoke $r41.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>(0.0);

        $r42 = interfaceinvoke r81.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r86 = interfaceinvoke r85.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r42);

        $r43 = interfaceinvoke r86.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r24);

        interfaceinvoke $r43.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r41);

        goto label11;

     label09:
        $d14 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: double roundCorner>;

        $b1 = $d14 cmpl 0.0;

        if $b1 == 0 goto label10;

        if r81 == null goto label10;

        $z2 = virtualinvoke r82.<java.lang.Object: boolean equals(java.lang.Object)>(r81);

        if $z2 != 0 goto label10;

        $r27 = interfaceinvoke r85.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r24);

        interfaceinvoke $r27.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r11);

        $r28 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r28.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, $d4);

        $d5 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: double roundCorner>;

        r88 = virtualinvoke $r28.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>($d5);

        $r29 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d6 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: double roundCorner>;

        $d7 = $d6 / 2.0;

        specialinvoke $r29.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, $d7);

        interfaceinvoke r88.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>(0.0);

        virtualinvoke $r29.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(0.0);

        $r30 = interfaceinvoke r81.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r31 = interfaceinvoke r85.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r30);

        r86 = interfaceinvoke $r31.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r81);

        $r32 = interfaceinvoke r86.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r24);

        interfaceinvoke $r32.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r88);

        $r33 = interfaceinvoke r86.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r24);

        $d8 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d9 = virtualinvoke $r29.<net.sourceforge.plantuml.ugraphic.URectangle: double getHeight()>();

        $d10 = $d8 - $d9;

        $r34 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d10);

        $r35 = interfaceinvoke $r33.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r34);

        interfaceinvoke $r35.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r29);

        interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>(0.0);

        $r36 = interfaceinvoke r85.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r24);

        $r37 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r37.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r38 = virtualinvoke $r37.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r39 = interfaceinvoke $r36.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r38);

        interfaceinvoke $r39.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r11);

        goto label11;

     label10:
        $r90 = interfaceinvoke r85.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r24);

        interfaceinvoke $r90.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r11);

     label11:
        $r91 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.image.EntityImageClassHeader header>;

        $d15 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d16 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke $r91.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>(r86, $d15, $d16);

        $r92 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body>;

        if $r92 == null goto label12;

        r93 = staticinvoke <net.sourceforge.plantuml.ugraphic.UGraphicStencil: net.sourceforge.plantuml.ugraphic.UGraphic create(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.creole.Stencil,net.sourceforge.plantuml.ugraphic.UStroke)>(r85, r1, r24);

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        r94 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d3);

        $r25 = r1.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body>;

        $r26 = interfaceinvoke r93.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r94);

        interfaceinvoke $r25.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r26);

     label12:
        return;
    }

    public net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.graphic.TextBlock $r4, $r6;
        boolean $z0;
        net.sourceforge.plantuml.svek.Ports $r5, $r8, $r9;
        net.sourceforge.plantuml.svek.WithPorts $r7;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.image.EntityImageClassHeader header>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body>;

        $z0 = $r4 instanceof net.sourceforge.plantuml.svek.WithPorts;

        if $z0 == 0 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.graphic.TextBlock body>;

        $r7 = (net.sourceforge.plantuml.svek.WithPorts) $r6;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.svek.WithPorts: net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.svek.Ports: net.sourceforge.plantuml.svek.Ports translateY(double)>($d0);

        return $r9;

     label1:
        $r5 = new net.sourceforge.plantuml.svek.Ports;

        specialinvoke $r5.<net.sourceforge.plantuml.svek.Ports: void <init>()>();

        return $r5;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getStroke()
    {
        boolean $z0;
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.LineConfigurable $r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3, $r8, r9;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.LineParam $r5;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r6;
        net.sourceforge.plantuml.style.Style $r7;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.style.Style getStyle()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        return $r8;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.LineConfigurable lineConfig>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.LineConfigurable: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r9 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        if r9 != null goto label2;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam classBorder>;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        r9 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r5, $r6);

     label2:
        if r9 != null goto label3;

        $r3 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r9 = $r3;

     label3:
        return r9;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.cucadiagram.IEntity $r1;
        net.sourceforge.plantuml.cucadiagram.ILeaf $r2;
        java.util.Collection $r3;
        int $i0;
        net.sourceforge.plantuml.svek.ShapeType $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r2 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r1;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.cucadiagram.ILeaf: java.util.Collection getPortShortNames()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label1;

        $r5 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_HTML_FOR_PORTS>;

        return $r5;

     label1:
        $r4 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r4;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.svek.Margins $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.svek.Margins shield>;

        return $r1;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        return 0.0;
    }

    public double getEndingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClass r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClass;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 := @parameter1: double;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClass: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }
}
