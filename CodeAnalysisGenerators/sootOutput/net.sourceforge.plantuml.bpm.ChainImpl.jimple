public class net.sourceforge.plantuml.bpm.ChainImpl extends java.lang.Object implements net.sourceforge.plantuml.bpm.Chain
{
    private final java.util.List positive;
    private final java.util.List negative;
    private int currentVersion;
    static final boolean $assertionsDisabled;

    public boolean remove(java.lang.Object)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        java.lang.Object r1;
        java.util.List $r2, $r3;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: int updateStructuralVersion()>();

        $r2 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if z0 != 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        z0 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label1:
        return z0;
    }

    public net.sourceforge.plantuml.bpm.ChainImpl cloneMe()
    {
        net.sourceforge.plantuml.bpm.ChainImpl $r0, r2;
        int $i0;
        java.util.List $r3, $r4, $r5, $r6;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        $r0 = new net.sourceforge.plantuml.bpm.ChainImpl;

        specialinvoke $r0.<net.sourceforge.plantuml.bpm.ChainImpl: void <init>()>();

        $i0 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion>;

        $r0.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion> = $i0;

        $r4 = $r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $r3 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r6 = $r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $r5 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r0;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, r6, $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.bpm.ChainImpl r2;
        java.util.List $r3, $r4, $r7, $r9;
        int $i0, i1;
        java.lang.UnsupportedOperationException $r5;
        java.util.Iterator r11;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label5;

        $r7 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i1);

        $z4 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label3;

        return -1;

     label3:
        $r9 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i1);

        $z5 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z5 == 0 goto label4;

        return 1;

     label4:
        i1 = i1 + -1;

        goto label2;

     label5:
        $r4 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        r11 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z2 == 0 goto label7;

        return -1;

     label7:
        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z3 == 0 goto label8;

        return 1;

     label8:
        goto label6;

     label9:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    public java.util.List toList()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.bpm.ChainImpl r2;
        java.util.List $r3, $r4, $r5;
        boolean $z0, $z1;
        java.util.Iterator r6, r8;
        java.lang.Object r7, r9;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        if r7 == null goto label2;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, r7);

     label2:
        goto label1;

     label3:
        $r4 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        if r9 == null goto label5;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r9);

     label5:
        goto label4;

     label6:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    private void <init>()
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative> = $r2;

        return;
    }

    public void <init>(java.lang.Object)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        java.util.ArrayList $r1, $r2;
        java.lang.Object r3, $r5;
        java.util.List $r4;

        r0 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        r3 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative> = $r2;

        $r4 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    private int updateStructuralVersion()
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        $i0 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion>;

        $i1 = $i0 + 1;

        r0.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion> = $i1;

        $i2 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion>;

        return $i2;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Object r0, $r8, $r10;
        net.sourceforge.plantuml.bpm.ChainImpl r2;
        java.util.List $r3, $r4, $r5, $r6, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        i5 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        if i5 >= $i2 goto label4;

        $r5 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i5 >= $i3 goto label2;

        $r9 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i5);

        if r0 != $r10 goto label2;

        return 1;

     label2:
        $r6 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i5 >= $i4 goto label3;

        $r7 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        if r0 != $r8 goto label3;

        return 1;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return 0;
    }

    public net.sourceforge.plantuml.bpm.Navigator navigator(java.lang.Object)
    {
        java.lang.Object r0, $r9, $r11, $r14, $r16;
        net.sourceforge.plantuml.bpm.ChainImpl r2;
        java.util.List $r3, $r4, $r6, $r7, $r8, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.IllegalArgumentException $r5;
        net.sourceforge.plantuml.bpm.ChainImpl$InternalNavigator $r10, $r15;
        boolean $z0, $z1;
        java.lang.AssertionError $r12, $r17;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        i9 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        if i9 >= $i2 goto label6;

        $r6 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i9 >= $i3 goto label3;

        $r13 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i9);

        if r0 != $r14 goto label3;

        $r15 = new net.sourceforge.plantuml.bpm.ChainImpl$InternalNavigator;

        $i8 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion>;

        specialinvoke $r15.<net.sourceforge.plantuml.bpm.ChainImpl$InternalNavigator: void <init>(net.sourceforge.plantuml.bpm.ChainImpl,int,int,net.sourceforge.plantuml.bpm.ChainImpl$1)>(r2, i9, $i8, null);

        $z1 = <net.sourceforge.plantuml.bpm.ChainImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.bpm.ChainImpl$InternalNavigator: java.lang.Object get()>();

        if $r16 == r0 goto label2;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label2:
        return $r15;

     label3:
        $r7 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i4 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i9 >= $i4 goto label5;

        $r8 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i9);

        if r0 != $r9 goto label5;

        $r10 = new net.sourceforge.plantuml.bpm.ChainImpl$InternalNavigator;

        $i5 = neg i9;

        $i7 = $i5 - 1;

        $i6 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion>;

        specialinvoke $r10.<net.sourceforge.plantuml.bpm.ChainImpl$InternalNavigator: void <init>(net.sourceforge.plantuml.bpm.ChainImpl,int,int,net.sourceforge.plantuml.bpm.ChainImpl$1)>(r2, $i7, $i6, null);

        $z0 = <net.sourceforge.plantuml.bpm.ChainImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.bpm.ChainImpl$InternalNavigator: java.lang.Object get()>();

        if $r11 == r0 goto label4;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label4:
        return $r10;

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;
    }

    private java.lang.Object getInternal(int)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        int i0, $i1, $i2;
        java.util.List $r1, $r3;
        java.lang.Object $r2, $r4;

        r0 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: void ensure(int)>(i0);

        if i0 < 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        return $r4;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i1 = neg i0;

        $i2 = $i1 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        return $r2;
    }

    private void setInternal(int, java.lang.Object)
    {
        java.lang.Object r0;
        net.sourceforge.plantuml.bpm.ChainImpl r2;
        int i0, $i1, $i2;
        java.util.List $r3, $r5;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        specialinvoke r2.<net.sourceforge.plantuml.bpm.ChainImpl: void ensure(int)>(i0);

        if i0 < 0 goto label1;

        $r5 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r0);

        goto label2;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i1 = neg i0;

        $i2 = $i1 - 1;

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i2, r0);

     label2:
        return;
    }

    private void insertInternal(int, java.lang.Object)
    {
        java.lang.Object r0;
        net.sourceforge.plantuml.bpm.ChainImpl r2;
        int i0, $i1, $i2;
        java.util.List $r3, $r4;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        specialinvoke r2.<net.sourceforge.plantuml.bpm.ChainImpl: void ensure(int)>(i0);

        if i0 < 0 goto label1;

        $r4 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(i0, r0);

        goto label2;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        $i1 = neg i0;

        $i2 = $i1 - 1;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i2, r0);

     label2:
        return;
    }

    private void ensure(int)
    {
        int i0, $i1, $i2;
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List positive>;

        specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: void ensureInternal(int,java.util.List)>(i0, $r2);

        goto label2;

     label1:
        $i1 = neg i0;

        $i2 = $i1 - 1;

        $r1 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.util.List negative>;

        specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: void ensureInternal(int,java.util.List)>($i2, $r1);

     label2:
        return;
    }

    private void ensureInternal(int, java.util.List)
    {
        boolean $z0, $z1, $z2;
        java.util.List r0;
        int i0, $i1, $i2;
        java.lang.Object $r1;
        net.sourceforge.plantuml.bpm.ChainImpl r2;
        java.lang.AssertionError $r3, $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r2 := @this: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        $z0 = <net.sourceforge.plantuml.bpm.ChainImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r5;

     label1:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i2 > i0 goto label2;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label1;

     label2:
        $z1 = <net.sourceforge.plantuml.bpm.ChainImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 > i0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $z2 = <net.sourceforge.plantuml.bpm.ChainImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        if $r1 != r2 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        return;
    }

    static int access$100(net.sourceforge.plantuml.bpm.ChainImpl)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        int $i0;

        r0 := @parameter0: net.sourceforge.plantuml.bpm.ChainImpl;

        $i0 = r0.<net.sourceforge.plantuml.bpm.ChainImpl: int currentVersion>;

        return $i0;
    }

    static java.lang.Object access$200(net.sourceforge.plantuml.bpm.ChainImpl, int)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: java.lang.Object getInternal(int)>(i0);

        return $r1;
    }

    static void access$300(net.sourceforge.plantuml.bpm.ChainImpl, int, java.lang.Object)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        int i0;
        java.lang.Object r1;

        r0 := @parameter0: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: void setInternal(int,java.lang.Object)>(i0, r1);

        return;
    }

    static int access$400(net.sourceforge.plantuml.bpm.ChainImpl)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        int $i0;

        r0 := @parameter0: net.sourceforge.plantuml.bpm.ChainImpl;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: int updateStructuralVersion()>();

        return $i0;
    }

    static void access$500(net.sourceforge.plantuml.bpm.ChainImpl, int, java.lang.Object)
    {
        net.sourceforge.plantuml.bpm.ChainImpl r0;
        int i0;
        java.lang.Object r1;

        r0 := @parameter0: net.sourceforge.plantuml.bpm.ChainImpl;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        specialinvoke r0.<net.sourceforge.plantuml.bpm.ChainImpl: void insertInternal(int,java.lang.Object)>(i0, r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/bpm/ChainImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.bpm.ChainImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
