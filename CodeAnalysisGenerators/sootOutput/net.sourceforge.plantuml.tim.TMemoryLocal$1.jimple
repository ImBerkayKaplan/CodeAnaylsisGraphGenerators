class net.sourceforge.plantuml.tim.TMemoryLocal$1 extends java.lang.Object implements net.sourceforge.plantuml.tim.Trie
{
    final net.sourceforge.plantuml.tim.TMemoryLocal this$0;

    void <init>(net.sourceforge.plantuml.tim.TMemoryLocal)
    {
        net.sourceforge.plantuml.tim.TMemoryLocal$1 r0;
        net.sourceforge.plantuml.tim.TMemoryLocal r1;

        r0 := @this: net.sourceforge.plantuml.tim.TMemoryLocal$1;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TMemoryLocal;

        r0.<net.sourceforge.plantuml.tim.TMemoryLocal$1: net.sourceforge.plantuml.tim.TMemoryLocal this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void add(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.tim.TMemoryLocal$1 r1;
        java.lang.String r2;

        r1 := @this: net.sourceforge.plantuml.tim.TMemoryLocal$1;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getLonguestMatchStartingIn(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TMemoryLocal$1 r0;
        net.sourceforge.plantuml.tim.TMemoryLocal $r1, $r6, $r9;
        net.sourceforge.plantuml.tim.TMemoryGlobal $r2;
        net.sourceforge.plantuml.tim.Trie $r3;
        java.lang.String r4, r5, r8, r11;
        net.sourceforge.plantuml.tim.TrieImpl $r7, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: net.sourceforge.plantuml.tim.TMemoryLocal$1;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.tim.TMemoryLocal$1: net.sourceforge.plantuml.tim.TMemoryLocal this$0>;

        $r2 = staticinvoke <net.sourceforge.plantuml.tim.TMemoryLocal: net.sourceforge.plantuml.tim.TMemoryGlobal access$000(net.sourceforge.plantuml.tim.TMemoryLocal)>($r1);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.TMemoryGlobal: net.sourceforge.plantuml.tim.Trie variablesNames3()>();

        r5 = interfaceinvoke $r3.<net.sourceforge.plantuml.tim.Trie: java.lang.String getLonguestMatchStartingIn(java.lang.String)>(r4);

        $r6 = r0.<net.sourceforge.plantuml.tim.TMemoryLocal$1: net.sourceforge.plantuml.tim.TMemoryLocal this$0>;

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.TMemoryLocal: net.sourceforge.plantuml.tim.TrieImpl access$100(net.sourceforge.plantuml.tim.TMemoryLocal)>($r6);

        r8 = virtualinvoke $r7.<net.sourceforge.plantuml.tim.TrieImpl: java.lang.String getLonguestMatchStartingIn(java.lang.String)>(r4);

        $r9 = r0.<net.sourceforge.plantuml.tim.TMemoryLocal$1: net.sourceforge.plantuml.tim.TMemoryLocal this$0>;

        $r10 = staticinvoke <net.sourceforge.plantuml.tim.TMemoryLocal: net.sourceforge.plantuml.tim.TrieImpl access$200(net.sourceforge.plantuml.tim.TMemoryLocal)>($r9);

        r11 = virtualinvoke $r10.<net.sourceforge.plantuml.tim.TrieImpl: java.lang.String getLonguestMatchStartingIn(java.lang.String)>(r4);

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        $i1 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        $i6 = virtualinvoke r5.<java.lang.String: int length()>();

        $i7 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i6 < $i7 goto label1;

        return r5;

     label1:
        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        $i3 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i2 < $i3 goto label2;

        $i4 = virtualinvoke r8.<java.lang.String: int length()>();

        $i5 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i4 < $i5 goto label2;

        return r8;

     label2:
        return r11;
    }
}
