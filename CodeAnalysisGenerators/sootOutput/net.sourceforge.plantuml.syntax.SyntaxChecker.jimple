public class net.sourceforge.plantuml.syntax.SyntaxChecker extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.syntax.SyntaxChecker r0;

        r0 := @this: net.sourceforge.plantuml.syntax.SyntaxChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.syntax.SyntaxResult checkSyntax(java.util.List)
    {
        java.lang.StringBuilder $r0;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.String $r4, r7;
        net.sourceforge.plantuml.syntax.SyntaxResult $r5;
        java.lang.Object $r6;

        r2 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.syntax.SyntaxChecker: net.sourceforge.plantuml.syntax.SyntaxResult checkSyntax(java.lang.String)>($r4);

        return $r5;
    }

    public static net.sourceforge.plantuml.syntax.SyntaxResult checkSyntax(java.lang.String)
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        net.sourceforge.plantuml.syntax.SyntaxResult $r1;
        java.lang.String r3, $r13, $r20, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        net.sourceforge.plantuml.SourceStringReader $r4;
        net.sourceforge.plantuml.preproc.Defines $r5;
        java.util.List $r6, r8;
        int $i0;
        java.lang.Object $r9, $r18;
        net.sourceforge.plantuml.BlockUml $r10;
        net.sourceforge.plantuml.core.Diagram r11;
        net.sourceforge.plantuml.core.DiagramDescription $r12, $r23;
        net.sourceforge.plantuml.error.PSystemError r14;
        net.sourceforge.plantuml.LineLocation $r15, $r25, $r26;
        java.util.Collection $r16;
        java.util.Iterator r17;
        net.sourceforge.plantuml.ErrorUml r19;
        net.sourceforge.plantuml.UmlDiagram $r21;
        net.sourceforge.plantuml.UmlDiagramType $r22;
        net.sourceforge.plantuml.LineLocationImpl $r27, $r28;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: void setQuiet(boolean)>(1);

        $r1 = new net.sourceforge.plantuml.syntax.SyntaxResult;

        specialinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void <init>()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("@startuml\n");

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setError(boolean)>(1);

        $r27 = new net.sourceforge.plantuml.LineLocationImpl;

        specialinvoke $r27.<net.sourceforge.plantuml.LineLocationImpl: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>("", null);

        $r28 = virtualinvoke $r27.<net.sourceforge.plantuml.LineLocationImpl: net.sourceforge.plantuml.LineLocationImpl oneLineRead()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setLineLocation(net.sourceforge.plantuml.LineLocation)>($r28);

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void addErrorText(java.lang.String)>("No @startuml/@enduml found");

        return $r1;

     label1:
        $z1 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>("@enduml\n");

        if $z1 != 0 goto label2;

        $z6 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>("@enduml");

        if $z6 != 0 goto label2;

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setError(boolean)>(1);

        $r26 = staticinvoke <net.sourceforge.plantuml.syntax.SyntaxChecker: net.sourceforge.plantuml.LineLocation lastLineNumber2(java.lang.String)>(r3);

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setLineLocation(net.sourceforge.plantuml.LineLocation)>($r26);

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void addErrorText(java.lang.String)>("No @enduml found");

        return $r1;

     label2:
        $r4 = new net.sourceforge.plantuml.SourceStringReader;

        $r5 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r4.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.util.List)>($r5, r3, $r6);

        r8 = virtualinvoke $r4.<net.sourceforge.plantuml.SourceStringReader: java.util.List getBlocks()>();

        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        if $i0 != 0 goto label3;

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setError(boolean)>(1);

        $r25 = staticinvoke <net.sourceforge.plantuml.syntax.SyntaxChecker: net.sourceforge.plantuml.LineLocation lastLineNumber2(java.lang.String)>(r3);

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setLineLocation(net.sourceforge.plantuml.LineLocation)>($r25);

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void addErrorText(java.lang.String)>("No @enduml found");

        return $r1;

     label3:
        $r9 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (net.sourceforge.plantuml.BlockUml) $r9;

        r11 = virtualinvoke $r10.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        $z2 = interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: boolean hasUrl()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setCmapData(boolean)>($z2);

        $z3 = r11 instanceof net.sourceforge.plantuml.UmlDiagram;

        if $z3 == 0 goto label4;

        $r21 = (net.sourceforge.plantuml.UmlDiagram) r11;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setUmlDiagramType(net.sourceforge.plantuml.UmlDiagramType)>($r22);

        $r23 = interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        $r24 = virtualinvoke $r23.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setDescription(java.lang.String)>($r24);

        goto label8;

     label4:
        $z4 = r11 instanceof net.sourceforge.plantuml.error.PSystemError;

        if $z4 == 0 goto label7;

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setError(boolean)>(1);

        r14 = (net.sourceforge.plantuml.error.PSystemError) r11;

        $r15 = virtualinvoke r14.<net.sourceforge.plantuml.error.PSystemError: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setLineLocation(net.sourceforge.plantuml.LineLocation)>($r15);

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setSystemError(net.sourceforge.plantuml.error.PSystemError)>(r14);

        $r16 = virtualinvoke r14.<net.sourceforge.plantuml.error.PSystemError: java.util.Collection getErrorsUml()>();

        r17 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (net.sourceforge.plantuml.ErrorUml) $r18;

        $r20 = virtualinvoke r19.<net.sourceforge.plantuml.ErrorUml: java.lang.String getError()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void addErrorText(java.lang.String)>($r20);

        goto label5;

     label6:
        goto label8;

     label7:
        $r12 = interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.syntax.SyntaxResult: void setDescription(java.lang.String)>($r13);

     label8:
        return $r1;
    }

    public static net.sourceforge.plantuml.syntax.SyntaxResult checkSyntaxFair(java.lang.String)
    {
        net.sourceforge.plantuml.syntax.SyntaxResult $r0;
        net.sourceforge.plantuml.SourceStringReader $r2;
        net.sourceforge.plantuml.preproc.Defines $r3;
        java.lang.String r4, $r12, $r19, $r23;
        java.util.List $r5, r7;
        int $i0;
        java.lang.Object $r8, $r17;
        net.sourceforge.plantuml.BlockUml $r9;
        net.sourceforge.plantuml.core.Diagram r10;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.core.DiagramDescription $r11, $r22;
        net.sourceforge.plantuml.error.PSystemError r13;
        net.sourceforge.plantuml.LineLocation $r14, $r24;
        java.util.Collection $r15;
        java.util.Iterator r16;
        net.sourceforge.plantuml.ErrorUml r18;
        net.sourceforge.plantuml.UmlDiagram $r20;
        net.sourceforge.plantuml.UmlDiagramType $r21;

        r4 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.syntax.SyntaxResult;

        specialinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void <init>()>();

        $r2 = new net.sourceforge.plantuml.SourceStringReader;

        $r3 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.util.List)>($r3, r4, $r5);

        r7 = virtualinvoke $r2.<net.sourceforge.plantuml.SourceStringReader: java.util.List getBlocks()>();

        $i0 = interfaceinvoke r7.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setError(boolean)>(1);

        $r24 = staticinvoke <net.sourceforge.plantuml.syntax.SyntaxChecker: net.sourceforge.plantuml.LineLocation lastLineNumber2(java.lang.String)>(r4);

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setLineLocation(net.sourceforge.plantuml.LineLocation)>($r24);

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void addErrorText(java.lang.String)>("No @enduml found");

        return $r0;

     label1:
        $r8 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (net.sourceforge.plantuml.BlockUml) $r8;

        r10 = virtualinvoke $r9.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        $z0 = interfaceinvoke r10.<net.sourceforge.plantuml.core.Diagram: boolean hasUrl()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setCmapData(boolean)>($z0);

        $z1 = r10 instanceof net.sourceforge.plantuml.UmlDiagram;

        if $z1 == 0 goto label2;

        $r20 = (net.sourceforge.plantuml.UmlDiagram) r10;

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setUmlDiagramType(net.sourceforge.plantuml.UmlDiagramType)>($r21);

        $r22 = interfaceinvoke r10.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setDescription(java.lang.String)>($r23);

        goto label6;

     label2:
        $z2 = r10 instanceof net.sourceforge.plantuml.error.PSystemError;

        if $z2 == 0 goto label5;

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setError(boolean)>(1);

        r13 = (net.sourceforge.plantuml.error.PSystemError) r10;

        $r14 = virtualinvoke r13.<net.sourceforge.plantuml.error.PSystemError: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setLineLocation(net.sourceforge.plantuml.LineLocation)>($r14);

        $r15 = virtualinvoke r13.<net.sourceforge.plantuml.error.PSystemError: java.util.Collection getErrorsUml()>();

        r16 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r17 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (net.sourceforge.plantuml.ErrorUml) $r17;

        $r19 = virtualinvoke r18.<net.sourceforge.plantuml.ErrorUml: java.lang.String getError()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void addErrorText(java.lang.String)>($r19);

        goto label3;

     label4:
        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setSystemError(net.sourceforge.plantuml.error.PSystemError)>(r13);

        goto label6;

     label5:
        $r11 = interfaceinvoke r10.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.syntax.SyntaxResult: void setDescription(java.lang.String)>($r12);

     label6:
        return $r0;
    }

    private static int lastLineNumber(java.lang.String)
    {
        java.lang.String r0;
        int $i0, i2, i3;
        char $c1;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c1 != 10 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    private static net.sourceforge.plantuml.LineLocation lastLineNumber2(java.lang.String)
    {
        net.sourceforge.plantuml.LineLocationImpl $r0, r2;
        java.lang.String r1;
        int $i0, i2;
        char $c1;

        r1 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.LineLocationImpl;

        specialinvoke $r0.<net.sourceforge.plantuml.LineLocationImpl: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>("", null);

        r2 = virtualinvoke $r0.<net.sourceforge.plantuml.LineLocationImpl: net.sourceforge.plantuml.LineLocationImpl oneLineRead()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label3;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if $c1 != 10 goto label2;

        r2 = virtualinvoke r2.<net.sourceforge.plantuml.LineLocationImpl: net.sourceforge.plantuml.LineLocationImpl oneLineRead()>();

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r2;
    }
}
