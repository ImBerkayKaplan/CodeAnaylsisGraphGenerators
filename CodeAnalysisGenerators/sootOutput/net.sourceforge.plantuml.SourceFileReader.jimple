public class net.sourceforge.plantuml.SourceFileReader extends net.sourceforge.plantuml.SourceFileReaderAbstract implements net.sourceforge.plantuml.ISourceFileReader
{

    public void <init>(java.io.File) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceFileReader r0;
        java.io.File r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.SourceFileReader;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceFileReader: void <init>(java.io.File,java.io.File)>(r1, $r3);

        return;
    }

    public void <init>(java.io.File, java.io.File, java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceFileReader r0;
        java.io.File r1, r3;
        net.sourceforge.plantuml.preproc.Defines $r2;
        java.util.List $r4;
        java.lang.String r5;
        net.sourceforge.plantuml.FileFormatOption $r6;
        net.sourceforge.plantuml.FileFormat $r7;

        r0 := @this: net.sourceforge.plantuml.SourceFileReader;

        r1 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.File;

        r5 := @parameter2: java.lang.String;

        $r2 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(java.io.File)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = new net.sourceforge.plantuml.FileFormatOption;

        $r7 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r6.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r7);

        specialinvoke r0.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r2, r1, r3, $r4, r5, $r6);

        return;
    }

    public void <init>(java.io.File, java.io.File) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceFileReader r0;
        java.io.File r1, r3;
        net.sourceforge.plantuml.preproc.Defines $r2;
        java.util.List $r4;
        net.sourceforge.plantuml.FileFormatOption $r5;
        net.sourceforge.plantuml.FileFormat $r6;

        r0 := @this: net.sourceforge.plantuml.SourceFileReader;

        r1 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.File;

        $r2 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(java.io.File)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r5 = new net.sourceforge.plantuml.FileFormatOption;

        $r6 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r5.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r6);

        specialinvoke r0.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r2, r1, r3, $r4, null, $r5);

        return;
    }

    public void <init>(java.io.File, java.io.File, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceFileReader r0;
        java.io.File r1, r3;
        net.sourceforge.plantuml.preproc.Defines $r2;
        java.util.List $r4;
        net.sourceforge.plantuml.FileFormatOption r5;

        r0 := @this: net.sourceforge.plantuml.SourceFileReader;

        r1 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.File;

        r5 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        $r2 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(java.io.File)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r2, r1, r3, $r4, null, r5);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.io.File, java.io.File, java.util.List, java.lang.String, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceFileReader r0;
        java.io.File r1, $r7, $r8, $r13, r14;
        net.sourceforge.plantuml.FileFormatOption r2;
        net.sourceforge.plantuml.preproc.Defines r3;
        java.util.List r4;
        java.lang.String r5, $r11;
        net.sourceforge.plantuml.FileSystem $r6, $r10;
        net.sourceforge.plantuml.security.SFile $r9, $r12;
        boolean $z0, $z2;

        r0 := @this: net.sourceforge.plantuml.SourceFileReader;

        r3 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r1 := @parameter1: java.io.File;

        r14 := @parameter2: java.io.File;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.lang.String;

        r2 := @parameter5: net.sourceforge.plantuml.FileFormatOption;

        specialinvoke r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: void <init>(java.io.File,net.sourceforge.plantuml.FileFormatOption,net.sourceforge.plantuml.preproc.Defines,java.util.List,java.lang.String)>(r1, r2, r3, r4, r5);

        $r6 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        $r7 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r8 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile fromFile(java.io.File)>($r8);

        virtualinvoke $r6.<net.sourceforge.plantuml.FileSystem: void setCurrentDir(net.sourceforge.plantuml.security.SFile)>($r9);

        if r14 != null goto label1;

        $r13 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        r14 = virtualinvoke $r13.<java.io.File: java.io.File getParentFile()>();

        goto label2;

     label1:
        $z0 = virtualinvoke r14.<java.io.File: boolean isAbsolute()>();

        if $z0 != 0 goto label2;

        $r10 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        $r11 = virtualinvoke r14.<java.io.File: java.lang.String getPath()>();

        $r12 = virtualinvoke $r10.<net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.security.SFile getFile(java.lang.String)>($r11);

        r14 = virtualinvoke $r12.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

     label2:
        $z2 = virtualinvoke r14.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label3;

        virtualinvoke r14.<java.io.File: boolean mkdirs()>();

     label3:
        r0.<net.sourceforge.plantuml.SourceFileReader: java.io.File outputDirectory> = r14;

        return;
    }

    private java.io.File getDirIfDirectory(java.lang.String) throws java.io.FileNotFoundException
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r6, $r7, $r8, $r12, $r13, $r14, $r17, $r18, $r19, $r23, $r24, $r25, $r29, $r30, $r31;
        java.lang.String $r3, $r9, $r15, $r20, $r26, $r32, r33, r34;
        net.sourceforge.plantuml.SourceFileReader r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9;
        java.io.File $r5, $r10, $r11, $r16, $r21, $r22, r35, r36;
        int $i0, $i1;
        java.lang.Exception $r27;

        r4 := @this: net.sourceforge.plantuml.SourceFileReader;

        r33 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r3);

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.SourceFileReader: boolean endsWithSlashOrAntislash(java.lang.String)>(r33);

        if $z0 == 0 goto label09;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("It ends with / so it looks like a directory");

        $i0 = virtualinvoke r33.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r34 = virtualinvoke r33.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>(r34);

        r35 = $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r20);

        $z4 = virtualinvoke $r16.<java.io.File: boolean isAbsolute()>();

        if $z4 != 0 goto label01;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("It\'s relative, so let\'s change it");

        $r21 = new java.io.File;

        $r22 = r4.<net.sourceforge.plantuml.SourceFileReader: java.io.File outputDirectory>;

        specialinvoke $r21.<java.io.File: void <init>(java.io.File,java.lang.String)>($r22, r34);

        r35 = $r21;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r26);

     label01:
        $z5 = virtualinvoke r35.<java.io.File: boolean exists()>();

        if $z5 != 0 goto label07;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("It does not exist: let\'s create it");

     label02:
        virtualinvoke r35.<java.io.File: boolean mkdirs()>();

     label03:
        goto label05;

     label04:
        $r27 := @caughtexception;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r32);

     label05:
        $z8 = virtualinvoke r35.<java.io.File: boolean exists()>();

        if $z8 == 0 goto label06;

        $z9 = virtualinvoke r35.<java.io.File: boolean isDirectory()>();

        if $z9 == 0 goto label06;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("Creation ok");

        return r35;

     label06:
        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("We cannot create it");

        goto label08;

     label07:
        $z6 = virtualinvoke r35.<java.io.File: boolean isDirectory()>();

        if $z6 != 0 goto label08;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("It exists, but is not a directory: we ignore it");

        return null;

     label08:
        return r35;

     label09:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r33);

        r36 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r9);

        $z1 = virtualinvoke $r5.<java.io.File: boolean isAbsolute()>();

        if $z1 != 0 goto label10;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("Relative, so let\'s change it");

        $r10 = new java.io.File;

        $r11 = r4.<net.sourceforge.plantuml.SourceFileReader: java.io.File outputDirectory>;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, r33);

        r36 = $r10;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r15);

     label10:
        $z2 = virtualinvoke r36.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label11;

        $z3 = virtualinvoke r36.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label11;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("It\'s an existing directory");

        return r36;

     label11:
        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("It\'s not a directory");

        return null;

        catch java.lang.Exception from label02 to label03 with label04;
    }

    protected net.sourceforge.plantuml.SuggestedFile getSuggestedFile(net.sourceforge.plantuml.BlockUml) throws java.io.FileNotFoundException
    {
        net.sourceforge.plantuml.BlockUml r0;
        java.lang.String r1, $r7, $r13, $r18, $r21, $r27, $r31;
        net.sourceforge.plantuml.security.SFile $r2;
        java.io.File $r3, $r5, $r6, r14, $r19, $r20, $r32, $r33;
        net.sourceforge.plantuml.SourceFileReader r4;
        net.sourceforge.plantuml.FileFormatOption $r8, $r22, $r34;
        net.sourceforge.plantuml.FileFormat $r9, $r23, $r35;
        int $i0, $i1;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r16, $r17, $r24, $r25, $r26, $r28, $r29, $r30;
        net.sourceforge.plantuml.SuggestedFile r36;

        r4 := @this: net.sourceforge.plantuml.SourceFileReader;

        r0 := @parameter0: net.sourceforge.plantuml.BlockUml;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.BlockUml: java.lang.String getFileOrDirname()>();

        r36 = null;

        if r1 == null goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name from block=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r13);

        r14 = specialinvoke r4.<net.sourceforge.plantuml.SourceFileReader: java.io.File getDirIfDirectory(java.lang.String)>(r1);

        if r14 != null goto label1;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not taken as a directory");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r31);

        $r32 = new java.io.File;

        $r33 = r4.<net.sourceforge.plantuml.SourceFileReader: java.io.File outputDirectory>;

        specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>($r33, r1);

        $r34 = r4.<net.sourceforge.plantuml.SourceFileReader: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        $r35 = virtualinvoke $r34.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        r36 = staticinvoke <net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.SuggestedFile fromOutputFile(java.io.File,net.sourceforge.plantuml.FileFormat,int)>($r32, $r35, 0);

        goto label2;

     label1:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("We are going to create files in directory ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r18);

        $r19 = new java.io.File;

        $r20 = r4.<net.sourceforge.plantuml.SourceFileReader: java.io.File file>;

        $r21 = virtualinvoke $r20.<java.io.File: java.lang.String getName()>();

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>(r14, $r21);

        $r22 = r4.<net.sourceforge.plantuml.SourceFileReader: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        r36 = staticinvoke <net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.SuggestedFile fromOutputFile(java.io.File,net.sourceforge.plantuml.FileFormat,int)>($r19, $r23, 0);

     label2:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("We are going to put data in ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r27);

     label3:
        if r36 != null goto label4;

        $r3 = new java.io.File;

        $r6 = r4.<net.sourceforge.plantuml.SourceFileReader: java.io.File outputDirectory>;

        $r5 = r4.<net.sourceforge.plantuml.SourceFileReader: java.io.File file>;

        $r7 = virtualinvoke $r5.<java.io.File: java.lang.String getName()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r7);

        $r8 = r4.<net.sourceforge.plantuml.SourceFileReader: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        $i0 = r4.<net.sourceforge.plantuml.SourceFileReader: int cpt>;

        $i1 = $i0 + 1;

        r4.<net.sourceforge.plantuml.SourceFileReader: int cpt> = $i1;

        r36 = staticinvoke <net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.SuggestedFile fromOutputFile(java.io.File,net.sourceforge.plantuml.FileFormat,int)>($r3, $r9, $i0);

     label4:
        $r2 = virtualinvoke r36.<net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.security.SFile: void mkdirs()>();

        return r36;
    }
}
