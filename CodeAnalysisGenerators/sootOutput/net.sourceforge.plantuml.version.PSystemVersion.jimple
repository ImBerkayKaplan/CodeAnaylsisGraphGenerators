public class net.sourceforge.plantuml.version.PSystemVersion extends net.sourceforge.plantuml.PlainStringsDiagram
{
    private static java.awt.image.BufferedImage transparentIcon;

    void <init>(net.sourceforge.plantuml.core.UmlSource, boolean, java.util.List)
    {
        net.sourceforge.plantuml.version.PSystemVersion r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.util.List r2, $r3;
        boolean z1;
        java.awt.image.BufferedImage $r4;
        net.sourceforge.plantuml.graphic.GraphicPosition $r5;

        r0 := @this: net.sourceforge.plantuml.version.PSystemVersion;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        z1 := @parameter1: boolean;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.PlainStringsDiagram: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.version.PSystemVersion: java.util.List strings>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2);

        if z1 == 0 goto label1;

        $r4 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getPlantumlImage()>();

        r0.<net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage image> = $r4;

        $r5 = <net.sourceforge.plantuml.graphic.GraphicPosition: net.sourceforge.plantuml.graphic.GraphicPosition BACKGROUND_CORNER_BOTTOM_RIGHT>;

        r0.<net.sourceforge.plantuml.version.PSystemVersion: net.sourceforge.plantuml.graphic.GraphicPosition imagePosition> = $r5;

     label1:
        return;
    }

    private void <init>(net.sourceforge.plantuml.core.UmlSource, java.util.List, java.awt.image.BufferedImage)
    {
        net.sourceforge.plantuml.version.PSystemVersion r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.util.List r2, $r3;
        java.awt.image.BufferedImage r4;
        net.sourceforge.plantuml.graphic.GraphicPosition $r5;

        r0 := @this: net.sourceforge.plantuml.version.PSystemVersion;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.awt.image.BufferedImage;

        specialinvoke r0.<net.sourceforge.plantuml.PlainStringsDiagram: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.version.PSystemVersion: java.util.List strings>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2);

        r0.<net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage image> = r4;

        $r5 = <net.sourceforge.plantuml.graphic.GraphicPosition: net.sourceforge.plantuml.graphic.GraphicPosition BACKGROUND_CORNER_BOTTOM_RIGHT>;

        r0.<net.sourceforge.plantuml.version.PSystemVersion: net.sourceforge.plantuml.graphic.GraphicPosition imagePosition> = $r5;

        return;
    }

    public static java.awt.image.BufferedImage getPlantumlImage()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("logo.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getCharlieImage()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("charlie.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getTime01()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("time01.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getTime15()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("time15.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getPlantumlSmallIcon()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("favicon.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getArecibo()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("arecibo.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getDotc()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("dotc.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getDotd()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImage(java.lang.String)>("dotd.png");

        return $r0;
    }

    public static java.awt.image.BufferedImage getApple2Image()
    {
        java.awt.image.BufferedImage $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getImageWebp(java.lang.String)>("apple2.png");

        return $r0;
    }

    private static java.awt.image.BufferedImage getImage(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r1;
        java.awt.image.BufferedImage r2, $r4;
        java.io.IOException $r3;
        java.io.InputStream r5;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = class "Lnet/sourceforge/plantuml/version/PSystemVersion;";

        r5 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        r2 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r5);

        virtualinvoke r5.<java.io.InputStream: void close()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

        $r4 = new java.awt.image.BufferedImage;

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(int,int,int)>(10, 10, 2);

        return $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.awt.image.BufferedImage getImageWebp(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r1;
        java.io.IOException $r2;
        java.awt.image.BufferedImage $r3, r8;
        java.lang.Throwable $r4, $r6;
        java.io.InputStream r7;

        r0 := @parameter0: java.lang.String;

     label01:
        $r1 = class "Lnet/sourceforge/plantuml/version/PSystemVersion;";

        r7 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

     label02:
        r8 = staticinvoke <net.sourceforge.plantuml.dedication.PSystemDedication: java.awt.image.BufferedImage getBufferedImage(java.io.InputStream)>(r7);

     label03:
        if r7 == null goto label04;

        virtualinvoke r7.<java.io.InputStream: void close()>();

     label04:
        return r8;

     label05:
        $r6 := @caughtexception;

        if r7 == null goto label09;

     label06:
        virtualinvoke r7.<java.io.InputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label09:
        throw $r6;

     label10:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.io.IOException: void printStackTrace()>();

        $r3 = new java.awt.image.BufferedImage;

        specialinvoke $r3.<java.awt.image.BufferedImage: void <init>(int,int,int)>(10, 10, 2);

        return $r3;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label01 to label04 with label10;
        catch java.io.IOException from label05 to label10 with label10;
    }

    public static java.awt.image.BufferedImage getPlantumlSmallIcon2()
    {
        java.awt.image.BufferedImage $r0, r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, i7;

        $r0 = <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage transparentIcon>;

        if $r0 == null goto label1;

        $r6 = <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage transparentIcon>;

        return $r6;

     label1:
        r1 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage getPlantumlSmallIcon()>();

        if r1 != null goto label2;

        $r5 = new java.awt.image.BufferedImage;

        specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(int,int,int)>(10, 10, 2);

        return $r5;

     label2:
        $r2 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 3);

        <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage transparentIcon> = $r2;

        i6 = 0;

     label3:
        $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        if i6 >= $i2 goto label7;

        i7 = 0;

     label4:
        $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        if i7 >= $i3 goto label6;

        i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i6, i7);

        $i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(0, 0);

        if i4 == $i5 goto label5;

        $r4 = <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage transparentIcon>;

        virtualinvoke $r4.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(i6, i7, i4);

     label5:
        i7 = i7 + 1;

        goto label4;

     label6:
        i6 = i6 + 1;

        goto label3;

     label7:
        $r3 = <net.sourceforge.plantuml.version.PSystemVersion: java.awt.image.BufferedImage transparentIcon>;

        return $r3;
    }

    public static net.sourceforge.plantuml.version.PSystemVersion createShowVersion2(net.sourceforge.plantuml.core.UmlSource)
    {
        java.util.ArrayList $r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r25, $r26, $r28, $r30, $r31, $r34, $r36, $r37, $r39, $r41, $r42, $r44;
        java.lang.String $r4, $r7, $r10, $r16, $r27, $r29, $r33, $r35, $r38, $r40, $r43, $r45, r48, r50;
        net.sourceforge.plantuml.version.License $r13;
        boolean $z2, $z5, $z8, $z14;
        java.util.Collection $r17, $r46;
        net.sourceforge.plantuml.version.PSystemVersion $r18;
        net.sourceforge.plantuml.core.UmlSource r19;
        java.lang.Object $r20, $r21;
        net.sourceforge.plantuml.security.SecurityProfile $r22, $r23;
        net.sourceforge.plantuml.OptionFlags $r24;
        net.sourceforge.plantuml.security.SFile $r32;
        java.util.Iterator r47, r49;

        r19 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<b>PlantUML version ");

        $r4 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</b> (");

        $r7 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String compileTimeString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r13 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" source distribution)");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

        staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: void checkOldVersionWarning(java.util.List)>($r0);

        $z2 = <net.sourceforge.plantuml.OptionFlags: boolean ALLOW_INCLUDE>;

        if $z2 == 0 goto label2;

        $r22 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r23 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r22 != $r23 goto label1;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded from ");

        $r43 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String getJarPath()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r45);

     label1:
        $r24 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z8 = virtualinvoke $r24.<net.sourceforge.plantuml.OptionFlags: boolean isWord()>();

        if $z8 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("Word Mode");

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command Line: ");

        $r27 = staticinvoke <net.sourceforge.plantuml.Run: java.lang.String getCommandLine()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current Dir: ");

        $r32 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r32.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>(".");

        $r33 = virtualinvoke $r32.<net.sourceforge.plantuml.security.SFile: java.lang.String getAbsolutePath()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r35);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("plantuml.include.path: ");

        $r38 = staticinvoke <net.sourceforge.plantuml.preproc2.PreprocessorUtils: java.lang.String getenv(java.lang.String)>("plantuml.include.path");

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r40);

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int addDotStatus(java.util.List,boolean)>($r0, 1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        $r46 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.util.Collection interestingProperties()>();

        r47 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z14 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label4;

        $r21 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.lang.String) $r21;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r48);

        goto label3;

     label4:
        $r17 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.util.Collection interestingValues()>();

        r49 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r20 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.lang.String) $r20;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r50);

        goto label5;

     label6:
        $r18 = new net.sourceforge.plantuml.version.PSystemVersion;

        specialinvoke $r18.<net.sourceforge.plantuml.version.PSystemVersion: void <init>(net.sourceforge.plantuml.core.UmlSource,boolean,java.util.List)>(r19, 1, $r0);

        return $r18;
    }

    public static net.sourceforge.plantuml.version.PSystemVersion createStdLib(net.sourceforge.plantuml.core.UmlSource)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.version.PSystemVersion $r2;
        net.sourceforge.plantuml.core.UmlSource r3;

        r3 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <net.sourceforge.plantuml.preproc.Stdlib: void addInfoVersion(java.util.List,boolean)>($r0, 1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        $r2 = new net.sourceforge.plantuml.version.PSystemVersion;

        specialinvoke $r2.<net.sourceforge.plantuml.version.PSystemVersion: void <init>(net.sourceforge.plantuml.core.UmlSource,boolean,java.util.List)>(r3, 1, $r0);

        return $r2;
    }

    public static net.sourceforge.plantuml.version.PSystemVersion createShowAuthors2(net.sourceforge.plantuml.core.UmlSource)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.PSystemVersion $r1;
        net.sourceforge.plantuml.core.UmlSource r2;

        r2 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r0 = staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: java.util.List getAuthorsStrings(boolean)>(1);

        $r1 = new net.sourceforge.plantuml.version.PSystemVersion;

        specialinvoke $r1.<net.sourceforge.plantuml.version.PSystemVersion: void <init>(net.sourceforge.plantuml.core.UmlSource,boolean,java.util.List)>(r2, 1, r0);

        return $r1;
    }

    public static java.util.List getAuthorsStrings(boolean)
    {
        java.util.ArrayList $r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.String $r4, $r7, $r10, $r16;
        boolean z0;
        net.sourceforge.plantuml.version.License $r13;

        z0 := @parameter0: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<b>PlantUML version ");

        $r4 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</b> (");

        $r7 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String compileTimeString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, $r10, z0);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r13 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" source distribution)");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, $r16, z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, " ", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Original idea</u>: Arnaud Roques", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Word Macro</u>: Alain Bertucat & Matthieu Sabatier", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Word Add-in</u>: Adriaan van den Brand", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>J2V8 & viz.js integration</u>: Andreas Studer", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Official Eclipse Plugin</u>: Hallvard Tr\u00e6tteberg", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Original Eclipse Plugin</u>: Claude Durif & Anne Pecoil", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Servlet & XWiki</u>: Maxime Sinclair", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Docker</u>: David Ducatel", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>AWS lib</u>: Chris Passarello", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Stdlib Icons</u>: tupadr3", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Site design</u>: Raphael Cotisson", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "<u>Logo</u>: Benjamin Croizet", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, " ", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, "https://plantuml.com", z0);

        staticinvoke <net.sourceforge.plantuml.version.PSystemVersion: void add(java.util.List,java.lang.String,boolean)>($r0, " ", z0);

        return $r0;
    }

    private static void add(java.util.List, java.lang.String, boolean)
    {
        boolean z0;
        java.util.List r0;
        java.lang.String r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\</?\\w+\\>", "");

     label1:
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public static net.sourceforge.plantuml.version.PSystemVersion createTestDot(net.sourceforge.plantuml.core.UmlSource) throws java.io.IOException
    {
        java.util.ArrayList $r0;
        java.lang.String $r2;
        net.sourceforge.plantuml.version.PSystemVersion $r3;
        net.sourceforge.plantuml.core.UmlSource r4;

        r4 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String fullDescription()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int addDotStatus(java.util.List,boolean)>($r0, 1);

        $r3 = new net.sourceforge.plantuml.version.PSystemVersion;

        specialinvoke $r3.<net.sourceforge.plantuml.version.PSystemVersion: void <init>(net.sourceforge.plantuml.core.UmlSource,boolean,java.util.List)>(r4, 0, $r0);

        return $r3;
    }

    public static net.sourceforge.plantuml.version.PSystemVersion createKeyDistributor(net.sourceforge.plantuml.core.UmlSource) throws java.io.IOException
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.util.ArrayList $r1;
        java.lang.String $r3, $r4, $r6, $r8;
        java.util.Date $r5, $r7;
        net.sourceforge.plantuml.version.PSystemVersion $r9;
        net.sourceforge.plantuml.core.UmlSource r10;
        java.awt.image.BufferedImage r11;

        r10 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r0 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveDistributor()>();

        r11 = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        if r0 != null goto label1;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("No license found");

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String getOwner()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String getContext()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: java.util.Date getGenerationDate()>();

        $r6 = virtualinvoke $r5.<java.util.Date: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: java.util.Date getExpirationDate()>();

        $r8 = virtualinvoke $r7.<java.util.Date: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        r11 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: java.awt.image.BufferedImage retrieveDistributorImage(net.sourceforge.plantuml.version.LicenseInfo)>(r0);

     label2:
        $r9 = new net.sourceforge.plantuml.version.PSystemVersion;

        specialinvoke $r9.<net.sourceforge.plantuml.version.PSystemVersion: void <init>(net.sourceforge.plantuml.core.UmlSource,java.util.List,java.awt.image.BufferedImage)>(r10, $r1, r11);

        return $r9;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.version.PSystemVersion r1;

        r1 := @this: net.sourceforge.plantuml.version.PSystemVersion;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("(Version)");

        return $r0;
    }

    public java.util.List getLines()
    {
        net.sourceforge.plantuml.version.PSystemVersion r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.version.PSystemVersion;

        $r1 = r0.<net.sourceforge.plantuml.version.PSystemVersion: java.util.List strings>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }
}
