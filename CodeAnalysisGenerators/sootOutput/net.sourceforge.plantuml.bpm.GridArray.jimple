public class net.sourceforge.plantuml.bpm.GridArray extends java.lang.Object implements net.sourceforge.plantuml.graphic.UDrawable
{
    private final int lines;
    private final int cols;
    private final net.sourceforge.plantuml.bpm.Placeable[][] data;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final double margin;

    public void <init>(net.sourceforge.plantuml.ISkinParam, int, int)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        net.sourceforge.plantuml.ISkinParam r1;
        int i0, i1;
        net.sourceforge.plantuml.bpm.Placeable[][] $r2;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.bpm.GridArray: double margin> = 30.0;

        r0.<net.sourceforge.plantuml.bpm.GridArray: double margin> = 30.0;

        r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.ISkinParam skinParam> = r1;

        r0.<net.sourceforge.plantuml.bpm.GridArray: int lines> = i0;

        r0.<net.sourceforge.plantuml.bpm.GridArray: int cols> = i1;

        $r2 = newmultiarray (net.sourceforge.plantuml.bpm.Placeable)[i0][i1];

        r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        net.sourceforge.plantuml.bpm.GridArray r2;
        int $i0, $i1;
        java.lang.String $r6;

        r2 := @this: net.sourceforge.plantuml.bpm.GridArray;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i0 = r2.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i1 = r2.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void setData(int, int, net.sourceforge.plantuml.bpm.Placeable)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int i0, i1;
        net.sourceforge.plantuml.bpm.Placeable[][] $r1;
        net.sourceforge.plantuml.bpm.Placeable r2;
        net.sourceforge.plantuml.bpm.Placeable[] $r3;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.bpm.Placeable;

        $r1 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data>;

        $r3 = $r1[i0];

        $r3[i1] = r2;

        return;
    }

    public net.sourceforge.plantuml.bpm.Placeable getData(int, int)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int i0, i1;
        net.sourceforge.plantuml.bpm.Placeable[][] $r1;
        net.sourceforge.plantuml.bpm.Placeable[] $r2;
        net.sourceforge.plantuml.bpm.Placeable $r3;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        return $r3;
    }

    public final int getRows()
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        $i0 = r0.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        return $i0;
    }

    public final int getLines()
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        $i0 = r0.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        return $i0;
    }

    private double getHeightOfLine(net.sourceforge.plantuml.graphic.StringBounder, int)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int $i0, i1, i2;
        net.sourceforge.plantuml.bpm.Placeable[][] $r1;
        net.sourceforge.plantuml.bpm.Placeable[] $r2;
        net.sourceforge.plantuml.bpm.Placeable r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.ISkinParam $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r6;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        i1 := @parameter1: int;

        d1 = 0.0;

        i2 = 0;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        if i2 >= $i0 goto label4;

        $r1 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data>;

        $r2 = $r1[i1];

        r3 = $r2[i2];

        if r3 != null goto label2;

        goto label3;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r6 = interfaceinvoke r3.<net.sourceforge.plantuml.bpm.Placeable: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.ISkinParam)>(r4, $r5);

        $d0 = virtualinvoke $r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return d1;
    }

    private double getWidthOfCol(net.sourceforge.plantuml.graphic.StringBounder, int)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int $i0, i1, i2;
        net.sourceforge.plantuml.bpm.Placeable[][] $r1;
        net.sourceforge.plantuml.bpm.Placeable[] $r2;
        net.sourceforge.plantuml.bpm.Placeable r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.ISkinParam $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r6;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        i1 := @parameter1: int;

        d1 = 0.0;

        i2 = 0;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        if i2 >= $i0 goto label4;

        $r1 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data>;

        $r2 = $r1[i2];

        r3 = $r2[i1];

        if r3 != null goto label2;

        goto label3;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r6 = interfaceinvoke r3.<net.sourceforge.plantuml.bpm.Placeable: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.ISkinParam)>(r4, $r5);

        $d0 = virtualinvoke $r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return d1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r11;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.bpm.GridArray r2;
        int $i0, $i1, i2, i3;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, d15;
        net.sourceforge.plantuml.bpm.Placeable[][] $r3;
        net.sourceforge.plantuml.bpm.Placeable[] $r4;
        net.sourceforge.plantuml.bpm.Placeable r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r8;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7;
        net.sourceforge.plantuml.graphic.TextBlock $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;

        r2 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d14 = 0.0;

        specialinvoke r2.<net.sourceforge.plantuml.bpm.GridArray: void drawInternalGrid(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        i2 = 0;

     label1:
        $i0 = r2.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        if i2 >= $i0 goto label5;

        d15 = 0.0;

        d0 = specialinvoke r2.<net.sourceforge.plantuml.bpm.GridArray: double getHeightOfLine(net.sourceforge.plantuml.graphic.StringBounder,int)>(r1, i2);

        i3 = 0;

     label2:
        $i1 = r2.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        if i3 >= $i1 goto label4;

        d2 = specialinvoke r2.<net.sourceforge.plantuml.bpm.GridArray: double getWidthOfCol(net.sourceforge.plantuml.graphic.StringBounder,int)>(r1, i3);

        $r3 = r2.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data>;

        $r4 = $r3[i2];

        r5 = $r4[i3];

        if r5 == null goto label3;

        $r6 = r2.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.ISkinParam skinParam>;

        r7 = interfaceinvoke r5.<net.sourceforge.plantuml.bpm.Placeable: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.ISkinParam)>(r1, $r6);

        $r8 = r2.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r9 = interfaceinvoke r5.<net.sourceforge.plantuml.bpm.Placeable: net.sourceforge.plantuml.graphic.TextBlock toTextBlock(net.sourceforge.plantuml.ISkinParam)>($r8);

        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = d2 + 30.0;

        $d5 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = $d4 - $d5;

        $d7 = $d6 / 2.0;

        $d8 = d15 + $d7;

        $d9 = d0 + 30.0;

        $d10 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d11 = $d9 - $d10;

        $d12 = $d11 / 2.0;

        $d13 = d14 + $d12;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d8, $d13);

        $r11 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        interfaceinvoke $r9.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r11);

     label3:
        $d3 = d2 + 30.0;

        d15 = d15 + $d3;

        i3 = i3 + 1;

        goto label2;

     label4:
        $d1 = d0 + 30.0;

        d14 = d14 + $d1;

        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    private void drawInternalGrid(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2, $r6;
        net.sourceforge.plantuml.ugraphic.UGraphic $r3, $r7, r12, r13;
        net.sourceforge.plantuml.ugraphic.ULine $r4, $r8;
        net.sourceforge.plantuml.graphic.StringBounder $r5, $r9, $r10, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d8 = 0.0;

        i4 = 0;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        if i4 >= $i0 goto label2;

        $r11 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d6 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getHeightOfLine(net.sourceforge.plantuml.graphic.StringBounder,int)>($r11, i4);

        $d7 = $d6 + 30.0;

        d8 = d8 + $d7;

        i4 = i4 + 1;

        goto label1;

     label2:
        d9 = 0.0;

        i5 = 0;

     label3:
        $i1 = r0.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        if i5 >= $i1 goto label4;

        $r10 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d4 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getWidthOfCol(net.sourceforge.plantuml.graphic.StringBounder,int)>($r10, i5);

        $d5 = $d4 + 30.0;

        d9 = d9 + $d5;

        i5 = i5 + 1;

        goto label3;

     label4:
        $r1 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        r13 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        d10 = 0.0;

        i6 = 0;

     label5:
        $i2 = r0.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        if i6 >= $i2 goto label6;

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d10);

        $r7 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(d9);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        $r9 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getHeightOfLine(net.sourceforge.plantuml.graphic.StringBounder,int)>($r9, i6);

        $d3 = $d2 + 30.0;

        d10 = d10 + $d3;

        i6 = i6 + 1;

        goto label5;

     label6:
        d11 = 0.0;

        i7 = 0;

     label7:
        $i3 = r0.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        if i7 >= $i3 goto label8;

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d11);

        $r3 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>(d8);

        interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        $r5 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getWidthOfCol(net.sourceforge.plantuml.graphic.StringBounder,int)>($r5, i7);

        $d1 = $d0 + 30.0;

        d11 = d11 + $d1;

        i7 = i7 + 1;

        goto label7;

     label8:
        return;
    }

    private void drawArrow(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.color.HColor $r0;
        net.sourceforge.plantuml.ugraphic.ULine $r1;
        java.awt.geom.Point2D r2, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.ugraphic.UGraphic $r6, r8, r9;
        net.sourceforge.plantuml.bpm.GridArray r7;

        r7 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r3 := @parameter1: java.awt.geom.Point2D;

        r2 := @parameter2: java.awt.geom.Point2D;

        $r0 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor BLUE>;

        r9 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $r1 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 - $d4;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>($d2, $d5);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r3);

        $r6 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        return;
    }

    private java.awt.geom.Point2D getCenterOf(net.sourceforge.plantuml.graphic.StringBounder, int, int)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2, $d3, d4, $d5, d6, $d7, d8, d9;
        java.awt.geom.Point2D$Double $r2;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getWidthOfCol(net.sourceforge.plantuml.graphic.StringBounder,int)>(r1, i0);

        $d1 = $d0 / 2.0;

        d8 = $d1 + 15.0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        d6 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getWidthOfCol(net.sourceforge.plantuml.graphic.StringBounder,int)>(r1, i2);

        $d7 = d6 + 30.0;

        d8 = d8 + $d7;

        i2 = i2 + 1;

        goto label1;

     label2:
        $d2 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getHeightOfLine(net.sourceforge.plantuml.graphic.StringBounder,int)>(r1, i1);

        $d3 = $d2 / 2.0;

        d9 = $d3 + 15.0;

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        d4 = specialinvoke r0.<net.sourceforge.plantuml.bpm.GridArray: double getHeightOfLine(net.sourceforge.plantuml.graphic.StringBounder,int)>(r1, i3);

        $d5 = d4 + 30.0;

        d9 = d9 + $d5;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r2 = new java.awt.geom.Point2D$Double;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d8, d9);

        return $r2;
    }

    private int[] getCoord(net.sourceforge.plantuml.bpm.Cell)
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int $i0, $i1, i2, i3;
        java.lang.IllegalArgumentException $r1;
        net.sourceforge.plantuml.bpm.Placeable[][] $r2;
        net.sourceforge.plantuml.bpm.Placeable[] $r3;
        net.sourceforge.plantuml.bpm.Placeable r4, $r6;
        net.sourceforge.plantuml.bpm.Cell r5;
        int[] $r7;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        r5 := @parameter0: net.sourceforge.plantuml.bpm.Cell;

        i2 = 0;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        if i2 >= $i0 goto label5;

        i3 = 0;

     label2:
        $i1 = r0.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        if i3 >= $i1 goto label4;

        $r2 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data>;

        $r3 = $r2[i2];

        r4 = $r3[i3];

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        if r4 != $r6 goto label3;

        $r7 = newarray (int)[2];

        $r7[0] = i3;

        $r7[1] = i2;

        return $r7;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    private void printMe()
    {
        net.sourceforge.plantuml.bpm.GridArray r0;
        int $i0, $i1, i2, i3;
        java.io.PrintStream $r1, $r5, $r6;
        net.sourceforge.plantuml.bpm.Placeable[][] $r2;
        net.sourceforge.plantuml.bpm.Placeable[] $r3;
        net.sourceforge.plantuml.bpm.Placeable r4;

        r0 := @this: net.sourceforge.plantuml.bpm.GridArray;

        i2 = 0;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.bpm.GridArray: int lines>;

        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        $i1 = r0.<net.sourceforge.plantuml.bpm.GridArray: int cols>;

        if i3 >= $i1 goto label3;

        $r2 = r0.<net.sourceforge.plantuml.bpm.GridArray: net.sourceforge.plantuml.bpm.Placeable[][] data>;

        $r3 = $r2[i2];

        r4 = $r3[i3];

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.Object)>(r4);

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>("  ;  ");

        i3 = i3 + 1;

        goto label2;

     label3:
        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println()>();

        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }
}
