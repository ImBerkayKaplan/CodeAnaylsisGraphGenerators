public class net.sourceforge.plantuml.yaml.YamlLines extends java.lang.Object implements java.lang.Iterable
{
    public static final java.lang.String KEY;
    private java.util.List lines;

    public void <init>(java.util.List)
    {
        net.sourceforge.plantuml.yaml.YamlLines r0;
        java.util.ArrayList $r1;
        java.util.List r2, $r5;
        java.lang.Object $r3;
        boolean $z0, $z2;
        java.lang.String $r4, r7, r8;
        int $i0, i1;
        java.util.Iterator r6;

        r0 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines> = $r1;

        r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r3;

        $z0 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        r8 = specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: java.lang.String removeDiese(java.lang.String)>(r7);

        $r4 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        goto label1;

     label3:
        $r5 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label1;

     label4:
        specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: void mergeMultiline()>();

        specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: void manageSpaceTwoPoints()>();

        specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: void manageList()>();

        i1 = specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: int startingEmptyCols()>();

        specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: void removeFirstCols(int)>(i1);

        return;
    }

    private void manageSpaceTwoPoints()
    {
        net.sourceforge.plantuml.yaml.YamlLines r0;
        java.util.List $r1;
        java.util.ListIterator r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r3;
        int $i0, $i1;
        java.lang.String r4, r5;

        r0 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        $r1 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("\"");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z3 == 0 goto label2;

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(58);

        $i1 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(58);

        if $i0 != $i1 goto label2;

        $z4 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>(": ");

        if $z4 != 0 goto label2;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", ": ");

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        return;
    }

    private java.lang.String removeDiese(java.lang.String)
    {
        java.lang.String r0, $r1;
        int i0;
        net.sourceforge.plantuml.yaml.YamlLines r2;

        r2 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(" #");

        if i0 != -1 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r1;
    }

    private void manageList()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.yaml.YamlLines r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0, $z1, $z2, $z5;
        java.lang.Object $r5;
        java.lang.String r6, $r12, $r13, $r14;
        java.util.regex.Pattern r7;
        java.util.regex.Matcher r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r2 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\s*[-])(\\s*\\S.*)$");

        r8 = virtualinvoke r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z1 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>(": ");

        if $z1 == 0 goto label2;

        $z5 = virtualinvoke r8.<java.util.regex.Matcher: boolean matches()>();

        if $z5 == 0 goto label2;

        $r13 = virtualinvoke r8.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("[-]", " ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label4;

     label2:
        $z2 = virtualinvoke r8.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label4;

     label3:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label4:
        goto label1;

     label5:
        r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines> = $r0;

        return;
    }

    private void removeFirstCols(int)
    {
        int i0;
        net.sourceforge.plantuml.yaml.YamlLines r0;
        java.util.List $r1;
        java.util.ListIterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4, r5;

        r0 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(i0);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(r5);

        goto label2;

     label3:
        return;
    }

    private int startingEmptyCols()
    {
        net.sourceforge.plantuml.yaml.YamlLines r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4;
        int $i0, i1;

        r0 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        i1 = 2147483647;

        $r1 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $i0 = staticinvoke <net.sourceforge.plantuml.yaml.YamlLines: int startingSpaces(java.lang.String)>(r4);

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i0);

        if i1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return i1;
    }

    private static int startingSpaces(java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, $r3;
        java.util.regex.Matcher r2;
        boolean $z0;
        int $i0;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\s*).*");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        return $i0;

     label1:
        return 0;
    }

    private void mergeMultiline()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.yaml.YamlLines r2;
        java.util.List $r3, $r5, $r10, $r12, $r17;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String r4, $r7, $r11, $r14, $r19, $r20, $r22;
        java.lang.Object $r6, $r13, $r18;
        java.lang.StringBuilder $r8, $r15, $r16, $r21;
        boolean $z2;

        r2 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i5 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i5 >= $i0 goto label6;

        r4 = specialinvoke r2.<net.sourceforge.plantuml.yaml.YamlLines: java.lang.String isMultilineStart(int)>(i5);

        if r4 == null goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4);

     label2:
        $i1 = i5 + 1;

        $r10 = r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i1 >= $i2 goto label3;

        $r12 = r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $i3 = i5 + 1;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        $r14 = (java.lang.String) $r13;

        $z2 = specialinvoke r2.<net.sourceforge.plantuml.yaml.YamlLines: boolean textOnly(java.lang.String)>($r14);

        if $z2 == 0 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $i4 = i5 + 1;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i4);

        $r19 = (java.lang.String) $r18;

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String trim()>();

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label5;

     label4:
        $r5 = r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i5);

        $r7 = (java.lang.String) $r6;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        r2.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines> = $r0;

        return;
    }

    private java.lang.String isMultilineStart(int)
    {
        net.sourceforge.plantuml.yaml.YamlLines r0;
        int i0, $i1, i2, $i3;
        java.util.List $r1, $r5, $r8, $r11;
        java.lang.Object $r2, $r6, $r9, $r12;
        java.lang.String $r3, $r4, $r7, $r10, $r13, $r14;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        $r4 = staticinvoke <net.sourceforge.plantuml.yaml.YamlLines: java.lang.String nameOnly(java.lang.String)>($r3);

        if $r4 == null goto label1;

        $r5 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $i1 = i0 + 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $r7 = (java.lang.String) $r6;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: boolean textOnly(java.lang.String)>($r7);

        if $z0 == 0 goto label1;

        $r8 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0);

        $r10 = (java.lang.String) $r9;

        i2 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(58);

        $r11 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i0);

        $r13 = (java.lang.String) $r12;

        $i3 = i2 + 1;

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        return $r14;

     label1:
        return null;
    }

    public static java.lang.String nameOnly(java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, r3;
        java.util.regex.Matcher r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\s*([^:\\s]+)\\s*:\\s*[|>]?\\s*$");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        return r3;

     label1:
        return null;
    }

    private boolean textOnly(java.lang.String)
    {
        net.sourceforge.plantuml.yaml.YamlLines r0;
        java.lang.String r1;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.yaml.YamlLines: boolean isList(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 != -1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private boolean isList(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        net.sourceforge.plantuml.yaml.YamlLines r2;

        r2 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        net.sourceforge.plantuml.yaml.YamlLines r0;
        java.util.List $r1, $r2;
        java.util.Iterator $r3;

        r0 := @this: net.sourceforge.plantuml.yaml.YamlLines;

        $r1 = r0.<net.sourceforge.plantuml.yaml.YamlLines: java.util.List lines>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.yaml.YamlLines: java.lang.String KEY> = "([^:\\s]+)";

        return;
    }
}
