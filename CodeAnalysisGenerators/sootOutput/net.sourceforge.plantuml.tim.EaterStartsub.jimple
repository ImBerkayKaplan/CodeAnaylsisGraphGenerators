public class net.sourceforge.plantuml.tim.EaterStartsub extends net.sourceforge.plantuml.tim.Eater
{
    private java.lang.String subname;

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterStartsub r0;
        net.sourceforge.plantuml.StringLocated r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterStartsub;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterStartsub r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        net.sourceforge.plantuml.tim.EaterException $r3;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TMemory r5;

        r0 := @this: net.sourceforge.plantuml.tim.EaterStartsub;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterStartsub: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterStartsub: void checkAndEatChar(java.lang.String)>("!startsub");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterStartsub: void skipSpaces()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterStartsub: java.lang.String eatAllToEnd()>();

        r0.<net.sourceforge.plantuml.tim.EaterStartsub: java.lang.String subname> = $r1;

        $r2 = r0.<net.sourceforge.plantuml.tim.EaterStartsub: java.lang.String subname>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean matches(java.lang.String)>("\\w+");

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Bad sub name");

        throw $r3;

     label1:
        return;
    }

    public final java.lang.String getSubname()
    {
        net.sourceforge.plantuml.tim.EaterStartsub r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterStartsub;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterStartsub: java.lang.String subname>;

        return $r1;
    }
}
