public class net.sourceforge.plantuml.version.PSystemKeycheck extends net.sourceforge.plantuml.PlainDiagram
{
    private final java.lang.String key;
    private final java.lang.String sig;

    public void <init>(net.sourceforge.plantuml.core.UmlSource, java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.version.PSystemKeycheck r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.lang.String r2, r3;

        r0 := @this: net.sourceforge.plantuml.version.PSystemKeycheck;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<net.sourceforge.plantuml.PlainDiagram: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        r0.<net.sourceforge.plantuml.version.PSystemKeycheck: java.lang.String sig> = r2;

        r0.<net.sourceforge.plantuml.version.PSystemKeycheck: java.lang.String key> = r3;

        return;
    }

    protected net.sourceforge.plantuml.graphic.UDrawable getRootDrawable(net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.version.PSystemKeycheck$1 $r0;
        net.sourceforge.plantuml.version.PSystemKeycheck r1;
        net.sourceforge.plantuml.FileFormatOption r2;

        r1 := @this: net.sourceforge.plantuml.version.PSystemKeycheck;

        r2 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        $r0 = new net.sourceforge.plantuml.version.PSystemKeycheck$1;

        specialinvoke $r0.<net.sourceforge.plantuml.version.PSystemKeycheck$1: void <init>(net.sourceforge.plantuml.version.PSystemKeycheck)>(r1);

        return $r0;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.version.PSystemKeycheck r1;

        r1 := @this: net.sourceforge.plantuml.version.PSystemKeycheck;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("(Key)");

        return $r0;
    }

    private void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException
    {
        net.sourceforge.plantuml.version.PSystemKeycheck r0;
        java.util.ArrayList r1;
        java.lang.String $r2, $r3, $r9;
        net.sourceforge.plantuml.ugraphic.UGraphic r4;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        net.sourceforge.plantuml.version.LicenseInfo r10;
        net.sourceforge.plantuml.svek.TextBlockBackcolored r12;

        r0 := @this: net.sourceforge.plantuml.version.PSystemKeycheck;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.version.PSystemKeycheck: java.util.ArrayList header()>();

     label1:
        $r3 = r0.<net.sourceforge.plantuml.version.PSystemKeycheck: java.lang.String sig>;

        $r2 = r0.<net.sourceforge.plantuml.version.PSystemKeycheck: java.lang.String key>;

        r10 = staticinvoke <net.sourceforge.plantuml.version.PLSSignature: net.sourceforge.plantuml.version.LicenseInfo retrieveNamed(java.lang.String,java.lang.String,boolean)>($r3, $r2, 0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("<u>Provided license information</u>:");

        staticinvoke <net.sourceforge.plantuml.version.License: void addLicenseInfo(java.util.List,net.sourceforge.plantuml.version.LicenseInfo)>(r1, r10);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(" ");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<i>Error:</i> ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        r12 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhite(java.util.List)>(r1);

        interfaceinvoke r12.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r4);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.util.ArrayList header()
    {
        java.util.ArrayList $r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.String $r4, $r7, $r10, $r16;
        net.sourceforge.plantuml.version.License $r13;
        net.sourceforge.plantuml.version.PSystemKeycheck r17;

        r17 := @this: net.sourceforge.plantuml.version.PSystemKeycheck;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<b>PlantUML version ");

        $r4 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</b> (");

        $r7 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String compileTimeString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r13 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" source distribution)");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(" ");

        return $r0;
    }

    private void drawFlash(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.version.LicenseInfo) throws java.io.IOException
    {
        net.sourceforge.plantuml.version.PSystemKeycheck r0;
        java.util.ArrayList r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double $d0, $d1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r22;
        net.sourceforge.plantuml.flashcode.FlashCodeUtils r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r12;
        java.lang.String $r7, $r11, $r13;
        byte[] $r10;
        java.awt.Color $r14, $r15;
        java.awt.image.BufferedImage r16;
        net.sourceforge.plantuml.version.LicenseInfo r17;
        boolean $z2;
        net.sourceforge.plantuml.ugraphic.UImage $r18, r21;
        net.sourceforge.plantuml.ugraphic.PixelImage $r19;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r20;
        int $i0;
        net.sourceforge.plantuml.ugraphic.UGraphic r23, r25;
        net.sourceforge.plantuml.svek.TextBlockBackcolored r24, r26;

        r0 := @this: net.sourceforge.plantuml.version.PSystemKeycheck;

        r23 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r17 := @parameter1: net.sourceforge.plantuml.version.LicenseInfo;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.version.PSystemKeycheck: java.util.ArrayList header()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("To get your <i>Professional Edition License</i>,");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("please send this qrcode to <b>plantuml@gmail.com</b> :");

        r24 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhite(java.util.List)>(r1);

        interfaceinvoke r24.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r23);

        $r2 = interfaceinvoke r23.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = interfaceinvoke r24.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d0);

        r25 = interfaceinvoke r23.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        r5 = staticinvoke <net.sourceforge.plantuml.flashcode.FlashCodeFactory: net.sourceforge.plantuml.flashcode.FlashCodeUtils getFlashCodeUtils()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r10 = staticinvoke <net.sourceforge.plantuml.version.PLSSignature: byte[] signature()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.SignatureUtils: java.lang.String toHexString(byte[])>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = <java.awt.Color: java.awt.Color BLACK>;

        $r14 = <java.awt.Color: java.awt.Color WHITE>;

        r16 = interfaceinvoke r5.<net.sourceforge.plantuml.flashcode.FlashCodeUtils: java.awt.image.BufferedImage exportFlashcode(java.lang.String,java.awt.Color,java.awt.Color)>($r13, $r15, $r14);

        if r16 == null goto label1;

        $r18 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r19 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r20 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_NEAREST_NEIGHBOR>;

        specialinvoke $r19.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>(r16, $r20);

        specialinvoke $r18.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r19);

        r21 = virtualinvoke $r18.<net.sourceforge.plantuml.ugraphic.UImage: net.sourceforge.plantuml.ugraphic.UImage scale(double)>(4.0);

        interfaceinvoke r25.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r21);

        $i0 = virtualinvoke r21.<net.sourceforge.plantuml.ugraphic.UImage: int getHeight()>();

        $d1 = (double) $i0;

        $r22 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d1);

        r25 = interfaceinvoke r25.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r22);

     label1:
        $z2 = virtualinvoke r17.<net.sourceforge.plantuml.version.LicenseInfo: boolean isNone()>();

        if $z2 != 0 goto label2;

        interfaceinvoke r1.<java.util.List: void clear()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("<u>Installed license</u>:");

        staticinvoke <net.sourceforge.plantuml.version.License: void addLicenseInfo(java.util.List,net.sourceforge.plantuml.version.LicenseInfo)>(r1, r17);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(" ");

        r26 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhite(java.util.List)>(r1);

        interfaceinvoke r26.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r25);

     label2:
        return;
    }

    static void access$000(net.sourceforge.plantuml.version.PSystemKeycheck, net.sourceforge.plantuml.ugraphic.UGraphic) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException
    {
        net.sourceforge.plantuml.version.PSystemKeycheck r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;

        r0 := @parameter0: net.sourceforge.plantuml.version.PSystemKeycheck;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        specialinvoke r0.<net.sourceforge.plantuml.version.PSystemKeycheck: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        return;
    }
}
