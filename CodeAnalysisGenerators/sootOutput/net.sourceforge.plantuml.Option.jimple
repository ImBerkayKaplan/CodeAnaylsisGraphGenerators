public class net.sourceforge.plantuml.Option extends java.lang.Object
{
    private final java.util.List excludes;
    private final java.util.List config;
    private final java.util.Map defines;
    private java.lang.String charset;
    private boolean computeurl;
    private boolean decodeurl;
    private boolean pipe;
    private java.lang.String pipeDelimitor;
    private boolean pipeMap;
    private boolean pipeNoStdErr;
    private boolean syntax;
    private boolean checkOnly;
    private net.sourceforge.plantuml.OptionPreprocOutputMode preprocessorOutput;
    private boolean failfast;
    private boolean failfast2;
    private boolean noerror;
    private boolean duration;
    private boolean debugsvek;
    private boolean splash;
    private boolean textProgressBar;
    private int nbThreads;
    private int ftpPort;
    private java.lang.String picowebBindAddress;
    private int picowebPort;
    private boolean hideMetadata;
    private boolean checkMetadata;
    private int stdrpt;
    private int imageIndex;
    private java.lang.String fileDir;
    private java.io.File outputDir;
    private java.io.File outputFile;
    private java.lang.String filename;
    private final java.util.List result;
    private net.sourceforge.plantuml.FileFormatOption fileFormatOption;

    public void <init>()
    {
        net.sourceforge.plantuml.Option r0;
        java.util.ArrayList $r1, $r2, $r4;
        java.util.LinkedHashMap $r3;
        net.sourceforge.plantuml.FileFormatOption $r5;
        net.sourceforge.plantuml.FileFormat $r6;

        r0 := @this: net.sourceforge.plantuml.Option;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.List excludes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.List config> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.Map defines> = $r3;

        r0.<net.sourceforge.plantuml.Option: boolean computeurl> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean decodeurl> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean pipe> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean pipeMap> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean pipeNoStdErr> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean syntax> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean checkOnly> = 0;

        r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.OptionPreprocOutputMode preprocessorOutput> = null;

        r0.<net.sourceforge.plantuml.Option: boolean failfast> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean failfast2> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean noerror> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean duration> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean debugsvek> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean splash> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean textProgressBar> = 0;

        r0.<net.sourceforge.plantuml.Option: int nbThreads> = 0;

        r0.<net.sourceforge.plantuml.Option: int ftpPort> = -1;

        r0.<net.sourceforge.plantuml.Option: java.lang.String picowebBindAddress> = null;

        r0.<net.sourceforge.plantuml.Option: int picowebPort> = -1;

        r0.<net.sourceforge.plantuml.Option: boolean hideMetadata> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean checkMetadata> = 0;

        r0.<net.sourceforge.plantuml.Option: int stdrpt> = 0;

        r0.<net.sourceforge.plantuml.Option: int imageIndex> = 0;

        r0.<net.sourceforge.plantuml.Option: java.io.File outputDir> = null;

        r0.<net.sourceforge.plantuml.Option: java.io.File outputFile> = null;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.List result> = $r4;

        $r5 = new net.sourceforge.plantuml.FileFormatOption;

        $r6 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r5.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r6);

        r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption fileFormatOption> = $r5;

        return;
    }

    public final void setFileFormat(net.sourceforge.plantuml.FileFormat)
    {
        net.sourceforge.plantuml.Option r0;
        net.sourceforge.plantuml.FileFormatOption $r1;
        net.sourceforge.plantuml.FileFormat r2;

        r0 := @this: net.sourceforge.plantuml.Option;

        r2 := @parameter0: net.sourceforge.plantuml.FileFormat;

        $r1 = new net.sourceforge.plantuml.FileFormatOption;

        specialinvoke $r1.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>(r2);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r1);

        return;
    }

    public final void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.Option r0;
        net.sourceforge.plantuml.FileFormatOption r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption fileFormatOption> = r1;

        return;
    }

    public transient void <init>(java.lang.String[]) throws java.lang.InterruptedException, java.io.IOException
    {
        net.sourceforge.plantuml.Option r0;
        java.util.ArrayList $r1, $r2, $r4;
        java.util.LinkedHashMap $r3;
        net.sourceforge.plantuml.FileFormatOption $r5, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43;
        net.sourceforge.plantuml.FileFormat $r6, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44;
        java.lang.String[] r7, r128;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i22, $i23, $i24, $i25, $i26, i27, $i28, i29, $i30;
        java.lang.String $r8, $r46, $r47, $r48, $r49, $r50, $r52, $r53, $r56, $r57, $r60, $r62, $r64, $r80, $r81, $r82, $r83, $r90, $r91, $r94, $r96, $r97, $r98, $r99, $r103, $r105, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r116, $r117, r121, r122, r123, r124, r125, r126, r127, $r129, r130;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z90, $z91, $z92, $z93, $z94, $z95, $z96, $z97, $z98, $z99, $z100, $z101, $z102, $z103, $z104, $z105, $z106, $z107, $z108, $z109, $z110, $z111, $z112, $z113, $z114, $z115, $z116, $z117, $z118, $z119, $z120, $z121, $z122, $z123, $z124, $z125, $z128, $z129, $z131;
        java.io.File $r45, $r107, $r115;
        java.util.List $r51, $r58, $r59, $r95, $r101;
        net.sourceforge.plantuml.OptionFlags $r54, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r85, $r86, $r87, $r88, $r92, $r93, $r106, $r118, $r120;
        java.io.PrintStream $r55;
        net.sourceforge.plantuml.OptionPreprocOutputMode $r65, $r66;
        net.sourceforge.plantuml.security.SFile $r89;
        java.lang.StringBuilder $r100, $r102, $r104;
        long $l20, $l21;

        r0 := @this: net.sourceforge.plantuml.Option;

        r7 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.List excludes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.List config> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.Map defines> = $r3;

        r0.<net.sourceforge.plantuml.Option: boolean computeurl> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean decodeurl> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean pipe> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean pipeMap> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean pipeNoStdErr> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean syntax> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean checkOnly> = 0;

        r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.OptionPreprocOutputMode preprocessorOutput> = null;

        r0.<net.sourceforge.plantuml.Option: boolean failfast> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean failfast2> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean noerror> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean duration> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean debugsvek> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean splash> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean textProgressBar> = 0;

        r0.<net.sourceforge.plantuml.Option: int nbThreads> = 0;

        r0.<net.sourceforge.plantuml.Option: int ftpPort> = -1;

        r0.<net.sourceforge.plantuml.Option: java.lang.String picowebBindAddress> = null;

        r0.<net.sourceforge.plantuml.Option: int picowebPort> = -1;

        r0.<net.sourceforge.plantuml.Option: boolean hideMetadata> = 0;

        r0.<net.sourceforge.plantuml.Option: boolean checkMetadata> = 0;

        r0.<net.sourceforge.plantuml.Option: int stdrpt> = 0;

        r0.<net.sourceforge.plantuml.Option: int imageIndex> = 0;

        r0.<net.sourceforge.plantuml.Option: java.io.File outputDir> = null;

        r0.<net.sourceforge.plantuml.Option: java.io.File outputFile> = null;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.Option: java.util.List result> = $r4;

        $r5 = new net.sourceforge.plantuml.FileFormatOption;

        $r6 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r5.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r6);

        r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption fileFormatOption> = $r5;

        $i0 = lengthof r7;

        if $i0 != 0 goto label001;

        $r120 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r120.<net.sourceforge.plantuml.OptionFlags: void setGui(boolean)>(1);

     label001:
        $r8 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: java.lang.String getenvDefaultConfigFilename()>();

        specialinvoke r0.<net.sourceforge.plantuml.Option: void initInclude(java.lang.String)>($r8);

        i27 = 0;

     label002:
        $i28 = lengthof r7;

        if i27 >= $i28 goto label151;

        r121 = r7[i27];

        $z0 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-headless");

        if $z0 == 0 goto label004;

        if i27 == 0 goto label003;

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>("Warning: -headless flag must be the first one in the command line");

     label003:
        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.awt.headless", "true");

        goto label150;

     label004:
        $z1 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tsvg");

        if $z1 != 0 goto label005;

        $z2 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-svg");

        if $z2 == 0 goto label006;

     label005:
        $r9 = new net.sourceforge.plantuml.FileFormatOption;

        $r10 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        specialinvoke $r9.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r10);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r9);

        goto label150;

     label006:
        $z3 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tsvg:nornd");

        if $z3 != 0 goto label007;

        $z4 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-svg:nornd");

        if $z4 == 0 goto label008;

     label007:
        $r11 = new net.sourceforge.plantuml.FileFormatOption;

        $r12 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        specialinvoke $r11.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r12);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r11);

        goto label150;

     label008:
        $z5 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-thtml");

        if $z5 != 0 goto label009;

        $z6 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-html");

        if $z6 == 0 goto label010;

     label009:
        $r13 = new net.sourceforge.plantuml.FileFormatOption;

        $r14 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat HTML>;

        specialinvoke $r13.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r14);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r13);

        goto label150;

     label010:
        $z7 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tscxml");

        if $z7 != 0 goto label011;

        $z8 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-scxml");

        if $z8 == 0 goto label012;

     label011:
        $r15 = new net.sourceforge.plantuml.FileFormatOption;

        $r16 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SCXML>;

        specialinvoke $r15.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r16);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r15);

        goto label150;

     label012:
        $z9 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-txmi");

        if $z9 != 0 goto label013;

        $z10 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-xmi");

        if $z10 == 0 goto label014;

     label013:
        $r17 = new net.sourceforge.plantuml.FileFormatOption;

        $r18 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STANDARD>;

        specialinvoke $r17.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r18);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r17);

        goto label150;

     label014:
        $z11 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-txmi:argo");

        if $z11 != 0 goto label015;

        $z12 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-xmi:argo");

        if $z12 == 0 goto label016;

     label015:
        $r19 = new net.sourceforge.plantuml.FileFormatOption;

        $r20 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_ARGO>;

        specialinvoke $r19.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r20);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r19);

        goto label150;

     label016:
        $z13 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-txmi:star");

        if $z13 != 0 goto label017;

        $z14 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-xmi:star");

        if $z14 == 0 goto label018;

     label017:
        $r21 = new net.sourceforge.plantuml.FileFormatOption;

        $r22 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat XMI_STAR>;

        specialinvoke $r21.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r22);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r21);

        goto label150;

     label018:
        $z15 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-teps");

        if $z15 != 0 goto label019;

        $z16 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-eps");

        if $z16 == 0 goto label020;

     label019:
        $r23 = new net.sourceforge.plantuml.FileFormatOption;

        $r24 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS>;

        specialinvoke $r23.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r24);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r23);

        goto label150;

     label020:
        $z17 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-teps:text");

        if $z17 != 0 goto label021;

        $z18 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-eps:text");

        if $z18 == 0 goto label022;

     label021:
        $r25 = new net.sourceforge.plantuml.FileFormatOption;

        $r26 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS_TEXT>;

        specialinvoke $r25.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r26);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r25);

        goto label150;

     label022:
        $z19 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-ttxt");

        if $z19 != 0 goto label023;

        $z20 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-txt");

        if $z20 == 0 goto label024;

     label023:
        $r27 = new net.sourceforge.plantuml.FileFormatOption;

        $r28 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat ATXT>;

        specialinvoke $r27.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r28);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r27);

        goto label150;

     label024:
        $z21 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tutxt");

        if $z21 != 0 goto label025;

        $z22 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-utxt");

        if $z22 == 0 goto label026;

     label025:
        $r29 = new net.sourceforge.plantuml.FileFormatOption;

        $r30 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat UTXT>;

        specialinvoke $r29.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r30);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r29);

        goto label150;

     label026:
        $z23 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-braille");

        if $z23 != 0 goto label027;

        $z24 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tbraille");

        if $z24 == 0 goto label028;

     label027:
        $r31 = new net.sourceforge.plantuml.FileFormatOption;

        $r32 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BRAILLE_PNG>;

        specialinvoke $r31.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r32);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r31);

        goto label150;

     label028:
        $z25 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-png");

        if $z25 != 0 goto label029;

        $z26 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tpng");

        if $z26 == 0 goto label030;

     label029:
        $r33 = new net.sourceforge.plantuml.FileFormatOption;

        $r34 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r33.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r34);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r33);

        goto label150;

     label030:
        $z27 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-vdx");

        if $z27 != 0 goto label031;

        $z28 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tvdx");

        if $z28 == 0 goto label032;

     label031:
        $r35 = new net.sourceforge.plantuml.FileFormatOption;

        $r36 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat VDX>;

        specialinvoke $r35.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r36);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r35);

        goto label150;

     label032:
        $z29 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-latex");

        if $z29 != 0 goto label033;

        $z30 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tlatex");

        if $z30 == 0 goto label034;

     label033:
        $r37 = new net.sourceforge.plantuml.FileFormatOption;

        $r38 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX>;

        specialinvoke $r37.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r38);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r37);

        goto label150;

     label034:
        $z31 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-latex:nopreamble");

        if $z31 != 0 goto label035;

        $z32 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tlatex:nopreamble");

        if $z32 == 0 goto label036;

     label035:
        $r39 = new net.sourceforge.plantuml.FileFormatOption;

        $r40 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat LATEX_NO_PREAMBLE>;

        specialinvoke $r39.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r40);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r39);

        goto label150;

     label036:
        $z33 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-base64");

        if $z33 != 0 goto label037;

        $z34 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tbase64");

        if $z34 == 0 goto label038;

     label037:
        $r41 = new net.sourceforge.plantuml.FileFormatOption;

        $r42 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat BASE64>;

        specialinvoke $r41.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r42);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r41);

        goto label150;

     label038:
        $z35 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-pdf");

        if $z35 != 0 goto label039;

        $z36 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-tpdf");

        if $z36 == 0 goto label040;

     label039:
        $r43 = new net.sourceforge.plantuml.FileFormatOption;

        $r44 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PDF>;

        specialinvoke $r43.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r44);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)>($r43);

        goto label150;

     label040:
        $z37 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-overwrite");

        if $z37 == 0 goto label041;

        $r118 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r118.<net.sourceforge.plantuml.OptionFlags: void setOverwrite(boolean)>(1);

        goto label150;

     label041:
        $z38 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-output");

        if $z38 != 0 goto label042;

        $z39 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-o");

        if $z39 == 0 goto label044;

     label042:
        i27 = i27 + 1;

        $i1 = lengthof r7;

        if i27 != $i1 goto label043;

        goto label150;

     label043:
        $r45 = new java.io.File;

        $r46 = r7[i27];

        $r47 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r46);

        specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>($r47);

        r0.<net.sourceforge.plantuml.Option: java.io.File outputDir> = $r45;

        goto label150;

     label044:
        $z40 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-ofile");

        if $z40 == 0 goto label046;

        i27 = i27 + 1;

        $i26 = lengthof r7;

        if i27 != $i26 goto label045;

        goto label150;

     label045:
        $r115 = new java.io.File;

        $r116 = r7[i27];

        $r117 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r116);

        specialinvoke $r115.<java.io.File: void <init>(java.lang.String)>($r117);

        r0.<net.sourceforge.plantuml.Option: java.io.File outputFile> = $r115;

        goto label150;

     label046:
        $z41 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-graphvizdot");

        if $z41 != 0 goto label047;

        $z42 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-graphviz_dot");

        if $z42 == 0 goto label049;

     label047:
        i27 = i27 + 1;

        $i2 = lengthof r7;

        if i27 != $i2 goto label048;

        goto label150;

     label048:
        $r48 = r7[i27];

        $r49 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r48);

        staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: void setDotExecutable(java.lang.String)>($r49);

        goto label150;

     label049:
        $z43 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-charset");

        if $z43 == 0 goto label051;

        i27 = i27 + 1;

        $i25 = lengthof r7;

        if i27 != $i25 goto label050;

        goto label150;

     label050:
        $r113 = r7[i27];

        $r114 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r113);

        r0.<net.sourceforge.plantuml.Option: java.lang.String charset> = $r114;

        goto label150;

     label051:
        $z44 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-filename");

        if $z44 == 0 goto label053;

        i27 = i27 + 1;

        $i24 = lengthof r7;

        if i27 != $i24 goto label052;

        goto label150;

     label052:
        $r111 = r7[i27];

        $r112 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r111);

        r0.<net.sourceforge.plantuml.Option: java.lang.String filename> = $r112;

        goto label150;

     label053:
        $z45 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-filedir");

        if $z45 == 0 goto label055;

        i27 = i27 + 1;

        $i23 = lengthof r7;

        if i27 != $i23 goto label054;

        goto label150;

     label054:
        $r109 = r7[i27];

        $r110 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r109);

        r0.<net.sourceforge.plantuml.Option: java.lang.String fileDir> = $r110;

        goto label150;

     label055:
        $z46 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-o");

        if $z46 == 0 goto label056;

        $i22 = virtualinvoke r121.<java.lang.String: int length()>();

        if $i22 <= 3 goto label056;

        r122 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>(2);

        $r107 = new java.io.File;

        $r108 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r122);

        specialinvoke $r107.<java.io.File: void <init>(java.lang.String)>($r108);

        r0.<net.sourceforge.plantuml.Option: java.io.File outputDir> = $r107;

        goto label150;

     label056:
        $z47 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-exclude");

        if $z47 != 0 goto label057;

        $z49 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-x");

        if $z49 == 0 goto label059;

     label057:
        i27 = i27 + 1;

        $i3 = lengthof r7;

        if i27 != $i3 goto label058;

        goto label150;

     label058:
        $r51 = r0.<net.sourceforge.plantuml.Option: java.util.List excludes>;

        $r50 = r7[i27];

        $r52 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r50);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r52);

        goto label150;

     label059:
        $z50 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-nbthread");

        if $z50 != 0 goto label060;

        $z53 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-nbthreads");

        if $z53 == 0 goto label064;

     label060:
        i27 = i27 + 1;

        $i4 = lengthof r7;

        if i27 != $i4 goto label061;

        goto label150;

     label061:
        r123 = r7[i27];

        $r53 = "auto";

        $z51 = virtualinvoke $r53.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r123);

        if $z51 == 0 goto label062;

        $i6 = staticinvoke <net.sourceforge.plantuml.Option: int defaultNbThreads()>();

        r0.<net.sourceforge.plantuml.Option: int nbThreads> = $i6;

        goto label063;

     label062:
        $z52 = virtualinvoke r123.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z52 == 0 goto label063;

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r123);

        r0.<net.sourceforge.plantuml.Option: int nbThreads> = $i5;

     label063:
        goto label150;

     label064:
        $z54 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-timeout");

        if $z54 == 0 goto label067;

        i27 = i27 + 1;

        $i18 = lengthof r7;

        if i27 != $i18 goto label065;

        goto label150;

     label065:
        r124 = r7[i27];

        $z131 = virtualinvoke r124.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z131 == 0 goto label066;

        $r106 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r124);

        $l20 = (long) $i19;

        $l21 = $l20 * 1000L;

        virtualinvoke $r106.<net.sourceforge.plantuml.OptionFlags: void setTimeoutMs(long)>($l21);

     label066:
        goto label150;

     label067:
        $z55 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-failfast");

        if $z55 == 0 goto label068;

        r0.<net.sourceforge.plantuml.Option: boolean failfast> = 1;

        goto label150;

     label068:
        $z56 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-failfast2");

        if $z56 == 0 goto label069;

        r0.<net.sourceforge.plantuml.Option: boolean failfast2> = 1;

        goto label150;

     label069:
        $z57 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-noerror");

        if $z57 == 0 goto label070;

        r0.<net.sourceforge.plantuml.Option: boolean noerror> = 1;

        goto label150;

     label070:
        $z58 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-checkonly");

        if $z58 == 0 goto label071;

        r0.<net.sourceforge.plantuml.Option: boolean checkOnly> = 1;

        goto label150;

     label071:
        $z59 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-theme");

        if $z59 == 0 goto label073;

        i27 = i27 + 1;

        $i17 = lengthof r7;

        if i27 != $i17 goto label072;

        goto label150;

     label072:
        $r101 = r0.<net.sourceforge.plantuml.Option: java.util.List config>;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r102 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!theme ");

        $r103 = r7[i27];

        $r104 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r103);

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r101.<java.util.List: void add(int,java.lang.Object)>(0, $r105);

        goto label150;

     label073:
        $z60 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-config");

        if $z60 == 0 goto label075;

        i27 = i27 + 1;

        $i16 = lengthof r7;

        if i27 != $i16 goto label074;

        goto label150;

     label074:
        $r98 = r7[i27];

        $r99 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r98);

        virtualinvoke r0.<net.sourceforge.plantuml.Option: void initConfig(java.lang.String)>($r99);

        goto label150;

     label075:
        $z61 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-I");

        if $z61 == 0 goto label076;

        $r97 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>(2);

        specialinvoke r0.<net.sourceforge.plantuml.Option: void initInclude(java.lang.String)>($r97);

        goto label150;

     label076:
        $z62 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-computeurl");

        if $z62 != 0 goto label077;

        $z63 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-encodeurl");

        if $z63 == 0 goto label078;

     label077:
        r0.<net.sourceforge.plantuml.Option: boolean computeurl> = 1;

        goto label150;

     label078:
        $z64 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-x");

        if $z64 == 0 goto label079;

        r125 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>(2);

        $r95 = r0.<net.sourceforge.plantuml.Option: java.util.List excludes>;

        $r96 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r125);

        interfaceinvoke $r95.<java.util.List: boolean add(java.lang.Object)>($r96);

        goto label150;

     label079:
        $z65 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-verbose");

        if $z65 != 0 goto label080;

        $z66 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-v");

        if $z66 == 0 goto label081;

     label080:
        $r54 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r54.<net.sourceforge.plantuml.OptionFlags: void setVerbose(boolean)>(1);

        goto label150;

     label081:
        $z67 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-pipe");

        if $z67 != 0 goto label082;

        $z68 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-p");

        if $z68 == 0 goto label083;

     label082:
        r0.<net.sourceforge.plantuml.Option: boolean pipe> = 1;

        goto label150;

     label083:
        $z69 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-pipedelimitor");

        if $z69 == 0 goto label085;

        i27 = i27 + 1;

        $i15 = lengthof r7;

        if i27 != $i15 goto label084;

        goto label150;

     label084:
        $r94 = r7[i27];

        r0.<net.sourceforge.plantuml.Option: java.lang.String pipeDelimitor> = $r94;

        goto label150;

     label085:
        $z70 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-pipemap");

        if $z70 == 0 goto label086;

        r0.<net.sourceforge.plantuml.Option: boolean pipeMap> = 1;

        goto label150;

     label086:
        $z71 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-pipenostderr");

        if $z71 == 0 goto label087;

        r0.<net.sourceforge.plantuml.Option: boolean pipeNoStdErr> = 1;

        goto label150;

     label087:
        $z72 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-syntax");

        if $z72 == 0 goto label088;

        r0.<net.sourceforge.plantuml.Option: boolean syntax> = 1;

        $r93 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r93.<net.sourceforge.plantuml.OptionFlags: void setQuiet(boolean)>(1);

        goto label150;

     label088:
        $z73 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-duration");

        if $z73 == 0 goto label089;

        r0.<net.sourceforge.plantuml.Option: boolean duration> = 1;

        goto label150;

     label089:
        $z74 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-debugsvek");

        if $z74 != 0 goto label090;

        $z75 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-debug_svek");

        if $z75 == 0 goto label091;

     label090:
        r0.<net.sourceforge.plantuml.Option: boolean debugsvek> = 1;

        goto label150;

     label091:
        $z76 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-keepfiles");

        if $z76 != 0 goto label092;

        $z77 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-keepfile");

        if $z77 == 0 goto label093;

     label092:
        $r55 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>("-keepfiles option has been removed. Please consider -debugsvek instead");

        goto label150;

     label093:
        $z78 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-metadata");

        if $z78 == 0 goto label094;

        $r92 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r92.<net.sourceforge.plantuml.OptionFlags: void setExtractFromMetadata(boolean)>(1);

        goto label150;

     label094:
        $z79 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-logdata");

        if $z79 == 0 goto label096;

        i27 = i27 + 1;

        $i14 = lengthof r7;

        if i27 != $i14 goto label095;

        goto label150;

     label095:
        $r88 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $r89 = new net.sourceforge.plantuml.security.SFile;

        $r90 = r7[i27];

        $r91 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r90);

        specialinvoke $r89.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>($r91);

        virtualinvoke $r88.<net.sourceforge.plantuml.OptionFlags: void setLogData(net.sourceforge.plantuml.security.SFile)>($r89);

        goto label150;

     label096:
        $z80 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-word");

        if $z80 == 0 goto label097;

        $r86 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r86.<net.sourceforge.plantuml.OptionFlags: void setWord(boolean)>(1);

        $r87 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r87.<net.sourceforge.plantuml.OptionFlags: void setQuiet(boolean)>(1);

        r0.<net.sourceforge.plantuml.Option: java.lang.String charset> = "UTF-8";

        goto label150;

     label097:
        $z81 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-quiet");

        if $z81 == 0 goto label098;

        $r85 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r85.<net.sourceforge.plantuml.OptionFlags: void setQuiet(boolean)>(1);

        goto label150;

     label098:
        $z82 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-decodeurl");

        if $z82 == 0 goto label099;

        r0.<net.sourceforge.plantuml.Option: boolean decodeurl> = 1;

        goto label150;

     label099:
        $z83 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-version");

        if $z83 == 0 goto label100;

        staticinvoke <net.sourceforge.plantuml.OptionPrint: void printVersion()>();

        goto label150;

     label100:
        $z84 = virtualinvoke r121.<java.lang.String: boolean matches(java.lang.String)>("(?i)^-li[sc][ea]n[sc]e\\s*$");

        if $z84 == 0 goto label101;

        staticinvoke <net.sourceforge.plantuml.OptionPrint: void printLicense()>();

        goto label150;

     label101:
        $z85 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-DPLANTUML_LIMIT_SIZE=");

        if $z85 == 0 goto label103;

        $r83 = "-DPLANTUML_LIMIT_SIZE=";

        $i13 = virtualinvoke $r83.<java.lang.String: int length()>();

        r126 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>($i13);

        $z129 = virtualinvoke r126.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z129 == 0 goto label102;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("PLANTUML_LIMIT_SIZE", r126);

     label102:
        goto label150;

     label103:
        $z86 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-D");

        if $z86 == 0 goto label104;

        $r82 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>(2);

        specialinvoke r0.<net.sourceforge.plantuml.Option: void manageDefine(java.lang.String)>($r82);

        goto label150;

     label104:
        $z87 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-S");

        if $z87 == 0 goto label105;

        $r81 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>(2);

        specialinvoke r0.<net.sourceforge.plantuml.Option: void manageSkinParam(java.lang.String)>($r81);

        goto label150;

     label105:
        $z88 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-P");

        if $z88 == 0 goto label106;

        $r80 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>(2);

        specialinvoke r0.<net.sourceforge.plantuml.Option: void managePragma(java.lang.String)>($r80);

        goto label150;

     label106:
        $z89 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-testdot");

        if $z89 == 0 goto label107;

        staticinvoke <net.sourceforge.plantuml.OptionPrint: void printTestDot()>();

        goto label150;

     label107:
        $z90 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-about");

        if $z90 != 0 goto label108;

        $z91 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-author");

        if $z91 != 0 goto label108;

        $z92 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-authors");

        if $z92 == 0 goto label109;

     label108:
        staticinvoke <net.sourceforge.plantuml.OptionPrint: void printAbout()>();

        goto label150;

     label109:
        $z93 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-help");

        if $z93 != 0 goto label110;

        $z94 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-h");

        if $z94 != 0 goto label110;

        $z95 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-?");

        if $z95 == 0 goto label111;

     label110:
        staticinvoke <net.sourceforge.plantuml.OptionPrint: void printHelp()>();

        goto label150;

     label111:
        $z96 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-language");

        if $z96 == 0 goto label112;

        staticinvoke <net.sourceforge.plantuml.OptionPrint: void printLanguage()>();

        goto label150;

     label112:
        $z97 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-gui");

        if $z97 == 0 goto label113;

        $r79 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r79.<net.sourceforge.plantuml.OptionFlags: void setGui(boolean)>(1);

        goto label150;

     label113:
        $z98 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-encodesprite");

        if $z98 == 0 goto label114;

        $r78 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r78.<net.sourceforge.plantuml.OptionFlags: void setEncodesprite(boolean)>(1);

        goto label150;

     label114:
        $z99 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-printfonts");

        if $z99 == 0 goto label115;

        $r77 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r77.<net.sourceforge.plantuml.OptionFlags: void setPrintFonts(boolean)>(1);

        goto label150;

     label115:
        $z100 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-dumphtmlstats");

        if $z100 == 0 goto label116;

        $r76 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r76.<net.sourceforge.plantuml.OptionFlags: void setDumpHtmlStats(boolean)>(1);

        goto label150;

     label116:
        $z101 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-dumpstats");

        if $z101 == 0 goto label117;

        $r75 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r75.<net.sourceforge.plantuml.OptionFlags: void setDumpStats(boolean)>(1);

        goto label150;

     label117:
        $z102 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-loopstats");

        if $z102 == 0 goto label118;

        $r74 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r74.<net.sourceforge.plantuml.OptionFlags: void setLoopStats(boolean)>(1);

        goto label150;

     label118:
        $z103 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-enablestats");

        if $z103 == 0 goto label119;

        $r73 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r73.<net.sourceforge.plantuml.OptionFlags: void setEnableStats(boolean)>(1);

        goto label150;

     label119:
        $z104 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-disablestats");

        if $z104 == 0 goto label120;

        $r72 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r72.<net.sourceforge.plantuml.OptionFlags: void setEnableStats(boolean)>(0);

        goto label150;

     label120:
        $z105 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-extractstdlib");

        if $z105 == 0 goto label121;

        $r71 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r71.<net.sourceforge.plantuml.OptionFlags: void setExtractStdLib(boolean)>(1);

        goto label150;

     label121:
        $z106 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-stdlib");

        if $z106 == 0 goto label122;

        $r70 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r70.<net.sourceforge.plantuml.OptionFlags: void setStdLib(boolean)>(1);

        goto label150;

     label122:
        $z107 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-clipboard");

        if $z107 == 0 goto label123;

        $r69 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r69.<net.sourceforge.plantuml.OptionFlags: void setClipboard(boolean)>(1);

        goto label150;

     label123:
        $z108 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-clipboardloop");

        if $z108 == 0 goto label124;

        $r68 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r68.<net.sourceforge.plantuml.OptionFlags: void setClipboardLoop(boolean)>(1);

        goto label150;

     label124:
        $z109 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-htmlstats");

        if $z109 == 0 goto label125;

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void setHtmlStats(boolean)>(1);

        goto label150;

     label125:
        $z110 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-xmlstats");

        if $z110 == 0 goto label126;

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void setXmlStats(boolean)>(1);

        goto label150;

     label126:
        $z111 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-realtimestats");

        if $z111 == 0 goto label127;

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtils: void setRealTimeStats(boolean)>(1);

        goto label150;

     label127:
        $z112 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-useseparatorminus");

        if $z112 == 0 goto label128;

        $r67 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        virtualinvoke $r67.<net.sourceforge.plantuml.OptionFlags: void setFileSeparator(java.lang.String)>("-");

        goto label150;

     label128:
        $z113 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-splash");

        if $z113 == 0 goto label129;

        r0.<net.sourceforge.plantuml.Option: boolean splash> = 1;

        goto label150;

     label129:
        $z114 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-progress");

        if $z114 == 0 goto label130;

        r0.<net.sourceforge.plantuml.Option: boolean textProgressBar> = 1;

        goto label150;

     label130:
        $z115 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-nometadata");

        if $z115 == 0 goto label131;

        r0.<net.sourceforge.plantuml.Option: boolean hideMetadata> = 1;

        goto label150;

     label131:
        $z116 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-preproc");

        if $z116 == 0 goto label132;

        $r66 = <net.sourceforge.plantuml.OptionPreprocOutputMode: net.sourceforge.plantuml.OptionPreprocOutputMode NORMAL>;

        r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.OptionPreprocOutputMode preprocessorOutput> = $r66;

        goto label150;

     label132:
        $z117 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-cypher");

        if $z117 == 0 goto label133;

        $r65 = <net.sourceforge.plantuml.OptionPreprocOutputMode: net.sourceforge.plantuml.OptionPreprocOutputMode CYPHER>;

        r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.OptionPreprocOutputMode preprocessorOutput> = $r65;

        goto label150;

     label133:
        $z118 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-checkmetadata");

        if $z118 == 0 goto label134;

        r0.<net.sourceforge.plantuml.Option: boolean checkMetadata> = 1;

        goto label150;

     label134:
        $z119 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-stdrpt:1");

        if $z119 == 0 goto label135;

        r0.<net.sourceforge.plantuml.Option: int stdrpt> = 1;

        goto label150;

     label135:
        $z120 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-stdrpt:2");

        if $z120 == 0 goto label136;

        r0.<net.sourceforge.plantuml.Option: int stdrpt> = 2;

        goto label150;

     label136:
        $z121 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-stdrpt");

        if $z121 == 0 goto label137;

        r0.<net.sourceforge.plantuml.Option: int stdrpt> = 2;

        goto label150;

     label137:
        $z122 = virtualinvoke r121.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-pipeimageindex");

        if $z122 == 0 goto label140;

        i27 = i27 + 1;

        $i11 = lengthof r7;

        if i27 != $i11 goto label138;

        goto label150;

     label138:
        r127 = r7[i27];

        $z128 = virtualinvoke r127.<java.lang.String: boolean matches(java.lang.String)>("\\d+");

        if $z128 == 0 goto label139;

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r127);

        r0.<net.sourceforge.plantuml.Option: int imageIndex> = $i12;

     label139:
        goto label150;

     label140:
        $r56 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>(r121);

        $z123 = virtualinvoke $r56.<java.lang.String: boolean startsWith(java.lang.String)>("-ftp");

        if $z123 == 0 goto label143;

        i29 = virtualinvoke r121.<java.lang.String: int indexOf(int)>(58);

        if i29 != -1 goto label141;

        r0.<net.sourceforge.plantuml.Option: int ftpPort> = 4242;

        goto label142;

     label141:
        $i9 = i29 + 1;

        $r64 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>($i9);

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r64);

        r0.<net.sourceforge.plantuml.Option: int ftpPort> = $i10;

     label142:
        goto label150;

     label143:
        $r57 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>(r121);

        $z124 = virtualinvoke $r57.<java.lang.String: boolean startsWith(java.lang.String)>("-picoweb");

        if $z124 == 0 goto label148;

        r128 = virtualinvoke r121.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i7 = lengthof r128;

        if $i7 <= 1 goto label144;

        $r62 = r128[1];

        $i30 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r62);

        goto label145;

     label144:
        $i30 = 8080;

     label145:
        r0.<net.sourceforge.plantuml.Option: int picowebPort> = $i30;

        $i8 = lengthof r128;

        if $i8 <= 2 goto label146;

        $r129 = r128[2];

        goto label147;

     label146:
        $r129 = null;

     label147:
        r0.<net.sourceforge.plantuml.Option: java.lang.String picowebBindAddress> = $r129;

        goto label150;

     label148:
        $z125 = virtualinvoke r121.<java.lang.String: boolean startsWith(java.lang.String)>("-c");

        if $z125 == 0 goto label149;

        r130 = virtualinvoke r121.<java.lang.String: java.lang.String substring(int)>(2);

        $r59 = r0.<net.sourceforge.plantuml.Option: java.util.List config>;

        $r60 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r130);

        interfaceinvoke $r59.<java.util.List: boolean add(java.lang.Object)>($r60);

        goto label150;

     label149:
        $r58 = r0.<net.sourceforge.plantuml.Option: java.util.List result>;

        interfaceinvoke $r58.<java.util.List: boolean add(java.lang.Object)>(r121);

     label150:
        i27 = i27 + 1;

        goto label002;

     label151:
        return;
    }

    public net.sourceforge.plantuml.Stdrpt getStdrpt()
    {
        net.sourceforge.plantuml.Option r0;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.StdrptNull $r1;
        net.sourceforge.plantuml.StdrptV2 $r2;
        net.sourceforge.plantuml.StdrptV1 $r3;
        net.sourceforge.plantuml.StdrptPipe0 $r4;

        r0 := @this: net.sourceforge.plantuml.Option;

        $i0 = r0.<net.sourceforge.plantuml.Option: int stdrpt>;

        if $i0 != 1 goto label1;

        $r3 = new net.sourceforge.plantuml.StdrptV1;

        specialinvoke $r3.<net.sourceforge.plantuml.StdrptV1: void <init>()>();

        return $r3;

     label1:
        $i1 = r0.<net.sourceforge.plantuml.Option: int stdrpt>;

        if $i1 != 2 goto label2;

        $r2 = new net.sourceforge.plantuml.StdrptV2;

        specialinvoke $r2.<net.sourceforge.plantuml.StdrptV2: void <init>()>();

        return $r2;

     label2:
        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.Option: boolean isPipe()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.Option: boolean isPipeMap()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.Option: boolean isSyntax()>();

        if $z2 == 0 goto label4;

     label3:
        $r4 = new net.sourceforge.plantuml.StdrptPipe0;

        specialinvoke $r4.<net.sourceforge.plantuml.StdrptPipe0: void <init>()>();

        return $r4;

     label4:
        $r1 = new net.sourceforge.plantuml.StdrptNull;

        specialinvoke $r1.<net.sourceforge.plantuml.StdrptNull: void <init>()>();

        return $r1;
    }

    public int getFtpPort()
    {
        net.sourceforge.plantuml.Option r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $i0 = r0.<net.sourceforge.plantuml.Option: int ftpPort>;

        return $i0;
    }

    public java.lang.String getPicowebBindAddress()
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.lang.String picowebBindAddress>;

        return $r1;
    }

    public int getPicowebPort()
    {
        net.sourceforge.plantuml.Option r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $i0 = r0.<net.sourceforge.plantuml.Option: int picowebPort>;

        return $i0;
    }

    private void addInConfig(java.io.BufferedReader) throws java.io.IOException
    {
        java.io.BufferedReader r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.Option r2;
        java.util.List $r3;
        java.lang.Throwable $r4;

        r2 := @this: net.sourceforge.plantuml.Option;

        r0 := @parameter0: java.io.BufferedReader;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r1 == null goto label2;

        $r3 = r2.<net.sourceforge.plantuml.Option: java.util.List config>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        virtualinvoke r0.<java.io.BufferedReader: void close()>();

        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<java.io.BufferedReader: void close()>();

        throw $r4;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void initConfig(java.lang.String) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.FileReader $r1;
        java.lang.String r2;
        net.sourceforge.plantuml.Option r4;

        r4 := @this: net.sourceforge.plantuml.Option;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.FileReader;

        specialinvoke $r1.<java.io.FileReader: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        specialinvoke r4.<net.sourceforge.plantuml.Option: void addInConfig(java.io.BufferedReader)>($r0);

        return;
    }

    private void initInclude(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.File $r1, r10;
        net.sourceforge.plantuml.Option r2;
        java.io.BufferedReader $r3, $r11;
        java.io.FileReader $r4, $r12;
        net.sourceforge.plantuml.FileGroup $r5;
        java.util.List $r6, $r7;
        java.util.Iterator r8;
        java.lang.Object $r9;

        r2 := @this: net.sourceforge.plantuml.Option;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        if $z0 == 0 goto label5;

        $r5 = new net.sourceforge.plantuml.FileGroup;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r5.<net.sourceforge.plantuml.FileGroup: void <init>(java.lang.String,java.util.List,net.sourceforge.plantuml.Option)>(r0, $r6, null);

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.FileGroup: java.util.List getFiles()>();

        r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.io.File) $r9;

        $z4 = virtualinvoke r10.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label3;

        $z5 = virtualinvoke r10.<java.io.File: boolean canRead()>();

        if $z5 == 0 goto label3;

        $r11 = new java.io.BufferedReader;

        $r12 = new java.io.FileReader;

        specialinvoke $r12.<java.io.FileReader: void <init>(java.io.File)>(r10);

        specialinvoke $r11.<java.io.BufferedReader: void <init>(java.io.Reader)>($r12);

        specialinvoke r2.<net.sourceforge.plantuml.Option: void addInConfig(java.io.BufferedReader)>($r11);

     label3:
        goto label2;

     label4:
        goto label6;

     label5:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0);

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label6;

        $z2 = virtualinvoke $r1.<java.io.File: boolean canRead()>();

        if $z2 == 0 goto label6;

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.FileReader;

        specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>($r1);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        specialinvoke r2.<net.sourceforge.plantuml.Option: void addInConfig(java.io.BufferedReader)>($r3);

     label6:
        return;
    }

    private void manageDefine(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.Pattern2 r0;
        java.lang.String r1, $r4, $r5;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        boolean $z0;
        net.sourceforge.plantuml.Option r3;

        r3 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^(\\w+)(?:=(.*))?$");

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        virtualinvoke r3.<net.sourceforge.plantuml.Option: void define(java.lang.String,java.lang.String)>($r4, $r5);

     label1:
        return;
    }

    private void managePragma(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.Pattern2 r0;
        java.lang.String r1, r3, $r4, r5, $r13;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        boolean $z0;
        net.sourceforge.plantuml.Option r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12;
        java.util.List $r8;

        r6 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^(\\w+)(?:=(.*))?$");

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        r5 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r4);

        if r3 == null goto label1;

        if r5 == null goto label1;

        $r8 = r6.<net.sourceforge.plantuml.Option: java.util.List config>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!pragma ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r13);

     label1:
        return;
    }

    private void manageSkinParam(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.Pattern2 r0;
        java.lang.String r1, r3, r4, $r12;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        boolean $z0;
        net.sourceforge.plantuml.Option r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11;
        java.util.List $r7;

        r5 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^(\\w+)(?:=(.*))?$");

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        r4 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        if r3 == null goto label1;

        if r4 == null goto label1;

        $r7 = r5.<net.sourceforge.plantuml.Option: java.util.List config>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skinparamlocked ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r12);

     label1:
        return;
    }

    public final java.io.File getOutputDir()
    {
        net.sourceforge.plantuml.Option r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.io.File outputDir>;

        return $r1;
    }

    public static final java.lang.String getPattern()
    {
        return "(?i)^.*\\.(txt|tex|java|htm|html|c|h|cpp|apt|pu|puml|hpp|hh)$";
    }

    public void setOutputDir(java.io.File)
    {
        net.sourceforge.plantuml.Option r0;
        java.io.File r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: java.io.File;

        r0.<net.sourceforge.plantuml.Option: java.io.File outputDir> = r1;

        return;
    }

    public final java.util.List getExcludes()
    {
        net.sourceforge.plantuml.Option r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.util.List excludes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.preproc.Defines getDefaultDefines(net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.security.SFile r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        net.sourceforge.plantuml.Option r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6, $r8, $r9;
        java.util.Map$Entry r7;
        java.lang.String[] $r10;
        java.lang.String $r11, r13;
        java.util.List $r12;

        r2 := @this: net.sourceforge.plantuml.Option;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r1 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(net.sourceforge.plantuml.security.SFile)>(r0);

        $r3 = r2.<net.sourceforge.plantuml.Option: java.util.Map defines>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (java.lang.String) $r8;

        if r13 != null goto label2;

        r13 = "";

     label2:
        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r9;

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = r13;

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        virtualinvoke r1.<net.sourceforge.plantuml.preproc.Defines: void define(java.lang.String,java.util.List,boolean,net.sourceforge.plantuml.AParentFolder)>($r11, $r12, 0, null);

        goto label1;

     label3:
        return r1;
    }

    public net.sourceforge.plantuml.preproc.Defines getDefaultDefines(java.io.File)
    {
        java.io.File r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        net.sourceforge.plantuml.Option r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6, $r8, $r9;
        java.util.Map$Entry r7;
        java.lang.String[] $r10;
        java.lang.String $r11, r13;
        java.util.List $r12;

        r2 := @this: net.sourceforge.plantuml.Option;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(java.io.File)>(r0);

        $r3 = r2.<net.sourceforge.plantuml.Option: java.util.Map defines>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (java.lang.String) $r8;

        if r13 != null goto label2;

        r13 = "";

     label2:
        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r9;

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = r13;

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        virtualinvoke r1.<net.sourceforge.plantuml.preproc.Defines: void define(java.lang.String,java.util.List,boolean,net.sourceforge.plantuml.AParentFolder)>($r11, $r12, 0, null);

        goto label1;

     label3:
        return r1;
    }

    public net.sourceforge.plantuml.preproc.Defines getDefaultDefines()
    {
        net.sourceforge.plantuml.preproc.Defines r0;
        net.sourceforge.plantuml.Option r1;
        java.lang.String $r2, $r10, $r12;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6, $r8, $r11;
        java.util.Map$Entry r7;
        java.lang.String[] $r9;
        java.util.List $r13;

        r1 := @this: net.sourceforge.plantuml.Option;

        r0 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r2 = r1.<net.sourceforge.plantuml.Option: java.lang.String filename>;

        virtualinvoke r0.<net.sourceforge.plantuml.preproc.Defines: void overrideFilename(java.lang.String)>($r2);

        $r3 = r1.<net.sourceforge.plantuml.Option: java.util.Map defines>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r8;

        $r9 = newarray (java.lang.String)[1];

        $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.String) $r11;

        $r9[0] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        virtualinvoke r0.<net.sourceforge.plantuml.preproc.Defines: void define(java.lang.String,java.util.List,boolean,net.sourceforge.plantuml.AParentFolder)>($r10, $r13, 0, null);

        goto label1;

     label2:
        return r0;
    }

    public void define(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String r1, r2;
        java.util.Map $r3;

        r0 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<net.sourceforge.plantuml.Option: java.util.Map defines>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.util.List getConfig()
    {
        net.sourceforge.plantuml.Option r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.util.List config>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public final java.util.List getResult()
    {
        net.sourceforge.plantuml.Option r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.util.List result>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public final java.lang.String getCharset()
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.lang.String charset>;

        return $r1;
    }

    public void setCharset(java.lang.String)
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.Option: java.lang.String charset> = r1;

        return;
    }

    public final boolean isComputeurl()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean computeurl>;

        return $z0;
    }

    public final boolean isDecodeurl()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean decodeurl>;

        return $z0;
    }

    public final boolean isPipe()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean pipe>;

        return $z0;
    }

    public final boolean isPipeMap()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean pipeMap>;

        return $z0;
    }

    public final boolean isSyntax()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean syntax>;

        return $z0;
    }

    public net.sourceforge.plantuml.FileFormatOption getFileFormatOption()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.FileFormatOption $r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean debugsvek>;

        if $z0 == 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        virtualinvoke $r3.<net.sourceforge.plantuml.FileFormatOption: void setDebugSvek(boolean)>(1);

     label1:
        $z1 = r0.<net.sourceforge.plantuml.Option: boolean hideMetadata>;

        if $z1 == 0 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        virtualinvoke $r2.<net.sourceforge.plantuml.FileFormatOption: void hideMetadata()>();

     label2:
        $r1 = r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        return $r1;
    }

    public final boolean isDuration()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean duration>;

        return $z0;
    }

    public final int getNbThreads()
    {
        net.sourceforge.plantuml.Option r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $i0 = r0.<net.sourceforge.plantuml.Option: int nbThreads>;

        return $i0;
    }

    public final void setNbThreads(int)
    {
        net.sourceforge.plantuml.Option r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.Option;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.Option: int nbThreads> = i0;

        return;
    }

    public static int defaultNbThreads()
    {
        java.lang.Runtime $r0;
        int $i0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        return $i0;
    }

    public final boolean isCheckOnly()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean checkOnly>;

        return $z0;
    }

    public final void setCheckOnly(boolean)
    {
        net.sourceforge.plantuml.Option r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.Option: boolean checkOnly> = z0;

        return;
    }

    public final boolean isFailfastOrFailfast2()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean failfast>;

        if $z0 != 0 goto label1;

        $z1 = r0.<net.sourceforge.plantuml.Option: boolean failfast2>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final boolean isFailfast2()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean failfast2>;

        return $z0;
    }

    public final void setFailfast(boolean)
    {
        net.sourceforge.plantuml.Option r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.Option: boolean failfast> = z0;

        return;
    }

    public final void setFailfast2(boolean)
    {
        net.sourceforge.plantuml.Option r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.Option: boolean failfast2> = z0;

        return;
    }

    public final void setNoerror(boolean)
    {
        net.sourceforge.plantuml.Option r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.Option: boolean noerror> = z0;

        return;
    }

    public final boolean isNoerror()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean noerror>;

        return $z0;
    }

    public final java.io.File getOutputFile()
    {
        net.sourceforge.plantuml.Option r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.io.File outputFile>;

        return $r1;
    }

    public final void setDebugSvek(boolean)
    {
        net.sourceforge.plantuml.Option r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.Option: boolean debugsvek> = z0;

        return;
    }

    boolean isDebugSvek()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean debugsvek>;

        return $z0;
    }

    public final boolean isSplash()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean splash>;

        return $z0;
    }

    public final void setSplash(boolean)
    {
        net.sourceforge.plantuml.Option r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.Option: boolean splash> = z0;

        return;
    }

    public final boolean isTextProgressBar()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean textProgressBar>;

        return $z0;
    }

    public java.lang.String getPipeDelimitor()
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.lang.String pipeDelimitor>;

        return $r1;
    }

    public final boolean isPipeNoStdErr()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean pipeNoStdErr>;

        return $z0;
    }

    public final int getImageIndex()
    {
        net.sourceforge.plantuml.Option r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $i0 = r0.<net.sourceforge.plantuml.Option: int imageIndex>;

        return $i0;
    }

    public final void setFilename(java.lang.String)
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.Option: java.lang.String filename> = r1;

        return;
    }

    public final boolean isCheckMetadata()
    {
        net.sourceforge.plantuml.Option r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Option;

        $z0 = r0.<net.sourceforge.plantuml.Option: boolean checkMetadata>;

        return $z0;
    }

    public final net.sourceforge.plantuml.OptionPreprocOutputMode getPreprocessorOutputMode()
    {
        net.sourceforge.plantuml.Option r0;
        net.sourceforge.plantuml.OptionPreprocOutputMode $r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.OptionPreprocOutputMode preprocessorOutput>;

        return $r1;
    }

    public java.lang.String getFileDir()
    {
        net.sourceforge.plantuml.Option r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.Option;

        $r1 = r0.<net.sourceforge.plantuml.Option: java.lang.String fileDir>;

        return $r1;
    }
}
