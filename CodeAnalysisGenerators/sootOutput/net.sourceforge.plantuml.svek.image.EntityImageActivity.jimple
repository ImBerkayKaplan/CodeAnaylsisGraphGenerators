public class net.sourceforge.plantuml.svek.image.EntityImageActivity extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private double shadowing;
    public static final int CORNER;
    private final net.sourceforge.plantuml.graphic.TextBlock desc;
    private static final int MARGIN;
    private final net.sourceforge.plantuml.Url url;
    private final net.sourceforge.plantuml.svek.Bibliotekon bibliotekon;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.svek.Bibliotekon)
    {
        net.sourceforge.plantuml.svek.image.EntityImageActivity r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2, $r6, $r8, $r12;
        net.sourceforge.plantuml.svek.Bibliotekon r3;
        net.sourceforge.plantuml.cucadiagram.Stereotype r4, $r10;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5, r19;
        net.sourceforge.plantuml.FontParam $r7;
        net.sourceforge.plantuml.cucadiagram.IEntity $r9;
        net.sourceforge.plantuml.style.StyleSignature $r11;
        net.sourceforge.plantuml.style.StyleBuilder $r13;
        net.sourceforge.plantuml.style.Style r14;
        net.sourceforge.plantuml.api.ThemeStyle $r15;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r16;
        net.sourceforge.plantuml.style.PName $r17;
        net.sourceforge.plantuml.style.Value $r18;
        double $d0;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r20;
        net.sourceforge.plantuml.cucadiagram.Display $r21;
        net.sourceforge.plantuml.graphic.TextBlock $r22;
        net.sourceforge.plantuml.Url $r23;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.svek.Bibliotekon;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: double shadowing> = 0.0;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon> = r3;

        r4 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()>();

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r14 = virtualinvoke $r11.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r13);

        $r15 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r16 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r19 = virtualinvoke r14.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r15, $r16);

        r20 = virtualinvoke r14.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        $r17 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r18 = virtualinvoke r14.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r17);

        $d0 = interfaceinvoke $r18.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: double shadowing> = $d0;

        goto label2;

     label1:
        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam ACTIVITY>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r6, $r7, r4);

        r19 = $r5;

        r20 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r8.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r10);

        if $z1 == 0 goto label2;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: double shadowing> = 4.0;

     label2:
        $r21 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r19, r20, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.graphic.TextBlock desc> = $r22;

        $r23 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.Url url> = $r23;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageActivity r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.graphic.TextBlock desc>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double)>(r3, 20.0);

        return $r4;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageActivity r0;
        net.sourceforge.plantuml.Url $r1, $r7, $r8;
        net.sourceforge.plantuml.svek.ShapeType $r2, $r3, $r4, $r5;
        java.lang.UnsupportedOperationException $r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r9, r10;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        $r8 = r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r8);

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.svek.ShapeType getShapeType()>();

        $r3 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType ROUND_RECTANGLE>;

        if $r2 != $r3 goto label2;

        r10 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ugraphic.UGraphic drawNormal(net.sourceforge.plantuml.ugraphic.UGraphic)>(r9);

        goto label4;

     label2:
        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.svek.ShapeType getShapeType()>();

        $r5 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType OCTAGON>;

        if $r4 != $r5 goto label3;

        r10 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ugraphic.UGraphic drawOctagon(net.sourceforge.plantuml.ugraphic.UGraphic)>(r9);

        goto label4;

     label3:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;

     label4:
        $r7 = r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.Url url>;

        if $r7 == null goto label5;

        interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label5:
        return;
    }

    private net.sourceforge.plantuml.ugraphic.UGraphic drawOctagon(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageActivity r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1;
        net.sourceforge.plantuml.cucadiagram.IEntity $r2;
        net.sourceforge.plantuml.svek.SvekNode r3;
        net.sourceforge.plantuml.ugraphic.Shadowable r4;
        double $d0;
        net.sourceforge.plantuml.ugraphic.UStroke $r5;
        net.sourceforge.plantuml.ugraphic.UGraphic $r6, $r9, $r10, r11, r12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7;
        net.sourceforge.plantuml.graphic.TextBlock $r8;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        r11 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        r3 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r2);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.ugraphic.Shadowable getPolygon()>();

        if r4 != null goto label1;

        $r10 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ugraphic.UGraphic drawNormal(net.sourceforge.plantuml.ugraphic.UGraphic)>(r11);

        return $r10;

     label1:
        $d0 = r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: double shadowing>;

        interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>($d0);

        r12 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ugraphic.UGraphic applyColors(net.sourceforge.plantuml.ugraphic.UGraphic)>(r11);

        $r5 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        $r6 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r4);

        $r8 = r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(10.0, 10.0);

        $r9 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r8.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r9);

        return r12;
    }

    private net.sourceforge.plantuml.ugraphic.UGraphic drawNormal(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.svek.image.EntityImageActivity r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double d0, d1, $d2;
        net.sourceforge.plantuml.ugraphic.URectangle $r3, r4;
        net.sourceforge.plantuml.ugraphic.UStroke $r5, r16;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.UGraphic $r6, $r9, r14, r15;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7;
        net.sourceforge.plantuml.graphic.TextBlock $r8;
        net.sourceforge.plantuml.style.StyleSignature $r10;
        net.sourceforge.plantuml.ISkinParam $r11;
        net.sourceforge.plantuml.style.StyleBuilder $r12;
        net.sourceforge.plantuml.style.Style r13;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        r14 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r14.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r3 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>(25.0);

        $d2 = r1.<net.sourceforge.plantuml.svek.image.EntityImageActivity: double shadowing>;

        interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>($d2);

        r15 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ugraphic.UGraphic applyColors(net.sourceforge.plantuml.ugraphic.UGraphic)>(r14);

        $r5 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r16 = $r5;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()>();

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r13 = virtualinvoke $r10.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r12);

        r16 = virtualinvoke r13.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

     label1:
        $r6 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r16);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r4);

        $r8 = r1.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(10.0, 10.0);

        $r9 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r8.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r9);

        return r15;
    }

    public net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5, $r8;
        net.sourceforge.plantuml.svek.image.EntityImageActivity r6;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r7;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activityDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activity>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r7);

        return $r8;
    }

    private net.sourceforge.plantuml.ugraphic.UGraphic applyColors(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageActivity r0;
        net.sourceforge.plantuml.ISkinParam $r1, $r9, $r14, $r16, $r23, $r25, $r27;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r2, $r28;
        net.sourceforge.plantuml.ColorParam[] $r3, $r29;
        net.sourceforge.plantuml.ColorParam $r4, $r30;
        net.sourceforge.plantuml.cucadiagram.IEntity $r5, $r18;
        net.sourceforge.plantuml.graphic.color.Colors $r6, $r19;
        net.sourceforge.plantuml.graphic.color.ColorType $r7, $r20;
        boolean $z0;
        net.sourceforge.plantuml.style.StyleSignature $r8;
        net.sourceforge.plantuml.style.StyleBuilder $r10;
        net.sourceforge.plantuml.style.Style r11;
        net.sourceforge.plantuml.style.PName $r12, $r21;
        net.sourceforge.plantuml.style.Value $r13, $r22;
        net.sourceforge.plantuml.api.ThemeStyle $r15, $r24;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r17, $r26;
        net.sourceforge.plantuml.ugraphic.UGraphic r31, r34, r36;
        net.sourceforge.plantuml.ugraphic.color.HColor r32, r33;
        net.sourceforge.plantuml.ugraphic.UBackground $r35;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        r31 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r3 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r4 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityBorder>;

        $r3[0] = $r4;

        r32 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r1, $r2, $r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r7 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r33 = virtualinvoke $r6.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r7);

        if r33 != null goto label1;

        $r27 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r29 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r30 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityBackground>;

        $r29[0] = $r30;

        r33 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r27, $r28, $r29);

     label1:
        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r11 = virtualinvoke $r8.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r10);

        $r12 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r13 = virtualinvoke r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r12);

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r32 = interfaceinvoke $r13.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r15, $r17);

        $r18 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r20 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r33 = virtualinvoke $r19.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r20);

        if r33 != null goto label2;

        $r21 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r22 = virtualinvoke r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r21);

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r33 = interfaceinvoke $r22.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r24, $r26);

     label2:
        r34 = interfaceinvoke r31.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r32);

        $r35 = interfaceinvoke r33.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r36 = interfaceinvoke r34.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r35);

        return r36;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.image.EntityImageActivity r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        boolean $z0;
        net.sourceforge.plantuml.svek.ShapeType $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageActivity;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageActivity: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: boolean useOctagonForActivity(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1);

        if $z0 == 0 goto label1;

        $r4 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType OCTAGON>;

        return $r4;

     label1:
        $r3 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType ROUND_RECTANGLE>;

        return $r3;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.image.EntityImageActivity: int MARGIN> = 10;

        <net.sourceforge.plantuml.svek.image.EntityImageActivity: int CORNER> = 25;

        return;
    }
}
