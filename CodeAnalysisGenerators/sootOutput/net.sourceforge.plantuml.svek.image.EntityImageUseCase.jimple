public class net.sourceforge.plantuml.svek.image.EntityImageUseCase extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private final net.sourceforge.plantuml.graphic.TextBlock desc;
    private final net.sourceforge.plantuml.Url url;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.PortionShower)
    {
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2;
        net.sourceforge.plantuml.ISkinParam r3, $r4, $r6, $r10, $r16, $r18, $r23, $r26, $r29;
        net.sourceforge.plantuml.cucadiagram.Stereotype r5;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r7, $r25, $r27, r31;
        net.sourceforge.plantuml.cucadiagram.Display $r8, $r21;
        net.sourceforge.plantuml.FontParam $r9, $r24;
        net.sourceforge.plantuml.style.Style $r11, r30;
        net.sourceforge.plantuml.Guillemet $r12, $r19;
        java.lang.String $r13, $r20;
        net.sourceforge.plantuml.cucadiagram.PortionShower r14;
        net.sourceforge.plantuml.cucadiagram.EntityPortion $r15;
        net.sourceforge.plantuml.graphic.TextBlock $r17, $r28, r32, r33;
        net.sourceforge.plantuml.graphic.FontConfiguration $r22;
        net.sourceforge.plantuml.Url $r34;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r3 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r14 := @parameter2: net.sourceforge.plantuml.cucadiagram.PortionShower;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ISkinParam mute(net.sourceforge.plantuml.ISkinParam)>(r3);

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, $r4);

        r5 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        r30 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.style.Style getStyle()>();

        r31 = virtualinvoke r30.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        goto label2;

     label1:
        r31 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

     label2:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r31);

        $r8 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r9 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam USECASE>;

        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r11 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.style.Style getStyle()>();

        r32 = staticinvoke <net.sourceforge.plantuml.cucadiagram.BodyFactory: net.sourceforge.plantuml.graphic.TextBlock create2(net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.style.Style)>($r7, $r8, $r9, $r10, r5, r1, $r11);

        if r5 == null goto label3;

        $r12 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r13 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r12);

        if $r13 == null goto label3;

        $r15 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion STEREOTYPE>;

        $z1 = interfaceinvoke r14.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r15, r1);

        if $z1 != 0 goto label4;

     label3:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.graphic.TextBlock desc> = r32;

        goto label7;

     label4:
        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.graphic.TextBlock getSprite(net.sourceforge.plantuml.SpriteContainer)>($r16);

        if $r17 == null goto label5;

        $r29 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r33 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.graphic.TextBlock getSprite(net.sourceforge.plantuml.SpriteContainer)>($r29);

        goto label6;

     label5:
        $r18 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.Guillemet guillemet()>();

        $r20 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r19);

        $r21 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r20);

        $r22 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r24 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam USECASE_STEREOTYPE>;

        specialinvoke $r22.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r23, $r24, r5);

        $r25 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r26 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r33 = virtualinvoke $r21.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r22, $r25, $r26);

     label6:
        $r27 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r28 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r33, r32, $r27);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.graphic.TextBlock desc> = $r28;

     label7:
        $r34 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.Url url> = $r34;

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getStroke()
    {
        boolean $z0;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r0;
        net.sourceforge.plantuml.ISkinParam $r1;
        net.sourceforge.plantuml.LineParam $r2;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r3;
        net.sourceforge.plantuml.cucadiagram.IEntity $r4;
        net.sourceforge.plantuml.graphic.color.Colors r5;
        net.sourceforge.plantuml.ugraphic.UStroke $r6, $r7, r9, r10;
        net.sourceforge.plantuml.style.Style r8;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        r8 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.style.Style getStyle()>();

        $r7 = virtualinvoke r8.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        return $r7;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r2 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam usecaseBorder>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        r9 = interfaceinvoke $r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r2, $r3);

        if r9 != null goto label2;

        $r6 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r9 = $r6;

     label2:
        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r10 = virtualinvoke r5.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke muteStroke(net.sourceforge.plantuml.ugraphic.UStroke)>(r9);

        return r10;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.ugraphic.TextBlockInEllipse $r0;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r4;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.ugraphic.TextBlockInEllipse;

        $r3 = r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.graphic.TextBlock desc>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.TextBlockInEllipse: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>($r3, r2);

        $r4 = virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.TextBlockInEllipse: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r4;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.cucadiagram.IEntity $r3, $r18, $r27, $r32;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r4;
        net.sourceforge.plantuml.graphic.SkinParameter $r5;
        net.sourceforge.plantuml.ugraphic.UStroke $r6;
        net.sourceforge.plantuml.ugraphic.color.HColor r7, r8;
        net.sourceforge.plantuml.ugraphic.UBackground $r9;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase$MyUGraphicEllipse $r10;
        net.sourceforge.plantuml.ugraphic.UEllipse $r11, $r36;
        java.util.EnumMap $r13;
        java.lang.StringBuilder $r15, $r17, $r20, $r21, $r24, $r26, $r29;
        net.sourceforge.plantuml.ugraphic.UGroupType $r16, $r25;
        net.sourceforge.plantuml.cucadiagram.Code $r19, $r28;
        java.lang.String $r22, $r30;
        net.sourceforge.plantuml.cucadiagram.LeafType $r33, $r34;
        net.sourceforge.plantuml.Url $r35, $r37, $r45;
        net.sourceforge.plantuml.style.PName $r38;
        net.sourceforge.plantuml.style.Value $r39;
        net.sourceforge.plantuml.ugraphic.UGraphic r40, r46, r47, r48;
        double d0;
        net.sourceforge.plantuml.style.Style r41;
        net.sourceforge.plantuml.ugraphic.TextBlockInEllipse $r42;
        net.sourceforge.plantuml.graphic.TextBlock $r43;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        r40 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r40.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = 0.0;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        r41 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.style.Style getStyle()>();

        $r38 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r39 = virtualinvoke r41.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r38);

        d0 = interfaceinvoke $r39.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r5 = <net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.graphic.SkinParameter USECASE>;

        $z1 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: boolean shadowing2(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.graphic.SkinParameter)>($r4, $r5);

        if $z1 == 0 goto label2;

        d0 = 3.0;

     label2:
        $r42 = new net.sourceforge.plantuml.ugraphic.TextBlockInEllipse;

        $r43 = r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.graphic.TextBlock desc>;

        specialinvoke $r42.<net.sourceforge.plantuml.ugraphic.TextBlockInEllipse: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>($r43, r0);

        virtualinvoke $r42.<net.sourceforge.plantuml.ugraphic.TextBlockInEllipse: void setDeltaShadow(double)>(d0);

        $r45 = r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.Url url>;

        if $r45 == null goto label3;

        $r37 = r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r40.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r37);

     label3:
        $r6 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        r46 = interfaceinvoke r40.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        r7 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ugraphic.color.HColor getLineColor()>();

        r47 = interfaceinvoke r46.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r7);

        r8 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

        $r9 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r48 = interfaceinvoke r47.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r10 = new net.sourceforge.plantuml.svek.image.EntityImageUseCase$MyUGraphicEllipse;

        $r11 = virtualinvoke $r42.<net.sourceforge.plantuml.ugraphic.TextBlockInEllipse: net.sourceforge.plantuml.ugraphic.UEllipse getUEllipse()>();

        specialinvoke $r10.<net.sourceforge.plantuml.svek.image.EntityImageUseCase$MyUGraphicEllipse: void <init>(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.ugraphic.UEllipse)>(r48, 0.0, 0.0, $r11);

        $r13 = new java.util.EnumMap;

        specialinvoke $r13.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/UGroupType;");

        $r16 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType CLASS>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem ");

        $r18 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" selected");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r22);

        $r25 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem_");

        $r27 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r28 = interfaceinvoke $r27.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r30);

        interfaceinvoke r48.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r13);

        virtualinvoke $r42.<net.sourceforge.plantuml.ugraphic.TextBlockInEllipse: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r10);

        interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        $r32 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r33 = interfaceinvoke $r32.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r34 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType USECASE_BUSINESS>;

        if $r33 != $r34 goto label4;

        $r36 = virtualinvoke $r42.<net.sourceforge.plantuml.ugraphic.TextBlockInEllipse: net.sourceforge.plantuml.ugraphic.UEllipse getUEllipse()>();

        specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: void specialBusiness(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.UEllipse)>(r48, $r36);

     label4:
        $r35 = r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.Url url>;

        if $r35 == null goto label5;

        interfaceinvoke r48.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label5:
        return;
    }

    private void specialBusiness(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.UEllipse)
    {
        net.sourceforge.plantuml.svek.image.RotatedEllipse $r0;
        net.sourceforge.plantuml.ugraphic.UEllipse r1, r3;
        double d1, $d2;
        java.awt.geom.Point2D r4, r5;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r7;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UEllipse;

        $r0 = new net.sourceforge.plantuml.svek.image.RotatedEllipse;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: void <init>(net.sourceforge.plantuml.ugraphic.UEllipse,double)>(r1, 0.7853981633974483);

        d1 = virtualinvoke $r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double getOtherTheta(double)>(0.3490658503988659);

        r3 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEllipse: net.sourceforge.plantuml.ugraphic.UEllipse scale(double)>(0.99);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UEllipse: java.awt.geom.Point2D getPointAtAngle(double)>(-0.3490658503988659);

        $d2 = neg d1;

        r5 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UEllipse: java.awt.geom.Point2D getPointAtAngle(double)>($d2);

        specialinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r7, r4, r5);

        return;
    }

    private void specialBusiness0(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.UEllipse)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0, $d1, d2, $d4, $d5;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r1;
        java.awt.geom.Point2D r2, r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r4;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getWidth()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getHeight()>();

        d2 = $d0 / $d1;

        $d4 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: double getTrueAngle(double,double)>(d2, -0.7853981633974483);

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: java.awt.geom.Point2D getPointAtAngle(double)>($d4);

        $d5 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: double getTrueAngle(double,double)>(d2, 2.356194490192345);

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: java.awt.geom.Point2D getPointAtAngle(double)>($d5);

        specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r4, r2, r3);

        return;
    }

    private void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate $r0;
        java.awt.geom.Point2D r1, r3;
        net.sourceforge.plantuml.ugraphic.ULine $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, r6;

        r4 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 := @parameter1: java.awt.geom.Point2D;

        r3 := @parameter2: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r1);

        r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $r2 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d0 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 - $d4;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>($d2, $d5);

        interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

        return;
    }

    private double getTrueAngle(double, double)
    {
        double d0, $d1, $d2, d3, $d4, $d5;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        d3 := @parameter0: double;

        d0 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d2 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d4 = $d2 / d3;

        $d5 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d4);

        return $d5;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()
    {
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r0;
        net.sourceforge.plantuml.cucadiagram.IEntity $r1, $r8;
        net.sourceforge.plantuml.graphic.color.Colors $r2, r9;
        net.sourceforge.plantuml.graphic.color.ColorType $r3;
        boolean $z0;
        net.sourceforge.plantuml.ISkinParam $r4, $r12, $r14;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r5;
        net.sourceforge.plantuml.ColorParam[] $r6;
        net.sourceforge.plantuml.ColorParam $r7;
        net.sourceforge.plantuml.style.PName $r10;
        net.sourceforge.plantuml.style.Value $r11;
        net.sourceforge.plantuml.api.ThemeStyle $r13;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r15;
        net.sourceforge.plantuml.ugraphic.color.HColor r16;
        net.sourceforge.plantuml.style.Style r17, r18;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r3 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r16 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r3);

        if r16 != null goto label2;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        r17 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.style.Style getStyle()>();

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r18 = virtualinvoke r17.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.graphic.color.Colors)>(r9);

        $r10 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r11 = virtualinvoke r18.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r10);

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r16 = interfaceinvoke $r11.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r13, $r15);

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r6 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r7 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam usecaseBackground>;

        $r6[0] = $r7;

        r16 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r4, $r5, $r6);

     label2:
        return r16;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.style.StyleBuilder $r3;
        net.sourceforge.plantuml.style.Style $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r3);

        return $r4;
    }

    private net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5, $r8;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r6;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r7;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName componentDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName usecase>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r7);

        return $r8;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getLineColor()
    {
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r0;
        net.sourceforge.plantuml.cucadiagram.IEntity $r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2;
        net.sourceforge.plantuml.graphic.color.ColorType $r3;
        boolean $z0;
        net.sourceforge.plantuml.ISkinParam $r4, $r11, $r13;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r5;
        net.sourceforge.plantuml.ColorParam[] $r6;
        net.sourceforge.plantuml.ColorParam $r7;
        net.sourceforge.plantuml.style.Style r8;
        net.sourceforge.plantuml.style.PName $r9;
        net.sourceforge.plantuml.style.Value $r10;
        net.sourceforge.plantuml.api.ThemeStyle $r12;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r14;
        net.sourceforge.plantuml.ugraphic.color.HColor r15;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r3 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r15 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r3);

        if r15 != null goto label2;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        r8 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.style.Style getStyle()>();

        $r9 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r10 = virtualinvoke r8.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r9);

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r15 = interfaceinvoke $r10.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r12, $r14);

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageUseCase: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r6 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r7 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam usecaseBorder>;

        $r6[0] = $r7;

        r15 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r4, $r5, $r6);

     label2:
        return r15;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageUseCase r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageUseCase;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType OVAL>;

        return $r0;
    }
}
