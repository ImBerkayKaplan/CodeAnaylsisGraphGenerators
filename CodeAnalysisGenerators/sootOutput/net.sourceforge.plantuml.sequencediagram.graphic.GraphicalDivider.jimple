class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider extends net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement
{
    private final net.sourceforge.plantuml.skin.Component comp;

    public void <init>(double, net.sourceforge.plantuml.skin.Component)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider r0;
        double d0;
        net.sourceforge.plantuml.skin.Component r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.skin.Component;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void <init>(double)>(d0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: net.sourceforge.plantuml.skin.Component comp> = r1;

        return;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider r0;
        double $d0, d1, $d2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.Dimension2DDouble $r3;
        net.sourceforge.plantuml.skin.Component $r4, $r7;
        net.sourceforge.plantuml.skin.Area $r6;
        net.sourceforge.plantuml.skin.Context2D r8;
        net.sourceforge.plantuml.ugraphic.UGraphic r9, r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        r8 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: double getStartingY()>();

        $r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d0);

        r10 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        r2 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: net.sourceforge.plantuml.skin.Component comp>;

        $d2 = interfaceinvoke $r4.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d1, $d2);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: net.sourceforge.plantuml.skin.Component comp>;

        $r6 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r6.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r3);

        interfaceinvoke $r7.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r10, $r6, r8);

        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }
}
