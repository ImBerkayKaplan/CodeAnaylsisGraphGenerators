public class net.sourceforge.plantuml.classdiagram.command.CommandCreateClass extends net.sourceforge.plantuml.command.SingleLineCommand2
{
    public static final java.lang.String DISPLAY_WITH_GENERIC;
    public static final java.lang.String CODE;
    public static final java.lang.String CODE_NO_DOTDOT;

    public void <init>()
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClass r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClass;

        $r1 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r11, $r23, $r33, $r36, $r42, $r45, $r50, $r53, $r70, $r73, $r81, $r84;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r7, $r9, $r17, $r28, $r60, $r65, $r76, $r87;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r10, $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r29, $r30, $r37, $r38, $r39, $r40, $r46, $r47, $r54, $r56, $r57, $r61, $r62, $r66, $r67, $r77, $r78, $r88, $r89, $r90, $r91, $r92;
        net.sourceforge.plantuml.command.regex.RegexOr $r6;
        net.sourceforge.plantuml.command.regex.RegexConcat $r8, $r16, $r27, $r59, $r64, $r75, $r86, $r93;
        net.sourceforge.plantuml.command.regex.RegexOptional $r26, $r58, $r63, $r74, $r85;
        java.lang.StringBuilder $r31, $r32, $r34, $r35, $r41, $r43, $r44, $r48, $r49, $r51, $r52, $r68, $r69, $r71, $r72, $r79, $r80, $r82, $r83;
        net.sourceforge.plantuml.graphic.color.ColorParser $r55;

        $r0 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandCreateClass;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[19];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TYPE", "(interface|enum|annotation|abstract[%s]+class|abstract|class|entity|circle|diamond)");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r7 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r8 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r11 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: java.lang.String DISPLAY_WITH_GENERIC>;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY1", $r11);

        $r9[0] = $r10;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r9[1] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r9[2] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r9[3] = $r14;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([^%s{}%g<>]+)");

        $r9[4] = $r15;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r9);

        $r7[0] = $r8;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r17 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r18 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r18.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([^%s{}%g<>]+)");

        $r17[0] = $r18;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r17[1] = $r19;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r17[2] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r17[3] = $r21;

        $r22 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r23 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: java.lang.String DISPLAY_WITH_GENERIC>;

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", $r23);

        $r17[4] = $r22;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r17);

        $r7[1] = $r16;

        $r24 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r24.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE3", "([^%s{}%g<>]+)");

        $r7[2] = $r24;

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE4", "[%g]([^%g]+)[%g]");

        $r7[3] = $r25;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r7);

        $r2[3] = $r6;

        $r26 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r28 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r29 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r28[0] = $r29;

        $r30 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\<(");

        $r33 = <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String PATTERN>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\\>");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("GENERIC", $r36);

        $r28[1] = $r30;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r28);

        specialinvoke $r26.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r27);

        $r2[4] = $r26;

        $r37 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[5] = $r37;

        $r38 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r38.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<{2}.*\\>{2})?");

        $r2[6] = $r38;

        $r39 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[7] = $r39;

        $r40 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r45);

        $r2[8] = $r40;

        $r46 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[9] = $r46;

        $r47 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r50 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r53);

        $r2[10] = $r47;

        $r54 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[11] = $r54;

        $r55 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r56 = virtualinvoke $r55.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[12] = $r56;

        $r57 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[13] = $r57;

        $r58 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r59 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r60 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r61 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r61.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("##");

        $r60[0] = $r61;

        $r62 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r62.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("LINECOLOR", "(?:\\[(dotted|dashed|bold)\\])?(\\w+)?");

        $r60[1] = $r62;

        specialinvoke $r59.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r60);

        specialinvoke $r58.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r59);

        $r2[14] = $r58;

        $r63 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r64 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r65 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r66 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r65[0] = $r66;

        $r67 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(extends)[%s]+(");

        $r70 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODES>;

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r67.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("EXTENDS", $r73);

        $r65[1] = $r67;

        specialinvoke $r64.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r65);

        specialinvoke $r63.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r64);

        $r2[15] = $r63;

        $r74 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r75 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r76 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r77 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r76[0] = $r77;

        $r78 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(implements)[%s]+(");

        $r81 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODES>;

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r78.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("IMPLEMENTS", $r84);

        $r76[1] = $r78;

        specialinvoke $r75.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r76);

        specialinvoke $r74.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r75);

        $r2[16] = $r74;

        $r85 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r86 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r87 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r88 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r87[0] = $r88;

        $r89 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r89.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\{");

        $r87[1] = $r89;

        $r90 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r87[2] = $r90;

        $r91 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r91.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\}");

        $r87[3] = $r91;

        specialinvoke $r86.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r87);

        specialinvoke $r85.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r86);

        $r2[17] = $r85;

        $r92 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[18] = $r92;

        $r93 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r93;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, $r2, $r4, r5, r6, r7, r8, r9, $r24, $r25, $r27, $r31, $r45, r48, r52;
        net.sourceforge.plantuml.cucadiagram.LeafType r3;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r10;
        net.sourceforge.plantuml.cucadiagram.Ident r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.cucadiagram.Display $r12, $r42;
        net.sourceforge.plantuml.LineLocation r13;
        net.sourceforge.plantuml.graphic.color.ColorParser $r14;
        net.sourceforge.plantuml.ISkinParam $r15, $r17, $r19, $r21, $r30, $r33, $r34, $r38;
        net.sourceforge.plantuml.api.ThemeStyle $r16, $r22;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r18, $r20, $r39;
        net.sourceforge.plantuml.command.CommandExecutionResult $r26, $r41, $r43;
        net.sourceforge.plantuml.graphic.color.ColorType $r28;
        net.sourceforge.plantuml.UrlBuilder $r29;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r32;
        int $i0;
        double $d0;
        net.sourceforge.plantuml.FontParam[] $r35;
        net.sourceforge.plantuml.FontParam $r36;
        net.sourceforge.plantuml.ugraphic.UFont $r37;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r40;
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClass r44;
        net.sourceforge.plantuml.cucadiagram.ILeaf r46;
        net.sourceforge.plantuml.cucadiagram.Code r47;
        net.sourceforge.plantuml.Url r50;
        net.sourceforge.plantuml.graphic.color.Colors r51;
        net.sourceforge.plantuml.ugraphic.color.HColor $r53;

        r44 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClass;

        r10 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        r13 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TYPE", 0);

        $r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goUpperCase(java.lang.String)>($r1);

        r3 = staticinvoke <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType(java.lang.String)>($r2);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r5 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String,java.lang.String)>($r4, "\"([:");

        r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 1);

        if r7 == null goto label01;

        $r45 = r7;

        goto label02;

     label01:
        $r45 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("GENERIC", 0);

     label02:
        r8 = $r45;

        r9 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEREO", 0);

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r5);

        $z0 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z0 == 0 goto label04;

        $z3 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean leafExistSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r11);

        if $z3 == 0 goto label03;

        r46 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r11, r11, r3, null);

        $z4 = interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean muteToType(net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, null);

        if $z4 != 0 goto label06;

        $r43 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Bad name");

        return $r43;

     label03:
        $r42 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r6);

        r46 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r11, r11, $r42, r3, null);

        goto label06;

     label04:
        r47 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r5);

        $z1 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean leafExist(net.sourceforge.plantuml.cucadiagram.Code)>(r47);

        if $z1 == 0 goto label05;

        r46 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r11, r47, r3, null);

        $z2 = interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean muteToType(net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, null);

        if $z2 != 0 goto label06;

        $r41 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Bad name");

        return $r41;

     label05:
        $r12 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r6);

        r46 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r11, r47, $r12, r3, null);

     label06:
        if r9 == null goto label07;

        $r33 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i0 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i0;

        $r34 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r35 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r36 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r35[0] = $r36;

        $r37 = interfaceinvoke $r34.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r35);

        $r38 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r39 = interfaceinvoke $r38.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r40 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r9, $d0, $r37, $r39);

        interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r40);

        interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setStereostyle(java.lang.String)>(r9);

     label07:
        if r8 == null goto label08;

        interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setGeneric(java.lang.String)>(r8);

     label08:
        r48 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r48 == null goto label09;

        $r29 = new net.sourceforge.plantuml.UrlBuilder;

        $r30 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r32 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r29.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r31, $r32);

        r50 = virtualinvoke $r29.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r48);

        interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: void addUrl(net.sourceforge.plantuml.Url)>(r50);

     label09:
        interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setCodeLine(net.sourceforge.plantuml.LineLocation)>(r13);

        $r14 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r15 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r17 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r51 = virtualinvoke $r14.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r16, r0, $r18);

        r52 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 1);

        if r52 != null goto label10;

        $r53 = null;

        goto label11;

     label10:
        $r19 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r21 = virtualinvoke r10.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r53 = virtualinvoke $r20.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r22, r52);

     label11:
        if $r53 == null goto label12;

        $r28 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r51 = virtualinvoke r51.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors add(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r28, $r53);

     label12:
        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 0);

        if $r24 == null goto label13;

        $r27 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 0);

        r51 = virtualinvoke r51.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors addLegacyStroke(java.lang.String)>($r27);

     label13:
        interfaceinvoke r46.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r51);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void manageExtends(java.lang.String,net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.cucadiagram.IEntity)>("EXTENDS", r10, r0, r46);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void manageExtends(java.lang.String,net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.cucadiagram.IEntity)>("IMPLEMENTS", r10, r0, r46);

        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TAGS", 0);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void addTags(net.sourceforge.plantuml.cucadiagram.IEntity,java.lang.String)>(r46, $r25);

        $r26 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r26;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClass r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.classdiagram.ClassDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClass;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.classdiagram.ClassDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: java.lang.String CODE_NO_DOTDOT> = "[^%s{}%g<>:]+";

        <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: java.lang.String CODE> = "[^%s{}%g<>]+";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[%g](.+?)(?:\\<(");

        $r2 = <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String PATTERN>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\\>)?[%g]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: java.lang.String DISPLAY_WITH_GENERIC> = $r5;

        return;
    }
}
