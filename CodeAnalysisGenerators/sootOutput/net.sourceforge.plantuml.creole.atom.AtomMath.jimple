public class net.sourceforge.plantuml.creole.atom.AtomMath extends net.sourceforge.plantuml.creole.atom.AbstractAtom implements net.sourceforge.plantuml.creole.atom.Atom
{
    private final net.sourceforge.plantuml.math.ScientificEquationSafe math;
    private final net.sourceforge.plantuml.ugraphic.color.HColor foreground;
    private final net.sourceforge.plantuml.ugraphic.color.HColor background;
    private final net.sourceforge.plantuml.ugraphic.color.ColorMapper colorMapper;
    private net.sourceforge.plantuml.awt.geom.Dimension2D dim;

    public void <init>(net.sourceforge.plantuml.math.ScientificEquationSafe, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.ColorMapper)
    {
        net.sourceforge.plantuml.creole.atom.AtomMath r0;
        net.sourceforge.plantuml.math.ScientificEquationSafe r1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r4;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomMath;

        r1 := @parameter0: net.sourceforge.plantuml.math.ScientificEquationSafe;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AbstractAtom: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.math.ScientificEquationSafe math> = r1;

        r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.ugraphic.color.ColorMapper colorMapper> = r2;

        r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.ugraphic.color.HColor foreground> = r3;

        r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.ugraphic.color.HColor background> = r4;

        return;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimensionSlow(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomMath r0;
        java.awt.Color $r1, $r2;
        net.sourceforge.plantuml.math.ScientificEquationSafe $r3;
        net.sourceforge.plantuml.ugraphic.MutableImage $r4, $r5;
        java.awt.image.BufferedImage r6;
        net.sourceforge.plantuml.Dimension2DDouble $r7;
        int $i0, $i1;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.StringBounder r8;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomMath;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r3 = r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.math.ScientificEquationSafe math>;

        $r2 = <java.awt.Color: java.awt.Color BLACK>;

        $r1 = <java.awt.Color: java.awt.Color WHITE>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.ugraphic.MutableImage getImage(java.awt.Color,java.awt.Color)>($r2, $r1);

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.MutableImage: net.sourceforge.plantuml.ugraphic.MutableImage withScale(double)>(1.0);

        r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.ugraphic.MutableImage: java.awt.image.BufferedImage getImage()>();

        $r7 = new net.sourceforge.plantuml.Dimension2DDouble;

        $i0 = virtualinvoke r6.<java.awt.image.BufferedImage: int getWidth()>();

        $d0 = (double) $i0;

        $i1 = virtualinvoke r6.<java.awt.image.BufferedImage: int getHeight()>();

        $d1 = (double) $i1;

        specialinvoke $r7.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d1);

        return $r7;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomMath r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r1, $r2, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r3;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomMath;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.awt.geom.Dimension2D dim>;

        if $r1 != null goto label1;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimensionSlow(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.awt.geom.Dimension2D dim> = $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.awt.geom.Dimension2D dim>;

        return $r2;
    }

    public double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomMath r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomMath;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        boolean z0;
        net.sourceforge.plantuml.creole.atom.AtomMath r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2, $r4, $r6;
        java.awt.Color $r3, $r5, r7, r14;
        net.sourceforge.plantuml.ugraphic.UImage $r8, r16;
        net.sourceforge.plantuml.math.ScientificEquationSafe $r9, $r11, $r13;
        net.sourceforge.plantuml.ugraphic.MutableImage $r10;
        java.lang.String $r12;
        net.sourceforge.plantuml.ugraphic.UImageSvg r15;

        r1 := @this: net.sourceforge.plantuml.creole.atom.AtomMath;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        z0 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: boolean matchesProperty(java.lang.String)>("SVG");

        $r2 = r1.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.ugraphic.color.HColor background>;

        if $r2 != null goto label1;

        r14 = null;

        goto label2;

     label1:
        $r4 = r1.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.ugraphic.color.HColor background>;

        $r3 = <java.awt.Color: java.awt.Color WHITE>;

        r14 = specialinvoke r1.<net.sourceforge.plantuml.creole.atom.AtomMath: java.awt.Color getColor(net.sourceforge.plantuml.ugraphic.color.HColor,java.awt.Color)>($r4, $r3);

     label2:
        $r6 = r1.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.ugraphic.color.HColor foreground>;

        $r5 = <java.awt.Color: java.awt.Color BLACK>;

        r7 = specialinvoke r1.<net.sourceforge.plantuml.creole.atom.AtomMath: java.awt.Color getColor(net.sourceforge.plantuml.ugraphic.color.HColor,java.awt.Color)>($r6, $r5);

        if z0 == 0 goto label3;

        $r13 = r1.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.math.ScientificEquationSafe math>;

        r15 = virtualinvoke $r13.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.ugraphic.UImageSvg getSvg(double,java.awt.Color,java.awt.Color)>(1.0, r7, r14);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r15);

        goto label4;

     label3:
        $r8 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r9 = r1.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.math.ScientificEquationSafe math>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.ugraphic.MutableImage getImage(java.awt.Color,java.awt.Color)>(r7, r14);

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r10);

        $r11 = r1.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.math.ScientificEquationSafe math>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.math.ScientificEquationSafe: java.lang.String getFormula()>();

        r16 = virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UImage: net.sourceforge.plantuml.ugraphic.UImage withFormula(java.lang.String)>($r12);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r16);

     label4:
        return;
    }

    private java.awt.Color getColor(net.sourceforge.plantuml.ugraphic.color.HColor, java.awt.Color)
    {
        net.sourceforge.plantuml.ugraphic.color.HColor r0;
        boolean $z0;
        java.awt.Color r1, $r4;
        net.sourceforge.plantuml.creole.atom.AtomMath r2;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper $r3;

        r2 := @this: net.sourceforge.plantuml.creole.atom.AtomMath;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        r1 := @parameter1: java.awt.Color;

        $z0 = r0 instanceof net.sourceforge.plantuml.ugraphic.color.HColorSimple;

        if $z0 == 0 goto label1;

        $r3 = r2.<net.sourceforge.plantuml.creole.atom.AtomMath: net.sourceforge.plantuml.ugraphic.color.ColorMapper colorMapper>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r0);

        return $r4;

     label1:
        return r1;
    }
}
