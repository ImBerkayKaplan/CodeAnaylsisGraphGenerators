public class net.sourceforge.plantuml.mda.MDADiagramImpl extends java.lang.Object implements net.sourceforge.plantuml.api.mda.option2.MDADiagram
{
    private final java.util.Collection packages;

    public static net.sourceforge.plantuml.api.mda.option2.MDADiagram create(java.lang.String)
    {
        net.sourceforge.plantuml.SourceStringReader $r0, $r10;
        int $i0, $i1;
        java.lang.Object $r1;
        net.sourceforge.plantuml.BlockUml r2;
        net.sourceforge.plantuml.core.Diagram r3;
        boolean $z0;
        net.sourceforge.plantuml.mda.MDADiagramImpl $r4;
        net.sourceforge.plantuml.classdiagram.ClassDiagram $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String r11, r13;
        java.util.List r12;

        r11 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.SourceStringReader;

        specialinvoke $r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(java.lang.String)>(r11);

        r12 = virtualinvoke $r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List getBlocks()>();

        $i0 = interfaceinvoke r12.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@startuml\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n@enduml");

        r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new net.sourceforge.plantuml.SourceStringReader;

        specialinvoke $r10.<net.sourceforge.plantuml.SourceStringReader: void <init>(java.lang.String)>(r13);

        r12 = virtualinvoke $r10.<net.sourceforge.plantuml.SourceStringReader: java.util.List getBlocks()>();

        $i1 = interfaceinvoke r12.<java.util.List: int size()>();

        if $i1 != 0 goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (net.sourceforge.plantuml.BlockUml) $r1;

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        $z0 = r3 instanceof net.sourceforge.plantuml.classdiagram.ClassDiagram;

        if $z0 == 0 goto label2;

        $r4 = new net.sourceforge.plantuml.mda.MDADiagramImpl;

        $r5 = (net.sourceforge.plantuml.classdiagram.ClassDiagram) r3;

        specialinvoke $r4.<net.sourceforge.plantuml.mda.MDADiagramImpl: void <init>(net.sourceforge.plantuml.classdiagram.ClassDiagram)>($r5);

        return $r4;

     label2:
        return null;
    }

    private void <init>(net.sourceforge.plantuml.classdiagram.ClassDiagram)
    {
        net.sourceforge.plantuml.mda.MDADiagramImpl r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r2;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory r3;
        net.sourceforge.plantuml.mda.MDAPackageImpl $r4, $r11;
        java.util.Collection $r5, $r7, $r12;
        net.sourceforge.plantuml.cucadiagram.IGroup $r6, r10;
        java.util.Iterator r8;
        boolean $z1;
        java.lang.Object $r9;

        r0 := @this: net.sourceforge.plantuml.mda.MDADiagramImpl;

        r2 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.mda.MDADiagramImpl: java.util.Collection packages> = $r1;

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory getEntityFactory()>();

        $r5 = r0.<net.sourceforge.plantuml.mda.MDADiagramImpl: java.util.Collection packages>;

        $r4 = new net.sourceforge.plantuml.mda.MDAPackageImpl;

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: net.sourceforge.plantuml.cucadiagram.IGroup getRootGroup()>();

        specialinvoke $r4.<net.sourceforge.plantuml.mda.MDAPackageImpl: void <init>(net.sourceforge.plantuml.cucadiagram.IGroup)>($r6);

        interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: java.util.Collection groups()>();

        r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.cucadiagram.IGroup) $r9;

        $r12 = r0.<net.sourceforge.plantuml.mda.MDADiagramImpl: java.util.Collection packages>;

        $r11 = new net.sourceforge.plantuml.mda.MDAPackageImpl;

        specialinvoke $r11.<net.sourceforge.plantuml.mda.MDAPackageImpl: void <init>(net.sourceforge.plantuml.cucadiagram.IGroup)>(r10);

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        return;
    }

    public java.util.Collection getPackages()
    {
        net.sourceforge.plantuml.mda.MDADiagramImpl r0;
        java.util.Collection $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.mda.MDADiagramImpl;

        $r1 = r0.<net.sourceforge.plantuml.mda.MDADiagramImpl: java.util.Collection packages>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }
}
