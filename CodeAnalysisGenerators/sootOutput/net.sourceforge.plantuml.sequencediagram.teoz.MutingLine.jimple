public class net.sourceforge.plantuml.sequencediagram.teoz.MutingLine extends java.lang.Object
{
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final boolean useContinueLineBecauseOfDelay;
    private final java.util.Map delays;
    private final net.sourceforge.plantuml.style.StyleBuilder styleBuilder;
    private final net.sourceforge.plantuml.sequencediagram.Participant participant;

    public void <init>(net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, java.util.List, net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine r0;
        java.util.TreeMap $r1;
        net.sourceforge.plantuml.sequencediagram.Participant r2;
        net.sourceforge.plantuml.skin.rose.Rose r3;
        net.sourceforge.plantuml.ISkinParam r4;
        java.util.List r5;
        boolean $z0;
        net.sourceforge.plantuml.style.StyleBuilder $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine;

        r3 := @parameter0: net.sourceforge.plantuml.skin.rose.Rose;

        r4 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r5 := @parameter2: java.util.List;

        r2 := @parameter3: net.sourceforge.plantuml.sequencediagram.Participant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: java.util.Map delays> = $r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.sequencediagram.Participant participant> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.skin.rose.Rose skin> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.ISkinParam skinParam> = r4;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: boolean useContinueLineBecauseOfDelay(java.util.List)>(r5);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: boolean useContinueLineBecauseOfDelay> = $z0;

        $r6 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.style.StyleBuilder styleBuilder> = $r6;

        return;
    }

    private boolean useContinueLineBecauseOfDelay(java.util.List)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine r0;
        net.sourceforge.plantuml.ISkinParam $r1;
        java.lang.String r2, $r3;
        boolean $z0, $z1, $z2;
        java.util.List r4;
        java.util.Iterator r5;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.Event r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine;

        r4 := @parameter0: java.util.List;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.ISkinParam skinParam>;

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("lifelineStrategy");

        $r3 = "nosolid";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Event) $r6;

        $z2 = r7 instanceof net.sourceforge.plantuml.sequencediagram.Delay;

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Context2D, double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.skin.ComponentType r1, $r20, $r25;
        java.util.Map $r2, $r5;
        int $i0;
        net.sourceforge.plantuml.ugraphic.UGraphic r3;
        net.sourceforge.plantuml.skin.Context2D r4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        java.util.Set $r6;
        java.util.Iterator r7;
        java.lang.Object $r8, $r10, $r12, $r14, $r16, $r18, $r21, $r23;
        java.util.Map$Entry r9;
        java.lang.Double $r11, $r13, $r15, $r17, $r19, $r22, $r24;
        byte $b1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r4 := @parameter1: net.sourceforge.plantuml.skin.Context2D;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: boolean useContinueLineBecauseOfDelay>;

        if $z0 == 0 goto label1;

        $r25 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType CONTINUE_LINE>;

        goto label2;

     label1:
        $r25 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType PARTICIPANT_LINE>;

     label2:
        r1 = $r25;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: java.util.Map delays>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 <= 0 goto label6;

        d10 = d0;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: java.util.Map delays>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.Double) $r10;

        $d2 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $b1 = $d2 cmpl d0;

        if $b1 < 0 goto label4;

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.Double) $r12;

        $d3 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,double,double,net.sourceforge.plantuml.skin.ComponentType)>(r3, r4, d10, $d3, r1);

        $r14 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.Double) $r14;

        $d4 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $r16 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (java.lang.Double) $r16;

        $d5 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $r18 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Double) $r18;

        $d6 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d7 = $d5 + $d6;

        $r20 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DELAY_LINE>;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,double,double,net.sourceforge.plantuml.skin.ComponentType)>(r3, r4, $d4, $d7, $r20);

        $r21 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (java.lang.Double) $r21;

        $d8 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $r23 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = (java.lang.Double) $r23;

        $d9 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        d10 = $d8 + $d9;

     label4:
        goto label3;

     label5:
        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,double,double,net.sourceforge.plantuml.skin.ComponentType)>(r3, r4, d10, d1, r1);

        goto label7;

     label6:
        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,double,double,net.sourceforge.plantuml.skin.ComponentType)>(r3, r4, d0, d1, $r25);

     label7:
        return;
    }

    private void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Context2D, double, double, net.sourceforge.plantuml.skin.ComponentType)
    {
        double d0, d1, $d2, $d3;
        byte $b0, $b1;
        net.sourceforge.plantuml.skin.ComponentType r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine r2;
        net.sourceforge.plantuml.style.StyleBuilder $r3;
        net.sourceforge.plantuml.style.Style r4;
        net.sourceforge.plantuml.style.Style[] $r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r8;
        net.sourceforge.plantuml.skin.rose.Rose $r7;
        net.sourceforge.plantuml.sequencediagram.Participant $r9;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.Display $r10;
        net.sourceforge.plantuml.skin.Component r11;
        net.sourceforge.plantuml.ugraphic.UGraphic r12, $r18;
        net.sourceforge.plantuml.graphic.StringBounder $r13;
        net.sourceforge.plantuml.awt.geom.Dimension2D r14;
        net.sourceforge.plantuml.skin.Area $r15;
        net.sourceforge.plantuml.ugraphic.UTranslate $r17;
        net.sourceforge.plantuml.skin.Context2D r19;
        java.lang.IllegalArgumentException $r20;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r19 := @parameter1: net.sourceforge.plantuml.skin.Context2D;

        d1 := @parameter2: double;

        d0 := @parameter3: double;

        r0 := @parameter4: net.sourceforge.plantuml.skin.ComponentType;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        return;

     label1:
        $b1 = d0 cmpg d1;

        if $b1 >= 0 goto label2;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r20;

     label2:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        r4 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r3);

        $r7 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r5 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r5[0] = r4;

        $r8 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r9 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.sequencediagram.Participant participant>;

        $r6 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: boolean forceSequenceParticipantUnderlined()>();

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.cucadiagram.Display getDisplay(boolean)>($z0);

        r11 = virtualinvoke $r7.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r5, r0, null, $r8, $r10);

        $r13 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r14 = interfaceinvoke r11.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r13);

        $r15 = new net.sourceforge.plantuml.skin.Area;

        $d2 = virtualinvoke r14.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = d0 - d1;

        specialinvoke $r15.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d2, $d3);

        $r17 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d1);

        $r18 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        interfaceinvoke r11.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r18, $r15, r19);

        return;
    }

    public void delayOn(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine r0;
        double d0, d1;
        java.util.Map $r1;
        java.lang.Double $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: java.util.Map delays>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
}
