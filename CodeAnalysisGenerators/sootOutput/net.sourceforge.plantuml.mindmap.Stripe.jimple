public class net.sourceforge.plantuml.mindmap.Stripe extends java.lang.Object implements java.lang.Comparable
{
    private final double x1;
    private final double x2;
    private final double value;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.mindmap.Stripe r2;
        double $d0, $d1, $d2;
        int $i0, $i1, $i2;
        java.lang.String $r9;

        r2 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = r2.<net.sourceforge.plantuml.mindmap.Stripe: double x1>;

        $i0 = (int) $d0;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $d1 = r2.<net.sourceforge.plantuml.mindmap.Stripe: double x2>;

        $i1 = (int) $d1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $d2 = r2.<net.sourceforge.plantuml.mindmap.Stripe: double value>;

        $i2 = (int) $d2;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void <init>(double, double, double)
    {
        net.sourceforge.plantuml.mindmap.Stripe r0;
        double d0, d1, d2;
        byte $b0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r8, $r9;
        java.io.PrintStream $r2, $r7;
        java.lang.String $r5, $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d0 cmpg d1;

        if $b0 > 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x1=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x2=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r11;

     label1:
        r0.<net.sourceforge.plantuml.mindmap.Stripe: double x1> = d1;

        r0.<net.sourceforge.plantuml.mindmap.Stripe: double x2> = d0;

        r0.<net.sourceforge.plantuml.mindmap.Stripe: double value> = d2;

        return;
    }

    public boolean contains(double)
    {
        double d0, $d1, $d2;
        net.sourceforge.plantuml.mindmap.Stripe r0;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.mindmap.Stripe: double x1>;

        $b0 = d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $d2 = r0.<net.sourceforge.plantuml.mindmap.Stripe: double x2>;

        $b1 = d0 cmpg $d2;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int compareTo(net.sourceforge.plantuml.mindmap.Stripe)
    {
        net.sourceforge.plantuml.mindmap.Stripe r0, r1;
        double $d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        r1 := @parameter0: net.sourceforge.plantuml.mindmap.Stripe;

        $d1 = r0.<net.sourceforge.plantuml.mindmap.Stripe: double x1>;

        $d0 = r1.<net.sourceforge.plantuml.mindmap.Stripe: double x1>;

        $d2 = $d1 - $d0;

        $d3 = staticinvoke <java.lang.Math: double signum(double)>($d2);

        $i0 = (int) $d3;

        return $i0;
    }

    public double getValue()
    {
        net.sourceforge.plantuml.mindmap.Stripe r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        $d0 = r0.<net.sourceforge.plantuml.mindmap.Stripe: double value>;

        return $d0;
    }

    public final double getStart()
    {
        net.sourceforge.plantuml.mindmap.Stripe r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        $d0 = r0.<net.sourceforge.plantuml.mindmap.Stripe: double x1>;

        return $d0;
    }

    public final double getEnd()
    {
        net.sourceforge.plantuml.mindmap.Stripe r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        $d0 = r0.<net.sourceforge.plantuml.mindmap.Stripe: double x2>;

        return $d0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.mindmap.Stripe r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Stripe;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.mindmap.Stripe) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Stripe: int compareTo(net.sourceforge.plantuml.mindmap.Stripe)>($r2);

        return $i0;
    }
}
