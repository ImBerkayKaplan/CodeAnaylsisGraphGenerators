public class net.sourceforge.plantuml.svek.EntityImageDegenerated extends java.lang.Object implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final net.sourceforge.plantuml.svek.IEntityImage orig;
    private final double delta;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backcolor;

    public void <init>(net.sourceforge.plantuml.svek.IEntityImage, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.svek.IEntityImage r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        r1 := @parameter0: net.sourceforge.plantuml.svek.IEntityImage;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: double delta> = 7.0;

        r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: double delta> = 7.0;

        r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig> = r1;

        r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.ugraphic.color.HColor backcolor> = r2;

        return;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        $r1 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: boolean isHidden()>();

        return $z0;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        $r1 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.ugraphic.color.HColor backcolor>;

        return $r1;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>($r3, 14.0, 14.0);

        return $r4;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.ugraphic.MinMax $r3;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public java.awt.geom.Rectangle2D getInnerPosition(java.lang.String, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.InnerStrategy)
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.InnerStrategy r3;
        net.sourceforge.plantuml.svek.IEntityImage $r4;
        java.awt.geom.Rectangle2D $r5;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.InnerStrategy;

        $r4 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.svek.IEntityImage: java.awt.geom.Rectangle2D getInnerPosition(java.lang.String,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.InnerStrategy)>(r1, r2, r3);

        return $r5;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r4, $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2, $r7;
        net.sourceforge.plantuml.svek.IEntityImage $r3;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.ugraphic.UEmpty $r9;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r3 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r2 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(7.0, 7.0);

        $r4 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        interfaceinvoke $r3.<net.sourceforge.plantuml.svek.IEntityImage: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r4);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 - 7.0;

        $d2 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 - 7.0;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, $d3);

        $r8 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        $r9 = new net.sourceforge.plantuml.ugraphic.UEmpty;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UEmpty: void <init>(double,double)>(7.0, 7.0);

        interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r9);

     label1:
        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        net.sourceforge.plantuml.svek.ShapeType $r2;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        $r1 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.svek.ShapeType getShapeType()>();

        return $r2;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.svek.Margins $r3;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageDegenerated r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageDegenerated;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageDegenerated: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }
}
