public class net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse extends net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final net.sourceforge.plantuml.skin.Component compElse;
    private final net.sourceforge.plantuml.sequencediagram.graphic.Lazy afterY;
    private final boolean parallel;

    public void <init>(double, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.sequencediagram.InGroupableList, boolean, net.sourceforge.plantuml.sequencediagram.graphic.Lazy)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.InGroupableList r1;
        boolean z0;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Lazy r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        d0 := @parameter0: double;

        r2 := @parameter1: net.sourceforge.plantuml.skin.Component;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        z0 := @parameter3: boolean;

        r3 := @parameter4: net.sourceforge.plantuml.sequencediagram.graphic.Lazy;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement: void <init>(double,net.sourceforge.plantuml.sequencediagram.InGroupableList)>(d0, r1);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: boolean parallel> = z0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.skin.Component compElse> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.sequencediagram.graphic.Lazy afterY> = r3;

        return;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse r1;
        net.sourceforge.plantuml.sequencediagram.InGroupableList $r2, $r3, $r4;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, d7, $d8, d9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.Lazy $r6;
        byte $b0;
        net.sourceforge.plantuml.Dimension2DDouble $r7;
        boolean $z0;
        net.sourceforge.plantuml.skin.Area $r9;
        net.sourceforge.plantuml.skin.Component $r10;
        net.sourceforge.plantuml.skin.Context2D r11;
        net.sourceforge.plantuml.ugraphic.UGraphic r12, r13;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d9 := @parameter1: double;

        r11 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r0 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        $d2 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getHack2()>();

        d3 = $d1 - $d2;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: double getStartingY()>();

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, $d4);

        r13 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.sequencediagram.graphic.Lazy afterY>;

        $d5 = interfaceinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.Lazy: double getNow()>();

        $d6 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: double getStartingY()>();

        d7 = $d5 - $d6;

        $b0 = d7 cmpg 0.0;

        if $b0 > 0 goto label1;

        return;

     label1:
        $r7 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d8 = d3 - d0;

        specialinvoke $r7.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d8, d7);

        $z0 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: boolean parallel>;

        if $z0 != 0 goto label2;

        $r10 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.skin.Component compElse>;

        $r9 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r7);

        interfaceinvoke $r10.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r13, $r9, r11);

     label2:
        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse r0;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: boolean parallel>;

        if $z0 == 0 goto label1;

        return 0.0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.skin.Component compElse>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: net.sourceforge.plantuml.skin.Component compElse>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d0 + $d1;

        return $d2;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
}
