public class net.sourceforge.plantuml.version.PSystemLicense extends net.sourceforge.plantuml.PlainDiagram implements net.sourceforge.plantuml.graphic.UDrawable
{

    protected net.sourceforge.plantuml.graphic.UDrawable getRootDrawable(net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.version.PSystemLicense r0;
        net.sourceforge.plantuml.FileFormatOption r1;

        r0 := @this: net.sourceforge.plantuml.version.PSystemLicense;

        r1 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        return r0;
    }

    public static net.sourceforge.plantuml.version.PSystemLicense create(net.sourceforge.plantuml.core.UmlSource) throws java.io.IOException
    {
        net.sourceforge.plantuml.version.PSystemLicense $r0;
        net.sourceforge.plantuml.core.UmlSource r1;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        $r0 = new net.sourceforge.plantuml.version.PSystemLicense;

        specialinvoke $r0.<net.sourceforge.plantuml.version.PSystemLicense: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.core.UmlSource)
    {
        net.sourceforge.plantuml.version.PSystemLicense r0;
        net.sourceforge.plantuml.core.UmlSource r1;

        r0 := @this: net.sourceforge.plantuml.version.PSystemLicense;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        specialinvoke r0.<net.sourceforge.plantuml.PlainDiagram: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        return;
    }

    private net.sourceforge.plantuml.svek.TextBlockBackcolored getGraphicStrings(java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r1;
        net.sourceforge.plantuml.version.PSystemLicense r2;

        r2 := @this: net.sourceforge.plantuml.version.PSystemLicense;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhite(java.util.List)>(r0);

        return $r1;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.version.PSystemLicense r1;

        r1 := @this: net.sourceforge.plantuml.version.PSystemLicense;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("(License)");

        return $r0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.awt.image.BufferedImage r1;
        java.util.ArrayList $r2, $r3, $r22;
        net.sourceforge.plantuml.version.License $r5, $r7, $r23, $r25;
        java.util.List $r6, $r8, $r24, $r26;
        net.sourceforge.plantuml.version.PSystemLicense r9;
        net.sourceforge.plantuml.svek.TextBlockBackcolored r10, r21, $r27;
        net.sourceforge.plantuml.graphic.StringBounder $r11;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r12;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r13, $r18, $r20;
        net.sourceforge.plantuml.ugraphic.UImage $r14;
        net.sourceforge.plantuml.ugraphic.PixelImage $r15;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r16;
        net.sourceforge.plantuml.ugraphic.UGraphic $r19, r28, r31, r32;
        int $i0;

        r9 := @this: net.sourceforge.plantuml.version.PSystemLicense;

        r28 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveQuick()>();

        r1 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: java.awt.image.BufferedImage retrieveDistributorImage(net.sourceforge.plantuml.version.LicenseInfo)>(r0);

        if r1 != null goto label1;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        $r23 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r24 = virtualinvoke $r23.<net.sourceforge.plantuml.version.License: java.util.List getText1(net.sourceforge.plantuml.version.LicenseInfo)>(r0);

        interfaceinvoke $r22.<java.util.List: boolean addAll(java.util.Collection)>($r24);

        $r25 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r26 = virtualinvoke $r25.<net.sourceforge.plantuml.version.License: java.util.List getText2(net.sourceforge.plantuml.version.LicenseInfo)>(r0);

        interfaceinvoke $r22.<java.util.List: boolean addAll(java.util.Collection)>($r26);

        $r27 = specialinvoke r9.<net.sourceforge.plantuml.version.PSystemLicense: net.sourceforge.plantuml.svek.TextBlockBackcolored getGraphicStrings(java.util.List)>($r22);

        interfaceinvoke $r27.<net.sourceforge.plantuml.svek.TextBlockBackcolored: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r28);

        goto label2;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.version.License: java.util.List getText1(net.sourceforge.plantuml.version.LicenseInfo)>(r0);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        $r7 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.version.License: java.util.List getText2(net.sourceforge.plantuml.version.LicenseInfo)>(r0);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        r10 = specialinvoke r9.<net.sourceforge.plantuml.version.PSystemLicense: net.sourceforge.plantuml.svek.TextBlockBackcolored getGraphicStrings(java.util.List)>($r2);

        interfaceinvoke r10.<net.sourceforge.plantuml.svek.TextBlockBackcolored: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r28);

        $r11 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r12 = interfaceinvoke r10.<net.sourceforge.plantuml.svek.TextBlockBackcolored: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r11);

        $d0 = virtualinvoke $r12.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = 4.0 + $d0;

        $r13 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d1);

        r31 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r13);

        $r14 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r15 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r16 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>(r1, $r16);

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r15);

        $r18 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(20.0);

        $r19 = interfaceinvoke r31.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r14);

        $i0 = virtualinvoke $r14.<net.sourceforge.plantuml.ugraphic.UImage: int getHeight()>();

        $d2 = (double) $i0;

        $r20 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        r32 = interfaceinvoke r31.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r20);

        r21 = specialinvoke r9.<net.sourceforge.plantuml.version.PSystemLicense: net.sourceforge.plantuml.svek.TextBlockBackcolored getGraphicStrings(java.util.List)>($r3);

        interfaceinvoke r21.<net.sourceforge.plantuml.svek.TextBlockBackcolored: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r32);

     label2:
        return;
    }
}
