public final class net.sourceforge.plantuml.svek.PortGeometry extends java.lang.Object implements java.lang.Comparable
{
    private final java.lang.String id;
    private final double position;
    private final double height;
    private final int score;

    public void <init>(java.lang.String, double, double, int)
    {
        net.sourceforge.plantuml.svek.PortGeometry r0;
        java.lang.String r1;
        double d0, d1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.PortGeometry: java.lang.String id> = r1;

        r0.<net.sourceforge.plantuml.svek.PortGeometry: double position> = d0;

        r0.<net.sourceforge.plantuml.svek.PortGeometry: double height> = d1;

        r0.<net.sourceforge.plantuml.svek.PortGeometry: int score> = i0;

        return;
    }

    public net.sourceforge.plantuml.svek.PortGeometry translateY(double)
    {
        net.sourceforge.plantuml.svek.PortGeometry $r0, r1;
        double d0, $d1, $d2, $d3;
        int $i0;
        java.lang.String $r2;

        r1 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.PortGeometry;

        $r2 = r1.<net.sourceforge.plantuml.svek.PortGeometry: java.lang.String id>;

        $d1 = r1.<net.sourceforge.plantuml.svek.PortGeometry: double position>;

        $d3 = $d1 + d0;

        $d2 = r1.<net.sourceforge.plantuml.svek.PortGeometry: double height>;

        $i0 = r1.<net.sourceforge.plantuml.svek.PortGeometry: int score>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.PortGeometry: void <init>(java.lang.String,double,double,int)>($r2, $d3, $d2, $i0);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.svek.PortGeometry r2;
        double $d0, $d1;
        int $i0;
        java.lang.String $r9;

        r2 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pos=");

        $d0 = r2.<net.sourceforge.plantuml.svek.PortGeometry: double position>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" height=");

        $d1 = r2.<net.sourceforge.plantuml.svek.PortGeometry: double height>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i0 = r2.<net.sourceforge.plantuml.svek.PortGeometry: int score>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.svek.PortGeometry r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        $d0 = r0.<net.sourceforge.plantuml.svek.PortGeometry: double height>;

        return $d0;
    }

    public double getPosition()
    {
        net.sourceforge.plantuml.svek.PortGeometry r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        $d0 = r0.<net.sourceforge.plantuml.svek.PortGeometry: double position>;

        return $d0;
    }

    public double getLastY()
    {
        net.sourceforge.plantuml.svek.PortGeometry r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        $d1 = r0.<net.sourceforge.plantuml.svek.PortGeometry: double position>;

        $d0 = r0.<net.sourceforge.plantuml.svek.PortGeometry: double height>;

        $d2 = $d1 + $d0;

        return $d2;
    }

    public int getScore()
    {
        net.sourceforge.plantuml.svek.PortGeometry r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        $i0 = r0.<net.sourceforge.plantuml.svek.PortGeometry: int score>;

        return $i0;
    }

    public java.lang.String getId()
    {
        net.sourceforge.plantuml.svek.PortGeometry r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        $r1 = r0.<net.sourceforge.plantuml.svek.PortGeometry: java.lang.String id>;

        return $r1;
    }

    public int compareTo(net.sourceforge.plantuml.svek.PortGeometry)
    {
        net.sourceforge.plantuml.svek.PortGeometry r0, r1;
        double $d0, $d1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        r1 := @parameter0: net.sourceforge.plantuml.svek.PortGeometry;

        $d1 = r0.<net.sourceforge.plantuml.svek.PortGeometry: double position>;

        $d0 = r1.<net.sourceforge.plantuml.svek.PortGeometry: double position>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.svek.PortGeometry r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.svek.PortGeometry;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.svek.PortGeometry) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.PortGeometry: int compareTo(net.sourceforge.plantuml.svek.PortGeometry)>($r2);

        return $i0;
    }
}
