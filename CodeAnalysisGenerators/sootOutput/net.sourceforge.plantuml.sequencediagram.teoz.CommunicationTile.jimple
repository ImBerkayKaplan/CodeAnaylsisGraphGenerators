public class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces;
    private final net.sourceforge.plantuml.sequencediagram.Message message;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    public static final double LIVE_DELTA_SIZE;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r1;
        java.lang.String $r2, $r7;
        net.sourceforge.plantuml.sequencediagram.Message $r5;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces, net.sourceforge.plantuml.sequencediagram.Message, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r2;
        net.sourceforge.plantuml.sequencediagram.Message r3;
        net.sourceforge.plantuml.sequencediagram.Participant $r4, $r6;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r5, $r7, $r10;
        net.sourceforge.plantuml.skin.rose.Rose r8;
        net.sourceforge.plantuml.ISkinParam r9;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces;

        r3 := @parameter2: net.sourceforge.plantuml.sequencediagram.Message;

        r8 := @parameter3: net.sourceforge.plantuml.skin.rose.Rose;

        r9 := @parameter4: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant1()>();

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)>($r4);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1> = $r5;

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.sequencediagram.Participant getParticipant2()>();

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)>($r6);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2> = $r7;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.rose.Rose skin> = r8;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.ISkinParam skinParam> = r9;

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.Message: boolean isCreate()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void goCreate()>();

     label1:
        return;
    }

    public boolean isReverse(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r2, $r4;
        net.sourceforge.plantuml.real.Real r3, r5;
        double $d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = interfaceinvoke r3.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d1 = interfaceinvoke r5.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isCreate()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: boolean isCreate()>();

        return $z0;
    }

    private double getArrowThickness()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.LineParam $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.ugraphic.UStroke r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam sequenceArrow>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r1, null);

        if r3 != null goto label1;

        return 1.0;

     label1:
        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        return $d0;
    }

    private net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1, $r3, $r6;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        boolean $z0;
        double $d0;
        net.sourceforge.plantuml.skin.rose.Rose $r4;
        net.sourceforge.plantuml.style.Style[] $r5;
        net.sourceforge.plantuml.ISkinParam $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.skin.ArrowComponent $r9;
        net.sourceforge.plantuml.skin.ArrowConfiguration r10, r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        r10 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.skin.ArrowConfiguration getArrowConfiguration()>();

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isReverse(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        if $z0 == 0 goto label1;

        r10 = virtualinvoke r10.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowConfiguration reverse()>();

     label1:
        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: double getArrowThickness()>();

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowConfiguration withThickness(double)>($d0);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r5 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r8 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.cucadiagram.Display getLabelNumbered()>();

        $r9 = virtualinvoke $r4.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.ArrowComponent createComponentArrow(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r5, r11, $r7, $r8);

        return $r9;
    }

    private net.sourceforge.plantuml.skin.ArrowComponent getComponentMulticast(net.sourceforge.plantuml.graphic.StringBounder, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1, $r2;
        boolean z0;
        double $d0;
        net.sourceforge.plantuml.skin.rose.Rose $r3;
        net.sourceforge.plantuml.style.Style[] $r4;
        net.sourceforge.plantuml.cucadiagram.Display $r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.skin.ArrowComponent $r7;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        net.sourceforge.plantuml.skin.ArrowConfiguration r9, r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        z0 := @parameter1: boolean;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        r9 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.skin.ArrowConfiguration getArrowConfiguration()>();

        if z0 == 0 goto label1;

        r9 = virtualinvoke r9.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowConfiguration reverse()>();

     label1:
        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: double getArrowThickness()>();

        r10 = virtualinvoke r9.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowConfiguration withThickness(double)>($d0);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.Message: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display NULL>;

        $r7 = virtualinvoke $r3.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.ArrowComponent createComponentArrow(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r4, r10, $r6, $r5);

        return $r7;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.ArrowComponent $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.ArrowComponent: double getYPoint(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        return $d0;
    }

    protected final void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder $r2, $r5, $r7;
        net.sourceforge.plantuml.skin.ArrowComponent $r3;
        net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;
        java.awt.geom.Point2D $r8;
        double d0, d1, $d2, $d3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r9, $r11, $r13;
        net.sourceforge.plantuml.sequencediagram.Event $r10, $r12;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        d1 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: boolean isCreate()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void goCreate(double)>(d1);

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        r4 = (net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow) $r3;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r6 = virtualinvoke r4.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r8 = virtualinvoke r4.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: java.awt.geom.Point2D getStartPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r7, r6);

        d0 = virtualinvoke $r8.<java.awt.geom.Point2D: double getY()>();

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $d2 = d1 + d0;

        virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event,double)>($r10, $d2);

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $d3 = d1 + d0;

        virtualinvoke $r11.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event,double)>($r12, $d3);

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1, $r3;
        java.lang.String r2, r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.skin.ArrowComponent r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7, $r19;
        net.sourceforge.plantuml.real.Real $r8, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14, d15, d16;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10, $r17, $r20, $r30;
        net.sourceforge.plantuml.ugraphic.UGraphic $r11, $r21, r35, r37;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode $r12, $r14, $r25, $r27;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r13, $r15, $r18, $r26, $r28, $r34;
        net.sourceforge.plantuml.skin.Area $r16, $r29, r36;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r22, $r31;
        net.sourceforge.plantuml.graphic.VerticalAlignment $r23, $r32;
        net.sourceforge.plantuml.skin.Context2D $r24, $r33, $r38;
        int i0, i1, i2, i3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r35 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: java.lang.String getPart1Anchor()>();

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Message: java.lang.String getPart2Anchor()>();

        if r2 != null goto label1;

        if r4 == null goto label2;

     label1:
        return;

     label2:
        r5 = interfaceinvoke r35.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        r7 = interfaceinvoke r6.<net.sourceforge.plantuml.skin.ArrowComponent: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        d12 = interfaceinvoke $r8.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint2(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        d13 = interfaceinvoke $r9.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d0 = interfaceinvoke r6.<net.sourceforge.plantuml.skin.ArrowComponent: double getPosArrow(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d0);

        $r11 = interfaceinvoke r35.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: void drawMulticast(net.sourceforge.plantuml.ugraphic.UGraphic)>($r11);

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isReverse(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        if $z0 == 0 goto label5;

        $r26 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r25 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i0 = virtualinvoke $r26.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r25);

        $r28 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r27 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i1 = virtualinvoke $r28.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r27);

        if i0 <= 0 goto label3;

        d12 = d12 - 5.0;

     label3:
        $d8 = (double) i1;

        $d9 = 5.0 * $d8;

        d14 = d13 + $d9;

        $r29 = new net.sourceforge.plantuml.skin.Area;

        $d10 = d12 - d14;

        $d11 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r29.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d10, $d11);

        r36 = $r29;

        $r30 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d14);

        r37 = interfaceinvoke r35.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r30);

        $z2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isCreate()>();

        if $z2 == 0 goto label4;

        $r34 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r33 = (net.sourceforge.plantuml.skin.Context2D) r37;

        $r32 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment TOP>;

        $r31 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        virtualinvoke $r34.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void drawHead(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.graphic.VerticalAlignment,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r37, $r33, $r32, $r31);

     label4:
        goto label7;

     label5:
        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r12 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i2 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r12);

        $r15 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r14 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i3 = virtualinvoke $r15.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r14);

        if i3 <= 0 goto label6;

        i3 = i3 - 2;

     label6:
        $d1 = (double) i2;

        $d2 = 5.0 * $d1;

        d15 = d12 + $d2;

        $d3 = (double) i3;

        $d4 = 5.0 * $d3;

        d16 = d13 + $d4;

        $r16 = new net.sourceforge.plantuml.skin.Area;

        $d5 = d16 - d15;

        $d6 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r16.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d5, $d6);

        r36 = $r16;

        $r17 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d15);

        r37 = interfaceinvoke r35.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        $z1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isCreate()>();

        if $z1 == 0 goto label7;

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r19 = virtualinvoke $r16.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $d7 = virtualinvoke $r19.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r20 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d7);

        $r21 = interfaceinvoke r37.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r20);

        $r24 = (net.sourceforge.plantuml.skin.Context2D) r37;

        $r23 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment TOP>;

        $r22 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void drawHead(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.graphic.VerticalAlignment,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r21, $r24, $r23, $r22);

     label7:
        $r38 = (net.sourceforge.plantuml.skin.Context2D) r37;

        interfaceinvoke r6.<net.sourceforge.plantuml.skin.ArrowComponent: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r37, r36, $r38);

        return;
    }

    private void drawMulticast(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1, $r6;
        java.util.List $r2, $r7;
        int $i0;
        net.sourceforge.plantuml.ugraphic.UGraphic r3, $r19, r21;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.real.Real $r5, $r13;
        double d0, d1, $d2, $d3, $d4, $d5, d6;
        java.util.Iterator r8;
        boolean $z0, $z2;
        java.lang.Object $r9;
        net.sourceforge.plantuml.sequencediagram.Participant r10;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r11;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r12;
        byte $b1;
        net.sourceforge.plantuml.skin.ArrowComponent r14;
        net.sourceforge.plantuml.awt.geom.Dimension2D r15;
        net.sourceforge.plantuml.skin.Area $r16;
        net.sourceforge.plantuml.ugraphic.UTranslate $r18, $r20;
        net.sourceforge.plantuml.skin.Context2D $r22;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: java.util.List getMulticast()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        d0 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d6 = 2.0;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.Message: java.util.List getMulticast()>();

        r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.sequencediagram.Participant) $r9;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)>(r10);

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        d1 = interfaceinvoke $r13.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $b1 = d1 cmpg d0;

        if $b1 >= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        r14 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.ArrowComponent getComponentMulticast(net.sourceforge.plantuml.graphic.StringBounder,boolean)>(r4, $z2);

        r15 = interfaceinvoke r14.<net.sourceforge.plantuml.skin.ArrowComponent: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $r16 = new net.sourceforge.plantuml.skin.Area;

        $d2 = d1 - d0;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d4 = virtualinvoke r15.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r16.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d3, $d4);

        $d5 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1);

        $r18 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d5);

        $r19 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        $r20 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d6);

        r21 = interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r20);

        d6 = d6 + 2.0;

        $r22 = (net.sourceforge.plantuml.skin.Context2D) r21;

        interfaceinvoke r14.<net.sourceforge.plantuml.skin.ArrowComponent: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r21, $r16, $r22);

        goto label2;

     label5:
        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3, $r6;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4, $r7;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r5;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isCreate()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.awt.geom.Dimension2D getHeadPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $d0 = virtualinvoke $r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

     label1:
        return d1;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3, $r5, $r6, $r7;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double d0, $d1, $d2;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode $r8, $r11, $r13;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r9, $r12, $r14;
        net.sourceforge.plantuml.real.Real $r10, $r15, r16, r17, r18;
        int i0, i1, i2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.skin.ArrowComponent getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r16 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r17 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint2(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isReverse(net.sourceforge.plantuml.graphic.StringBounder)>($r7);

        if $z0 == 0 goto label2;

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r11 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i1 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r11);

        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r13 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i0 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r13);

        if i1 <= 0 goto label1;

        r16 = interfaceinvoke r16.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(-5.0);

     label1:
        $d1 = (double) i0;

        $d2 = $d1 * 5.0;

        r18 = interfaceinvoke r17.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d2);

        $r15 = interfaceinvoke r18.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(d0);

        interfaceinvoke r16.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r15);

        goto label4;

     label2:
        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r8 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i2 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r8);

        if i2 <= 0 goto label3;

        r17 = interfaceinvoke r17.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(-5.0);

     label3:
        $r10 = interfaceinvoke r16.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(d0);

        interfaceinvoke r17.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r10);

     label4:
        return;
    }

    private net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    private net.sourceforge.plantuml.real.Real getPoint2(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.sequencediagram.Message $r1;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r3, $r5, $r7;
        net.sourceforge.plantuml.real.Real $r4, $r6, $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.Message message>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Message: boolean isCreate()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isReverse(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        if $z1 == 0 goto label1;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r8;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r6;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r4;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r2, $r4;
        boolean $z0;
        net.sourceforge.plantuml.real.Real $r3, $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isReverse(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint2(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        return $r3;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r2, $r4;
        boolean $z0;
        net.sourceforge.plantuml.real.Real $r3, $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: boolean isReverse(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint1(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: net.sourceforge.plantuml.real.Real getPoint2(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile: double LIVE_DELTA_SIZE> = 5.0;

        return;
    }
}
