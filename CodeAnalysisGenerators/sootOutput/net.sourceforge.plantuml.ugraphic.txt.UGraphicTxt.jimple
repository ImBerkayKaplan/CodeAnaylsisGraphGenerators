public class net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt extends net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic implements net.sourceforge.plantuml.ugraphic.ClipContainer
{
    private final net.sourceforge.plantuml.asciiart.UmlCharArea charArea;

    protected net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic copyUGraphic()
    {
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt $r0, r1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        $r0 = new net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: void <init>(net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt)>(r1);

        return $r0;
    }

    private void <init>(net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt)
    {
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r0, r1;
        net.sourceforge.plantuml.asciiart.UmlCharArea $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic: void <init>(net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic)>(r1);

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea charArea>;

        r0.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea charArea> = $r2;

        return;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r0;
        net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity $r1;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r2;
        net.sourceforge.plantuml.asciiart.TextStringBounder $r3;
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl $r4;

        r0 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        $r2 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        $r1 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity: void <init>()>();

        $r3 = new net.sourceforge.plantuml.asciiart.TextStringBounder;

        specialinvoke $r3.<net.sourceforge.plantuml.asciiart.TextStringBounder: void <init>()>();

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.graphic.StringBounder)>($r2, $r1, $r3);

        $r4 = new net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        specialinvoke $r4.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea charArea> = $r4;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UShape)
    {
        net.sourceforge.plantuml.ugraphic.UShape r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.ugraphic.UText r1;
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r2;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        net.sourceforge.plantuml.graphic.FontConfiguration $r4;
        net.sourceforge.plantuml.graphic.FontStyle $r5;
        net.sourceforge.plantuml.asciiart.UmlCharArea $r6, $r8, $r10;
        java.lang.String $r7, $r9, $r11;

        r2 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        $z0 = r0 instanceof net.sourceforge.plantuml.ugraphic.UText;

        if $z0 == 0 goto label3;

        r1 = (net.sourceforge.plantuml.ugraphic.UText) r0;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: double getTranslateY()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UText: double getDescent(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d2 = $d0 + $d1;

        $i0 = (int) $d2;

        i1 = $i0 / 10;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UText: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()>();

        $r5 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE>;

        $z2 = virtualinvoke $r4.<net.sourceforge.plantuml.graphic.FontConfiguration: boolean containsStyle(net.sourceforge.plantuml.graphic.FontStyle)>($r5);

        if $z2 == 0 goto label1;

        $r8 = r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea charArea>;

        $i3 = specialinvoke r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: int getDx()>();

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UText: java.lang.String getText()>();

        $i4 = virtualinvoke $r9.<java.lang.String: int length()>();

        interfaceinvoke $r8.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(94, i1, $i3, $i4);

        $r10 = r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea charArea>;

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UText: java.lang.String getText()>();

        $i5 = specialinvoke r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: int getDx()>();

        $i6 = i1 + 1;

        interfaceinvoke $r10.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringLR(java.lang.String,int,int)>($r11, $i5, $i6);

        goto label2;

     label1:
        $r6 = r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea charArea>;

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UText: java.lang.String getText()>();

        $i2 = specialinvoke r2.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: int getDx()>();

        interfaceinvoke $r6.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringLR(java.lang.String,int,int)>($r7, $i2, i1);

     label2:
        return;

     label3:
        $z1 = r0 instanceof net.sourceforge.plantuml.ugraphic.UImage;

        if $z1 == 0 goto label4;

        return;

     label4:
        return;
    }

    public final net.sourceforge.plantuml.asciiart.UmlCharArea getCharArea()
    {
        net.sourceforge.plantuml.asciiart.TranslatedCharArea $r0;
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r1;
        net.sourceforge.plantuml.asciiart.UmlCharArea $r2;
        int $i0, $i1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        $r0 = new net.sourceforge.plantuml.asciiart.TranslatedCharArea;

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea charArea>;

        $i0 = specialinvoke r1.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: int getDx()>();

        $i1 = specialinvoke r1.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: int getDy()>();

        specialinvoke $r0.<net.sourceforge.plantuml.asciiart.TranslatedCharArea: void <init>(net.sourceforge.plantuml.asciiart.UmlCharArea,int,int)>($r2, $i0, $i1);

        return $r0;
    }

    private int getDy()
    {
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r0;
        double $d0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: double getTranslateY()>();

        $i0 = (int) $d0;

        return $i0;
    }

    private int getDx()
    {
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r0;
        double $d0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: double getTranslateX()>();

        $i0 = (int) $d0;

        return $i0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        return $r0;
    }

    public void writeToStream(java.io.OutputStream, java.lang.String, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.nio.charset.Charset $r1;
        java.io.PrintStream r2;
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt r3;
        net.sourceforge.plantuml.asciiart.UmlCharArea $r4;
        java.lang.String r5;
        int i0;

        r3 := @this: net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        r0 := @parameter0: java.io.OutputStream;

        r5 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r2 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.io.PrintStream createPrintStream(java.io.OutputStream,boolean,java.nio.charset.Charset)>(r0, 1, $r1);

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea getCharArea()>();

        interfaceinvoke $r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void print(java.io.PrintStream)>(r2);

        return;
    }
}
