class net.sourceforge.plantuml.graphic.TextBlockMarged extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.svek.WithPorts
{
    private final net.sourceforge.plantuml.graphic.TextBlock textBlock;
    private final double top;
    private final double right;
    private final double bottom;
    private final double left;

    void <init>(net.sourceforge.plantuml.graphic.TextBlock, double, double, double, double)
    {
        net.sourceforge.plantuml.graphic.TextBlockMarged r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockMarged;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r1;

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double top> = d0;

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double right> = d1;

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double bottom> = d2;

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double left> = d3;

        return;
    }

    void <init>(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft)
    {
        net.sourceforge.plantuml.graphic.TextBlockMarged r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockMarged;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r1;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double top> = $d0;

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getRight()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double right> = $d1;

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getBottom()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double bottom> = $d2;

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double left> = $d3;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockMarged r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockMarged;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double left>;

        $d0 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double right>;

        $d5 = $d1 + $d0;

        $d3 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double top>;

        $d2 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double bottom>;

        $d4 = $d3 + $d2;

        $r4 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r3, $d5, $d4);

        return $r4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.TextBlockMarged r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r8;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0, $d1, $d2;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.UEmpty $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.graphic.TextBlock $r7;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockMarged;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $r4 = new net.sourceforge.plantuml.ugraphic.UEmpty;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UEmpty: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r3);

        interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d2 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double left>;

        $d1 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double top>;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d2, $d1);

        $r7 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r8 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke $r7.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r8);

     label1:
        return;
    }

    public java.awt.geom.Rectangle2D getInnerPosition(java.lang.String, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.InnerStrategy)
    {
        net.sourceforge.plantuml.graphic.TextBlockMarged r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.InnerStrategy r3;
        net.sourceforge.plantuml.graphic.TextBlock $r4;
        java.awt.geom.Rectangle2D r5, $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockMarged;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.InnerStrategy;

        $r4 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: java.awt.geom.Rectangle2D getInnerPosition(java.lang.String,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.InnerStrategy)>(r1, r2, r3);

        if r5 != null goto label1;

        return null;

     label1:
        $r6 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d1 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double left>;

        $d0 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double top>;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, $d0);

        $r8 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: java.awt.geom.Rectangle2D apply(java.awt.geom.Rectangle2D)>(r5);

        return $r8;
    }

    public net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockMarged r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.svek.WithPorts $r3;
        net.sourceforge.plantuml.svek.Ports $r4, $r5;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockMarged;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r3 = (net.sourceforge.plantuml.svek.WithPorts) $r1;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.svek.WithPorts: net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = r0.<net.sourceforge.plantuml.graphic.TextBlockMarged: double top>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.svek.Ports: net.sourceforge.plantuml.svek.Ports translateY(double)>($d0);

        return $r5;
    }
}
