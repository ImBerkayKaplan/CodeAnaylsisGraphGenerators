public class net.sourceforge.plantuml.code.CompressionZlib extends java.lang.Object implements net.sourceforge.plantuml.code.Compression
{
    private static boolean USE_ZOPFLI;
    private static final int COMPRESSION_LEVEL;

    public void <init>()
    {
        net.sourceforge.plantuml.code.CompressionZlib r0;

        r0 := @this: net.sourceforge.plantuml.code.CompressionZlib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public byte[] compress(byte[])
    {
        boolean $z0, $z1;
        byte[] r0, r3, $r5, $r7;
        int $i0, $i1, i2, i3;
        java.util.zip.Deflater $r1;
        net.sourceforge.plantuml.code.CompressionZlib r4;
        net.sourceforge.plantuml.code.CompressionZopfliZlib $r6;

        r4 := @this: net.sourceforge.plantuml.code.CompressionZlib;

        r0 := @parameter0: byte[];

        $z0 = <net.sourceforge.plantuml.code.CompressionZlib: boolean USE_ZOPFLI>;

        if $z0 == 0 goto label1;

        $r6 = new net.sourceforge.plantuml.code.CompressionZopfliZlib;

        specialinvoke $r6.<net.sourceforge.plantuml.code.CompressionZopfliZlib: void <init>()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.code.CompressionZopfliZlib: byte[] compress(byte[])>(r0);

        return $r7;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        return null;

     label2:
        $i1 = lengthof r0;

        i3 = $i1 * 2;

        if i3 >= 1000 goto label3;

        i3 = 1000;

     label3:
        $r1 = new java.util.zip.Deflater;

        specialinvoke $r1.<java.util.zip.Deflater: void <init>(int,boolean)>(9, 1);

        virtualinvoke $r1.<java.util.zip.Deflater: void setInput(byte[])>(r0);

        virtualinvoke $r1.<java.util.zip.Deflater: void finish()>();

        r3 = newarray (byte)[i3];

        i2 = virtualinvoke $r1.<java.util.zip.Deflater: int deflate(byte[])>(r3);

        $z1 = virtualinvoke $r1.<java.util.zip.Deflater: boolean finished()>();

        if $z1 != 0 goto label4;

        return null;

     label4:
        $r5 = specialinvoke r4.<net.sourceforge.plantuml.code.CompressionZlib: byte[] copyArray(byte[],int)>(r3, i2);

        return $r5;
    }

    public net.sourceforge.plantuml.code.ByteArray decompress(byte[]) throws net.sourceforge.plantuml.code.NoPlantumlCompressionException
    {
        byte[] r0, r1, $r5;
        int $i0, $i1, $i2;
        net.sourceforge.plantuml.code.deflate.ByteBitInputStream $r2;
        java.io.ByteArrayInputStream $r3;
        net.sourceforge.plantuml.code.ByteArray $r6;
        java.lang.Exception $r7;
        net.sourceforge.plantuml.code.NoPlantumlCompressionException $r9;
        net.sourceforge.plantuml.code.CompressionZlib r10;

        r10 := @this: net.sourceforge.plantuml.code.CompressionZlib;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 + 256;

        r1 = newarray (byte)[$i1];

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        $r2 = new net.sourceforge.plantuml.code.deflate.ByteBitInputStream;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r2.<net.sourceforge.plantuml.code.deflate.ByteBitInputStream: void <init>(java.io.InputStream)>($r3);

     label1:
        $r5 = staticinvoke <net.sourceforge.plantuml.code.deflate.Decompressor: byte[] decompress(net.sourceforge.plantuml.code.deflate.BitInputStream)>($r2);

        $r6 = staticinvoke <net.sourceforge.plantuml.code.ByteArray: net.sourceforge.plantuml.code.ByteArray 'from'(byte[])>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r9 = new net.sourceforge.plantuml.code.NoPlantumlCompressionException;

        specialinvoke $r9.<net.sourceforge.plantuml.code.NoPlantumlCompressionException: void <init>(java.lang.Exception)>($r7);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private byte[] copyArray(byte[], int)
    {
        int i0;
        byte[] r0, r1;
        net.sourceforge.plantuml.code.CompressionZlib r2;

        r2 := @this: net.sourceforge.plantuml.code.CompressionZlib;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0);

        return r0;
    }

    static void <clinit>()
    {
        <net.sourceforge.plantuml.code.CompressionZlib: int COMPRESSION_LEVEL> = 9;

        <net.sourceforge.plantuml.code.CompressionZlib: boolean USE_ZOPFLI> = 0;

        return;
    }
}
