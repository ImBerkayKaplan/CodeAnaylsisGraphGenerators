public class net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.svek.TextBlockBackcolored
{
    private final net.sourceforge.plantuml.graphic.TextBlock textBlock;
    private final net.sourceforge.plantuml.ugraphic.comp.CompressionMode mode;
    private final net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform piecewiseAffineTransform;
    private net.sourceforge.plantuml.ugraphic.MinMax cachedMinMax;

    public static net.sourceforge.plantuml.graphic.TextBlock build(net.sourceforge.plantuml.ugraphic.comp.CompressionMode, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform)
    {
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder $r0;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode r1;
        net.sourceforge.plantuml.graphic.TextBlock r2;
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform r3;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.CompressionMode;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform;

        $r0 = new net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: void <init>(net.sourceforge.plantuml.ugraphic.comp.CompressionMode,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform)>(r1, r2, r3);

        return $r0;
    }

    private void <init>(net.sourceforge.plantuml.ugraphic.comp.CompressionMode, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform)
    {
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode r2;
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.CompressionMode;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r1;

        r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.comp.CompressionMode mode> = r2;

        r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform piecewiseAffineTransform> = r3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder r0;
        net.sourceforge.plantuml.ugraphic.comp.UGraphicCompressOnXorY $r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform $r3;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode $r4;
        net.sourceforge.plantuml.graphic.TextBlock $r5;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r5 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r1 = new net.sourceforge.plantuml.ugraphic.comp.UGraphicCompressOnXorY;

        $r4 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.comp.CompressionMode mode>;

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform piecewiseAffineTransform>;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.comp.UGraphicCompressOnXorY: void <init>(net.sourceforge.plantuml.ugraphic.comp.CompressionMode,net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform)>($r4, r2, $r3);

        interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r1);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder r0;
        net.sourceforge.plantuml.ugraphic.MinMax $r1, $r2, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.MinMax cachedMinMax>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.UDrawable,net.sourceforge.plantuml.graphic.StringBounder,boolean)>(r0, r3, 0);

        r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.MinMax cachedMinMax> = $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.MinMax cachedMinMax>;

        return $r2;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode $r4, $r5;
        net.sourceforge.plantuml.Dimension2DDouble $r6, $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform $r7, $r9;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.comp.CompressionMode mode>;

        $r4 = <net.sourceforge.plantuml.ugraphic.comp.CompressionMode: net.sourceforge.plantuml.ugraphic.comp.CompressionMode ON_X>;

        if $r5 != $r4 goto label1;

        $r8 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r9 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform piecewiseAffineTransform>;

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform: double transform(double)>($d3);

        $d5 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r8.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d4, $d5);

        return $r8;

     label1:
        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r7 = r0.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform piecewiseAffineTransform>;

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform: double transform(double)>($d1);

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d2);

        return $r6;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder;

        return null;
    }
}
