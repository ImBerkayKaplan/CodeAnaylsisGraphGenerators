public abstract class net.sourceforge.plantuml.command.SingleLineCommand2 extends java.lang.Object implements net.sourceforge.plantuml.command.Command
{
    private final net.sourceforge.plantuml.command.regex.IRegex pattern;
    private final boolean doTrim;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.command.regex.IRegex)
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;
        net.sourceforge.plantuml.command.regex.IRegex r1;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        r1 := @parameter0: net.sourceforge.plantuml.command.regex.IRegex;

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(boolean,net.sourceforge.plantuml.command.regex.IRegex)>(1, r1);

        return;
    }

    public void <init>(boolean, net.sourceforge.plantuml.command.regex.IRegex)
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;
        boolean z0;
        net.sourceforge.plantuml.command.regex.IRegex r1, $r3;
        java.lang.Object $r2;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        z0 := @parameter0: boolean;

        r1 := @parameter1: net.sourceforge.plantuml.command.regex.IRegex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean doTrim> = z0;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.command.regex.IRegex) $r2;

        r0.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.regex.IRegex pattern> = $r3;

        return;
    }

    public boolean syntaxWithFinalBracket()
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        return 0;
    }

    public java.lang.String[] getDescription()
    {
        java.lang.String[] $r0;
        net.sourceforge.plantuml.command.SingleLineCommand2 r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r1 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        $r0 = newarray (java.lang.String)[1];

        $r2 = r1.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.regex.IRegex pattern>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r0[0] = $r4;

        return $r0;
    }

    private java.lang.String myTrim(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;
        boolean $z0;
        net.sourceforge.plantuml.StringLocated r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $z0 = r0.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean doTrim>;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        return $r2;
    }

    private net.sourceforge.plantuml.StringLocated myTrim2(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;
        boolean $z0;
        net.sourceforge.plantuml.StringLocated r1, $r2;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $z0 = r0.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean doTrim>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        return $r2;

     label1:
        return r1;
    }

    public final net.sourceforge.plantuml.command.CommandControl isValid(net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.BlocLines r0, $r11;
        int $i0, $i1;
        net.sourceforge.plantuml.command.SingleLineCommand2 r1;
        boolean $z0, $z1, $z2, $z3, z4;
        net.sourceforge.plantuml.StringLocated $r2, r3, $r7;
        net.sourceforge.plantuml.command.regex.IRegex $r4;
        java.lang.String $r5, $r8, r19;
        java.lang.StringBuilder $r6, $r9, $r10;
        net.sourceforge.plantuml.command.CommandControl $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20;

        r1 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        r0 := @parameter0: net.sourceforge.plantuml.command.BlocLines;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 != 2 goto label1;

        $z3 = virtualinvoke r1.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean syntaxWithFinalBracket()>();

        if $z3 == 0 goto label1;

        $r18 = specialinvoke r1.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.CommandControl isValidBracket(net.sourceforge.plantuml.command.BlocLines)>(r0);

        return $r18;

     label1:
        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i1 == 1 goto label2;

        $r17 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r17;

     label2:
        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean isCommandForbidden()>();

        if $z0 == 0 goto label3;

        $r16 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r16;

     label3:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        r3 = specialinvoke r1.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.StringLocated myTrim2(net.sourceforge.plantuml.StringLocated)>($r2);

        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean syntaxWithFinalBracket()>();

        if $z1 == 0 goto label5;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("{");

        if $z2 != 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getAt(int)>(0);

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        r19 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines singleString(java.lang.String)>(r19);

        $r12 = virtualinvoke r1.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.CommandControl isValid(net.sourceforge.plantuml.command.BlocLines)>($r11);

        $r13 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK>;

        if $r12 != $r13 goto label4;

        $r15 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r15;

     label4:
        $r14 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r14;

     label5:
        $r4 = r1.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.regex.IRegex pattern>;

        z4 = interfaceinvoke $r4.<net.sourceforge.plantuml.command.regex.IRegex: boolean match(net.sourceforge.plantuml.StringLocated)>(r3);

        if z4 == 0 goto label6;

        virtualinvoke r1.<net.sourceforge.plantuml.command.SingleLineCommand2: void actionIfCommandValid()>();

     label6:
        if z4 == 0 goto label7;

        $r20 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK>;

        goto label8;

     label7:
        $r20 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

     label8:
        return $r20;
    }

    private net.sourceforge.plantuml.command.CommandControl isValidBracket(net.sourceforge.plantuml.command.BlocLines)
    {
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;
        net.sourceforge.plantuml.command.BlocLines r1, $r10;
        net.sourceforge.plantuml.StringLocated $r2, $r5;
        java.lang.String $r3, $r6, r9;
        java.lang.StringBuilder $r4, $r7, $r8;
        net.sourceforge.plantuml.command.CommandControl $r11, $r12;
        java.lang.AssertionError $r13, $r14;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        r1 := @parameter0: net.sourceforge.plantuml.command.BlocLines;

        $z0 = <net.sourceforge.plantuml.command.SingleLineCommand2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 == 2 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $z1 = <net.sourceforge.plantuml.command.SingleLineCommand2: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z3 = virtualinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean syntaxWithFinalBracket()>();

        if $z3 != 0 goto label2;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label2:
        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getAt(int)>(1);

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: java.lang.String myTrim(net.sourceforge.plantuml.StringLocated)>($r2);

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("{");

        if $z2 != 0 goto label3;

        $r12 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r12;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getAt(int)>(0);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines singleString(java.lang.String)>(r9);

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.CommandControl isValid(net.sourceforge.plantuml.command.BlocLines)>($r10);

        return $r11;
    }

    protected boolean isCommandForbidden()
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        return 0;
    }

    protected void actionIfCommandValid()
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        return;
    }

    public final net.sourceforge.plantuml.command.CommandExecutionResult execute(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.StringLocated r1, $r21, $r26;
        java.lang.String r2, $r12, $r17, $r22, $r25, $r27;
        net.sourceforge.plantuml.command.regex.IRegex $r3;
        net.sourceforge.plantuml.command.regex.RegexResult r4;
        net.sourceforge.plantuml.core.Diagram r5;
        net.sourceforge.plantuml.LineLocation $r6;
        net.sourceforge.plantuml.command.CommandExecutionResult $r7, $r8, $r13, $r18, $r31;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r15, $r16, $r20, $r23, $r24;
        java.lang.IllegalArgumentException $r19;
        int $i0, $i1;
        java.lang.AssertionError $r28;
        net.sourceforge.plantuml.ugraphic.color.NoSuchColorException $r29;
        net.sourceforge.plantuml.command.BlocLines r32;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        r5 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r32 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean syntaxWithFinalBracket()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r32.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 != 2 goto label2;

        $z3 = <net.sourceforge.plantuml.command.SingleLineCommand2: boolean $assertionsDisabled>;

        if $z3 != 0 goto label1;

        $r26 = virtualinvoke r32.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getAt(int)>(1);

        $r27 = specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: java.lang.String myTrim(net.sourceforge.plantuml.StringLocated)>($r26);

        $z4 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("{");

        if $z4 != 0 goto label1;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label1:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r32.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r32 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines singleString(java.lang.String)>($r25);

     label2:
        $i1 = virtualinvoke r32.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i1 == 1 goto label3;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r19;

     label3:
        r1 = virtualinvoke r32.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: java.lang.String myTrim(net.sourceforge.plantuml.StringLocated)>(r1);

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: boolean isForbidden(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label4;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Syntax error: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r17);

        return $r18;

     label4:
        $r3 = r0.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.regex.IRegex pattern>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.command.regex.IRegex: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>(r2);

        if r4 != null goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse line ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r12);

        return $r13;

     label5:
        $z2 = r5 instanceof net.sourceforge.plantuml.error.PSystemError;

        if $z2 == 0 goto label6;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("PSystemError cannot be cast");

        return $r8;

     label6:
        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>(r5, $r6, r4);

     label7:
        return $r7;

     label8:
        $r29 := @caughtexception;

        $r31 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult badColor()>();

        return $r31;

        catch net.sourceforge.plantuml.ugraphic.color.NoSuchColorException from label6 to label7 with label8;
    }

    protected boolean isForbidden(java.lang.CharSequence)
    {
        net.sourceforge.plantuml.command.SingleLineCommand2 r0;
        java.lang.CharSequence r1;

        r0 := @this: net.sourceforge.plantuml.command.SingleLineCommand2;

        r1 := @parameter0: java.lang.CharSequence;

        return 0;
    }

    protected abstract net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/command/SingleLineCommand2;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.command.SingleLineCommand2: boolean $assertionsDisabled> = $z1;

        return;
    }
}
