class net.sourceforge.plantuml.zopfli.BlockSplitter extends java.lang.Object
{

    void <init>()
    {
        net.sourceforge.plantuml.zopfli.BlockSplitter r0;

        r0 := @this: net.sourceforge.plantuml.zopfli.BlockSplitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int split(net.sourceforge.plantuml.zopfli.Cookie, byte[], int, int)
    {
        net.sourceforge.plantuml.zopfli.Cookie r0;
        net.sourceforge.plantuml.zopfli.LzStore r1;
        byte[] r2;
        int i0, i1, $i2, i3, i4, $i6, i7, i8, i9;
        char[] $r3, $r4, r5, r6;
        int[] r7;
        char $c5, $c10;

        r0 := @parameter0: net.sourceforge.plantuml.zopfli.Cookie;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = r0.<net.sourceforge.plantuml.zopfli.Cookie: net.sourceforge.plantuml.zopfli.LzStore store1>;

        virtualinvoke r1.<net.sourceforge.plantuml.zopfli.LzStore: void reset()>();

        staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: void greedy(net.sourceforge.plantuml.zopfli.Cookie,net.sourceforge.plantuml.zopfli.LongestMatchCache,byte[],int,int,net.sourceforge.plantuml.zopfli.LzStore)>(r0, null, r2, i0, i1, r1);

        $r4 = r1.<net.sourceforge.plantuml.zopfli.LzStore: char[] litLens>;

        $r3 = r1.<net.sourceforge.plantuml.zopfli.LzStore: char[] dists>;

        $i2 = r1.<net.sourceforge.plantuml.zopfli.LzStore: int size>;

        i3 = staticinvoke <net.sourceforge.plantuml.zopfli.BlockSplitter: int splitLz(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int)>(r0, $r4, $r3, $i2);

        i7 = i0;

        r5 = r1.<net.sourceforge.plantuml.zopfli.LzStore: char[] dists>;

        r6 = r1.<net.sourceforge.plantuml.zopfli.LzStore: char[] litLens>;

        r7 = r0.<net.sourceforge.plantuml.zopfli.Cookie: int[] splitPoints>;

        r7[0] = i0;

        i8 = 0;

        i9 = 1;

     label1:
        if i9 > i3 goto label6;

        i4 = r7[i9];

     label2:
        if i8 >= i4 goto label5;

        $i6 = i7;

        $c5 = r5[i8];

        if $c5 != 0 goto label3;

        $c10 = 1;

        goto label4;

     label3:
        $c10 = r6[i8];

     label4:
        i7 = $i6 + $c10;

        i8 = i8 + 1;

        goto label2;

     label5:
        r7[i9] = i7;

        i9 = i9 + 1;

        goto label1;

     label6:
        return i3;
    }

    static int splitLz(net.sourceforge.plantuml.zopfli.Cookie, char[], char[], int)
    {
        net.sourceforge.plantuml.zopfli.Cookie r0;
        int[] r1, r2;
        char[] r3, r4;
        int i0, $i1, i3, i4, i5, $i6, $i7, $i8, i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23, i24;
        boolean z0;

        r0 := @parameter0: net.sourceforge.plantuml.zopfli.Cookie;

        r3 := @parameter1: char[];

        r4 := @parameter2: char[];

        i0 := @parameter3: int;

        r1 = r0.<net.sourceforge.plantuml.zopfli.Cookie: int[] splitPoints>;

        r2 = r0.<net.sourceforge.plantuml.zopfli.Cookie: int[] splitSize>;

        r1[0] = 0;

        $i1 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: int calculateBlockSize(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r3, r4, 0, i0);

        r2[0] = $i1;

        r1[1] = i0;

        r2[1] = -1;

        i19 = 1;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        if i0 >= 10 goto label01;

        return 1;

     label01:
        i20 = 0;

        i21 = i0;

        i22 = 0;

     label02:
        if i19 >= 15 goto label11;

        i3 = staticinvoke <net.sourceforge.plantuml.zopfli.BlockSplitter: int findMinimum(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r3, r4, i20, i21);

        i4 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: int calculateBlockSize(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r3, r4, i20, i3);

        i5 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: int calculateBlockSize(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r3, r4, i3, i21);

        $i7 = i4 + i5;

        $i6 = r2[i22];

        if $i7 > $i6 goto label03;

        $i14 = i20 + 1;

        if i3 == $i14 goto label03;

        if i3 != i21 goto label04;

     label03:
        r2[i22] = -1;

        goto label05;

     label04:
        r2[i22] = i4;

        i19 = i19 + 1;

        i22 = i22 + 1;

        $i16 = i22 + 1;

        $i15 = i19 - i22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i22, r1, $i16, $i15);

        $i18 = i22 + 1;

        $i17 = i19 - i22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i22, r2, $i18, $i17);

        r1[i22] = i3;

        r2[i22] = i5;

     label05:
        i23 = 0;

        z0 = 0;

        i24 = 0;

     label06:
        if i24 >= i19 goto label08;

        i9 = r1[i24];

        $i10 = i24 + 1;

        i11 = r1[$i10];

        $i12 = r2[i24];

        if $i12 == -1 goto label07;

        $i13 = i11 - i9;

        if $i13 <= i23 goto label07;

        i20 = i9;

        i21 = i11;

        z0 = 1;

        i23 = i11 - i9;

        i22 = i24;

     label07:
        i24 = i24 + 1;

        goto label06;

     label08:
        if z0 != 0 goto label09;

        goto label11;

     label09:
        $i8 = i21 - i20;

        if $i8 >= 10 goto label10;

        goto label11;

     label10:
        goto label02;

     label11:
        return i19;
    }

    private static int findMinimum(net.sourceforge.plantuml.zopfli.Cookie, char[], char[], int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i28, i29, i30, i31, i32, i33, $i34, $i35;
        net.sourceforge.plantuml.zopfli.Cookie r0;
        char[] r1, r2;
        int[] r3, r4;

        r0 := @parameter0: net.sourceforge.plantuml.zopfli.Cookie;

        r1 := @parameter1: char[];

        r2 := @parameter2: char[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i21 = i0 + 1;

        i22 = i1;

        $i2 = i1 - i21;

        if $i2 >= 1024 goto label04;

        i23 = 2147483647;

        i24 = i21;

        i25 = i21;

     label01:
        if i25 >= i1 goto label03;

        $i19 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: int calculateBlockSize(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r1, r2, i0, i25);

        $i20 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: int calculateBlockSize(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r1, r2, i25, i1);

        i26 = $i19 + $i20;

        if i26 >= i23 goto label02;

        i23 = i26;

        i24 = i25;

     label02:
        i25 = i25 + 1;

        goto label01;

     label03:
        return i24;

     label04:
        r3 = r0.<net.sourceforge.plantuml.zopfli.Cookie: int[] p>;

        r4 = r0.<net.sourceforge.plantuml.zopfli.Cookie: int[] vp>;

        i28 = 2147483647;

        i29 = i21;

     label05:
        $i3 = i22 - i21;

        if $i3 > 9 goto label06;

        goto label17;

     label06:
        i30 = 0;

     label07:
        if i30 >= 9 goto label08;

        $i11 = i30 + 1;

        $i9 = i22 - i21;

        $i8 = 9 + 1;

        $i10 = $i9 / $i8;

        $i12 = $i11 * $i10;

        $i13 = i21 + $i12;

        r3[i30] = $i13;

        $i14 = r3[i30];

        $i15 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: int calculateBlockSize(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r1, r2, i0, $i14);

        $i16 = r3[i30];

        $i17 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate: int calculateBlockSize(net.sourceforge.plantuml.zopfli.Cookie,char[],char[],int,int)>(r0, r1, r2, $i16, i1);

        $i18 = $i15 + $i17;

        r4[i30] = $i18;

        i30 = i30 + 1;

        goto label07;

     label08:
        i31 = 0;

        i32 = r4[0];

        i33 = 1;

     label09:
        if i33 >= 9 goto label11;

        $i7 = r4[i33];

        if $i7 >= i32 goto label10;

        i32 = r4[i33];

        i31 = i33;

     label10:
        i33 = i33 + 1;

        goto label09;

     label11:
        if i32 <= i28 goto label12;

        goto label17;

     label12:
        if i31 != 0 goto label13;

        $i34 = i21;

        goto label14;

     label13:
        $i4 = i31 - 1;

        $i34 = r3[$i4];

     label14:
        i21 = $i34;

        $i5 = 9 - 1;

        if i31 != $i5 goto label15;

        $i35 = i22;

        goto label16;

     label15:
        $i6 = i31 + 1;

        $i35 = r3[$i6];

     label16:
        i22 = $i35;

        i29 = r3[i31];

        i28 = i32;

        goto label05;

     label17:
        return i29;
    }
}
