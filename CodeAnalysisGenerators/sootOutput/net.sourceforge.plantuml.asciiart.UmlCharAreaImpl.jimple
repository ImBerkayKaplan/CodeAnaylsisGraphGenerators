public class net.sourceforge.plantuml.asciiart.UmlCharAreaImpl extends net.sourceforge.plantuml.asciiart.BasicCharAreaImpl implements net.sourceforge.plantuml.asciiart.UmlCharArea
{

    public void <init>()
    {
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r0;

        r0 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharAreaImpl: void <init>()>();

        return;
    }

    public void drawBoxSimple(int, int, int, int)
    {
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;

        r0 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i6 := @parameter3: int;

        $i5 = i1 + 1;

        $i3 = i1 + i2;

        $i4 = $i3 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int)>(45, i0, $i5, $i4);

        $i7 = i0 + i6;

        $i11 = $i7 - 1;

        $i10 = i1 + 1;

        $i8 = i1 + i2;

        $i9 = $i8 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int)>(45, $i11, $i10, $i9);

        $i14 = i0 + 1;

        $i12 = i0 + i6;

        $i13 = $i12 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(124, i1, $i14, $i13);

        $i15 = i1 + i2;

        $i19 = $i15 - 1;

        $i18 = i0 + 1;

        $i16 = i0 + i6;

        $i17 = $i16 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(124, $i19, $i18, $i17);

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(44, i1, i0);

        $i20 = i1 + i2;

        $i21 = $i20 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(46, $i21, i0);

        $i22 = i0 + i6;

        $i23 = $i22 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(96, i1, $i23);

        $i24 = i1 + i2;

        $i27 = $i24 - 1;

        $i25 = i0 + i6;

        $i26 = $i25 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(39, $i27, $i26);

        return;
    }

    public void drawBoxSimpleUnicode(int, int, int, int)
    {
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;

        r0 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i6 := @parameter3: int;

        $i5 = i1 + 1;

        $i3 = i1 + i2;

        $i4 = $i3 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int)>(9472, i0, $i5, $i4);

        $i7 = i0 + i6;

        $i11 = $i7 - 1;

        $i10 = i1 + 1;

        $i8 = i1 + i2;

        $i9 = $i8 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int)>(9472, $i11, $i10, $i9);

        $i14 = i0 + 1;

        $i12 = i0 + i6;

        $i13 = $i12 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(9474, i1, $i14, $i13);

        $i15 = i1 + i2;

        $i19 = $i15 - 1;

        $i18 = i0 + 1;

        $i16 = i0 + i6;

        $i17 = $i16 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(9474, $i19, $i18, $i17);

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9484, i1, i0);

        $i20 = i1 + i2;

        $i21 = $i20 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9488, $i21, i0);

        $i22 = i0 + i6;

        $i23 = $i22 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9492, i1, $i23);

        $i24 = i1 + i2;

        $i27 = $i24 - 1;

        $i25 = i0 + i6;

        $i26 = $i25 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9496, $i27, $i26);

        return;
    }

    public void drawShape(net.sourceforge.plantuml.asciiart.AsciiShape, int, int)
    {
        net.sourceforge.plantuml.asciiart.AsciiShape r0;
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r1;
        int i0, i1;

        r1 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        r0 := @parameter0: net.sourceforge.plantuml.asciiart.AsciiShape;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.AsciiShape: void draw(net.sourceforge.plantuml.asciiart.BasicCharArea,int,int)>(r1, i0, i1);

        return;
    }

    public void drawStringsLRSimple(java.util.Collection, int, int)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r3;
        java.lang.String $r4;
        int i0, $i1, i2, i3;
        net.sourceforge.plantuml.sequencediagram.MessageNumber $r5;
        java.lang.CharSequence r6;

        r3 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        r0 := @parameter0: java.util.Collection;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i3 = 0;

        if i2 >= 0 goto label1;

        i2 = 0;

     label1:
        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.CharSequence) $r2;

        $z0 = r6 instanceof net.sourceforge.plantuml.sequencediagram.MessageNumber;

        if $z0 == 0 goto label3;

        $r5 = (net.sourceforge.plantuml.sequencediagram.MessageNumber) r6;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.MessageNumber: java.lang.String getNumberRaw()>();

     label3:
        $r4 = interfaceinvoke r6.<java.lang.CharSequence: java.lang.String toString()>();

        $i1 = i0 + i3;

        virtualinvoke r3.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawStringLR(java.lang.String,int,int)>($r4, i2, $i1);

        i3 = i3 + 1;

        goto label2;

     label4:
        return;
    }

    public void drawStringsLRUnicode(java.util.Collection, int, int)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        java.lang.CharSequence r3;
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r4;
        java.lang.String $r5;
        int i0, $i1, i2, i3;
        boolean $z0;

        r4 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        r0 := @parameter0: java.util.Collection;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i3 = 0;

        if i2 >= 0 goto label1;

        i2 = 0;

     label1:
        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.CharSequence) $r2;

        $r5 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>();

        $i1 = i0 + i3;

        virtualinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawStringLR(java.lang.String,int,int)>($r5, i2, $i1);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public void drawNoteSimple(int, int, int, int)
    {
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;

        r0 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i6 := @parameter3: int;

        $i5 = i1 + 1;

        $i3 = i1 + i2;

        $i4 = $i3 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int)>(45, i0, $i5, $i4);

        $i7 = i0 + i6;

        $i11 = $i7 - 1;

        $i10 = i1 + 1;

        $i8 = i1 + i2;

        $i9 = $i8 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int)>(45, $i11, $i10, $i9);

        $i14 = i0 + 1;

        $i12 = i0 + i6;

        $i13 = $i12 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(124, i1, $i14, $i13);

        $i15 = i1 + i2;

        $i19 = $i15 - 1;

        $i18 = i0 + 1;

        $i16 = i0 + i6;

        $i17 = $i16 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(124, $i19, $i18, $i17);

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(44, i1, i0);

        $i20 = i1 + i2;

        $i21 = $i20 - 3;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawStringLR(java.lang.String,int,int)>("!. ", $i21, i0);

        $i22 = i1 + i2;

        $i24 = $i22 - 3;

        $i23 = i0 + 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawStringLR(java.lang.String,int,int)>("|_\\", $i24, $i23);

        $i25 = i0 + i6;

        $i26 = $i25 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(96, i1, $i26);

        $i27 = i1 + i2;

        $i30 = $i27 - 1;

        $i28 = i0 + i6;

        $i29 = $i28 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(39, $i30, $i29);

        return;
    }

    public void drawNoteSimpleUnicode(int, int, int, int)
    {
        net.sourceforge.plantuml.asciiart.UmlCharAreaImpl r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;

        r0 := @this: net.sourceforge.plantuml.asciiart.UmlCharAreaImpl;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        i9 := @parameter3: int;

        $i2 = i0 + i1;

        $i5 = $i2 - 2;

        $i4 = i3 + 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9617, $i5, $i4);

        $i8 = i0 + 1;

        $i6 = i0 + i1;

        $i7 = $i6 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int,char,char)>(9552, i3, $i8, $i7, 9474, 9575);

        $i10 = i3 + i9;

        $i14 = $i10 - 1;

        $i13 = i0 + 1;

        $i11 = i0 + i1;

        $i12 = $i11 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawHLine(char,int,int,int,char,char)>(9552, $i14, $i13, $i12, 9474, 9572);

        $i17 = i3 + 1;

        $i15 = i3 + i9;

        $i16 = $i15 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(9553, i0, $i17, $i16);

        $i18 = i0 + i1;

        $i22 = $i18 - 1;

        $i21 = i3 + 1;

        $i19 = i3 + i9;

        $i20 = $i19 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawVLine(char,int,int,int)>(9553, $i22, $i21, $i20);

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9556, i0, i3);

        $i23 = i0 + i1;

        $i24 = $i23 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9559, $i24, i3);

        $i25 = i3 + i9;

        $i26 = $i25 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9562, i0, $i26);

        $i27 = i0 + i1;

        $i30 = $i27 - 1;

        $i28 = i3 + i9;

        $i29 = $i28 - 1;

        virtualinvoke r0.<net.sourceforge.plantuml.asciiart.UmlCharAreaImpl: void drawChar(char,int,int)>(9565, $i30, $i29);

        return;
    }
}
