public class net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock;

        $r1 = staticinvoke <net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r8;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14;
        net.sourceforge.plantuml.command.regex.RegexOptional $r6;
        net.sourceforge.plantuml.command.regex.RegexConcat $r7, $r15;

        $r0 = class "Lnet/sourceforge/plantuml/compositediagram/command/CommandCreateBlock;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("block");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r7 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r8 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY", "[%g]([^%g]+)[%g]");

        $r8[0] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r8[1] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r8[2] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r8[3] = $r12;

        specialinvoke $r7.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r8);

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r7);

        $r2[3] = $r6;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE", "([%pLN_.]+)");

        $r2[4] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[5] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r15;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.compositediagram.CompositeDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r10;
        net.sourceforge.plantuml.compositediagram.CompositeDiagram r2;
        net.sourceforge.plantuml.cucadiagram.Code r3;
        net.sourceforge.plantuml.cucadiagram.Ident $r4;
        net.sourceforge.plantuml.cucadiagram.IEntity r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6;
        net.sourceforge.plantuml.command.CommandExecutionResult $r7;
        net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock r8;
        net.sourceforge.plantuml.LineLocation r9;

        r8 := @this: net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock;

        r2 := @parameter0: net.sourceforge.plantuml.compositediagram.CompositeDiagram;

        r9 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r10 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DISPLAY", 0);

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("CODE", 0);

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.compositediagram.CompositeDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r1);

        if r10 != null goto label1;

        r10 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

     label1:
        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.compositediagram.CompositeDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        r5 = virtualinvoke r2.<net.sourceforge.plantuml.compositediagram.CompositeDiagram: net.sourceforge.plantuml.cucadiagram.IEntity getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>($r4, r3, null, null);

        $r6 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r10);

        interfaceinvoke r5.<net.sourceforge.plantuml.cucadiagram.IEntity: void setDisplay(net.sourceforge.plantuml.cucadiagram.Display)>($r6);

        $r7 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r7;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.compositediagram.CompositeDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.compositediagram.CompositeDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.compositediagram.CompositeDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
