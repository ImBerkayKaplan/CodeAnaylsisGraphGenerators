class net.sourceforge.plantuml.real.RealDelta extends net.sourceforge.plantuml.real.RealMoveable
{
    private final net.sourceforge.plantuml.real.Real delegated;
    private final double diff;

    void <init>(net.sourceforge.plantuml.real.Real, double)
    {
        net.sourceforge.plantuml.real.RealDelta r0;
        net.sourceforge.plantuml.real.Real r1;
        net.sourceforge.plantuml.real.AbstractReal $r2;
        net.sourceforge.plantuml.real.RealLine $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9, $r10;
        java.lang.String $r6, $r11;
        double d0;

        r0 := @this: net.sourceforge.plantuml.real.RealDelta;

        r1 := @parameter0: net.sourceforge.plantuml.real.Real;

        d0 := @parameter1: double;

        $r2 = (net.sourceforge.plantuml.real.AbstractReal) r1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.real.AbstractReal: net.sourceforge.plantuml.real.RealLine getLine()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Delegated {");

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.real.Real: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} d=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.real.RealMoveable: void <init>(net.sourceforge.plantuml.real.RealLine,java.lang.String)>($r3, $r11);

        r0.<net.sourceforge.plantuml.real.RealDelta: net.sourceforge.plantuml.real.Real delegated> = r1;

        r0.<net.sourceforge.plantuml.real.RealDelta: double diff> = d0;

        return;
    }

    double getCurrentValueInternal()
    {
        net.sourceforge.plantuml.real.RealDelta r0;
        net.sourceforge.plantuml.real.Real $r1;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.real.RealDelta;

        $r1 = r0.<net.sourceforge.plantuml.real.RealDelta: net.sourceforge.plantuml.real.Real delegated>;

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d1 = r0.<net.sourceforge.plantuml.real.RealDelta: double diff>;

        $d2 = $d0 + $d1;

        return $d2;
    }

    public net.sourceforge.plantuml.real.Real addAtLeast(double)
    {
        net.sourceforge.plantuml.real.RealDelta $r0, r1;
        double d0, $d1;
        net.sourceforge.plantuml.real.Real $r2, $r3;

        r1 := @this: net.sourceforge.plantuml.real.RealDelta;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.real.RealDelta;

        $r2 = r1.<net.sourceforge.plantuml.real.RealDelta: net.sourceforge.plantuml.real.Real delegated>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addAtLeast(double)>(d0);

        $d1 = r1.<net.sourceforge.plantuml.real.RealDelta: double diff>;

        specialinvoke $r0.<net.sourceforge.plantuml.real.RealDelta: void <init>(net.sourceforge.plantuml.real.Real,double)>($r3, $d1);

        return $r0;
    }

    public void ensureBiggerThan(net.sourceforge.plantuml.real.Real)
    {
        net.sourceforge.plantuml.real.RealDelta r0, $r1;
        net.sourceforge.plantuml.real.Real r2, $r3;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.real.RealDelta;

        r2 := @parameter0: net.sourceforge.plantuml.real.Real;

        $r3 = r0.<net.sourceforge.plantuml.real.RealDelta: net.sourceforge.plantuml.real.Real delegated>;

        $r1 = new net.sourceforge.plantuml.real.RealDelta;

        $d0 = r0.<net.sourceforge.plantuml.real.RealDelta: double diff>;

        $d1 = neg $d0;

        specialinvoke $r1.<net.sourceforge.plantuml.real.RealDelta: void <init>(net.sourceforge.plantuml.real.Real,double)>(r2, $d1);

        interfaceinvoke $r3.<net.sourceforge.plantuml.real.Real: void ensureBiggerThan(net.sourceforge.plantuml.real.Real)>($r1);

        return;
    }

    void move(double)
    {
        net.sourceforge.plantuml.real.RealDelta r0;
        net.sourceforge.plantuml.real.Real $r1;
        double d0;
        net.sourceforge.plantuml.real.RealMoveable $r2;

        r0 := @this: net.sourceforge.plantuml.real.RealDelta;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.real.RealDelta: net.sourceforge.plantuml.real.Real delegated>;

        $r2 = (net.sourceforge.plantuml.real.RealMoveable) $r1;

        virtualinvoke $r2.<net.sourceforge.plantuml.real.RealMoveable: void move(double)>(d0);

        return;
    }
}
