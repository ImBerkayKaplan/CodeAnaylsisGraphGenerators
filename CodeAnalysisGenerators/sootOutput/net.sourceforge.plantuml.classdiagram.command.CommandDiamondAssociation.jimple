public class net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation;

        $r1 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r6, $r7;
        net.sourceforge.plantuml.command.regex.RegexConcat $r8;

        $r0 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandDiamondAssociation;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\<\\>");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE", "([%pLN_.]+)");

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[4] = $r7;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r8;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, $r11, $r13;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r2;
        net.sourceforge.plantuml.cucadiagram.Ident r3;
        boolean $z0, $z1, $z3;
        net.sourceforge.plantuml.cucadiagram.Code r4, $r17;
        net.sourceforge.plantuml.cucadiagram.LeafType $r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6;
        net.sourceforge.plantuml.command.CommandExecutionResult $r8, $r14;
        java.lang.StringBuilder $r9, $r10, $r12;
        net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation r15;
        net.sourceforge.plantuml.LineLocation r16;

        r15 := @this: net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation;

        r2 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        r16 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("CODE", 0);

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z0 == 0 goto label1;

        $r17 = r3;

        goto label2;

     label1:
        $r17 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r1);

     label2:
        r4 = $r17;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z1 == 0 goto label3;

        $z3 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean leafExistSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r3);

        goto label4;

     label3:
        $z3 = virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean leafExist(net.sourceforge.plantuml.cucadiagram.Code)>($r17);

     label4:
        if $z3 == 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already existing : ");

        $r11 = interfaceinvoke r4.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r13);

        return $r14;

     label5:
        $r6 = <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display NULL>;

        $r5 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType ASSOCIATION>;

        virtualinvoke r2.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, r4, $r6, $r5, null);

        $r8 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r8;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.classdiagram.ClassDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.classdiagram.ClassDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
