public class net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment extends net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator
{
    private final java.util.List logs;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator, java.util.List)
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment r0;
        net.sourceforge.plantuml.tim.iterator.CodeIterator r1;
        java.util.List r2;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment;

        r1 := @parameter0: net.sourceforge.plantuml.tim.iterator.CodeIterator;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator)>(r1);

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment: java.util.List logs> = r2;

        return;
    }

    public net.sourceforge.plantuml.StringLocated peek() throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment r0;
        net.sourceforge.plantuml.tim.iterator.CodeIterator $r1;
        net.sourceforge.plantuml.StringLocated r2;
        net.sourceforge.plantuml.tim.TLineType $r3, $r4, $r6, $r7;
        boolean $z0;
        java.lang.AssertionError $r5;
        java.util.List $r8;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if r2 != null goto label2;

        return null;

     label2:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r4 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_SIMPLE>;

        if $r3 != $r4 goto label3;

        $r8 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment: java.util.List logs>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r2);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment: void next()>();

        goto label1;

     label3:
        $z0 = <net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        if r2 == null goto label4;

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r7 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_SIMPLE>;

        if $r6 != $r7 goto label5;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        return r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/iterator/CodeIteratorShortComment;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment: boolean $assertionsDisabled> = $z1;

        return;
    }
}
