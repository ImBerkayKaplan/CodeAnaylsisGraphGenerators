public class net.sourceforge.plantuml.project.lang.Verbs extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.project.lang.Verbs r0;

        r0 := @this: net.sourceforge.plantuml.project.lang.Verbs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex are()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("are");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex areColored()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("are[%s]+colou?red");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex displayOnSameRowAs()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("displays?[%s]+on[%s]+same[%s]+row[%s]+as");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex ends()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("ends");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex ends2()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("ends[%s]*(the[%s]*|on[%s]*|at[%s]*)*");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex happens()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("happens?[%s]*(at[%s]*|the[%s]*|on[%s]*)*");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex pauses()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("pauses?[%s]*(at[%s]*|the[%s]*|on[%s]*|from[%s]*)*");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex isDeleted()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("is[%s]+deleted");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex is()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("is");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex isColored()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("is[%s]+colou?red");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex isColoredForCompletion()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("is[%s]+colou?red[%s]+for[%s]+completion");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex isOff()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1, $r7;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        net.sourceforge.plantuml.command.regex.RegexOr $r6;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("is");

        $r1[0] = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("off");

        $r1[2] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[3] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r7 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("on");

        $r7[0] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("for");

        $r7[1] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("the");

        $r7[2] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("at");

        $r7[3] = $r11;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r7);

        $r1[4] = $r6;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex isOn()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1, $r7;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        net.sourceforge.plantuml.command.regex.RegexOr $r6;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("is");

        $r1[0] = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("on");

        $r1[2] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[3] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r7 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("on");

        $r7[0] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("for");

        $r7[1] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("the");

        $r7[2] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("at");

        $r7[3] = $r11;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r7);

        $r1[4] = $r6;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex isOrAre()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("(is|are)");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex isOrAreNamed()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("(is|are)[%s]+named");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex lasts()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("lasts");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex linksTo()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("links to");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex occurs()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("occurs?");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex starts3()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("starts[%s]*(the[%s]*|on[%s]*|at[%s]*)*");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex starts2()
    {
        net.sourceforge.plantuml.command.regex.RegexLeaf $r0;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("starts");

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex starts()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1, $r8;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r4, $r5, $r9, $r10, $r11, $r12;
        net.sourceforge.plantuml.command.regex.RegexOptional $r3, $r6;
        net.sourceforge.plantuml.command.regex.RegexOr $r7;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("start");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("s");

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r4);

        $r1[1] = $r3;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r1[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r7 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r8 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("on");

        $r8[0] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("for");

        $r8[1] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("the");

        $r8[2] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("at");

        $r8[3] = $r12;

        specialinvoke $r7.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r8);

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r7);

        $r1[3] = $r6;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }
}
