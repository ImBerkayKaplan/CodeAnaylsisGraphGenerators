public class net.sourceforge.plantuml.svek.image.EntityImageObject extends net.sourceforge.plantuml.svek.AbstractEntityImage implements net.sourceforge.plantuml.creole.Stencil, net.sourceforge.plantuml.svek.WithPorts
{
    private final net.sourceforge.plantuml.graphic.TextBlock name;
    private final net.sourceforge.plantuml.graphic.TextBlock stereo;
    private final net.sourceforge.plantuml.graphic.TextBlock fields;
    private final net.sourceforge.plantuml.Url url;
    private final double roundCorner;
    private final net.sourceforge.plantuml.LineConfigurable lineConfig;
    private int marginEmptyFieldsOrMethod;
    private int xMarginCircle;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.PortionShower)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2, $r6, $r34, $r39, $r41;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3, $r18;
        net.sourceforge.plantuml.CornerParam $r4;
        double $d0, $d1;
        boolean $z0, z1, $z2;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5, $r33, r43;
        net.sourceforge.plantuml.FontParam $r7, $r17, $r35;
        net.sourceforge.plantuml.cucadiagram.Display $r8, $r15, $r32;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r9, $r36;
        net.sourceforge.plantuml.graphic.TextBlock r10, $r11, $r20, $r37;
        net.sourceforge.plantuml.cucadiagram.PortionShower r12;
        net.sourceforge.plantuml.cucadiagram.EntityPortion $r13, $r29;
        net.sourceforge.plantuml.cucadiagram.Bodier $r14, $r16;
        int $i0;
        net.sourceforge.plantuml.style.Style $r19, $r23, $r38;
        net.sourceforge.plantuml.Url $r21;
        net.sourceforge.plantuml.graphic.TextBlockLineBefore $r22;
        net.sourceforge.plantuml.style.PName $r24;
        net.sourceforge.plantuml.style.Value $r25;
        net.sourceforge.plantuml.graphic.TextBlockEmpty $r26;
        net.sourceforge.plantuml.Guillemet $r27, $r30;
        java.lang.String $r28;
        java.util.List $r31;
        net.sourceforge.plantuml.api.ThemeStyle $r40;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r42;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r12 := @parameter2: net.sourceforge.plantuml.cucadiagram.PortionShower;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: int marginEmptyFieldsOrMethod> = 13;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: int xMarginCircle> = 5;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.LineConfigurable lineConfig> = r1;

        r3 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r4 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        $d0 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: double getRoundCorner(net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r4, null);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: double roundCorner> = $d0;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r38 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.style.Style getStyleHeader()>();

        $r39 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r40 = interfaceinvoke $r39.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r41 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r42 = interfaceinvoke $r41.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r43 = virtualinvoke $r38.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r40, $r42);

        goto label2;

     label1:
        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam OBJECT>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r6, $r7, r3);

        r43 = $r5;

     label2:
        $r8 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.Display getUnderlinedName(net.sourceforge.plantuml.cucadiagram.ILeaf)>(r1);

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        r10 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r43, $r9, r2);

        $r11 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>(r10, 2.0, 2.0);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock name> = $r11;

        if r3 == null goto label3;

        $r27 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r28 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r27);

        if $r28 == null goto label3;

        $r29 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion STEREOTYPE>;

        $z2 = interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r29, r1);

        if $z2 != 0 goto label4;

     label3:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock stereo> = null;

        goto label5;

     label4:
        $r30 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.Guillemet guillemet()>();

        $r31 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.util.List getLabels(net.sourceforge.plantuml.Guillemet)>($r30);

        $r32 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.util.Collection)>($r31);

        $r33 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r34 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r35 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam OBJECT_STEREOTYPE>;

        specialinvoke $r33.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r34, $r35, r3);

        $r36 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r37 = virtualinvoke $r32.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r33, $r36, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock stereo> = $r37;

     label5:
        $r13 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion FIELD>;

        z1 = interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r13, r1);

        $r14 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.cucadiagram.Bodier: net.sourceforge.plantuml.cucadiagram.Display getFieldsToDisplay()>();

        $i0 = virtualinvoke $r15.<net.sourceforge.plantuml.cucadiagram.Display: int size()>();

        if $i0 != 0 goto label6;

        $r22 = new net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        $r23 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.style.Style getStyle()>();

        $r24 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineThickness>;

        $r25 = virtualinvoke $r23.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r24);

        $d1 = interfaceinvoke $r25.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r26 = new net.sourceforge.plantuml.graphic.TextBlockEmpty;

        specialinvoke $r26.<net.sourceforge.plantuml.graphic.TextBlockEmpty: void <init>(double,double)>(10.0, 16.0);

        specialinvoke $r22.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: void <init>(double,net.sourceforge.plantuml.graphic.TextBlock)>($d1, $r26);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock fields> = $r22;

        goto label7;

     label6:
        $r16 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r17 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam OBJECT_ATTRIBUTE>;

        $r18 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r19 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.style.Style getStyle()>();

        $r20 = interfaceinvoke $r16.<net.sourceforge.plantuml.cucadiagram.Bodier: net.sourceforge.plantuml.graphic.TextBlock getBody(net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ISkinParam,boolean,boolean,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.graphic.FontConfiguration)>($r17, r2, 0, z1, $r18, $r19, null);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock fields> = $r20;

     label7:
        $r21 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.Url url> = $r21;

        return;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5, $r9;
        net.sourceforge.plantuml.svek.image.EntityImageObject r6;
        net.sourceforge.plantuml.cucadiagram.IEntity $r7;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r8;
        net.sourceforge.plantuml.ISkinParam $r10;
        net.sourceforge.plantuml.style.StyleBuilder $r11;
        net.sourceforge.plantuml.style.Style $r12;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName objectDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName object>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r9 = virtualinvoke $r5.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r8);

        $r10 = virtualinvoke r6.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r11 = interfaceinvoke $r10.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r12 = virtualinvoke $r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r11);

        return $r12;
    }

    private net.sourceforge.plantuml.style.Style getStyleHeader()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.style.StyleSignature $r6, $r10;
        net.sourceforge.plantuml.svek.image.EntityImageObject r7;
        net.sourceforge.plantuml.cucadiagram.IEntity $r8;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r9;
        net.sourceforge.plantuml.ISkinParam $r11;
        net.sourceforge.plantuml.style.StyleBuilder $r12;
        net.sourceforge.plantuml.style.Style $r13;

        r7 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName objectDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName object>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName header>;

        $r0[4] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r10 = virtualinvoke $r6.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r9);

        $r11 = virtualinvoke r7.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r13 = virtualinvoke $r10.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r12);

        return $r13;
    }

    private net.sourceforge.plantuml.cucadiagram.Display getUnderlinedName(net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.ISkinParam $r1;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r2;
        net.sourceforge.plantuml.cucadiagram.Display $r3, $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.ISkinParam: boolean strictUmlStyle()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display underlinedName()>();

        return $r5;

     label1:
        $r3 = interfaceinvoke r2.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        return $r3;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2, r4;
        net.sourceforge.plantuml.graphic.TextBlock $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8;
        int $i0, $i1;
        net.sourceforge.plantuml.ISkinParam $r5, $r7;
        byte $b2;
        net.sourceforge.plantuml.Dimension2DDouble $r6;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.awt.geom.Dimension2D getTitleDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock fields>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $i0 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: int xMarginCircle>;

        $i1 = 2 * $i0;

        $d2 = (double) $i1;

        $d3 = $d1 + $d2;

        d8 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $d4 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: double minClassWidth()>();

        $b2 = d8 cmpg $d4;

        if $b2 >= 0 goto label1;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        d8 = interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: double minClassWidth()>();

     label1:
        $d5 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: double getMethodOrFieldHeight(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r4);

        $d6 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d7 = $d5 + $d6;

        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d8, d7);

        return $r6;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0, $r37;
        net.sourceforge.plantuml.svek.image.EntityImageObject r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2, r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        net.sourceforge.plantuml.ugraphic.URectangle $r4, r5;
        net.sourceforge.plantuml.cucadiagram.IEntity $r6, $r10, $r20, $r29;
        net.sourceforge.plantuml.graphic.color.Colors $r7;
        net.sourceforge.plantuml.graphic.color.ColorType $r8;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ISkinParam $r9, $r12, $r48, $r54, $r56, $r62, $r64;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r11, $r13, $r49;
        net.sourceforge.plantuml.ColorParam[] $r14, $r50;
        net.sourceforge.plantuml.ColorParam $r15, $r51;
        java.util.EnumMap $r16;
        java.lang.StringBuilder $r17, $r19, $r22, $r23, $r26, $r28, $r31;
        net.sourceforge.plantuml.ugraphic.UGroupType $r18, $r27;
        net.sourceforge.plantuml.cucadiagram.Code $r21, $r30;
        java.lang.String $r24, $r32;
        net.sourceforge.plantuml.ugraphic.UGraphic $r34, r41, $r44, r66, $r71, r73;
        net.sourceforge.plantuml.ugraphic.ULayoutGroup $r35;
        net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2 $r36;
        net.sourceforge.plantuml.graphic.TextBlock $r39, $r40, $r42, $r46;
        net.sourceforge.plantuml.ugraphic.UTranslate $r43;
        net.sourceforge.plantuml.Url $r45, $r47, $r74;
        net.sourceforge.plantuml.style.PName $r52, $r58, $r60;
        net.sourceforge.plantuml.style.Value $r53, $r59, $r61;
        net.sourceforge.plantuml.api.ThemeStyle $r55, $r63;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r57, $r65;
        net.sourceforge.plantuml.ugraphic.color.HColor r67, r69;
        net.sourceforge.plantuml.style.Style r68;
        net.sourceforge.plantuml.ugraphic.UStroke r70;
        net.sourceforge.plantuml.ugraphic.UBackground $r72;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r66 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r66.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r3 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.awt.geom.Dimension2D getTitleDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r4 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        $d2 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: double roundCorner>;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>($d2);

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r8 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r67 = virtualinvoke $r7.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r8);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label2;

        r68 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.style.Style getStyle()>();

        $r52 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r53 = virtualinvoke r68.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r52);

        $r54 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r55 = interfaceinvoke $r54.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r56 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r57 = interfaceinvoke $r56.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r69 = interfaceinvoke $r53.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r55, $r57);

        if r67 != null goto label1;

        $r60 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r61 = virtualinvoke r68.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r60);

        $r62 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r63 = interfaceinvoke $r62.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r64 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r65 = interfaceinvoke $r64.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r67 = interfaceinvoke $r61.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r63, $r65);

     label1:
        $r58 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r59 = virtualinvoke r68.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r58);

        $d6 = interfaceinvoke $r59.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>($d6);

        r70 = virtualinvoke r68.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        goto label5;

     label2:
        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r11 = interfaceinvoke $r10.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r9.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r11);

        if $z1 == 0 goto label3;

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>(4.0);

     label3:
        $r12 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r13 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r14 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r15 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam objectBorder>;

        $r14[0] = $r15;

        r69 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r12, $r13, $r14);

        if r67 != null goto label4;

        $r48 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r49 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r50 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r51 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam objectBackground>;

        $r50[0] = $r51;

        r67 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r48, $r49, $r50);

     label4:
        r70 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

     label5:
        $r71 = interfaceinvoke r66.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r69);

        $r72 = interfaceinvoke r67.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r73 = interfaceinvoke $r71.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r72);

        $r74 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.Url url>;

        if $r74 == null goto label6;

        $r47 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r73.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r47);

     label6:
        $r16 = new java.util.EnumMap;

        specialinvoke $r16.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/UGroupType;");

        $r18 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType CLASS>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem ");

        $r20 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" selected");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r24);

        $r27 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem_");

        $r29 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r30 = interfaceinvoke $r29.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r32);

        interfaceinvoke r73.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r16);

        $r34 = interfaceinvoke r73.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r70);

        interfaceinvoke $r34.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r5);

        $r35 = new net.sourceforge.plantuml.ugraphic.ULayoutGroup;

        $r36 = new net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2;

        $r37 = interfaceinvoke r73.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke $r36.<net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r37);

        specialinvoke $r35.<net.sourceforge.plantuml.ugraphic.ULayoutGroup: void <init>(net.sourceforge.plantuml.ugraphic.PlacementStrategy)>($r36);

        $r39 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        if $r39 == null goto label7;

        $r46 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        virtualinvoke $r35.<net.sourceforge.plantuml.ugraphic.ULayoutGroup: void add(net.sourceforge.plantuml.graphic.TextBlock)>($r46);

     label7:
        $r40 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock name>;

        virtualinvoke $r35.<net.sourceforge.plantuml.ugraphic.ULayoutGroup: void add(net.sourceforge.plantuml.graphic.TextBlock)>($r40);

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke $r35.<net.sourceforge.plantuml.ugraphic.ULayoutGroup: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>(r73, $d3, $d4);

        r41 = staticinvoke <net.sourceforge.plantuml.ugraphic.UGraphicStencil: net.sourceforge.plantuml.ugraphic.UGraphic create(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.creole.Stencil,net.sourceforge.plantuml.ugraphic.UStroke)>(r73, r1, r70);

        $r42 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock fields>;

        $d5 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r43 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d5);

        $r44 = interfaceinvoke r41.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r43);

        interfaceinvoke $r42.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r44);

        $r45 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.Url url>;

        if $r45 == null goto label8;

        interfaceinvoke r73.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label8:
        interfaceinvoke r73.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getStroke()
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.LineConfigurable $r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3, r7;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.LineParam $r5;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r6;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.LineConfigurable lineConfig>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.LineConfigurable: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r7 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        if r7 != null goto label1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam objectBorder>;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        r7 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r5, $r6);

     label1:
        if r7 != null goto label2;

        $r3 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r7 = $r3;

     label2:
        return r7;
    }

    private double getMethodOrFieldHeight(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0;
        double d0, $d1;
        byte $b0;
        net.sourceforge.plantuml.svek.image.EntityImageObject r1;
        int $i1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $i1 = r1.<net.sourceforge.plantuml.svek.image.EntityImageObject: int marginEmptyFieldsOrMethod>;

        $d1 = (double) $i1;

        return $d1;

     label1:
        return d0;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getTitleDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.awt.geom.Dimension2D getNameAndSteretypeDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getNameAndSteretypeDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4, $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.Dimension2DDouble $r10, $r11;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock name>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        if $r4 != null goto label1;

        $r10 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r9 = $r10;

        specialinvoke $r10.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        goto label2;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        $r9 = interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

     label2:
        $r11 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke $r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d4 = virtualinvoke $r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = $d3 + $d4;

        specialinvoke $r11.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d5);

        return $r11;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.cucadiagram.IEntity $r1;
        net.sourceforge.plantuml.cucadiagram.ILeaf $r2;
        java.util.Collection $r3;
        int $i0;
        net.sourceforge.plantuml.svek.ShapeType $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r2 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r1;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.cucadiagram.ILeaf: java.util.Collection getPortShortNames()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label1;

        $r5 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_HTML_FOR_PORTS>;

        return $r5;

     label1:
        $r4 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r4;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        return 0.0;
    }

    public double getEndingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 := @parameter1: double;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    public net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageObject r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r5;
        boolean $z0;
        net.sourceforge.plantuml.svek.Ports $r4, $r7, $r8;
        net.sourceforge.plantuml.svek.WithPorts $r6;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageObject;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.awt.geom.Dimension2D getNameAndSteretypeDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock fields>;

        $z0 = $r3 instanceof net.sourceforge.plantuml.svek.WithPorts;

        if $z0 == 0 goto label1;

        $r5 = r0.<net.sourceforge.plantuml.svek.image.EntityImageObject: net.sourceforge.plantuml.graphic.TextBlock fields>;

        $r6 = (net.sourceforge.plantuml.svek.WithPorts) $r5;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.svek.WithPorts: net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.svek.Ports: net.sourceforge.plantuml.svek.Ports translateY(double)>($d0);

        return $r8;

     label1:
        $r4 = new net.sourceforge.plantuml.svek.Ports;

        specialinvoke $r4.<net.sourceforge.plantuml.svek.Ports: void <init>()>();

        return $r4;
    }
}
