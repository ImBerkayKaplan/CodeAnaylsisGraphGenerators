public class net.sourceforge.plantuml.ugraphic.comp.SlotSet extends java.lang.Object implements java.lang.Iterable
{
    private final java.util.List all;

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all> = $r1;

        return;
    }

    public net.sourceforge.plantuml.ugraphic.comp.SlotSet filter(double, double)
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet $r0, r2;
        java.util.List $r3, $r8;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.ugraphic.comp.Slot r6, r7;
        double d0, d1;

        r2 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.ugraphic.comp.Slot) $r5;

        r7 = virtualinvoke r6.<net.sourceforge.plantuml.ugraphic.comp.Slot: net.sourceforge.plantuml.ugraphic.comp.Slot intersect(double,double)>(d0, d1);

        if r7 == null goto label2;

        $r8 = $r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public void addAll(net.sourceforge.plantuml.ugraphic.comp.SlotSet)
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet r0, r1;
        java.util.List $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    public void addSlot(double, double)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.ugraphic.comp.Slot $r2, r8, r10, r12;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.comp.SlotSet r3;
        java.util.List $r4, $r5;
        boolean $z0, $z1, $z3;
        java.lang.Object $r6, $r7;
        java.util.Iterator r9, r11;

        r3 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new net.sourceforge.plantuml.ugraphic.comp.Slot;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.comp.Slot: void <init>(double,double)>(d0, d1);

        r8 = $r2;

        $r4 = r3.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        r9 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.ugraphic.comp.Slot) $r7;

        $z3 = virtualinvoke r10.<net.sourceforge.plantuml.ugraphic.comp.Slot: boolean intersect(net.sourceforge.plantuml.ugraphic.comp.Slot)>($r2);

        if $z3 == 0 goto label2;

        interfaceinvoke r9.<java.util.Iterator: void remove()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r10);

     label2:
        goto label1;

     label3:
        r11 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (net.sourceforge.plantuml.ugraphic.comp.Slot) $r6;

        r8 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.comp.Slot: net.sourceforge.plantuml.ugraphic.comp.Slot merge(net.sourceforge.plantuml.ugraphic.comp.Slot)>(r12);

        goto label4;

     label5:
        $r5 = r3.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r8);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.comp.SlotSet smaller(double)
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet $r0, r2;
        java.util.List $r3;
        java.util.Iterator r4;
        java.lang.Object $r5;
        net.sourceforge.plantuml.ugraphic.comp.Slot r6;
        double $d0, d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        d1 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.ugraphic.comp.Slot) $r5;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.ugraphic.comp.Slot: double size()>();

        $d2 = 2.0 * d1;

        $b0 = $d0 cmpg $d2;

        if $b0 > 0 goto label2;

        goto label1;

     label2:
        $d3 = virtualinvoke r6.<net.sourceforge.plantuml.ugraphic.comp.Slot: double getStart()>();

        $d4 = $d3 + d1;

        $d5 = virtualinvoke r6.<net.sourceforge.plantuml.ugraphic.comp.Slot: double getEnd()>();

        $d6 = $d5 - d1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: void addSlot(double,double)>($d4, $d6);

        goto label1;

     label3:
        return $r0;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.List getSlots()
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List getSlots()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public net.sourceforge.plantuml.ugraphic.comp.SlotSet reverse()
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet $r0, r2;
        java.util.List $r3, $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.ugraphic.comp.Slot r7, r8;
        double $d0, $d1;

        r2 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        $r0 = new net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r3);

        r8 = null;

        $r4 = r2.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.ugraphic.comp.Slot) $r6;

        if r8 == null goto label2;

        $d0 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.comp.Slot: double getEnd()>();

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.comp.Slot: double getStart()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: void addSlot(double,double)>($d0, $d1);

     label2:
        r8 = r7;

        goto label1;

     label3:
        return $r0;
    }

    public void drawDebugX(net.sourceforge.plantuml.ugraphic.UGraphic, double)
    {
        net.sourceforge.plantuml.ugraphic.comp.SlotSet r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.ugraphic.comp.Slot r4;
        net.sourceforge.plantuml.ugraphic.URectangle $r5;
        double $d0, $d1, d2, $d3, $d4;
        net.sourceforge.plantuml.ugraphic.UGraphic r7, $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.SlotSet;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d2 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.comp.SlotSet: java.util.List all>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.ugraphic.comp.Slot) $r3;

        $r5 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Slot: double getEnd()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Slot: double getStart()>();

        $d3 = $d0 - $d1;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d3, d2);

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.comp.Slot: double getStart()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        $r9 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        goto label1;

     label2:
        return;
    }
}
