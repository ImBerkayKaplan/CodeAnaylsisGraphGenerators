public final enum class net.sourceforge.plantuml.asciiart.AsciiShape extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN;
    public static final enum net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN_UNICODE;
    public static final enum net.sourceforge.plantuml.asciiart.AsciiShape BOUNDARY;
    public static final enum net.sourceforge.plantuml.asciiart.AsciiShape DATABASE;
    private final int width;
    private final int height;
    private static final net.sourceforge.plantuml.asciiart.AsciiShape[] $VALUES;

    public static net.sourceforge.plantuml.asciiart.AsciiShape[] values()
    {
        net.sourceforge.plantuml.asciiart.AsciiShape[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.asciiart.AsciiShape[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.asciiart.AsciiShape valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.asciiart.AsciiShape $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/asciiart/AsciiShape;", r0);

        $r2 = (net.sourceforge.plantuml.asciiart.AsciiShape) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int, int)
    {
        net.sourceforge.plantuml.asciiart.AsciiShape r0;
        java.lang.String r1;
        int i0, i1, i2;

        r0 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<net.sourceforge.plantuml.asciiart.AsciiShape: int width> = i1;

        r0.<net.sourceforge.plantuml.asciiart.AsciiShape: int height> = i2;

        return;
    }

    public void draw(net.sourceforge.plantuml.asciiart.BasicCharArea, int, int)
    {
        net.sourceforge.plantuml.asciiart.AsciiShape r0, $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.asciiart.BasicCharArea r5;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        r5 := @parameter0: net.sourceforge.plantuml.asciiart.BasicCharArea;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN>;

        if r0 != $r1 goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.AsciiShape: void drawStickMan(net.sourceforge.plantuml.asciiart.BasicCharArea,int,int)>(r5, i0, i1);

        goto label4;

     label1:
        $r2 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN_UNICODE>;

        if r0 != $r2 goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.AsciiShape: void drawStickManUnicode(net.sourceforge.plantuml.asciiart.BasicCharArea,int,int)>(r5, i0, i1);

        goto label4;

     label2:
        $r3 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape BOUNDARY>;

        if r0 != $r3 goto label3;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.AsciiShape: void drawBoundary(net.sourceforge.plantuml.asciiart.BasicCharArea,int,int)>(r5, i0, i1);

        goto label4;

     label3:
        $r4 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape DATABASE>;

        if r0 != $r4 goto label4;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.AsciiShape: void drawDatabase(net.sourceforge.plantuml.asciiart.BasicCharArea,int,int)>(r5, i0, i1);

     label4:
        return;
    }

    private void drawDatabase(net.sourceforge.plantuml.asciiart.BasicCharArea, int, int)
    {
        net.sourceforge.plantuml.asciiart.BasicCharArea r0;
        int i0, i1, i2, i3, i4, i5, i6;
        net.sourceforge.plantuml.asciiart.AsciiShape r1;

        r1 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        r0 := @parameter0: net.sourceforge.plantuml.asciiart.BasicCharArea;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>(" ,.-^^-._", i0, i1);

        i3 = i2 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|-.____.-|", i0, i2);

        i4 = i3 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|        |", i0, i3);

        i5 = i4 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|        |", i0, i4);

        i6 = i5 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|        |", i0, i5);

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("\'-.____.-\'", i0, i6);

        return;
    }

    private void drawDatabaseSmall(net.sourceforge.plantuml.asciiart.BasicCharArea, int, int)
    {
        net.sourceforge.plantuml.asciiart.BasicCharArea r0;
        int i0, i1, i2, i3, i4, i5, i6;
        net.sourceforge.plantuml.asciiart.AsciiShape r1;

        r1 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        r0 := @parameter0: net.sourceforge.plantuml.asciiart.BasicCharArea;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>(" ,.-\"-._ ", i0, i1);

        i3 = i2 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|-.___.-|", i0, i2);

        i4 = i3 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|       |", i0, i3);

        i5 = i4 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|       |", i0, i4);

        i6 = i5 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|       |", i0, i5);

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("\'-.___.-\'", i0, i6);

        return;
    }

    private void drawBoundary(net.sourceforge.plantuml.asciiart.BasicCharArea, int, int)
    {
        net.sourceforge.plantuml.asciiart.BasicCharArea r0;
        int i0, i1, i2, i3;
        net.sourceforge.plantuml.asciiart.AsciiShape r1;

        r1 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        r0 := @parameter0: net.sourceforge.plantuml.asciiart.BasicCharArea;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|   ,-.", i0, i1);

        i3 = i2 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("+--{   )", i0, i2);

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("|   `-\'", i0, i3);

        return;
    }

    private void drawStickMan(net.sourceforge.plantuml.asciiart.BasicCharArea, int, int)
    {
        net.sourceforge.plantuml.asciiart.BasicCharArea r0;
        int i0, i1, i2, i3, i4, i5;
        net.sourceforge.plantuml.asciiart.AsciiShape r1;

        r1 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        r0 := @parameter0: net.sourceforge.plantuml.asciiart.BasicCharArea;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>(",-.", i0, i1);

        i3 = i2 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("`-\'", i0, i2);

        i4 = i3 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("/|\\", i0, i3);

        i5 = i4 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>(" | ", i0, i4);

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("/ \\", i0, i5);

        return;
    }

    private void drawStickManUnicode(net.sourceforge.plantuml.asciiart.BasicCharArea, int, int)
    {
        net.sourceforge.plantuml.asciiart.BasicCharArea r0;
        int i0, i1, i2, i3, i4, i5, i6;
        net.sourceforge.plantuml.asciiart.AsciiShape r1;

        r1 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        r0 := @parameter0: net.sourceforge.plantuml.asciiart.BasicCharArea;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("\u250c\u2500\u2510", i0, i1);

        i3 = i2 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("\u2551\"\u2502", i0, i2);

        i4 = i3 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("\u2514\u252c\u2518", i0, i3);

        i5 = i4 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("\u250c\u253c\u2510", i0, i4);

        i6 = i5 + 1;

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>(" \u2502 ", i0, i5);

        interfaceinvoke r0.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawStringLR(java.lang.String,int,int)>("\u250c\u2534\u2510", i0, i6);

        return;
    }

    public final int getHeight()
    {
        net.sourceforge.plantuml.asciiart.AsciiShape r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        $i0 = r0.<net.sourceforge.plantuml.asciiart.AsciiShape: int height>;

        return $i0;
    }

    public final int getWidth()
    {
        net.sourceforge.plantuml.asciiart.AsciiShape r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.asciiart.AsciiShape;

        $i0 = r0.<net.sourceforge.plantuml.asciiart.AsciiShape: int width>;

        return $i0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.asciiart.AsciiShape $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.asciiart.AsciiShape[] $r4;

        $r0 = new net.sourceforge.plantuml.asciiart.AsciiShape;

        specialinvoke $r0.<net.sourceforge.plantuml.asciiart.AsciiShape: void <init>(java.lang.String,int,int,int)>("STICKMAN", 0, 3, 5);

        <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN> = $r0;

        $r1 = new net.sourceforge.plantuml.asciiart.AsciiShape;

        specialinvoke $r1.<net.sourceforge.plantuml.asciiart.AsciiShape: void <init>(java.lang.String,int,int,int)>("STICKMAN_UNICODE", 1, 3, 6);

        <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN_UNICODE> = $r1;

        $r2 = new net.sourceforge.plantuml.asciiart.AsciiShape;

        specialinvoke $r2.<net.sourceforge.plantuml.asciiart.AsciiShape: void <init>(java.lang.String,int,int,int)>("BOUNDARY", 2, 8, 3);

        <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape BOUNDARY> = $r2;

        $r3 = new net.sourceforge.plantuml.asciiart.AsciiShape;

        specialinvoke $r3.<net.sourceforge.plantuml.asciiart.AsciiShape: void <init>(java.lang.String,int,int,int)>("DATABASE", 3, 10, 6);

        <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape DATABASE> = $r3;

        $r4 = newarray (net.sourceforge.plantuml.asciiart.AsciiShape)[4];

        $r5 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN>;

        $r4[0] = $r5;

        $r6 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape STICKMAN_UNICODE>;

        $r4[1] = $r6;

        $r7 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape BOUNDARY>;

        $r4[2] = $r7;

        $r8 = <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape DATABASE>;

        $r4[3] = $r8;

        <net.sourceforge.plantuml.asciiart.AsciiShape: net.sourceforge.plantuml.asciiart.AsciiShape[] $VALUES> = $r4;

        return;
    }
}
