public class net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac extends net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine implements net.sourceforge.plantuml.argon2.blake2.Blake2b
{
    static final boolean $assertionsDisabled;

    private void <init>(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac r0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r1;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac;

        r1 := @parameter0: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine: void <init>(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>(r1);

        return;
    }

    private void <init>()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac r0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac;

        specialinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac newInstance(byte[])
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac $r0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r1, $r3;
        byte[] r2;

        r2 := @parameter0: byte[];

        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac;

        $r1 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void <init>()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setKey(byte[])>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac: void <init>(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>($r3);

        return $r0;
    }

    public static net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac newInstance(byte[], int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac $r0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r1, $r3, $r4;
        byte[] r2;
        int i0;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac;

        $r1 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void <init>()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setKey(byte[])>(r2);

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDigestLength(int)>(i0);

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac: void <init>(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>($r4);

        return $r0;
    }

    public static net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac newInstance(java.security.Key, int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac $r0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r1, $r3, $r4;
        java.security.Key r2;
        int i0;

        r2 := @parameter0: java.security.Key;

        i0 := @parameter1: int;

        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac;

        $r1 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void <init>()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setKey(java.security.Key)>(r2);

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDigestLength(int)>(i0);

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac: void <init>(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>($r4);

        return $r0;
    }

    public static net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac newInstance(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)
    {
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac $r0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r1;
        java.lang.AssertionError $r2, $r3;

        r1 := @parameter0: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Param (p) is null");

        throw $r3;

     label1:
        $z1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey()>();

        if $z2 != 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("Param (p) not configured with a key");

        throw $r2;

     label2:
        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac;

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac: void <init>(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>(r1);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/argon2/blake2/Blake2b;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Mac: boolean $assertionsDisabled> = $z1;

        return;
    }
}
