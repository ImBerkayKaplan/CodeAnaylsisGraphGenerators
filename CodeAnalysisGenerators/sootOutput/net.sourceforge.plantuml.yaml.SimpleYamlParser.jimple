public class net.sourceforge.plantuml.yaml.SimpleYamlParser extends java.lang.Object
{
    private net.sourceforge.plantuml.json.JsonValue result;
    private final java.util.List pendingIndents;

    public void <init>()
    {
        net.sourceforge.plantuml.yaml.SimpleYamlParser r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents> = $r1;

        return;
    }

    public net.sourceforge.plantuml.json.JsonValue parse(java.util.List)
    {
        net.sourceforge.plantuml.yaml.SimpleYamlParser r0;
        net.sourceforge.plantuml.json.JsonObject $r1;
        java.util.List $r2, $r3, r6;
        java.lang.Integer $r4;
        net.sourceforge.plantuml.yaml.YamlLines $r5;
        java.util.Iterator r8;
        boolean $z1;
        net.sourceforge.plantuml.json.JsonValue $r9;
        java.lang.Object $r10;
        java.lang.String r11;

        r0 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        r6 := @parameter0: java.util.List;

        $r1 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result> = $r1;

        $r2 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r3 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new net.sourceforge.plantuml.yaml.YamlLines;

        specialinvoke $r5.<net.sourceforge.plantuml.yaml.YamlLines: void <init>(java.util.List)>(r6);

        r8 = virtualinvoke $r5.<net.sourceforge.plantuml.yaml.YamlLines: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: void parseSingleLine(java.lang.String)>(r11);

        goto label1;

     label2:
        $r9 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        return $r9;
    }

    private java.lang.String[] nameAndValue(java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, r3, $r4, r5;
        java.util.regex.Matcher r2;
        boolean $z0;
        java.lang.String[] $r6;
        net.sourceforge.plantuml.yaml.SimpleYamlParser r7;

        r7 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\s*([^:\\s]+)\\s*: \\s*(\\S.*)$");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = r3;

        $r6[1] = r5;

        return $r6;

     label1:
        return null;
    }

    private void parseSingleLine(java.lang.String)
    {
        net.sourceforge.plantuml.yaml.SimpleYamlParser r0;
        java.lang.String r1, r2, $r8, r9, $r15, r19, r20;
        int i0;
        boolean $z0;
        net.sourceforge.plantuml.json.JsonValue $r3;
        java.lang.String[] r4;
        java.lang.UnsupportedOperationException $r5;
        net.sourceforge.plantuml.json.JsonObject $r6, r18;
        java.lang.StringBuilder $r11, $r13, $r14;
        java.io.PrintStream $r12;
        net.sourceforge.plantuml.json.JsonArray r17;

        r0 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        r1 := @parameter0: java.lang.String;

        i0 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: int getIndent(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: boolean isListStrict(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: void strictMuteToArray(int)>(i0);

        return;

     label1:
        r2 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.lang.String listedValue(java.lang.String)>(r1);

        if r2 == null goto label2;

        r17 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonArray getForceArray(int)>(i0);

        virtualinvoke r17.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(java.lang.String)>(r2);

        return;

     label2:
        $r3 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue getWorking(int)>(i0);

        r18 = (net.sourceforge.plantuml.json.JsonObject) $r3;

        if r18 != null goto label3;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR: ignoring ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

        return;

     label3:
        r4 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.lang.String[] nameAndValue(java.lang.String)>(r1);

        if r4 == null goto label4;

        r19 = r4[0];

        $r8 = r4[1];

        r9 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String,java.lang.String)>($r8, "\"");

        virtualinvoke r18.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,java.lang.String)>(r19, r9);

        return;

     label4:
        r20 = staticinvoke <net.sourceforge.plantuml.yaml.YamlLines: java.lang.String nameOnly(java.lang.String)>(r1);

        if r20 == null goto label5;

        $r6 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r6.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        virtualinvoke r18.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r20, $r6);

        return;

     label5:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r1);

        throw $r5;
    }

    private java.lang.String listedValue(java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, $r3, r4;
        java.util.regex.Matcher r2;
        boolean $z0;
        net.sourceforge.plantuml.yaml.SimpleYamlParser r5;

        r5 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\s*[-]\\s*(\\S.*)$");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        return r4;

     label1:
        return null;
    }

    private net.sourceforge.plantuml.json.JsonArray getForceArray(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        net.sourceforge.plantuml.yaml.SimpleYamlParser r0;
        java.util.List $r1, $r5, $r13, $r14;
        net.sourceforge.plantuml.json.JsonValue $r2, $r3, $r8, $r9, $r16, $r17;
        net.sourceforge.plantuml.json.JsonObject r4;
        java.lang.Object $r6;
        java.lang.String r7;
        boolean $z0, $z1;
        net.sourceforge.plantuml.json.JsonArray $r10, $r11, $r18, $r19;

        r0 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        i0 := @parameter0: int;

        if i0 != 0 goto label2;

        $i6 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: int getLastIndent()>();

        if $i6 != 0 goto label2;

        $r16 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $z1 = $r16 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 != 0 goto label1;

        $r19 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r19.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result> = $r19;

     label1:
        $r17 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $r18 = (net.sourceforge.plantuml.json.JsonArray) $r17;

        return $r18;

     label2:
        $i7 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: int getLastIndent()>();

        $i8 = i0 - 1;

        if $i7 <= $i8 goto label3;

        $r14 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $r13 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i4 = interfaceinvoke $r13.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        interfaceinvoke $r14.<java.util.List: java.lang.Object remove(int)>($i5);

        goto label2;

     label3:
        $r2 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $r1 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue search(net.sourceforge.plantuml.json.JsonValue,int)>($r2, $i1);

        r4 = (net.sourceforge.plantuml.json.JsonObject) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.json.JsonObject: java.util.List names()>();

        $i2 = virtualinvoke r4.<net.sourceforge.plantuml.json.JsonObject: int size()>();

        $i3 = $i2 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i3);

        r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke r4.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonValue get(java.lang.String)>(r7);

        $z0 = $r8 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z0 != 0 goto label4;

        $r11 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r11.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        virtualinvoke r4.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject set(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r7, $r11);

     label4:
        $r9 = virtualinvoke r4.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonValue get(java.lang.String)>(r7);

        $r10 = (net.sourceforge.plantuml.json.JsonArray) $r9;

        return $r10;
    }

    private void strictMuteToArray(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        net.sourceforge.plantuml.yaml.SimpleYamlParser r0;
        net.sourceforge.plantuml.json.JsonValue $r1, $r3, $r4, $r9, $r10, $r16, $r23;
        boolean $z0, $z1, $z2;
        java.util.List $r2, $r6, $r20, $r21;
        net.sourceforge.plantuml.json.JsonObject r5, $r11, $r17;
        java.lang.Object $r7;
        java.lang.String r8;
        net.sourceforge.plantuml.json.JsonArray $r12, $r14, $r18, $r24;

        r0 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        i0 := @parameter0: int;

        if i0 != 0 goto label2;

        $i6 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: int getLastIndent()>();

        if $i6 != 0 goto label2;

        $r23 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $z2 = $r23 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z2 != 0 goto label1;

        $r24 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r24.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result> = $r24;

     label1:
        return;

     label2:
        $i7 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: int getLastIndent()>();

        if $i7 <= i0 goto label3;

        $r21 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $r20 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i4 = interfaceinvoke $r20.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>($i5);

        goto label2;

     label3:
        $r1 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $z0 = $r1 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z0 == 0 goto label4;

        $r16 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $r18 = (net.sourceforge.plantuml.json.JsonArray) $r16;

        $r17 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r17.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        virtualinvoke $r18.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r17);

        return;

     label4:
        $r3 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $r2 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r4 = staticinvoke <net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue search(net.sourceforge.plantuml.json.JsonValue,int)>($r3, $i1);

        r5 = (net.sourceforge.plantuml.json.JsonObject) $r4;

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.json.JsonObject: java.util.List names()>();

        $i2 = virtualinvoke r5.<net.sourceforge.plantuml.json.JsonObject: int size()>();

        $i3 = $i2 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i3);

        r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke r5.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonValue get(java.lang.String)>(r8);

        $z1 = $r9 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 != 0 goto label5;

        $r14 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r14.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        virtualinvoke r5.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject set(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r8, $r14);

        goto label6;

     label5:
        $r10 = virtualinvoke r5.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonValue get(java.lang.String)>(r8);

        $r12 = (net.sourceforge.plantuml.json.JsonArray) $r10;

        $r11 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r11.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        virtualinvoke $r12.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r11);

     label6:
        return;
    }

    private boolean isListStrict(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        net.sourceforge.plantuml.yaml.SimpleYamlParser r2;

        r2 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-");

        return $z0;
    }

    private int getLastIndent()
    {
        net.sourceforge.plantuml.yaml.SimpleYamlParser r0;
        java.util.List $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        $r2 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $r1 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i2;
    }

    private net.sourceforge.plantuml.json.JsonValue getWorking(int)
    {
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        net.sourceforge.plantuml.yaml.SimpleYamlParser r0;
        java.util.List $r1, $r3, $r4, $r7, $r8, $r10, $r13, $r15;
        java.lang.Integer $r2, $r14;
        net.sourceforge.plantuml.json.JsonValue $r5, $r6, $r11, $r12, $r16, $r17;

        r0 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: int getLastIndent()>();

        if i0 <= $i1 goto label1;

        $r13 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r16 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $r15 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i10 = interfaceinvoke $r15.<java.util.List: int size()>();

        $r17 = staticinvoke <net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue search(net.sourceforge.plantuml.json.JsonValue,int)>($r16, $i10);

        return $r17;

     label1:
        $i2 = specialinvoke r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: int getLastIndent()>();

        if i0 != $i2 goto label2;

        $r11 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $r10 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i9 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue search(net.sourceforge.plantuml.json.JsonValue,int)>($r11, $i9);

        return $r12;

     label2:
        $r1 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        i3 = interfaceinvoke $r1.<java.util.List: int indexOf(java.lang.Object)>($r2);

        if i3 != -1 goto label3;

        return null;

     label3:
        $r3 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i5 = i3 + 1;

        if $i4 <= $i5 goto label4;

        $r8 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $r7 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i7 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>($i8);

        goto label3;

     label4:
        $r5 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue result>;

        $r4 = r0.<net.sourceforge.plantuml.yaml.SimpleYamlParser: java.util.List pendingIndents>;

        $i6 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r6 = staticinvoke <net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue search(net.sourceforge.plantuml.json.JsonValue,int)>($r5, $i6);

        return $r6;
    }

    private static net.sourceforge.plantuml.json.JsonValue search(net.sourceforge.plantuml.json.JsonValue, int)
    {
        net.sourceforge.plantuml.json.JsonValue r0, $r3, r15, r18;
        boolean $z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.io.PrintStream $r5;
        java.lang.String $r8, r17;
        net.sourceforge.plantuml.json.JsonArray r9, r14;
        net.sourceforge.plantuml.json.JsonObject $r10, $r12, r16;

        r0 := @parameter0: net.sourceforge.plantuml.json.JsonValue;

        i0 := @parameter1: int;

        $z0 = r0 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z0 == 0 goto label3;

        r14 = (net.sourceforge.plantuml.json.JsonArray) r0;

        $i7 = virtualinvoke r14.<net.sourceforge.plantuml.json.JsonArray: int size()>();

        if $i7 != 0 goto label1;

        $r12 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r12.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        r15 = $r12;

        virtualinvoke r14.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r12);

        goto label2;

     label1:
        $i8 = virtualinvoke r14.<net.sourceforge.plantuml.json.JsonArray: int size()>();

        $i9 = $i8 - 1;

        r15 = virtualinvoke r14.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonValue get(int)>($i9);

     label2:
        return r15;

     label3:
        if i0 > 1 goto label4;

        return r0;

     label4:
        r16 = (net.sourceforge.plantuml.json.JsonObject) r0;

        $r1 = virtualinvoke r16.<net.sourceforge.plantuml.json.JsonObject: java.util.List names()>();

        $i1 = virtualinvoke r16.<net.sourceforge.plantuml.json.JsonObject: int size()>();

        $i2 = $i1 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        r17 = (java.lang.String) $r2;

        r18 = virtualinvoke r16.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonValue get(java.lang.String)>(r17);

        $z1 = r18 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 == 0 goto label6;

        r9 = (net.sourceforge.plantuml.json.JsonArray) r18;

        $i4 = virtualinvoke r9.<net.sourceforge.plantuml.json.JsonArray: int size()>();

        if $i4 != 0 goto label5;

        $r10 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r10.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        r18 = $r10;

        virtualinvoke r9.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r10);

        goto label6;

     label5:
        $i5 = virtualinvoke r9.<net.sourceforge.plantuml.json.JsonArray: int size()>();

        $i6 = $i5 - 1;

        r18 = virtualinvoke r9.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonValue get(int)>($i6);

     label6:
        $z2 = r18 instanceof net.sourceforge.plantuml.json.JsonString;

        if $z2 == 0 goto label7;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JsonString? ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        return null;

     label7:
        $i3 = i0 - 1;

        $r3 = staticinvoke <net.sourceforge.plantuml.yaml.SimpleYamlParser: net.sourceforge.plantuml.json.JsonValue search(net.sourceforge.plantuml.json.JsonValue,int)>(r18, $i3);

        return $r3;
    }

    private int getIndent(java.lang.String)
    {
        java.lang.String r0;
        int $i0, i2, i3;
        char c1;
        net.sourceforge.plantuml.yaml.SimpleYamlParser r1;

        r1 := @this: net.sourceforge.plantuml.yaml.SimpleYamlParser;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label5;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if c1 == 32 goto label2;

        if c1 != 9 goto label3;

     label2:
        i2 = i2 + 1;

        goto label4;

     label3:
        return i2;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return 0;
    }
}
