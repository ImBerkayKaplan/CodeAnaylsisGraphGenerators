public class net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d extends net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d implements net.sourceforge.plantuml.ugraphic.UDriver
{
    private final double dpiFactor;
    private final net.sourceforge.plantuml.EnsureVisible visible;

    public void <init>(double, net.sourceforge.plantuml.EnsureVisible)
    {
        net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d r0;
        double d0;
        net.sourceforge.plantuml.EnsureVisible r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.EnsureVisible;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: double dpiFactor> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: net.sourceforge.plantuml.EnsureVisible visible> = r1;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UPolygon, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.awt.Graphics2D)
    {
        java.awt.Graphics2D r0;
        java.awt.BasicStroke $r1;
        net.sourceforge.plantuml.ugraphic.UParam r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3;
        double $d0, $d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24;
        java.awt.geom.GeneralPath $r4;
        net.sourceforge.plantuml.ugraphic.color.HColor r6, $r10, $r14, $r16, $r19, $r21, $r24, $r26, $r29, $r31, $r42;
        net.sourceforge.plantuml.ugraphic.UPolygon r7;
        java.util.List $r8;
        boolean $z0, $z1, $z2;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r9;
        java.awt.Color $r11, $r12, $r15, $r17, $r20, $r22, $r25, $r27, $r30, $r32;
        java.awt.GradientPaint $r13, $r18, $r23, $r28, r41;
        net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d r33;
        java.lang.Object $r34;
        net.sourceforge.plantuml.EnsureVisible $r35;
        java.awt.geom.Point2D$Double $r36, r37;
        java.util.Iterator r38;
        java.awt.geom.Point2D r39;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient r40;
        char c1;

        r33 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UPolygon;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        r9 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r2 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r0 := @parameter5: java.awt.Graphics2D;

        $r1 = new java.awt.BasicStroke;

        $r3 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        $f0 = (float) $d0;

        specialinvoke $r1.<java.awt.BasicStroke: void <init>(float)>($f0);

        virtualinvoke r0.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r1);

        $r4 = new java.awt.geom.GeneralPath;

        specialinvoke $r4.<java.awt.geom.GeneralPath: void <init>()>();

        r6 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        r37 = null;

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: java.util.List getPoints()>();

        r38 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r34 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (java.awt.geom.Point2D) $r34;

        $d28 = virtualinvoke r39.<java.awt.geom.Point2D: double getX()>();

        d31 = $d28 + d2;

        $d29 = virtualinvoke r39.<java.awt.geom.Point2D: double getY()>();

        d30 = $d29 + d3;

        $r35 = r33.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: net.sourceforge.plantuml.EnsureVisible visible>;

        interfaceinvoke $r35.<net.sourceforge.plantuml.EnsureVisible: void ensureVisible(double,double)>(d31, d30);

        if r37 != null goto label02;

        $f24 = (float) d31;

        $f23 = (float) d30;

        virtualinvoke $r4.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f24, $f23);

        goto label03;

     label02:
        $f22 = (float) d31;

        $f21 = (float) d30;

        virtualinvoke $r4.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f22, $f21);

     label03:
        $r36 = new java.awt.geom.Point2D$Double;

        specialinvoke $r36.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d31, d30);

        r37 = $r36;

        goto label01;

     label04:
        if r37 == null goto label05;

        virtualinvoke $r4.<java.awt.geom.GeneralPath: void closePath()>();

     label05:
        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getDeltaShadow()>();

        $b0 = $d1 cmpl 0.0;

        if $b0 == 0 goto label07;

        $z1 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: boolean isTransparent(net.sourceforge.plantuml.ugraphic.color.HColor)>(r6);

        if $z1 == 0 goto label06;

        $d26 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getDeltaShadow()>();

        $d27 = r33.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: double dpiFactor>;

        virtualinvoke r33.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: void drawOnlyLineShadowSpecial(java.awt.Graphics2D,java.awt.Shape,double,double)>(r0, $r4, $d26, $d27);

        goto label07;

     label06:
        $d24 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getDeltaShadow()>();

        $d25 = r33.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: double dpiFactor>;

        virtualinvoke r33.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: void drawShadow(java.awt.Graphics2D,java.awt.Shape,double,double)>(r0, $r4, $d24, $d25);

     label07:
        $z2 = r6 instanceof net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        if $z2 == 0 goto label12;

        r40 = (net.sourceforge.plantuml.ugraphic.color.HColorGradient) r6;

        c1 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: char getPolicy()>();

        if c1 != 124 goto label08;

        $r28 = new java.awt.GradientPaint;

        $f15 = (float) d2;

        $d18 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getHeight()>();

        $d19 = d3 + $d18;

        $f16 = (float) $d19;

        $f17 = $f16 / 2.0F;

        $r29 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r30 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r29);

        $d20 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getWidth()>();

        $d21 = d2 + $d20;

        $f18 = (float) $d21;

        $d22 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getHeight()>();

        $d23 = d3 + $d22;

        $f19 = (float) $d23;

        $f20 = $f19 / 2.0F;

        $r31 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r32 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r31);

        specialinvoke $r28.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f15, $f17, $r30, $f18, $f20, $r32);

        r41 = $r28;

        goto label11;

     label08:
        if c1 != 92 goto label09;

        $r23 = new java.awt.GradientPaint;

        $f11 = (float) d2;

        $d14 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getHeight()>();

        $d15 = d3 + $d14;

        $f12 = (float) $d15;

        $r24 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r25 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r24);

        $d16 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getWidth()>();

        $d17 = d2 + $d16;

        $f13 = (float) $d17;

        $f14 = (float) d3;

        $r26 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r27 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r26);

        specialinvoke $r23.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f11, $f12, $r25, $f13, $f14, $r27);

        r41 = $r23;

        goto label11;

     label09:
        if c1 != 45 goto label10;

        $r18 = new java.awt.GradientPaint;

        $d8 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getWidth()>();

        $d9 = d2 + $d8;

        $f5 = (float) $d9;

        $f6 = $f5 / 2.0F;

        $f7 = (float) d3;

        $r19 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r20 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r19);

        $d10 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getWidth()>();

        $d11 = d2 + $d10;

        $f8 = (float) $d11;

        $f9 = $f8 / 2.0F;

        $d12 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getHeight()>();

        $d13 = d3 + $d12;

        $f10 = (float) $d13;

        $r21 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r22 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r21);

        specialinvoke $r18.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f6, $f7, $r20, $f9, $f10, $r22);

        r41 = $r18;

        goto label11;

     label10:
        $r13 = new java.awt.GradientPaint;

        $f1 = (float) d2;

        $f2 = (float) d3;

        $r14 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r15 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r14);

        $d4 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getWidth()>();

        $d5 = d2 + $d4;

        $f3 = (float) $d5;

        $d6 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPolygon: double getHeight()>();

        $d7 = d3 + $d6;

        $f4 = (float) $d7;

        $r16 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r17 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r16);

        specialinvoke $r13.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f1, $f2, $r15, $f3, $f4, $r17);

        r41 = $r13;

     label11:
        virtualinvoke r0.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r41);

        virtualinvoke r0.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r4);

        goto label13;

     label12:
        if r6 == null goto label13;

        $r12 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r6);

        virtualinvoke r0.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r12);

        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d: void managePattern(net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>(r2, r0);

        virtualinvoke r0.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r4);

     label13:
        $r42 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        if $r42 == null goto label14;

        $r10 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r11 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r10);

        virtualinvoke r0.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r11);

        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverLineG2d: void manageStroke(net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>(r2, r0);

        virtualinvoke r0.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r4);

     label14:
        return;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        java.awt.Graphics2D $r5;
        net.sourceforge.plantuml.ugraphic.UPolygon $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.UPolygon) r1;

        $r5 = (java.awt.Graphics2D) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d: void draw(net.sourceforge.plantuml.ugraphic.UPolygon,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
