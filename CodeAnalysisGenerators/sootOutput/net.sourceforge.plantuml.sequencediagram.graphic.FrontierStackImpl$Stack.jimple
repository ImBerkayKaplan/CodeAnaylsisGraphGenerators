class net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack extends java.lang.Object
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex current;
    private final net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex envelop;
    final net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl this$0;

    void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl, net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r1;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>(r1, r2, null);

        return;
    }

    private void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl, net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex, net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r1;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r2, r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        r3 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex current> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex envelop> = r3;

        return;
    }

    net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack addEnvelop(net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack r0, $r2, $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r1, r3, $r4, $r6, $r7, $r9;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl $r5, $r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex envelop>;

        if $r1 != null goto label1;

        $r8 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl this$0>;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex current>;

        specialinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>($r10, $r9, r3);

        return $r8;

     label1:
        $r2 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl this$0>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex current>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex envelop>;

        $r7 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex mergeMax(net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>(r3);

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>($r5, $r6, $r7);

        return $r2;
    }

    static net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex access$000(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r1;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex current>;

        return $r1;
    }

    static net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex access$100(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r1;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex envelop>;

        return $r1;
    }
}
