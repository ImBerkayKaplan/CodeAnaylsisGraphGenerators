public class net.sourceforge.plantuml.zopfli.Buffer extends java.lang.Object
{
    byte[] data;
    int size;
    private int bp;

    void <init>()
    {
        net.sourceforge.plantuml.zopfli.Buffer r0;
        byte[] $r1;

        r0 := @this: net.sourceforge.plantuml.zopfli.Buffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[65536];

        r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data> = $r1;

        return;
    }

    public byte[] getData()
    {
        net.sourceforge.plantuml.zopfli.Buffer r0;
        byte[] $r1;

        r0 := @this: net.sourceforge.plantuml.zopfli.Buffer;

        $r1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data>;

        return $r1;
    }

    public byte[] getResult()
    {
        net.sourceforge.plantuml.zopfli.Buffer r0;
        int $i0, $i1;
        byte[] r1, $r2;

        r0 := @this: net.sourceforge.plantuml.zopfli.Buffer;

        $i0 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data>;

        $i1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public int getSize()
    {
        net.sourceforge.plantuml.zopfli.Buffer r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.zopfli.Buffer;

        $i0 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        return $i0;
    }

    void append(byte)
    {
        net.sourceforge.plantuml.zopfli.Buffer r0;
        byte[] $r1, $r2, r3, $r4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7;
        byte b4;

        r0 := @this: net.sourceforge.plantuml.zopfli.Buffer;

        b4 := @parameter0: byte;

        $i1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        $r1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $i5 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        $i6 = $i5 * 2;

        r3 = newarray (byte)[$i6];

        $r4 = r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data>;

        $i7 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, $i7);

        r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data> = r3;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data>;

        $i2 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        $i3 = $i2 + 1;

        r0.<net.sourceforge.plantuml.zopfli.Buffer: int size> = $i3;

        $r2[$i2] = b4;

        return;
    }

    void addBits(int, int)
    {
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i10, $i12, $i13, $i14, i15;
        net.sourceforge.plantuml.zopfli.Buffer r0;
        byte[] $r1;
        byte $b9, $b11;

        r0 := @this: net.sourceforge.plantuml.zopfli.Buffer;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i15 = 0;

     label1:
        if i15 >= i0 goto label3;

        $i1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp>;

        if $i1 != 0 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.zopfli.Buffer: void append(byte)>(0);

     label2:
        $i3 = i2 >> i15;

        i4 = $i3 & 1;

        $r1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data>;

        $i5 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        $i6 = $i5 - 1;

        $b9 = $r1[$i6];

        $i7 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp>;

        $i8 = i4 << $i7;

        $i10 = $b9 | $i8;

        $b11 = (byte) $i10;

        $r1[$i6] = $b11;

        $i12 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp>;

        $i13 = $i12 + 1;

        $i14 = $i13 & 7;

        r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp> = $i14;

        i15 = i15 + 1;

        goto label1;

     label3:
        return;
    }

    void addHuffmanBits(int, int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i12, $i14, $i15, $i16, i17;
        net.sourceforge.plantuml.zopfli.Buffer r0;
        byte[] $r1;
        byte $b11, $b13;

        r0 := @this: net.sourceforge.plantuml.zopfli.Buffer;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i17 = 0;

     label1:
        if i17 >= i0 goto label3;

        $i1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp>;

        if $i1 != 0 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.zopfli.Buffer: void append(byte)>(0);

     label2:
        $i3 = i0 - i17;

        $i4 = $i3 - 1;

        $i5 = i2 >> $i4;

        i6 = $i5 & 1;

        $r1 = r0.<net.sourceforge.plantuml.zopfli.Buffer: byte[] data>;

        $i7 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int size>;

        $i8 = $i7 - 1;

        $b11 = $r1[$i8];

        $i9 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp>;

        $i10 = i6 << $i9;

        $i12 = $b11 | $i10;

        $b13 = (byte) $i12;

        $r1[$i8] = $b13;

        $i14 = r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp>;

        $i15 = $i14 + 1;

        $i16 = $i15 & 7;

        r0.<net.sourceforge.plantuml.zopfli.Buffer: int bp> = $i16;

        i17 = i17 + 1;

        goto label1;

     label3:
        return;
    }
}
