class net.sourceforge.plantuml.svek.extremity.ExtremityPlus extends net.sourceforge.plantuml.svek.extremity.Extremity
{
    private final net.sourceforge.plantuml.ugraphic.UEllipse circle;
    private final double px;
    private final double py;
    private static final double radius;
    private final double angle;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor;

    private void <init>(double, double, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityPlus r0;
        double d0, d1, d2;
        net.sourceforge.plantuml.ugraphic.UEllipse $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityPlus;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        d0 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.Extremity: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double angle> = d0;

        $r1 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(16.0, 16.0);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: net.sourceforge.plantuml.ugraphic.UEllipse circle> = $r1;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double px> = d1;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double py> = d2;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor> = r2;

        return;
    }

    public java.awt.geom.Point2D somePoint()
    {
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.svek.extremity.ExtremityPlus r1;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityPlus;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double px>;

        $d0 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double py>;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    public static net.sourceforge.plantuml.graphic.UDrawable create(java.awt.geom.Point2D, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        java.awt.geom.Point2D r0;
        double $d0, d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, d10;
        net.sourceforge.plantuml.svek.extremity.ExtremityPlus $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;

        r0 := @parameter0: java.awt.geom.Point2D;

        d1 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 - 8.0;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        $d4 = 8.0 * $d3;

        d5 = $d2 + $d4;

        $d6 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d7 = $d6 - 8.0;

        $d8 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d9 = 8.0 * $d8;

        d10 = $d7 - $d9;

        $r1 = new net.sourceforge.plantuml.svek.extremity.ExtremityPlus;

        specialinvoke $r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: void <init>(double,double,double,net.sourceforge.plantuml.ugraphic.color.HColor)>(d5, d10, d1, r2);

        return $r1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r4, $r6;
        net.sourceforge.plantuml.svek.extremity.ExtremityPlus r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2;
        net.sourceforge.plantuml.ugraphic.UBackground $r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        net.sourceforge.plantuml.ugraphic.UEllipse $r7;
        java.awt.geom.Point2D $r8, $r9, $r10, $r11;

        r1 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityPlus;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r4 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double px>;

        $d3 = $d0 + 0.0;

        $d1 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double py>;

        $d2 = $d1 + 0.0;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d3, $d2);

        $r6 = interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r7 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: net.sourceforge.plantuml.ugraphic.UEllipse circle>;

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r7);

        $d4 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double angle>;

        $d5 = $d4 - 1.5707963267948966;

        $r8 = specialinvoke r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: java.awt.geom.Point2D getPointOnCircle(double)>($d5);

        $d6 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double angle>;

        $d7 = $d6 + 1.5707963267948966;

        $r9 = specialinvoke r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: java.awt.geom.Point2D getPointOnCircle(double)>($d7);

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityPlus: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r0, 0.0, 0.0, $r8, $r9);

        $d8 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double angle>;

        $r10 = specialinvoke r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: java.awt.geom.Point2D getPointOnCircle(double)>($d8);

        $d9 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double angle>;

        $d10 = $d9 + 3.141592653589793;

        $r11 = specialinvoke r1.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: java.awt.geom.Point2D getPointOnCircle(double)>($d10);

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityPlus: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r0, 0.0, 0.0, $r10, $r11);

        return;
    }

    private java.awt.geom.Point2D getPointOnCircle(double)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityPlus r0;
        double $d0, d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, d10;
        java.awt.geom.Point2D$Double $r1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityPlus;

        d1 := @parameter0: double;

        $d0 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double px>;

        $d2 = $d0 + 8.0;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d4 = 8.0 * $d3;

        d5 = $d2 + $d4;

        $d6 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double py>;

        $d7 = $d6 + 8.0;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        $d9 = 8.0 * $d8;

        d10 = $d7 + $d9;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d5, d10);

        return $r1;
    }

    private static void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, d8, $d9, $d10, $d11;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.ULine $r5;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d6 := @parameter1: double;

        d8 := @parameter2: double;

        r1 := @parameter3: java.awt.geom.Point2D;

        r0 := @parameter4: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d5 = $d3 - $d4;

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d7 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d9 = d6 + $d7;

        $d10 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d11 = d8 + $d10;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d9, $d11);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = new net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(d2, d5);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.extremity.ExtremityPlus: double radius> = 8.0;

        return;
    }
}
