class net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow extends net.sourceforge.plantuml.sequencediagram.graphic.Arrow
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1;
    private final net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2;
    private final net.sourceforge.plantuml.skin.Component compAliveBox;
    static final boolean $assertionsDisabled;

    public void <init>(double, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.skin.ArrowComponent, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox, net.sourceforge.plantuml.Url, net.sourceforge.plantuml.skin.Component)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        double d0;
        net.sourceforge.plantuml.skin.rose.Rose r1;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.Url r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r4, r5, $r7, $r9;
        java.lang.Object $r6, $r8;
        net.sourceforge.plantuml.skin.Component r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.skin.rose.Rose;

        r2 := @parameter2: net.sourceforge.plantuml.skin.ArrowComponent;

        r4 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r5 := @parameter4: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r3 := @parameter5: net.sourceforge.plantuml.Url;

        r10 := @parameter6: net.sourceforge.plantuml.skin.Component;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void <init>(double,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.skin.ArrowComponent,net.sourceforge.plantuml.Url)>(d0, r1, r2, r3);

        if r4 != r5 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r11;

     label1:
        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r7 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r6;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1> = $r7;

        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        $r9 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r8;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2> = $r9;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.Component compAliveBox> = r10;

        return;
    }

    public double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, d2;
        boolean $z0;
        byte $b0;
        java.lang.AssertionError $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getRightEndInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d2 = $d0 - $d1;

        $z0 = <net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b0 = d2 cmpl 0.0;

        if $b0 > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return d2;
    }

    private double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r3;
        double $d0, $d1;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.NotePosition)>(r1, $r2);

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder,double)>(r1, $d0);

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()>();

        $d1 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos2()>();

        return $d1;
    }

    private double getRightEndInternal(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r3;
        double $d0, $d1, d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r5;
        byte $b0;
        net.sourceforge.plantuml.skin.Component $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.NotePosition)>(r1, $r2);

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder,double)>(r1, $d0);

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()>();

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getLength()>();

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d5 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        return $d5;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.Component compAliveBox>;

        d2 = interfaceinvoke $r6.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d3 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos2()>();

        $d4 = $d3 - d2;

        return $d4;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $d0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public int getDirection(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r1, $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r2, $r5;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double d0, d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        d1 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return -1;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.NotePosition)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        net.sourceforge.plantuml.sequencediagram.NotePosition r3, $r4, $r6, $r8, $r10;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r5, $r7, $r9, $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.NotePosition;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: int getDirection(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        if i0 != 1 goto label1;

        $r10 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if r3 != $r10 goto label1;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2>;

        return $r11;

     label1:
        if i0 != 1 goto label2;

        $r8 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if r3 != $r8 goto label2;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        return $r9;

     label2:
        if i0 != -1 goto label3;

        $r6 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if r3 != $r6 goto label3;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        return $r7;

     label3:
        if i0 != -1 goto label4;

        $r4 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if r3 != $r4 goto label4;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2>;

        return $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $d0;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r2;
        double $d0, $d1, d2;
        net.sourceforge.plantuml.skin.ArrowComponent $r3;
        net.sourceforge.plantuml.skin.Area $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r5;
        net.sourceforge.plantuml.skin.Context2D r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r7, r8;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d2 := @parameter1: double;

        r6 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r0 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r1 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getStartingY()>();

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d0, $d1);

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: void startUrl(net.sourceforge.plantuml.ugraphic.UGraphic)>(r8);

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $r4 = new net.sourceforge.plantuml.skin.Area;

        $r5 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.awt.geom.Dimension2D getActualDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        specialinvoke $r4.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5);

        interfaceinvoke $r3.<net.sourceforge.plantuml.skin.ArrowComponent: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r8, $r4, r6);

        virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: void endUrl(net.sourceforge.plantuml.ugraphic.UGraphic)>(r8);

        return;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getActualDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.skin.ArrowComponent $r3;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getPaddingArrowHead()>();

        $d2 = $d0 - $d1;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $d3 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d3);

        return $r0;
    }

    public double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1, r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.Dimension2DDouble $r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        java.awt.geom.Point2D $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $z0 = $r1 instanceof net.sourceforge.plantuml.skin.ArrowComponent;

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d2 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d2);

        $d3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getStartingY()>();

        $r6 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.ArrowComponent: java.awt.geom.Point2D getStartPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r4, $r3);

        $d4 = virtualinvoke $r6.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        return $d5;

     label1:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getStartingY()>();

        return $d0;
    }

    public double getArrowYEndLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1, $r2, r4;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.Dimension2DDouble $r5;
        java.awt.geom.Point2D $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $z0 = $r1 instanceof net.sourceforge.plantuml.skin.ArrowComponent;

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $r5 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d3 = interfaceinvoke r4.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d4 = interfaceinvoke r4.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        specialinvoke $r5.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d3, $d4);

        $d5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getStartingY()>();

        $r7 = interfaceinvoke r4.<net.sourceforge.plantuml.skin.ArrowComponent: java.awt.geom.Point2D getEndPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r3, $r5);

        $d6 = virtualinvoke $r7.<java.awt.geom.Point2D: double getY()>();

        $d7 = $d5 + $d6;

        return $d7;

     label1:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getStartingY()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getRightEndInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1;
        java.lang.String $r6;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/MessageArrow;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow: boolean $assertionsDisabled> = $z1;

        return;
    }
}
