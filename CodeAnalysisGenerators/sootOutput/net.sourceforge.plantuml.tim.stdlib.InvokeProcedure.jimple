public class net.sourceforge.plantuml.tim.stdlib.InvokeProcedure extends java.lang.Object implements net.sourceforge.plantuml.tim.TFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%invoke_procedure", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.TFunctionType getFunctionType()
    {
        net.sourceforge.plantuml.tim.TFunctionType $r0;
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        $r0 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType PROCEDURE>;

        return $r0;
    }

    public void executeProcedure(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.lang.String) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        net.sourceforge.plantuml.LineLocation r4;
        java.lang.String r5;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r4 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r5 := @parameter3: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void executeProcedureInternal(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0, r4;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2;
        java.lang.String r3, $r14;
        int $i0, $i1;
        net.sourceforge.plantuml.tim.TFunctionSignature $r5;
        net.sourceforge.plantuml.tim.TContext r7;
        net.sourceforge.plantuml.tim.TFunction r8;
        net.sourceforge.plantuml.tim.TMemory r9;
        java.util.Map r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        net.sourceforge.plantuml.tim.EaterException $r15;
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r16;

        r16 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        r7 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r9 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r0 := @parameter2: java.util.List;

        r10 := @parameter3: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r4 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(1, $i0);

        $r5 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        specialinvoke $r5.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>(r3, $i1);

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.TFunction getFunctionSmart(net.sourceforge.plantuml.tim.TFunctionSignature)>($r5);

        if r8 != null goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find void function ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r14);

        throw $r15;

     label1:
        interfaceinvoke r8.<net.sourceforge.plantuml.tim.TFunction: void executeProcedureInternal(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List,java.util.Map)>(r7, r9, r4, r10);

        return;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        net.sourceforge.plantuml.LineLocation r4;
        java.util.List r5;
        java.util.Map r6;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r4 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r5 := @parameter3: java.util.List;

        r6 := @parameter4: java.util.Map;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean isUnquoted()
    {
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        return 0;
    }
}
