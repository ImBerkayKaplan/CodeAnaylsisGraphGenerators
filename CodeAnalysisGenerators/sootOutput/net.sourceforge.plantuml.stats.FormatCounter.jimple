public class net.sourceforge.plantuml.stats.FormatCounter extends java.lang.Object
{
    private java.util.concurrent.ConcurrentMap data;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.stats.FormatCounter r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        net.sourceforge.plantuml.FileFormat[] r2;
        int i0, i1;
        net.sourceforge.plantuml.FileFormat r3;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.lang.String r5, $r7, r9;
        net.sourceforge.plantuml.api.NumberAnalyzed $r10;
        java.util.concurrent.ConcurrentMap $r11;

        r0 := @this: net.sourceforge.plantuml.stats.FormatCounter;

        r5 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.stats.FormatCounter: java.util.concurrent.ConcurrentMap data> = $r1;

        r2 = staticinvoke <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat[] values()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.FileFormat: java.lang.String name()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = r0.<net.sourceforge.plantuml.stats.FormatCounter: java.util.concurrent.ConcurrentMap data>;

        $r10 = new net.sourceforge.plantuml.api.NumberAnalyzed;

        specialinvoke $r10.<net.sourceforge.plantuml.api.NumberAnalyzed: void <init>(java.lang.String)>(r9);

        interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r10);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void plusOne(net.sourceforge.plantuml.FileFormat, long)
    {
        net.sourceforge.plantuml.stats.FormatCounter r0;
        net.sourceforge.plantuml.FileFormat r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.api.NumberAnalyzed r4;
        long l0;

        r0 := @this: net.sourceforge.plantuml.stats.FormatCounter;

        r1 := @parameter0: net.sourceforge.plantuml.FileFormat;

        l0 := @parameter1: long;

        $r2 = r0.<net.sourceforge.plantuml.stats.FormatCounter: java.util.concurrent.ConcurrentMap data>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.sourceforge.plantuml.api.NumberAnalyzed) $r3;

        virtualinvoke r4.<net.sourceforge.plantuml.api.NumberAnalyzed: void addValue(long)>(l0);

        return;
    }

    private net.sourceforge.plantuml.stats.api.StatsLine createLine(java.lang.String, net.sourceforge.plantuml.api.NumberAnalyzed)
    {
        java.util.EnumMap $r0;
        java.lang.String r2;
        net.sourceforge.plantuml.stats.api.StatsColumn $r3, $r6, $r9, $r12, $r15;
        net.sourceforge.plantuml.api.NumberAnalyzed r5;
        long $l0, $l1, $l2, $l3;
        java.lang.Long $r7, $r10, $r13, $r16;
        net.sourceforge.plantuml.stats.StatsLineImpl $r18;
        net.sourceforge.plantuml.stats.FormatCounter r19;

        r19 := @this: net.sourceforge.plantuml.stats.FormatCounter;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: net.sourceforge.plantuml.api.NumberAnalyzed;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/stats/api/StatsColumn;");

        $r3 = <net.sourceforge.plantuml.stats.api.StatsColumn: net.sourceforge.plantuml.stats.api.StatsColumn FORMAT>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        $r6 = <net.sourceforge.plantuml.stats.api.StatsColumn: net.sourceforge.plantuml.stats.api.StatsColumn GENERATED_COUNT>;

        $l0 = virtualinvoke r5.<net.sourceforge.plantuml.api.NumberAnalyzed: long getNb()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r9 = <net.sourceforge.plantuml.stats.api.StatsColumn: net.sourceforge.plantuml.stats.api.StatsColumn GENERATED_MEAN_TIME>;

        $l1 = virtualinvoke r5.<net.sourceforge.plantuml.api.NumberAnalyzed: long getMean()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r12 = <net.sourceforge.plantuml.stats.api.StatsColumn: net.sourceforge.plantuml.stats.api.StatsColumn GENERATED_STANDARD_DEVIATION>;

        $l2 = virtualinvoke r5.<net.sourceforge.plantuml.api.NumberAnalyzed: long getStandardDeviation()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r15 = <net.sourceforge.plantuml.stats.api.StatsColumn: net.sourceforge.plantuml.stats.api.StatsColumn GENERATED_MAX_TIME>;

        $l3 = virtualinvoke r5.<net.sourceforge.plantuml.api.NumberAnalyzed: long getMax()>();

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r18 = new net.sourceforge.plantuml.stats.StatsLineImpl;

        specialinvoke $r18.<net.sourceforge.plantuml.stats.StatsLineImpl: void <init>(java.util.Map)>($r0);

        return $r18;
    }

    public net.sourceforge.plantuml.stats.api.StatsTable getStatsTable(java.lang.String)
    {
        net.sourceforge.plantuml.stats.StatsTableImpl $r0;
        java.lang.String r1, $r16;
        net.sourceforge.plantuml.api.NumberAnalyzed $r3, r13;
        net.sourceforge.plantuml.stats.FormatCounter r5;
        java.util.concurrent.ConcurrentMap $r6;
        java.util.Set $r7;
        java.util.Iterator r8;
        boolean $z0;
        net.sourceforge.plantuml.stats.api.StatsLine $r9, $r17;
        java.lang.Object $r10, $r12, $r14;
        java.util.Map$Entry r11;
        long $l0;
        byte $b1;
        net.sourceforge.plantuml.FileFormat $r15;

        r5 := @this: net.sourceforge.plantuml.stats.FormatCounter;

        r1 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.stats.StatsTableImpl;

        specialinvoke $r0.<net.sourceforge.plantuml.stats.StatsTableImpl: void <init>(java.lang.String)>(r1);

        $r3 = new net.sourceforge.plantuml.api.NumberAnalyzed;

        specialinvoke $r3.<net.sourceforge.plantuml.api.NumberAnalyzed: void <init>()>();

        $r6 = r5.<net.sourceforge.plantuml.stats.FormatCounter: java.util.concurrent.ConcurrentMap data>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>();

        r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (net.sourceforge.plantuml.api.NumberAnalyzed) $r12;

        $l0 = virtualinvoke r13.<net.sourceforge.plantuml.api.NumberAnalyzed: long getNb()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $r14 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (net.sourceforge.plantuml.FileFormat) $r14;

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.FileFormat: java.lang.String name()>();

        $r17 = specialinvoke r5.<net.sourceforge.plantuml.stats.FormatCounter: net.sourceforge.plantuml.stats.api.StatsLine createLine(java.lang.String,net.sourceforge.plantuml.api.NumberAnalyzed)>($r16, r13);

        virtualinvoke $r0.<net.sourceforge.plantuml.stats.StatsTableImpl: void addLine(net.sourceforge.plantuml.stats.api.StatsLine)>($r17);

        virtualinvoke $r3.<net.sourceforge.plantuml.api.NumberAnalyzed: void add(net.sourceforge.plantuml.api.NumberAnalyzed)>(r13);

     label2:
        goto label1;

     label3:
        $r9 = specialinvoke r5.<net.sourceforge.plantuml.stats.FormatCounter: net.sourceforge.plantuml.stats.api.StatsLine createLine(java.lang.String,net.sourceforge.plantuml.api.NumberAnalyzed)>("Total", $r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.stats.StatsTableImpl: void addLine(net.sourceforge.plantuml.stats.api.StatsLine)>($r9);

        return $r0;
    }

    public void reload(java.lang.String, java.util.prefs.Preferences) throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.Preferences r0;
        java.lang.String[] r1;
        int i0, $i1, i2;
        java.lang.String r2, r3, $r5, r11;
        boolean $z0;
        net.sourceforge.plantuml.api.NumberAnalyzed r4;
        net.sourceforge.plantuml.FileFormat r6;
        net.sourceforge.plantuml.stats.FormatCounter r7;
        java.util.concurrent.ConcurrentMap $r8;
        java.lang.Exception $r10;

        r7 := @this: net.sourceforge.plantuml.stats.FormatCounter;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.prefs.Preferences;

        r1 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String[] keys()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        r2 = r1[i2];

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z0 == 0 goto label5;

     label2:
        r11 = staticinvoke <net.sourceforge.plantuml.stats.FormatCounter: java.lang.String removeDotSaved(java.lang.String)>(r2);

        r4 = staticinvoke <net.sourceforge.plantuml.api.NumberAnalyzed: net.sourceforge.plantuml.api.NumberAnalyzed load(java.lang.String,java.util.prefs.Preferences)>(r11, r0);

        if r4 == null goto label3;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $r5 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i1);

        r6 = staticinvoke <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat valueOf(java.lang.String)>($r5);

        $r8 = r7.<net.sourceforge.plantuml.stats.FormatCounter: java.util.concurrent.ConcurrentMap data>;

        interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r4);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    static java.lang.String removeDotSaved(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = ".saved";

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;
    }

    public void save(java.util.prefs.Preferences, net.sourceforge.plantuml.FileFormat)
    {
        net.sourceforge.plantuml.stats.FormatCounter r0;
        net.sourceforge.plantuml.FileFormat r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Object $r3;
        java.util.prefs.Preferences r4;
        net.sourceforge.plantuml.api.NumberAnalyzed $r5;

        r0 := @this: net.sourceforge.plantuml.stats.FormatCounter;

        r4 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: net.sourceforge.plantuml.FileFormat;

        $r2 = r0.<net.sourceforge.plantuml.stats.FormatCounter: java.util.concurrent.ConcurrentMap data>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (net.sourceforge.plantuml.api.NumberAnalyzed) $r3;

        virtualinvoke $r5.<net.sourceforge.plantuml.api.NumberAnalyzed: void save(java.util.prefs.Preferences)>(r4);

        return;
    }
}
