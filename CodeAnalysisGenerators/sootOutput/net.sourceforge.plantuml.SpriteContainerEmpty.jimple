public class net.sourceforge.plantuml.SpriteContainerEmpty extends java.lang.Object implements net.sourceforge.plantuml.SpriteContainer, net.sourceforge.plantuml.ISkinSimple
{

    public void <init>()
    {
        net.sourceforge.plantuml.SpriteContainerEmpty r0;

        r0 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.sprite.Sprite getSprite(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.sprite.Sprite $r1;
        net.sourceforge.plantuml.SpriteContainerEmpty r2;

        r2 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <net.sourceforge.plantuml.sprite.SpriteImage: net.sourceforge.plantuml.sprite.Sprite fromInternal(java.lang.String)>(r0);

        return $r1;
    }

    public java.lang.String getValue(java.lang.String)
    {
        net.sourceforge.plantuml.SpriteContainerEmpty r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public double getPadding()
    {
        net.sourceforge.plantuml.SpriteContainerEmpty r0;

        r0 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        return 0.0;
    }

    public net.sourceforge.plantuml.Guillemet guillemet()
    {
        net.sourceforge.plantuml.Guillemet $r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        $r0 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        return $r0;
    }

    public java.lang.String getMonospacedFamily()
    {
        net.sourceforge.plantuml.SpriteContainerEmpty r0;

        r0 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        return "monospaced";
    }

    public int getTabSize()
    {
        net.sourceforge.plantuml.SpriteContainerEmpty r0;

        r0 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        return 8;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        $r0 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        return $r0;
    }

    public int getDpi()
    {
        net.sourceforge.plantuml.SpriteContainerEmpty r0;

        r0 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        return 96;
    }

    public net.sourceforge.plantuml.LineBreakStrategy wrapWidth()
    {
        net.sourceforge.plantuml.LineBreakStrategy $r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        $r0 = <net.sourceforge.plantuml.LineBreakStrategy: net.sourceforge.plantuml.LineBreakStrategy NONE>;

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.color.ColorMapper getColorMapper()
    {
        net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity $r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        $r0 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity: void <init>()>();

        return $r0;
    }

    public void copyAllFrom(net.sourceforge.plantuml.ISkinSimple)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;
        net.sourceforge.plantuml.ISkinSimple r2;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        r2 := @parameter0: net.sourceforge.plantuml.ISkinSimple;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.Map values()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public double minClassWidth()
    {
        net.sourceforge.plantuml.SpriteContainerEmpty r0;

        r0 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        return 0.0;
    }

    public java.lang.String transformStringForSizeHack(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()
    {
        net.sourceforge.plantuml.api.ThemeStyle $r0;
        net.sourceforge.plantuml.SpriteContainerEmpty r1;

        r1 := @this: net.sourceforge.plantuml.SpriteContainerEmpty;

        $r0 = <net.sourceforge.plantuml.api.ThemeStyle: net.sourceforge.plantuml.api.ThemeStyle LIGHT_REGULAR>;

        return $r0;
    }
}
