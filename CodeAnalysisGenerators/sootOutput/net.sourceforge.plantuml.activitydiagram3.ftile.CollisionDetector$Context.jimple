class net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context extends java.lang.Object
{
    private final java.util.List rectangles;
    private final java.util.List snakes;
    private boolean manageSnakes;

    void <init>()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List rectangles> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List snakes> = $r2;

        return;
    }

    public void drawDebug(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        java.util.List $r1, $r4, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.ugraphic.UGraphic $r2, r12, r16;
        net.sourceforge.plantuml.ugraphic.UStroke $r3;
        java.lang.Object $r5, $r9, $r11;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r6;
        java.util.Iterator r8, r13, r17;
        java.awt.geom.Line2D r10;
        net.sourceforge.plantuml.ugraphic.MinMax r14;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple r15;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List rectangles>;

        r13 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.ugraphic.MinMax) $r11;

        $z4 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: boolean collision(net.sourceforge.plantuml.ugraphic.MinMax)>(r14);

        if $z4 == 0 goto label2;

        virtualinvoke r14.<net.sourceforge.plantuml.ugraphic.MinMax: void drawGray(net.sourceforge.plantuml.ugraphic.UGraphic)>(r12);

     label2:
        goto label1;

     label3:
        r15 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        $r2 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r15);

        $r3 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(5.0);

        r16 = interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List snakes>;

        r17 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r5 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.activitydiagram3.ftile.Snake) $r5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List getHorizontalLines()>();

        r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.awt.geom.Line2D) $r9;

        $z3 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: boolean collision(java.awt.geom.Line2D)>(r10);

        if $z3 == 0 goto label6;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Line2D)>(r16, r10);

     label6:
        goto label5;

     label7:
        goto label4;

     label8:
        return;
    }

    private void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.Line2D)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate $r0;
        java.awt.geom.Line2D r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.ULine $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, r5;

        r3 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 := @parameter1: java.awt.geom.Line2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r1.<java.awt.geom.Line2D: double getX1()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Line2D: double getY1()>();

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d0, $d1);

        r5 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $r2 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d2 = virtualinvoke r1.<java.awt.geom.Line2D: double getX2()>();

        $d3 = virtualinvoke r1.<java.awt.geom.Line2D: double getX1()>();

        $d4 = $d2 - $d3;

        $d5 = virtualinvoke r1.<java.awt.geom.Line2D: double getY2()>();

        $d6 = virtualinvoke r1.<java.awt.geom.Line2D: double getY1()>();

        $d7 = $d5 - $d6;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>($d4, $d7);

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

        return;
    }

    private boolean collision(java.awt.geom.Line2D)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.ugraphic.MinMax r4;
        java.awt.geom.Line2D r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        r5 := @parameter0: java.awt.geom.Line2D;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List rectangles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.ugraphic.MinMax) $r3;

        $z1 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: boolean access$000(net.sourceforge.plantuml.ugraphic.MinMax,java.awt.geom.Line2D)>(r4, r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean collision(net.sourceforge.plantuml.ugraphic.MinMax)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        java.util.List $r1, $r5;
        java.util.Iterator r2, r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r4;
        java.awt.geom.Line2D r8;
        net.sourceforge.plantuml.ugraphic.MinMax r9;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMax;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List snakes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.activitydiagram3.ftile.Snake) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List getHorizontalLines()>();

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.awt.geom.Line2D) $r7;

        $z2 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector: boolean access$000(net.sourceforge.plantuml.ugraphic.MinMax,java.awt.geom.Line2D)>(r9, r8);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return 0;
    }

    static boolean access$100(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        boolean $z0;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        $z0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: boolean manageSnakes>;

        return $z0;
    }

    static java.util.List access$200(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        java.util.List $r1;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List snakes>;

        return $r1;
    }

    static java.util.List access$300(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        java.util.List $r1;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: java.util.List rectangles>;

        return $r1;
    }

    static boolean access$102(net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context, boolean)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context r0;
        boolean z0;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context;

        z0 := @parameter1: boolean;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector$Context: boolean manageSnakes> = z0;

        return z0;
    }
}
