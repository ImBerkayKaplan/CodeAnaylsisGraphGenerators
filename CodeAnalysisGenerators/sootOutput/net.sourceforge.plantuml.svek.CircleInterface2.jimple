public class net.sourceforge.plantuml.svek.CircleInterface2 extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private final double margin;
    private final double radius;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor;
    private final net.sourceforge.plantuml.ugraphic.color.HColor foregroundColor;
    private final double deltaShadow;

    public void <init>(net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, double)
    {
        net.sourceforge.plantuml.svek.CircleInterface2 r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1, r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.CircleInterface2;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        d0 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.CircleInterface2: double radius> = 8.0;

        r0.<net.sourceforge.plantuml.svek.CircleInterface2: double margin> = 1.0;

        r0.<net.sourceforge.plantuml.svek.CircleInterface2: double margin> = 1.0;

        r0.<net.sourceforge.plantuml.svek.CircleInterface2: double radius> = 8.0;

        r0.<net.sourceforge.plantuml.svek.CircleInterface2: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor> = r1;

        r0.<net.sourceforge.plantuml.svek.CircleInterface2: net.sourceforge.plantuml.ugraphic.color.HColor foregroundColor> = r2;

        r0.<net.sourceforge.plantuml.svek.CircleInterface2: double deltaShadow> = d0;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.CircleInterface2 r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, $r4;
        net.sourceforge.plantuml.ugraphic.UBackground $r2;
        net.sourceforge.plantuml.ugraphic.UGraphic $r3, $r8, r9, r10;
        net.sourceforge.plantuml.ugraphic.UEllipse $r5;
        double $d0, d3, d4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7;

        r0 := @this: net.sourceforge.plantuml.svek.CircleInterface2;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d3 = 0.0 + 1.0;

        d4 = 0.0 + 1.0;

        $r1 = r0.<net.sourceforge.plantuml.svek.CircleInterface2: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r3 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r4 = r0.<net.sourceforge.plantuml.svek.CircleInterface2: net.sourceforge.plantuml.ugraphic.color.HColor foregroundColor>;

        r10 = interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        $r5 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(16.0, 16.0);

        $d0 = r0.<net.sourceforge.plantuml.svek.CircleInterface2: double deltaShadow>;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d0);

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d3, d4);

        $r8 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.CircleInterface2 r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.CircleInterface2;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(18.0, 18.0);

        return $r0;
    }
}
