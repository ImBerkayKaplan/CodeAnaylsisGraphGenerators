class net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.graphic.Frontier
{
    private final double freeY;

    public void <init>(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple: double freeY> = d0;

        return;
    }

    public double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple r2;
        double $d0;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $d0 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple: double freeY>;

        return $d0;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple add(double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple $r2, r3;
        double d0, $d1, $d2;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple;

        d0 := @parameter0: double;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r2 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple;

        $d1 = r3.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple: double freeY>;

        $d2 = $d1 + d0;

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple: void <init>(double)>($d2);

        return $r2;
    }

    public volatile net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple r0, $r2;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple: net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d0, r1);

        return $r2;
    }
}
