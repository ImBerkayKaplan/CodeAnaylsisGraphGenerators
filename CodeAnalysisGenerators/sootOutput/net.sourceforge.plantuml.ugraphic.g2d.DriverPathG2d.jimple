public class net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d extends net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d implements net.sourceforge.plantuml.ugraphic.UDriver
{
    private final double dpiFactor;

    public void <init>(double)
    {
        net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d: double dpiFactor> = d0;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UPath, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.awt.Graphics2D)
    {
        net.sourceforge.plantuml.ugraphic.UParam r0;
        java.awt.Graphics2D r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2, $r7, $r11, $r13, $r16, $r18, $r21, $r23, $r26, $r28, $r31, $r48;
        net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath $r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61;
        net.sourceforge.plantuml.ugraphic.UPath r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r6;
        java.awt.Color $r8, $r9, $r12, $r14, $r17, $r19, $r22, $r24, $r27, $r29, $r32;
        java.awt.GradientPaint $r10, $r15, $r20, $r25, r47;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d r30;
        java.lang.Object $r33;
        double[] r34;
        net.sourceforge.plantuml.ugraphic.USegmentType $r35, $r36, $r37, $r38, r44;
        java.lang.UnsupportedOperationException $r39;
        net.sourceforge.plantuml.ugraphic.MinMax r40, r41;
        java.util.Iterator r42;
        net.sourceforge.plantuml.ugraphic.USegment r43;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient r46;
        char c3;

        r30 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UPath;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r6 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r0 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r1 := @parameter5: java.awt.Graphics2D;

        staticinvoke <net.sourceforge.plantuml.ugraphic.g2d.DriverLineG2d: void manageStroke(net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>(r0, r1);

        r2 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $r3 = new net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath: void <init>()>();

        r40 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(0);

        r41 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>(d0, d1);

        r42 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UPath: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r33 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (net.sourceforge.plantuml.ugraphic.USegment) $r33;

        r44 = virtualinvoke r43.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegmentType getSegmentType()>();

        r34 = virtualinvoke r43.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $r35 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        if r44 != $r35 goto label02;

        $d47 = r34[0];

        $d50 = d0 + $d47;

        $d48 = r34[1];

        $d49 = d1 + $d48;

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath: void moveTo(double,double)>($d50, $d49);

        $d51 = r34[0];

        $d54 = d0 + $d51;

        $d52 = r34[1];

        $d53 = d1 + $d52;

        r41 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d54, $d53);

        goto label10;

     label02:
        $r36 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        if r44 != $r36 goto label03;

        $d39 = r34[0];

        $d42 = d0 + $d39;

        $d40 = r34[1];

        $d41 = d1 + $d40;

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath: void lineTo(double,double)>($d42, $d41);

        $d43 = r34[0];

        $d46 = d0 + $d43;

        $d44 = r34[1];

        $d45 = d1 + $d44;

        r41 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d46, $d45);

        goto label10;

     label03:
        $r37 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        if r44 != $r37 goto label04;

        $d23 = r34[0];

        $d34 = d0 + $d23;

        $d24 = r34[1];

        $d33 = d1 + $d24;

        $d25 = r34[2];

        $d32 = d0 + $d25;

        $d26 = r34[3];

        $d31 = d1 + $d26;

        $d27 = r34[4];

        $d30 = d0 + $d27;

        $d28 = r34[5];

        $d29 = d1 + $d28;

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath: void curveTo(double,double,double,double,double,double)>($d34, $d33, $d32, $d31, $d30, $d29);

        $d35 = r34[4];

        $d38 = d0 + $d35;

        $d36 = r34[5];

        $d37 = d1 + $d36;

        r41 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d38, $d37);

        goto label10;

     label04:
        $r38 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        if r44 != $r38 goto label09;

        $d55 = r34[0];

        $d56 = r34[1];

        $d57 = r34[2];

        $d21 = r34[3];

        $b1 = $d21 cmpl 0.0;

        if $b1 == 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        $d22 = r34[4];

        $b2 = $d22 cmpl 0.0;

        if $b2 == 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        $d58 = r34[5];

        $d59 = d0 + $d58;

        $d60 = r34[6];

        $d61 = d1 + $d60;

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath: void arcTo(double,double,double,boolean,boolean,double,double)>($d55, $d56, $d57, $z3, $z4, $d59, $d61);

        goto label10;

     label09:
        $r39 = new java.lang.UnsupportedOperationException;

        specialinvoke $r39.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r39;

     label10:
        goto label01;

     label11:
        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UPath: boolean isOpenIconic()>();

        if $z1 == 0 goto label12;

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.g2d.ExtendedGeneralPath: void closePath()>();

        $r31 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r32 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r31);

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r32);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r3);

        return;

     label12:
        $d2 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UPath: double getDeltaShadow()>();

        $b0 = $d2 cmpl 0.0;

        if $b0 == 0 goto label15;

        if r2 == null goto label13;

        $z2 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: boolean isTransparent(net.sourceforge.plantuml.ugraphic.color.HColor)>(r2);

        if $z2 == 0 goto label14;

     label13:
        $d17 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UPath: double getDeltaShadow()>();

        $d18 = r30.<net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d: double dpiFactor>;

        virtualinvoke r30.<net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d: void drawOnlyLineShadowSpecial(java.awt.Graphics2D,java.awt.Shape,double,double)>(r1, $r3, $d17, $d18);

        goto label15;

     label14:
        $d19 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UPath: double getDeltaShadow()>();

        $d20 = r30.<net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d: double dpiFactor>;

        virtualinvoke r30.<net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d: void drawShadow(java.awt.Graphics2D,java.awt.Shape,double,double)>(r1, $r3, $d19, $d20);

     label15:
        $z5 = r2 instanceof net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        if $z5 == 0 goto label20;

        r46 = (net.sourceforge.plantuml.ugraphic.color.HColorGradient) r2;

        c3 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: char getPolicy()>();

        if c3 != 124 goto label16;

        $r25 = new java.awt.GradientPaint;

        $d13 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $f14 = (float) $d13;

        $d14 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $f15 = (float) $d14;

        $f16 = $f15 / 2.0F;

        $r26 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r27 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r26);

        $d15 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $f17 = (float) $d15;

        $d16 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $f18 = (float) $d16;

        $f19 = $f18 / 2.0F;

        $r28 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r29 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r28);

        specialinvoke $r25.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f14, $f16, $r27, $f17, $f19, $r29);

        r47 = $r25;

        goto label19;

     label16:
        if c3 != 92 goto label17;

        $r20 = new java.awt.GradientPaint;

        $d9 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $f10 = (float) $d9;

        $d10 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $f11 = (float) $d10;

        $r21 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r22 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r21);

        $d11 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $f12 = (float) $d11;

        $d12 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $f13 = (float) $d12;

        $r23 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r24 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r23);

        specialinvoke $r20.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f10, $f11, $r22, $f12, $f13, $r24);

        r47 = $r20;

        goto label19;

     label17:
        if c3 != 45 goto label18;

        $r15 = new java.awt.GradientPaint;

        $d5 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $f4 = (float) $d5;

        $f5 = $f4 / 2.0F;

        $d6 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $f6 = (float) $d6;

        $r16 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r17 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r16);

        $d7 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $f7 = (float) $d7;

        $f8 = $f7 / 2.0F;

        $d8 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $f9 = (float) $d8;

        $r18 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r19 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r18);

        specialinvoke $r15.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f5, $f6, $r17, $f8, $f9, $r19);

        r47 = $r15;

        goto label19;

     label18:
        $r10 = new java.awt.GradientPaint;

        $f0 = (float) d0;

        $f1 = (float) d1;

        $r11 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r12 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r11);

        $d3 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $f2 = (float) $d3;

        $d4 = virtualinvoke r41.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $f3 = (float) $d4;

        $r13 = virtualinvoke r46.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r14 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r13);

        specialinvoke $r10.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>($f0, $f1, $r12, $f2, $f3, $r14);

        r47 = $r10;

     label19:
        virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r47);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r3);

        goto label21;

     label20:
        if r2 == null goto label21;

        $r9 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r2);

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r9);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r3);

     label21:
        $r48 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        if $r48 == null goto label22;

        $r7 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r8 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r7);

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r8);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r3);

     label22:
        return;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        java.awt.Graphics2D $r5;
        net.sourceforge.plantuml.ugraphic.UPath $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.UPath) r1;

        $r5 = (java.awt.Graphics2D) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d: void draw(net.sourceforge.plantuml.ugraphic.UPath,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,java.awt.Graphics2D)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
