class net.sourceforge.plantuml.json.JsonObject$1 extends java.lang.Object implements java.util.Iterator
{
    final java.util.Iterator val$namesIterator;
    final java.util.Iterator val$valuesIterator;
    final net.sourceforge.plantuml.json.JsonObject this$0;

    void <init>(net.sourceforge.plantuml.json.JsonObject, java.util.Iterator, java.util.Iterator)
    {
        net.sourceforge.plantuml.json.JsonObject$1 r0;
        net.sourceforge.plantuml.json.JsonObject r1;
        java.util.Iterator r2, r3;

        r0 := @this: net.sourceforge.plantuml.json.JsonObject$1;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonObject;

        r2 := @parameter1: java.util.Iterator;

        r3 := @parameter2: java.util.Iterator;

        r0.<net.sourceforge.plantuml.json.JsonObject$1: net.sourceforge.plantuml.json.JsonObject this$0> = r1;

        r0.<net.sourceforge.plantuml.json.JsonObject$1: java.util.Iterator val$namesIterator> = r2;

        r0.<net.sourceforge.plantuml.json.JsonObject$1: java.util.Iterator val$valuesIterator> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasNext()
    {
        net.sourceforge.plantuml.json.JsonObject$1 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonObject$1;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonObject$1: java.util.Iterator val$namesIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public net.sourceforge.plantuml.json.JsonObject$Member next()
    {
        net.sourceforge.plantuml.json.JsonObject$1 r0;
        java.util.Iterator $r1, $r4;
        java.lang.Object $r2, $r5;
        java.lang.String r3;
        net.sourceforge.plantuml.json.JsonValue r6;
        net.sourceforge.plantuml.json.JsonObject$Member $r7;

        r0 := @this: net.sourceforge.plantuml.json.JsonObject$1;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonObject$1: java.util.Iterator val$namesIterator>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = r0.<net.sourceforge.plantuml.json.JsonObject$1: java.util.Iterator val$valuesIterator>;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.json.JsonValue) $r5;

        $r7 = new net.sourceforge.plantuml.json.JsonObject$Member;

        specialinvoke $r7.<net.sourceforge.plantuml.json.JsonObject$Member: void <init>(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r3, r6);

        return $r7;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.json.JsonObject$1 r1;

        r1 := @this: net.sourceforge.plantuml.json.JsonObject$1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        net.sourceforge.plantuml.json.JsonObject$1 r0;
        net.sourceforge.plantuml.json.JsonObject$Member $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonObject$1;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonObject$1: net.sourceforge.plantuml.json.JsonObject$Member next()>();

        return $r1;
    }
}
