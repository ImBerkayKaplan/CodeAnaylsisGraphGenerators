public final enum class net.sourceforge.plantuml.zopfli.Options$BlockSplitting extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.zopfli.Options$BlockSplitting FIRST;
    public static final enum net.sourceforge.plantuml.zopfli.Options$BlockSplitting LAST;
    public static final enum net.sourceforge.plantuml.zopfli.Options$BlockSplitting NONE;
    private static final net.sourceforge.plantuml.zopfli.Options$BlockSplitting[] $VALUES;

    public static net.sourceforge.plantuml.zopfli.Options$BlockSplitting[] values()
    {
        net.sourceforge.plantuml.zopfli.Options$BlockSplitting[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.zopfli.Options$BlockSplitting[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.zopfli.Options$BlockSplitting valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.zopfli.Options$BlockSplitting $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/zopfli/Options$BlockSplitting;", r0);

        $r2 = (net.sourceforge.plantuml.zopfli.Options$BlockSplitting) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.zopfli.Options$BlockSplitting r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.zopfli.Options$BlockSplitting;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.zopfli.Options$BlockSplitting $r0, $r1, $r2, $r4, $r5, $r6;
        net.sourceforge.plantuml.zopfli.Options$BlockSplitting[] $r3;

        $r0 = new net.sourceforge.plantuml.zopfli.Options$BlockSplitting;

        specialinvoke $r0.<net.sourceforge.plantuml.zopfli.Options$BlockSplitting: void <init>(java.lang.String,int)>("FIRST", 0);

        <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting FIRST> = $r0;

        $r1 = new net.sourceforge.plantuml.zopfli.Options$BlockSplitting;

        specialinvoke $r1.<net.sourceforge.plantuml.zopfli.Options$BlockSplitting: void <init>(java.lang.String,int)>("LAST", 1);

        <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting LAST> = $r1;

        $r2 = new net.sourceforge.plantuml.zopfli.Options$BlockSplitting;

        specialinvoke $r2.<net.sourceforge.plantuml.zopfli.Options$BlockSplitting: void <init>(java.lang.String,int)>("NONE", 2);

        <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting NONE> = $r2;

        $r3 = newarray (net.sourceforge.plantuml.zopfli.Options$BlockSplitting)[3];

        $r4 = <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting FIRST>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting LAST>;

        $r3[1] = $r5;

        $r6 = <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting NONE>;

        $r3[2] = $r6;

        <net.sourceforge.plantuml.zopfli.Options$BlockSplitting: net.sourceforge.plantuml.zopfli.Options$BlockSplitting[] $VALUES> = $r3;

        return;
    }
}
