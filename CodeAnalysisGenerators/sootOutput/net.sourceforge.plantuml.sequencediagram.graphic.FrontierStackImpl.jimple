class net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack
{
    private final java.util.List all;

    public void <init>(double, int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r2;
        double d0;
        int i0;
        java.util.List $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r2 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: void <init>(double,int)>(d0, i0);

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>(r0, $r2);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all> = $r4;

        return;
    }

    private void <init>(java.util.List)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r0;
        java.util.List r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all> = $r2;

        return;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex getLast()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack) $r3;

        $r5 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex access$000(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack)>($r4);

        return $r5;
    }

    public double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex getLast()>();

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r2);

        return $d0;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl add(double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r1, $r10;
        java.util.List $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r5, $r7;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r6;
        int $i0, $i1;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        d0 := @parameter0: double;

        r6 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r5 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex getLast()>();

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d0, r6);

        specialinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>(r1, $r7);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, $r4);

        $r10 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        specialinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: void <init>(java.util.List)>($r0);

        return $r10;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack openBar()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r1, $r8;
        java.util.List $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r5, $r6;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r5 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex getLast()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex copy()>();

        specialinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>(r1, $r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r8 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        specialinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: void <init>(java.util.List)>($r0);

        return $r8;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack restore()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r1, $r16;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r4, $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack r5, r7, $r9, $r12;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r8, $r13, $r14;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = $i0 - 2;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        r5 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack) $r4;

        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i3);

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack) $r6;

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i5 = $i4 - 2;

        $r8 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex access$000(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack)>(r7);

        $r9 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack addEnvelop(net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>($r8);

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i5, $r9);

        $i6 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>($i7);

        $r12 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r13 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex access$000(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack)>(r5);

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex copy()>();

        specialinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>(r1, $r14);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r16 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        specialinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: void <init>(java.util.List)>($r0);

        return $r16;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack closeBar()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r1, $r14;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r4, $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack r5, r7, r9, $r10;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r8, $r11;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = $i0 - 2;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        r5 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack) $r4;

        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i3);

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack) $r6;

        $r8 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex access$000(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack)>(r7);

        r9 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack addEnvelop(net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>($r8);

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i5 = $i4 - 2;

        $r10 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack;

        $r11 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex access$100(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack)>(r9);

        specialinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl$Stack: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl,net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)>(r1, $r11);

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i5, $r10);

        $i6 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>($i7);

        $r14 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        specialinvoke $r14.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: void <init>(java.util.List)>($r0);

        return $r14;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl copy()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r1;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r2;
        java.util.List $r3;
        int $i0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r6;
        java.lang.String $r7, $r9;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nb=");

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: java.util.List all>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex getLast()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public volatile net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl r0, $r2;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl: net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d0, r1);

        return $r2;
    }
}
