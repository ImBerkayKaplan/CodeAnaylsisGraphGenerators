public class net.sourceforge.plantuml.sequencediagram.puma.PUnivers extends java.lang.Object
{
    private final java.util.Collection all;
    private final java.util.Collection links;

    public void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.puma.PUnivers r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.puma.PUnivers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.puma.PUnivers: java.util.Collection all> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.puma.PUnivers: java.util.Collection links> = $r2;

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.puma.PSegment createPSegment(double)
    {
        net.sourceforge.plantuml.sequencediagram.puma.PSegment $r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.puma.PUnivers r2;
        java.util.Collection $r3;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.puma.PUnivers;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.puma.PSegment: void <init>(double)>(d0);

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.puma.PUnivers: java.util.Collection all>;

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    public void addFixedLink(net.sourceforge.plantuml.sequencediagram.puma.PSegment, double, net.sourceforge.plantuml.sequencediagram.puma.PSegment, double)
    {
        net.sourceforge.plantuml.sequencediagram.puma.FixedLink $r0;
        net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition $r1, $r3;
        net.sourceforge.plantuml.sequencediagram.puma.PSegment r2, r4;
        double d0, d1;
        net.sourceforge.plantuml.sequencediagram.puma.PUnivers r6;
        java.util.Collection $r7;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.puma.PUnivers;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        d0 := @parameter1: double;

        r4 := @parameter2: net.sourceforge.plantuml.sequencediagram.puma.PSegment;

        d1 := @parameter3: double;

        $r0 = new net.sourceforge.plantuml.sequencediagram.puma.FixedLink;

        $r1 = new net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition: void <init>(net.sourceforge.plantuml.sequencediagram.puma.PSegment,double)>(r2, d0);

        $r3 = new net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition;

        specialinvoke $r3.<net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition: void <init>(net.sourceforge.plantuml.sequencediagram.puma.PSegment,double)>(r4, d1);

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.puma.FixedLink: void <init>(net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition,net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition)>($r1, $r3);

        $r7 = r6.<net.sourceforge.plantuml.sequencediagram.puma.PUnivers: java.util.Collection links>;

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r0);

        return;
    }

    public void solve()
    {
        net.sourceforge.plantuml.sequencediagram.puma.PUnivers r0;
        java.util.Collection $r1;
        java.util.Iterator r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.puma.FixedLink r4;
        boolean $z0, z2, $z3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.puma.PUnivers;

     label1:
        z2 = 0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.puma.PUnivers: java.util.Collection links>;

        r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.puma.FixedLink) $r3;

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.puma.FixedLink: boolean pushIfNeed()>();

        if $z0 == 0 goto label3;

        z2 = 1;

     label3:
        goto label2;

     label4:
        if z2 != 0 goto label1;

        return;
    }
}
