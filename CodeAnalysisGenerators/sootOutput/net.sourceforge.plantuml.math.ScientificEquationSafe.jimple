public class net.sourceforge.plantuml.math.ScientificEquationSafe extends java.lang.Object
{
    private final net.sourceforge.plantuml.math.ScientificEquation equation;
    private final java.lang.String formula;
    private net.sourceforge.plantuml.core.ImageData dimSvg;

    private void <init>(java.lang.String, net.sourceforge.plantuml.math.ScientificEquation)
    {
        net.sourceforge.plantuml.math.ScientificEquationSafe r0;
        java.lang.String r1;
        net.sourceforge.plantuml.math.ScientificEquation r2;

        r0 := @this: net.sourceforge.plantuml.math.ScientificEquationSafe;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.math.ScientificEquation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: java.lang.String formula> = r1;

        r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation> = r2;

        return;
    }

    public static net.sourceforge.plantuml.math.ScientificEquationSafe fromAsciiMath(java.lang.String)
    {
        net.sourceforge.plantuml.math.ScientificEquationSafe $r0, $r9;
        java.lang.String r1, $r8;
        net.sourceforge.plantuml.math.AsciiMath $r2;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r5, $r6, $r7;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new net.sourceforge.plantuml.math.ScientificEquationSafe;

        $r2 = new net.sourceforge.plantuml.math.AsciiMath;

        specialinvoke $r2.<net.sourceforge.plantuml.math.AsciiMath: void <init>(java.lang.String)>(r1);

        specialinvoke $r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: void <init>(java.lang.String,net.sourceforge.plantuml.math.ScientificEquation)>(r1, $r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r8);

        $r9 = new net.sourceforge.plantuml.math.ScientificEquationSafe;

        specialinvoke $r9.<net.sourceforge.plantuml.math.ScientificEquationSafe: void <init>(java.lang.String,net.sourceforge.plantuml.math.ScientificEquation)>(r1, null);

        return $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static net.sourceforge.plantuml.math.ScientificEquationSafe fromLatex(java.lang.String)
    {
        net.sourceforge.plantuml.math.ScientificEquationSafe $r0, $r9;
        java.lang.String r1, $r8;
        net.sourceforge.plantuml.math.LatexBuilder $r2;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r5, $r6, $r7;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new net.sourceforge.plantuml.math.ScientificEquationSafe;

        $r2 = new net.sourceforge.plantuml.math.LatexBuilder;

        specialinvoke $r2.<net.sourceforge.plantuml.math.LatexBuilder: void <init>(java.lang.String)>(r1);

        specialinvoke $r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: void <init>(java.lang.String,net.sourceforge.plantuml.math.ScientificEquation)>(r1, $r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r8);

        $r9 = new net.sourceforge.plantuml.math.ScientificEquationSafe;

        specialinvoke $r9.<net.sourceforge.plantuml.math.ScientificEquationSafe: void <init>(java.lang.String,net.sourceforge.plantuml.math.ScientificEquation)>(r1, null);

        return $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public net.sourceforge.plantuml.ugraphic.UImageSvg getSvg(double, java.awt.Color, java.awt.Color)
    {
        net.sourceforge.plantuml.math.ScientificEquationSafe r0;
        net.sourceforge.plantuml.math.ScientificEquation $r1, $r13, $r15;
        java.io.ByteArrayOutputStream $r2;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r3;
        net.sourceforge.plantuml.FileFormatOption $r4;
        net.sourceforge.plantuml.FileFormat $r5;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r6;
        net.sourceforge.plantuml.core.ImageData $r7;
        net.sourceforge.plantuml.ugraphic.UImageSvg $r8, r20;
        java.lang.String $r9;
        byte[] $r10;
        double d0;
        java.awt.Color r11, r12;
        net.sourceforge.plantuml.api.ImageDataSimple $r14;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r16;
        java.io.IOException $r17;
        java.lang.Exception $r19;

        r0 := @this: net.sourceforge.plantuml.math.ScientificEquationSafe;

        d0 := @parameter0: double;

        r11 := @parameter1: java.awt.Color;

        r12 := @parameter2: java.awt.Color;

        $r1 = r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation>;

        if $r1 == null goto label4;

     label1:
        $r13 = r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation>;

        r20 = interfaceinvoke $r13.<net.sourceforge.plantuml.math.ScientificEquation: net.sourceforge.plantuml.ugraphic.UImageSvg getSvg(double,java.awt.Color,java.awt.Color)>(d0, r11, r12);

        $r14 = new net.sourceforge.plantuml.api.ImageDataSimple;

        $r15 = r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation>;

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.math.ScientificEquation: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()>();

        specialinvoke $r14.<net.sourceforge.plantuml.api.ImageDataSimple: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r16);

        r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.core.ImageData dimSvg> = $r14;

     label2:
        return r20;

     label3:
        $r19 := @caughtexception;

        specialinvoke r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: void printTrace(java.lang.Exception)>($r19);

     label4:
        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

     label5:
        $r3 = specialinvoke r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.svek.TextBlockBackcolored getRollback()>();

        $r4 = new net.sourceforge.plantuml.FileFormatOption;

        $r5 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        specialinvoke $r4.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r5);

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder plainImageBuilder(net.sourceforge.plantuml.graphic.UDrawable,net.sourceforge.plantuml.FileFormatOption)>($r3, $r4);

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.core.ImageData write(java.io.OutputStream)>($r2);

        r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.core.ImageData dimSvg> = $r7;

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

        return null;

     label8:
        $r8 = new net.sourceforge.plantuml.ugraphic.UImageSvg;

        $r9 = new java.lang.String;

        $r10 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>($r10);

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UImageSvg: void <init>(java.lang.String,double)>($r9, d0);

        return $r8;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public net.sourceforge.plantuml.ugraphic.MutableImage getImage(java.awt.Color, java.awt.Color)
    {
        net.sourceforge.plantuml.math.ScientificEquationSafe r0;
        net.sourceforge.plantuml.math.ScientificEquation $r1, $r9;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r2;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r3;
        net.sourceforge.plantuml.ugraphic.PixelImage $r4;
        java.awt.image.BufferedImage $r5;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r6;
        java.awt.Color r7, r8;
        net.sourceforge.plantuml.ugraphic.MutableImage $r10;
        java.io.IOException $r11;
        java.lang.Exception $r12;
        byte[] r14;

        r0 := @this: net.sourceforge.plantuml.math.ScientificEquationSafe;

        r7 := @parameter0: java.awt.Color;

        r8 := @parameter1: java.awt.Color;

        $r1 = r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation>;

        if $r1 == null goto label4;

     label1:
        $r9 = r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation>;

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.math.ScientificEquation: net.sourceforge.plantuml.ugraphic.MutableImage getImage(java.awt.Color,java.awt.Color)>(r7, r8);

     label2:
        return $r10;

     label3:
        $r12 := @caughtexception;

        specialinvoke r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: void printTrace(java.lang.Exception)>($r12);

     label4:
        $r2 = specialinvoke r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.svek.TextBlockBackcolored getRollback()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder plainPngBuilder(net.sourceforge.plantuml.graphic.UDrawable)>($r2);

        r14 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.ImageBuilder: byte[] writeByteArray()>();

        $r4 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r5 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.awt.image.BufferedImage read(byte[])>(r14);

        $r6 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r5, $r6);

     label5:
        return $r4;

     label6:
        $r11 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    private void printTrace(java.lang.Exception)
    {
        java.lang.StringBuilder $r0, $r2, $r5, $r9, $r11, $r14;
        java.io.PrintStream $r1, $r10;
        net.sourceforge.plantuml.math.ScientificEquationSafe r3;
        java.lang.String $r4, $r6, $r13, $r15;
        net.sourceforge.plantuml.math.ScientificEquation $r7, $r12;
        java.lang.Exception r8;

        r3 := @this: net.sourceforge.plantuml.math.ScientificEquationSafe;

        r8 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("formula=");

        $r4 = r3.<net.sourceforge.plantuml.math.ScientificEquationSafe: java.lang.String formula>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = r3.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation>;

        if $r7 == null goto label1;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latex=");

        $r12 = r3.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.math.ScientificEquation equation>;

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.math.ScientificEquation: java.lang.String getSource()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label1:
        virtualinvoke r8.<java.lang.Exception: void printStackTrace()>();

        return;
    }

    private net.sourceforge.plantuml.svek.TextBlockBackcolored getRollback()
    {
        java.lang.String[] $r0;
        net.sourceforge.plantuml.math.ScientificEquationSafe r1;
        java.lang.String $r2;
        java.util.List $r3;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r4;

        r1 := @this: net.sourceforge.plantuml.math.ScientificEquationSafe;

        $r0 = newarray (java.lang.String)[1];

        $r2 = r1.<net.sourceforge.plantuml.math.ScientificEquationSafe: java.lang.String formula>;

        $r0[0] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r4 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.TextBlockBackcolored createBlackOnWhiteMonospaced(java.util.List)>($r3);

        return $r4;
    }

    public net.sourceforge.plantuml.core.ImageData export(java.io.OutputStream, net.sourceforge.plantuml.FileFormatOption, float, java.awt.Color, java.awt.Color) throws java.io.IOException
    {
        net.sourceforge.plantuml.FileFormatOption r0;
        net.sourceforge.plantuml.FileFormat $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.UnsupportedOperationException $r7;
        net.sourceforge.plantuml.math.ScientificEquationSafe r8;
        java.awt.Color r9, r10;
        net.sourceforge.plantuml.ugraphic.MutableImage $r11, $r12, $r23, $r24;
        float f0;
        double $d0, $d1;
        net.sourceforge.plantuml.eps.EpsGraphics $r13;
        java.io.OutputStream r15;
        java.lang.String $r16, $r20;
        byte[] $r17, $r21;
        net.sourceforge.plantuml.api.ImageDataSimple $r18, $r25;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.ugraphic.UImageSvg $r19;
        net.sourceforge.plantuml.core.ImageData $r22;
        java.awt.image.BufferedImage r26, r27;

        r8 := @this: net.sourceforge.plantuml.math.ScientificEquationSafe;

        r15 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        f0 := @parameter2: float;

        r9 := @parameter3: java.awt.Color;

        r10 := @parameter4: java.awt.Color;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        if $r1 != $r2 goto label1;

        $r23 = virtualinvoke r8.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.ugraphic.MutableImage getImage(java.awt.Color,java.awt.Color)>(r9, r10);

        $d1 = (double) f0;

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.ugraphic.MutableImage: net.sourceforge.plantuml.ugraphic.MutableImage withScale(double)>($d1);

        r26 = interfaceinvoke $r24.<net.sourceforge.plantuml.ugraphic.MutableImage: java.awt.image.BufferedImage getImage()>();

        staticinvoke <net.sourceforge.plantuml.security.SImageIO: void write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)>(r26, "png", r15);

        $r25 = new net.sourceforge.plantuml.api.ImageDataSimple;

        $i2 = virtualinvoke r26.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke r26.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r25.<net.sourceforge.plantuml.api.ImageDataSimple: void <init>(int,int)>($i2, $i3);

        return $r25;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        $r4 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat SVG>;

        if $r3 != $r4 goto label2;

        $r19 = virtualinvoke r8.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.ugraphic.UImageSvg getSvg(double,java.awt.Color,java.awt.Color)>(1.0, r9, r10);

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.ugraphic.UImageSvg: java.lang.String getSvg(boolean)>(1);

        $r21 = virtualinvoke $r20.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r15.<java.io.OutputStream: void write(byte[])>($r21);

        $r22 = r8.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.core.ImageData dimSvg>;

        return $r22;

     label2:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        $r6 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat EPS>;

        if $r5 != $r6 goto label3;

        $r11 = virtualinvoke r8.<net.sourceforge.plantuml.math.ScientificEquationSafe: net.sourceforge.plantuml.ugraphic.MutableImage getImage(java.awt.Color,java.awt.Color)>(r9, r10);

        $d0 = (double) f0;

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ugraphic.MutableImage: net.sourceforge.plantuml.ugraphic.MutableImage withScale(double)>($d0);

        r27 = interfaceinvoke $r12.<net.sourceforge.plantuml.ugraphic.MutableImage: java.awt.image.BufferedImage getImage()>();

        $r13 = new net.sourceforge.plantuml.eps.EpsGraphics;

        specialinvoke $r13.<net.sourceforge.plantuml.eps.EpsGraphics: void <init>()>();

        virtualinvoke $r13.<net.sourceforge.plantuml.eps.EpsGraphics: void drawImage(java.awt.image.BufferedImage,double,double)>(r27, 0.0, 0.0);

        virtualinvoke $r13.<net.sourceforge.plantuml.eps.EpsGraphics: void close()>();

        $r16 = virtualinvoke $r13.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String getEPSCode()>();

        $r17 = virtualinvoke $r16.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r15.<java.io.OutputStream: void write(byte[])>($r17);

        $r18 = new net.sourceforge.plantuml.api.ImageDataSimple;

        $i0 = virtualinvoke r27.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r27.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r18.<net.sourceforge.plantuml.api.ImageDataSimple: void <init>(int,int)>($i0, $i1);

        return $r18;

     label3:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;
    }

    public final java.lang.String getFormula()
    {
        net.sourceforge.plantuml.math.ScientificEquationSafe r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.math.ScientificEquationSafe;

        $r1 = r0.<net.sourceforge.plantuml.math.ScientificEquationSafe: java.lang.String formula>;

        return $r1;
    }
}
