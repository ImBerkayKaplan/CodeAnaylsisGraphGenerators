public class net.sourceforge.plantuml.gitlog.GNodeBuilder extends java.lang.Object
{
    private final java.util.List all;

    public void <init>(java.util.List)
    {
        net.sourceforge.plantuml.gitlog.GNodeBuilder r0;
        java.util.ArrayList $r1;
        java.util.LinkedHashMap $r2;
        java.util.List r4, $r5, $r8;
        boolean $z0, $z1, $z3;
        java.util.Collection $r6;
        java.lang.Object $r7, $r9, $r12, $r15, $r17;
        net.sourceforge.plantuml.gitlog.Commit r10, r24, r27;
        java.lang.String $r11, $r14, $r19, $r20, $r21;
        net.sourceforge.plantuml.gitlog.GNode $r13, $r16, $r18;
        java.util.Iterator r23, r26, r28;

        r0 := @this: net.sourceforge.plantuml.gitlog.GNodeBuilder;

        r4 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.GNodeBuilder: java.util.List all> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r23 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (net.sourceforge.plantuml.gitlog.Commit) $r17;

        $r18 = new net.sourceforge.plantuml.gitlog.GNode;

        specialinvoke $r18.<net.sourceforge.plantuml.gitlog.GNode: void <init>()>();

        $r19 = virtualinvoke r24.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String getComment()>();

        virtualinvoke $r18.<net.sourceforge.plantuml.gitlog.GNode: void setComment(java.lang.String)>($r19);

        $r20 = virtualinvoke r24.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String getName()>();

        virtualinvoke $r18.<net.sourceforge.plantuml.gitlog.GNode: void addText(java.lang.String)>($r20);

        $r21 = virtualinvoke r24.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r18);

        goto label1;

     label2:
        r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (net.sourceforge.plantuml.gitlog.Commit) $r7;

        $r8 = virtualinvoke r27.<net.sourceforge.plantuml.gitlog.Commit: java.util.List getAncestors()>();

        r28 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r9 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.gitlog.Commit) $r9;

        $r11 = virtualinvoke r27.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String getName()>();

        $r12 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r13 = (net.sourceforge.plantuml.gitlog.GNode) $r12;

        $r14 = virtualinvoke r10.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String getName()>();

        $r15 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (net.sourceforge.plantuml.gitlog.GNode) $r15;

        staticinvoke <net.sourceforge.plantuml.gitlog.GNode: void link(net.sourceforge.plantuml.gitlog.GNode,net.sourceforge.plantuml.gitlog.GNode)>($r13, $r16);

        goto label4;

     label5:
        goto label3;

     label6:
        $r5 = r0.<net.sourceforge.plantuml.gitlog.GNodeBuilder: java.util.List all>;

        $r6 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        specialinvoke r0.<net.sourceforge.plantuml.gitlog.GNodeBuilder: void merge()>();

        return;
    }

    private void merge()
    {
        net.sourceforge.plantuml.gitlog.GNodeBuilder r0;
        java.util.List $r1, $r6;
        java.util.Iterator r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.gitlog.GNode r4, r5;
        boolean $z0, z2, $z3;

        r0 := @this: net.sourceforge.plantuml.gitlog.GNodeBuilder;

     label1:
        z2 = 0;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.GNodeBuilder: java.util.List all>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.gitlog.GNode) $r3;

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.gitlog.GNode: boolean canEatTheNextOne()>();

        if $z0 == 0 goto label3;

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.gitlog.GNode: net.sourceforge.plantuml.gitlog.GNode eatTheNextOne()>();

        $r6 = r0.<net.sourceforge.plantuml.gitlog.GNodeBuilder: java.util.List all>;

        interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>(r5);

        z2 = 1;

        goto label4;

     label3:
        goto label2;

     label4:
        if z2 != 0 goto label5;

        return;

     label5:
        goto label1;
    }

    public java.util.Collection getAllNodes()
    {
        net.sourceforge.plantuml.gitlog.GNodeBuilder r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: net.sourceforge.plantuml.gitlog.GNodeBuilder;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.GNodeBuilder: java.util.List all>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }
}
