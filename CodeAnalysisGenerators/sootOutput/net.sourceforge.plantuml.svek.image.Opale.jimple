public class net.sourceforge.plantuml.svek.image.Opale extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private static final int cornersize;
    private final net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor;
    private final net.sourceforge.plantuml.ugraphic.color.HColor borderColor;
    private final int marginX1;
    private final int marginX2;
    private final int marginY;
    private final double shadowing2;
    private net.sourceforge.plantuml.Direction strategy;
    private java.awt.geom.Point2D pp1;
    private java.awt.geom.Point2D pp2;
    private final boolean withLink;
    private double roundCorner;
    private final net.sourceforge.plantuml.ugraphic.UStroke stroke;
    private final net.sourceforge.plantuml.graphic.TextBlock textBlock;
    private final double delta;

    public void <init>(double, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.graphic.TextBlock, boolean, net.sourceforge.plantuml.ugraphic.UStroke)
    {
        net.sourceforge.plantuml.svek.image.Opale r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1, r2;
        boolean z0;
        double d0;
        net.sourceforge.plantuml.graphic.TextBlock r3;
        net.sourceforge.plantuml.ugraphic.UStroke r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        d0 := @parameter0: double;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r3 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        z0 := @parameter4: boolean;

        r4 := @parameter5: net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.image.Opale: double delta> = 4.0;

        r0.<net.sourceforge.plantuml.svek.image.Opale: int marginY> = 5;

        r0.<net.sourceforge.plantuml.svek.image.Opale: int marginX2> = 15;

        r0.<net.sourceforge.plantuml.svek.image.Opale: int marginX1> = 6;

        r0.<net.sourceforge.plantuml.svek.image.Opale: int marginX1> = 6;

        r0.<net.sourceforge.plantuml.svek.image.Opale: int marginX2> = 15;

        r0.<net.sourceforge.plantuml.svek.image.Opale: int marginY> = 5;

        r0.<net.sourceforge.plantuml.svek.image.Opale: double delta> = 4.0;

        r0.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor> = r1;

        r0.<net.sourceforge.plantuml.svek.image.Opale: boolean withLink> = z0;

        r0.<net.sourceforge.plantuml.svek.image.Opale: double shadowing2> = d0;

        r0.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = r2;

        r0.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r3;

        r0.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UStroke stroke> = r4;

        return;
    }

    public void setRoundCorner(double)
    {
        net.sourceforge.plantuml.svek.image.Opale r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner> = d0;

        return;
    }

    public void setOpale(net.sourceforge.plantuml.Direction, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.image.Opale r0;
        net.sourceforge.plantuml.Direction r1;
        java.awt.geom.Point2D r2, r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r1 := @parameter0: net.sourceforge.plantuml.Direction;

        r2 := @parameter1: java.awt.geom.Point2D;

        r3 := @parameter2: java.awt.geom.Point2D;

        r0.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.Direction strategy> = r1;

        r0.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp1> = r2;

        r0.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp2> = r3;

        return;
    }

    private final double getWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.Opale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 + 6.0;

        $d2 = $d1 + 15.0;

        return $d2;
    }

    private final double getHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.Opale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = $d0 + 10.0;

        return $d1;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.Opale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d1, d0);

        return $r2;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.svek.image.Opale r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2, $r5;
        net.sourceforge.plantuml.ugraphic.UBackground $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic $r4, $r20, r28, r29;
        boolean $z0;
        net.sourceforge.plantuml.Direction $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.IllegalArgumentException $r14;
        java.awt.geom.Point2D $r15, $r16, $r22, $r23, $r24, $r25, $r26, $r27;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.ugraphic.UPath $r17, r30;
        net.sourceforge.plantuml.ugraphic.UTranslate $r18;
        net.sourceforge.plantuml.graphic.TextBlock $r19;
        net.sourceforge.plantuml.ugraphic.UStroke $r21, $r31;

        r1 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r28 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r4 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

        r29 = interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $z0 = r1.<net.sourceforge.plantuml.svek.image.Opale: boolean withLink>;

        if $z0 != 0 goto label1;

        r30 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getPolygonNormal(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        goto label6;

     label1:
        $r7 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.Direction strategy>;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        if $r7 != $r6 goto label2;

        $r27 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp1>;

        $r26 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp2>;

        r30 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getPolygonLeft(net.sourceforge.plantuml.graphic.StringBounder,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r0, $r27, $r26);

        goto label6;

     label2:
        $r9 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.Direction strategy>;

        $r8 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r9 != $r8 goto label3;

        $r25 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp1>;

        $r24 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp2>;

        r30 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getPolygonRight(net.sourceforge.plantuml.graphic.StringBounder,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r0, $r25, $r24);

        goto label6;

     label3:
        $r11 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.Direction strategy>;

        $r10 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        if $r11 != $r10 goto label4;

        $r23 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp1>;

        $r22 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp2>;

        r30 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getPolygonUp(net.sourceforge.plantuml.graphic.StringBounder,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r0, $r23, $r22);

        goto label6;

     label4:
        $r13 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.Direction strategy>;

        $r12 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        if $r13 != $r12 goto label5;

        $r16 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp1>;

        $r15 = r1.<net.sourceforge.plantuml.svek.image.Opale: java.awt.geom.Point2D pp2>;

        r30 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getPolygonDown(net.sourceforge.plantuml.graphic.StringBounder,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r0, $r16, $r15);

        goto label6;

     label5:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label6:
        $d2 = r1.<net.sourceforge.plantuml.svek.image.Opale: double shadowing2>;

        virtualinvoke r30.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>($d2);

        $r31 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UStroke stroke>;

        if $r31 == null goto label7;

        $r21 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UStroke stroke>;

        r29 = interfaceinvoke r29.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

     label7:
        interfaceinvoke r29.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r30);

        $d0 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d1 = r1.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $r17 = staticinvoke <net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getCorner(double,double)>($d0, $d1);

        interfaceinvoke r29.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r17);

        $r19 = r1.<net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r18 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r18.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(6.0, 5.0);

        $r20 = interfaceinvoke r29.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        interfaceinvoke $r19.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r20);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getPolygonNormal(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.Opale r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.ugraphic.UPath $r2;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = r0.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $r2 = staticinvoke <net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getPolygonNormal(double,double,double)>($d0, $d1, $d2);

        return $r2;
    }

    public static net.sourceforge.plantuml.ugraphic.UPath getCorner(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0;
        java.awt.geom.Point2D$Double $r2;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $d1 = d0 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>($d1, 0.0);

        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d11 = d0 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d11, 10.0);

        goto label2;

     label1:
        $d5 = d0 - 10.0;

        $d3 = d2 / 4.0;

        $d4 = 10.0 - $d3;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d5, $d4);

        $r2 = new java.awt.geom.Point2D$Double;

        $d7 = d0 - 10.0;

        $d6 = d2 / 4.0;

        $d8 = $d7 + $d6;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d8, 10.0);

        $d9 = d2 / 4.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r2, $d9, 0.0, 0.0);

     label2:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d0, 10.0);

        $d10 = d0 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d10, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    public static net.sourceforge.plantuml.ugraphic.UPath getPolygonNormal(double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        byte $b0;
        java.awt.geom.Point2D$Double $r2, $r3, $r4;

        d7 := @parameter0: double;

        d2 := @parameter1: double;

        d0 := @parameter2: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, d2);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d7, d2);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d7, 10.0);

        $d17 = d7 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d17, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 0.0);

        goto label2;

     label1:
        $d1 = d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, $d1);

        $d3 = d0 / 2.0;

        $d4 = d2 - $d3;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, $d4);

        $r2 = new java.awt.geom.Point2D$Double;

        $d5 = d0 / 2.0;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, d2);

        $d6 = d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r2, $d6, 0.0, 0.0);

        $d8 = d0 / 2.0;

        $d9 = d7 - $d8;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d9, d2);

        $r3 = new java.awt.geom.Point2D$Double;

        $d10 = d0 / 2.0;

        $d11 = d2 - $d10;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d7, $d11);

        $d12 = d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r3, $d12, 0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d7, 10.0);

        $d13 = d7 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d13, 0.0);

        $d14 = d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d14, 0.0);

        $r4 = new java.awt.geom.Point2D$Double;

        $d15 = d0 / 2.0;

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, $d15);

        $d16 = d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r4, $d16, 0.0, 0.0);

     label2:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getPolygonLeft(net.sourceforge.plantuml.graphic.StringBounder, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.svek.image.Opale r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, d39;
        java.awt.geom.Point2D r3, r5;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        java.awt.geom.Point2D$Double $r6, $r7, $r8;

        r2 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: java.awt.geom.Point2D;

        r5 := @parameter2: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $d0 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d1 = $d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, $d1);

        $d2 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        d38 = $d2 - 4.0;

        $d3 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d4 = $d3 - 8.0;

        d39 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double limitation(double,double,double)>(d38, 0.0, $d4);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, d39);

        $d5 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d6 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d5, $d6);

        $d7 = d39 + 8.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, $d7);

        $d8 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d9 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d10 = $d9 / 2.0;

        $d11 = $d8 - $d10;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, $d11);

        $r6 = new java.awt.geom.Point2D$Double;

        $d12 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d13 = $d12 / 2.0;

        $d14 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d13, $d14);

        $d15 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d16 = $d15 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r6, $d16, 0.0, 0.0);

        $d17 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d18 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d19 = $d18 / 2.0;

        $d20 = $d17 - $d19;

        $d21 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d20, $d21);

        $r7 = new java.awt.geom.Point2D$Double;

        $d22 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d23 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d24 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d25 = $d24 / 2.0;

        $d26 = $d23 - $d25;

        specialinvoke $r7.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d22, $d26);

        $d27 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d28 = $d27 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r7, $d28, 0.0, 0.0);

        $d29 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d29, 10.0);

        $d30 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d31 = $d30 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d31, 0.0);

        $d32 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d33 = $d32 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d33, 0.0);

        $r8 = new java.awt.geom.Point2D$Double;

        $d34 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d35 = $d34 / 2.0;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, $d35);

        $d36 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d37 = $d36 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r8, $d37, 0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getPolygonRight(net.sourceforge.plantuml.graphic.StringBounder, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.svek.image.Opale r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, d40, d41;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.awt.geom.Point2D$Double $r4, $r5, $r8;
        java.awt.geom.Point2D r6, r7;

        r2 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r6 := @parameter1: java.awt.geom.Point2D;

        r7 := @parameter2: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $d0 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d1 = $d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, $d1);

        $d2 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d3 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d4 = $d3 / 2.0;

        $d5 = $d2 - $d4;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, $d5);

        $r4 = new java.awt.geom.Point2D$Double;

        $d6 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d7 = $d6 / 2.0;

        $d8 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d8);

        $d9 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d10 = $d9 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r4, $d10, 0.0, 0.0);

        $d11 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d12 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d13 = $d12 / 2.0;

        $d14 = $d11 - $d13;

        $d15 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d14, $d15);

        $r5 = new java.awt.geom.Point2D$Double;

        $d16 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d17 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d18 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d19 = $d18 / 2.0;

        $d20 = $d17 - $d19;

        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d16, $d20);

        $d21 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d22 = $d21 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r5, $d22, 0.0, 0.0);

        $d23 = virtualinvoke r6.<java.awt.geom.Point2D: double getY()>();

        d40 = $d23 - 4.0;

        $d24 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d25 = $d24 - 8.0;

        d41 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double limitation(double,double,double)>(d40, 10.0, $d25);

        $d26 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d27 = d41 + 8.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d26, $d27);

        $d28 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        $d29 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d28, $d29);

        $d30 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d30, d41);

        $d31 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d31, 10.0);

        $d32 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d33 = $d32 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d33, 0.0);

        $d34 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d35 = $d34 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d35, 0.0);

        $r8 = new java.awt.geom.Point2D$Double;

        $d36 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d37 = $d36 / 2.0;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, $d37);

        $d38 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d39 = $d38 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r8, $d39, 0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getPolygonUp(net.sourceforge.plantuml.graphic.StringBounder, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.svek.image.Opale r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, d39;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.awt.geom.Point2D$Double $r4, $r5, $r8;
        java.awt.geom.Point2D r6, r7;

        r2 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r6 := @parameter1: java.awt.geom.Point2D;

        r7 := @parameter2: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $d0 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d1 = $d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, $d1);

        $d2 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d3 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d4 = $d3 / 2.0;

        $d5 = $d2 - $d4;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, $d5);

        $r4 = new java.awt.geom.Point2D$Double;

        $d6 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d7 = $d6 / 2.0;

        $d8 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d8);

        $d9 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d10 = $d9 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r4, $d10, 0.0, 0.0);

        $d11 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d12 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d13 = $d12 / 2.0;

        $d14 = $d11 - $d13;

        $d15 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d14, $d15);

        $r5 = new java.awt.geom.Point2D$Double;

        $d16 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d17 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d18 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d19 = $d18 / 2.0;

        $d20 = $d17 - $d19;

        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d16, $d20);

        $d21 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d22 = $d21 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r5, $d22, 0.0, 0.0);

        $d23 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d23, 10.0);

        $d24 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d25 = $d24 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d25, 0.0);

        $d26 = virtualinvoke r6.<java.awt.geom.Point2D: double getX()>();

        d38 = $d26 - 4.0;

        $d27 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d28 = $d27 - 10.0;

        d39 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double limitation(double,double,double)>(d38, 0.0, $d28);

        $d29 = d39 + 8.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d29, 0.0);

        $d30 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        $d31 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d30, $d31);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d39, 0.0);

        $d32 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d33 = $d32 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d33, 0.0);

        $r8 = new java.awt.geom.Point2D$Double;

        $d34 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d35 = $d34 / 2.0;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, $d35);

        $d36 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d37 = $d36 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r8, $d37, 0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getPolygonDown(net.sourceforge.plantuml.graphic.StringBounder, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.svek.image.Opale r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, d39, d40;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.awt.geom.Point2D$Double $r4, $r7, $r8;
        java.awt.geom.Point2D r5, r6;

        r2 := @this: net.sourceforge.plantuml.svek.image.Opale;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: java.awt.geom.Point2D;

        r6 := @parameter2: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $d0 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d1 = $d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, $d1);

        $d2 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d3 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d4 = $d3 / 2.0;

        $d5 = $d2 - $d4;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, $d5);

        $r4 = new java.awt.geom.Point2D$Double;

        $d6 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d7 = $d6 / 2.0;

        $d8 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d8);

        $d9 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d10 = $d9 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r4, $d10, 0.0, 0.0);

        $d11 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        d39 = $d11 - 4.0;

        $d12 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        d40 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double limitation(double,double,double)>(d39, 0.0, $d12);

        $d13 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d40, $d13);

        $d14 = virtualinvoke r6.<java.awt.geom.Point2D: double getX()>();

        $d15 = virtualinvoke r6.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d14, $d15);

        $d16 = d40 + 8.0;

        $d17 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d16, $d17);

        $d18 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d19 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d20 = $d19 / 2.0;

        $d21 = $d18 - $d20;

        $d22 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d21, $d22);

        $r7 = new java.awt.geom.Point2D$Double;

        $d23 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d24 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d25 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d26 = $d25 / 2.0;

        $d27 = $d24 - $d26;

        specialinvoke $r7.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d23, $d27);

        $d28 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d29 = $d28 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r7, $d29, 0.0, 0.0);

        $d30 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d30, 10.0);

        $d31 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.Opale: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d32 = $d31 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d32, 0.0);

        $d33 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d34 = $d33 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d34, 0.0);

        $r8 = new java.awt.geom.Point2D$Double;

        $d35 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d36 = $d35 / 2.0;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, $d36);

        $d37 = r2.<net.sourceforge.plantuml.svek.image.Opale: double roundCorner>;

        $d38 = $d37 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(java.awt.geom.Point2D,double,double,double)>($r8, $d38, 0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        return $r0;
    }

    public final int getMarginX1()
    {
        net.sourceforge.plantuml.svek.image.Opale r0;

        r0 := @this: net.sourceforge.plantuml.svek.image.Opale;

        return 6;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.image.Opale: int cornersize> = 10;

        return;
    }
}
