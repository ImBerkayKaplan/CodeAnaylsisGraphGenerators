public class net.sourceforge.plantuml.tim.stdlib.Size extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.Size r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Size;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.Size r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.Size;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%size", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.Size r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Size;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue r2, $r4, $r5, $r6, $r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.json.JsonValue r3;
        int $i0, $i1, $i2;
        java.lang.String $r7;
        net.sourceforge.plantuml.tim.stdlib.Size r10;
        net.sourceforge.plantuml.tim.TContext r11;
        net.sourceforge.plantuml.tim.TMemory r12;
        net.sourceforge.plantuml.LineLocation r13;
        java.util.Map r14;
        net.sourceforge.plantuml.json.JsonArray r15;
        net.sourceforge.plantuml.json.JsonObject r16;

        r10 := @this: net.sourceforge.plantuml.tim.stdlib.Size;

        r11 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r12 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r13 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r14 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z0 == 0 goto label1;

        $r9 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromInt(int)>(0);

        return $r9;

     label1:
        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isString()>();

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromInt(int)>($i2);

        return $r8;

     label2:
        r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $z2 = r3 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z2 == 0 goto label3;

        r15 = (net.sourceforge.plantuml.json.JsonArray) r3;

        $i1 = virtualinvoke r15.<net.sourceforge.plantuml.json.JsonArray: int size()>();

        $r6 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromInt(int)>($i1);

        return $r6;

     label3:
        $z3 = r3 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z3 == 0 goto label4;

        r16 = (net.sourceforge.plantuml.json.JsonObject) r3;

        $i0 = virtualinvoke r16.<net.sourceforge.plantuml.json.JsonObject: int size()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromInt(int)>($i0);

        return $r5;

     label4:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromInt(int)>(0);

        return $r4;
    }
}
