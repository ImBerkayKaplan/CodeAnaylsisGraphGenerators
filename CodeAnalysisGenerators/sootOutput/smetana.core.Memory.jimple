public class smetana.core.Memory extends java.lang.Object
{

    public void <init>()
    {
        smetana.core.Memory r0;

        r0 := @this: smetana.core.Memory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static smetana.core.__ptr__ malloc(java.lang.Class)
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.Class r2;
        java.lang.String $r4;
        smetana.core.__ptr__ $r5;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MEMORY::malloc ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <smetana.core.JUtils: void LOG(java.lang.String)>($r4);

        $r5 = staticinvoke <smetana.core.JUtils: smetana.core.__ptr__ create(java.lang.Class,smetana.core.__ptr__)>(r2, null);

        return $r5;
    }

    public static smetana.core.__ptr__ malloc(smetana.core.size_t)
    {
        smetana.core.size_t r0;
        smetana.core.__ptr__ $r1;

        r0 := @parameter0: smetana.core.size_t;

        $r1 = virtualinvoke r0.<smetana.core.size_t: smetana.core.__ptr__ malloc()>();

        return $r1;
    }

    public static smetana.core.__ptr__ realloc(smetana.core.__ptr__, smetana.core.size_t)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        smetana.core.__ptr__ r3;
        java.lang.Class $r4;
        java.lang.String $r6;
        smetana.core.size_t r7;

        r3 := @parameter0: smetana.core.__ptr__;

        r7 := @parameter1: smetana.core.size_t;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public static void free(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        return;
    }

    public static int identityHashCode(smetana.core.CString)
    {
        smetana.core.CString r0;
        int i0;
        smetana.core.Z $r1;
        java.util.Map $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: smetana.core.CString;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<smetana.core.CString: int getUid()>();

        $r1 = staticinvoke <smetana.core.Z: smetana.core.Z z()>();

        $r2 = $r1.<smetana.core.Z: java.util.Map all>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r0);

        return i0;
    }

    public static java.lang.Object fromIdentityHashCode(int)
    {
        int i0, $i1;
        smetana.core.Z $r0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object r3;
        java.lang.UnsupportedOperationException $r4;
        java.lang.IllegalArgumentException $r5;

        i0 := @parameter0: int;

        $i1 = i0 % 2;

        if $i1 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $r0 = staticinvoke <smetana.core.Z: smetana.core.Z z()>();

        $r1 = $r0.<smetana.core.Z: java.util.Map all>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        if r3 != null goto label2;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;

     label2:
        return r3;
    }
}
