public class net.sourceforge.plantuml.EmptyImageBuilder extends java.lang.Object
{
    private final java.awt.image.BufferedImage im;
    private final java.awt.Graphics2D g2d;
    private final java.awt.Color background;
    private final net.sourceforge.plantuml.graphic.StringBounder stringBounder;

    public void <init>(java.lang.String, double, double, java.awt.Color, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.EmptyImageBuilder r0;
        java.lang.String r1;
        double d0, d1;
        java.awt.Color r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: java.awt.Color;

        r3 := @parameter4: net.sourceforge.plantuml.graphic.StringBounder;

        $i1 = (int) d0;

        $i0 = (int) d1;

        specialinvoke r0.<net.sourceforge.plantuml.EmptyImageBuilder: void <init>(java.lang.String,int,int,java.awt.Color,net.sourceforge.plantuml.graphic.StringBounder)>(r1, $i1, $i0, r2, r3);

        return;
    }

    public void <init>(java.lang.String, int, int, java.awt.Color, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.EmptyImageBuilder r0;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, $i2, i4, i5;
        java.awt.Color r2, $r16;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28;
        java.lang.String $r9, r15, $r24, $r29;
        java.awt.image.BufferedImage $r10, $r11;
        java.awt.Graphics2D $r12, $r13, $r17, $r18, $r19;
        net.sourceforge.plantuml.ugraphic.UAntiAliasing $r14;

        r0 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        r15 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        r2 := @parameter3: java.awt.Color;

        r3 := @parameter4: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i4 <= 0 goto label1;

        if i5 > 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be positive");

        throw $r1;

     label2:
        $i0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int getenvImageLimit()>();

        if i4 <= $i0 goto label3;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Width too large ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". You should set PLANTUML_LIMIT_SIZE");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r29);

        i4 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int getenvImageLimit()>();

     label3:
        $i1 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int getenvImageLimit()>();

        if i5 <= $i1 goto label4;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Height too large ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". You should set PLANTUML_LIMIT_SIZE");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r24);

        i5 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: int getenvImageLimit()>();

     label4:
        r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Color background> = r2;

        r0.<net.sourceforge.plantuml.EmptyImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating image ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r9);

        $r10 = new java.awt.image.BufferedImage;

        $i2 = specialinvoke r0.<net.sourceforge.plantuml.EmptyImageBuilder: int getType(java.awt.Color)>(r2);

        specialinvoke $r10.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i4, i5, $i2);

        r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.image.BufferedImage im> = $r10;

        $r11 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.image.BufferedImage im>;

        $r12 = virtualinvoke $r11.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d> = $r12;

        $r14 = <net.sourceforge.plantuml.ugraphic.UAntiAliasing: net.sourceforge.plantuml.ugraphic.UAntiAliasing ANTI_ALIASING_ON>;

        $r13 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        virtualinvoke $r14.<net.sourceforge.plantuml.ugraphic.UAntiAliasing: void apply(java.awt.Graphics2D)>($r13);

        if r2 == null goto label5;

        $r18 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        virtualinvoke $r18.<java.awt.Graphics2D: void setColor(java.awt.Color)>(r2);

        $r19 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        virtualinvoke $r19.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, i4, i5);

     label5:
        if r15 == null goto label6;

        $r17 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        $r16 = new java.awt.Color;

        specialinvoke $r16.<java.awt.Color: void <init>(int,int,int)>(200, 200, 200);

        virtualinvoke $r17.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r16);

        specialinvoke r0.<net.sourceforge.plantuml.EmptyImageBuilder: void printWatermark(java.lang.String,int,int)>(r15, i4, i5);

     label6:
        return;
    }

    private int getType(java.awt.Color)
    {
        java.awt.Color r0;
        int $i0;
        net.sourceforge.plantuml.EmptyImageBuilder r1;

        r1 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return 2;

     label1:
        $i0 = virtualinvoke r0.<java.awt.Color: int getAlpha()>();

        if $i0 == 255 goto label2;

        return 2;

     label2:
        return 1;
    }

    private void printWatermark(java.lang.String, int, int)
    {
        net.sourceforge.plantuml.EmptyImageBuilder r0;
        java.awt.Graphics2D $r1, $r3, $r6, $r11, $r12, $r14;
        java.awt.Font r2;
        java.awt.FontMetrics r4;
        java.lang.String r5, r10;
        java.awt.geom.Rectangle2D r7, $r13;
        double $d0, $d1, $d2;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, i9;
        java.util.Iterator r8;
        boolean $z0;
        java.lang.Object $r9;
        java.util.List r15;

        r0 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        r5 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        r2 = virtualinvoke $r1.<java.awt.Graphics2D: java.awt.Font getFont()>();

        $r3 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        r4 = virtualinvoke $r3.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(r2);

        $r6 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        r7 = virtualinvoke r4.<java.awt.FontMetrics: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.Graphics)>(r5, $r6);

        $d0 = virtualinvoke r7.<java.awt.geom.Rectangle2D: double getHeight()>();

        i0 = (int) $d0;

        $d1 = virtualinvoke r7.<java.awt.geom.Rectangle2D: double getWidth()>();

        i1 = (int) $d1;

        if i0 < 2 goto label01;

        if i1 >= 2 goto label02;

     label01:
        return;

     label02:
        if i1 > i2 goto label07;

        i7 = i0;

     label03:
        if i7 >= i3 goto label06;

        i8 = 0;

     label04:
        if i8 >= i2 goto label05;

        $r14 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        virtualinvoke $r14.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>(r5, i8, i7);

        $i6 = i1 + 10;

        i8 = i8 + $i6;

        goto label04;

     label05:
        $i5 = i0 + 1;

        i7 = i7 + $i5;

        goto label03;

     label06:
        goto label11;

     label07:
        r15 = specialinvoke r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.util.List withBreaks(java.lang.String,java.awt.Font,java.awt.FontMetrics,int)>(r5, r2, r4, i2);

        i9 = 0;

     label08:
        if i9 >= i3 goto label11;

        r8 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        virtualinvoke $r11.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>(r10, 0, i9);

        $r12 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        $r13 = virtualinvoke r4.<java.awt.FontMetrics: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.Graphics)>(r10, $r12);

        $d2 = virtualinvoke $r13.<java.awt.geom.Rectangle2D: double getHeight()>();

        $i4 = (int) $d2;

        i9 = i9 + $i4;

        goto label09;

     label10:
        i9 = i9 + 10;

        goto label08;

     label11:
        return;
    }

    private int getWidth(java.lang.String, java.awt.Font, java.awt.FontMetrics)
    {
        java.awt.FontMetrics r0;
        java.lang.String r1;
        net.sourceforge.plantuml.EmptyImageBuilder r2;
        java.awt.Graphics2D $r3;
        java.awt.geom.Rectangle2D r4;
        double $d0;
        int $i0;
        java.awt.Font r5;

        r2 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.awt.Font;

        r0 := @parameter2: java.awt.FontMetrics;

        $r3 = r2.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        r4 = virtualinvoke r0.<java.awt.FontMetrics: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.Graphics)>(r1, $r3);

        $d0 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $i0 = (int) $d0;

        return $i0;
    }

    private java.util.List withBreaks(java.lang.String, java.awt.Font, java.awt.FontMetrics, int)
    {
        java.lang.String r0, r5, r14, $r15;
        java.lang.String[] r1;
        java.util.ArrayList $r2;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        net.sourceforge.plantuml.EmptyImageBuilder r11;
        java.awt.Font r12;
        java.awt.FontMetrics r13;

        r11 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        r0 := @parameter0: java.lang.String;

        r12 := @parameter1: java.awt.Font;

        r13 := @parameter2: java.awt.FontMetrics;

        i4 := @parameter3: int;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r14 = "";

        i0 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label6;

        r5 = r1[i5];

        $i2 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

        $r15 = r5;

        goto label3;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $i3 = specialinvoke r11.<net.sourceforge.plantuml.EmptyImageBuilder: int getWidth(java.lang.String,java.awt.Font,java.awt.FontMetrics)>($r15, r12, r13);

        if $i3 >= i4 goto label4;

        r14 = $r15;

        goto label5;

     label4:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r14);

        r14 = r5;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $i1 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i1 <= 0 goto label7;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r14);

     label7:
        return $r2;
    }

    public void <init>(java.lang.String, int, int, java.awt.Color, net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.EmptyImageBuilder r0;
        java.lang.String r1;
        int i0, i1;
        double d0, $d1, $d2, $d3, $d4;
        java.awt.Color r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        byte $b2;
        java.awt.Graphics2D $r4;
        java.awt.geom.AffineTransform $r5;

        r0 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.awt.Color;

        r3 := @parameter4: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter5: double;

        $d1 = (double) i0;

        $d4 = $d1 * d0;

        $d2 = (double) i1;

        $d3 = $d2 * d0;

        specialinvoke r0.<net.sourceforge.plantuml.EmptyImageBuilder: void <init>(java.lang.String,double,double,java.awt.Color,net.sourceforge.plantuml.graphic.StringBounder)>(r1, $d4, $d3, r2, r3);

        $b2 = d0 cmpl 1.0;

        if $b2 == 0 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        $r5 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(d0, d0);

        virtualinvoke $r4.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r5);

     label1:
        return;
    }

    public java.awt.image.BufferedImage getBufferedImage()
    {
        net.sourceforge.plantuml.EmptyImageBuilder r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        $r1 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.image.BufferedImage im>;

        return $r1;
    }

    public java.awt.Graphics2D getGraphics2D()
    {
        net.sourceforge.plantuml.EmptyImageBuilder r0;
        java.awt.Graphics2D $r1;

        r0 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        $r1 = r0.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        return $r1;
    }

    public net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d getUGraphicG2d()
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r0;
        net.sourceforge.plantuml.EmptyImageBuilder r1;
        java.awt.Color $r2;
        net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d $r4;
        net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity $r5;
        java.awt.Graphics2D $r6;
        net.sourceforge.plantuml.graphic.StringBounder $r7;
        java.awt.image.BufferedImage $r9;

        r1 := @this: net.sourceforge.plantuml.EmptyImageBuilder;

        $r0 = new net.sourceforge.plantuml.ugraphic.color.HColorSimple;

        $r2 = r1.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Color background>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: void <init>(java.awt.Color,boolean)>($r2, 0);

        $r4 = new net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d;

        $r5 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity: void <init>()>();

        $r7 = r1.<net.sourceforge.plantuml.EmptyImageBuilder: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $r6 = r1.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.Graphics2D g2d>;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.graphic.StringBounder,java.awt.Graphics2D,double)>($r0, $r5, $r7, $r6, 1.0);

        $r9 = r1.<net.sourceforge.plantuml.EmptyImageBuilder: java.awt.image.BufferedImage im>;

        virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d: void setBufferedImage(java.awt.image.BufferedImage)>($r9);

        return $r4;
    }
}
