public class net.sourceforge.plantuml.security.SImageIO extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.security.SImageIO r0;

        r0 := @this: net.sourceforge.plantuml.security.SImageIO;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.imageio.stream.ImageOutputStream createImageOutputStream(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        javax.imageio.stream.ImageOutputStream $r1;

        r0 := @parameter0: java.io.OutputStream;

        $r1 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageOutputStream createImageOutputStream(java.lang.Object)>(r0);

        return $r1;
    }

    public static void write(java.awt.image.RenderedImage, java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.awt.image.RenderedImage r0;
        java.lang.String r1;
        java.io.OutputStream r2;

        r0 := @parameter0: java.awt.image.RenderedImage;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.OutputStream;

        staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)>(r0, r1, r2);

        return;
    }

    public static void write(java.awt.image.RenderedImage, java.lang.String, net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        java.awt.image.RenderedImage r0;
        java.lang.String r1;
        net.sourceforge.plantuml.security.SFile r2;
        java.io.File $r3;

        r0 := @parameter0: java.awt.image.RenderedImage;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: net.sourceforge.plantuml.security.SFile;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

        staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.File)>(r0, r1, $r3);

        return;
    }

    public static java.awt.image.BufferedImage read(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.awt.image.BufferedImage $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.File)>(r0);

        return $r1;
    }

    public static java.awt.image.BufferedImage read(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.awt.image.BufferedImage $r2;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

        $r2 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.File)>($r1);

        return $r2;
    }

    public static java.awt.image.BufferedImage read(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.awt.image.BufferedImage $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r0);

        return $r1;
    }

    public static java.awt.image.BufferedImage read(byte[]) throws java.io.IOException
    {
        java.io.ByteArrayInputStream $r0;
        byte[] r1;
        java.awt.image.BufferedImage $r2;

        r1 := @parameter0: byte[];

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r2 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r0);

        return $r2;
    }

    public static javax.imageio.stream.ImageInputStream createImageInputStream(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        javax.imageio.stream.ImageInputStream $r2;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

        $r2 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>($r1);

        return $r2;
    }

    public static javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object) throws java.io.IOException
    {
        boolean $z0;
        javax.imageio.stream.ImageInputStream $r0;
        net.sourceforge.plantuml.security.SFile $r1;
        java.lang.Object r2;

        r2 := @parameter0: java.lang.Object;

        $z0 = r2 instanceof net.sourceforge.plantuml.security.SFile;

        if $z0 == 0 goto label1;

        $r1 = (net.sourceforge.plantuml.security.SFile) r2;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

     label1:
        $r0 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>(r2);

        return $r0;
    }

    public static javax.imageio.stream.ImageInputStream createImageInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        javax.imageio.stream.ImageInputStream $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.Iterator getImageReaders(javax.imageio.stream.ImageInputStream)
    {
        javax.imageio.stream.ImageInputStream r0;
        java.util.Iterator $r1;

        r0 := @parameter0: javax.imageio.stream.ImageInputStream;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReaders(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.Iterator getImageWritersBySuffix(java.lang.String)
    {
        java.lang.String r0;
        java.util.Iterator $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersBySuffix(java.lang.String)>(r0);

        return $r1;
    }
}
