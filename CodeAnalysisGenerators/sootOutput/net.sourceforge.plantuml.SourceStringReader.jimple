public class net.sourceforge.plantuml.SourceStringReader extends java.lang.Object
{
    private final java.util.List blocks;
    private final net.sourceforge.plantuml.api.ThemeStyle style;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines $r1;
        java.lang.String r2;
        java.util.List $r3;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.util.List)>($r1, r2, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines $r1;
        java.lang.String r2, $r4, r6;
        java.nio.charset.Charset $r3;
        java.util.List $r5;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.lang.String,java.util.List)>($r1, r2, $r4, $r5);

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines $r1;
        java.lang.String r2, $r4;
        java.nio.charset.Charset r3;
        java.util.List $r5;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.nio.charset.Charset;

        $r1 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r4 = virtualinvoke r3.<java.nio.charset.Charset: java.lang.String name()>();

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.lang.String,java.util.List)>($r1, r2, $r4, $r5);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.lang.String, java.util.List)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        java.lang.String r2, $r4;
        java.nio.charset.Charset $r3;
        java.util.List r5;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.util.List;

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.lang.String,java.util.List)>(r1, r2, $r4, r5);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.lang.String)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        java.lang.String r2, $r4;
        java.nio.charset.Charset $r3;
        java.util.List $r5;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r2 := @parameter1: java.lang.String;

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.lang.String,java.util.List)>(r1, r2, $r4, $r5);

        return;
    }

    public void <init>(java.lang.String, net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines $r1;
        java.lang.String r2;
        java.nio.charset.Charset $r3;
        java.util.List $r4;
        net.sourceforge.plantuml.security.SFile r5;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: net.sourceforge.plantuml.security.SFile;

        $r1 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createEmpty()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.nio.charset.Charset,java.util.List,net.sourceforge.plantuml.security.SFile)>($r1, r2, $r3, $r4, r5);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.lang.String, java.lang.String, java.util.List)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        java.lang.String r2, r3;
        java.util.List r4;
        net.sourceforge.plantuml.FileSystem $r5;
        net.sourceforge.plantuml.security.SFile $r6;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.List;

        $r5 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.security.SFile getCurrentDir()>();

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.lang.String,java.util.List,net.sourceforge.plantuml.security.SFile)>(r1, r2, r3, r4, $r6);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.lang.String, java.lang.String, java.util.List, net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        java.lang.String r2, r3;
        java.nio.charset.Charset $r4;
        java.util.List r5;
        net.sourceforge.plantuml.security.SFile r6;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: java.util.List;

        r6 := @parameter4: net.sourceforge.plantuml.security.SFile;

        $r4 = staticinvoke <net.sourceforge.plantuml.utils.CharsetUtils: java.nio.charset.Charset charsetOrDefault(java.lang.String)>(r3);

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.nio.charset.Charset,java.util.List,net.sourceforge.plantuml.security.SFile)>(r1, r2, $r4, r5, r6);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.lang.String, java.nio.charset.Charset, java.util.List, net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.preproc.Defines r1;
        java.lang.String r2;
        java.nio.charset.Charset r3;
        java.util.List r4;
        net.sourceforge.plantuml.security.SFile r5;
        net.sourceforge.plantuml.api.ThemeStyle $r6;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.nio.charset.Charset;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: net.sourceforge.plantuml.security.SFile;

        $r6 = <net.sourceforge.plantuml.api.ThemeStyle: net.sourceforge.plantuml.api.ThemeStyle LIGHT_REGULAR>;

        specialinvoke r0.<net.sourceforge.plantuml.SourceStringReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.lang.String,java.nio.charset.Charset,java.util.List,net.sourceforge.plantuml.security.SFile,net.sourceforge.plantuml.api.ThemeStyle)>(r1, r2, r3, r4, r5, $r6);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.lang.String, java.nio.charset.Charset, java.util.List, net.sourceforge.plantuml.security.SFile, net.sourceforge.plantuml.api.ThemeStyle)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.BlockUmlBuilder $r2;
        java.util.List r3, $r9;
        java.nio.charset.Charset r4;
        net.sourceforge.plantuml.preproc.Defines r5;
        java.io.StringReader $r6;
        java.lang.String r7, $r14;
        net.sourceforge.plantuml.security.SFile r8;
        java.io.IOException $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.IllegalStateException $r15;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r5 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r7 := @parameter1: java.lang.String;

        r4 := @parameter2: java.nio.charset.Charset;

        r3 := @parameter3: java.util.List;

        r8 := @parameter4: net.sourceforge.plantuml.security.SFile;

        r1 := @parameter5: net.sourceforge.plantuml.api.ThemeStyle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style> = r1;

     label1:
        $r2 = new net.sourceforge.plantuml.BlockUmlBuilder;

        $r6 = new java.io.StringReader;

        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>(r7);

        specialinvoke $r2.<net.sourceforge.plantuml.BlockUmlBuilder: void <init>(net.sourceforge.plantuml.api.ThemeStyle,java.util.List,java.nio.charset.Charset,net.sourceforge.plantuml.preproc.Defines,java.io.Reader,net.sourceforge.plantuml.security.SFile,java.lang.String)>(r1, r3, r4, r5, $r6, r8, "string");

        $r9 = virtualinvoke $r2.<net.sourceforge.plantuml.BlockUmlBuilder: java.util.List getBlockUmls()>();

        r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks> = $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r14);

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw $r15;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String generateImage(java.io.OutputStream) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.io.OutputStream r1;
        net.sourceforge.plantuml.core.DiagramDescription $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream)>(r1);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        return $r3;
    }

    public net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.io.OutputStream r1;
        net.sourceforge.plantuml.core.DiagramDescription $r2;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream,int)>(r1, 0);

        return $r2;
    }

    public java.lang.String generateImage(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.security.SFile r1;
        net.sourceforge.plantuml.core.DiagramDescription $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(net.sourceforge.plantuml.security.SFile)>(r1);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        return $r3;
    }

    public net.sourceforge.plantuml.core.DiagramDescription outputImage(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.BufferedOutputStream r1;
        net.sourceforge.plantuml.SourceStringReader r2;
        java.lang.Throwable $r3, $r5;
        net.sourceforge.plantuml.core.DiagramDescription r6;

        r2 := @this: net.sourceforge.plantuml.SourceStringReader;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.BufferedOutputStream createBufferedOutputStream()>();

     label1:
        r6 = virtualinvoke r2.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream,int)>(r1, 0);

     label2:
        if r1 == null goto label3;

        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label3:
        return r6;

     label4:
        $r5 := @caughtexception;

        if r1 == null goto label8;

     label5:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.String generateImage(java.io.OutputStream, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.io.OutputStream r1;
        net.sourceforge.plantuml.FileFormatOption r2, $r4;
        net.sourceforge.plantuml.api.ThemeStyle $r3;
        net.sourceforge.plantuml.core.DiagramDescription $r5;
        java.lang.String $r6;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        $r3 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream,net.sourceforge.plantuml.FileFormatOption)>(r1, $r4);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        return $r6;
    }

    public net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.io.OutputStream r1;
        net.sourceforge.plantuml.FileFormatOption r2, $r4;
        net.sourceforge.plantuml.api.ThemeStyle $r3;
        net.sourceforge.plantuml.core.DiagramDescription $r5;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        $r3 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>(r1, 0, $r4);

        return $r5;
    }

    public java.lang.String generateImage(java.io.OutputStream, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.io.OutputStream r1;
        int i0;
        net.sourceforge.plantuml.core.DiagramDescription $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream,int)>(r1, i0);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        return $r3;
    }

    public net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.io.OutputStream r1;
        int i0;
        net.sourceforge.plantuml.FileFormatOption $r2;
        net.sourceforge.plantuml.FileFormat $r3;
        net.sourceforge.plantuml.core.DiagramDescription $r4;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $r2 = new net.sourceforge.plantuml.FileFormatOption;

        $r3 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r2.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r3);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>(r1, i0, $r2);

        return $r4;
    }

    public java.lang.String generateImage(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.io.OutputStream r1;
        int i0;
        net.sourceforge.plantuml.FileFormatOption r2, $r4;
        net.sourceforge.plantuml.api.ThemeStyle $r3;
        net.sourceforge.plantuml.core.DiagramDescription $r5;
        java.lang.String $r6;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        $r3 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>(r1, i0, $r4);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.core.DiagramDescription: java.lang.String getDescription()>();

        return $r6;
    }

    public net.sourceforge.plantuml.core.DiagramDescription outputImage(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.api.ThemeStyle $r1;
        java.util.List $r2, $r3;
        int $i0, i1, i2;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.Object $r9;
        net.sourceforge.plantuml.BlockUml r10;
        net.sourceforge.plantuml.core.Diagram r11;
        java.io.OutputStream r12;
        net.sourceforge.plantuml.core.DiagramDescription $r14;
        net.sourceforge.plantuml.FileFormatOption r16, r17;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r12 := @parameter0: java.io.OutputStream;

        i2 := @parameter1: int;

        r16 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        $r1 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        r17 = virtualinvoke r16.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.ImageData noStartumlFound(java.io.OutputStream,net.sourceforge.plantuml.FileFormatOption)>(r12, r17);

        return null;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.BlockUml) $r9;

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        i1 = interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: int getNbImages()>();

        if i2 >= i1 goto label3;

        interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.ImageData exportDiagram(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>(r12, i2, r17);

        $r14 = interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        return $r14;

     label3:
        i2 = i2 - i1;

        goto label2;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numImage is too big = ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r8);

        return null;
    }

    public net.sourceforge.plantuml.core.DiagramDescription generateDiagramDescription(int, net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.api.ThemeStyle $r1;
        java.util.List $r2, $r3;
        int $i0, i1, i2;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.Object $r9;
        net.sourceforge.plantuml.BlockUml r10;
        net.sourceforge.plantuml.core.Diagram r11;
        net.sourceforge.plantuml.core.DiagramDescription $r12;
        net.sourceforge.plantuml.FileFormatOption r13;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        i2 := @parameter0: int;

        r13 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        $r1 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        virtualinvoke r13.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.BlockUml) $r9;

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        i1 = interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: int getNbImages()>();

        if i2 >= i1 goto label3;

        $r12 = interfaceinvoke r11.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        return $r12;

     label3:
        i2 = i2 - i1;

        goto label2;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numImage is too big = ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void error(java.lang.String)>($r8);

        return null;
    }

    public net.sourceforge.plantuml.core.DiagramDescription generateDiagramDescription()
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.core.DiagramDescription $r1;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription generateDiagramDescription(int)>(0);

        return $r1;
    }

    public net.sourceforge.plantuml.core.DiagramDescription generateDiagramDescription(net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.FileFormatOption r1, $r3;
        net.sourceforge.plantuml.api.ThemeStyle $r2;
        net.sourceforge.plantuml.core.DiagramDescription $r4;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r1 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        $r2 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r2);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription generateDiagramDescription(int,net.sourceforge.plantuml.FileFormatOption)>(0, $r3);

        return $r4;
    }

    public net.sourceforge.plantuml.core.DiagramDescription generateDiagramDescription(int)
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        int i0;
        net.sourceforge.plantuml.FileFormatOption $r1, $r4;
        net.sourceforge.plantuml.FileFormat $r2;
        net.sourceforge.plantuml.api.ThemeStyle $r3;
        net.sourceforge.plantuml.core.DiagramDescription $r5;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        i0 := @parameter0: int;

        $r1 = new net.sourceforge.plantuml.FileFormatOption;

        $r2 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat PNG>;

        specialinvoke $r1.<net.sourceforge.plantuml.FileFormatOption: void <init>(net.sourceforge.plantuml.FileFormat)>($r2);

        $r3 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.core.DiagramDescription generateDiagramDescription(int,net.sourceforge.plantuml.FileFormatOption)>(i0, $r4);

        return $r5;
    }

    public java.lang.String getCMapData(int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.api.ThemeStyle $r1;
        java.util.List $r2, $r3;
        int $i0, i1, i2;
        java.util.Iterator r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        net.sourceforge.plantuml.BlockUml r6;
        net.sourceforge.plantuml.core.Diagram r7;
        net.sourceforge.plantuml.NullOutputStream $r8;
        net.sourceforge.plantuml.core.ImageData r9;
        java.lang.String $r10;
        net.sourceforge.plantuml.FileFormatOption r11, r12;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        i2 := @parameter0: int;

        r11 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        $r1 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        r12 = virtualinvoke r11.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.BlockUml) $r5;

        r7 = virtualinvoke r6.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        i1 = interfaceinvoke r7.<net.sourceforge.plantuml.core.Diagram: int getNbImages()>();

        if i2 >= i1 goto label4;

        $r8 = new net.sourceforge.plantuml.NullOutputStream;

        specialinvoke $r8.<net.sourceforge.plantuml.NullOutputStream: void <init>()>();

        r9 = interfaceinvoke r7.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.ImageData exportDiagram(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>($r8, i2, r12);

        $z1 = interfaceinvoke r9.<net.sourceforge.plantuml.core.ImageData: boolean containsCMapData()>();

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke r9.<net.sourceforge.plantuml.core.ImageData: java.lang.String getCMapData(java.lang.String)>("plantuml");

        return $r10;

     label3:
        return null;

     label4:
        i2 = i2 - i1;

        goto label2;

     label5:
        return null;
    }

    public net.sourceforge.plantuml.core.ImageData noStartumlFound(java.io.OutputStream, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        net.sourceforge.plantuml.api.ThemeStyle $r1;
        java.lang.String[] $r2;
        java.util.List $r3;
        boolean $z0;
        net.sourceforge.plantuml.svek.IEntityImage r4;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r5;
        java.io.OutputStream r6;
        net.sourceforge.plantuml.core.ImageData $r7;
        net.sourceforge.plantuml.FileFormatOption r8, r9;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        r6 := @parameter0: java.io.OutputStream;

        r8 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        $r1 = r0.<net.sourceforge.plantuml.SourceStringReader: net.sourceforge.plantuml.api.ThemeStyle style>;

        r9 = virtualinvoke r8.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormatOption withStyle(net.sourceforge.plantuml.api.ThemeStyle)>($r1);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "No @startuml/@enduml found";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $z0 = virtualinvoke r9.<net.sourceforge.plantuml.FileFormatOption: boolean isUseRedForError()>();

        r4 = staticinvoke <net.sourceforge.plantuml.graphic.GraphicStrings: net.sourceforge.plantuml.svek.IEntityImage createForError(java.util.List,boolean)>($r3, $z0);

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder plainImageBuilder(net.sourceforge.plantuml.graphic.UDrawable,net.sourceforge.plantuml.FileFormatOption)>(r4, r9);

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.core.ImageData write(java.io.OutputStream)>(r6);

        return $r7;
    }

    public final java.util.List getBlocks()
    {
        net.sourceforge.plantuml.SourceStringReader r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.SourceStringReader;

        $r1 = r0.<net.sourceforge.plantuml.SourceStringReader: java.util.List blocks>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }
}
