public class net.sourceforge.plantuml.preproc.FileWithSuffix extends java.lang.Object
{
    private final net.sourceforge.plantuml.AFile file;
    private final java.lang.String suffix;
    private final java.lang.String entry;
    private final java.lang.String description;
    static final boolean $assertionsDisabled;

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        net.sourceforge.plantuml.AFile $r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        $r1 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        if $r1 != null goto label1;

        $r4 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public java.io.Reader getReader(java.nio.charset.Charset) throws java.io.IOException
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        net.sourceforge.plantuml.AFile $r1, $r2;
        java.io.InputStream r3, r6;
        java.lang.String $r4, $r5;
        java.io.InputStreamReader $r7, $r9;
        java.nio.charset.Charset r8;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        r8 := @parameter0: java.nio.charset.Charset;

        $r1 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.AFile: java.io.InputStream openFile()>();

        if r3 != null goto label2;

        return null;

     label2:
        $r4 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry>;

        if $r4 != null goto label3;

        $r9 = new java.io.InputStreamReader;

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r3, r8);

        return $r9;

     label3:
        $r5 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry>;

        r6 = specialinvoke r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.io.InputStream getDataFromZip(java.io.InputStream,java.lang.String)>(r3, $r5);

        if r6 != null goto label4;

        return null;

     label4:
        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r6, r8);

        return $r7;
    }

    private java.io.InputStream getDataFromZip(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.util.zip.ZipInputStream $r0;
        java.io.InputStream r1;
        java.lang.String r3, r4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.preproc.FileWithSuffix r5;
        java.util.zip.ZipEntry r6;

        r5 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        r1 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.lang.String;

        $r0 = new java.util.zip.ZipInputStream;

        specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>(r1);

        r6 = virtualinvoke $r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

     label1:
        if r6 == null goto label4;

        r3 = virtualinvoke r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke r6.<java.util.zip.ZipEntry: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        return $r0;

     label3:
        r6 = virtualinvoke $r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        goto label1;

     label4:
        virtualinvoke $r0.<java.util.zip.ZipInputStream: void closeEntry()>();

        virtualinvoke $r0.<java.util.zip.ZipInputStream: void close()>();

        return null;
    }

    public boolean fileOk()
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        net.sourceforge.plantuml.AFile $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        $r1 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        if $r1 == null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.AFile: boolean isOk()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void <init>(net.sourceforge.plantuml.security.SFile, java.lang.String)
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        net.sourceforge.plantuml.AFileRegular $r1;
        net.sourceforge.plantuml.security.SFile r2;
        java.lang.String r3, $r4;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        r2 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.AFileRegular;

        specialinvoke $r1.<net.sourceforge.plantuml.AFileRegular: void <init>(net.sourceforge.plantuml.security.SFile)>(r2);

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file> = $r1;

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String suffix> = r3;

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry> = null;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String description> = $r4;

        return;
    }

    void <init>(java.lang.String, java.lang.String, net.sourceforge.plantuml.AFile, java.lang.String)
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        java.lang.String r1, r2, r4;
        net.sourceforge.plantuml.AFile r3;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: net.sourceforge.plantuml.AFile;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String description> = r1;

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String suffix> = r2;

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file> = r3;

        r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry> = r4;

        return;
    }

    static net.sourceforge.plantuml.preproc.FileWithSuffix none()
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix $r0;

        $r0 = new net.sourceforge.plantuml.preproc.FileWithSuffix;

        specialinvoke $r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: void <init>(java.lang.String,java.lang.String,net.sourceforge.plantuml.AFile,java.lang.String)>("NONE", null, null, null);

        return $r0;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        net.sourceforge.plantuml.AFile $r1, $r6;
        java.lang.String $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        i4 = 0;

        $r1 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        if $r1 == null goto label1;

        $r6 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $i3 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        i4 = 0 + $i3;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String suffix>;

        if $r2 == null goto label2;

        $r5 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String suffix>;

        $i1 = virtualinvoke $r5.<java.lang.String: int hashCode()>();

        $i2 = $i1 * 43;

        i4 = i4 + $i2;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry>;

        if $r3 == null goto label3;

        $r4 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry>;

        $i0 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        i4 = i4 + $i0;

     label3:
        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        net.sourceforge.plantuml.preproc.FileWithSuffix r1, r2;
        net.sourceforge.plantuml.AFile $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r6, $r7, $r8;

        r2 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        r0 := @parameter0: java.lang.Object;

        r1 = (net.sourceforge.plantuml.preproc.FileWithSuffix) r0;

        $r4 = r2.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $r3 = r1.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r6 = r2.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String suffix>;

        $r5 = r1.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String suffix>;

        $z1 = staticinvoke <net.sourceforge.plantuml.preproc.FileWithSuffix: boolean equals(java.lang.String,java.lang.String)>($r6, $r5);

        if $z1 == 0 goto label1;

        $r8 = r2.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry>;

        $r7 = r1.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String entry>;

        $z2 = staticinvoke <net.sourceforge.plantuml.preproc.FileWithSuffix: boolean same(java.lang.String,java.lang.String)>($r8, $r7);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private static boolean same(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;

     label2:
        return 0;
    }

    public net.sourceforge.plantuml.AParentFolder getParentFile()
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        net.sourceforge.plantuml.AFile $r1, $r4, $r9, $r13;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r11;
        java.lang.String $r6, $r12;
        net.sourceforge.plantuml.AParentFolder $r10, $r14;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        $r1 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Getting parent of ");

        $r4 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-->The parent is ");

        $r9 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.AFile: net.sourceforge.plantuml.AParentFolder getParentFile()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r12);

        $r13 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.AFile: net.sourceforge.plantuml.AParentFolder getParentFile()>();

        return $r14;
    }

    public java.lang.String getDescription()
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        $r1 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String description>;

        return $r1;
    }

    public final java.lang.String getSuffix()
    {
        net.sourceforge.plantuml.preproc.FileWithSuffix r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.preproc.FileWithSuffix;

        $r1 = r0.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String suffix>;

        return $r1;
    }

    private static boolean equals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        boolean $z0, $z1;
        java.lang.AssertionError $r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        if r2 != null goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r2 == null goto label2;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        return $z1;

     label2:
        $z0 = <net.sourceforge.plantuml.preproc.FileWithSuffix: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        if r0 != null goto label3;

        if r2 != null goto label5;

     label3:
        if r0 == null goto label4;

        if r2 == null goto label5;

     label4:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label5:
        return 0;
    }

    public static java.util.Set convert(java.util.Set) throws java.io.FileNotFoundException
    {
        java.util.HashSet $r0;
        java.util.Set r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.preproc.FileWithSuffix r5;
        net.sourceforge.plantuml.AFile $r6;
        net.sourceforge.plantuml.security.SFile $r7;
        java.io.File $r8;

        r2 := @parameter0: java.util.Set;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.preproc.FileWithSuffix) $r4;

        $r6 = r5.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AFile file>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.AFile: net.sourceforge.plantuml.security.SFile getUnderlyingFile()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.String getFileName(java.io.File)
    {
        java.io.File r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/preproc/FileWithSuffix;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.preproc.FileWithSuffix: boolean $assertionsDisabled> = $z1;

        return;
    }
}
