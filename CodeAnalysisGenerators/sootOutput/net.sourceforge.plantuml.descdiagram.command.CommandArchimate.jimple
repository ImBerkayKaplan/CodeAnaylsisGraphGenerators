public class net.sourceforge.plantuml.descdiagram.command.CommandArchimate extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.descdiagram.command.CommandArchimate r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandArchimate;

        $r1 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandArchimate: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r10, $r13, $r17, $r25, $r29, $r37, $r41, $r51;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r7, $r8, $r11, $r14, $r18, $r19, $r20, $r21, $r22, $r23, $r26, $r30, $r31, $r32, $r33, $r34, $r35, $r38, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r52, $r53, $r54;
        net.sourceforge.plantuml.graphic.color.ColorParser $r6;
        net.sourceforge.plantuml.command.regex.RegexOr $r9;
        net.sourceforge.plantuml.command.regex.RegexConcat $r12, $r16, $r24, $r28, $r36, $r40, $r50, $r55;
        net.sourceforge.plantuml.command.regex.RegexOptional $r15, $r27, $r39, $r49;

        $r0 = class "Lnet/sourceforge/plantuml/descdiagram/command/CommandArchimate;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[9];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SYMBOL", "archimate");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandArchimate: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[3] = $r7;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[4] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r10 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%g].+?[%g])");

        $r10[0] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r13 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r13[0] = $r14;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r17 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r17[0] = $r18;

        $r19 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r19.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE2", "(?:\\<\\<([-\\w]+)\\>\\>)");

        $r17[1] = $r19;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r17);

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r16);

        $r13[1] = $r15;

        $r20 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r13[2] = $r20;

        $r21 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r21.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r13[3] = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r13[4] = $r22;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r13[5] = $r23;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r13);

        $r10[1] = $r12;

        $r24 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r25 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r26 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r26.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE3", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r25[0] = $r26;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r28 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r29 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r30 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r29[0] = $r30;

        $r31 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r31.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE3", "(?:\\<\\<([-\\w]+)\\>\\>)");

        $r29[1] = $r31;

        specialinvoke $r28.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r29);

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r28);

        $r25[1] = $r27;

        $r32 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r25[2] = $r32;

        $r33 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r33.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r25[3] = $r33;

        $r34 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r25[4] = $r34;

        $r35 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r35.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY3", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r25[5] = $r35;

        specialinvoke $r24.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r25);

        $r10[2] = $r24;

        $r36 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r37 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r38 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r38.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY4", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%pLN_.]+)");

        $r37[0] = $r38;

        $r39 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r40 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r41 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r42 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r41[0] = $r42;

        $r43 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r43.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE4", "(?:\\<\\<([-\\w]+)\\>\\>)");

        $r41[1] = $r43;

        specialinvoke $r40.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r41);

        specialinvoke $r39.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r40);

        $r37[1] = $r39;

        $r44 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r37[2] = $r44;

        $r45 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r45.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r37[3] = $r45;

        $r46 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r37[4] = $r46;

        $r47 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r47.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE4", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r37[5] = $r47;

        specialinvoke $r36.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r37);

        $r10[3] = $r36;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r10);

        $r2[5] = $r9;

        $r48 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r48;

        $r49 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r50 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r51 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r52 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r51[0] = $r52;

        $r53 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r53.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE", "(?:\\<\\<([-\\w]+)\\>\\>)");

        $r51[1] = $r53;

        specialinvoke $r50.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r51);

        specialinvoke $r49.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r50);

        $r2[7] = $r49;

        $r54 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[8] = $r54;

        $r55 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r55;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.descdiagram.DescriptionDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r2, r6, r10, $r24, r36, r37;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram r3;
        net.sourceforge.plantuml.cucadiagram.Ident r4;
        boolean $z0;
        net.sourceforge.plantuml.graphic.USymbol $r7, $r12;
        net.sourceforge.plantuml.cucadiagram.LeafType $r8;
        net.sourceforge.plantuml.cucadiagram.ILeaf r9;
        net.sourceforge.plantuml.cucadiagram.Display $r11;
        net.sourceforge.plantuml.graphic.color.ColorParser $r13;
        net.sourceforge.plantuml.ISkinParam $r14, $r16, $r25, $r26, $r30;
        net.sourceforge.plantuml.api.ThemeStyle $r15;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r17, $r31;
        net.sourceforge.plantuml.graphic.color.Colors r18;
        net.sourceforge.plantuml.command.CommandExecutionResult $r19;
        java.lang.StringBuilder $r20, $r21, $r22, $r23;
        int $i0;
        double $d0;
        net.sourceforge.plantuml.FontParam[] $r27;
        net.sourceforge.plantuml.FontParam $r28;
        net.sourceforge.plantuml.ugraphic.UFont $r29;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r32;
        net.sourceforge.plantuml.descdiagram.command.CommandArchimate r33;
        net.sourceforge.plantuml.LineLocation r34;
        net.sourceforge.plantuml.cucadiagram.Code $r35;

        r33 := @this: net.sourceforge.plantuml.descdiagram.command.CommandArchimate;

        r3 := @parameter0: net.sourceforge.plantuml.descdiagram.DescriptionDiagram;

        r34 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r1);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r2);

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: boolean V1972()>();

        if $z0 == 0 goto label1;

        $r35 = r4;

        goto label2;

     label1:
        $r35 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r2);

     label2:
        r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("STEREOTYPE", 0);

        $r8 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DESCRIPTION>;

        $r7 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol ARCHIMATE>;

        r9 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r4, $r35, $r8, $r7);

        r10 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        r36 = r10;

        if r10 != null goto label3;

        r36 = interfaceinvoke $r35.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

     label3:
        r37 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r36);

        $r11 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r37);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setDisplay(net.sourceforge.plantuml.cucadiagram.Display)>($r11);

        $r12 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol ARCHIMATE>;

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setUSymbol(net.sourceforge.plantuml.graphic.USymbol)>($r12);

        if r6 == null goto label4;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<$archimate/");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i0 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i0;

        $r26 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r27 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r28 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r27[0] = $r28;

        $r29 = interfaceinvoke $r26.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r27);

        $r30 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r32 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r24, $d0, $r29, $r31);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r32);

     label4:
        $r13 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandArchimate: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r14 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r16 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r18 = virtualinvoke $r13.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r15, r0, $r17);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r18);

        $r19 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r19;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.descdiagram.command.CommandArchimate r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandArchimate;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.descdiagram.DescriptionDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.descdiagram.command.CommandArchimate: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.descdiagram.DescriptionDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
