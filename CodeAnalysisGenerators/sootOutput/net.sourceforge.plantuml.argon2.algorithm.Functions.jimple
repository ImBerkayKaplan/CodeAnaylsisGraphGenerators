class net.sourceforge.plantuml.argon2.algorithm.Functions extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    void <init>()
    {
        net.sourceforge.plantuml.argon2.algorithm.Functions r0;

        r0 := @this: net.sourceforge.plantuml.argon2.algorithm.Functions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[] initialHash(byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[])
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r0, r1;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest r2;
        byte[] r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r18;

        r3 := @parameter0: byte[];

        r4 := @parameter1: byte[];

        r5 := @parameter2: byte[];

        r6 := @parameter3: byte[];

        r7 := @parameter4: byte[];

        r8 := @parameter5: byte[];

        r9 := @parameter6: byte[];

        r10 := @parameter7: byte[];

        r11 := @parameter8: byte[];

        r12 := @parameter9: byte[];

        r13 := @parameter10: byte[];

        r14 := @parameter11: byte[];

        r15 := @parameter12: byte[];

        r16 := @parameter13: byte[];

        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void <init>()>();

        r1 = virtualinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDigestLength(int)>(64);

        r2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest: net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest newInstance(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>(r1);

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r3);

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r4);

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r5);

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r6);

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r7);

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r8);

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r9);

        if r10 == null goto label1;

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r10);

     label1:
        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r11);

        if r12 == null goto label2;

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r12);

     label2:
        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r13);

        if r14 == null goto label3;

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r14);

     label3:
        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r15);

        if r16 == null goto label4;

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r16);

     label4:
        r17 = interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: byte[] digest()>();

        $z0 = <net.sourceforge.plantuml.argon2.algorithm.Functions: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $i0 = lengthof r17;

        if $i0 == 64 goto label5;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label5:
        return r17;
    }

    static byte[] blake2bLong(byte[], int)
    {
        boolean $z0, $z1;
        int i0, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, i14, i15, i16;
        byte[] r0, r1, r4, r5, r6;
        java.lang.AssertionError $r2, $r3;
        byte $b13;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $z0 = <net.sourceforge.plantuml.argon2.algorithm.Functions: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i11 = lengthof r1;

        if $i11 == 72 goto label1;

        $i12 = lengthof r1;

        if $i12 == 1024 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r4 = newarray (byte)[i0];

        r0 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] intToLittleEndianBytes(int)>(i0);

        if i0 > 64 goto label2;

        r4 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: byte[] blake2b(byte[],byte[],int)>(r1, r0, i0);

        goto label7;

     label2:
        r5 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: byte[] blake2b(byte[],byte[],int)>(r1, r0, 64);

        $i2 = 64 / 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r4, 0, $i2);

        $i4 = i0 / 32;

        $i3 = i0 % 32;

        if $i3 != 0 goto label3;

        $b13 = 0;

        goto label4;

     label3:
        $b13 = 1;

     label4:
        $i5 = $i4 + $b13;

        i6 = $i5 - 2;

        i14 = 64 / 2;

        i15 = 2;

     label5:
        if i15 > i6 goto label6;

        r5 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: byte[] blake2b(byte[],byte[],int)>(r5, null, 64);

        $i9 = 64 / 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r4, i14, $i9);

        i15 = i15 + 1;

        $i10 = 64 / 2;

        i14 = i14 + $i10;

        goto label5;

     label6:
        $i7 = 32 * i6;

        i16 = i0 - $i7;

        r6 = staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: byte[] blake2b(byte[],byte[],int)>(r5, null, i16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r4, i14, i16);

     label7:
        $z1 = <net.sourceforge.plantuml.argon2.algorithm.Functions: boolean $assertionsDisabled>;

        if $z1 != 0 goto label8;

        $i8 = lengthof r4;

        if $i8 == i0 goto label8;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label8:
        return r4;
    }

    private static byte[] blake2b(byte[], byte[], int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r0, r1;
        int i0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest r2;
        byte[] r3, r4, $r5;

        r4 := @parameter0: byte[];

        r3 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void <init>()>();

        r1 = virtualinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDigestLength(int)>(i0);

        r2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest: net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest newInstance(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>(r1);

        if r3 == null goto label1;

        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r3);

     label1:
        interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: void update(byte[])>(r4);

        $r5 = interfaceinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b: byte[] digest()>();

        return $r5;
    }

    static void roundFunction(net.sourceforge.plantuml.argon2.model.Block, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
    {
        net.sourceforge.plantuml.argon2.model.Block r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15;

        r0 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i8 := @parameter3: int;

        i12 := @parameter4: int;

        i1 := @parameter5: int;

        i5 := @parameter6: int;

        i9 := @parameter7: int;

        i13 := @parameter8: int;

        i2 := @parameter9: int;

        i6 := @parameter10: int;

        i10 := @parameter11: int;

        i14 := @parameter12: int;

        i3 := @parameter13: int;

        i7 := @parameter14: int;

        i11 := @parameter15: int;

        i15 := @parameter16: int;

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i0, i1, i2, i3);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i4, i5, i6, i7);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i8, i9, i10, i11);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i12, i13, i14, i15);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i0, i5, i10, i15);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i4, i9, i14, i3);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i8, i13, i2, i7);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void F(net.sourceforge.plantuml.argon2.model.Block,int,int,int,int)>(r0, i12, i1, i6, i11);

        return;
    }

    private static void F(net.sourceforge.plantuml.argon2.model.Block, int, int, int, int)
    {
        net.sourceforge.plantuml.argon2.model.Block r0;
        int i0, i1, i2, i3;

        r0 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        i2 := @parameter4: int;

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void fBlaMka(net.sourceforge.plantuml.argon2.model.Block,int,int)>(r0, i0, i1);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void rotr64(net.sourceforge.plantuml.argon2.model.Block,int,int,long)>(r0, i2, i0, 32L);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void fBlaMka(net.sourceforge.plantuml.argon2.model.Block,int,int)>(r0, i3, i2);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void rotr64(net.sourceforge.plantuml.argon2.model.Block,int,int,long)>(r0, i1, i3, 24L);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void fBlaMka(net.sourceforge.plantuml.argon2.model.Block,int,int)>(r0, i0, i1);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void rotr64(net.sourceforge.plantuml.argon2.model.Block,int,int,long)>(r0, i2, i0, 16L);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void fBlaMka(net.sourceforge.plantuml.argon2.model.Block,int,int)>(r0, i3, i2);

        staticinvoke <net.sourceforge.plantuml.argon2.algorithm.Functions: void rotr64(net.sourceforge.plantuml.argon2.model.Block,int,int,long)>(r0, i1, i3, 63L);

        return;
    }

    private static void fBlaMka(net.sourceforge.plantuml.argon2.model.Block, int, int)
    {
        net.sourceforge.plantuml.argon2.model.Block r0;
        int i1, i3;
        long[] $r1, $r2, $r3, $r4, $r5;
        long $l2, $l4, $l5, $l6, l7, $l8, $l9, $l10, $l11, $l12;

        r0 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l2 = $r1[i1];

        $l6 = $l2 & 4294967295L;

        $r2 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l4 = $r2[i3];

        $l5 = $l4 & 4294967295L;

        l7 = $l6 * $l5;

        $r5 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $r3 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l9 = $r3[i1];

        $r4 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l8 = $r4[i3];

        $l11 = $l9 + $l8;

        $l10 = 2L * l7;

        $l12 = $l11 + $l10;

        $r5[i1] = $l12;

        return;
    }

    private static void rotr64(net.sourceforge.plantuml.argon2.model.Block, int, int, long)
    {
        net.sourceforge.plantuml.argon2.model.Block r0;
        int i0, i1, $i6, $i8;
        long[] $r1, $r2, $r3;
        long $l2, $l3, l4, l5, $l7, $l9, $l10, $l11;

        r0 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l5 := @parameter3: long;

        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l3 = $r1[i0];

        $r2 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l2 = $r2[i1];

        l4 = $l3 ^ $l2;

        $r3 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $i6 = (int) l5;

        $l10 = l4 >>> $i6;

        $l7 = 64L - l5;

        $i8 = (int) $l7;

        $l9 = l4 << $i8;

        $l11 = $l10 | $l9;

        $r3[i0] = $l11;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/argon2/algorithm/Functions;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.argon2.algorithm.Functions: boolean $assertionsDisabled> = $z1;

        return;
    }
}
