public class net.sourceforge.plantuml.svek.image.EntityImageNote extends net.sourceforge.plantuml.svek.AbstractEntityImage implements net.sourceforge.plantuml.creole.Stencil
{
    private final net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor;
    private final net.sourceforge.plantuml.ugraphic.color.HColor borderColor;
    private final double shadowing;
    private final int marginX1;
    private final int marginX2;
    private final int marginY;
    private final boolean withShadow;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.style.Style style;
    private final net.sourceforge.plantuml.graphic.TextBlock textBlock;
    private net.sourceforge.plantuml.svek.SvekLine opaleLine;
    private net.sourceforge.plantuml.svek.SvekNode node;
    private net.sourceforge.plantuml.svek.SvekNode other;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2, $r3, $r4, $r5, $r6, $r20, $r25, $r29, $r30, $r36;
        net.sourceforge.plantuml.cucadiagram.IEntity $r7, $r12;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r8, $r13;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.cucadiagram.Display r9;
        net.sourceforge.plantuml.skin.rose.Rose $r10;
        net.sourceforge.plantuml.graphic.color.Colors $r14, $r17, $r45, $r48;
        net.sourceforge.plantuml.graphic.color.ColorType $r15, $r18, $r46, $r49;
        net.sourceforge.plantuml.ugraphic.color.HColor $r16, $r19, $r23, $r38, $r47, $r50, $r56, $r69;
        net.sourceforge.plantuml.ColorParam[] $r21;
        net.sourceforge.plantuml.ColorParam $r22, $r37;
        net.sourceforge.plantuml.graphic.FontConfiguration $r24, r70;
        net.sourceforge.plantuml.FontParam $r26, $r28;
        net.sourceforge.plantuml.AlignmentParam $r27;
        net.sourceforge.plantuml.LineBreakStrategy $r31;
        net.sourceforge.plantuml.style.Style $r32, $r44, $r52, $r58, $r60, $r63, $r65;
        net.sourceforge.plantuml.graphic.TextBlock $r33;
        java.lang.CharSequence $r34;
        int $i0, $i1;
        net.sourceforge.plantuml.graphic.TextBlockEmpty $r35;
        net.sourceforge.plantuml.UmlDiagramType r40;
        net.sourceforge.plantuml.style.SName $r41;
        net.sourceforge.plantuml.style.StyleSignature $r42;
        net.sourceforge.plantuml.style.StyleBuilder $r43;
        net.sourceforge.plantuml.style.PName $r51, $r57, $r64;
        net.sourceforge.plantuml.style.Value $r53, $r59, $r66;
        net.sourceforge.plantuml.api.ThemeStyle $r54, $r61, $r67;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r55, $r62, $r68;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r71;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r40 := @parameter2: net.sourceforge.plantuml.UmlDiagramType;

        $r3 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getISkinParam(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IEntity)>(r2, r1);

        $r4 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getSkin(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IEntity)>($r3, r1);

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, $r4);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: int marginY> = 5;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: int marginX2> = 15;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: int marginX1> = 6;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: int marginX1> = 6;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: int marginX2> = 15;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: int marginY> = 5;

        $r5 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getISkinParam(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IEntity)>(r2, r1);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam skinParam> = $r5;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r8);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: boolean withShadow> = $z0;

        r9 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r10 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r10.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label03;

        $r41 = virtualinvoke r40.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        $r42 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.style.SName)>($r41);

        $r43 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r44 = virtualinvoke $r42.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r43);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style> = $r44;

        $r45 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r46 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r47 = virtualinvoke $r45.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r46);

        if $r47 != null goto label01;

        $r65 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        $r64 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r66 = virtualinvoke $r65.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r64);

        $r67 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r68 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r69 = interfaceinvoke $r66.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r67, $r68);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor> = $r69;

        goto label02;

     label01:
        $r48 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r49 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r50 = virtualinvoke $r48.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r49);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor> = $r50;

     label02:
        $r52 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        $r51 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r53 = virtualinvoke $r52.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r51);

        $r54 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r55 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r56 = interfaceinvoke $r53.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r54, $r55);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = $r56;

        $r58 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        $r57 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r59 = virtualinvoke $r58.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r57);

        $d0 = interfaceinvoke $r59.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double shadowing> = $d0;

        $r60 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        $r61 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r62 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r70 = virtualinvoke $r60.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r61, $r62);

        $r63 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        r71 = virtualinvoke $r63.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        goto label08;

     label03:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style> = null;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z2 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r13);

        if $z2 == 0 goto label04;

        $d1 = 4.0;

        goto label05;

     label04:
        $d1 = 0.0;

     label05:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double shadowing> = $d1;

        $r14 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r15 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r16 = virtualinvoke $r14.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r15);

        if $r16 != null goto label06;

        $r36 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r37 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBackground>;

        $r38 = virtualinvoke $r10.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>($r36, $r37);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor> = $r38;

        goto label07;

     label06:
        $r17 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r18 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r19 = virtualinvoke $r17.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r18);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor> = $r19;

     label07:
        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r21 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r22 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBorder>;

        $r21[0] = $r22;

        $r23 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r20, null, $r21);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = $r23;

        $r24 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r26 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam NOTE>;

        specialinvoke $r24.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r25, $r26, null);

        r70 = $r24;

        $r27 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam noteTextAlignment>;

        r71 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment(net.sourceforge.plantuml.AlignmentParam,net.sourceforge.plantuml.skin.ArrowDirection,boolean,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r27, null, 0, null);

     label08:
        $i1 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Display: int size()>();

        if $i1 != 1 goto label09;

        $r34 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        $i0 = interfaceinvoke $r34.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label09;

        $r35 = new net.sourceforge.plantuml.graphic.TextBlockEmpty;

        specialinvoke $r35.<net.sourceforge.plantuml.graphic.TextBlockEmpty: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.graphic.TextBlock textBlock> = $r35;

        goto label10;

     label09:
        $r28 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam NOTE>;

        $r29 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r30 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        $r32 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        $r33 = staticinvoke <net.sourceforge.plantuml.cucadiagram.BodyFactory: net.sourceforge.plantuml.graphic.TextBlock create3(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.LineBreakStrategy,net.sourceforge.plantuml.style.Style)>(r9, $r28, $r29, r71, r70, $r31, $r32);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.graphic.TextBlock textBlock> = $r33;

     label10:
        return;
    }

    private static net.sourceforge.plantuml.ISkinParam getISkinParam(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.cucadiagram.IEntity r0;
        net.sourceforge.plantuml.graphic.color.Colors $r1, $r3;
        net.sourceforge.plantuml.ISkinParam r2, $r4;

        r2 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        if $r1 == null goto label1;

        $r3 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ISkinParam mute(net.sourceforge.plantuml.ISkinParam)>(r2);

        return $r4;

     label1:
        return r2;
    }

    static net.sourceforge.plantuml.ISkinParam getSkin(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.cucadiagram.IEntity r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2;
        net.sourceforge.plantuml.graphic.color.ColorType $r3;
        net.sourceforge.plantuml.ISkinParam r4;
        net.sourceforge.plantuml.ColorParam $r5;
        net.sourceforge.plantuml.SkinParamBackcolored $r6, $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor r8, r9;

        r4 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r0 := @parameter1: net.sourceforge.plantuml.cucadiagram.IEntity;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r2 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r3 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r8 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r3);

        if r8 == null goto label1;

        $r7 = new net.sourceforge.plantuml.SkinParamBackcolored;

        specialinvoke $r7.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor)>(r4, r8);

        return $r7;

     label1:
        $r5 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBackground>;

        r9 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor getColorStatic(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r4, $r5, r1);

        if r9 == null goto label2;

        $r6 = new net.sourceforge.plantuml.SkinParamBackcolored;

        specialinvoke $r6.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor)>(r4, r9);

        return $r6;

     label2:
        return r4;
    }

    private static net.sourceforge.plantuml.ugraphic.color.HColor getColorStatic(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ColorParam, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.skin.rose.Rose $r0;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3;
        net.sourceforge.plantuml.ColorParam[] $r4;
        net.sourceforge.plantuml.ColorParam r5;
        net.sourceforge.plantuml.ugraphic.color.HColor $r6;

        r2 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r5 := @parameter1: net.sourceforge.plantuml.ColorParam;

        r3 := @parameter2: net.sourceforge.plantuml.cucadiagram.Stereotype;

        $r0 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r4 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r4[0] = r5;

        $r6 = virtualinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>(r2, r3, $r4);

        return $r6;
    }

    public final double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return d0;
    }

    public final double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getSize(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.graphic.TextBlock r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        net.sourceforge.plantuml.svek.image.EntityImageNote r3;

        r3 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        $r2 = interfaceinvoke r0.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }

    protected final double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.graphic.TextBlock getTextBlock()>();

        r3 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.awt.geom.Dimension2D getSize(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.TextBlock)>(r2, r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = $d0 + 10.0;

        return $d1;
    }

    protected final net.sourceforge.plantuml.graphic.TextBlock getTextBlock()
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        return $r1;
    }

    protected final double getPureTextWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.graphic.TextBlock getTextBlock()>();

        r3 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.awt.geom.Dimension2D getSize(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.TextBlock)>(r2, r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    public final double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getPureTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = $d0 + 6.0;

        $d2 = $d1 + 15.0;

        return $d2;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d1, d0);

        return $r2;
    }

    private net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.style.SName)
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.svek.image.EntityImageNote r6;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r3 := @parameter0: net.sourceforge.plantuml.style.SName;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r0[2] = r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName note>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.cucadiagram.IEntity $r1, $r8, $r17, $r52;
        net.sourceforge.plantuml.Url r2;
        java.util.EnumMap $r3;
        java.lang.StringBuilder $r5, $r7, $r10, $r11, $r14, $r16, $r19;
        net.sourceforge.plantuml.ugraphic.UGroupType $r6, $r15;
        net.sourceforge.plantuml.cucadiagram.Code $r9, $r18;
        java.lang.String $r12, $r20;
        net.sourceforge.plantuml.ugraphic.UGraphic r22, r24, r51, $r54;
        net.sourceforge.plantuml.ugraphic.UStroke $r23, $r49;
        net.sourceforge.plantuml.svek.SvekLine $r25, $r26, $r28;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r27;
        net.sourceforge.plantuml.svek.SvekNode $r29, $r30, $r37, $r38, $r40, $r42, $r43;
        double $d0, $d1, $d2, $d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        java.awt.geom.Point2D r31, r35, r36, r39, $r41, r44, r56;
        java.awt.geom.Point2D$Double $r32;
        byte $b0;
        net.sourceforge.plantuml.Direction r34;
        net.sourceforge.plantuml.svek.image.Opale $r45;
        net.sourceforge.plantuml.ugraphic.color.HColor $r46, $r47;
        net.sourceforge.plantuml.graphic.TextBlock $r48;
        net.sourceforge.plantuml.graphic.color.Colors $r53;
        net.sourceforge.plantuml.posimo.DotPath r55;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r22 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.Url getUrl99()>();

        $r3 = new java.util.EnumMap;

        specialinvoke $r3.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/UGroupType;");

        $r6 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType CLASS>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem ");

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" selected");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r12);

        $r15 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem_");

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r20);

        interfaceinvoke r22.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r3);

        if r2 == null goto label1;

        interfaceinvoke r22.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>(r2);

     label1:
        $r23 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r23.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>()>();

        r24 = staticinvoke <net.sourceforge.plantuml.ugraphic.UGraphicStencil: net.sourceforge.plantuml.ugraphic.UGraphic create(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.creole.Stencil,net.sourceforge.plantuml.ugraphic.UStroke)>(r22, r0, $r23);

        $r25 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekLine opaleLine>;

        if $r25 == null goto label2;

        $r26 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekLine opaleLine>;

        $z0 = virtualinvoke $r26.<net.sourceforge.plantuml.svek.SvekLine: boolean isOpale()>();

        if $z0 != 0 goto label3;

     label2:
        specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: void drawNormal(net.sourceforge.plantuml.ugraphic.UGraphic)>(r24);

        goto label5;

     label3:
        r27 = interfaceinvoke r22.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r28 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekLine opaleLine>;

        r55 = virtualinvoke $r28.<net.sourceforge.plantuml.svek.SvekLine: net.sourceforge.plantuml.posimo.DotPath getDotPath()>();

        $r29 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode node>;

        $d0 = virtualinvoke $r29.<net.sourceforge.plantuml.svek.SvekNode: double getMinX()>();

        $d1 = neg $d0;

        $r30 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode node>;

        $d2 = virtualinvoke $r30.<net.sourceforge.plantuml.svek.SvekNode: double getMinY()>();

        $d3 = neg $d2;

        virtualinvoke r55.<net.sourceforge.plantuml.posimo.DotPath: void moveSvek(double,double)>($d1, $d3);

        r56 = virtualinvoke r55.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getStartPoint()>();

        r31 = virtualinvoke r55.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        d4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r27);

        d5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r27);

        $r32 = new java.awt.geom.Point2D$Double;

        $d7 = d4 / 2.0;

        $d6 = d5 / 2.0;

        specialinvoke $r32.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d6);

        $d8 = virtualinvoke r56.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r32);

        $d9 = virtualinvoke r31.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r32);

        $b0 = $d8 cmpl $d9;

        if $b0 <= 0 goto label4;

        r55 = virtualinvoke r55.<net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath reverse()>();

        r56 = virtualinvoke r55.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getStartPoint()>();

     label4:
        r34 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.Direction getOpaleStrategy(double,double,java.awt.geom.Point2D)>(d4, d5, r56);

        r35 = virtualinvoke r55.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getStartPoint()>();

        r36 = virtualinvoke r55.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        $r37 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode node>;

        $d10 = virtualinvoke $r37.<net.sourceforge.plantuml.svek.SvekNode: double getMinX()>();

        $r38 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode node>;

        $d11 = virtualinvoke $r38.<net.sourceforge.plantuml.svek.SvekNode: double getMinY()>();

        r39 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: java.awt.geom.Point2D move(java.awt.geom.Point2D,double,double)>(r36, $d10, $d11);

        $r40 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode other>;

        $r41 = virtualinvoke $r40.<net.sourceforge.plantuml.svek.SvekNode: java.awt.geom.Point2D projection(java.awt.geom.Point2D,net.sourceforge.plantuml.graphic.StringBounder)>(r39, r27);

        $r42 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode node>;

        $d12 = virtualinvoke $r42.<net.sourceforge.plantuml.svek.SvekNode: double getMinX()>();

        $d13 = neg $d12;

        $r43 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode node>;

        $d14 = virtualinvoke $r43.<net.sourceforge.plantuml.svek.SvekNode: double getMinY()>();

        $d15 = neg $d14;

        r44 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: java.awt.geom.Point2D move(java.awt.geom.Point2D,double,double)>($r41, $d13, $d15);

        $r45 = new net.sourceforge.plantuml.svek.image.Opale;

        $d16 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double shadowing>;

        $r46 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

        $r47 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor>;

        $r48 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r49 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        specialinvoke $r45.<net.sourceforge.plantuml.svek.image.Opale: void <init>(double,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.graphic.TextBlock,boolean,net.sourceforge.plantuml.ugraphic.UStroke)>($d16, $r46, $r47, $r48, 1, $r49);

        $d17 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getRoundCorner()>();

        virtualinvoke $r45.<net.sourceforge.plantuml.svek.image.Opale: void setRoundCorner(double)>($d17);

        virtualinvoke $r45.<net.sourceforge.plantuml.svek.image.Opale: void setOpale(net.sourceforge.plantuml.Direction,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r34, r35, r44);

        r51 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.UGraphic applyStroke(net.sourceforge.plantuml.ugraphic.UGraphic)>(r24);

        $r52 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r53 = interfaceinvoke $r52.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r54 = staticinvoke <net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UGraphic applyStroke(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.graphic.color.Colors)>(r51, $r53);

        virtualinvoke $r45.<net.sourceforge.plantuml.svek.image.Opale: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r54);

     label5:
        if r2 == null goto label6;

        interfaceinvoke r22.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label6:
        interfaceinvoke r22.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;
    }

    private double getRoundCorner()
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.CornerParam $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = <net.sourceforge.plantuml.CornerParam: net.sourceforge.plantuml.CornerParam DEFAULT>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: double getRoundCorner(net.sourceforge.plantuml.CornerParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r1, null);

        return $d0;
    }

    private static java.awt.geom.Point2D move(java.awt.geom.Point2D, double, double)
    {
        java.awt.geom.Point2D$Double $r0;
        java.awt.geom.Point2D r1;
        double $d0, d1, $d2, $d3, d4, $d5;

        r1 := @parameter0: java.awt.geom.Point2D;

        d1 := @parameter1: double;

        d4 := @parameter2: double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + d4;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d5);

        return $r0;
    }

    private void drawNormal(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.svek.image.EntityImageNote r1;
        double $d0, $d1, $d2, d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.UPath r2, $r10;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.UGraphic r3, r4, $r7, r9, $r13;
        net.sourceforge.plantuml.ugraphic.color.HColor $r5, $r8;
        net.sourceforge.plantuml.ugraphic.UBackground $r6;
        net.sourceforge.plantuml.graphic.TextBlock $r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r12;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d2 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getRoundCorner()>();

        r2 = staticinvoke <net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getPolygonNormal(double,double,double)>($d0, $d1, $d2);

        d3 = 0.0;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        d3 = r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: double shadowing>;

        goto label2;

     label1:
        $z1 = r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: boolean withShadow>;

        if $z1 == 0 goto label2;

        d3 = 4.0;

     label2:
        virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>(d3);

        $r5 = r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor noteBackgroundColor>;

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r7 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

        r9 = interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        r3 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ugraphic.UGraphic applyStroke(net.sourceforge.plantuml.ugraphic.UGraphic)>(r9);

        interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r2);

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d5 = specialinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: double getRoundCorner()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.svek.image.Opale: net.sourceforge.plantuml.ugraphic.UPath getCorner(double,double)>($d4, $d5);

        interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r10);

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.graphic.TextBlock getTextBlock()>();

        $r12 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(6.0, 5.0);

        $r13 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        interfaceinvoke $r11.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r13);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UGraphic applyStroke(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        boolean $z0;
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.LineParam $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.ugraphic.UStroke r3, $r7;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, $r5, $r8;
        net.sourceforge.plantuml.style.Style $r6;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $r8 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        return $r8;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam noteBorder>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r1, null);

        if r3 != null goto label2;

        return r4;

     label2:
        $r5 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r3);

        return $r5;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getStroke()
    {
        boolean $z0;
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.LineParam $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3, $r5;
        net.sourceforge.plantuml.style.Style $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.style.Style style>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        return $r5;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam noteBorder>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r1, null);

        return $r3;
    }

    private net.sourceforge.plantuml.Direction getOpaleStrategy(double, double, java.awt.geom.Point2D)
    {
        java.awt.geom.Line2D$Double $r0, $r2, $r3, $r4;
        double d0, d1, d2, d3, d4, d5;
        java.awt.geom.Point2D r1;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11;
        net.sourceforge.plantuml.Direction $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.svek.image.EntityImageNote r9;

        r9 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: java.awt.geom.Point2D;

        $r0 = new java.awt.geom.Line2D$Double;

        specialinvoke $r0.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(d0, 0.0, d0, d1);

        d2 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: double getOrthoDistance(java.awt.geom.Line2D$Double,java.awt.geom.Point2D)>($r0, r1);

        $r2 = new java.awt.geom.Line2D$Double;

        specialinvoke $r2.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(0.0, d1, d0, d1);

        d3 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: double getOrthoDistance(java.awt.geom.Line2D$Double,java.awt.geom.Point2D)>($r2, r1);

        $r3 = new java.awt.geom.Line2D$Double;

        specialinvoke $r3.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, d1);

        d4 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: double getOrthoDistance(java.awt.geom.Line2D$Double,java.awt.geom.Point2D)>($r3, r1);

        $r4 = new java.awt.geom.Line2D$Double;

        specialinvoke $r4.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, d0, 0.0);

        d5 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: double getOrthoDistance(java.awt.geom.Line2D$Double,java.awt.geom.Point2D)>($r4, r1);

        $b0 = d4 cmpg d2;

        if $b0 > 0 goto label1;

        $b7 = d4 cmpg d3;

        if $b7 > 0 goto label1;

        $b8 = d4 cmpg d5;

        if $b8 > 0 goto label1;

        $r8 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        return $r8;

     label1:
        $b9 = d2 cmpg d3;

        if $b9 > 0 goto label2;

        $b5 = d2 cmpg d4;

        if $b5 > 0 goto label2;

        $b6 = d2 cmpg d5;

        if $b6 > 0 goto label2;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        return $r7;

     label2:
        $b10 = d5 cmpg d2;

        if $b10 > 0 goto label3;

        $b3 = d5 cmpg d3;

        if $b3 > 0 goto label3;

        $b4 = d5 cmpg d4;

        if $b4 > 0 goto label3;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        return $r6;

     label3:
        $b11 = d3 cmpg d2;

        if $b11 > 0 goto label4;

        $b1 = d3 cmpg d4;

        if $b1 > 0 goto label4;

        $b2 = d3 cmpg d5;

        if $b2 > 0 goto label4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        return $r5;

     label4:
        return null;
    }

    private static double getOrthoDistance(java.awt.geom.Line2D$Double, java.awt.geom.Point2D)
    {
        java.awt.geom.Line2D$Double r0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;
        java.awt.geom.Point2D $r2, r3, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: java.awt.geom.Line2D$Double;

        r3 := @parameter1: java.awt.geom.Point2D;

        $z0 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: boolean isHorizontal(java.awt.geom.Line2D$Double)>(r0);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.awt.geom.Line2D$Double: java.awt.geom.Point2D getP1()>();

        $d4 = virtualinvoke $r4.<java.awt.geom.Point2D: double getY()>();

        $d5 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d6 = $d4 - $d5;

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        return $d7;

     label1:
        $z1 = staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageNote: boolean isVertical(java.awt.geom.Line2D$Double)>(r0);

        if $z1 == 0 goto label2;

        $r2 = virtualinvoke r0.<java.awt.geom.Line2D$Double: java.awt.geom.Point2D getP1()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        return $d3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    private static boolean isHorizontal(java.awt.geom.Line2D$Double)
    {
        java.awt.geom.Line2D$Double r0;
        java.awt.geom.Point2D $r1, $r2;
        double $d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @parameter0: java.awt.geom.Line2D$Double;

        $r1 = virtualinvoke r0.<java.awt.geom.Line2D$Double: java.awt.geom.Point2D getP1()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.Point2D: double getY()>();

        $r2 = virtualinvoke r0.<java.awt.geom.Line2D$Double: java.awt.geom.Point2D getP2()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isVertical(java.awt.geom.Line2D$Double)
    {
        java.awt.geom.Line2D$Double r0;
        java.awt.geom.Point2D $r1, $r2;
        double $d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @parameter0: java.awt.geom.Line2D$Double;

        $r1 = virtualinvoke r0.<java.awt.geom.Line2D$Double: java.awt.geom.Point2D getP1()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.Point2D: double getX()>();

        $r2 = virtualinvoke r0.<java.awt.geom.Line2D$Double: java.awt.geom.Point2D getP2()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageNote r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    public void setOpaleLine(net.sourceforge.plantuml.svek.SvekLine, net.sourceforge.plantuml.svek.SvekNode, net.sourceforge.plantuml.svek.SvekNode)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.svek.SvekLine r1;
        net.sourceforge.plantuml.svek.SvekNode r2, r3, $r5;
        java.lang.Object $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.svek.SvekLine;

        r2 := @parameter1: net.sourceforge.plantuml.svek.SvekNode;

        r3 := @parameter2: net.sourceforge.plantuml.svek.SvekNode;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekLine opaleLine> = r1;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode node> = r2;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r5 = (net.sourceforge.plantuml.svek.SvekNode) $r4;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.svek.SvekNode other> = $r5;

        return;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        return 0.0;
    }

    public double getEndingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNote r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNote;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 := @parameter1: double;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNote: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }
}
