public class net.sourceforge.plantuml.svek.image.EntityImageClassHeader extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private final net.sourceforge.plantuml.svek.HeaderLayout headerLayout;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.PortionShower)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1, $r29;
        net.sourceforge.plantuml.ISkinParam r2, $r8, $r17, $r20, $r23, $r39;
        net.sourceforge.plantuml.cucadiagram.LeafType $r3, $r4, $r57, $r58;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.cucadiagram.Stereotype r5;
        java.lang.String r6, $r33, $r43, $r44, $r59;
        net.sourceforge.plantuml.graphic.FontConfiguration $r7, $r16, $r38, $r56, r61;
        net.sourceforge.plantuml.FontParam $r9, $r18, $r24, $r40;
        net.sourceforge.plantuml.skin.VisibilityModifier r10;
        net.sourceforge.plantuml.skin.rose.Rose $r11;
        net.sourceforge.plantuml.ColorParam $r12, $r13, $r22;
        int $i0;
        net.sourceforge.plantuml.graphic.VerticalAlignment $r14;
        net.sourceforge.plantuml.cucadiagram.Display $r15, $r37, r62;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r19, $r41, $r63;
        net.sourceforge.plantuml.ColorParam[] $r21;
        net.sourceforge.plantuml.graphic.TextBlockGeneric $r25;
        net.sourceforge.plantuml.cucadiagram.PortionShower r26;
        net.sourceforge.plantuml.cucadiagram.EntityPortion $r27, $r34;
        net.sourceforge.plantuml.cucadiagram.IEntity $r28;
        net.sourceforge.plantuml.svek.HeaderLayout $r30;
        net.sourceforge.plantuml.graphic.TextBlock $r31, $r42, r64, r65, r69, r70, r71, r72, r73, r74, r78;
        net.sourceforge.plantuml.Guillemet $r32, $r35;
        java.util.List $r36;
        net.sourceforge.plantuml.style.SName[] $r45;
        net.sourceforge.plantuml.style.SName $r46, $r47, $r48, $r49, $r50;
        net.sourceforge.plantuml.style.StyleSignature $r51, $r52, $r54;
        net.sourceforge.plantuml.cucadiagram.Stereostyles $r53;
        net.sourceforge.plantuml.style.StyleBuilder $r55;
        net.sourceforge.plantuml.style.Style r60;
        net.sourceforge.plantuml.ugraphic.color.HColor r67, r68, r75, r76;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r26 := @parameter2: net.sourceforge.plantuml.cucadiagram.PortionShower;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r4 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType ABSTRACT_CLASS>;

        if $r3 == $r4 goto label01;

        $r57 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r58 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType INTERFACE>;

        if $r57 != $r58 goto label02;

     label01:
        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z0 = $z5;

        r5 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        z1 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: boolean displayGenericWithOldFashion()>();

        if z1 == 0 goto label04;

        $r59 = null;

        goto label05;

     label04:
        $r59 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: java.lang.String getGeneric()>();

     label05:
        r6 = $r59;

        $z2 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z2 == 0 goto label06;

        $r45 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r46 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r45[0] = $r46;

        $r47 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r45[1] = $r47;

        $r48 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName classDiagram>;

        $r45[2] = $r48;

        $r49 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName class_>;

        $r45[3] = $r49;

        $r50 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName header>;

        $r45[4] = $r50;

        $r51 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r45);

        $r52 = virtualinvoke $r51.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r5);

        $r53 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereostyles getStereostyles()>();

        $r54 = virtualinvoke $r52.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereostyles)>($r53);

        $r55 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r60 = virtualinvoke $r54.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r55);

        $r56 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        specialinvoke $r56.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>(r2, r60);

        r61 = $r56;

        goto label07;

     label06:
        $r7 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r9 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CLASS>;

        specialinvoke $r7.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r8, $r9, r5);

        r61 = $r7;

     label07:
        if z0 == 0 goto label08;

        r61 = virtualinvoke r61.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.graphic.FontConfiguration italic()>();

     label08:
        r62 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        if z1 == 0 goto label09;

        $r43 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: java.lang.String getGeneric()>();

        if $r43 == null goto label09;

        $r44 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: java.lang.String getGeneric()>();

        r62 = virtualinvoke r62.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display addGeneric(java.lang.CharSequence)>($r44);

     label09:
        $r63 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        r64 = virtualinvoke r62.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock createWithNiceCreoleMode(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r61, $r63, r2);

        r10 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.skin.VisibilityModifier getVisibilityModifier()>();

        if r10 != null goto label10;

        r65 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>(r64, 3.0, 3.0, 0.0, 0.0);

        goto label11;

     label10:
        $r11 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r11.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r12 = virtualinvoke r10.<net.sourceforge.plantuml.skin.VisibilityModifier: net.sourceforge.plantuml.ColorParam getBackground()>();

        r67 = virtualinvoke $r11.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>(r2, $r12);

        $r13 = virtualinvoke r10.<net.sourceforge.plantuml.skin.VisibilityModifier: net.sourceforge.plantuml.ColorParam getForeground()>();

        r68 = virtualinvoke $r11.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>(r2, $r13);

        $i0 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: int classAttributeIconSize()>();

        r69 = virtualinvoke r10.<net.sourceforge.plantuml.skin.VisibilityModifier: net.sourceforge.plantuml.graphic.TextBlock getUBlock(int,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,boolean)>($i0, r68, r67, 0);

        $r14 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment CENTER>;

        r70 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeLR(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.VerticalAlignment)>(r69, r64, $r14);

        r65 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>(r70, 3.0, 3.0, 0.0, 0.0);

     label11:
        if r5 == null goto label12;

        $r32 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r33 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r32);

        if $r33 == null goto label12;

        $r34 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion STEREOTYPE>;

        $z4 = interfaceinvoke r26.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r34, r1);

        if $z4 != 0 goto label13;

     label12:
        r71 = null;

        goto label14;

     label13:
        $r35 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.Guillemet guillemet()>();

        $r36 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.util.List getLabels(net.sourceforge.plantuml.Guillemet)>($r35);

        $r37 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.util.Collection)>($r36);

        $r38 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r39 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r40 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CLASS_STEREOTYPE>;

        specialinvoke $r38.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r39, $r40, r5);

        $r41 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r42 = virtualinvoke $r37.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r38, $r41, r2);

        r71 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>($r42, 1.0, 0.0);

     label14:
        if r6 != null goto label15;

        r72 = null;

        goto label16;

     label15:
        $r15 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r6);

        $r16 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r18 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CLASS_STEREOTYPE>;

        specialinvoke $r16.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r17, $r18, r5);

        $r19 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        r73 = virtualinvoke $r15.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r16, $r19, r2);

        r74 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>(r73, 1.0, 1.0);

        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r21 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r22 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam background>;

        $r21[0] = $r22;

        r75 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r20, r5, $r21);

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r24 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CLASS_STEREOTYPE>;

        r76 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getFontColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r23, $r24, r5);

        $r25 = new net.sourceforge.plantuml.graphic.TextBlockGeneric;

        specialinvoke $r25.<net.sourceforge.plantuml.graphic.TextBlockGeneric: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r74, r75, r76);

        r72 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>($r25, 1.0, 1.0);

     label16:
        $r27 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion CIRCLED_CHARACTER>;

        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r29 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r28;

        $z3 = interfaceinvoke r26.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r27, $r29);

        if $z3 == 0 goto label17;

        $r31 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.graphic.TextBlock getCircledCharacter(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r78 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double)>($r31, 4.0, 0.0, 5.0, 5.0);

        goto label18;

     label17:
        r78 = null;

     label18:
        $r30 = new net.sourceforge.plantuml.svek.HeaderLayout;

        specialinvoke $r30.<net.sourceforge.plantuml.svek.HeaderLayout: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock)>(r78, r71, r65, r72);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.svek.HeaderLayout headerLayout> = $r30;

        return;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getCircledCharacter(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.cucadiagram.ILeaf r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r2;
        net.sourceforge.plantuml.ISkinParam $r3, $r7, $r10, $r13, $r16, $r19, $r20, $r22, r25, $r35;
        net.sourceforge.plantuml.FontParam $r4, $r17;
        net.sourceforge.plantuml.ugraphic.UFont r5;
        net.sourceforge.plantuml.cucadiagram.LeafType r6;
        boolean $z0;
        net.sourceforge.plantuml.ColorParam[] $r8, $r11, $r14, $r36;
        net.sourceforge.plantuml.ColorParam $r9, $r12, $r15, $r37;
        net.sourceforge.plantuml.graphic.CircledCharacter $r18, $r21;
        int $i0, $i3;
        double $d0, $d1;
        char $c1, $c2, c4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r23, r45, r46, r47, r48;
        net.sourceforge.plantuml.style.StyleSignature $r24;
        net.sourceforge.plantuml.style.StyleBuilder $r26;
        net.sourceforge.plantuml.style.PName $r27, $r31, $r38;
        net.sourceforge.plantuml.style.Value $r28, $r32, $r39;
        net.sourceforge.plantuml.api.ThemeStyle $r29, $r33, $r40;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r30, $r34, $r41;
        net.sourceforge.plantuml.graphic.TextBlock $r42, $r43;
        net.sourceforge.plantuml.style.Style r44;

        r2 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r25 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if r1 == null goto label1;

        $r42 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.graphic.TextBlock getSprite(net.sourceforge.plantuml.SpriteContainer)>(r25);

        if $r42 == null goto label1;

        $r43 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.graphic.TextBlock getSprite(net.sourceforge.plantuml.SpriteContainer)>(r25);

        return $r43;

     label1:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r4 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        r5 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r3, $r4, null);

        r6 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label2;

        $r24 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.style.StyleSignature spotStyleSignature(net.sourceforge.plantuml.cucadiagram.LeafType)>(r6);

        $r26 = interfaceinvoke r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r44 = virtualinvoke $r24.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r26);

        $r27 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r28 = virtualinvoke r44.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r27);

        $r29 = interfaceinvoke r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r30 = interfaceinvoke r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r45 = interfaceinvoke $r28.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r29, $r30);

        $r31 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r32 = virtualinvoke r44.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r31);

        $r33 = interfaceinvoke r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r34 = interfaceinvoke r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r46 = interfaceinvoke $r32.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r33, $r34);

        $r35 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r36 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r37 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classBorder>;

        $r36[0] = $r37;

        r47 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r35, r1, $r36);

        $r38 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName FontColor>;

        $r39 = virtualinvoke r44.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r38);

        $r40 = interfaceinvoke r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r41 = interfaceinvoke r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r48 = interfaceinvoke $r39.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r40, $r41);

        goto label3;

     label2:
        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r9 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ColorParam spotBackground(net.sourceforge.plantuml.cucadiagram.LeafType)>(r6);

        $r8[0] = $r9;

        r46 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r7, r1, $r8);

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r11 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r12 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ColorParam spotBorder(net.sourceforge.plantuml.cucadiagram.LeafType)>(r6);

        $r11[0] = $r12;

        r45 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r10, r1, $r11);

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r15 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classBorder>;

        $r14[0] = $r15;

        r47 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r13, r1, $r14);

        $r16 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        r48 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getFontColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r16, $r17, null);

     label3:
        if r1 == null goto label4;

        $c1 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: char getCharacter()>();

        if $c1 == 0 goto label4;

        $r21 = new net.sourceforge.plantuml.graphic.CircledCharacter;

        $c2 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: char getCharacter()>();

        $r22 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i3 = interfaceinvoke $r22.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d1 = (double) $i3;

        $r23 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor()>();

        specialinvoke $r21.<net.sourceforge.plantuml.graphic.CircledCharacter: void <init>(char,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>($c2, $d1, r5, $r23, r47, r48);

        return $r21;

     label4:
        if r45 != null goto label5;

        r45 = r47;

     label5:
        c4 = 0;

        if r1 == null goto label6;

        $r20 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        c4 = interfaceinvoke $r20.<net.sourceforge.plantuml.ISkinParam: char getCircledCharacter(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r1);

     label6:
        if c4 != 0 goto label7;

        c4 = specialinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: char getCircledChar(net.sourceforge.plantuml.cucadiagram.LeafType)>(r6);

     label7:
        $r18 = new net.sourceforge.plantuml.graphic.CircledCharacter;

        $r19 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i0 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i0;

        specialinvoke $r18.<net.sourceforge.plantuml.graphic.CircledCharacter: void <init>(char,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(c4, $d0, r5, r46, r45, r48);

        return $r18;
    }

    private net.sourceforge.plantuml.style.StyleSignature spotStyleSignature(net.sourceforge.plantuml.cucadiagram.LeafType)
    {
        net.sourceforge.plantuml.cucadiagram.LeafType r0;
        int[] $r1;
        int $i0, $i1;
        net.sourceforge.plantuml.style.SName[] $r2, $r8, $r14, $r20, $r26, $r32;
        net.sourceforge.plantuml.style.SName $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r36;
        net.sourceforge.plantuml.style.StyleSignature $r7, $r13, $r19, $r25, $r31, $r37;
        java.lang.IllegalStateException $r38;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r39;

        r39 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.LeafType;

        $r1 = <net.sourceforge.plantuml.svek.image.EntityImageClassHeader$1: int[] $SwitchMap$net$sourceforge$plantuml$cucadiagram$LeafType>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.LeafType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $r32 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r33 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r32[0] = $r33;

        $r34 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r32[1] = $r34;

        $r35 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spot>;

        $r32[2] = $r35;

        $r36 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spotAnnotation>;

        $r32[3] = $r36;

        $r37 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r32);

        return $r37;

     label2:
        $r26 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r27 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r26[0] = $r27;

        $r28 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r26[1] = $r28;

        $r29 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spot>;

        $r26[2] = $r29;

        $r30 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spotAbstractClass>;

        $r26[3] = $r30;

        $r31 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r26);

        return $r31;

     label3:
        $r20 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r21 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r20[0] = $r21;

        $r22 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r20[1] = $r22;

        $r23 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spot>;

        $r20[2] = $r23;

        $r24 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spotClass>;

        $r20[3] = $r24;

        $r25 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r20);

        return $r25;

     label4:
        $r14 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r15 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r14[0] = $r15;

        $r16 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r14[1] = $r16;

        $r17 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spot>;

        $r14[2] = $r17;

        $r18 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spotInterface>;

        $r14[3] = $r18;

        $r19 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r14);

        return $r19;

     label5:
        $r8 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r9 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r8[0] = $r9;

        $r10 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r8[1] = $r10;

        $r11 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spot>;

        $r8[2] = $r11;

        $r12 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spotEnum>;

        $r8[3] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r8);

        return $r13;

     label6:
        $r2 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r2[0] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r2[1] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spot>;

        $r2[2] = $r5;

        $r6 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName spotEntity>;

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r2);

        return $r7;

     label7:
        $r38 = new java.lang.IllegalStateException;

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>()>();

        throw $r38;
    }

    private net.sourceforge.plantuml.ColorParam spotBackground(net.sourceforge.plantuml.cucadiagram.LeafType)
    {
        net.sourceforge.plantuml.cucadiagram.LeafType r0;
        int[] $r1;
        int $i0, $i1;
        net.sourceforge.plantuml.ColorParam $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;
        java.lang.AssertionError $r8;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r9;

        r9 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.LeafType;

        $r1 = <net.sourceforge.plantuml.svek.image.EntityImageClassHeader$1: int[] $SwitchMap$net$sourceforge$plantuml$cucadiagram$LeafType>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.LeafType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $r7 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeNBackground>;

        return $r7;

     label2:
        $r6 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeABackground>;

        return $r6;

     label3:
        $r5 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeCBackground>;

        return $r5;

     label4:
        $r4 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeIBackground>;

        return $r4;

     label5:
        $r3 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeEBackground>;

        return $r3;

     label6:
        $r2 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeCBackground>;

        return $r2;

     label7:
        $z0 = <net.sourceforge.plantuml.svek.image.EntityImageClassHeader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label8;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label8:
        return null;
    }

    private net.sourceforge.plantuml.ColorParam spotBorder(net.sourceforge.plantuml.cucadiagram.LeafType)
    {
        net.sourceforge.plantuml.cucadiagram.LeafType r0;
        int[] $r1;
        int $i0, $i1;
        net.sourceforge.plantuml.ColorParam $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;
        java.lang.AssertionError $r8;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r9;

        r9 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.LeafType;

        $r1 = <net.sourceforge.plantuml.svek.image.EntityImageClassHeader$1: int[] $SwitchMap$net$sourceforge$plantuml$cucadiagram$LeafType>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.LeafType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $r7 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeNBorder>;

        return $r7;

     label2:
        $r6 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeABorder>;

        return $r6;

     label3:
        $r5 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeCBorder>;

        return $r5;

     label4:
        $r4 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeIBorder>;

        return $r4;

     label5:
        $r3 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeEBorder>;

        return $r3;

     label6:
        $r2 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stereotypeCBorder>;

        return $r2;

     label7:
        $z0 = <net.sourceforge.plantuml.svek.image.EntityImageClassHeader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label8;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label8:
        return null;
    }

    private char getCircledChar(net.sourceforge.plantuml.cucadiagram.LeafType)
    {
        net.sourceforge.plantuml.cucadiagram.LeafType r0;
        int[] $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r2;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r3;

        r3 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.LeafType;

        $r1 = <net.sourceforge.plantuml.svek.image.EntityImageClassHeader$1: int[] $SwitchMap$net$sourceforge$plantuml$cucadiagram$LeafType>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.LeafType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        return 64;

     label2:
        return 65;

     label3:
        return 67;

     label4:
        return 73;

     label5:
        return 69;

     label6:
        return 69;

     label7:
        $z0 = <net.sourceforge.plantuml.svek.image.EntityImageClassHeader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label8;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label8:
        return 63;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.HeaderLayout $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.svek.HeaderLayout headerLayout>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.HeaderLayout: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        double d0, d1;
        net.sourceforge.plantuml.svek.HeaderLayout $r2;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageClassHeader: net.sourceforge.plantuml.svek.HeaderLayout headerLayout>;

        virtualinvoke $r2.<net.sourceforge.plantuml.svek.HeaderLayout: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>(r1, d0, d1);

        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageClassHeader r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageClassHeader;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/svek/image/EntityImageClassHeader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.svek.image.EntityImageClassHeader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
