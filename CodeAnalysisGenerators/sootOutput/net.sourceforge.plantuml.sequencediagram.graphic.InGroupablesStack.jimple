class net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack extends java.lang.Object
{
    private final java.util.List inGroupableStack;

    void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack> = $r1;

        return;
    }

    public void addList(net.sourceforge.plantuml.sequencediagram.InGroupableList)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack r0;
        java.util.List $r1, $r4;
        java.util.Iterator r2;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.InGroupableList r3, r6;
        java.lang.Object $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.InGroupableList) $r5;

        virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.InGroupableList: void addInGroupable(net.sourceforge.plantuml.sequencediagram.InGroupable)>(r3);

        goto label1;

     label2:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void pop()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack r0;
        java.util.List $r1, $r2;
        int $i0, i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i1);

        return;
    }

    public void addElement(net.sourceforge.plantuml.sequencediagram.InGroupable)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.InGroupableList r4;
        net.sourceforge.plantuml.sequencediagram.InGroupable r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack;

        r5 := @parameter0: net.sourceforge.plantuml.sequencediagram.InGroupable;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.InGroupableList) $r3;

        virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.InGroupableList: void addInGroupable(net.sourceforge.plantuml.sequencediagram.InGroupable)>(r5);

        goto label1;

     label2:
        return;
    }

    public net.sourceforge.plantuml.sequencediagram.InGroupableList getTopGroupingStructure()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack r0;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.InGroupableList $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack: java.util.List inGroupableStack>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (net.sourceforge.plantuml.sequencediagram.InGroupableList) $r4;

        return $r5;
    }
}
