public class net.sourceforge.plantuml.skin.ActorStickMan extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private final double armsY;
    private final double armsLenght;
    private final double bodyLenght;
    private final double legsX;
    private final double legsY;
    private final double headDiam;
    private final net.sourceforge.plantuml.graphic.SymbolContext symbolContext;
    private final boolean actorBusiness;

    void <init>(net.sourceforge.plantuml.graphic.SymbolContext, boolean)
    {
        net.sourceforge.plantuml.skin.ActorStickMan r0;
        net.sourceforge.plantuml.graphic.SymbolContext r1;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.SymbolContext;

        z0 := @parameter1: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double headDiam> = 16.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double legsY> = 15.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double legsX> = 13.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double bodyLenght> = 27.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double armsLenght> = 13.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double armsY> = 8.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double armsY> = 8.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double armsLenght> = 13.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double bodyLenght> = 27.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double legsX> = 13.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double legsY> = 15.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: double headDiam> = 16.0;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: net.sourceforge.plantuml.graphic.SymbolContext symbolContext> = r1;

        r0.<net.sourceforge.plantuml.skin.ActorStickMan: boolean actorBusiness> = z0;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        double $d0, $d1, $d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        net.sourceforge.plantuml.skin.ActorStickMan r0;
        net.sourceforge.plantuml.ugraphic.UEllipse $r1;
        net.sourceforge.plantuml.ugraphic.UPath $r3;
        net.sourceforge.plantuml.graphic.SymbolContext $r5, $r6, $r16, $r17;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7, $r9, $r14;
        net.sourceforge.plantuml.ugraphic.UGraphic $r8, $r10, $r13, $r15, r18, r19;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r11;
        net.sourceforge.plantuml.ugraphic.UBackground $r12;

        r0 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        r18 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>(13.0, 13.0);

        $d1 = $d0 - 8.0;

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: double thickness()>();

        d3 = $d1 + $d2;

        $r1 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(16.0, 16.0);

        d4 = d3 + 8.0;

        $r3 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 0.0);

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 27.0);

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(-13.0, 8.0);

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(13.0, 8.0);

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 27.0);

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(-13.0, 42.0);

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 27.0);

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(13.0, 42.0);

        $r5 = r0.<net.sourceforge.plantuml.skin.ActorStickMan: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d5 = virtualinvoke $r5.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        $b0 = $d5 cmpl 0.0;

        if $b0 == 0 goto label1;

        $r16 = r0.<net.sourceforge.plantuml.skin.ActorStickMan: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d12 = virtualinvoke $r16.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d12);

        $r17 = r0.<net.sourceforge.plantuml.skin.ActorStickMan: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d13 = virtualinvoke $r17.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>($d13);

     label1:
        $r6 = r0.<net.sourceforge.plantuml.skin.ActorStickMan: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        r19 = virtualinvoke $r6.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UGraphic)>(r18);

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d6 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: double thickness()>();

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d3, $d6);

        $r8 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        $z0 = r0.<net.sourceforge.plantuml.skin.ActorStickMan: boolean actorBusiness>;

        if $z0 == 0 goto label2;

        $r14 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d9 = d3 + 8.0;

        $d10 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: double thickness()>();

        $d11 = $d10 + 8.0;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d9, $d11);

        $r15 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r14);

        specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: void specialBusiness(net.sourceforge.plantuml.ugraphic.UGraphic)>($r15);

     label2:
        $r9 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d7 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: double thickness()>();

        $d8 = 16.0 + $d7;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d4, $d8);

        $r10 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r11 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r13 = interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        interfaceinvoke $r13.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r3);

        return;
    }

    private void specialBusiness(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.skin.ActorStickMan r0;
        java.awt.geom.Point2D r1, r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.ULine $r4;
        double $d1, $d2, $d3, $d4, $d5, $d6;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, r6;

        r0 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: java.awt.geom.Point2D getOnCircle(double)>(1.8162332528565992);

        r2 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: java.awt.geom.Point2D getOnCircle(double)>(-0.24543692606170264);

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r1);

        r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r4 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d2 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d3 = $d1 - $d2;

        $d4 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d5 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d6 = $d4 - $d5;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>($d3, $d6);

        interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        return;
    }

    private java.awt.geom.Point2D getOnCircle(double)
    {
        double d0, $d1, d2, $d3, d4;
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.skin.ActorStickMan r1;

        r1 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        d2 = 8.0 * $d1;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        d4 = 8.0 * $d3;

        $r0 = new java.awt.geom.Point2D$Double;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d2, d4);

        return $r0;
    }

    private double thickness()
    {
        net.sourceforge.plantuml.skin.ActorStickMan r0;
        net.sourceforge.plantuml.graphic.SymbolContext $r1;
        net.sourceforge.plantuml.ugraphic.UStroke $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        $r1 = r0.<net.sourceforge.plantuml.skin.ActorStickMan: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        return $d0;
    }

    public double getPreferredWidth()
    {
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.skin.ActorStickMan r0;

        r0 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>(13.0, 13.0);

        $d1 = $d0 * 2.0;

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: double thickness()>();

        $d3 = 2.0 * $d2;

        $d4 = $d1 + $d3;

        return $d4;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.skin.ActorStickMan r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.graphic.SymbolContext $r1;

        r0 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.skin.ActorStickMan: double thickness()>();

        $d1 = 2.0 * $d0;

        $d2 = 58.0 + $d1;

        $r1 = r0.<net.sourceforge.plantuml.skin.ActorStickMan: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d3 = virtualinvoke $r1.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        $d4 = $d2 + $d3;

        $d5 = $d4 + 1.0;

        return $d5;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.skin.ActorStickMan r1;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.skin.ActorStickMan;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.skin.ActorStickMan: double getPreferredWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.skin.ActorStickMan: double getPreferredHeight()>();

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d1);

        return $r0;
    }
}
