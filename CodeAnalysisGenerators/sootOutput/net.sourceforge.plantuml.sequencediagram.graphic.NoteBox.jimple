final class net.sourceforge.plantuml.sequencediagram.graphic.NoteBox extends net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final net.sourceforge.plantuml.sequencediagram.NotePosition position;
    private final net.sourceforge.plantuml.Url url;
    private final net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1;
    private final net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2;
    private final net.sourceforge.plantuml.skin.Component comp;
    private double delta;
    static final boolean $assertionsDisabled;

    public void <init>(double, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox, net.sourceforge.plantuml.sequencediagram.NotePosition, net.sourceforge.plantuml.Url)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r1, r4, $r6;
        net.sourceforge.plantuml.sequencediagram.NotePosition r2, $r3;
        java.lang.Object $r5;
        net.sourceforge.plantuml.Url r7;
        net.sourceforge.plantuml.skin.Component r8;
        java.lang.IllegalArgumentException $r9;
        byte $b0, $b1;
        int $i2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        d0 := @parameter0: double;

        r8 := @parameter1: net.sourceforge.plantuml.skin.Component;

        r4 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r1 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r2 := @parameter4: net.sourceforge.plantuml.sequencediagram.NotePosition;

        r7 := @parameter5: net.sourceforge.plantuml.Url;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void <init>(double)>(d0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double delta> = 0.0;

        if r1 == null goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $r3 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if r2 != $r3 goto label3;

        $b1 = 1;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        $i2 = $b0 ^ $b1;

        if $i2 == 0 goto label5;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label5:
        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r6 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r5;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1> = $r6;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition position> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.Url url> = r7;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.skin.Component comp> = r8;

        return;
    }

    public double getRightShift(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r1, $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r3;
        double d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        if $r1 != null goto label1;

        return 0.0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine getLifeLine()>();

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getRightShift(double)>(d0);

        $d2 = $d1 + 5.0;

        return $d2;
    }

    public final double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double d0, $d1, $d2, d3;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r3, $r4;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r5, $r7, $r9, $r10;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r6, $r8;
        byte $b0;
        java.lang.AssertionError $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.skin.Component comp>;

        d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition position>;

        $r3 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if $r4 != $r3 goto label2;

        $z0 = <net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2>;

        if $r10 != $r9 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d1 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d2 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getMinX()>();

        d3 = $d1 - $d2;

        $b0 = d3 cmpl d0;

        if $b0 <= 0 goto label2;

        return d3;

     label2:
        return d0;
    }

    public final double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r1;
        double d0, $d1, $d2, $d3, d4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2;
        net.sourceforge.plantuml.Dimension2DDouble $r3;
        net.sourceforge.plantuml.skin.Component $r4, $r8;
        net.sourceforge.plantuml.Url $r6, $r10, $r11;
        net.sourceforge.plantuml.skin.Area $r7;
        net.sourceforge.plantuml.skin.Context2D r9;
        net.sourceforge.plantuml.ugraphic.UGraphic r12, r13;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d4 := @parameter1: double;

        r9 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r0 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r2 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingY()>();

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, $d1);

        r13 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.skin.Component comp>;

        $d3 = interfaceinvoke $r4.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d3);

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.Url url>;

        if $r6 == null goto label1;

        $r11 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r11);

     label1:
        $r8 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.skin.Component comp>;

        $r7 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r7.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r3);

        interfaceinvoke $r8.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r13, $r7, r9);

        $r10 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.Url url>;

        if $r10 == null goto label2;

        interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label2:
        return;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r2;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalStateException $r11;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r12, $r14, $r16;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r13, $r15, $r17;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r18, $r19;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getSegment(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition position>;

        $r3 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if $r4 != $r3 goto label1;

        $r19 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()>();

        $d12 = virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        $d13 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d14 = $d12 - $d13;

        i0 = (int) $d14;

        goto label5;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition position>;

        $r5 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if $r6 != $r5 goto label2;

        $r18 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()>();

        $d11 = virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos2()>();

        i0 = (int) $d11;

        goto label5;

     label2:
        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition position>;

        $r7 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER>;

        if $r8 != $r7 goto label3;

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d7 = virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d8 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d9 = $d8 / 2.0;

        $d10 = $d7 - $d9;

        i0 = (int) $d10;

        goto label5;

     label3:
        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition position>;

        $r9 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if $r10 != $r9 goto label4;

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d0 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p2>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d1 = virtualinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d0 + $d1;

        d3 = $d2 / 2.0;

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d5 = $d4 / 2.0;

        $d6 = d3 - $d5;

        i0 = (int) $d6;

        goto label5;

     label4:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label5:
        $d15 = (double) i0;

        $d16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double delta>;

        $d17 = $d15 + $d16;

        return $d17;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getSegment(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r2, $r4;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r3, r6, $r7;
        net.sourceforge.plantuml.skin.Component $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingY()>();

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder,double)>(r1, $d0);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p1>;

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingY()>();

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.skin.Component comp>;

        $d2 = interfaceinvoke $r5.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d3 = $d1 + $d2;

        r6 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder,double)>(r1, $d3);

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored merge(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored)>(r6);

        return $r7;
    }

    public void pushToRight(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        double d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double delta>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double delta> = $d2;

        return;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public final net.sourceforge.plantuml.Url getUrl()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.Url $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.Url url>;

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.NotePosition getNotePosition()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.NoteBox r0;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.NoteBox;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: net.sourceforge.plantuml.sequencediagram.NotePosition position>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/NoteBox;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.NoteBox: boolean $assertionsDisabled> = $z1;

        return;
    }
}
