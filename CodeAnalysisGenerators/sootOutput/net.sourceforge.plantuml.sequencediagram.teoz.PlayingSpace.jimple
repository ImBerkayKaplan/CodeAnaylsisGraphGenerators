public class net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.teoz.Bordered
{
    private final double startingY;
    private final net.sourceforge.plantuml.real.Real min;
    private final net.sourceforge.plantuml.real.Real max;
    private final boolean isShowFootbox;
    private final java.util.List tiles;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces;
    private final java.util.List linkAnchors;
    private final net.sourceforge.plantuml.ISkinParam skinParam;

    public void <init>(net.sourceforge.plantuml.sequencediagram.SequenceDiagram, net.sourceforge.plantuml.sequencediagram.teoz.Dolls, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        java.util.ArrayList $r1, $r7, $r9;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r3, $r19;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r4;
        java.util.List $r5, $r14, $r15, $r17, $r18;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.real.Real $r11, $r12, $r21, $r22, $r25, $r27, $r29, $r30, $r32, $r34;
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r13;
        int $i0;
        java.util.Iterator $r16, r35, r37;
        java.util.Collection $r20;
        boolean $z3, $z4, $z11;
        java.lang.Object $r23, $r28;
        net.sourceforge.plantuml.graphic.StringBounder $r24, $r26, $r31, $r33;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r36;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r38;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r4 := @parameter0: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r13 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: double startingY> = 8.0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: double startingY> = 8.0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List tiles> = $r1;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces> = $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List getLinkAnchors()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List linkAnchors> = $r5;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.ISkinParam skinParam> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r11 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.real.Real getOrigin()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.real.Real getOrigin()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        $i0 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: int size()>();

        if $i0 <= 0 goto label1;

        $r31 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r32 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)>($r31);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r32);

        $r33 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r34 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: net.sourceforge.plantuml.real.Real getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>($r33);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r34);

     label1:
        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List tiles>;

        $r15 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: java.util.List events()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

        $r17 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.TileBuilder: java.util.List buildSeveral(java.util.Iterator,net.sourceforge.plantuml.sequencediagram.teoz.TileArguments,net.sourceforge.plantuml.sequencediagram.teoz.Tile)>($r16, r2, null);

        interfaceinvoke $r14.<java.util.List: boolean addAll(java.util.Collection)>($r17);

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List tiles>;

        r35 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z11 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label3;

        $r28 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r28;

        $r29 = interfaceinvoke r36.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMinX()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r30 = interfaceinvoke r36.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r30);

        goto label2;

     label3:
        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection values()>();

        r37 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r23 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace) $r23;

        $r24 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r25 = virtualinvoke r38.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>($r24);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r26 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r27 = virtualinvoke r38.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC2(net.sourceforge.plantuml.graphic.StringBounder)>($r26);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r27);

        goto label4;

     label5:
        $r21 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real min(java.util.Collection)>($r7);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real min> = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real max(java.util.Collection)>($r9);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real max> = $r22;

        $z4 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean isShowFootbox()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: boolean isShowFootbox> = $z4;

        return;
    }

    public void drawBackground(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile $r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r3;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: void <init>(net.sourceforge.plantuml.ugraphic.UGraphic,boolean)>(r1, 1);

        specialinvoke r3.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: double drawUInternal(net.sourceforge.plantuml.ugraphic.UGraphic,boolean)>($r0, 0);

        return;
    }

    public void drawForeground(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile $r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r3;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: void <init>(net.sourceforge.plantuml.ugraphic.UGraphic,boolean)>(r1, 0);

        specialinvoke r3.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: double drawUInternal(net.sourceforge.plantuml.ugraphic.UGraphic,boolean)>($r0, 0);

        return;
    }

    private double drawUInternal(net.sourceforge.plantuml.ugraphic.UGraphic, boolean)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r15;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        java.util.ArrayList $r2, $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r6;
        java.util.List $r7, $r8;
        double d0, $d1;
        boolean $z0, $z1, z2;
        java.lang.Object $r9, $r14;
        java.lang.String $r10, $r11;
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r12, r17, r21;
        net.sourceforge.plantuml.ISkinParam $r13;
        java.util.Iterator r16, r19;
        net.sourceforge.plantuml.ugraphic.UTranslate r18;
        net.sourceforge.plantuml.sequencediagram.LinkAnchor r20;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        z2 := @parameter1: boolean;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r7 = r6.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List tiles>;

        d0 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double fillPositionelTiles(net.sourceforge.plantuml.graphic.StringBounder,double,java.util.List,java.util.List,java.util.List)>(r1, 8.0, $r7, $r2, $r4);

        r16 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (net.sourceforge.plantuml.sequencediagram.teoz.CommonTile) $r14;

        $d1 = virtualinvoke r17.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double getY()>();

        r18 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d1);

        $r15 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r18);

        virtualinvoke r17.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r15);

        goto label1;

     label2:
        $r8 = r6.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List linkAnchors>;

        r19 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (net.sourceforge.plantuml.sequencediagram.LinkAnchor) $r9;

        $r10 = virtualinvoke r20.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String getAnchor1()>();

        r21 = specialinvoke r6.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile getFromAnchor(java.util.List,java.lang.String)>($r4, $r10);

        $r11 = virtualinvoke r20.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String getAnchor2()>();

        r12 = specialinvoke r6.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile getFromAnchor(java.util.List,java.lang.String)>($r4, $r11);

        if r21 == null goto label4;

        if r12 == null goto label4;

        $r13 = r6.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.ISkinParam skinParam>;

        virtualinvoke r20.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: void drawAnchor(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.sequencediagram.teoz.CommonTile,net.sourceforge.plantuml.sequencediagram.teoz.CommonTile,net.sourceforge.plantuml.ISkinParam)>(r0, r21, r12, $r13);

     label4:
        goto label3;

     label5:
        return d0;
    }

    private net.sourceforge.plantuml.sequencediagram.teoz.CommonTile getFromAnchor(java.util.List, java.lang.String)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r3;
        java.lang.String r4;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r5;

        r5 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: java.lang.String;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.sequencediagram.teoz.CommonTile) $r2;

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: boolean matchAnchor(java.lang.String)>(r4);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.ugraphic.LimitFinder $r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r5;
        double d0, $d1, $d2, d3;
        net.sourceforge.plantuml.ugraphic.MinMax $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r7;

        r5 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.ugraphic.LimitFinder;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: void <init>(net.sourceforge.plantuml.graphic.StringBounder,boolean)>(r1, 1);

        $r3 = new net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        specialinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: void <init>(net.sourceforge.plantuml.ugraphic.UGraphic,boolean)>($r0, 0);

        d0 = specialinvoke r5.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: double drawUInternal(net.sourceforge.plantuml.ugraphic.UGraphic,boolean)>($r3, 0);

        $r6 = virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.LimitFinder: net.sourceforge.plantuml.ugraphic.MinMax getMinMax()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()>();

        $d1 = virtualinvoke $r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d1, d0);

        d3 = $d2 + 10.0;

        return d3;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void addConstraints()>();

        goto label1;

     label2:
        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        net.sourceforge.plantuml.real.Real $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real min>;

        return $r1;
    }

    public net.sourceforge.plantuml.real.Real getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        net.sourceforge.plantuml.real.Real $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real max>;

        return $r1;
    }

    public boolean isShowFootbox()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: boolean isShowFootbox>;

        return $z0;
    }

    public net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces livingSpaces>;

        return $r1;
    }

    public double getBorder1()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        net.sourceforge.plantuml.real.Real $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real min>;

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        return $d0;
    }

    public double getBorder2()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        net.sourceforge.plantuml.real.Real $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real max>;

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        return $d0;
    }

    public java.util.List yNewPages()
    {
        java.util.ArrayList $r0;
        java.lang.Double $r2, $r6, $r10;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r3;
        java.util.List $r4;
        java.util.Iterator r5;
        boolean $z1, $z3, $z4;
        java.lang.Object $r7;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r8;
        net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile $r9;
        double d0;
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile $r11;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = r3.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List tiles>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r7;

        $z3 = r8 instanceof net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        if $z3 == 0 goto label2;

        $r11 = (net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile) r8;

        virtualinvoke $r11.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: void addYNewPages(java.util.Collection)>($r0);

     label2:
        $z4 = r8 instanceof net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile;

        if $z4 == 0 goto label3;

        $r9 = (net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile) r8;

        d0 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile: double getY()>();

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

     label3:
        goto label1;

     label4:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        return $r0;
    }

    public int getNbPages()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r0;
        java.util.List $r1;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List yNewPages()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        return $i1;
    }
}
