public class net.sourceforge.plantuml.sequencediagram.teoz.Stairs extends java.lang.Object
{
    private final java.util.List values;

    public void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Stairs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.List values> = $r1;

        return;
    }

    public void addStep(net.sourceforge.plantuml.sequencediagram.teoz.Step)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Step r0, $r7;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs r1;
        java.util.List $r2, $r3, $r4, $r5;
        java.lang.Object $r6;
        double d0, $d1;
        byte $b4;
        java.lang.IllegalArgumentException $r8;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Stairs;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Step;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Step: int getIndent()>();

        if $i0 >= 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.List values>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label2;

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.List values>;

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.List values>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i3);

        $r7 = (net.sourceforge.plantuml.sequencediagram.teoz.Step) $r6;

        d0 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.Step: double getValue()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Step: double getValue()>();

        $b4 = $d1 cmpg d0;

        if $b4 > 0 goto label2;

        return;

     label2:
        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.List values>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public int getMaxIndent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Step r4;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Stairs;

        i1 = -2147483648;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.List values>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Step) $r3;

        i0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Step: int getIndent()>();

        if i0 <= i1 goto label2;

        i1 = i0;

     label2:
        goto label1;

     label3:
        return i1;
    }

    public java.util.Collection getSteps()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Stairs;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.List values>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }
}
