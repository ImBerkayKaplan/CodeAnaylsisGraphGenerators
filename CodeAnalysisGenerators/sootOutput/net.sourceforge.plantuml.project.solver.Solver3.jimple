public class net.sourceforge.plantuml.project.solver.Solver3 extends net.sourceforge.plantuml.project.solver.AbstractSolver
{
    private final net.sourceforge.plantuml.project.core3.Histogram workLoad;

    public void <init>(net.sourceforge.plantuml.project.core3.Histogram)
    {
        net.sourceforge.plantuml.project.solver.Solver3 r0;
        net.sourceforge.plantuml.project.core3.Histogram r1;

        r0 := @this: net.sourceforge.plantuml.project.solver.Solver3;

        r1 := @parameter0: net.sourceforge.plantuml.project.core3.Histogram;

        specialinvoke r0.<net.sourceforge.plantuml.project.solver.AbstractSolver: void <init>()>();

        r0.<net.sourceforge.plantuml.project.solver.Solver3: net.sourceforge.plantuml.project.core3.Histogram workLoad> = r1;

        return;
    }

    public net.sourceforge.plantuml.project.core3.TaskLoad solveForward(long, long)
    {
        net.sourceforge.plantuml.project.core3.HistogramSimple $r0;
        net.sourceforge.plantuml.project.core3.TaskLoadImpl $r2;
        net.sourceforge.plantuml.project.solver.Solver3 r4;
        long $l0, l2, l3, l4, l6, $l8, l9, l10, l11, l12, l13;
        net.sourceforge.plantuml.project.core3.Histogram $r5, $r7, $r8;
        byte $b1, $b5, $b7;
        java.lang.UnsupportedOperationException $r6;
        java.lang.IllegalArgumentException $r9;

        r4 := @this: net.sourceforge.plantuml.project.solver.Solver3;

        l10 := @parameter0: long;

        l11 := @parameter1: long;

        $r0 = new net.sourceforge.plantuml.project.core3.HistogramSimple;

        specialinvoke $r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: void <init>()>();

        $r2 = new net.sourceforge.plantuml.project.core3.TaskLoadImpl;

        specialinvoke $r2.<net.sourceforge.plantuml.project.core3.TaskLoadImpl: void <init>(net.sourceforge.plantuml.project.core3.Histogram)>($r0);

        $r5 = r4.<net.sourceforge.plantuml.project.solver.Solver3: net.sourceforge.plantuml.project.core3.Histogram workLoad>;

        $l0 = l11 - 1L;

        l12 = interfaceinvoke $r5.<net.sourceforge.plantuml.project.core3.Histogram: long getNext(long)>($l0);

        virtualinvoke $r2.<net.sourceforge.plantuml.project.core3.TaskLoadImpl: void setStart(long)>(l12);

        l13 = l12;

     label1:
        $b1 = l10 cmp 0L;

        if $b1 <= 0 goto label4;

        $r7 = r4.<net.sourceforge.plantuml.project.solver.Solver3: net.sourceforge.plantuml.project.core3.Histogram workLoad>;

        l2 = interfaceinvoke $r7.<net.sourceforge.plantuml.project.core3.Histogram: long getValueAt(long)>(l13);

        $r8 = r4.<net.sourceforge.plantuml.project.solver.Solver3: net.sourceforge.plantuml.project.core3.Histogram workLoad>;

        l3 = interfaceinvoke $r8.<net.sourceforge.plantuml.project.core3.Histogram: long getNext(long)>(l13);

        l4 = l3 - l13;

        $b5 = l4 cmp 0L;

        if $b5 > 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label2:
        l6 = l4 * l2;

        virtualinvoke $r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: void put(long,long)>(l13, l2);

        $b7 = l6 cmp l10;

        if $b7 < 0 goto label3;

        $l8 = l10 / l2;

        l9 = l13 + $l8;

        virtualinvoke $r2.<net.sourceforge.plantuml.project.core3.TaskLoadImpl: void setEnd(long)>(l9);

        virtualinvoke $r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: void put(long,long)>(l9, 0L);

        return $r2;

     label3:
        l10 = l10 - l6;

        l13 = l3;

        goto label1;

     label4:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;
    }

    public net.sourceforge.plantuml.project.core3.TaskLoad solveBackward(long, long)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.project.solver.Solver3 r1;
        long l0, l1;

        r1 := @this: net.sourceforge.plantuml.project.solver.Solver3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected net.sourceforge.plantuml.project.time.Instant computeEnd()
    {
        net.sourceforge.plantuml.project.solver.Solver3 r0;
        net.sourceforge.plantuml.project.core.TaskAttribute $r1, $r5;
        java.util.Map $r2, $r6;
        java.lang.Object $r3, $r7;
        net.sourceforge.plantuml.project.time.Instant r4, $r10;
        net.sourceforge.plantuml.project.Load $r8;
        int i0;
        long $l1, $l2, $l3;
        net.sourceforge.plantuml.project.core3.TaskLoad r9;

        r0 := @this: net.sourceforge.plantuml.project.solver.Solver3;

        $r2 = r0.<net.sourceforge.plantuml.project.solver.Solver3: java.util.Map values>;

        $r1 = <net.sourceforge.plantuml.project.core.TaskAttribute: net.sourceforge.plantuml.project.core.TaskAttribute START>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (net.sourceforge.plantuml.project.time.Instant) $r3;

        $r6 = r0.<net.sourceforge.plantuml.project.solver.Solver3: java.util.Map values>;

        $r5 = <net.sourceforge.plantuml.project.core.TaskAttribute: net.sourceforge.plantuml.project.core.TaskAttribute LOAD>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (net.sourceforge.plantuml.project.Load) $r7;

        i0 = virtualinvoke $r8.<net.sourceforge.plantuml.project.Load: int getFullLoad()>();

        $l1 = (long) i0;

        $l2 = virtualinvoke r4.<net.sourceforge.plantuml.project.time.Instant: long getMillis()>();

        r9 = virtualinvoke r0.<net.sourceforge.plantuml.project.solver.Solver3: net.sourceforge.plantuml.project.core3.TaskLoad solveBackward(long,long)>($l1, $l2);

        $l3 = interfaceinvoke r9.<net.sourceforge.plantuml.project.core3.TaskLoad: long getEnd()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.project.time.Instant: net.sourceforge.plantuml.project.time.Instant create(long)>($l3);

        return $r10;
    }

    protected net.sourceforge.plantuml.project.time.Instant computeStart()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.project.solver.Solver3 r1;

        r1 := @this: net.sourceforge.plantuml.project.solver.Solver3;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected volatile net.sourceforge.plantuml.project.Value computeStart()
    {
        net.sourceforge.plantuml.project.solver.Solver3 r0;
        net.sourceforge.plantuml.project.time.Instant $r1;

        r0 := @this: net.sourceforge.plantuml.project.solver.Solver3;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.solver.Solver3: net.sourceforge.plantuml.project.time.Instant computeStart()>();

        return $r1;
    }

    protected volatile net.sourceforge.plantuml.project.Value computeEnd()
    {
        net.sourceforge.plantuml.project.solver.Solver3 r0;
        net.sourceforge.plantuml.project.time.Instant $r1;

        r0 := @this: net.sourceforge.plantuml.project.solver.Solver3;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.project.solver.Solver3: net.sourceforge.plantuml.project.time.Instant computeEnd()>();

        return $r1;
    }
}
