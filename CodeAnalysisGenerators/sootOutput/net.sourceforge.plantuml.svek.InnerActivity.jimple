public final class net.sourceforge.plantuml.svek.InnerActivity extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final net.sourceforge.plantuml.svek.IEntityImage im;
    private final net.sourceforge.plantuml.ugraphic.color.HColor borderColor;
    private final double shadowing;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColor;
    public static final double THICKNESS_BORDER;

    public void <init>(net.sourceforge.plantuml.svek.IEntityImage, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, double)
    {
        net.sourceforge.plantuml.svek.InnerActivity r0;
        net.sourceforge.plantuml.svek.IEntityImage r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2, r3;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        r1 := @parameter0: net.sourceforge.plantuml.svek.IEntityImage;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        d0 := @parameter3: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.svek.IEntityImage im> = r1;

        r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = r2;

        r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = r3;

        r0.<net.sourceforge.plantuml.svek.InnerActivity: double shadowing> = d0;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.InnerActivity r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3, $r6;
        net.sourceforge.plantuml.ugraphic.UBackground $r4;
        net.sourceforge.plantuml.ugraphic.UGraphic $r5, $r7, r13, r14, r15;
        net.sourceforge.plantuml.ugraphic.UStroke $r8, $r11;
        net.sourceforge.plantuml.ugraphic.URectangle $r9, r10;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.svek.IEntityImage $r12;

        r0 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        r13 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.ugraphic.color.HColor backColor>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r5 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        $r6 = r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

        $r7 = interfaceinvoke $r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r14 = interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        $r9 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d0, $d1);

        r10 = virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>(25.0);

        $d2 = r0.<net.sourceforge.plantuml.svek.InnerActivity: double shadowing>;

        virtualinvoke r10.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>($d2);

        interfaceinvoke r14.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r10);

        $r11 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>()>();

        r15 = interfaceinvoke r14.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        $r12 = r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.svek.IEntityImage im>;

        interfaceinvoke $r12.<net.sourceforge.plantuml.svek.IEntityImage: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r15);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.InnerActivity r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2;

        r0 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        $r1 = r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.svek.IEntityImage im>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        return $r2;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.InnerActivity r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;

        r0 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.svek.IEntityImage im>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return r3;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.InnerActivity r1;

        r1 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType ROUND_RECTANGLE>;

        return $r0;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Margins $r0;
        net.sourceforge.plantuml.svek.InnerActivity r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r0;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.InnerActivity r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        $r1 = r0.<net.sourceforge.plantuml.svek.InnerActivity: net.sourceforge.plantuml.svek.IEntityImage im>;

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: boolean isHidden()>();

        return $z0;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.InnerActivity r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.svek.InnerActivity;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.InnerActivity: double THICKNESS_BORDER> = 1.5;

        return;
    }
}
