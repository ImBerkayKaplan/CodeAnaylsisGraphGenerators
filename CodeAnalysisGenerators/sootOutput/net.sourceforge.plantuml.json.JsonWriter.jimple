class net.sourceforge.plantuml.json.JsonWriter extends java.lang.Object
{
    private static final int CONTROL_CHARACTERS_END;
    private static final char[] QUOT_CHARS;
    private static final char[] BS_CHARS;
    private static final char[] LF_CHARS;
    private static final char[] CR_CHARS;
    private static final char[] TAB_CHARS;
    private static final char[] UNICODE_2028_CHARS;
    private static final char[] UNICODE_2029_CHARS;
    private static final char[] HEX_DIGITS;
    protected final java.io.Writer writer;

    void <init>(java.io.Writer)
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer> = r1;

        return;
    }

    protected void writeLiteral(java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.lang.String r1;
        java.io.Writer $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1);

        return;
    }

    protected void writeNumber(java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.lang.String r1;
        java.io.Writer $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r1);

        return;
    }

    protected void writeString(java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1, $r3;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(34);

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonWriter: void writeJsonString(java.lang.String)>(r2);

        $r3 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(int)>(34);

        return;
    }

    protected void writeArrayOpen() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(91);

        return;
    }

    protected void writeArrayClose() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(93);

        return;
    }

    protected void writeArraySeparator() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(44);

        return;
    }

    protected void writeObjectOpen() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(123);

        return;
    }

    protected void writeObjectClose() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(125);

        return;
    }

    protected void writeMemberName(java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1, $r3;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(34);

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonWriter: void writeJsonString(java.lang.String)>(r2);

        $r3 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(int)>(34);

        return;
    }

    protected void writeMemberSeparator() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(58);

        return;
    }

    protected void writeObjectSeparator() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        java.io.Writer $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonWriter;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(44);

        return;
    }

    protected void writeJsonString(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        int i0, $i1, $i3, i4, i5;
        net.sourceforge.plantuml.json.JsonWriter r1;
        java.io.Writer $r2, $r4, $r5;
        char $c2;
        char[] r3;

        r1 := @this: net.sourceforge.plantuml.json.JsonWriter;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = 0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        r3 = staticinvoke <net.sourceforge.plantuml.json.JsonWriter: char[] getReplacementChars(char)>($c2);

        if r3 == null goto label2;

        $r4 = r1.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        $i3 = i5 - i4;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String,int,int)>(r0, i4, $i3);

        $r5 = r1.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void write(char[])>(r3);

        i4 = i5 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $r2 = r1.<net.sourceforge.plantuml.json.JsonWriter: java.io.Writer writer>;

        $i1 = i0 - i4;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>(r0, i4, $i1);

        return;
    }

    private static char[] getReplacementChars(char)
    {
        char c0, $c3, $c5;
        char[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i1, $i2, $i4;

        c0 := @parameter0: char;

        if c0 <= 92 goto label05;

        if c0 < 8232 goto label01;

        if c0 <= 8233 goto label02;

     label01:
        return null;

     label02:
        if c0 != 8232 goto label03;

        $r8 = <net.sourceforge.plantuml.json.JsonWriter: char[] UNICODE_2028_CHARS>;

        goto label04;

     label03:
        $r8 = <net.sourceforge.plantuml.json.JsonWriter: char[] UNICODE_2029_CHARS>;

     label04:
        return $r8;

     label05:
        if c0 != 92 goto label06;

        $r7 = <net.sourceforge.plantuml.json.JsonWriter: char[] BS_CHARS>;

        return $r7;

     label06:
        if c0 <= 34 goto label07;

        return null;

     label07:
        if c0 != 34 goto label08;

        $r6 = <net.sourceforge.plantuml.json.JsonWriter: char[] QUOT_CHARS>;

        return $r6;

     label08:
        if c0 <= 31 goto label09;

        return null;

     label09:
        if c0 != 10 goto label10;

        $r5 = <net.sourceforge.plantuml.json.JsonWriter: char[] LF_CHARS>;

        return $r5;

     label10:
        if c0 != 13 goto label11;

        $r4 = <net.sourceforge.plantuml.json.JsonWriter: char[] CR_CHARS>;

        return $r4;

     label11:
        if c0 != 9 goto label12;

        $r3 = <net.sourceforge.plantuml.json.JsonWriter: char[] TAB_CHARS>;

        return $r3;

     label12:
        $r0 = newarray (char)[6];

        $r0[0] = 92;

        $r0[1] = 117;

        $r0[2] = 48;

        $r0[3] = 48;

        $r1 = <net.sourceforge.plantuml.json.JsonWriter: char[] HEX_DIGITS>;

        $i1 = c0 >> 4;

        $i2 = $i1 & 15;

        $c3 = $r1[$i2];

        $r0[4] = $c3;

        $r2 = <net.sourceforge.plantuml.json.JsonWriter: char[] HEX_DIGITS>;

        $i4 = c0 & 15;

        $c5 = $r2[$i4];

        $r0[5] = $c5;

        return $r0;
    }

    static void <clinit>()
    {
        char[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        <net.sourceforge.plantuml.json.JsonWriter: int CONTROL_CHARACTERS_END> = 31;

        $r0 = newarray (char)[2];

        $r0[0] = 92;

        $r0[1] = 34;

        <net.sourceforge.plantuml.json.JsonWriter: char[] QUOT_CHARS> = $r0;

        $r1 = newarray (char)[2];

        $r1[0] = 92;

        $r1[1] = 92;

        <net.sourceforge.plantuml.json.JsonWriter: char[] BS_CHARS> = $r1;

        $r2 = newarray (char)[2];

        $r2[0] = 92;

        $r2[1] = 110;

        <net.sourceforge.plantuml.json.JsonWriter: char[] LF_CHARS> = $r2;

        $r3 = newarray (char)[2];

        $r3[0] = 92;

        $r3[1] = 114;

        <net.sourceforge.plantuml.json.JsonWriter: char[] CR_CHARS> = $r3;

        $r4 = newarray (char)[2];

        $r4[0] = 92;

        $r4[1] = 116;

        <net.sourceforge.plantuml.json.JsonWriter: char[] TAB_CHARS> = $r4;

        $r5 = newarray (char)[6];

        $r5[0] = 92;

        $r5[1] = 117;

        $r5[2] = 50;

        $r5[3] = 48;

        $r5[4] = 50;

        $r5[5] = 56;

        <net.sourceforge.plantuml.json.JsonWriter: char[] UNICODE_2028_CHARS> = $r5;

        $r6 = newarray (char)[6];

        $r6[0] = 92;

        $r6[1] = 117;

        $r6[2] = 50;

        $r6[3] = 48;

        $r6[4] = 50;

        $r6[5] = 57;

        <net.sourceforge.plantuml.json.JsonWriter: char[] UNICODE_2029_CHARS> = $r6;

        $r7 = newarray (char)[16];

        $r7[0] = 48;

        $r7[1] = 49;

        $r7[2] = 50;

        $r7[3] = 51;

        $r7[4] = 52;

        $r7[5] = 53;

        $r7[6] = 54;

        $r7[7] = 55;

        $r7[8] = 56;

        $r7[9] = 57;

        $r7[10] = 97;

        $r7[11] = 98;

        $r7[12] = 99;

        $r7[13] = 100;

        $r7[14] = 101;

        $r7[15] = 102;

        <net.sourceforge.plantuml.json.JsonWriter: char[] HEX_DIGITS> = $r7;

        return;
    }
}
