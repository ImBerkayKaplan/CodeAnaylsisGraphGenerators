public class net.sourceforge.plantuml.security.SFile extends java.lang.Object implements java.lang.Comparable
{
    public static java.lang.String separator;
    public static java.lang.String pathSeparator;
    public static char separatorChar;
    private final java.io.File internal;

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.security.SFile r0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        return "Image42";
    }

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r1);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.lang.String r2, r3;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        specialinvoke r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r1);

        return;
    }

    public void <init>(net.sourceforge.plantuml.security.SFile, java.lang.String)
    {
        net.sourceforge.plantuml.security.SFile r0, r2;
        java.io.File $r1, $r4;
        java.lang.String r3;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.io.File;

        $r4 = r2.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r3);

        specialinvoke r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r1);

        return;
    }

    public void <init>(java.net.URI)
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.net.URI r2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.net.URI;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.net.URI)>(r2);

        specialinvoke r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r1);

        return;
    }

    private void <init>(java.io.File)
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File r1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal> = r1;

        return;
    }

    public static net.sourceforge.plantuml.security.SFile fromFile(java.io.File)
    {
        java.io.File r0;
        net.sourceforge.plantuml.security.SFile $r1;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r1.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>(r0);

        return $r1;
    }

    public net.sourceforge.plantuml.security.SFile file(java.lang.String)
    {
        net.sourceforge.plantuml.security.SFile $r0, r1;
        java.lang.String r2;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r0.<net.sourceforge.plantuml.security.SFile: void <init>(net.sourceforge.plantuml.security.SFile,java.lang.String)>(r1, r2);

        return $r0;
    }

    public boolean exists()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        if $r1 == null goto label1;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.security.SFile: boolean isFileOk()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        return $z1;

     label1:
        return 0;
    }

    public net.sourceforge.plantuml.security.SFile getCanonicalFile() throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile $r0, r1;
        java.io.File $r2, $r3;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new net.sourceforge.plantuml.security.SFile;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File getCanonicalFile()>();

        specialinvoke $r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r3);

        return $r0;
    }

    public boolean isAbsolute()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        if $r1 == null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isDirectory()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        if $r1 == null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.lang.String getName()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        return $r2;
    }

    public boolean isFile()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        if $r1 == null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public long lastModified()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $l0 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        return $l0;
    }

    public int compareTo(net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.security.SFile r0, r1;
        java.io.File $r2, $r3;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        $r3 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $i0 = virtualinvoke $r3.<java.io.File: int compareTo(java.io.File)>($r2);

        return $i0;
    }

    public java.lang.String getPath()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        return $r2;
    }

    public long length()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }

    public boolean canWrite()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        return $z0;
    }

    public void setWritable(boolean)
    {
        net.sourceforge.plantuml.security.SFile r0;
        boolean z0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        z0 := @parameter0: boolean;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        virtualinvoke $r1.<java.io.File: boolean setWritable(boolean)>(z0);

        return;
    }

    public void delete()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return;
    }

    public java.util.Collection listFiles()
    {
        net.sourceforge.plantuml.security.SFile r0, $r8;
        java.io.File $r1, r7;
        java.io.File[] r2;
        java.util.ArrayList $r3;
        int $i0, i1, i2;
        java.util.Collection $r6;
        java.util.List $r9;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        if r2 != null goto label1;

        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r9;

     label1:
        $r3 = new java.util.ArrayList;

        $i0 = lengthof r2;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = lengthof r2;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        r7 = r2[i2];

        $r8 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r8.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>(r7);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r3);

        return $r6;
    }

    public java.lang.String[] list()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.lang.String[] $r2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String[] list()>();

        return $r2;
    }

    public net.sourceforge.plantuml.security.SFile getAbsoluteFile()
    {
        net.sourceforge.plantuml.security.SFile $r0, r1;
        java.io.File $r2, $r3;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new net.sourceforge.plantuml.security.SFile;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File getAbsoluteFile()>();

        specialinvoke $r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r3);

        return $r0;
    }

    public net.sourceforge.plantuml.security.SFile getParentFile()
    {
        net.sourceforge.plantuml.security.SFile $r0, r1;
        java.io.File $r2, $r3;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new net.sourceforge.plantuml.security.SFile;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r3);

        return $r0;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $i0 = virtualinvoke $r1.<java.io.File: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        net.sourceforge.plantuml.security.SFile r0, $r2;
        java.lang.Object r1;
        java.io.File $r3, $r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = (net.sourceforge.plantuml.security.SFile) r1;

        $r3 = $r2.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public java.lang.String getAbsolutePath()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r2;
    }

    public java.lang.String getPrintablePath()
    {
        net.sourceforge.plantuml.security.SecurityProfile $r0, $r1;
        net.sourceforge.plantuml.security.SFile r2;
        java.io.File $r3;
        java.lang.String $r4;
        java.io.IOException $r5;

        r2 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r1 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r0 != $r1 goto label4;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getCanonicalPath()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

     label4:
        return "";

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean canRead()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean canRead()>();

        return $z0;
    }

    public void deleteOnExit()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        virtualinvoke $r1.<java.io.File: void deleteOnExit()>();

        return;
    }

    public void mkdirs()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        return;
    }

    public static net.sourceforge.plantuml.security.SFile createTempFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile $r0;
        java.lang.String r1, r2;
        java.io.File $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new net.sourceforge.plantuml.security.SFile;

        $r3 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>(r1, r2);

        specialinvoke $r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.io.File)>($r3);

        return $r0;
    }

    public java.net.URI toURI()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.net.URI $r2;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = virtualinvoke $r1.<java.io.File: java.net.URI toURI()>();

        return $r2;
    }

    public boolean renameTo(net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.security.SFile r0, r1;
        java.io.File $r2, $r3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        $r3 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean renameTo(java.io.File)>($r2);

        return $z0;
    }

    private boolean isFileOk()
    {
        net.sourceforge.plantuml.security.SecurityProfile $r0, $r1, $r5, $r6, $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.security.SFile r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List $r3, $r4;
        java.io.IOException $r11;
        java.lang.String r13;

        r2 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r1 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile SANDBOX>;

        if $r0 != $r1 goto label01;

        return 0;

     label01:
        $z0 = specialinvoke r2.<net.sourceforge.plantuml.security.SFile: boolean isDenied()>();

        if $z0 == 0 goto label03;

     label02:
        return 0;

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        return 0;

     label05:
        $r3 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.util.List getPath(java.lang.String)>("plantuml.include.path");

        $z1 = specialinvoke r2.<net.sourceforge.plantuml.security.SFile: boolean isInAllowList(java.util.List)>($r3);

        if $z1 == 0 goto label06;

        return 1;

     label06:
        $r4 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.util.List getPath(java.lang.String)>("plantuml.allowlist.path");

        $z2 = specialinvoke r2.<net.sourceforge.plantuml.security.SFile: boolean isInAllowList(java.util.List)>($r4);

        if $z2 == 0 goto label07;

        return 1;

     label07:
        $r5 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r6 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile INTERNET>;

        if $r5 != $r6 goto label08;

        return 0;

     label08:
        $r7 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r8 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile ALLOWLIST>;

        if $r7 != $r8 goto label09;

        return 0;

     label09:
        $r9 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r10 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r9 == $r10 goto label12;

        r13 = specialinvoke r2.<net.sourceforge.plantuml.security.SFile: java.lang.String getCleanPathSecure()>();

        $z3 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("/etc/");

        if $z3 != 0 goto label10;

        $z4 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("/dev/");

        if $z4 != 0 goto label10;

        $z5 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("/boot/");

        if $z5 != 0 goto label10;

        $z6 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("/proc/");

        if $z6 != 0 goto label10;

        $z7 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("/sys/");

        if $z7 == 0 goto label11;

     label10:
        return 0;

     label11:
        $z8 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("//");

        if $z8 == 0 goto label12;

        return 0;

     label12:
        return 1;

        catch java.io.IOException from label01 to label02 with label04;
    }

    private boolean isInAllowList(java.util.List)
    {
        net.sourceforge.plantuml.security.SFile r0, r5;
        java.lang.String r1, $r6;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.util.List;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.security.SFile: java.lang.String getCleanPathSecure()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.security.SFile) $r4;

        $r6 = specialinvoke r5.<net.sourceforge.plantuml.security.SFile: java.lang.String getCleanPathSecure()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean isDenied() throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0, r1;
        java.nio.file.Path $r2, $r3;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SFile getSecurityPath()>();

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r1.<net.sourceforge.plantuml.security.SFile: java.nio.file.Path getSanitizedPath()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.security.SFile: java.nio.file.Path getSanitizedPath()>();

        $z0 = interfaceinvoke $r2.<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>($r3);

        return $z0;
    }

    private java.nio.file.Path getSanitizedPath() throws java.io.IOException
    {
        java.io.File $r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.lang.String $r2, $r3;
        java.lang.String[] $r4;
        java.nio.file.Path $r5, $r6;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new java.io.File;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.security.SFile: java.lang.String getCleanPathSecure()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r4 = newarray (java.lang.String)[0];

        $r5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r3, $r4);

        $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.nio.file.Path normalize()>();

        return $r6;
    }

    private java.lang.String getCleanPathSecure()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;
        java.lang.String r2, r3, r4;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\u0000", "");

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\\\", "/");

        return r4;
    }

    public java.awt.image.BufferedImage readRasterImageFromFile()
    {
        net.sourceforge.plantuml.security.SFile r0;
        boolean $z0;
        javax.swing.ImageIcon $r1;
        java.lang.String $r2;
        java.awt.image.BufferedImage $r3;
        java.lang.Exception $r4;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.security.SFile: boolean isFileOk()>();

        if $z0 == 0 goto label4;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.lang.String getAbsolutePath()>();

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.lang.String)>($r2);

        $r3 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.awt.image.BufferedImage readRasterImage(javax.swing.ImageIcon)>($r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label4:
        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.io.BufferedReader openBufferedReader()
    {
        net.sourceforge.plantuml.security.SFile r0;
        boolean $z0;
        java.io.BufferedReader $r1;
        java.io.FileReader $r2;
        java.io.File $r3;
        java.io.FileNotFoundException $r4;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.security.SFile: boolean isFileOk()>();

        if $z0 == 0 goto label4;

     label1:
        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.FileReader;

        $r3 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r2.<java.io.FileReader: void <init>(java.io.File)>($r3);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.FileNotFoundException: void printStackTrace()>();

     label4:
        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public java.io.File conv()
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $r1 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        return $r1;
    }

    public java.io.InputStream openFile()
    {
        net.sourceforge.plantuml.security.SFile r0;
        boolean $z0;
        java.io.BufferedInputStream $r1;
        java.io.FileInputStream $r2;
        java.io.File $r3;
        java.io.FileNotFoundException $r4;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.security.SFile: boolean isFileOk()>();

        if $z0 == 0 goto label4;

     label1:
        $r1 = new java.io.BufferedInputStream;

        $r2 = new java.io.FileInputStream;

        $r3 = r0.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r2);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.FileNotFoundException: void printStackTrace()>();

     label4:
        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public java.io.BufferedOutputStream createBufferedOutputStream() throws java.io.FileNotFoundException
    {
        java.io.BufferedOutputStream $r0;
        java.io.FileOutputStream $r1;
        net.sourceforge.plantuml.security.SFile r2;
        java.io.File $r3;

        r2 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new java.io.BufferedOutputStream;

        $r1 = new java.io.FileOutputStream;

        $r3 = r2.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        specialinvoke $r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r1);

        return $r0;
    }

    public java.io.PrintWriter createPrintWriter() throws java.io.FileNotFoundException
    {
        java.io.PrintWriter $r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.io.File $r2;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new java.io.PrintWriter;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.File)>($r2);

        return $r0;
    }

    public java.io.PrintWriter createPrintWriter(java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.io.PrintWriter $r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.lang.String r2;
        java.io.File $r3;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.PrintWriter;

        $r3 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>($r3, r2);

        return $r0;
    }

    public java.io.FileOutputStream createFileOutputStream() throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream $r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.io.File $r2;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new java.io.FileOutputStream;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        return $r0;
    }

    public java.io.FileOutputStream createFileOutputStream(boolean) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream $r0;
        net.sourceforge.plantuml.security.SFile r1;
        boolean z0;
        java.io.File $r2;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        z0 := @parameter0: boolean;

        $r0 = new java.io.FileOutputStream;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r2, z0);

        return $r0;
    }

    public java.io.PrintStream createPrintStream() throws java.io.FileNotFoundException
    {
        java.io.PrintStream $r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.io.File $r2;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        $r0 = new java.io.PrintStream;

        $r2 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.File)>($r2);

        return $r0;
    }

    public java.io.PrintStream createPrintStream(java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.io.PrintStream $r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.lang.String r2;
        java.io.File $r3;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.PrintStream;

        $r3 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>($r3, r2);

        return $r0;
    }

    public java.io.PrintStream createPrintStream(java.nio.charset.Charset) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.io.PrintStream $r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.nio.charset.Charset r2;
        java.io.File $r3;
        java.lang.String $r4;

        r1 := @this: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter0: java.nio.charset.Charset;

        $r0 = new java.io.PrintStream;

        $r3 = r1.<net.sourceforge.plantuml.security.SFile: java.io.File internal>;

        $r4 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>($r3, $r4);

        return $r0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.security.SFile r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.security.SFile;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.security.SFile) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: int compareTo(net.sourceforge.plantuml.security.SFile)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        char $c0;

        $r0 = <java.io.File: java.lang.String separator>;

        <net.sourceforge.plantuml.security.SFile: java.lang.String separator> = $r0;

        $r1 = <java.io.File: java.lang.String pathSeparator>;

        <net.sourceforge.plantuml.security.SFile: java.lang.String pathSeparator> = $r1;

        $c0 = <java.io.File: char separatorChar>;

        <net.sourceforge.plantuml.security.SFile: char separatorChar> = $c0;

        return;
    }
}
