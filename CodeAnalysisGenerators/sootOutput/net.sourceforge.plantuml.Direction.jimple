public final enum class net.sourceforge.plantuml.Direction extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.Direction RIGHT;
    public static final enum net.sourceforge.plantuml.Direction LEFT;
    public static final enum net.sourceforge.plantuml.Direction DOWN;
    public static final enum net.sourceforge.plantuml.Direction UP;
    private static final net.sourceforge.plantuml.Direction[] $VALUES;

    public static net.sourceforge.plantuml.Direction[] values()
    {
        net.sourceforge.plantuml.Direction[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.Direction[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.Direction valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.Direction $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/Direction;", r0);

        $r2 = (net.sourceforge.plantuml.Direction) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.Direction r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.Direction;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public net.sourceforge.plantuml.Direction getInv()
    {
        net.sourceforge.plantuml.Direction r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9;
        java.lang.IllegalStateException $r5;

        r0 := @this: net.sourceforge.plantuml.Direction;

        $r1 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if r0 != $r1 goto label1;

        $r9 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        return $r9;

     label1:
        $r2 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        if r0 != $r2 goto label2;

        $r8 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        return $r8;

     label2:
        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        if r0 != $r3 goto label3;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        return $r7;

     label3:
        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        if r0 != $r4 goto label4;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        return $r6;

     label4:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;
    }

    public java.lang.String getShortCode()
    {
        net.sourceforge.plantuml.Direction r0;
        java.lang.String $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.Direction;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.Direction: java.lang.String name()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        return $r2;
    }

    public static net.sourceforge.plantuml.Direction fromChar(char)
    {
        char c0;
        net.sourceforge.plantuml.Direction $r0, $r1, $r2, $r3;

        c0 := @parameter0: char;

        if c0 != 60 goto label1;

        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        return $r3;

     label1:
        if c0 != 62 goto label2;

        $r2 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        return $r2;

     label2:
        if c0 != 94 goto label3;

        $r1 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        return $r1;

     label3:
        $r0 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        return $r0;
    }

    public net.sourceforge.plantuml.Direction clockwise()
    {
        net.sourceforge.plantuml.Direction r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9;
        java.lang.IllegalStateException $r5;

        r0 := @this: net.sourceforge.plantuml.Direction;

        $r1 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if r0 != $r1 goto label1;

        $r9 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        return $r9;

     label1:
        $r2 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        if r0 != $r2 goto label2;

        $r8 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        return $r8;

     label2:
        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        if r0 != $r3 goto label3;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        return $r7;

     label3:
        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        if r0 != $r4 goto label4;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        return $r6;

     label4:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;
    }

    public static net.sourceforge.plantuml.Direction leftOrRight(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r2;
        net.sourceforge.plantuml.Direction $r3, $r4;

        r0 := @parameter0: java.awt.geom.Point2D;

        r1 := @parameter1: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        return $r4;

     label1:
        $d2 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $b1 = $d2 cmpl $d3;

        if $b1 <= 0 goto label2;

        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        return $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    public static net.sourceforge.plantuml.Direction fromVector(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double d0, d1, d2, d3;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        java.lang.IllegalArgumentException $r2;
        net.sourceforge.plantuml.Direction $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.awt.geom.Point2D;

        r1 := @parameter1: java.awt.geom.Point2D;

        d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        d2 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $b0 = d0 cmpl d2;

        if $b0 != 0 goto label1;

        $b5 = d1 cmpl d3;

        if $b5 != 0 goto label1;

        return null;

     label1:
        $b1 = d0 cmpl d2;

        if $b1 != 0 goto label3;

        $b4 = d3 cmpl d1;

        if $b4 <= 0 goto label2;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        return $r6;

     label2:
        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        return $r5;

     label3:
        $b2 = d1 cmpl d3;

        if $b2 != 0 goto label5;

        $b3 = d2 cmpl d0;

        if $b3 <= 0 goto label4;

        $r4 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        return $r4;

     label4:
        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        return $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a H or V line!");

        throw $r2;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.Direction $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.Direction[] $r4;

        $r0 = new net.sourceforge.plantuml.Direction;

        specialinvoke $r0.<net.sourceforge.plantuml.Direction: void <init>(java.lang.String,int)>("RIGHT", 0);

        <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT> = $r0;

        $r1 = new net.sourceforge.plantuml.Direction;

        specialinvoke $r1.<net.sourceforge.plantuml.Direction: void <init>(java.lang.String,int)>("LEFT", 1);

        <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT> = $r1;

        $r2 = new net.sourceforge.plantuml.Direction;

        specialinvoke $r2.<net.sourceforge.plantuml.Direction: void <init>(java.lang.String,int)>("DOWN", 2);

        <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN> = $r2;

        $r3 = new net.sourceforge.plantuml.Direction;

        specialinvoke $r3.<net.sourceforge.plantuml.Direction: void <init>(java.lang.String,int)>("UP", 3);

        <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP> = $r3;

        $r4 = newarray (net.sourceforge.plantuml.Direction)[4];

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r4[0] = $r5;

        $r6 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        $r4[1] = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        $r4[2] = $r7;

        $r8 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        $r4[3] = $r8;

        <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction[] $VALUES> = $r4;

        return;
    }
}
