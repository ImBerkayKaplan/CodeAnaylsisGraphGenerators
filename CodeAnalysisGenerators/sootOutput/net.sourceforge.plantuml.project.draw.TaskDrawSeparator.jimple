public class net.sourceforge.plantuml.project.draw.TaskDrawSeparator extends java.lang.Object implements net.sourceforge.plantuml.project.draw.TaskDraw
{
    private final net.sourceforge.plantuml.project.timescale.TimeScale timeScale;
    private net.sourceforge.plantuml.real.Real y;
    private final net.sourceforge.plantuml.project.time.Day min;
    private final net.sourceforge.plantuml.project.time.Day max;
    private final java.lang.String name;
    private final net.sourceforge.plantuml.style.StyleBuilder styleBuilder;
    private final net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet;

    public void <init>(java.lang.String, net.sourceforge.plantuml.project.timescale.TimeScale, net.sourceforge.plantuml.real.Real, net.sourceforge.plantuml.project.time.Day, net.sourceforge.plantuml.project.time.Day, net.sourceforge.plantuml.style.StyleBuilder, net.sourceforge.plantuml.ugraphic.color.HColorSet)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.style.StyleBuilder r1;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r2;
        java.lang.String r3;
        net.sourceforge.plantuml.real.Real r4;
        net.sourceforge.plantuml.project.timescale.TimeScale r5;
        net.sourceforge.plantuml.project.time.Day r6, r7;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: net.sourceforge.plantuml.project.timescale.TimeScale;

        r4 := @parameter2: net.sourceforge.plantuml.real.Real;

        r6 := @parameter3: net.sourceforge.plantuml.project.time.Day;

        r7 := @parameter4: net.sourceforge.plantuml.project.time.Day;

        r1 := @parameter5: net.sourceforge.plantuml.style.StyleBuilder;

        r2 := @parameter6: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.StyleBuilder styleBuilder> = r1;

        r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet> = r2;

        r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: java.lang.String name> = r3;

        r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.real.Real y> = r4;

        r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.timescale.TimeScale timeScale> = r5;

        r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.time.Day min> = r6;

        r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.time.Day max> = r7;

        return;
    }

    public void drawTitle(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.project.LabelStrategy, double, double)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.style.Style $r1, $r3;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r2, r4;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, d7, d8, d9;
        net.sourceforge.plantuml.project.LabelStrategy r5;
        boolean $z0;
        net.sourceforge.plantuml.graphic.TextBlock $r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r7, $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r5 := @parameter1: net.sourceforge.plantuml.project.LabelStrategy;

        d7 := @parameter2: double;

        d8 := @parameter3: double;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getPadding()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        d2 = $d0 + $d1;

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        $d4 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        d5 = $d3 + $d4;

        $z0 = virtualinvoke r5.<net.sourceforge.plantuml.project.LabelStrategy: boolean titleInFirstColumn()>();

        if $z0 == 0 goto label1;

        d9 = d7;

        goto label2;

     label1:
        d9 = 0.0;

     label2:
        $r6 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.graphic.TextBlock getTitle()>();

        $r8 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d6 = d9 + d2;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d6, d5);

        $r9 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r9);

        return;
    }

    public double getTitleWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    private net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r6;

        r6 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName ganttDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName separator>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style $r3;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        return $r3;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getTitle()
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        java.lang.String $r1, $r2;
        net.sourceforge.plantuml.cucadiagram.Display $r3;
        net.sourceforge.plantuml.graphic.FontConfiguration $r4;
        net.sourceforge.plantuml.SpriteContainerEmpty $r5;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r6;
        net.sourceforge.plantuml.graphic.TextBlock $r7, $r8;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: java.lang.String name>;

        if $r1 != null goto label1;

        $r8 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        return $r8;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: java.lang.String name>;

        $r3 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r2);

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()>();

        $r6 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r5 = new net.sourceforge.plantuml.SpriteContainerEmpty;

        specialinvoke $r5.<net.sourceforge.plantuml.SpriteContainerEmpty: void <init>()>();

        $r7 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r4, $r6, $r5);

        return $r7;
    }

    private net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.style.Style $r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.SkinParam $r3;
        net.sourceforge.plantuml.api.ThemeStyle $r4;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r5;
        net.sourceforge.plantuml.graphic.FontConfiguration $r6;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        $r2 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r5 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        $r6 = virtualinvoke $r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r4, $r5);

        return $r6;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19, $d20, $d21, $d22, $d23, d24;
        net.sourceforge.plantuml.project.time.Day $r4, $r6;
        net.sourceforge.plantuml.project.timescale.TimeScale $r5, $r7;
        net.sourceforge.plantuml.style.Style $r8, $r10, $r13, $r30;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r9, r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r12, $r22, $r39;
        net.sourceforge.plantuml.style.PName $r14, $r31;
        net.sourceforge.plantuml.style.Value $r15, $r32;
        net.sourceforge.plantuml.style.StyleBuilder $r16, $r33;
        net.sourceforge.plantuml.SkinParam $r17, $r34;
        net.sourceforge.plantuml.api.ThemeStyle $r18, $r35;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r19, $r36;
        net.sourceforge.plantuml.ugraphic.color.HColor r20, r37;
        boolean $z0;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.ugraphic.ULine r21, r41, r42;
        net.sourceforge.plantuml.ugraphic.UGraphic $r23, $r27, r28, r29, r38, r40;
        net.sourceforge.plantuml.ugraphic.URectangle $r24;
        net.sourceforge.plantuml.ugraphic.UBackground $r26;

        r1 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r28 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.graphic.TextBlock getTitle()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r5 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.timescale.TimeScale timeScale>;

        $r4 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.time.Day min>;

        d1 = interfaceinvoke $r5.<net.sourceforge.plantuml.project.timescale.TimeScale: double getStartingPosition(net.sourceforge.plantuml.project.time.Day)>($r4);

        $r7 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.timescale.TimeScale timeScale>;

        $r6 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.time.Day max>;

        d2 = interfaceinvoke $r7.<net.sourceforge.plantuml.project.timescale.TimeScale: double getEndingPosition(net.sourceforge.plantuml.project.time.Day)>($r6);

        $r8 = specialinvoke r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getPadding()>();

        $r10 = specialinvoke r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        r11 = virtualinvoke $r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $r12 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d3 = virtualinvoke r11.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(0.0, $d3);

        r29 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r13 = specialinvoke r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        $r14 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r15 = virtualinvoke $r13.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r14);

        $r16 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r19 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        r20 = interfaceinvoke $r15.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r18, $r19);

        $z0 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: boolean isTransparent(net.sourceforge.plantuml.ugraphic.color.HColor)>(r20);

        if $z0 != 0 goto label1;

        $d14 = virtualinvoke r9.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        $d15 = specialinvoke r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d16 = $d14 + $d15;

        $d17 = virtualinvoke r9.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getBottom()>();

        d19 = $d16 + $d17;

        $b1 = d19 cmpl 0.0;

        if $b1 <= 0 goto label1;

        $r24 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d18 = d2 - d1;

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d18, d19);

        $r26 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r27 = interfaceinvoke r29.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r26);

        interfaceinvoke $r27.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r24);

     label1:
        $r30 = specialinvoke r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        $r31 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r32 = virtualinvoke $r30.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r31);

        $r33 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.StyleBuilder styleBuilder>;

        $r34 = virtualinvoke $r33.<net.sourceforge.plantuml.style.StyleBuilder: net.sourceforge.plantuml.SkinParam getSkinParam()>();

        $r35 = virtualinvoke $r34.<net.sourceforge.plantuml.SkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r36 = r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.ugraphic.color.HColorSet colorSet>;

        r37 = interfaceinvoke $r32.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r35, $r36);

        r38 = interfaceinvoke r29.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r37);

        $d20 = virtualinvoke r9.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        $d21 = specialinvoke r1.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d22 = $d21 / 2.0;

        $d23 = $d20 + $d22;

        $r39 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d23);

        r40 = interfaceinvoke r38.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r39);

        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label2;

        $d13 = d2 - d1;

        r41 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d13);

        interfaceinvoke r40.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r41);

        goto label4;

     label2:
        $d4 = virtualinvoke r9.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        $b0 = $d4 cmpl 1.0;

        if $b0 <= 0 goto label3;

        $d12 = virtualinvoke r9.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        r42 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d12);

        interfaceinvoke r40.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r42);

     label3:
        $d5 = virtualinvoke r9.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        $d6 = virtualinvoke r11.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        $d7 = $d5 + $d6;

        $d8 = $d7 + d0;

        $d9 = virtualinvoke r11.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getRight()>();

        d24 = $d8 + $d9;

        d10 = d2 - 1.0;

        $d11 = d10 - d24;

        r21 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d11);

        $r22 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d24);

        $r23 = interfaceinvoke r40.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r22);

        interfaceinvoke $r23.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r21);

     label4:
        return;
    }

    public net.sourceforge.plantuml.project.draw.FingerPrint getFingerPrint(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.project.time.Day $r2;
        net.sourceforge.plantuml.project.timescale.TimeScale $r3;
        net.sourceforge.plantuml.project.draw.FingerPrint $r4;
        net.sourceforge.plantuml.real.Real $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: double getFullHeightTask(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.timescale.TimeScale timeScale>;

        $r2 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.project.time.Day max>;

        d1 = interfaceinvoke $r3.<net.sourceforge.plantuml.project.timescale.TimeScale: double getEndingPosition(net.sourceforge.plantuml.project.time.Day)>($r2);

        $r4 = new net.sourceforge.plantuml.project.draw.FingerPrint;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.real.Real getY(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.real.Real getY(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d3 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d4 = $d3 + d0;

        specialinvoke $r4.<net.sourceforge.plantuml.project.draw.FingerPrint: void <init>(double,double,double,double)>(0.0, $d2, d1, $d4);

        return $r4;
    }

    public net.sourceforge.plantuml.project.draw.FingerPrint getFingerPrintNote(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return null;
    }

    public double getFullHeightTask(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.style.Style $r1, $r3;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r2, r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        net.sourceforge.plantuml.graphic.StringBounder r5;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getPadding()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.style.Style getStyle()>();

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        $d2 = $d0 + $d1;

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d4 = $d2 + $d3;

        $d5 = virtualinvoke r2.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getBottom()>();

        $d6 = $d4 + $d5;

        $d7 = virtualinvoke r4.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getBottom()>();

        $d8 = $d6 + $d7;

        return $d8;
    }

    private double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.graphic.TextBlock getTitle()>();

        $r3 = interfaceinvoke $r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = virtualinvoke $r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    public net.sourceforge.plantuml.real.Real getY(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.real.Real $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: net.sourceforge.plantuml.real.Real y>;

        return $r1;
    }

    public net.sourceforge.plantuml.project.draw.TaskDraw getTrueRow()
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        return null;
    }

    public void setColorsAndCompletion(net.sourceforge.plantuml.project.lang.CenterBorderColor, int, net.sourceforge.plantuml.Url, net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.project.lang.CenterBorderColor r1;
        int i0;
        net.sourceforge.plantuml.Url r2;
        net.sourceforge.plantuml.cucadiagram.Display r3;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r1 := @parameter0: net.sourceforge.plantuml.project.lang.CenterBorderColor;

        i0 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.Url;

        r3 := @parameter3: net.sourceforge.plantuml.cucadiagram.Display;

        return;
    }

    public net.sourceforge.plantuml.project.core.Task getTask()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r1;

        r1 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public double getY(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.Direction)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.Direction r3;

        r1 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.Direction;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public double getHeightMax(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.project.draw.TaskDrawSeparator: double getFullHeightTask(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getX1(net.sourceforge.plantuml.project.core.TaskAttribute)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r1;
        net.sourceforge.plantuml.project.core.TaskAttribute r2;

        r1 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r2 := @parameter0: net.sourceforge.plantuml.project.core.TaskAttribute;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public double getX2(net.sourceforge.plantuml.project.core.TaskAttribute)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.project.draw.TaskDrawSeparator r1;
        net.sourceforge.plantuml.project.core.TaskAttribute r2;

        r1 := @this: net.sourceforge.plantuml.project.draw.TaskDrawSeparator;

        r2 := @parameter0: net.sourceforge.plantuml.project.core.TaskAttribute;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
