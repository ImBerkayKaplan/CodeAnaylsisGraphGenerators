class net.sourceforge.plantuml.swing.SimpleLine extends java.lang.Object implements java.lang.Comparable
{
    private final java.io.File file;
    private final net.sourceforge.plantuml.GeneratedImage generatedImage;
    private final java.util.concurrent.Future future;

    public static net.sourceforge.plantuml.swing.SimpleLine fromFuture(java.io.File, java.util.concurrent.Future)
    {
        net.sourceforge.plantuml.swing.SimpleLine $r0;
        java.io.File r1;
        java.util.concurrent.Future r2;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.concurrent.Future;

        $r0 = new net.sourceforge.plantuml.swing.SimpleLine;

        specialinvoke $r0.<net.sourceforge.plantuml.swing.SimpleLine: void <init>(java.io.File,net.sourceforge.plantuml.GeneratedImage,java.util.concurrent.Future)>(r1, null, r2);

        return $r0;
    }

    public static net.sourceforge.plantuml.swing.SimpleLine fromGeneratedImage(java.io.File, net.sourceforge.plantuml.GeneratedImage)
    {
        net.sourceforge.plantuml.swing.SimpleLine $r0;
        java.io.File r1;
        net.sourceforge.plantuml.GeneratedImage r2;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: net.sourceforge.plantuml.GeneratedImage;

        $r0 = new net.sourceforge.plantuml.swing.SimpleLine;

        specialinvoke $r0.<net.sourceforge.plantuml.swing.SimpleLine: void <init>(java.io.File,net.sourceforge.plantuml.GeneratedImage,java.util.concurrent.Future)>(r1, r2, null);

        return $r0;
    }

    private void <init>(java.io.File, net.sourceforge.plantuml.GeneratedImage, java.util.concurrent.Future)
    {
        net.sourceforge.plantuml.swing.SimpleLine r0;
        net.sourceforge.plantuml.GeneratedImage r1;
        java.io.File r2;
        java.util.concurrent.Future r3;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        r2 := @parameter0: java.io.File;

        r1 := @parameter1: net.sourceforge.plantuml.GeneratedImage;

        r3 := @parameter2: java.util.concurrent.Future;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.swing.SimpleLine: net.sourceforge.plantuml.GeneratedImage generatedImage> = r1;

        r0.<net.sourceforge.plantuml.swing.SimpleLine: java.io.File file> = r2;

        r0.<net.sourceforge.plantuml.swing.SimpleLine: java.util.concurrent.Future future> = r3;

        return;
    }

    public java.io.File getFile()
    {
        net.sourceforge.plantuml.swing.SimpleLine r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        $r1 = r0.<net.sourceforge.plantuml.swing.SimpleLine: java.io.File file>;

        return $r1;
    }

    public boolean pendingAndFinished()
    {
        net.sourceforge.plantuml.swing.SimpleLine r0;
        net.sourceforge.plantuml.GeneratedImage $r1;
        java.util.concurrent.Future $r2;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        $r1 = r0.<net.sourceforge.plantuml.swing.SimpleLine: net.sourceforge.plantuml.GeneratedImage generatedImage>;

        if $r1 != null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.swing.SimpleLine: java.util.concurrent.Future future>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.Future: boolean isDone()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.swing.SimpleLine r0;
        net.sourceforge.plantuml.GeneratedImage $r1, $r3, $r8;
        java.lang.StringBuilder $r2, $r12, $r15, $r16;
        java.io.File $r4, $r13;
        java.lang.String $r5, $r9, $r11, $r14, $r17;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        $r1 = r0.<net.sourceforge.plantuml.swing.SimpleLine: net.sourceforge.plantuml.GeneratedImage generatedImage>;

        if $r1 != null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<net.sourceforge.plantuml.swing.SimpleLine: java.io.File file>;

        $r14 = virtualinvoke $r13.<java.io.File: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (...pending...)");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label1:
        $r2 = new java.lang.StringBuilder;

        $r3 = r0.<net.sourceforge.plantuml.swing.SimpleLine: net.sourceforge.plantuml.GeneratedImage generatedImage>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.GeneratedImage: java.io.File getPngFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r0.<net.sourceforge.plantuml.swing.SimpleLine: net.sourceforge.plantuml.GeneratedImage generatedImage>;

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.GeneratedImage: java.lang.String getDescription()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.util.concurrent.Future getFuture()
    {
        net.sourceforge.plantuml.swing.SimpleLine r0;
        java.util.concurrent.Future $r1;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        $r1 = r0.<net.sourceforge.plantuml.swing.SimpleLine: java.util.concurrent.Future future>;

        return $r1;
    }

    public int compareTo(net.sourceforge.plantuml.swing.SimpleLine)
    {
        net.sourceforge.plantuml.swing.SimpleLine r0, r2;
        java.lang.String $r1, $r3;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        r2 := @parameter0: net.sourceforge.plantuml.swing.SimpleLine;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.swing.SimpleLine: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.swing.SimpleLine: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    public net.sourceforge.plantuml.GeneratedImage getGeneratedImage()
    {
        net.sourceforge.plantuml.swing.SimpleLine r0;
        net.sourceforge.plantuml.GeneratedImage $r1;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        $r1 = r0.<net.sourceforge.plantuml.swing.SimpleLine: net.sourceforge.plantuml.GeneratedImage generatedImage>;

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.swing.SimpleLine r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.swing.SimpleLine;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.swing.SimpleLine) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.swing.SimpleLine: int compareTo(net.sourceforge.plantuml.swing.SimpleLine)>($r2);

        return $i0;
    }
}
