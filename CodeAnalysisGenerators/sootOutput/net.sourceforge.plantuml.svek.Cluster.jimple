public class net.sourceforge.plantuml.svek.Cluster extends java.lang.Object implements net.sourceforge.plantuml.posimo.Moveable
{
    private static final java.lang.String RANK_SAME;
    private static final java.lang.String RANK_SOURCE;
    private static final java.lang.String RANK_SINK;
    private static final java.lang.String ID_EE;
    public static final java.lang.String CENTER_ID;
    private final net.sourceforge.plantuml.svek.Cluster parentCluster;
    private final net.sourceforge.plantuml.cucadiagram.IGroup group;
    private final java.util.List nodes;
    private final java.util.List children;
    private final int color;
    private final int colorTitle;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private int titleAndAttributeWidth;
    private int titleAndAttributeHeight;
    private net.sourceforge.plantuml.graphic.TextBlock ztitle;
    private net.sourceforge.plantuml.graphic.TextBlock zstereo;
    private double xTitle;
    private double yTitle;
    private double minX;
    private double minY;
    private double maxX;
    private double maxY;
    private net.sourceforge.plantuml.ColorParam border;

    public void moveSvek(double, double)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        d0 := @parameter0: double;

        d7 := @parameter1: double;

        $d1 = r0.<net.sourceforge.plantuml.svek.Cluster: double xTitle>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.svek.Cluster: double xTitle> = $d2;

        $d3 = r0.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d4 = $d3 + d0;

        r0.<net.sourceforge.plantuml.svek.Cluster: double minX> = $d4;

        $d5 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d6 = $d5 + d0;

        r0.<net.sourceforge.plantuml.svek.Cluster: double maxX> = $d6;

        $d8 = r0.<net.sourceforge.plantuml.svek.Cluster: double yTitle>;

        $d9 = $d8 + d7;

        r0.<net.sourceforge.plantuml.svek.Cluster: double yTitle> = $d9;

        $d10 = r0.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d11 = $d10 + d7;

        r0.<net.sourceforge.plantuml.svek.Cluster: double minY> = $d11;

        $d12 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxY>;

        $d13 = $d12 + d7;

        r0.<net.sourceforge.plantuml.svek.Cluster: double maxY> = $d13;

        return;
    }

    private java.util.Set entityPositionsExceptNormal()
    {
        java.util.EnumSet r0;
        net.sourceforge.plantuml.svek.Cluster r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.util.Set $r4;
        java.lang.Object $r5;
        net.sourceforge.plantuml.svek.SvekNode r6;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r7, $r8, $r9;

        r1 := @this: net.sourceforge.plantuml.svek.Cluster;

        r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/cucadiagram/EntityPosition;");

        $r2 = r1.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.svek.SvekNode) $r5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $r8 = <net.sourceforge.plantuml.cucadiagram.EntityPosition: net.sourceforge.plantuml.cucadiagram.EntityPosition NORMAL>;

        if $r7 == $r8 goto label2;

        $r9 = virtualinvoke r6.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r0);

        return $r4;
    }

    public void <init>(net.sourceforge.plantuml.svek.ColorSequence, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.svek.ColorSequence r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.cucadiagram.IGroup r3;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.svek.ColorSequence;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.cucadiagram.IGroup;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void <init>(net.sourceforge.plantuml.svek.Cluster,net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IGroup)>(null, r1, r2, r3);

        return;
    }

    private void <init>(net.sourceforge.plantuml.svek.Cluster, net.sourceforge.plantuml.svek.ColorSequence, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.svek.Cluster r0, r4;
        java.util.ArrayList $r1, $r2;
        net.sourceforge.plantuml.cucadiagram.IGroup r3;
        net.sourceforge.plantuml.graphic.USymbol $r5, $r10;
        net.sourceforge.plantuml.svek.ColorSequence r6;
        int $i0, $i1;
        net.sourceforge.plantuml.graphic.color.Colors $r7;
        net.sourceforge.plantuml.ISkinParam r8, $r9;
        net.sourceforge.plantuml.ColorParam $r11;
        java.lang.IllegalStateException $r12;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r4 := @parameter0: net.sourceforge.plantuml.svek.Cluster;

        r6 := @parameter1: net.sourceforge.plantuml.svek.ColorSequence;

        r8 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter3: net.sourceforge.plantuml.cucadiagram.IGroup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List children> = $r2;

        if r3 != null goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label1:
        r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.Cluster parentCluster> = r4;

        r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group> = r3;

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r5 == null goto label2;

        $r10 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.ColorParam getColorParamBorder()>();

        r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ColorParam border> = $r11;

     label2:
        $i0 = virtualinvoke r6.<net.sourceforge.plantuml.svek.ColorSequence: int getValue()>();

        r0.<net.sourceforge.plantuml.svek.Cluster: int color> = $i0;

        $i1 = virtualinvoke r6.<net.sourceforge.plantuml.svek.ColorSequence: int getValue()>();

        r0.<net.sourceforge.plantuml.svek.Cluster: int colorTitle> = $i1;

        $r7 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r9 = virtualinvoke $r7.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ISkinParam mute(net.sourceforge.plantuml.ISkinParam)>(r8);

        r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam> = $r9;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        net.sourceforge.plantuml.svek.Cluster r1;
        java.lang.String $r2, $r7;
        net.sourceforge.plantuml.cucadiagram.IGroup $r5;

        r1 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final net.sourceforge.plantuml.svek.Cluster getParentCluster()
    {
        net.sourceforge.plantuml.svek.Cluster r0, $r1;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.Cluster parentCluster>;

        return $r1;
    }

    public void addNode(net.sourceforge.plantuml.svek.SvekNode)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.svek.SvekNode r1, $r4;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.svek.SvekNode;

        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.svek.SvekNode) $r3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        virtualinvoke r1.<net.sourceforge.plantuml.svek.SvekNode: void setCluster(net.sourceforge.plantuml.svek.Cluster)>(r0);

        return;
    }

    public final java.util.List getNodes()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    private java.util.List getNodesOrderedTop(java.util.Collection)
    {
        java.util.ArrayList $r0;
        java.util.HashSet $r2;
        java.util.HashMap $r4;
        net.sourceforge.plantuml.svek.Cluster r6;
        java.util.List $r7;
        boolean $z0, $z1, $z2, $z3, $z6;
        java.util.Collection r8;
        java.lang.Object $r9, $r12, $r16, $r19;
        java.lang.String $r10, $r11, $r15, $r20, $r24;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r13, $r14, $r17, $r18, $r22, $r23;
        java.util.Iterator r25, r27;
        net.sourceforge.plantuml.svek.SvekNode r26, r29, r30;
        net.sourceforge.plantuml.svek.SvekLine r28;

        r6 := @this: net.sourceforge.plantuml.svek.Cluster;

        r8 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r7 = r6.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        r25 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r19 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (net.sourceforge.plantuml.svek.SvekNode) $r19;

        $r20 = virtualinvoke r26.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r26);

        $z3 = virtualinvoke r26.<net.sourceforge.plantuml.svek.SvekNode: boolean isTop()>();

        if $z3 == 0 goto label2;

        $r22 = virtualinvoke r26.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $r23 = <net.sourceforge.plantuml.cucadiagram.EntityPosition: net.sourceforge.plantuml.cucadiagram.EntityPosition NORMAL>;

        if $r22 != $r23 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r26);

        $r24 = virtualinvoke r26.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r24);

     label2:
        goto label1;

     label3:
        r27 = interfaceinvoke r8.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r9 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (net.sourceforge.plantuml.svek.SvekLine) $r9;

        $r10 = virtualinvoke r28.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getStartUidPrefix()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z2 == 0 goto label5;

        $r15 = virtualinvoke r28.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getEndUidPrefix()>();

        $r16 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        r29 = (net.sourceforge.plantuml.svek.SvekNode) $r16;

        if r29 == null goto label5;

        $r17 = virtualinvoke r29.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $r18 = <net.sourceforge.plantuml.cucadiagram.EntityPosition: net.sourceforge.plantuml.cucadiagram.EntityPosition NORMAL>;

        if $r17 != $r18 goto label5;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, r29);

     label5:
        $z6 = virtualinvoke r28.<net.sourceforge.plantuml.svek.SvekLine: boolean isInverted()>();

        if $z6 == 0 goto label6;

        $r11 = virtualinvoke r28.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getStartUidPrefix()>();

        $r12 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r30 = (net.sourceforge.plantuml.svek.SvekNode) $r12;

        if r30 == null goto label6;

        $r13 = virtualinvoke r30.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $r14 = <net.sourceforge.plantuml.cucadiagram.EntityPosition: net.sourceforge.plantuml.cucadiagram.EntityPosition NORMAL>;

        if $r13 != $r14 goto label6;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, r30);

     label6:
        goto label4;

     label7:
        return $r0;
    }

    private java.util.List getNodesOrderedWithoutTop(java.util.Collection)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.svek.Cluster r1;
        java.util.List $r2;
        java.util.HashSet $r4;
        java.util.HashMap $r6;
        java.util.Collection r8;
        boolean $z0, $z1, $z4, $z6, $z7;
        java.lang.Object $r9, $r12, $r14, $r15;
        java.lang.String $r10, $r11, $r13, $r18, $r20;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r16, $r17;
        java.util.Iterator r21, r23;
        net.sourceforge.plantuml.svek.SvekNode r22, r25, r26;
        net.sourceforge.plantuml.svek.SvekLine r24;

        r1 := @this: net.sourceforge.plantuml.svek.Cluster;

        r8 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r21 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label4;

        $r15 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (net.sourceforge.plantuml.svek.SvekNode) $r15;

        $r16 = virtualinvoke r22.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $r17 = <net.sourceforge.plantuml.cucadiagram.EntityPosition: net.sourceforge.plantuml.cucadiagram.EntityPosition NORMAL>;

        if $r16 == $r17 goto label2;

        interfaceinvoke r21.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r18 = virtualinvoke r22.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r22);

        $z4 = virtualinvoke r22.<net.sourceforge.plantuml.svek.SvekNode: boolean isTop()>();

        if $z4 == 0 goto label3;

        $r20 = virtualinvoke r22.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r20);

        interfaceinvoke r21.<java.util.Iterator: void remove()>();

     label3:
        goto label1;

     label4:
        r23 = interfaceinvoke r8.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (net.sourceforge.plantuml.svek.SvekLine) $r9;

        $r10 = virtualinvoke r24.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getStartUidPrefix()>();

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z1 == 0 goto label6;

        $r13 = virtualinvoke r24.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getEndUidPrefix()>();

        $r14 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r25 = (net.sourceforge.plantuml.svek.SvekNode) $r14;

        if r25 == null goto label6;

        interfaceinvoke $r0.<java.util.List: boolean remove(java.lang.Object)>(r25);

     label6:
        $z7 = virtualinvoke r24.<net.sourceforge.plantuml.svek.SvekLine: boolean isInverted()>();

        if $z7 == 0 goto label7;

        $r11 = virtualinvoke r24.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getStartUidPrefix()>();

        $r12 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r26 = (net.sourceforge.plantuml.svek.SvekNode) $r12;

        if r26 == null goto label7;

        interfaceinvoke $r0.<java.util.List: boolean remove(java.lang.Object)>(r26);

     label7:
        goto label5;

     label8:
        return $r0;
    }

    public final java.util.List getChildren()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List children>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.svek.Cluster createChild(int, int, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.svek.ColorSequence, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.svek.Cluster $r0, r1;
        net.sourceforge.plantuml.svek.ColorSequence r2;
        net.sourceforge.plantuml.ISkinParam r3;
        net.sourceforge.plantuml.cucadiagram.IGroup r4;
        int i0, i1;
        net.sourceforge.plantuml.graphic.TextBlock r6, r7;
        java.util.List $r8;

        r1 := @this: net.sourceforge.plantuml.svek.Cluster;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        r7 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter4: net.sourceforge.plantuml.svek.ColorSequence;

        r3 := @parameter5: net.sourceforge.plantuml.ISkinParam;

        r4 := @parameter6: net.sourceforge.plantuml.cucadiagram.IGroup;

        $r0 = new net.sourceforge.plantuml.svek.Cluster;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.Cluster: void <init>(net.sourceforge.plantuml.svek.Cluster,net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.IGroup)>(r1, r2, r3, r4);

        $r0.<net.sourceforge.plantuml.svek.Cluster: int titleAndAttributeWidth> = i0;

        $r0.<net.sourceforge.plantuml.svek.Cluster: int titleAndAttributeHeight> = i1;

        $r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle> = r6;

        $r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock zstereo> = r7;

        $r8 = r1.<net.sourceforge.plantuml.svek.Cluster: java.util.List children>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    public final java.util.Set getGroups()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.cucadiagram.IGroup $r1;
        java.util.Set $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1);

        return $r2;
    }

    public final int getTitleAndAttributeWidth()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int titleAndAttributeWidth>;

        return $i0;
    }

    public final int getTitleAndAttributeHeight()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int titleAndAttributeHeight>;

        return $i0;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $d1 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d0 = r0.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public double getMinX()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $d0 = r0.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        return $d0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0;
        net.sourceforge.plantuml.svek.Cluster r1;
        double $d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d3 = r1.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d2 = r1.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d1 = r1.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d0 = r1.<net.sourceforge.plantuml.svek.Cluster: double maxY>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d3, $d2, $d1, $d0);

        return $r0;
    }

    public void setTitlePosition(double, double)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0.<net.sourceforge.plantuml.svek.Cluster: double xTitle> = d0;

        r0.<net.sourceforge.plantuml.svek.Cluster: double yTitle> = d1;

        return;
    }

    private static net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ColorParam, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.ISkinParam r0;
        net.sourceforge.plantuml.cucadiagram.Stereotype r1;
        net.sourceforge.plantuml.ColorParam[] $r2;
        net.sourceforge.plantuml.ColorParam r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;

        r3 := @parameter0: net.sourceforge.plantuml.ColorParam;

        r0 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r1 := @parameter2: net.sourceforge.plantuml.cucadiagram.Stereotype;

        $r2 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>(r0, r1, $r2);

        return $r4;
    }

    public static net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.style.SName, net.sourceforge.plantuml.graphic.USymbol)
    {
        net.sourceforge.plantuml.style.SName r0, $r1, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19;
        net.sourceforge.plantuml.graphic.USymbol r2;
        net.sourceforge.plantuml.style.SName[] $r3, $r9, $r14;
        net.sourceforge.plantuml.style.StyleSignature $r8, $r13, $r20;

        r0 := @parameter0: net.sourceforge.plantuml.style.SName;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.USymbol;

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        if r0 != $r1 goto label1;

        $r14 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r15 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r14[0] = $r15;

        $r16 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r14[1] = $r16;

        $r17 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r14[2] = $r17;

        $r18 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName state>;

        $r14[3] = $r18;

        $r19 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName group>;

        $r14[4] = $r19;

        $r20 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r14);

        return $r20;

     label1:
        if r2 != null goto label2;

        $r9 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r10 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r9[0] = $r10;

        $r11 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r9[1] = $r11;

        $r9[2] = r0;

        $r12 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName group>;

        $r9[3] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r9);

        return $r13;

     label2:
        $r3 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r3[0] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r3[1] = $r5;

        $r3[2] = r0;

        $r6 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName group>;

        $r3[3] = $r6;

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.style.SName getSName()>();

        $r3[4] = $r7;

        $r8 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r3);

        return $r8;
    }

    public static net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionStateGroup(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.cucadiagram.Stereotype r0;
        net.sourceforge.plantuml.style.SName[] $r1, $r9;
        net.sourceforge.plantuml.style.SName $r2, $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r14;
        net.sourceforge.plantuml.style.StyleSignature $r7, $r8, $r15;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        if r0 != null goto label1;

        $r9 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r10 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r9[0] = $r10;

        $r11 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r9[1] = $r11;

        $r12 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r9[2] = $r12;

        $r13 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName state>;

        $r9[3] = $r13;

        $r14 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName group>;

        $r9[4] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r9);

        return $r15;

     label1:
        $r1 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r1[0] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r1[1] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r1[2] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName state>;

        $r1[3] = $r5;

        $r6 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName group>;

        $r1[4] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r1);

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r0);

        return $r8;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.UmlDiagramType, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.cucadiagram.IGroup $r1, $r2, $r4, $r7, $r9, $r14, $r21, $r23, $r24, $r27, $r30, $r32, $r35, $r39, $r55, $r56, $r59, $r66, $r69, $r73, $r76, $r79, $r83, $r87, $r91, $r93, $r95, $r102, $r113, $r136;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8;
        java.lang.String r3, $r120, $r134;
        net.sourceforge.plantuml.graphic.USymbol $r5, $r10, $r28, $r31, $r33, $r40, $r60, $r89, $r92, $r125;
        net.sourceforge.plantuml.ISkinParam r6, $r16, $r19, $r36, $r63, $r81, $r85, $r98;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r8, $r17, $r25, $r37, $r58, $r82, $r86, $r88, $r96;
        net.sourceforge.plantuml.graphic.SkinParameter $r11, $r34, $r90;
        net.sourceforge.plantuml.UmlDiagramType r12, $r13, $r20, $r110, $r129;
        net.sourceforge.plantuml.ColorParam $r15, $r22, $r57, $r80, $r84;
        java.util.Set $r18;
        int $i0;
        net.sourceforge.plantuml.style.SName $r26, $r61, $r94;
        net.sourceforge.plantuml.graphic.TextBlock $r29, $r41, $r42, $r47;
        net.sourceforge.plantuml.svek.ClusterDecoration $r38;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, $d14, $d15, $d16;
        net.sourceforge.plantuml.AlignmentParam $r44;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r45, $r46;
        net.sourceforge.plantuml.ugraphic.URectangle $r48;
        net.sourceforge.plantuml.ugraphic.UBackground $r49;
        net.sourceforge.plantuml.ugraphic.UGraphic $r50, $r52, $r54, r123;
        net.sourceforge.plantuml.ugraphic.UStroke $r51, $r68, r138, r141;
        net.sourceforge.plantuml.ugraphic.UTranslate $r53;
        net.sourceforge.plantuml.style.StyleSignature $r62, $r97, r127;
        net.sourceforge.plantuml.style.StyleBuilder $r64, $r99;
        net.sourceforge.plantuml.style.Style $r65, r124;
        net.sourceforge.plantuml.graphic.color.Colors $r67, $r70, $r74, $r77, $r103, $r114;
        net.sourceforge.plantuml.graphic.color.ColorType $r71, $r75, $r104, $r115;
        net.sourceforge.plantuml.ugraphic.color.HColor $r72, $r105, r128, r140, r142, r143;
        net.sourceforge.plantuml.graphic.StringBounder $r78;
        net.sourceforge.plantuml.style.PName $r100, $r106, $r111;
        net.sourceforge.plantuml.style.Value $r101, $r107, $r112;
        net.sourceforge.plantuml.api.ThemeStyle $r108;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r109;
        net.sourceforge.plantuml.ugraphic.UComment $r116;
        java.lang.StringBuilder $r117, $r118, $r119, $r131, $r132, $r133;
        java.lang.Throwable $r121;
        net.sourceforge.plantuml.ugraphic.UGroupType $r130;
        java.util.Map $r135;
        net.sourceforge.plantuml.Url r137;
        net.sourceforge.plantuml.svek.PackageStyle r139;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r123 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r12 := @parameter1: net.sourceforge.plantuml.UmlDiagramType;

        r6 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.cucadiagram.IGroup: boolean isHidden()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.cucadiagram.IGroup: java.lang.String getCodeGetName()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("##");

        if $z1 != 0 goto label02;

        $r116 = new net.sourceforge.plantuml.ugraphic.UComment;

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cluster ");

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r116.<net.sourceforge.plantuml.ugraphic.UComment: void <init>(java.lang.String)>($r120);

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r116);

     label02:
        r124 = null;

        $z2 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z2 == 0 goto label09;

        $r91 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r92 = interfaceinvoke $r91.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r92 != null goto label03;

        $r125 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol PACKAGE>;

        goto label04;

     label03:
        $r93 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r125 = interfaceinvoke $r93.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

     label04:
        $r94 = virtualinvoke r12.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        r127 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.style.SName,net.sourceforge.plantuml.graphic.USymbol)>($r94, $r125);

        $r95 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r96 = interfaceinvoke $r95.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r97 = virtualinvoke r127.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r96);

        $r98 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r99 = interfaceinvoke $r98.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r124 = virtualinvoke $r97.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r99);

        $r100 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r101 = virtualinvoke r124.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r100);

        d12 = interfaceinvoke $r101.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r102 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r103 = interfaceinvoke $r102.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r104 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        $r105 = virtualinvoke $r103.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r104);

        if $r105 == null goto label05;

        $r113 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r114 = interfaceinvoke $r113.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r115 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r128 = virtualinvoke $r114.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r115);

        goto label06;

     label05:
        $r106 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r107 = virtualinvoke r124.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r106);

        $r108 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r109 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r128 = interfaceinvoke $r107.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r108, $r109);

     label06:
        $r110 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if r12 != $r110 goto label07;

        $r111 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName RoundCorner>;

        $r112 = virtualinvoke r124.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r111);

        d13 = interfaceinvoke $r112.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        goto label08;

     label07:
        d13 = 25.0;

     label08:
        goto label18;

     label09:
        $r4 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r5 != null goto label12;

        $r87 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r88 = interfaceinvoke $r87.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r89 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol PACKAGE>;

        $r90 = virtualinvoke $r89.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $z5 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: boolean shadowing2(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.graphic.SkinParameter)>($r88, $r90);

        if $z5 == 0 goto label10;

        $d14 = 3.0;

        goto label11;

     label10:
        $d14 = 0.0;

     label11:
        d12 = $d14;

        goto label15;

     label12:
        $r7 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r9 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $z3 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: boolean shadowing2(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.graphic.SkinParameter)>($r8, $r11);

        if $z3 == 0 goto label13;

        $d15 = 3.0;

        goto label14;

     label13:
        $d15 = 0.0;

     label14:
        d12 = $d15;

     label15:
        d13 = 25.0;

        $r129 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if r12 != $r129 goto label16;

        $r84 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateBorder>;

        $r85 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r83 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r86 = interfaceinvoke $r83.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        r128 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r84, $r85, $r86);

        goto label18;

     label16:
        $r13 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType ACTIVITY>;

        if r12 != $r13 goto label17;

        $r80 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam packageBorder>;

        $r81 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r79 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r82 = interfaceinvoke $r79.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        r128 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r80, $r81, $r82);

        goto label18;

     label17:
        $r15 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam packageBorder>;

        $r16 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r14 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r17 = interfaceinvoke $r14.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        r128 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r15, $r16, $r17);

     label18:
        $r130 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r131 = new java.lang.StringBuilder;

        specialinvoke $r131.<java.lang.StringBuilder: void <init>()>();

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cluster_");

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.String toString()>();

        $r135 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r130, $r134);

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r135);

        $r136 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r137 = interfaceinvoke $r136.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.Url getUrl99()>();

        if r137 == null goto label19;

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>(r137);

     label19:
        $r18 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.Set entityPositionsExceptNormal()>();

        $i0 = interfaceinvoke $r18.<java.util.Set: int size()>();

        if $i0 <= 0 goto label20;

        $r78 = interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void manageEntryExitPoint(net.sourceforge.plantuml.graphic.StringBounder)>($r78);

     label20:
        $r19 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z4 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r12);

        if $z4 == 0 goto label23;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void drawSwinLinesState(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.color.HColor)>(r123, r128);

     label21:
        if r137 == null goto label22;

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label22:
        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;

     label23:
        $r20 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if r12 != $r20 goto label24;

        $z6 = 1;

        goto label25;

     label24:
        $z6 = 0;

     label25:
        if $z6 == 0 goto label30;

        $r59 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r60 = interfaceinvoke $r59.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r60 != null goto label30;

        $r61 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r62 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.style.SName,net.sourceforge.plantuml.graphic.USymbol)>($r61, null);

        $r63 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r64 = interfaceinvoke $r63.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r65 = virtualinvoke $r62.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r64);

        r138 = virtualinvoke $r65.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $r66 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r67 = interfaceinvoke $r66.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r68 = virtualinvoke $r67.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        if $r68 == null goto label26;

        $r76 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r77 = interfaceinvoke $r76.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        r138 = virtualinvoke $r77.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

     label26:
        $r69 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r70 = interfaceinvoke $r69.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r71 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        $r72 = virtualinvoke $r70.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r71);

        if $r72 == null goto label27;

        $r73 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r74 = interfaceinvoke $r73.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r75 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r128 = virtualinvoke $r74.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r75);

     label27:
        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void drawUState(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UStroke,net.sourceforge.plantuml.UmlDiagramType,double,double)>(r123, r128, r6, r138, r12, d13, d12);

     label28:
        if r137 == null goto label29;

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label29:
        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;

     label30:
        $r21 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r139 = interfaceinvoke $r21.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.svek.PackageStyle getPackageStyle()>();

        if r139 != null goto label31;

        r139 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.svek.PackageStyle packageStyle()>();

     label31:
        $r22 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ColorParam border>;

        if $r22 == null goto label32;

        $r57 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ColorParam border>;

        $r56 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r58 = interfaceinvoke $r56.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        r140 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r57, $r58, 0);

        if r140 == null goto label32;

        r128 = r140;

     label32:
        $z8 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z8 == 0 goto label33;

        $r55 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r141 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.UStroke getStrokeInternal(net.sourceforge.plantuml.cucadiagram.IGroup,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>($r55, r6, r124);

        goto label34;

     label33:
        $r23 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r141 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.UStroke getStrokeInternal(net.sourceforge.plantuml.cucadiagram.IGroup,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>($r23, r6, null);

     label34:
        r142 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.UmlDiagramType,net.sourceforge.plantuml.style.Style)>(r12, r124);

        $r24 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r25 = interfaceinvoke $r24.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r26 = virtualinvoke r12.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        $r27 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r28 = interfaceinvoke $r27.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        r143 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.style.SName,net.sourceforge.plantuml.graphic.USymbol)>(r142, r6, $r25, $r26, $r28);

        $r29 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        if $r29 != null goto label35;

        $r47 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock zstereo>;

        if $r47 == null goto label40;

     label35:
        $r30 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r31 != null goto label36;

        $d16 = 0.0;

        goto label37;

     label36:
        $r32 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r33 = interfaceinvoke $r32.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r34 = virtualinvoke $r33.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $r36 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r35 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r37 = interfaceinvoke $r35.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $d16 = virtualinvoke $r34.<net.sourceforge.plantuml.graphic.SkinParameter: double getRoundCorner(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r36, $r37);

     label37:
        $r38 = new net.sourceforge.plantuml.svek.ClusterDecoration;

        $r39 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r40 = interfaceinvoke $r39.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r42 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        $r41 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock zstereo>;

        $d3 = r0.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d2 = r0.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d1 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d0 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxY>;

        specialinvoke $r38.<net.sourceforge.plantuml.svek.ClusterDecoration: void <init>(net.sourceforge.plantuml.svek.PackageStyle,net.sourceforge.plantuml.graphic.USymbol,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,double,double,double,double,net.sourceforge.plantuml.ugraphic.UStroke)>(r139, $r40, $r42, $r41, $d3, $d2, $d1, $d0, r141);

        $r44 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam packageTitleAlignment>;

        $r45 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment(net.sourceforge.plantuml.AlignmentParam,net.sourceforge.plantuml.skin.ArrowDirection,boolean,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r44, null, 0, null);

        $r46 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getStereotypeAlignment()>();

        virtualinvoke $r38.<net.sourceforge.plantuml.svek.ClusterDecoration: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,double,double,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r123, r143, r128, d12, $d16, $r45, $r46);

     label38:
        if r137 == null goto label39;

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label39:
        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;

     label40:
        $r48 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d5 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d4 = r0.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d9 = $d5 - $d4;

        $d7 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxY>;

        $d6 = r0.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d8 = $d7 - $d6;

        specialinvoke $r48.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d9, $d8);

        virtualinvoke $r48.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(d12);

        $r49 = interfaceinvoke r143.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r50 = interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r49);

        r123 = interfaceinvoke $r50.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r128);

        $r51 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r51.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(2.0);

        $r52 = interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r51);

        $r53 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d11 = r0.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d10 = r0.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        specialinvoke $r53.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d11, $d10);

        $r54 = interfaceinvoke $r52.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r53);

        interfaceinvoke $r54.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r48);

     label41:
        if r137 == null goto label42;

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label42:
        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        goto label46;

     label43:
        $r121 := @caughtexception;

     label44:
        if r137 == null goto label45;

        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label45:
        interfaceinvoke r123.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        throw $r121;

     label46:
        return;

        catch java.lang.Throwable from label19 to label21 with label43;
        catch java.lang.Throwable from label23 to label28 with label43;
        catch java.lang.Throwable from label30 to label38 with label43;
        catch java.lang.Throwable from label40 to label41 with label43;
        catch java.lang.Throwable from label43 to label44 with label43;
    }

    public static net.sourceforge.plantuml.ugraphic.UStroke getStrokeInternal(net.sourceforge.plantuml.cucadiagram.IGroup, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.cucadiagram.IGroup r0;
        net.sourceforge.plantuml.graphic.color.Colors r1;
        net.sourceforge.plantuml.ugraphic.UStroke $r2, $r7, $r13, $r14, $r15;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.graphic.USymbol $r4, $r8, $r9, $r10;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r5, $r12;
        net.sourceforge.plantuml.ISkinParam r6;
        net.sourceforge.plantuml.graphic.SkinParameter $r11;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IGroup;

        r6 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.style.Style;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        if $r2 == null goto label1;

        $r15 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        return $r15;

     label1:
        if r3 == null goto label2;

        $r14 = virtualinvoke r3.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        return $r14;

     label2:
        $r4 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r4 == null goto label3;

        $r8 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r9 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol PACKAGE>;

        if $r8 == $r9 goto label3;

        $r10 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $r12 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r13 = virtualinvoke $r11.<net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.ugraphic.UStroke getStroke(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r6, $r12);

        return $r13;

     label3:
        $r5 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.ugraphic.UStroke getForcedStroke(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ISkinParam)>($r5, r6);

        return $r7;
    }

    public void manageEntryExitPoint(net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.util.ArrayList $r0, $r2;
        net.sourceforge.plantuml.svek.Cluster r4, r21;
        java.util.List $r5, $r6;
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.FrontierCalculator $r7;
        net.sourceforge.plantuml.svek.ClusterPosition $r8, $r11, $r15, $r17, r23;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.graphic.StringBounder r9;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        java.lang.Object $r10, $r12;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r13, $r14;
        java.awt.geom.Point2D $r16;
        java.util.Iterator r18, r20;
        net.sourceforge.plantuml.svek.SvekNode r19;
        net.sourceforge.plantuml.graphic.TextBlock $r25;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r26;

        r4 := @this: net.sourceforge.plantuml.svek.Cluster;

        r9 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r5 = r4.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        r18 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (net.sourceforge.plantuml.svek.SvekNode) $r12;

        $r13 = virtualinvoke r19.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $r14 = <net.sourceforge.plantuml.cucadiagram.EntityPosition: net.sourceforge.plantuml.cucadiagram.EntityPosition NORMAL>;

        if $r13 != $r14 goto label2;

        $r17 = virtualinvoke r19.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r17);

        goto label3;

     label2:
        $r15 = virtualinvoke r19.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.svek.ClusterPosition: java.awt.geom.Point2D getPointCenter()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r16);

     label3:
        goto label1;

     label4:
        $r6 = r4.<net.sourceforge.plantuml.svek.Cluster: java.util.List children>;

        r20 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (net.sourceforge.plantuml.svek.Cluster) $r10;

        $r11 = virtualinvoke r21.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        goto label5;

     label6:
        $r7 = new net.sourceforge.plantuml.svek.FrontierCalculator;

        $r8 = virtualinvoke r4.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        specialinvoke $r7.<net.sourceforge.plantuml.svek.FrontierCalculator: void <init>(net.sourceforge.plantuml.svek.ClusterPosition,java.util.Collection,java.util.Collection)>($r8, $r0, $r2);

        $i0 = r4.<net.sourceforge.plantuml.svek.Cluster: int titleAndAttributeHeight>;

        if $i0 <= 0 goto label7;

        $i1 = r4.<net.sourceforge.plantuml.svek.Cluster: int titleAndAttributeWidth>;

        if $i1 <= 0 goto label7;

        $i2 = r4.<net.sourceforge.plantuml.svek.Cluster: int titleAndAttributeWidth>;

        $i3 = $i2 + 10;

        $d1 = (double) $i3;

        virtualinvoke $r7.<net.sourceforge.plantuml.svek.FrontierCalculator: void ensureMinWidth(double)>($d1);

     label7:
        r23 = virtualinvoke $r7.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition getSuggestedPosition()>();

        $d2 = r4.<net.sourceforge.plantuml.svek.Cluster: double xTitle>;

        $d3 = virtualinvoke r23.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $d4 = r4.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d5 = $d3 - $d4;

        $d6 = virtualinvoke r23.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $d7 = r4.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d8 = $d6 - $d7;

        $d9 = $d5 + $d8;

        $d10 = $d9 / 2.0;

        $d11 = $d2 + $d10;

        r4.<net.sourceforge.plantuml.svek.Cluster: double xTitle> = $d11;

        $d12 = virtualinvoke r23.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        r4.<net.sourceforge.plantuml.svek.Cluster: double minX> = $d12;

        $d13 = virtualinvoke r23.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinY()>();

        r4.<net.sourceforge.plantuml.svek.Cluster: double minY> = $d13;

        $d14 = virtualinvoke r23.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        r4.<net.sourceforge.plantuml.svek.Cluster: double maxX> = $d14;

        $d15 = virtualinvoke r23.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxY()>();

        r4.<net.sourceforge.plantuml.svek.Cluster: double maxY> = $d15;

        $d16 = r4.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d17 = $d16 + 5.0;

        r4.<net.sourceforge.plantuml.svek.Cluster: double yTitle> = $d17;

        $r25 = r4.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        d0 = virtualinvoke $r26.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d18 = r4.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d19 = r4.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d20 = r4.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d21 = $d19 - $d20;

        $d22 = $d21 - d0;

        $d23 = $d22 / 2.0;

        $d24 = $d18 + $d23;

        r4.<net.sourceforge.plantuml.svek.Cluster: double xTitle> = $d24;

        return;
    }

    private void drawSwinLinesState(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1, $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.ULine r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r6, $r9;
        net.sourceforge.plantuml.ugraphic.UGraphic $r5, $r7, $r10, r11, r12;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r11 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        if $r1 == null goto label1;

        $r8 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        $d5 = r0.<net.sourceforge.plantuml.svek.Cluster: double xTitle>;

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d5);

        $r10 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        interfaceinvoke $r8.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r10);

     label1:
        $d1 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxY>;

        $d0 = r0.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d2 = $d1 - $d0;

        r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>($d2);

        r12 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r3);

        $d3 = r0.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d3);

        $r5 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        interfaceinvoke $r5.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r2);

        $d4 = r0.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        $r7 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r2);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getColorLegacy(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ColorParam, net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.skin.rose.Rose $r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.cucadiagram.Stereotype r2;
        net.sourceforge.plantuml.ColorParam[] $r3;
        net.sourceforge.plantuml.ColorParam r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r5;
        net.sourceforge.plantuml.svek.Cluster r6;

        r6 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r4 := @parameter1: net.sourceforge.plantuml.ColorParam;

        r2 := @parameter2: net.sourceforge.plantuml.cucadiagram.Stereotype;

        $r0 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r3 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r3[0] = r4;

        $r5 = virtualinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>(r1, r2, $r3);

        return $r5;
    }

    private void drawUState(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ugraphic.UStroke, net.sourceforge.plantuml.UmlDiagramType, double, double)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.Cluster r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, $d9, $d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d26, d27;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r5, r17, $r26, $r33;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, $r25, $r29, $r31, $r34;
        net.sourceforge.plantuml.graphic.StringBounder $r6, $r18;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r7, $r19;
        net.sourceforge.plantuml.cucadiagram.IGroup $r8, $r16, $r27, $r38;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r9, r28, $r40;
        net.sourceforge.plantuml.style.StyleSignature $r10;
        net.sourceforge.plantuml.ISkinParam $r11, r15;
        net.sourceforge.plantuml.style.StyleBuilder $r12;
        net.sourceforge.plantuml.style.Style r13;
        net.sourceforge.plantuml.UmlDiagramType r14;
        boolean $z0, $z2, $z3, $z4;
        byte $b0, $b1, $b2, $b3;
        net.sourceforge.plantuml.svek.RoundedContainer $r20;
        net.sourceforge.plantuml.ugraphic.color.HColor r21, r41, r42;
        net.sourceforge.plantuml.ugraphic.UStroke r22;
        net.sourceforge.plantuml.ugraphic.UTranslate $r24, $r30, $r32;
        java.io.PrintStream $r36;
        net.sourceforge.plantuml.ColorParam $r37, $r39;

        r1 := @this: net.sourceforge.plantuml.svek.Cluster;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r21 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r15 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r22 := @parameter3: net.sourceforge.plantuml.ugraphic.UStroke;

        r14 := @parameter4: net.sourceforge.plantuml.UmlDiagramType;

        d11 := @parameter5: double;

        d12 := @parameter6: double;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d0 = r1.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d5 = $d1 - $d0;

        $d3 = r1.<net.sourceforge.plantuml.svek.Cluster: double maxY>;

        $d2 = r1.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d4 = $d3 - $d2;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d5, $d4);

        $r3 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        if $r3 != null goto label01;

        d27 = 0.0;

        goto label02;

     label01:
        $r5 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        $r6 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r7 = interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $d6 = virtualinvoke $r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d7 = $d6 + 5.0;

        d27 = $d7 + 5.0;

     label02:
        $r8 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionStateGroup(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r9);

        $r11 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r13 = virtualinvoke $r10.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r12);

        r41 = specialinvoke r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.UmlDiagramType,net.sourceforge.plantuml.style.Style)>(r14, r13);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 != 0 goto label03;

        if r41 != null goto label03;

        $r39 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateBackground>;

        $r38 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r40 = interfaceinvoke $r38.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        r41 = specialinvoke r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getColorLegacy(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r15, $r39, $r40);

     label03:
        $z3 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z3 != 0 goto label04;

        $r37 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam background>;

        r42 = specialinvoke r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getColorLegacy(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r15, $r37, null);

        goto label05;

     label04:
        r42 = r41;

     label05:
        $r16 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r17 = staticinvoke <net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.graphic.TextBlock stateHeader(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ISkinParam)>($r16, r13, r15);

        $r18 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r19 = interfaceinvoke r17.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r18);

        d8 = virtualinvoke $r19.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d9 = virtualinvoke $r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b0 = $d9 cmpl 0.0;

        if $b0 != 0 goto label06;

        $r36 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>("Cluster::drawUState issue");

        return;

     label06:
        $r20 = new net.sourceforge.plantuml.svek.RoundedContainer;

        $d26 = d27;

        $b1 = d8 cmpl 0.0;

        if $b1 <= 0 goto label07;

        $b3 = 5;

        goto label08;

     label07:
        $b3 = 0;

     label08:
        $d10 = (double) $b3;

        $d13 = d8 + $d10;

        specialinvoke $r20.<net.sourceforge.plantuml.svek.RoundedContainer: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.UStroke,double,double)>($r0, $d26, $d13, r21, r41, r42, r22, d11, d12);

        $r24 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d15 = r1.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d14 = r1.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d15, $d14);

        $r25 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        virtualinvoke $r20.<net.sourceforge.plantuml.svek.RoundedContainer: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r25);

        $r26 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        if $r26 == null goto label09;

        $r33 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        $r32 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d24 = r1.<net.sourceforge.plantuml.svek.Cluster: double xTitle>;

        $d23 = r1.<net.sourceforge.plantuml.svek.Cluster: double yTitle>;

        specialinvoke $r32.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d24, $d23);

        $r34 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r32);

        interfaceinvoke $r33.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r34);

     label09:
        $b2 = d8 cmpl 0.0;

        if $b2 <= 0 goto label10;

        $r30 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d18 = r1.<net.sourceforge.plantuml.svek.Cluster: double minX>;

        $d22 = $d18 + 5.0;

        $d19 = r1.<net.sourceforge.plantuml.svek.Cluster: double minY>;

        $d20 = $d19 + d27;

        $d21 = $d20 + 2.5;

        specialinvoke $r30.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d22, $d21);

        $r31 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r30);

        interfaceinvoke r17.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r31);

     label10:
        $r27 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r28 = interfaceinvoke $r27.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if r28 == null goto label11;

        $z2 = virtualinvoke r28.<net.sourceforge.plantuml.cucadiagram.Stereotype: boolean isWithOOSymbol()>();

        if $z2 == 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        if $z4 == 0 goto label13;

        $r29 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r21);

        $d17 = r1.<net.sourceforge.plantuml.svek.Cluster: double maxX>;

        $d16 = r1.<net.sourceforge.plantuml.svek.Cluster: double maxY>;

        staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageState: void drawSymbol(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r29, $d17, $d16);

     label13:
        return;
    }

    public void setPosition(double, double, double, double)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        d3 := @parameter3: double;

        r0.<net.sourceforge.plantuml.svek.Cluster: double minX> = d0;

        r0.<net.sourceforge.plantuml.svek.Cluster: double maxX> = d1;

        r0.<net.sourceforge.plantuml.svek.Cluster: double minY> = d2;

        r0.<net.sourceforge.plantuml.svek.Cluster: double maxY> = d3;

        return;
    }

    private net.sourceforge.plantuml.style.Style getStyle(net.sourceforge.plantuml.FontParam, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.FontParam r0;
        net.sourceforge.plantuml.style.SName $r1;
        net.sourceforge.plantuml.style.StyleSignature $r2;
        net.sourceforge.plantuml.ISkinParam r3;
        net.sourceforge.plantuml.style.StyleBuilder $r4;
        net.sourceforge.plantuml.style.Style $r5;
        net.sourceforge.plantuml.svek.Cluster r6;

        r6 := @this: net.sourceforge.plantuml.svek.Cluster;

        r0 := @parameter0: net.sourceforge.plantuml.FontParam;

        r3 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName stateDiagram>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.style.StyleSignature getStyleDefinition(net.sourceforge.plantuml.style.SName)>($r1);

        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r5 = virtualinvoke $r2.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r4);

        return $r5;
    }

    private boolean isThereALinkFromOrToGroup(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.svek.SvekLine r3;
        net.sourceforge.plantuml.svek.Cluster r4;
        net.sourceforge.plantuml.cucadiagram.IGroup $r5;

        r4 := @this: net.sourceforge.plantuml.svek.Cluster;

        r0 := @parameter0: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.svek.SvekLine) $r2;

        $r5 = r4.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.svek.SvekLine: boolean isLinkFromOrTo(net.sourceforge.plantuml.cucadiagram.IEntity)>($r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void printCluster1(java.lang.StringBuilder, java.util.Collection, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.Collection r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.svek.SvekNode r5;
        java.lang.StringBuilder r6;
        net.sourceforge.plantuml.graphic.StringBounder r7;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r6 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.Collection;

        r7 := @parameter2: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List getNodesOrderedTop(java.util.Collection)>(r1);

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.svek.SvekNode) $r4;

        virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekNode: void appendShape(java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>(r6, r7);

        goto label1;

     label2:
        return;
    }

    private java.util.List addProtection(java.util.List, double)
    {
        java.util.ArrayList $r0;
        java.util.List r2;
        java.lang.Object $r3, $r10;
        net.sourceforge.plantuml.svek.IShapePseudo $r4, $r11;
        int $i0, $i1, i2;
        net.sourceforge.plantuml.svek.ShapePseudoImpl $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        double d0;
        net.sourceforge.plantuml.svek.Cluster r12;

        r12 := @this: net.sourceforge.plantuml.svek.Cluster;

        r2 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (net.sourceforge.plantuml.svek.IShapePseudo) $r3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = 1;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i2 >= $i0 goto label2;

        $r5 = new net.sourceforge.plantuml.svek.ShapePseudoImpl;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("psd");

        $i1 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<net.sourceforge.plantuml.svek.ShapePseudoImpl: void <init>(java.lang.String,double,double)>($r9, d0, 5.0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r11 = (net.sourceforge.plantuml.svek.IShapePseudo) $r10;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private double getMaxWidthFromLabelForEntryExit(java.util.List, net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        net.sourceforge.plantuml.svek.IShapePseudo r3;
        net.sourceforge.plantuml.svek.Cluster r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double d0, d1;
        byte $b0;

        r4 := @this: net.sourceforge.plantuml.svek.Cluster;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = -1.7976931348623157E308;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.svek.IShapePseudo) $r2;

        d0 = specialinvoke r4.<net.sourceforge.plantuml.svek.Cluster: double getMaxWidthFromLabelForEntryExit(net.sourceforge.plantuml.svek.IShapePseudo,net.sourceforge.plantuml.graphic.StringBounder)>(r3, r5);

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label2;

        d1 = d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    private double getMaxWidthFromLabelForEntryExit(net.sourceforge.plantuml.svek.IShapePseudo, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.IShapePseudo r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;
        net.sourceforge.plantuml.svek.Cluster r2;

        r2 := @this: net.sourceforge.plantuml.svek.Cluster;

        r0 := @parameter0: net.sourceforge.plantuml.svek.IShapePseudo;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = interfaceinvoke r0.<net.sourceforge.plantuml.svek.IShapePseudo: double getMaxWidthFromLabelForEntryExit(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    private void printRanks(java.lang.String, java.util.List, java.lang.StringBuilder, net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.util.List r0;
        int $i0;
        java.lang.StringBuilder r1, $r2, $r3, $r5, $r6, $r13, $r14, $r15, $r17, $r18, $r28, $r30, $r31;
        java.lang.String r4, $r7, $r16, $r19, $r29, $r32, r38;
        boolean $z0, $z1, $z2, $z3, z4;
        net.sourceforge.plantuml.svek.Cluster r10;
        java.util.Iterator r11, r34, r36;
        java.lang.Object $r21, $r25, $r27;
        net.sourceforge.plantuml.svek.IShapePseudo r22, r35, r37;
        net.sourceforge.plantuml.graphic.StringBounder r26;

        r10 := @this: net.sourceforge.plantuml.svek.Cluster;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.lang.StringBuilder;

        r26 := @parameter3: net.sourceforge.plantuml.graphic.StringBounder;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label8;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{rank=");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r34 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r27 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (net.sourceforge.plantuml.svek.IShapePseudo) $r27;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = interfaceinvoke r35.<net.sourceforge.plantuml.svek.IShapePseudo: java.lang.String getUid()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r1);

        r36 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r25 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (net.sourceforge.plantuml.svek.IShapePseudo) $r25;

        interfaceinvoke r37.<net.sourceforge.plantuml.svek.IShapePseudo: void appendShape(java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>(r1, r26);

        goto label3;

     label4:
        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r1);

        $z2 = specialinvoke r10.<net.sourceforge.plantuml.svek.Cluster: boolean hasPort()>();

        if $z2 == 0 goto label8;

        z4 = 0;

        r38 = null;

        r11 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r21 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r22 = (net.sourceforge.plantuml.svek.IShapePseudo) $r21;

        if z4 == 0 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

     label6:
        z4 = 1;

        r38 = interfaceinvoke r22.<net.sourceforge.plantuml.svek.IShapePseudo: java.lang.String getUid()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        goto label5;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r1);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r16 = specialinvoke r10.<net.sourceforge.plantuml.svek.Cluster: java.lang.String empty()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r1);

     label8:
        return;
    }

    private java.util.List withPositionProtected(net.sourceforge.plantuml.graphic.StringBounder, java.util.Set)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.Set r1;
        java.util.List r2, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double d0, $d2;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: java.util.Set;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List withPosition(java.util.Set)>(r1);

        d0 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: double getMaxWidthFromLabelForEntryExit(java.util.List,net.sourceforge.plantuml.graphic.StringBounder)>(r2, r3);

        $b0 = d0 cmpl 70.0;

        if $b0 <= 0 goto label1;

        $d2 = d0 - 70.0;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List addProtection(java.util.List,double)>(r2, $d2);

        return $r4;

     label1:
        return r2;
    }

    private java.util.List withPosition(java.util.Set)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.svek.Cluster r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        net.sourceforge.plantuml.svek.SvekNode r6;
        java.util.Set r7;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r8;

        r2 := @this: net.sourceforge.plantuml.svek.Cluster;

        r7 := @parameter0: java.util.Set;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.svek.SvekNode) $r5;

        $r8 = virtualinvoke r6.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        $z1 = interfaceinvoke r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private void printClusterEntryExit(java.lang.StringBuilder, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        java.util.EnumSet $r2, $r5, $r7;
        java.util.List $r3, $r6, $r8;
        java.lang.StringBuilder r4;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r4 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = staticinvoke <net.sourceforge.plantuml.cucadiagram.EntityPosition: java.util.EnumSet getInputs()>();

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List withPositionProtected(net.sourceforge.plantuml.graphic.StringBounder,java.util.Set)>(r1, $r2);

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void printRanks(java.lang.String,java.util.List,java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>("source", $r3, r4, r1);

        $r5 = staticinvoke <net.sourceforge.plantuml.cucadiagram.EntityPosition: java.util.EnumSet getSame()>();

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List withPositionProtected(net.sourceforge.plantuml.graphic.StringBounder,java.util.Set)>(r1, $r5);

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void printRanks(java.lang.String,java.util.List,java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>("same", $r6, r4, r1);

        $r7 = staticinvoke <net.sourceforge.plantuml.cucadiagram.EntityPosition: java.util.EnumSet getOutputs()>();

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List withPositionProtected(net.sourceforge.plantuml.graphic.StringBounder,java.util.Set)>(r1, $r7);

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void printRanks(java.lang.String,java.util.List,java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>("sink", $r8, r4, r1);

        return;
    }

    public net.sourceforge.plantuml.svek.SvekNode printCluster2(java.lang.StringBuilder, java.util.Collection, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.svek.DotMode, net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion, net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0, r17;
        java.util.Collection r1;
        java.util.List $r2, $r15;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.ISkinParam $r3;
        java.lang.Object $r4, $r11;
        java.lang.StringBuilder r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.svek.DotMode r7, $r10;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion r8;
        net.sourceforge.plantuml.UmlDiagramType r9;
        net.sourceforge.plantuml.svek.SvekNode r12, r14;
        java.util.Iterator r13, r16;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r5 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.Collection;

        r6 := @parameter2: net.sourceforge.plantuml.graphic.StringBounder;

        r7 := @parameter3: net.sourceforge.plantuml.svek.DotMode;

        r8 := @parameter4: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion;

        r9 := @parameter5: net.sourceforge.plantuml.UmlDiagramType;

        r12 = null;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List getNodesOrderedWithoutTop(java.util.Collection)>(r1);

        r13 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.svek.SvekNode) $r11;

        virtualinvoke r14.<net.sourceforge.plantuml.svek.SvekNode: void appendShape(java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>(r5, r6);

        r12 = r14;

        goto label1;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z1 = interfaceinvoke $r3.<net.sourceforge.plantuml.ISkinParam: boolean useRankSame()>();

        if $z1 == 0 goto label3;

        $r10 = <net.sourceforge.plantuml.svek.DotMode: net.sourceforge.plantuml.svek.DotMode NO_LEFT_RIGHT_AND_XLABEL>;

        if r7 == $r10 goto label3;

        $z2 = interfaceinvoke r8.<net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion: boolean ignoreHorizontalLinks()>();

        if $z2 != 0 goto label3;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void appendRankSame(java.lang.StringBuilder,java.util.Collection)>(r5, r1);

     label3:
        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List getChildren()>();

        r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r4 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (net.sourceforge.plantuml.svek.Cluster) $r4;

        specialinvoke r17.<net.sourceforge.plantuml.svek.Cluster: void printInternal(java.lang.StringBuilder,java.util.Collection,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.svek.DotMode,net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.UmlDiagramType)>(r5, r1, r6, r7, r8, r9);

        goto label4;

     label5:
        return r12;
    }

    private void appendRankSame(java.lang.StringBuilder, java.util.Collection)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.Collection r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String r5;
        java.lang.StringBuilder r6;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r6 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.Collection;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.Set getRankSame(java.util.Collection)>(r1);

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r6);

        goto label1;

     label2:
        return;
    }

    private java.util.Set getRankSame(java.util.Collection)
    {
        java.util.HashSet $r0;
        java.util.Collection r2;
        java.util.Iterator r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.svek.SvekLine r5;
        boolean $z0, $z1, $z2, $z4;
        java.lang.String r6, r7, r9;
        net.sourceforge.plantuml.svek.Cluster r8;

        r8 := @this: net.sourceforge.plantuml.svek.Cluster;

        r2 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.svek.SvekLine) $r4;

        $z0 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekLine: boolean hasEntryPoint()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        r6 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getStartUidPrefix()>();

        r7 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String getEndUidPrefix()>();

        $z1 = specialinvoke r8.<net.sourceforge.plantuml.svek.Cluster: boolean isInCluster(java.lang.String)>(r6);

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r8.<net.sourceforge.plantuml.svek.Cluster: boolean isInCluster(java.lang.String)>(r7);

        if $z2 == 0 goto label3;

        r9 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekLine: java.lang.String rankSame()>();

        if r9 == null goto label3;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r9);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public void fillRankMin(java.util.Set)
    {
        net.sourceforge.plantuml.svek.Cluster r0, r10;
        java.util.List $r1, $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r5;
        java.util.Set r4;
        java.lang.String $r6;
        java.util.Iterator r7, r9;
        net.sourceforge.plantuml.svek.SvekNode r8;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r4 := @parameter0: java.util.Set;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List getNodes()>();

        r7 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.svek.SvekNode) $r5;

        $z2 = virtualinvoke r8.<net.sourceforge.plantuml.svek.SvekNode: boolean isTop()>();

        if $z2 == 0 goto label2;

        $r6 = virtualinvoke r8.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label2:
        goto label1;

     label3:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List getChildren()>();

        r9 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.svek.Cluster) $r3;

        virtualinvoke r10.<net.sourceforge.plantuml.svek.Cluster: void fillRankMin(java.util.Set)>(r4);

        goto label4;

     label5:
        return;
    }

    private boolean isInCluster(java.lang.String)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.svek.SvekNode r4;
        java.lang.String $r5, r6;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: java.util.List nodes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.svek.SvekNode) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.lang.String getClusterId()
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        net.sourceforge.plantuml.svek.Cluster r2;
        int $i0;
        java.lang.String $r4;

        r2 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cluster");

        $i0 = r2.<net.sourceforge.plantuml.svek.Cluster: int color>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getSpecialPointId(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        java.lang.StringBuilder $r0, $r1, $r4;
        net.sourceforge.plantuml.cucadiagram.IEntity r2;
        java.lang.String $r3, $r5;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("za");

        $r3 = interfaceinvoke r2.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getUid()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private boolean protection0(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean protection1(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.cucadiagram.IGroup $r1;
        net.sourceforge.plantuml.graphic.USymbol $r2, $r3;
        net.sourceforge.plantuml.UmlDiagramType r4;
        net.sourceforge.plantuml.ISkinParam $r5;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r4 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        $r3 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol NODE>;

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public java.lang.String getMinPoint(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;
        int $i0;
        java.lang.String $r6;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minPoint");

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int color>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label1:
        return null;
    }

    public java.lang.String getMaxPoint(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;
        int $i0;
        java.lang.String $r6;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxPoint");

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int color>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label1:
        return null;
    }

    private java.lang.String getSourceInPoint(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;
        int $i0;
        java.lang.String $r6;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sourceIn");

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int color>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label1:
        return null;
    }

    private java.lang.String getSinkInPoint(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;
        int $i0;
        java.lang.String $r6;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sinkIn");

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int color>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label1:
        return null;
    }

    private void printInternal(java.lang.StringBuilder, java.util.Collection, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.svek.DotMode, net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion, net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.Collection r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion r2;
        java.util.Set r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        net.sourceforge.plantuml.UmlDiagramType r4;
        java.lang.StringBuilder r5, $r6, $r7, $r9, $r10, $r14, $r15, $r17, $r18, $r21, $r22, $r23, $r24, $r36, $r38, $r39, $r42, $r44, $r45, $r54, $r56, $r57, $r59, $r60, $r69, $r71, $r72, $r74, $r75, $r78, $r81, $r82, $r85, $r90, $r91, $r93, $r94;
        java.lang.String $r8, $r11, $r16, $r19, $r25, $r37, $r40, $r43, $r46, $r51, $r55, $r58, $r61, $r65, $r70, $r73, $r76, $r80, $r83, $r92, $r95, r102;
        net.sourceforge.plantuml.ISkinParam $r27, $r88;
        net.sourceforge.plantuml.graphic.StringBounder r28;
        net.sourceforge.plantuml.svek.DotMode r29;
        net.sourceforge.plantuml.cucadiagram.IGroup $r79, $r98;
        net.sourceforge.plantuml.AlignmentParam $r87;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r89;
        java.lang.Object $r97;
        java.util.Iterator r99;
        net.sourceforge.plantuml.svek.SvekLine r100;
        net.sourceforge.plantuml.svek.SvekNode r103;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r5 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.Collection;

        r28 := @parameter2: net.sourceforge.plantuml.graphic.StringBounder;

        r29 := @parameter3: net.sourceforge.plantuml.svek.DotMode;

        r2 := @parameter4: net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion;

        r4 := @parameter5: net.sourceforge.plantuml.UmlDiagramType;

        z0 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: boolean isThereALinkFromOrToGroup(java.util.Collection)>(r1);

        z8 = z0;

        z1 = interfaceinvoke r2.<net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion: boolean useProtectionWhenThereALinkFromOrToGroup()>();

        if z1 != 0 goto label01;

        z8 = 0;

     label01:
        if z8 == 0 goto label02;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void subgraphClusterNoLabel(java.lang.StringBuilder,java.lang.String)>(r5, "a");

     label02:
        r3 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.Set entityPositionsExceptNormal()>();

        $i0 = interfaceinvoke r3.<java.util.Set: int size()>();

        if $i0 <= 0 goto label05;

        r99 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r99.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r97 = interfaceinvoke r99.<java.util.Iterator: java.lang.Object next()>();

        r100 = (net.sourceforge.plantuml.svek.SvekLine) $r97;

        $r98 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $z7 = virtualinvoke r100.<net.sourceforge.plantuml.svek.SvekLine: boolean isLinkFromOrTo(net.sourceforge.plantuml.cucadiagram.IEntity)>($r98);

        if $z7 == 0 goto label04;

        virtualinvoke r100.<net.sourceforge.plantuml.svek.SvekLine: void setProjectionCluster(net.sourceforge.plantuml.svek.Cluster)>(r0);

     label04:
        goto label03;

     label05:
        z9 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: boolean protection0(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        z10 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: boolean protection1(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        $i1 = interfaceinvoke r3.<java.util.Set: int size()>();

        if $i1 > 0 goto label06;

        if z1 != 0 goto label07;

     label06:
        z9 = 0;

        z10 = 0;

     label07:
        if z9 == 0 goto label08;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void subgraphClusterNoLabel(java.lang.StringBuilder,java.lang.String)>(r5, "p0");

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subgraph ");

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getClusterId()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("style=solid;");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=\"");

        $i2 = r0.<net.sourceforge.plantuml.svek.Cluster: int color>;

        $r16 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>($i2);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: boolean isLabel()>();

        if $z2 == 0 goto label09;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>(java.lang.String)>("<");

        $i6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: int getTitleAndAttributeWidth()>();

        $i7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: int getTitleAndAttributeHeight()>();

        $i9 = $i7 - 5;

        $i8 = r0.<net.sourceforge.plantuml.svek.Cluster: int colorTitle>;

        staticinvoke <net.sourceforge.plantuml.svek.SvekLine: void appendTable(java.lang.StringBuilder,int,int,int)>($r85, $i6, $i9, $i8);

        virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        r102 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        $r88 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r87 = <net.sourceforge.plantuml.AlignmentParam: net.sourceforge.plantuml.AlignmentParam packageTitleAlignment>;

        r89 = interfaceinvoke $r88.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment(net.sourceforge.plantuml.AlignmentParam,net.sourceforge.plantuml.skin.ArrowDirection,boolean,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r87, null, 0, null);

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("labeljust=\"");

        $r92 = virtualinvoke r89.<net.sourceforge.plantuml.graphic.HorizontalAlignment: java.lang.String getGraphVizValue()>();

        $r93 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";");

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r95);

        goto label10;

     label09:
        r102 = "\"\"";

     label10:
        $i3 = interfaceinvoke r3.<java.util.Set: int size()>();

        if $i3 <= 0 goto label12;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void printClusterEntryExit(java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>(r5, r28);

        $z5 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: boolean hasPort()>();

        if $z5 == 0 goto label11;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void subgraphClusterNoLabel(java.lang.StringBuilder,java.lang.String)>(r5, "ee");

        goto label13;

     label11:
        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void subgraphClusterWithLabel(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r5, "ee", r102);

        goto label13;

     label12:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r5);

     label13:
        if z0 == 0 goto label14;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r79 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r80 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: java.lang.String getSpecialPointId(net.sourceforge.plantuml.cucadiagram.IEntity)>($r79);

        $r81 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=point,width=.01,label=\"\"];");

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r83);

     label14:
        if z8 == 0 goto label15;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void subgraphClusterNoLabel(java.lang.StringBuilder,java.lang.String)>(r5, "i");

     label15:
        if z10 == 0 goto label16;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void subgraphClusterNoLabel(java.lang.StringBuilder,java.lang.String)>(r5, "p1");

     label16:
        $r27 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z3 = interfaceinvoke $r27.<net.sourceforge.plantuml.ISkinParam: boolean useSwimlanes(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        if $z3 == 0 goto label17;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{rank = source; ");

        $r51 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getSourceInPoint(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=point,width=.01,label=\"\"];");

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getMinPoint(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r58 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getSourceInPoint(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  [weight=999];");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{rank = sink; ");

        $r65 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getSinkInPoint(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=point,width=.01,label=\"\"];");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r70 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getSinkInPoint(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r73 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getMaxPoint(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  [weight=999];");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r5);

     label17:
        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r5);

        virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void printCluster1(java.lang.StringBuilder,java.util.Collection,net.sourceforge.plantuml.graphic.StringBounder)>(r5, r1, r28);

        r103 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.SvekNode printCluster2(java.lang.StringBuilder,java.util.Collection,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.svek.DotMode,net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.UmlDiagramType)>(r5, r1, r28, r29, r2, r4);

        $i4 = interfaceinvoke r3.<java.util.Set: int size()>();

        if $i4 <= 0 goto label19;

        $z4 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: boolean hasPort()>();

        if $z4 == 0 goto label18;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String empty()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=rect,width=.01,height=.01,label=");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];");

        goto label19;

     label18:
        if r103 != null goto label19;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.lang.String empty()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [shape=point,width=.01,label=\"\"];");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

     label19:
        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        if z10 == 0 goto label20;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label20:
        if z8 == 0 goto label21;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label21:
        $i5 = interfaceinvoke r3.<java.util.Set: int size()>();

        if $i5 <= 0 goto label22;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label22:
        if z9 == 0 goto label23;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label23:
        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r5);

        return;
    }

    private boolean hasPort()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.cucadiagram.EntityPosition r4;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: java.util.Set entityPositionsExceptNormal()>();

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.cucadiagram.EntityPosition) $r3;

        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.EntityPosition: boolean isPort()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private java.lang.String empty()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.cucadiagram.IGroup $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r2 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: java.lang.String getSpecialPointId(net.sourceforge.plantuml.cucadiagram.IEntity)>($r1);

        return $r2;
    }

    public boolean isLabel()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: int getTitleAndAttributeHeight()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: int getTitleAndAttributeWidth()>();

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void subgraphClusterNoLabel(java.lang.StringBuilder, java.lang.String)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        java.lang.StringBuilder r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<net.sourceforge.plantuml.svek.Cluster: void subgraphClusterWithLabel(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r1, r2, "\"\"");

        return;
    }

    private void subgraphClusterWithLabel(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder r0, $r1, $r2, $r5, $r7, $r8, $r11, $r12, $r14, $r15;
        net.sourceforge.plantuml.svek.Cluster r3;
        java.lang.String $r4, r6, $r9, r13, $r16;

        r3 := @this: net.sourceforge.plantuml.svek.Cluster;

        r0 := @parameter0: java.lang.StringBuilder;

        r6 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subgraph ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.svek.Cluster: java.lang.String getClusterId()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        return;
    }

    public int getColor()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int color>;

        return $i0;
    }

    public int getTitleColor()
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        $i0 = r0.<net.sourceforge.plantuml.svek.Cluster: int colorTitle>;

        return $i0;
    }

    private final net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.UmlDiagramType, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.svek.Cluster r0, $r17, $r19;
        net.sourceforge.plantuml.cucadiagram.IGroup $r1, $r2, $r6, $r8, $r10;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.color.Colors $r3;
        net.sourceforge.plantuml.graphic.color.ColorType $r4;
        net.sourceforge.plantuml.ugraphic.color.HColor r5, r16, $r20, $r27;
        net.sourceforge.plantuml.cucadiagram.Stereotype r7;
        net.sourceforge.plantuml.graphic.USymbol $r9, $r28;
        net.sourceforge.plantuml.UmlDiagramType r12, $r13;
        net.sourceforge.plantuml.ISkinParam $r15, $r23, $r25;
        net.sourceforge.plantuml.style.Style r18;
        net.sourceforge.plantuml.style.PName $r21;
        net.sourceforge.plantuml.style.Value $r22;
        net.sourceforge.plantuml.api.ThemeStyle $r24;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r26;
        net.sourceforge.plantuml.ColorParam $r29;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r12 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        r18 := @parameter1: net.sourceforge.plantuml.style.Style;

        $r1 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $z0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.EntityUtils: boolean groupRoot(net.sourceforge.plantuml.cucadiagram.IGroup)>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r4 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r5 = virtualinvoke $r3.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r4);

        if r5 == null goto label2;

        return r5;

     label2:
        $r6 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label3;

        $r21 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r22 = virtualinvoke r18.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r21);

        $r23 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r25 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r27 = interfaceinvoke $r22.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r24, $r26);

        return $r27;

     label3:
        $r8 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r9 != null goto label4;

        $r28 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol PACKAGE>;

        goto label5;

     label4:
        $r10 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        $r28 = interfaceinvoke $r10.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

     label5:
        $r13 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType ACTIVITY>;

        if r12 != $r13 goto label6;

        $r29 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam partitionBackground>;

        goto label7;

     label6:
        $r29 = virtualinvoke $r28.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.ColorParam getColorParamBack()>();

     label7:
        $r15 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ISkinParam skinParam>;

        r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r29, r7, 0);

        if r16 == null goto label8;

        return r16;

     label8:
        $r17 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.Cluster parentCluster>;

        if $r17 != null goto label9;

        return null;

     label9:
        $r19 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.Cluster parentCluster>;

        $r20 = specialinvoke $r19.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.UmlDiagramType,net.sourceforge.plantuml.style.Style)>(r12, r18);

        return $r20;
    }

    public boolean isClusterOf(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.cucadiagram.IEntity r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.Cluster r1;
        net.sourceforge.plantuml.cucadiagram.IGroup $r2;

        r1 := @this: net.sourceforge.plantuml.svek.Cluster;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IEntity: boolean isGroup()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.cucadiagram.IGroup group>;

        if $r2 != r0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.Stereotype, net.sourceforge.plantuml.style.SName, net.sourceforge.plantuml.graphic.USymbol)
    {
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.ISkinParam r0;
        net.sourceforge.plantuml.ugraphic.color.HColorBackground $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2, $r10, r15, r17;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3;
        net.sourceforge.plantuml.ColorParam $r4, $r5;
        net.sourceforge.plantuml.style.SName r6;
        net.sourceforge.plantuml.graphic.USymbol r7;
        net.sourceforge.plantuml.style.StyleSignature $r8;
        net.sourceforge.plantuml.style.StyleBuilder $r9;
        net.sourceforge.plantuml.style.PName $r11;
        net.sourceforge.plantuml.style.Value $r12;
        net.sourceforge.plantuml.api.ThemeStyle $r13;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r14;
        net.sourceforge.plantuml.style.Style r16;

        r15 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        r0 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.cucadiagram.Stereotype;

        r6 := @parameter3: net.sourceforge.plantuml.style.SName;

        r7 := @parameter4: net.sourceforge.plantuml.graphic.USymbol;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label4;

        $r8 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.style.SName,net.sourceforge.plantuml.graphic.USymbol)>(r6, r7);

        $r9 = interfaceinvoke r0.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r16 = virtualinvoke $r8.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r9);

        if r15 != null goto label1;

        $r11 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r12 = virtualinvoke r16.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r11);

        $r13 = interfaceinvoke r0.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r14 = interfaceinvoke r0.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r15 = interfaceinvoke $r12.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r13, $r14);

     label1:
        if r15 == null goto label2;

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor transparent()>();

        $z2 = virtualinvoke r15.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label3;

     label2:
        r15 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor transparent()>();

     label3:
        return r15;

     label4:
        if r15 != null goto label5;

        $r5 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam packageBackground>;

        r15 = interfaceinvoke r0.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r5, r3, 0);

     label5:
        if r15 != null goto label6;

        $r4 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam background>;

        r15 = interfaceinvoke r0.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r4, r3, 0);

     label6:
        if r15 == null goto label7;

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor transparent()>();

        $z1 = virtualinvoke r15.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label8;

     label7:
        r17 = interfaceinvoke r0.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()>();

        $r1 = new net.sourceforge.plantuml.ugraphic.color.HColorBackground;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColorBackground: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor)>(r17);

        r15 = $r1;

     label8:
        return r15;
    }

    public double checkFolderPosition(java.awt.geom.Point2D, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Cluster r0;
        net.sourceforge.plantuml.svek.ClusterPosition $r1, $r7, $r8;
        java.awt.geom.Point2D r2;
        boolean $z0;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r5;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.Cluster;

        r2 := @parameter0: java.awt.geom.Point2D;

        r4 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.ClusterPosition: boolean isPointJustUpper(java.awt.geom.Point2D)>(r2);

        if $z0 == 0 goto label3;

        $r3 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        if $r3 != null goto label1;

        return 0.0;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.graphic.TextBlock ztitle>;

        r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        $d1 = virtualinvoke $r7.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $d2 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = $d1 + $d2;

        $b0 = $d0 cmpg $d3;

        if $b0 >= 0 goto label2;

        return 0.0;

     label2:
        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        $d4 = virtualinvoke $r8.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinY()>();

        $d5 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d6 = $d4 - $d5;

        $d7 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d8 = $d6 + $d7;

        return $d8;

     label3:
        return 0.0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.Cluster: java.lang.String CENTER_ID> = "za";

        <net.sourceforge.plantuml.svek.Cluster: java.lang.String ID_EE> = "ee";

        <net.sourceforge.plantuml.svek.Cluster: java.lang.String RANK_SINK> = "sink";

        <net.sourceforge.plantuml.svek.Cluster: java.lang.String RANK_SOURCE> = "source";

        <net.sourceforge.plantuml.svek.Cluster: java.lang.String RANK_SAME> = "same";

        return;
    }
}
