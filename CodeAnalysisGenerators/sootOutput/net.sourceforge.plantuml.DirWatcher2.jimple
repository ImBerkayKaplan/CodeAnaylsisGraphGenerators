public class net.sourceforge.plantuml.DirWatcher2 extends java.lang.Object
{
    private final java.io.File dir;
    private final net.sourceforge.plantuml.Option option;
    private final java.lang.String pattern;
    private final java.util.Map modifieds;
    private final java.util.concurrent.ExecutorService executorService;

    public void <init>(java.io.File, net.sourceforge.plantuml.Option, java.lang.String)
    {
        net.sourceforge.plantuml.DirWatcher2 r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.io.File r2;
        net.sourceforge.plantuml.Option r3;
        java.lang.String r4;
        int i0;
        java.util.concurrent.ExecutorService $r5;

        r0 := @this: net.sourceforge.plantuml.DirWatcher2;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: net.sourceforge.plantuml.Option;

        r4 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.DirWatcher2: java.util.Map modifieds> = $r1;

        r0.<net.sourceforge.plantuml.DirWatcher2: java.io.File dir> = r2;

        r0.<net.sourceforge.plantuml.DirWatcher2: net.sourceforge.plantuml.Option option> = r3;

        r0.<net.sourceforge.plantuml.DirWatcher2: java.lang.String pattern> = r4;

        i0 = staticinvoke <net.sourceforge.plantuml.Option: int defaultNbThreads()>();

        $r5 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(i0);

        r0.<net.sourceforge.plantuml.DirWatcher2: java.util.concurrent.ExecutorService executorService> = $r5;

        return;
    }

    public java.util.Map buildCreatedFiles() throws java.io.IOException, java.lang.InterruptedException
    {
        java.util.TreeMap $r0;
        net.sourceforge.plantuml.DirWatcher2 r2;
        java.io.File $r3, $r6, r8, $r17;
        java.io.File[] $r4, r7;
        java.util.Map $r5, $r10, $r26;
        int i0, i1;
        boolean $z0, $z1, $z2;
        java.lang.String $r9, $r21;
        java.lang.Object $r11;
        net.sourceforge.plantuml.FileWatcher r12, $r25;
        net.sourceforge.plantuml.SourceFileReader $r13;
        net.sourceforge.plantuml.Option $r14, $r16, $r18, $r20, $r22;
        net.sourceforge.plantuml.preproc.Defines $r15;
        java.util.List $r19;
        net.sourceforge.plantuml.FileFormatOption $r23;
        java.util.Set $r27;
        net.sourceforge.plantuml.DirWatcher2$1 $r29;
        java.util.concurrent.ExecutorService $r30;
        java.util.concurrent.Future r31;

        r2 := @this: net.sourceforge.plantuml.DirWatcher2;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.DirWatcher2: java.io.File dir>;

        $r4 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles()>();

        if $r4 == null goto label6;

        $r6 = r2.<net.sourceforge.plantuml.DirWatcher2: java.io.File dir>;

        r7 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r7;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r8 = r7[i1];

        $z0 = virtualinvoke r8.<java.io.File: boolean isFile()>();

        if $z0 != 0 goto label2;

        goto label5;

     label2:
        $r9 = virtualinvoke r8.<java.io.File: java.lang.String getName()>();

        $z1 = specialinvoke r2.<net.sourceforge.plantuml.DirWatcher2: boolean fileToProcess(java.lang.String)>($r9);

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $r10 = r2.<net.sourceforge.plantuml.DirWatcher2: java.util.Map modifieds>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r12 = (net.sourceforge.plantuml.FileWatcher) $r11;

        if r12 == null goto label4;

        $z2 = virtualinvoke r12.<net.sourceforge.plantuml.FileWatcher: boolean hasChanged()>();

        if $z2 == 0 goto label5;

     label4:
        $r13 = new net.sourceforge.plantuml.SourceFileReader;

        $r14 = r2.<net.sourceforge.plantuml.DirWatcher2: net.sourceforge.plantuml.Option option>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.preproc.Defines getDefaultDefines(java.io.File)>(r8);

        $r16 = r2.<net.sourceforge.plantuml.DirWatcher2: net.sourceforge.plantuml.Option option>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.Option: java.io.File getOutputDir()>();

        $r18 = r2.<net.sourceforge.plantuml.DirWatcher2: net.sourceforge.plantuml.Option option>;

        $r19 = virtualinvoke $r18.<net.sourceforge.plantuml.Option: java.util.List getConfig()>();

        $r20 = r2.<net.sourceforge.plantuml.DirWatcher2: net.sourceforge.plantuml.Option option>;

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r22 = r2.<net.sourceforge.plantuml.DirWatcher2: net.sourceforge.plantuml.Option option>;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        specialinvoke $r13.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r15, r8, $r17, $r19, $r21, $r23);

        $r26 = r2.<net.sourceforge.plantuml.DirWatcher2: java.util.Map modifieds>;

        $r25 = new net.sourceforge.plantuml.FileWatcher;

        $r27 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8);

        specialinvoke $r25.<net.sourceforge.plantuml.FileWatcher: void <init>(java.util.Set)>($r27);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r25);

        $r30 = r2.<net.sourceforge.plantuml.DirWatcher2: java.util.concurrent.ExecutorService executorService>;

        $r29 = new net.sourceforge.plantuml.DirWatcher2$1;

        specialinvoke $r29.<net.sourceforge.plantuml.DirWatcher2$1: void <init>(net.sourceforge.plantuml.DirWatcher2,net.sourceforge.plantuml.SourceFileReader,java.io.File)>(r2, $r13, r8);

        r31 = interfaceinvoke $r30.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r29);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r31);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r5;
    }

    private boolean fileToProcess(java.lang.String)
    {
        java.lang.String r0, $r2;
        net.sourceforge.plantuml.DirWatcher2 r1;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.DirWatcher2;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<net.sourceforge.plantuml.DirWatcher2: java.lang.String pattern>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>($r2);

        return $z0;
    }

    public final java.io.File getDir()
    {
        net.sourceforge.plantuml.DirWatcher2 r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.DirWatcher2;

        $r1 = r0.<net.sourceforge.plantuml.DirWatcher2: java.io.File dir>;

        return $r1;
    }

    public void cancel()
    {
        net.sourceforge.plantuml.DirWatcher2 r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: net.sourceforge.plantuml.DirWatcher2;

        $r1 = r0.<net.sourceforge.plantuml.DirWatcher2: java.util.concurrent.ExecutorService executorService>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        return;
    }

    public void waitEnd() throws java.lang.InterruptedException
    {
        net.sourceforge.plantuml.DirWatcher2 r0;
        java.util.concurrent.ExecutorService $r1, $r3;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: net.sourceforge.plantuml.DirWatcher2;

        $r1 = r0.<net.sourceforge.plantuml.DirWatcher2: java.util.concurrent.ExecutorService executorService>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r3 = r0.<net.sourceforge.plantuml.DirWatcher2: java.util.concurrent.ExecutorService executorService>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r2);

        return;
    }

    static java.util.Map access$000(net.sourceforge.plantuml.DirWatcher2)
    {
        net.sourceforge.plantuml.DirWatcher2 r0;
        java.util.Map $r1;

        r0 := @parameter0: net.sourceforge.plantuml.DirWatcher2;

        $r1 = r0.<net.sourceforge.plantuml.DirWatcher2: java.util.Map modifieds>;

        return $r1;
    }
}
