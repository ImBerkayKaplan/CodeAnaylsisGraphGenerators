public class net.sourceforge.plantuml.png.PngFlashcoder extends java.lang.Object
{
    private final java.util.List flashcodes;

    public void <init>(java.util.List)
    {
        net.sourceforge.plantuml.png.PngFlashcoder r0;
        java.util.List r1;

        r0 := @this: net.sourceforge.plantuml.png.PngFlashcoder;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.png.PngFlashcoder: java.util.List flashcodes> = r1;

        return;
    }

    public java.awt.image.BufferedImage processImage(java.awt.image.BufferedImage, java.awt.Color)
    {
        net.sourceforge.plantuml.png.PngFlashcoder r0;
        java.util.List $r1;
        java.awt.Color r2;
        java.awt.image.BufferedImage r3;

        r0 := @this: net.sourceforge.plantuml.png.PngFlashcoder;

        r3 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.Color;

        $r1 = r0.<net.sourceforge.plantuml.png.PngFlashcoder: java.util.List flashcodes>;

        if $r1 == null goto label1;

        r3 = specialinvoke r0.<net.sourceforge.plantuml.png.PngFlashcoder: java.awt.image.BufferedImage addImage(java.awt.image.BufferedImage,java.awt.Color)>(r3, r2);

     label1:
        return r3;
    }

    private java.awt.image.BufferedImage addImage(java.awt.image.BufferedImage, java.awt.Color)
    {
        java.awt.image.BufferedImage r0, $r4, r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        net.sourceforge.plantuml.png.PngFlashcoder r1;
        java.util.List $r2, $r3, $r9;
        double d0, d1;
        java.awt.Graphics2D r6;
        net.sourceforge.plantuml.ugraphic.UAntiAliasing $r7;
        java.awt.Color r8;
        java.util.Iterator r10;
        boolean $z0;
        java.lang.Object $r11;

        r1 := @this: net.sourceforge.plantuml.png.PngFlashcoder;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r8 := @parameter1: java.awt.Color;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $r2 = r1.<net.sourceforge.plantuml.png.PngFlashcoder: java.util.List flashcodes>;

        $i1 = staticinvoke <net.sourceforge.plantuml.png.PngFlashcoder: int getWidth(java.util.List)>($r2);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        d0 = (double) $i2;

        $i3 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $r3 = r1.<net.sourceforge.plantuml.png.PngFlashcoder: java.util.List flashcodes>;

        $i4 = staticinvoke <net.sourceforge.plantuml.png.PngFlashcoder: int getHeight(java.util.List)>($r3);

        $i5 = $i3 + $i4;

        d1 = (double) $i5;

        $r4 = new java.awt.image.BufferedImage;

        $i7 = (int) d0;

        $i6 = (int) d1;

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i7, $i6, 1);

        r6 = virtualinvoke $r4.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r7 = <net.sourceforge.plantuml.ugraphic.UAntiAliasing: net.sourceforge.plantuml.ugraphic.UAntiAliasing ANTI_ALIASING_OFF>;

        virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.UAntiAliasing: void apply(java.awt.Graphics2D)>(r6);

        virtualinvoke r6.<java.awt.Graphics2D: void setColor(java.awt.Color)>(r8);

        $i8 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getWidth()>();

        $i9 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r6.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i8, $i9);

        virtualinvoke r6.<java.awt.Graphics2D: void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)>(r0, null, 0, 0);

        i12 = 0;

        $r9 = r1.<net.sourceforge.plantuml.png.PngFlashcoder: java.util.List flashcodes>;

        r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.awt.image.BufferedImage) $r11;

        $i10 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r6.<java.awt.Graphics2D: void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)>(r12, null, i12, $i10);

        $i11 = virtualinvoke r12.<java.awt.image.BufferedImage: int getWidth()>();

        i12 = i12 + $i11;

        goto label1;

     label2:
        virtualinvoke r6.<java.awt.Graphics2D: void dispose()>();

        return $r4;
    }

    public static int getHeight(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        java.awt.image.BufferedImage r3;
        int $i0, i1;

        r0 := @parameter0: java.util.List;

        i1 = 0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.awt.image.BufferedImage) $r2;

        $i0 = virtualinvoke r3.<java.awt.image.BufferedImage: int getWidth()>();

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i0);

        goto label1;

     label2:
        return i1;
    }

    public static int getWidth(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        java.awt.image.BufferedImage r3;
        int $i0, i1;

        r0 := @parameter0: java.util.List;

        i1 = 0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.awt.image.BufferedImage) $r2;

        $i0 = virtualinvoke r3.<java.awt.image.BufferedImage: int getWidth()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }
}
