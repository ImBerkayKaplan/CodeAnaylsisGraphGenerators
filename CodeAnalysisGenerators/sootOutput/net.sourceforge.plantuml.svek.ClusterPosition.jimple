public class net.sourceforge.plantuml.svek.ClusterPosition extends java.lang.Object
{
    private final double minX;
    private final double minY;
    private final double maxX;
    private final double maxY;

    public void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minX> = d0;

        r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minY> = d1;

        r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX> = d2;

        r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY> = d3;

        return;
    }

    public boolean contains(double, double)
    {
        double d0, $d1, $d2, d3, $d4, $d5;
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        $d1 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $b0 = d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $d2 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $b1 = d0 cmpg $d2;

        if $b1 >= 0 goto label1;

        $d4 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $b2 = d3 cmpl $d4;

        if $b2 < 0 goto label1;

        $d5 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $b3 = d3 cmpg $d5;

        if $b3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition merge(net.sourceforge.plantuml.svek.ClusterPosition)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        r2 := @parameter0: net.sourceforge.plantuml.svek.ClusterPosition;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d0 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d0);

        $d4 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d3 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d5 = staticinvoke <java.lang.Math: double min(double,double)>($d4, $d3);

        $d7 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d6 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d8 = staticinvoke <java.lang.Math: double max(double,double)>($d7, $d6);

        $d10 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d9 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d11 = staticinvoke <java.lang.Math: double max(double,double)>($d10, $d9);

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d2, $d5, $d8, $d11);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition merge(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        net.sourceforge.plantuml.svek.ClusterPosition $r1, r2;

        r2 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        r0 := @parameter0: java.awt.geom.Point2D;

        d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $r1 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d2 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d3 = staticinvoke <java.lang.Math: double min(double,double)>($d2, d0);

        $d4 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d5 = staticinvoke <java.lang.Math: double min(double,double)>($d4, d1);

        $d6 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d7 = staticinvoke <java.lang.Math: double max(double,double)>($d6, d0);

        $d8 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d9 = staticinvoke <java.lang.Math: double max(double,double)>($d8, d1);

        specialinvoke $r1.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d3, $d5, $d7, $d9);

        return $r1;
    }

    public boolean contains(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(double,double)>($d0, $d1);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        net.sourceforge.plantuml.svek.ClusterPosition r2;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r10;

        r2 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minX=");

        $d0 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxX=");

        $d1 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minY=");

        $d2 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxY=");

        $d3 = r2.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public final double getMinX()
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        $d0 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        return $d0;
    }

    public final double getMinY()
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        $d0 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        return $d0;
    }

    public final double getMaxX()
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        $d0 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        return $d0;
    }

    public final double getMaxY()
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        $d0 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        return $d0;
    }

    public net.sourceforge.plantuml.svek.PointDirected getIntersection(java.awt.geom.CubicCurve2D$Double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        java.awt.geom.CubicCurve2D$Double r1, $r4, $r5;
        double $d0, $d1, $d2, $d3, d4, d5;
        boolean $z0, $z1;
        java.awt.geom.Point2D $r2, $r3, $r11;
        byte $b0;
        net.sourceforge.plantuml.svek.PointDirected r7, r8, $r10;
        java.lang.IllegalStateException $r9;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        r1 := @parameter0: java.awt.geom.CubicCurve2D$Double;

        $d1 = r1.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d0 = r1.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(double,double)>($d1, $d0);

        $d3 = r1.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d2 = r1.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(double,double)>($d3, $d2);

        if $z0 != $z1 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $r3 = virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        d4 = virtualinvoke $r2.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r3);

        $b0 = d4 cmpg 2.0;

        if $b0 >= 0 goto label2;

        d5 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getStartingAngle(java.awt.geom.CubicCurve2D$Double)>(r1);

        $r10 = new net.sourceforge.plantuml.svek.PointDirected;

        $r11 = virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        specialinvoke $r10.<net.sourceforge.plantuml.svek.PointDirected: void <init>(java.awt.geom.Point2D,double)>($r11, d5);

        return $r10;

     label2:
        $r4 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r4.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r5 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r5.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r4, $r5);

        r7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.PointDirected getIntersection(java.awt.geom.CubicCurve2D$Double)>($r4);

        if r7 == null goto label3;

        return r7;

     label3:
        r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.PointDirected getIntersection(java.awt.geom.CubicCurve2D$Double)>($r5);

        if r8 == null goto label4;

        return r8;

     label4:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;
    }

    public java.awt.geom.Point2D getPointCenter()
    {
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.svek.ClusterPosition r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d0 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d2 = $d1 + $d0;

        $d7 = $d2 / 2.0;

        $d4 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d5 = $d4 + $d3;

        $d6 = $d5 / 2.0;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d6);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition withMinX(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>(d0, $d3, $d2, $d1);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition withMaxX(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d3, $d2, d0, $d1);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition addMaxX(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d5 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d4 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d3 = $d1 + d0;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d5, $d4, $d3, $d2);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition addMaxY(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d5 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d4 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d2 = $d1 + d0;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d5, $d4, $d3, $d2);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition addMinX(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d5 = $d1 + d0;

        $d4 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d5, $d4, $d3, $d2);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition addMinY(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d5 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d4 = $d1 + d0;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d5, $d4, $d3, $d2);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition withMinY(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d3, d0, $d2, $d1);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition withMaxY(double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d3, $d2, $d1, d0);

        return $r0;
    }

    public java.awt.geom.Point2D getProjectionOnFrontier(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;
        net.sourceforge.plantuml.svek.ClusterPosition r1;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11;
        java.awt.geom.Point2D$Double $r2, $r3, $r4, $r5, $r6;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        r0 := @parameter0: java.awt.geom.Point2D;

        d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $b0 = d0 cmpl $d2;

        if $b0 <= 0 goto label1;

        $d15 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $b7 = d1 cmpl $d15;

        if $b7 < 0 goto label1;

        $d16 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $b8 = d1 cmpg $d16;

        if $b8 > 0 goto label1;

        $r5 = new java.awt.geom.Point2D$Double;

        $d17 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d18 = $d17 - 1.0;

        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d18, d1);

        return $r5;

     label1:
        $d19 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $b9 = d0 cmpg $d19;

        if $b9 >= 0 goto label2;

        $d11 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $b5 = d1 cmpl $d11;

        if $b5 < 0 goto label2;

        $d12 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $b6 = d1 cmpg $d12;

        if $b6 > 0 goto label2;

        $r4 = new java.awt.geom.Point2D$Double;

        $d13 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d14 = $d13 + 1.0;

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d14, d1);

        return $r4;

     label2:
        $d20 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $b10 = d1 cmpl $d20;

        if $b10 <= 0 goto label3;

        $d7 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $b3 = d0 cmpl $d7;

        if $b3 < 0 goto label3;

        $d8 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $b4 = d0 cmpg $d8;

        if $b4 > 0 goto label3;

        $r3 = new java.awt.geom.Point2D$Double;

        $d9 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d10 = $d9 - 1.0;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, $d10);

        return $r3;

     label3:
        $d21 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $b11 = d1 cmpg $d21;

        if $b11 >= 0 goto label4;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $b1 = d0 cmpl $d3;

        if $b1 < 0 goto label4;

        $d4 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $b2 = d0 cmpg $d4;

        if $b2 > 0 goto label4;

        $r2 = new java.awt.geom.Point2D$Double;

        $d5 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d6 = $d5 + 1.0;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, $d6);

        return $r2;

     label4:
        $r6 = new java.awt.geom.Point2D$Double;

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d1);

        return $r6;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition delta(double, double)
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0, r1;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d7 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d6 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d5 = $d1 + d0;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d4 = $d3 + d2;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d7, $d6, $d5, $d4);

        return $r0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.ClusterPosition r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d0 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d5 = $d1 - $d0;

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d2 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d4 = $d3 - $d2;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d5, $d4);

        return $r0;
    }

    public boolean isPointJustUpper(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.svek.ClusterPosition r1;
        byte $b0, $b1, $b2;

        r1 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        r0 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $d2 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d3 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $b1 = $d2 cmpg $d3;

        if $b1 > 0 goto label1;

        $d4 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d5 = r1.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $b2 = $d4 cmpg $d5;

        if $b2 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public net.sourceforge.plantuml.svek.Side getClosestSide(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, d11, $d12, $d13, $d14, d15;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.svek.Side $r2, $r3, $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minY>;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d2 = $d0 - $d1;

        d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d4 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxY>;

        $d5 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d6 = $d4 - $d5;

        d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $d8 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double minX>;

        $d9 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d10 = $d8 - $d9;

        d11 = staticinvoke <java.lang.Math: double abs(double)>($d10);

        $d12 = r0.<net.sourceforge.plantuml.svek.ClusterPosition: double maxX>;

        $d13 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d14 = $d12 - $d13;

        d15 = staticinvoke <java.lang.Math: double abs(double)>($d14);

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: boolean isSmallerThan(double,double,double,double)>(d3, d11, d15, d7);

        if $z0 == 0 goto label1;

        $r5 = <net.sourceforge.plantuml.svek.Side: net.sourceforge.plantuml.svek.Side NORTH>;

        return $r5;

     label1:
        $z1 = specialinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: boolean isSmallerThan(double,double,double,double)>(d7, d3, d11, d15);

        if $z1 == 0 goto label2;

        $r4 = <net.sourceforge.plantuml.svek.Side: net.sourceforge.plantuml.svek.Side SOUTH>;

        return $r4;

     label2:
        $z2 = specialinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: boolean isSmallerThan(double,double,double,double)>(d15, d3, d11, d7);

        if $z2 == 0 goto label3;

        $r3 = <net.sourceforge.plantuml.svek.Side: net.sourceforge.plantuml.svek.Side EAST>;

        return $r3;

     label3:
        $z3 = specialinvoke r0.<net.sourceforge.plantuml.svek.ClusterPosition: boolean isSmallerThan(double,double,double,double)>(d11, d3, d15, d7);

        if $z3 == 0 goto label4;

        $r2 = <net.sourceforge.plantuml.svek.Side: net.sourceforge.plantuml.svek.Side WEST>;

        return $r2;

     label4:
        return null;
    }

    private boolean isSmallerThan(double, double, double, double)
    {
        double d0, d1, d2, d3;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.svek.ClusterPosition r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.ClusterPosition;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $b0 = d0 cmpg d1;

        if $b0 > 0 goto label1;

        $b1 = d0 cmpg d2;

        if $b1 > 0 goto label1;

        $b2 = d0 cmpg d3;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
