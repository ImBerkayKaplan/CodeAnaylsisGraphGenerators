public class net.sourceforge.plantuml.mindmap.MindMapDiagram extends net.sourceforge.plantuml.UmlDiagram
{
    private final java.util.List mindmaps;
    private net.sourceforge.plantuml.Direction defaultDirection;
    private java.lang.String first;

    public final void setDefaultDirection(net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        net.sourceforge.plantuml.Direction r1;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.Direction;

        r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.Direction defaultDirection> = r1;

        return;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.mindmap.MindMapDiagram r1;

        r1 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("MindMap");

        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource)
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        net.sourceforge.plantuml.UmlDiagramType $r3;
        java.util.ArrayList $r4;
        net.sourceforge.plantuml.Direction $r5;
        net.sourceforge.plantuml.mindmap.MindMap $r6;
        java.util.List $r7;
        net.sourceforge.plantuml.ISkinParam $r8;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        $r3 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType MINDMAP>;

        specialinvoke r0.<net.sourceforge.plantuml.UmlDiagram: void <init>(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.UmlDiagramType)>(r1, r2, $r3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.util.List mindmaps> = $r4;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.Direction defaultDirection> = $r5;

        $r7 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.util.List mindmaps>;

        $r6 = new net.sourceforge.plantuml.mindmap.MindMap;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        specialinvoke $r6.<net.sourceforge.plantuml.mindmap.MindMap: void <init>(net.sourceforge.plantuml.ISkinParam)>($r8);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    protected net.sourceforge.plantuml.core.ImageData exportDiagramInternal(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        net.sourceforge.plantuml.FileFormatOption r1;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r2, $r4;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r3;
        java.io.OutputStream r5;
        net.sourceforge.plantuml.core.ImageData $r6;
        int i0;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        r5 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r1 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.ugraphic.ImageBuilder createImageBuilder(net.sourceforge.plantuml.FileFormatOption)>(r1);

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.svek.TextBlockBackcolored getTextBlock()>();

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder drawable(net.sourceforge.plantuml.graphic.UDrawable)>($r3);

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.core.ImageData write(java.io.OutputStream)>(r5);

        return $r6;
    }

    private net.sourceforge.plantuml.svek.TextBlockBackcolored getTextBlock()
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram$1 $r0;
        net.sourceforge.plantuml.mindmap.MindMapDiagram r1;

        r1 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        $r0 = new net.sourceforge.plantuml.mindmap.MindMapDiagram$1;

        specialinvoke $r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram$1: void <init>(net.sourceforge.plantuml.mindmap.MindMapDiagram)>(r1);

        return $r0;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult addIdea(net.sourceforge.plantuml.ugraphic.color.HColor, int, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.mindmap.IdeaShape)
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1;
        int i0;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        net.sourceforge.plantuml.mindmap.IdeaShape r3;
        net.sourceforge.plantuml.Direction $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        i0 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.cucadiagram.Display;

        r3 := @parameter3: net.sourceforge.plantuml.mindmap.IdeaShape;

        $r4 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.Direction defaultDirection>;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.command.CommandExecutionResult addIdea(net.sourceforge.plantuml.ugraphic.color.HColor,int,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,net.sourceforge.plantuml.Direction)>(r1, i0, r2, r3, $r4);

        return $r5;
    }

    private net.sourceforge.plantuml.mindmap.MindMap last()
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.mindmap.MindMap $r4;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        $r2 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.util.List mindmaps>;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.util.List mindmaps>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (net.sourceforge.plantuml.mindmap.MindMap) $r3;

        return $r4;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult addIdea(net.sourceforge.plantuml.ugraphic.color.HColor, int, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.mindmap.IdeaShape, net.sourceforge.plantuml.Direction)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.mindmap.MindMapDiagram r1;
        net.sourceforge.plantuml.mindmap.MindMap $r2, $r3, $r8;
        int i0;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.color.HColor r4;
        net.sourceforge.plantuml.mindmap.IdeaShape r5;
        net.sourceforge.plantuml.Direction r6;
        net.sourceforge.plantuml.command.CommandExecutionResult $r7;
        java.util.List $r9;
        net.sourceforge.plantuml.ISkinParam $r10;
        net.sourceforge.plantuml.cucadiagram.Display r11;

        r1 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        i0 := @parameter1: int;

        r11 := @parameter2: net.sourceforge.plantuml.cucadiagram.Display;

        r5 := @parameter3: net.sourceforge.plantuml.mindmap.IdeaShape;

        r6 := @parameter4: net.sourceforge.plantuml.Direction;

        r0 = virtualinvoke r11.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.String getEndingStereotype()>();

        if r0 == null goto label1;

        r11 = virtualinvoke r11.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display removeEndingStereotype()>();

     label1:
        $r2 = specialinvoke r1.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.mindmap.MindMap last()>();

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.mindmap.MindMap: boolean isFull(int)>(i0);

        if $z0 == 0 goto label2;

        $r9 = r1.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.util.List mindmaps>;

        $r8 = new net.sourceforge.plantuml.mindmap.MindMap;

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        specialinvoke $r8.<net.sourceforge.plantuml.mindmap.MindMap: void <init>(net.sourceforge.plantuml.ISkinParam)>($r10);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        $r3 = specialinvoke r1.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.mindmap.MindMap last()>();

        $r7 = virtualinvoke $r3.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.command.CommandExecutionResult addIdeaInternal(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor,int,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,net.sourceforge.plantuml.Direction)>(r0, r4, i0, r11, r5, r6);

        return $r7;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult addIdea(java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor, int, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.mindmap.IdeaShape)
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        net.sourceforge.plantuml.mindmap.MindMap $r1, $r2, $r9;
        int i0;
        boolean $z0;
        java.lang.String r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r4;
        net.sourceforge.plantuml.cucadiagram.Display r5;
        net.sourceforge.plantuml.mindmap.IdeaShape r6;
        net.sourceforge.plantuml.Direction $r7;
        net.sourceforge.plantuml.command.CommandExecutionResult $r8;
        java.util.List $r10;
        net.sourceforge.plantuml.ISkinParam $r11;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        i0 := @parameter2: int;

        r5 := @parameter3: net.sourceforge.plantuml.cucadiagram.Display;

        r6 := @parameter4: net.sourceforge.plantuml.mindmap.IdeaShape;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.mindmap.MindMap last()>();

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.mindmap.MindMap: boolean isFull(int)>(i0);

        if $z0 == 0 goto label1;

        $r10 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.util.List mindmaps>;

        $r9 = new net.sourceforge.plantuml.mindmap.MindMap;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        specialinvoke $r9.<net.sourceforge.plantuml.mindmap.MindMap: void <init>(net.sourceforge.plantuml.ISkinParam)>($r11);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

     label1:
        $r2 = specialinvoke r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.mindmap.MindMap last()>();

        $r7 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: net.sourceforge.plantuml.Direction defaultDirection>;

        $r8 = virtualinvoke $r2.<net.sourceforge.plantuml.mindmap.MindMap: net.sourceforge.plantuml.command.CommandExecutionResult addIdeaInternal(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor,int,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,net.sourceforge.plantuml.Direction)>(r3, r4, i0, r5, r6, $r7);

        return $r8;
    }

    public int getSmartLevel(java.lang.String)
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        java.lang.String $r1, $r2, $r3, $r4, $r10, $r13, $r14, $r15, $r16, r17, r18;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.UnsupportedOperationException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12;

        r0 := @this: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        r17 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.lang.String first>;

        if $r1 != null goto label1;

        r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.lang.String first> = r17;

     label1:
        $z0 = virtualinvoke r17.<java.lang.String: boolean endsWith(java.lang.String)>("**");

        if $z0 == 0 goto label2;

        $r16 = virtualinvoke r17.<java.lang.String: java.lang.String replace(char,char)>(9, 32);

        r17 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>();

     label2:
        r18 = virtualinvoke r17.<java.lang.String: java.lang.String replace(char,char)>(9, 32);

        $z1 = virtualinvoke r18.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z1 != 0 goto label3;

        $i9 = virtualinvoke r18.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        return $i10;

     label3:
        $r2 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.lang.String first>;

        $z2 = virtualinvoke r18.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        if $z2 == 0 goto label4;

        $i6 = virtualinvoke r18.<java.lang.String: int length()>();

        $r15 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.lang.String first>;

        $i7 = virtualinvoke $r15.<java.lang.String: int length()>();

        $i8 = $i6 - $i7;

        return $i8;

     label4:
        $r3 = virtualinvoke r18.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 1 goto label5;

        $i4 = virtualinvoke r18.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        return $i5;

     label5:
        $r4 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.lang.String first>;

        $z3 = virtualinvoke r18.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z3 == 0 goto label6;

        $i1 = virtualinvoke r18.<java.lang.String: int length()>();

        $r14 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.lang.String first>;

        $i2 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        return $i3;

     label6:
        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type=<");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">[");

        $r10 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.lang.String first>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r13);

        throw $r5;
    }

    static java.util.List access$000(net.sourceforge.plantuml.mindmap.MindMapDiagram)
    {
        net.sourceforge.plantuml.mindmap.MindMapDiagram r0;
        java.util.List $r1;

        r0 := @parameter0: net.sourceforge.plantuml.mindmap.MindMapDiagram;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.MindMapDiagram: java.util.List mindmaps>;

        return $r1;
    }
}
