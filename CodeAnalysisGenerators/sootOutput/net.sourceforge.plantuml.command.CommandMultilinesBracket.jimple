public abstract class net.sourceforge.plantuml.command.CommandMultilinesBracket extends java.lang.Object implements net.sourceforge.plantuml.command.Command
{
    private final net.sourceforge.plantuml.command.regex.Pattern2 starting;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.command.CommandMultilinesBracket r0;
        java.lang.String r1, $r6;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        net.sourceforge.plantuml.command.regex.Pattern2 $r7;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilinesBracket;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("$");

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad pattern ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>(r1);

        r0.<net.sourceforge.plantuml.command.CommandMultilinesBracket: net.sourceforge.plantuml.command.regex.Pattern2 starting> = $r7;

        return;
    }

    protected boolean isCommandForbidden()
    {
        net.sourceforge.plantuml.command.CommandMultilinesBracket r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilinesBracket;

        return 0;
    }

    public java.lang.String[] getDescription()
    {
        java.lang.String[] $r0;
        java.lang.StringBuilder $r1, $r2, $r6;
        net.sourceforge.plantuml.command.CommandMultilinesBracket r3;
        net.sourceforge.plantuml.command.regex.Pattern2 $r4;
        java.lang.String $r5, $r7;

        r3 := @this: net.sourceforge.plantuml.command.CommandMultilinesBracket;

        $r0 = newarray (java.lang.String)[1];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BRACKET: ");

        $r4 = r3.<net.sourceforge.plantuml.command.CommandMultilinesBracket: net.sourceforge.plantuml.command.regex.Pattern2 starting>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.command.regex.Pattern2: java.lang.String pattern()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[0] = $r7;

        return $r0;
    }

    protected void actionIfCommandValid()
    {
        net.sourceforge.plantuml.command.CommandMultilinesBracket r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilinesBracket;

        return;
    }

    protected final net.sourceforge.plantuml.command.regex.Pattern2 getStartingPattern()
    {
        net.sourceforge.plantuml.command.CommandMultilinesBracket r0;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilinesBracket;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandMultilinesBracket: net.sourceforge.plantuml.command.regex.Pattern2 starting>;

        return $r1;
    }

    public final net.sourceforge.plantuml.command.CommandControl isValid(net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.CommandMultilinesBracket r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.command.BlocLines r1, $r7;
        net.sourceforge.plantuml.command.regex.Pattern2 $r2;
        net.sourceforge.plantuml.StringLocated $r3, $r4, r12, $r13;
        java.lang.String $r5, r14;
        net.sourceforge.plantuml.command.regex.Matcher2 r6;
        int $i0, i1;
        java.util.Iterator r8;
        net.sourceforge.plantuml.command.CommandControl $r9, $r10, $r15, $r16, $r17, $r18, $r19;
        java.lang.Object $r11;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilinesBracket;

        r1 := @parameter0: net.sourceforge.plantuml.command.BlocLines;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilinesBracket: boolean isCommandForbidden()>();

        if $z0 == 0 goto label01;

        $r19 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r19;

     label01:
        $r2 = r0.<net.sourceforge.plantuml.command.CommandMultilinesBracket: net.sourceforge.plantuml.command.regex.Pattern2 starting>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r6 = virtualinvoke $r2.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>($r5);

        $z1 = virtualinvoke r6.<net.sourceforge.plantuml.command.regex.Matcher2: boolean matches()>();

        if $z1 != 0 goto label02;

        $r18 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r18;

     label02:
        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 != 1 goto label03;

        $r17 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r17;

     label03:
        i1 = 1;

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines subExtract(int,int)>(1, 0);

        r8 = virtualinvoke $r7.<net.sourceforge.plantuml.command.BlocLines: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r11 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r12 = (net.sourceforge.plantuml.StringLocated) $r11;

        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        r14 = virtualinvoke $r13.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z3 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilinesBracket: boolean isLineConsistent(java.lang.String,int)>(r14, i1);

        if $z3 != 0 goto label05;

        $r16 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r16;

     label05:
        $z4 = virtualinvoke r14.<java.lang.String: boolean endsWith(java.lang.String)>("{");

        if $z4 == 0 goto label06;

        i1 = i1 + 1;

     label06:
        $z5 = virtualinvoke r14.<java.lang.String: boolean endsWith(java.lang.String)>("}");

        if $z5 == 0 goto label07;

        i1 = i1 + -1;

     label07:
        if i1 >= 0 goto label08;

        $r15 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r15;

     label08:
        goto label04;

     label09:
        if i1 == 0 goto label10;

        $r10 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r10;

     label10:
        virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilinesBracket: void actionIfCommandValid()>();

        $r9 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK>;

        return $r9;
    }

    protected abstract boolean isLineConsistent(java.lang.String, int);
}
