public class gen.lib.cgraph.mem__c extends java.lang.Object
{
    public static smetana.core.CFunction memopen;
    public static smetana.core.CFunction memalloc;
    public static smetana.core.CFunction memresize;
    public static smetana.core.CFunction memfree;

    public void <init>()
    {
        gen.lib.cgraph.mem__c r0;

        r0 := @this: gen.lib.cgraph.mem__c;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object memopen(h.ST_Agdisc_s)
    {
        h.ST_Agdisc_s r2;

        r2 := @parameter0: h.ST_Agdisc_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("akq0jgwdspf75ypeatgcnfn8w", "memopen");

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("akq0jgwdspf75ypeatgcnfn8w", "memopen");

        return null;
    }

    public static smetana.core.__ptr__ memalloc(smetana.core.__ptr__, smetana.core.size_t)
    {
        smetana.core.size_t r0;
        smetana.core.__ptr__ r1, r5;
        java.lang.Throwable $r3;

        r5 := @parameter0: smetana.core.__ptr__;

        r0 := @parameter1: smetana.core.size_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("9mtjrx0vjzwuecjwpxylr9tag", "memalloc");

     label1:
        r1 = virtualinvoke r0.<smetana.core.size_t: smetana.core.__ptr__ malloc()>();

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("9mtjrx0vjzwuecjwpxylr9tag", "memalloc");

        return r1;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("9mtjrx0vjzwuecjwpxylr9tag", "memalloc");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static smetana.core.__ptr__ memresize(smetana.core.__ptr__, smetana.core.__ptr__, smetana.core.size_t, smetana.core.size_t)
    {
        smetana.core.size_t r0, r7;
        smetana.core.__ptr__ r1, r6;
        java.lang.Throwable $r4;

        r6 := @parameter0: smetana.core.__ptr__;

        r1 := @parameter1: smetana.core.__ptr__;

        r7 := @parameter2: smetana.core.size_t;

        r0 := @parameter3: smetana.core.size_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("18v2hhjculhnb3b7fc4tx3yjw", "memresize");

     label1:
        virtualinvoke r0.<smetana.core.size_t: smetana.core.__ptr__ realloc(java.lang.Object)>(r1);

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("18v2hhjculhnb3b7fc4tx3yjw", "memresize");

        return r1;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("18v2hhjculhnb3b7fc4tx3yjw", "memresize");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static transient java.lang.Object memfree(java.lang.Object[])
    {
        java.lang.UnsupportedOperationException $r1;
        java.lang.Object[] r2;

        r2 := @parameter0: java.lang.Object[];

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("5yxdf2sc5xnic9d5j24m0a7yf");

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public static smetana.core.__ptr__ agalloc(h.ST_Agraph_s, smetana.core.size_t)
    {
        smetana.core.size_t r0;
        smetana.core.__ptr__ r1;
        java.lang.Throwable $r2;
        h.ST_Agraph_s r4;

        r4 := @parameter0: h.ST_Agraph_s;

        r0 := @parameter1: smetana.core.size_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("7newv1hmzvt4vtttc9cxdxfpn", "agalloc");

     label1:
        r1 = virtualinvoke r0.<smetana.core.size_t: smetana.core.__ptr__ malloc()>();

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("7newv1hmzvt4vtttc9cxdxfpn", "agalloc");

        return r1;

     label3:
        $r2 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("7newv1hmzvt4vtttc9cxdxfpn", "agalloc");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        gen.lib.cgraph.mem__c$1 $r0;
        gen.lib.cgraph.mem__c$2 $r1;
        gen.lib.cgraph.mem__c$3 $r2;
        gen.lib.cgraph.mem__c$4 $r3;

        $r0 = new gen.lib.cgraph.mem__c$1;

        specialinvoke $r0.<gen.lib.cgraph.mem__c$1: void <init>(java.lang.String)>("memopen");

        <gen.lib.cgraph.mem__c: smetana.core.CFunction memopen> = $r0;

        $r1 = new gen.lib.cgraph.mem__c$2;

        specialinvoke $r1.<gen.lib.cgraph.mem__c$2: void <init>(java.lang.String)>("memalloc");

        <gen.lib.cgraph.mem__c: smetana.core.CFunction memalloc> = $r1;

        $r2 = new gen.lib.cgraph.mem__c$3;

        specialinvoke $r2.<gen.lib.cgraph.mem__c$3: void <init>(java.lang.String)>("memresize");

        <gen.lib.cgraph.mem__c: smetana.core.CFunction memresize> = $r2;

        $r3 = new gen.lib.cgraph.mem__c$4;

        specialinvoke $r3.<gen.lib.cgraph.mem__c$4: void <init>(java.lang.String)>("memfree");

        <gen.lib.cgraph.mem__c: smetana.core.CFunction memfree> = $r3;

        return;
    }
}
