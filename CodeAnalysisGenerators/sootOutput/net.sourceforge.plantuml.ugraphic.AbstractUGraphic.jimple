public abstract class net.sourceforge.plantuml.ugraphic.AbstractUGraphic extends net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic
{
    private final java.lang.Object graphic;
    private final java.util.Map drivers;
    private static final net.sourceforge.plantuml.ugraphic.UDriver NOOP_DRIVER;

    public void <init>(net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.graphic.StringBounder, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1, $r5;
        java.lang.Object $r2, r7;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        java.util.HashMap $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r4 := @parameter2: net.sourceforge.plantuml.graphic.StringBounder;

        r7 := @parameter3: java.lang.Object;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = (net.sourceforge.plantuml.ugraphic.color.HColor) $r2;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.graphic.StringBounder)>($r5, r3, r4);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.util.Map drivers> = $r6;

        r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.lang.Object graphic> = r7;

        return;
    }

    protected void <init>(net.sourceforge.plantuml.ugraphic.AbstractUGraphic)
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0, r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic: void <init>(net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.util.Map drivers> = $r2;

        $r3 = r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.lang.Object graphic>;

        r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.lang.Object graphic> = $r3;

        return;
    }

    protected final java.lang.Object getGraphicObject()
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;
        java.lang.Object $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.lang.Object graphic>;

        return $r1;
    }

    protected boolean manageHiddenAutomatically()
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        return 1;
    }

    protected final void registerDriver(java.lang.Class, net.sourceforge.plantuml.ugraphic.UDriver)
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;
        java.lang.Class r1;
        net.sourceforge.plantuml.ugraphic.UDriver r2;
        java.util.Map $r3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.UDriver;

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.util.Map drivers>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected final void ignoreShape(java.lang.Class)
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;
        java.lang.Class r1;
        net.sourceforge.plantuml.ugraphic.UDriver $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        r1 := @parameter0: java.lang.Class;

        $r2 = <net.sourceforge.plantuml.ugraphic.AbstractUGraphic: net.sourceforge.plantuml.ugraphic.UDriver NOOP_DRIVER>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: void registerDriver(java.lang.Class,net.sourceforge.plantuml.ugraphic.UDriver)>(r1, $r2);

        return;
    }

    public final void draw(net.sourceforge.plantuml.ugraphic.UShape)
    {
        net.sourceforge.plantuml.ugraphic.UShape r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r1;
        java.util.Map $r2;
        java.lang.Class $r3, $r12, $r16;
        java.lang.Object $r4, $r9;
        net.sourceforge.plantuml.ugraphic.UDriver r5;
        net.sourceforge.plantuml.ugraphic.UParam $r6, $r8;
        double $d0, $d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper $r7;
        java.lang.UnsupportedOperationException $r10;
        java.lang.StringBuilder $r11, $r14, $r15, $r17;
        java.lang.String $r13, $r18;
        net.sourceforge.plantuml.ugraphic.UComment $r19;
        net.sourceforge.plantuml.graphic.SpecialText $r20;
        net.sourceforge.plantuml.graphic.TextBlock $r21;

        r1 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        $z0 = r0 instanceof net.sourceforge.plantuml.graphic.SpecialText;

        if $z0 == 0 goto label1;

        $r20 = (net.sourceforge.plantuml.graphic.SpecialText) r0;

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.graphic.SpecialText: net.sourceforge.plantuml.graphic.TextBlock getTitle()>();

        interfaceinvoke $r21.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        return;

     label1:
        $z1 = r0 instanceof net.sourceforge.plantuml.ugraphic.UEmpty;

        if $z1 == 0 goto label2;

        return;

     label2:
        $z2 = r0 instanceof net.sourceforge.plantuml.ugraphic.UComment;

        if $z2 == 0 goto label3;

        $r19 = (net.sourceforge.plantuml.ugraphic.UComment) r0;

        virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: void drawComment(net.sourceforge.plantuml.ugraphic.UComment)>($r19);

        return;

     label3:
        $r2 = r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.util.Map drivers>;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (net.sourceforge.plantuml.ugraphic.UDriver) $r4;

        if r5 != null goto label4;

        $r10 = new java.lang.UnsupportedOperationException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String toString()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r18);

        throw $r10;

     label4:
        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: net.sourceforge.plantuml.ugraphic.UParam getParam()>();

        $z3 = interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UParam: boolean isHidden()>();

        if $z3 == 0 goto label5;

        $z4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: boolean manageHiddenAutomatically()>();

        if $z4 == 0 goto label5;

        return;

     label5:
        virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: void beforeDraw()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: double getTranslateX()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: double getTranslateY()>();

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: net.sourceforge.plantuml.ugraphic.color.ColorMapper getColorMapper()>();

        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: net.sourceforge.plantuml.ugraphic.UParam getParam()>();

        $r9 = r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: java.lang.Object graphic>;

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UDriver: void draw(net.sourceforge.plantuml.ugraphic.UShape,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,java.lang.Object)>(r0, $d0, $d1, $r7, $r8, $r9);

        virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic: void afterDraw()>();

        return;
    }

    protected void drawComment(net.sourceforge.plantuml.ugraphic.UComment)
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;
        net.sourceforge.plantuml.ugraphic.UComment r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UComment;

        return;
    }

    protected void beforeDraw()
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        return;
    }

    protected void afterDraw()
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.AbstractUGraphic;

        return;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.ugraphic.AbstractUGraphic$1 $r0;

        $r0 = new net.sourceforge.plantuml.ugraphic.AbstractUGraphic$1;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.AbstractUGraphic$1: void <init>()>();

        <net.sourceforge.plantuml.ugraphic.AbstractUGraphic: net.sourceforge.plantuml.ugraphic.UDriver NOOP_DRIVER> = $r0;

        return;
    }
}
