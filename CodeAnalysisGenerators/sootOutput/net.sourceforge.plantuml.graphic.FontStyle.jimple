public final enum class net.sourceforge.plantuml.graphic.FontStyle extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.graphic.FontStyle PLAIN;
    public static final enum net.sourceforge.plantuml.graphic.FontStyle ITALIC;
    public static final enum net.sourceforge.plantuml.graphic.FontStyle BOLD;
    public static final enum net.sourceforge.plantuml.graphic.FontStyle UNDERLINE;
    public static final enum net.sourceforge.plantuml.graphic.FontStyle STRIKE;
    public static final enum net.sourceforge.plantuml.graphic.FontStyle WAVE;
    public static final enum net.sourceforge.plantuml.graphic.FontStyle BACKCOLOR;
    private static final net.sourceforge.plantuml.graphic.FontStyle[] $VALUES;

    public static net.sourceforge.plantuml.graphic.FontStyle[] values()
    {
        net.sourceforge.plantuml.graphic.FontStyle[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.graphic.FontStyle[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.graphic.FontStyle valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.graphic.FontStyle $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/graphic/FontStyle;", r0);

        $r2 = (net.sourceforge.plantuml.graphic.FontStyle) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.graphic.FontStyle r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.graphic.FontStyle;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.UFont mutateFont(net.sourceforge.plantuml.ugraphic.UFont)
    {
        net.sourceforge.plantuml.graphic.FontStyle r0, $r1, $r2, $r3;
        net.sourceforge.plantuml.ugraphic.UFont r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: net.sourceforge.plantuml.graphic.FontStyle;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle PLAIN>;

        if r0 != $r1 goto label1;

        $r7 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont withStyle(int)>(0);

        return $r7;

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle ITALIC>;

        if r0 != $r2 goto label2;

        $i2 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UFont: int getStyle()>();

        $i3 = $i2 | 2;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont withStyle(int)>($i3);

        return $r6;

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BOLD>;

        if r0 != $r3 goto label3;

        $i0 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UFont: int getStyle()>();

        $i1 = $i0 | 1;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont withStyle(int)>($i1);

        return $r5;

     label3:
        return r4;
    }

    public java.lang.String getActivationPattern()
    {
        net.sourceforge.plantuml.graphic.FontStyle r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: net.sourceforge.plantuml.graphic.FontStyle;

        $r1 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle PLAIN>;

        if r0 != $r1 goto label1;

        return "\\<[pP][lL][aA][iI][nN]\\>";

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle ITALIC>;

        if r0 != $r2 goto label2;

        return "\\<[iI]\\>";

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BOLD>;

        if r0 != $r3 goto label3;

        return "\\<[bB]\\>";

     label3:
        $r4 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle UNDERLINE>;

        if r0 != $r4 goto label4;

        return "\\<[uU](?::(#[0-9a-fA-F]{6}|\\w+))?\\>";

     label4:
        $r5 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE>;

        if r0 != $r5 goto label5;

        return "\\<[wW](?::(#[0-9a-fA-F]{6}|\\w+))?\\>";

     label5:
        $r6 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BACKCOLOR>;

        if r0 != $r6 goto label6;

        return "\\<[bB][aA][cC][kK](?::(#?\\w+(?:[-\\\\|/]#?\\w+)?))?\\>";

     label6:
        $r7 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle STRIKE>;

        if r0 != $r7 goto label7;

        return "\\<(?:s|S|strike|STRIKE|del|DEL)(?::(#[0-9a-fA-F]{6}|\\w+))?\\>";

     label7:
        return null;
    }

    public boolean canHaveExtendedColor()
    {
        net.sourceforge.plantuml.graphic.FontStyle r0, $r1, $r2, $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.graphic.FontStyle;

        $r1 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle UNDERLINE>;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE>;

        if r0 != $r2 goto label2;

        return 1;

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BACKCOLOR>;

        if r0 != $r3 goto label3;

        return 1;

     label3:
        $r4 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle STRIKE>;

        if r0 != $r4 goto label4;

        return 1;

     label4:
        return 0;
    }

    public java.lang.String getCreoleSyntax()
    {
        net.sourceforge.plantuml.graphic.FontStyle r0, $r1, $r2, $r3, $r4, $r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: net.sourceforge.plantuml.graphic.FontStyle;

        $r1 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle ITALIC>;

        if r0 != $r1 goto label1;

        return "//";

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BOLD>;

        if r0 != $r2 goto label2;

        return "\\*\\*";

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle UNDERLINE>;

        if r0 != $r3 goto label3;

        return "__";

     label3:
        $r4 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE>;

        if r0 != $r4 goto label4;

        return "~~";

     label4:
        $r5 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle STRIKE>;

        if r0 != $r5 goto label5;

        return "--";

     label5:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getExtendedColor(java.lang.String)
    {
        net.sourceforge.plantuml.graphic.FontStyle r0;
        java.lang.String $r1, r3, r5;
        net.sourceforge.plantuml.command.regex.Pattern2 $r2;
        net.sourceforge.plantuml.command.regex.Matcher2 r4;
        boolean $z0;
        int $i0;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r6;
        net.sourceforge.plantuml.ugraphic.color.HColor $r7;

        r0 := @this: net.sourceforge.plantuml.graphic.FontStyle;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.FontStyle: java.lang.String getActivationPattern()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>($r1);

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r3);

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r4.<net.sourceforge.plantuml.command.regex.Matcher2: int groupCount()>();

        if $i0 == 1 goto label2;

     label1:
        return null;

     label2:
        r5 = virtualinvoke r4.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        if r5 != null goto label3;

        return null;

     label3:
        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(java.lang.String)>(r5);

        return $r7;
    }

    public java.lang.String getDeactivationPattern()
    {
        net.sourceforge.plantuml.graphic.FontStyle r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: net.sourceforge.plantuml.graphic.FontStyle;

        $r1 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle PLAIN>;

        if r0 != $r1 goto label1;

        return "\\</[pP][lL][aA][iI][nN]\\>";

     label1:
        $r2 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle ITALIC>;

        if r0 != $r2 goto label2;

        return "\\</[iI]\\>";

     label2:
        $r3 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BOLD>;

        if r0 != $r3 goto label3;

        return "\\</[bB]\\>";

     label3:
        $r4 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle UNDERLINE>;

        if r0 != $r4 goto label4;

        return "\\</[uU]\\>";

     label4:
        $r5 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE>;

        if r0 != $r5 goto label5;

        return "\\</[wW]\\>";

     label5:
        $r6 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BACKCOLOR>;

        if r0 != $r6 goto label6;

        return "\\</[bB][aA][cC][kK]\\>";

     label6:
        $r7 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle STRIKE>;

        if r0 != $r7 goto label7;

        return "\\</(?:s|S|strike|STRIKE|del|DEL)\\>";

     label7:
        return null;
    }

    public static net.sourceforge.plantuml.graphic.FontStyle getStyle(java.lang.String)
    {
        java.util.EnumSet $r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2;
        java.lang.String r3, $r6, $r7;
        java.lang.Object $r4;
        net.sourceforge.plantuml.graphic.FontStyle r5;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/graphic/FontStyle;");

        r1 = virtualinvoke $r0.<java.util.EnumSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.graphic.FontStyle) $r4;

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.graphic.FontStyle: java.lang.String getActivationPattern()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r6);

        if $z1 != 0 goto label2;

        $r7 = virtualinvoke r5.<net.sourceforge.plantuml.graphic.FontStyle: java.lang.String getDeactivationPattern()>();

        $z2 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r7);

        if $z2 == 0 goto label3;

     label2:
        return r5;

     label3:
        goto label1;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r3);

        throw $r2;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.graphic.FontStyle $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        net.sourceforge.plantuml.graphic.FontStyle[] $r7;

        $r0 = new net.sourceforge.plantuml.graphic.FontStyle;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.FontStyle: void <init>(java.lang.String,int)>("PLAIN", 0);

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle PLAIN> = $r0;

        $r1 = new net.sourceforge.plantuml.graphic.FontStyle;

        specialinvoke $r1.<net.sourceforge.plantuml.graphic.FontStyle: void <init>(java.lang.String,int)>("ITALIC", 1);

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle ITALIC> = $r1;

        $r2 = new net.sourceforge.plantuml.graphic.FontStyle;

        specialinvoke $r2.<net.sourceforge.plantuml.graphic.FontStyle: void <init>(java.lang.String,int)>("BOLD", 2);

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BOLD> = $r2;

        $r3 = new net.sourceforge.plantuml.graphic.FontStyle;

        specialinvoke $r3.<net.sourceforge.plantuml.graphic.FontStyle: void <init>(java.lang.String,int)>("UNDERLINE", 3);

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle UNDERLINE> = $r3;

        $r4 = new net.sourceforge.plantuml.graphic.FontStyle;

        specialinvoke $r4.<net.sourceforge.plantuml.graphic.FontStyle: void <init>(java.lang.String,int)>("STRIKE", 4);

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle STRIKE> = $r4;

        $r5 = new net.sourceforge.plantuml.graphic.FontStyle;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontStyle: void <init>(java.lang.String,int)>("WAVE", 5);

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE> = $r5;

        $r6 = new net.sourceforge.plantuml.graphic.FontStyle;

        specialinvoke $r6.<net.sourceforge.plantuml.graphic.FontStyle: void <init>(java.lang.String,int)>("BACKCOLOR", 6);

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BACKCOLOR> = $r6;

        $r7 = newarray (net.sourceforge.plantuml.graphic.FontStyle)[7];

        $r8 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle PLAIN>;

        $r7[0] = $r8;

        $r9 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle ITALIC>;

        $r7[1] = $r9;

        $r10 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BOLD>;

        $r7[2] = $r10;

        $r11 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle UNDERLINE>;

        $r7[3] = $r11;

        $r12 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle STRIKE>;

        $r7[4] = $r12;

        $r13 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE>;

        $r7[5] = $r13;

        $r14 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BACKCOLOR>;

        $r7[6] = $r14;

        <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle[] $VALUES> = $r7;

        return;
    }
}
