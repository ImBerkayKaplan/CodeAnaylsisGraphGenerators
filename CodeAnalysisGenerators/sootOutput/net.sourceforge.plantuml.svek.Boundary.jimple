public class net.sourceforge.plantuml.svek.Boundary extends net.sourceforge.plantuml.graphic.AbstractTextBlock
{
    private final double margin;
    private final double radius;
    private final double left;
    private final net.sourceforge.plantuml.graphic.SymbolContext symbolContext;

    public void <init>(net.sourceforge.plantuml.graphic.SymbolContext)
    {
        net.sourceforge.plantuml.svek.Boundary r0;
        net.sourceforge.plantuml.graphic.SymbolContext r1;

        r0 := @this: net.sourceforge.plantuml.svek.Boundary;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Boundary: double left> = 17.0;

        r0.<net.sourceforge.plantuml.svek.Boundary: double radius> = 12.0;

        r0.<net.sourceforge.plantuml.svek.Boundary: double margin> = 4.0;

        r0.<net.sourceforge.plantuml.svek.Boundary: double margin> = 4.0;

        r0.<net.sourceforge.plantuml.svek.Boundary: double radius> = 12.0;

        r0.<net.sourceforge.plantuml.svek.Boundary: double left> = 17.0;

        r0.<net.sourceforge.plantuml.svek.Boundary: net.sourceforge.plantuml.graphic.SymbolContext symbolContext> = r1;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.Boundary r0;
        net.sourceforge.plantuml.graphic.SymbolContext $r1, $r4, $r7, $r10;
        net.sourceforge.plantuml.ugraphic.UEllipse $r2;
        double $d0, $d1, $d2, $d3, d6, d7;
        net.sourceforge.plantuml.ugraphic.UPath $r5, $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11, $r16;
        net.sourceforge.plantuml.ugraphic.UGraphic $r12, $r15, $r17, r18, r19;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r13;
        net.sourceforge.plantuml.ugraphic.UBackground $r14;

        r0 := @this: net.sourceforge.plantuml.svek.Boundary;

        r18 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d6 = 0.0 + 4.0;

        d7 = 0.0 + 4.0;

        $r1 = r0.<net.sourceforge.plantuml.svek.Boundary: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        r19 = virtualinvoke $r1.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UGraphic)>(r18);

        $r2 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(24.0, 24.0);

        $r4 = r0.<net.sourceforge.plantuml.svek.Boundary: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d0 = virtualinvoke $r4.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d0);

        $r5 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 0.0);

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 24.0);

        $r7 = r0.<net.sourceforge.plantuml.svek.Boundary: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d1 = virtualinvoke $r7.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>($d1);

        $r8 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 0.0);

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 24.0);

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 12.0);

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(17.0, 12.0);

        $r10 = r0.<net.sourceforge.plantuml.svek.Boundary: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $d2 = virtualinvoke $r10.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>($d2);

        $r11 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, d7);

        $r12 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        $r13 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r15 = interfaceinvoke $r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r14);

        interfaceinvoke $r15.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d3 = d6 + 17.0;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d3, d7);

        $r17 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        interfaceinvoke $r17.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.Boundary r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.Boundary;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(49.0, 32.0);

        return $r0;
    }
}
