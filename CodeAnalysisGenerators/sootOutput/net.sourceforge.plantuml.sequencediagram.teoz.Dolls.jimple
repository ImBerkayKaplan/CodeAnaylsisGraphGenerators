public class net.sourceforge.plantuml.sequencediagram.teoz.Dolls extends java.lang.Object
{
    private final java.util.Map alls;

    public void <init>(net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        java.util.LinkedHashMap $r1;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r3, $r8;
        java.util.Collection $r4;
        java.util.Iterator r5, r12;
        boolean $z0, $z1;
        java.lang.Object $r6, $r13;
        net.sourceforge.plantuml.sequencediagram.Participant r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r9;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r10, r14;
        java.util.List $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls> = $r1;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: java.util.Collection participants()>();

        r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Participant) $r6;

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace get(net.sourceforge.plantuml.sequencediagram.Participant)>(r7);

        r10 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getEnglober()>();

        if r10 == null goto label3;

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: java.util.List getGenealogy()>();

        r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.sequencediagram.ParticipantEnglober) $r13;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.sequencediagram.ParticipantEnglober,net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)>(r7, r14, r2);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    private void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.ParticipantEnglober, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r1;
        java.util.Map $r2, $r6;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Participant r4;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r5;
        net.sourceforge.plantuml.sequencediagram.Doll r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r4 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober;

        r5 := @parameter2: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (net.sourceforge.plantuml.sequencediagram.Doll) $r3;

        if r8 != null goto label1;

        r8 = staticinvoke <net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Doll createTeoz(net.sourceforge.plantuml.sequencediagram.ParticipantEnglober,net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)>(r1, r5);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

     label1:
        virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.Doll: void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant)>(r4);

        return;
    }

    private net.sourceforge.plantuml.sequencediagram.Doll getParent(net.sourceforge.plantuml.sequencediagram.Doll)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0, $r6;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r1, r2;
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r3;
        java.util.Map $r4;
        java.lang.Object $r5;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.Doll;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()>();

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParent()>();

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = r3.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = (net.sourceforge.plantuml.sequencediagram.Doll) $r5;

        return $r6;
    }

    public int size()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public double getOffsetForEnglobers(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.Doll r5, r6;
        byte $b0;
        double $d0, d1, d2;
        net.sourceforge.plantuml.graphic.StringBounder r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.Doll) $r4;

        d2 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.Doll: double getTitlePreferredHeight()>();

        r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: net.sourceforge.plantuml.sequencediagram.Doll getParent(net.sourceforge.plantuml.sequencediagram.Doll)>(r5);

        if r6 == null goto label2;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.Doll: double getTitlePreferredHeight()>();

        d2 = d2 + $d0;

     label2:
        $b0 = d2 cmpl d1;

        if $b0 <= 0 goto label3;

        d1 = d2;

     label3:
        goto label1;

     label4:
        return d1;
    }

    public void addConstraints(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        java.util.Map $r1, $r3;
        java.util.Collection $r2, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r7;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        java.util.Iterator r8, r10;
        net.sourceforge.plantuml.sequencediagram.Doll r9, r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r8 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.sequencediagram.Doll) $r7;

        virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.Doll: void addInternalConstraints(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        goto label1;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r10 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (net.sourceforge.plantuml.sequencediagram.Doll) $r5;

        virtualinvoke r11.<net.sourceforge.plantuml.sequencediagram.Doll: void addConstraintAfter(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        goto label3;

     label4:
        return;
    }

    public void drawEnglobers(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.Doll r5, $r8;
        net.sourceforge.plantuml.ugraphic.UGraphic r6;
        double d0;
        net.sourceforge.plantuml.skin.Context2D r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r6 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        r7 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.Doll) $r4;

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: net.sourceforge.plantuml.sequencediagram.Doll getParent(net.sourceforge.plantuml.sequencediagram.Doll)>(r5);

        virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.Doll: void drawMe(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.sequencediagram.Doll)>(r6, d0, r7, $r8);

        goto label1;

     label2:
        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        int $i0;
        java.util.ArrayList $r1;
        java.util.Map $r3;
        java.util.Collection $r4;
        java.util.Iterator r5;
        boolean $z0;
        net.sourceforge.plantuml.real.Real $r6, $r10;
        java.lang.Object $r7;
        net.sourceforge.plantuml.sequencediagram.Doll r8;
        net.sourceforge.plantuml.graphic.StringBounder r9;
        java.lang.IllegalStateException $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r9 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: int size()>();

        if $i0 != 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.sequencediagram.Doll) $r7;

        $r10 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        $r6 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real min(java.util.Collection)>($r1);

        return $r6;
    }

    public net.sourceforge.plantuml.real.Real getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Dolls r0;
        int $i0;
        java.util.ArrayList $r1;
        java.util.Map $r3;
        java.util.Collection $r4;
        java.util.Iterator r5;
        boolean $z0;
        net.sourceforge.plantuml.real.Real $r6, $r10;
        java.lang.Object $r7;
        net.sourceforge.plantuml.sequencediagram.Doll r8;
        net.sourceforge.plantuml.graphic.StringBounder r9;
        java.lang.IllegalStateException $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.Dolls;

        r9 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: int size()>();

        if $i0 != 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.Dolls: java.util.Map alls>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.sequencediagram.Doll) $r7;

        $r10 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.real.Real getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        $r6 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real max(java.util.Collection)>($r1);

        return $r6;
    }
}
