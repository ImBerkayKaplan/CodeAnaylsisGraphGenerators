public class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit extends net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder
{

    public void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.graphic.StringBounder, java.util.List)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        java.util.List r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.StringBounder,java.util.List)>(r1, r2, r3);

        return;
    }

    public net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit r6;

        r6 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activityDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName arrow>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.Ftile doStep1(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0, $r16, r26, r46;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit r3;
        net.sourceforge.plantuml.style.StyleSignature $r4;
        net.sourceforge.plantuml.ISkinParam $r5, $r9, $r12, $r30, $r33, $r35, $r38, $r40;
        net.sourceforge.plantuml.style.StyleBuilder $r6;
        net.sourceforge.plantuml.style.Style r7;
        boolean $z0, $z1, $z3;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering $r8, r29;
        net.sourceforge.plantuml.graphic.Rainbow $r10, $r31, $r37, r43, r45;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit $r11, $r21;
        net.sourceforge.plantuml.ugraphic.color.HColor $r13;
        java.util.List $r14, $r19;
        java.lang.Object $r15, $r25;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r17;
        net.sourceforge.plantuml.graphic.StringBounder $r20, $r22, $r27;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7, d8;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r23, r28, r47;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple $r24;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit$ConnectionIn $r32;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r34, $r39;
        net.sourceforge.plantuml.api.ThemeStyle $r36, $r41;
        java.util.Iterator r44;

        r3 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r7 = virtualinvoke $r4.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r6);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r38 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r39 = interfaceinvoke $r38.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r40 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r41 = interfaceinvoke $r40.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r43 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r7, $r39, $r41);

        goto label2;

     label1:
        $r8 = interfaceinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getInLinkRendering()>();

        $r9 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.ISkinParam)>($r9);

        r43 = virtualinvoke $r8.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r10);

     label2:
        $r11 = new net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit;

        $r12 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r13 = specialinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ugraphic.color.HColor getThin1Color(net.sourceforge.plantuml.graphic.Rainbow)>(r43);

        $r14 = r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: java.util.List list99>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r15;

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        specialinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>($r12, $r13, $r17);

        d6 = 0.0;

        d7 = 0.0;

        d8 = 0.0;

        $r19 = r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: java.util.List list99>;

        r44 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r25 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r26 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r25;

        $r27 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r28 = interfaceinvoke r26.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r27);

        $b2 = d7 cmpl 0.0;

        if $b2 != 0 goto label4;

        $d5 = virtualinvoke r28.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d7 = d6 + $d5;

     label4:
        $d3 = virtualinvoke r28.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d8 = d6 + $d3;

        r29 = interfaceinvoke r26.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getInLinkRendering()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label5;

        $r33 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r34 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r35 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r36 = interfaceinvoke $r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r37 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r7, $r34, $r36);

        r45 = virtualinvoke r29.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r37);

        goto label6;

     label5:
        $r30 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r31 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.ISkinParam)>($r30);

        r45 = virtualinvoke r29.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r31);

     label6:
        $r32 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit$ConnectionIn;

        specialinvoke $r32.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit$ConnectionIn: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double,net.sourceforge.plantuml.graphic.Rainbow)>(r3, $r11, r26, d6, r45);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r32);

        $d4 = virtualinvoke r28.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        d6 = d6 + $d4;

        goto label3;

     label7:
        r46 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.FtileUtils: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile addConnection(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,java.util.Collection)>(r0, $r1);

        $r20 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r47 = interfaceinvoke r46.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r20);

        $d0 = virtualinvoke r47.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $b0 = d8 cmpg $d0;

        if $b0 >= 0 goto label8;

        d8 = virtualinvoke r47.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

     label8:
        $d1 = virtualinvoke r47.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $b1 = d7 cmpl $d1;

        if $b1 <= 0 goto label9;

        d7 = virtualinvoke r47.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

     label9:
        $r21 = (net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit) $r11;

        $r22 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r23 = interfaceinvoke r46.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r22);

        $d2 = virtualinvoke $r23.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        virtualinvoke $r21.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit: void setGeom(double,double,double)>(d7, d8, $d2);

        $r24 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple;

        specialinvoke $r24.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>($r11, r46);

        return $r24;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getThin1Color(net.sourceforge.plantuml.graphic.Rainbow)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.ISkinParam $r2, $r10, $r14, $r16;
        net.sourceforge.plantuml.style.StyleBuilder $r3;
        net.sourceforge.plantuml.style.Style r4;
        java.util.List $r5;
        java.util.Iterator r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r8;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering r9;
        net.sourceforge.plantuml.graphic.Rainbow $r11, r12, $r18, r19;
        net.sourceforge.plantuml.ugraphic.color.HColor $r13;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r15;
        net.sourceforge.plantuml.api.ThemeStyle $r17;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit;

        r12 := @parameter0: net.sourceforge.plantuml.graphic.Rainbow;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r4 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: java.util.List list99>;

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r7;

        r9 = interfaceinvoke r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getInLinkRendering()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label2;

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r18 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r4, $r15, $r17);

        r19 = virtualinvoke r9.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r18);

        goto label3;

     label2:
        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.ISkinParam)>($r10);

        r19 = virtualinvoke r9.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r11);

     label3:
        $z2 = virtualinvoke r19.<net.sourceforge.plantuml.graphic.Rainbow: boolean isInvisible()>();

        if $z2 != 0 goto label4;

        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        return $r13;

     label4:
        goto label1;

     label5:
        return null;
    }

    private boolean hasOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r4;
        net.sourceforge.plantuml.graphic.StringBounder $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: java.util.List list99>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r3;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r6 = interfaceinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $z1 = virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.Ftile doStep2(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r24, $r29;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r2, r25, $r30;
        boolean $z0, $z1, $z2, $z3, $z5, $z6;
        net.sourceforge.plantuml.style.StyleSignature $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r8, $r11, $r27, $r33, $r35, $r38, $r40;
        net.sourceforge.plantuml.style.StyleBuilder $r5;
        net.sourceforge.plantuml.style.Style r6;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering r7, r26;
        net.sourceforge.plantuml.graphic.Rainbow $r9, $r28, $r37, $r42, r45, r47;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit $r10, $r20;
        net.sourceforge.plantuml.ugraphic.color.HColor $r12;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r13;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple $r15;
        java.util.ArrayList $r16;
        java.util.List $r18;
        java.util.Iterator r19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8, d9;
        byte $b0, $b1, $b2;
        java.lang.Object $r21;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r22, r32, r44, r48;
        net.sourceforge.plantuml.ugraphic.UTranslate r23;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit$ConnectionOut $r31;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r34, $r39;
        net.sourceforge.plantuml.api.ThemeStyle $r36, $r41;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileKilled $r43;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit;

        r32 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r44 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = interfaceinvoke r44.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: boolean hasOut()>();

        if $z0 != 0 goto label01;

        $r43 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileKilled;

        specialinvoke $r43.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileKilled: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r44);

        return $r43;

     label01:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r6 = virtualinvoke $r3.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r5);

        r7 = interfaceinvoke r44.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getInLinkRendering()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label02;

        $r38 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r39 = interfaceinvoke $r38.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r40 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r41 = interfaceinvoke $r40.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r42 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r6, $r39, $r41);

        r45 = virtualinvoke r7.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r42);

        goto label03;

     label02:
        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.ISkinParam)>($r8);

        r45 = virtualinvoke r7.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r9);

     label03:
        $r10 = new net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r12 = virtualinvoke r45.<net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneOutForStep2()>();

        specialinvoke $r10.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>($r11, $r12, $r13);

        $r15 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple;

        specialinvoke $r15.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r44, $r10);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        d7 = 0.0;

        d8 = 0.0;

        d9 = 0.0;

        $r18 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: java.util.List list99>;

        r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r21 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r22 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r21;

        r23 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(1.5);

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r25 = interfaceinvoke r22.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r24);

        $z2 = virtualinvoke r25.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z2 == 0 goto label06;

        $b2 = d8 cmpl 0.0;

        if $b2 != 0 goto label05;

        $d6 = virtualinvoke r25.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d8 = d7 + $d6;

     label05:
        $d5 = virtualinvoke r25.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d9 = d7 + $d5;

     label06:
        r26 = interfaceinvoke r22.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getOutLinkRendering()>();

        $z6 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z6 == 0 goto label07;

        $r33 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r34 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r35 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r36 = interfaceinvoke $r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r37 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r6, $r34, $r36);

        r47 = virtualinvoke r26.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r37);

        goto label08;

     label07:
        $r27 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r28 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.ISkinParam)>($r27);

        r47 = virtualinvoke r26.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>($r28);

     label08:
        $r29 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r30 = interfaceinvoke r22.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r29);

        $z3 = virtualinvoke $r30.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z3 == 0 goto label09;

        $r31 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit$ConnectionOut;

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit: double getHeightOfMiddle(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r32);

        specialinvoke $r31.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit$ConnectionOut: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit,net.sourceforge.plantuml.ugraphic.UTranslate,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double,net.sourceforge.plantuml.graphic.Rainbow,double)>(r0, r23, r22, $r10, d7, r47, $d4);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r31);

     label09:
        $d3 = virtualinvoke r25.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        d7 = d7 + $d3;

        goto label04;

     label10:
        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $b0 = d9 cmpg $d0;

        if $b0 >= 0 goto label11;

        d9 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

     label11:
        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $b1 = d8 cmpl $d1;

        if $b1 <= 0 goto label12;

        d8 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

     label12:
        $r20 = (net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit) $r10;

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        virtualinvoke $r20.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit: void setGeom(double,double,double)>(d8, d9, $d2);

        r48 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.FtileUtils: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile addConnection(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,java.util.Collection)>($r15, $r16);

        return r48;
    }
}
