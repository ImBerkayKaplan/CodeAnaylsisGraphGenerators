public class net.sourceforge.plantuml.svek.image.EntityImageBranch extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private static final int SIZE;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.svek.image.EntityImageBranch r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageBranch;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        return;
    }

    public net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.style.StyleSignature $r6;
        net.sourceforge.plantuml.svek.image.EntityImageBranch r7;

        r7 := @this: net.sourceforge.plantuml.svek.image.EntityImageBranch;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[5];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activityDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activity>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName diamond>;

        $r0[4] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r6;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.image.EntityImageBranch r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageBranch;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(24.0, 24.0);

        return $r0;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UPolygon $r0;
        net.sourceforge.plantuml.svek.image.EntityImageBranch r2;
        net.sourceforge.plantuml.ISkinParam $r3, $r8, $r14, $r21, $r25, $r27, $r31, $r33;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r4, $r9, $r16;
        net.sourceforge.plantuml.ColorParam[] $r5, $r10;
        net.sourceforge.plantuml.ColorParam $r6, $r7, $r11, $r12;
        net.sourceforge.plantuml.ugraphic.UStroke $r13, r39;
        boolean $z0, $z1;
        net.sourceforge.plantuml.cucadiagram.IEntity $r15, $r46, $r54;
        net.sourceforge.plantuml.ugraphic.UGraphic r19, $r58, $r60, $r61;
        net.sourceforge.plantuml.style.StyleSignature $r20;
        net.sourceforge.plantuml.style.StyleBuilder $r22;
        net.sourceforge.plantuml.style.PName $r23, $r29, $r35;
        net.sourceforge.plantuml.style.Value $r24, $r30, $r36;
        net.sourceforge.plantuml.api.ThemeStyle $r26, $r32;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r28, $r34;
        double d0;
        net.sourceforge.plantuml.ugraphic.color.HColor r37, r38;
        net.sourceforge.plantuml.style.Style r40;
        java.util.EnumMap $r41;
        net.sourceforge.plantuml.ugraphic.UGroupType $r43, $r51;
        java.lang.StringBuilder $r44, $r45, $r48, $r49, $r52, $r53, $r56;
        net.sourceforge.plantuml.cucadiagram.Code $r47, $r55;
        java.lang.String $r50, $r57;
        net.sourceforge.plantuml.ugraphic.UBackground $r59;

        r2 := @this: net.sourceforge.plantuml.svek.image.EntityImageBranch;

        r19 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        d0 = 0.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(12.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(24.0, 12.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(12.0, 24.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 12.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(12.0, 0.0);

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r5 = newarray (net.sourceforge.plantuml.ColorParam)[2];

        $r6 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityDiamondBorder>;

        $r5[0] = $r6;

        $r7 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityBorder>;

        $r5[1] = $r7;

        r37 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r3, $r4, $r5);

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r10 = newarray (net.sourceforge.plantuml.ColorParam)[2];

        $r11 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityDiamondBackground>;

        $r10[0] = $r11;

        $r12 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityBackground>;

        $r10[1] = $r12;

        r38 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r8, $r9, $r10);

        $r13 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r39 = $r13;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r20 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()>();

        $r21 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r40 = virtualinvoke $r20.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r22);

        $r23 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r24 = virtualinvoke r40.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r23);

        $r25 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r27 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r28 = interfaceinvoke $r27.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r37 = interfaceinvoke $r24.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r26, $r28);

        $r29 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r30 = virtualinvoke r40.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r29);

        $r31 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r32 = interfaceinvoke $r31.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r33 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r34 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r38 = interfaceinvoke $r30.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r32, $r34);

        r39 = virtualinvoke r40.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $r35 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r36 = virtualinvoke r40.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r35);

        d0 = interfaceinvoke $r36.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        goto label2;

     label1:
        $r14 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r16);

        if $z1 == 0 goto label2;

        d0 = 5.0;

     label2:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void setDeltaShadow(double)>(d0);

        $r41 = new java.util.EnumMap;

        specialinvoke $r41.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/UGroupType;");

        $r43 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType CLASS>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem ");

        $r46 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r47 = interfaceinvoke $r46.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" selected");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r50);

        $r51 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem_");

        $r54 = virtualinvoke r2.<net.sourceforge.plantuml.svek.image.EntityImageBranch: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r55 = interfaceinvoke $r54.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, $r57);

        interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r41);

        $r58 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r37);

        $r59 = interfaceinvoke r38.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r60 = interfaceinvoke $r58.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r59);

        $r61 = interfaceinvoke $r60.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r39);

        interfaceinvoke $r61.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageBranch r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageBranch;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType DIAMOND>;

        return $r0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.image.EntityImageBranch: int SIZE> = 12;

        return;
    }
}
