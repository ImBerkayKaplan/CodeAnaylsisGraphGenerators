class net.sourceforge.plantuml.zopfli.Hash extends java.lang.Object
{
    private static final int[] seq;
    final int[] head;
    final int[] prev;
    private final int[] hashVal;
    final int[] same;
    int val;
    private final int[] head2;
    final int[] prev2;
    final int[] hashVal2;

    public void <init>()
    {
        net.sourceforge.plantuml.zopfli.Hash r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: net.sourceforge.plantuml.zopfli.Hash;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[65536];

        r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head> = $r1;

        $r2 = newarray (int)[32768];

        r0.<net.sourceforge.plantuml.zopfli.Hash: int[] prev> = $r2;

        $r3 = newarray (int)[32768];

        r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal> = $r3;

        $r4 = newarray (int)[32768];

        r0.<net.sourceforge.plantuml.zopfli.Hash: int[] same> = $r4;

        $r5 = newarray (int)[65536];

        r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head2> = $r5;

        $r6 = newarray (int)[32768];

        r0.<net.sourceforge.plantuml.zopfli.Hash: int[] prev2> = $r6;

        $r7 = newarray (int)[32768];

        r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal2> = $r7;

        return;
    }

    public void init(byte[], int, int, int)
    {
        net.sourceforge.plantuml.zopfli.Hash r0;
        int[] r1, r2, r3, r4, r5, r6, r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        byte[] r15;
        int i0, $i2, $i3, $i5, $i6, $i7, i8, i9, i10, $i11, $i12, $i13, $i15, $i16, i17, $i18, $i20, $i21, i23, i24, $i25, i26, $i28, $i29, $i30, i31, i32, i33, i34, i35, $i37;
        byte $b1, $b4, b14, $b19, $b22;

        r0 := @this: net.sourceforge.plantuml.zopfli.Hash;

        r15 := @parameter0: byte[];

        i0 := @parameter1: int;

        i8 := @parameter2: int;

        i10 := @parameter3: int;

        r1 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal>;

        r2 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head>;

        r3 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] same>;

        r4 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] prev>;

        r5 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal2>;

        r6 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head2>;

        r7 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] prev2>;

        $r8 = <net.sourceforge.plantuml.zopfli.Cookie: int[] intMOnes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r2, 0, 65536);

        $r9 = <net.sourceforge.plantuml.zopfli.Cookie: int[] intMOnes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r1, 0, 32768);

        $r10 = <net.sourceforge.plantuml.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r3, 32768, 0);

        $r11 = <net.sourceforge.plantuml.zopfli.Hash: int[] seq>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r4, 0, 32768);

        $r12 = <net.sourceforge.plantuml.zopfli.Cookie: int[] intMOnes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r6, 0, 65536);

        $r13 = <net.sourceforge.plantuml.zopfli.Cookie: int[] intMOnes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r5, 0, 32768);

        $r14 = <net.sourceforge.plantuml.zopfli.Hash: int[] seq>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, r7, 0, 32768);

        $b1 = r15[i0];

        $i2 = $b1 & 255;

        $i6 = $i2 << 5;

        $i3 = i0 + 1;

        $b4 = r15[$i3];

        $i5 = $b4 & 255;

        $i7 = $i6 ^ $i5;

        i23 = $i7 & 32767;

        i24 = i0;

     label01:
        if i24 >= i8 goto label11;

        i9 = i24 & 32767;

        $i12 = i23 << 5;

        $i11 = i24 + 2;

        if $i11 >= i10 goto label02;

        $i21 = i24 + 2;

        $b22 = r15[$i21];

        $i25 = $b22 & 255;

        goto label03;

     label02:
        $i25 = 0;

     label03:
        $i13 = $i12 ^ $i25;

        i23 = $i13 & 32767;

        r1[i9] = i23;

        i26 = r2[i23];

        if i26 == -1 goto label04;

        $i20 = r1[i26];

        if $i20 != i23 goto label04;

        $i28 = i26;

        goto label05;

     label04:
        $i28 = i9;

     label05:
        r4[i9] = $i28;

        r2[i23] = i9;

        $i29 = i24 - 1;

        $i30 = $i29 & 32767;

        i31 = r3[$i30];

        if i31 >= 1 goto label06;

        i31 = 1;

     label06:
        i32 = i31 + i24;

        b14 = r15[i24];

     label07:
        if i32 >= i10 goto label08;

        $b19 = r15[i32];

        if b14 != $b19 goto label08;

        i32 = i32 + 1;

        goto label07;

     label08:
        i33 = i32 - i24;

        i34 = i33 + -1;

        r3[i9] = i34;

        $i15 = i34 - 3;

        $i16 = $i15 & 255;

        i35 = $i16 ^ i23;

        r5[i9] = i35;

        i17 = r6[i35];

        if i17 == -1 goto label09;

        $i18 = r5[i17];

        if $i18 != i35 goto label09;

        $i37 = i17;

        goto label10;

     label09:
        $i37 = i9;

     label10:
        r7[i9] = $i37;

        r6[i35] = i9;

        i24 = i24 + 1;

        goto label01;

     label11:
        r0.<net.sourceforge.plantuml.zopfli.Hash: int val> = i23;

        return;
    }

    public void updateHash(byte[], int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, i9, $i10, $i12, $i13, i15, $i16, i17, i18, $i20, $i21, $i22, i23, i24, i25, i26, i27, $i29;
        net.sourceforge.plantuml.zopfli.Hash r0;
        int[] $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        byte[] r3;
        byte b6, $b11, $b14;

        r0 := @this: net.sourceforge.plantuml.zopfli.Hash;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i1 = i0 & 32767;

        i15 = r0.<net.sourceforge.plantuml.zopfli.Hash: int val>;

        $i4 = i15 << 5;

        $i3 = i0 + 2;

        if $i3 >= i2 goto label1;

        $i13 = i0 + 2;

        $b14 = r3[$i13];

        $i16 = $b14 & 255;

        goto label2;

     label1:
        $i16 = 0;

     label2:
        $i5 = $i4 ^ $i16;

        i17 = $i5 & 32767;

        $r1 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal>;

        $r1[i1] = i17;

        $r2 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head>;

        i18 = $r2[i17];

        $r9 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] prev>;

        if i18 == -1 goto label3;

        $r8 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal>;

        $i12 = $r8[i18];

        if $i12 != i17 goto label3;

        $i20 = i18;

        goto label4;

     label3:
        $i20 = i1;

     label4:
        $r9[i1] = $i20;

        $r10 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head>;

        $r10[i17] = i1;

        $r11 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] same>;

        $i21 = i0 - 1;

        $i22 = $i21 & 32767;

        i23 = $r11[$i22];

        if i23 >= 1 goto label5;

        i23 = 1;

     label5:
        i24 = i23 + i0;

        b6 = r3[i0];

     label6:
        if i24 >= i2 goto label7;

        $b11 = r3[i24];

        if b6 != $b11 goto label7;

        i24 = i24 + 1;

        goto label6;

     label7:
        i25 = i24 - i0;

        i26 = i25 + -1;

        $r4 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] same>;

        $r4[i1] = i26;

        $i7 = i26 - 3;

        $i8 = $i7 & 255;

        i27 = $i8 ^ i17;

        $r5 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal2>;

        $r5[i1] = i27;

        $r6 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head2>;

        i9 = $r6[i27];

        $r12 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] prev2>;

        if i9 == -1 goto label8;

        $r7 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] hashVal2>;

        $i10 = $r7[i9];

        if $i10 != i27 goto label8;

        $i29 = i9;

        goto label9;

     label8:
        $i29 = i1;

     label9:
        $r12[i1] = $i29;

        $r13 = r0.<net.sourceforge.plantuml.zopfli.Hash: int[] head2>;

        $r13[i27] = i1;

        r0.<net.sourceforge.plantuml.zopfli.Hash: int val> = i17;

        return;
    }

    static void <clinit>()
    {
        int[] $r0, r1;
        int i1;

        $r0 = newarray (int)[32768];

        <net.sourceforge.plantuml.zopfli.Hash: int[] seq> = $r0;

        r1 = <net.sourceforge.plantuml.zopfli.Hash: int[] seq>;

        i1 = 0;

     label1:
        if i1 >= 32768 goto label2;

        r1[i1] = i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
