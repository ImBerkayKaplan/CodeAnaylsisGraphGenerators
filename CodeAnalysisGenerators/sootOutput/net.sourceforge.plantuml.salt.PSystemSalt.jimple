public class net.sourceforge.plantuml.salt.PSystemSalt extends net.sourceforge.plantuml.TitledDiagram implements net.sourceforge.plantuml.WithSprite
{
    private final java.util.List data;
    private final net.sourceforge.plantuml.salt.Dictionary dictionary;
    private boolean iamSalt;

    public void <init>(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, java.util.List)
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        net.sourceforge.plantuml.UmlDiagramType $r3;
        net.sourceforge.plantuml.salt.Dictionary $r4;
        java.util.List r5;

        r0 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r5 := @parameter2: java.util.List;

        $r3 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType SALT>;

        specialinvoke r0.<net.sourceforge.plantuml.TitledDiagram: void <init>(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.UmlDiagramType)>(r1, r2, $r3);

        $r4 = new net.sourceforge.plantuml.salt.Dictionary;

        specialinvoke $r4.<net.sourceforge.plantuml.salt.Dictionary: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.salt.Dictionary dictionary> = $r4;

        r0.<net.sourceforge.plantuml.salt.PSystemSalt: java.util.List data> = r5;

        return;
    }

    public void <init>(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource)
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        java.util.ArrayList $r3;

        r0 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: void <init>(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,java.util.List)>(r1, r2, $r3);

        return;
    }

    public void add(java.lang.String)
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.salt.PSystemSalt: java.util.List data>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected final net.sourceforge.plantuml.core.ImageData exportDiagramNow(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        java.util.List $r1;
        net.sourceforge.plantuml.FileFormatOption r2;
        net.sourceforge.plantuml.ISkinParam $r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r5;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r6, $r8;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r7;
        java.io.OutputStream r9;
        net.sourceforge.plantuml.core.ImageData $r10, $r14;
        java.lang.Exception $r11;
        long $l0;
        java.lang.String $r12;
        java.util.ArrayList $r13;
        int i1;
        net.sourceforge.plantuml.salt.element.Element r15;

        r0 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        r9 := @parameter0: java.io.OutputStream;

        i1 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

     label1:
        $r1 = specialinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: java.util.List manageSprite()>();

        r15 = specialinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.salt.element.Element createElement(java.util.List)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r4 = virtualinvoke r2.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.graphic.StringBounder getDefaultStringBounder(net.sourceforge.plantuml.SvgCharSizeHack)>($r3);

        r5 = interfaceinvoke r15.<net.sourceforge.plantuml.salt.element.Element: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder,double,double)>(r4, 0.0, 0.0);

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.ugraphic.ImageBuilder createImageBuilder(net.sourceforge.plantuml.FileFormatOption)>(r2);

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.svek.TextBlockBackcolored getTextBlock(net.sourceforge.plantuml.salt.element.Element,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r15, r5);

        $r8 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder drawable(net.sourceforge.plantuml.graphic.UDrawable)>($r7);

        $r10 = virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.core.ImageData write(java.io.OutputStream)>(r9);

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $l0 = virtualinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: long seed()>();

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: java.lang.String getMetadata()>();

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        staticinvoke <net.sourceforge.plantuml.UmlDiagram: void exportDiagramError(java.io.OutputStream,java.lang.Throwable,net.sourceforge.plantuml.FileFormatOption,long,java.lang.String,java.lang.String,java.util.List)>(r9, $r11, r2, $l0, $r12, "none", $r13);

        $r14 = staticinvoke <net.sourceforge.plantuml.api.ImageDataSimple: net.sourceforge.plantuml.core.ImageData error()>();

        return $r14;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private net.sourceforge.plantuml.svek.TextBlockBackcolored getTextBlock(net.sourceforge.plantuml.salt.element.Element, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.salt.PSystemSalt$1 $r0;
        net.sourceforge.plantuml.salt.PSystemSalt r1;
        net.sourceforge.plantuml.salt.element.Element r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;

        r1 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        r2 := @parameter0: net.sourceforge.plantuml.salt.element.Element;

        r3 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $r0 = new net.sourceforge.plantuml.salt.PSystemSalt$1;

        specialinvoke $r0.<net.sourceforge.plantuml.salt.PSystemSalt$1: void <init>(net.sourceforge.plantuml.salt.PSystemSalt,net.sourceforge.plantuml.salt.element.Element,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r1, r2, r3);

        return $r0;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.salt.PSystemSalt r1;

        r1 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("(Salt)");

        return $r0;
    }

    public void addSprite(java.lang.String, net.sourceforge.plantuml.sprite.Sprite)
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        java.lang.String r1;
        net.sourceforge.plantuml.sprite.Sprite r2;
        net.sourceforge.plantuml.salt.Dictionary $r3;

        r0 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.sprite.Sprite;

        $r3 = r0.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.salt.Dictionary dictionary>;

        virtualinvoke $r3.<net.sourceforge.plantuml.salt.Dictionary: void addSprite(java.lang.String,net.sourceforge.plantuml.sprite.Sprite)>(r1, r2);

        return;
    }

    private java.util.List manageSprite()
    {
        net.sourceforge.plantuml.command.CommandFactorySprite $r0;
        net.sourceforge.plantuml.command.Command r1;
        java.util.ArrayList $r2;
        net.sourceforge.plantuml.salt.PSystemSalt r4;
        java.util.List $r5;
        java.util.Iterator r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        java.lang.Object $r7, $r8;
        java.lang.String $r9, $r10, r13, r15;
        int $i0;
        net.sourceforge.plantuml.ScaleSimple $r11;
        net.sourceforge.plantuml.ugraphic.color.NoSuchColorException $r12;
        double d0;
        net.sourceforge.plantuml.command.BlocLines r14;

        r4 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        $r0 = new net.sourceforge.plantuml.command.CommandFactorySprite;

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandFactorySprite: void <init>()>();

        r1 = virtualinvoke $r0.<net.sourceforge.plantuml.command.CommandFactorySprite: net.sourceforge.plantuml.command.Command createMultiLine(boolean)>(0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r5 = r4.<net.sourceforge.plantuml.salt.PSystemSalt: java.util.List data>;

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r7;

        $z1 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("hide stereotype");

        if $z1 == 0 goto label02;

        goto label11;

     label02:
        $z2 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("skinparam ");

        if $z2 == 0 goto label03;

        goto label11;

     label03:
        $z3 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("scale ");

        if $z3 == 0 goto label04;

        $r9 = "scale ";

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $r10 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int)>($i0);

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r10);

        $r11 = new net.sourceforge.plantuml.ScaleSimple;

        specialinvoke $r11.<net.sourceforge.plantuml.ScaleSimple: void <init>(double)>(d0);

        virtualinvoke r4.<net.sourceforge.plantuml.salt.PSystemSalt: void setScale(net.sourceforge.plantuml.Scale)>($r11);

        goto label11;

     label04:
        $z4 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("sprite $");

        if $z4 == 0 goto label10;

        r14 = staticinvoke <net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines singleString(java.lang.String)>(r13);

     label05:
        $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r8;

        r14 = virtualinvoke r14.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines addString(java.lang.String)>(r15);

        $z6 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("}");

        if $z6 == 0 goto label05;

     label06:
        interfaceinvoke r1.<net.sourceforge.plantuml.command.Command: net.sourceforge.plantuml.command.CommandExecutionResult execute(net.sourceforge.plantuml.core.Diagram,net.sourceforge.plantuml.command.BlocLines)>(r4, r14);

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

     label09:
        goto label11;

     label10:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r13);

     label11:
        goto label01;

     label12:
        return $r2;

        catch net.sourceforge.plantuml.ugraphic.color.NoSuchColorException from label06 to label07 with label08;
    }

    private net.sourceforge.plantuml.salt.element.Element createElement(java.util.List)
    {
        net.sourceforge.plantuml.salt.DataSourceImpl $r0;
        java.util.List r1;
        java.util.ArrayList $r3;
        net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid $r5;
        net.sourceforge.plantuml.salt.PSystemSalt r6;
        net.sourceforge.plantuml.salt.Dictionary $r7, $r9, $r11, $r30;
        net.sourceforge.plantuml.salt.factory.ElementFactoryScroll $r8;
        net.sourceforge.plantuml.salt.factory.ElementFactoryBorder $r10;
        boolean $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r12, $r13, $r14, $r18, $r19, $r20;
        java.lang.String $r15, $r21;
        java.lang.IllegalArgumentException $r16;
        java.lang.Object $r17, $r23, $r25, $r27, $r29;
        net.sourceforge.plantuml.salt.Terminated $r22;
        net.sourceforge.plantuml.salt.element.Element $r24;
        java.util.Iterator r26, r31, r33, r35;
        net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex r28, r32, r34;
        net.sourceforge.plantuml.salt.factory.ElementFactory r36;

        r6 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        r1 := @parameter0: java.util.List;

        $r0 = new net.sourceforge.plantuml.salt.DataSourceImpl;

        specialinvoke $r0.<net.sourceforge.plantuml.salt.DataSourceImpl: void <init>(java.util.List)>(r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = new net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid;

        $r7 = r6.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.salt.Dictionary dictionary>;

        specialinvoke $r5.<net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>($r0, $r7);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $r8 = new net.sourceforge.plantuml.salt.factory.ElementFactoryScroll;

        $r9 = r6.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.salt.Dictionary dictionary>;

        specialinvoke $r8.<net.sourceforge.plantuml.salt.factory.ElementFactoryScroll: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>($r0, $r9);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $r10 = new net.sourceforge.plantuml.salt.factory.ElementFactoryBorder;

        $r11 = r6.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.salt.Dictionary dictionary>;

        specialinvoke $r10.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>($r0, $r11);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        r31 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r29 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex) $r29;

        $r30 = r6.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.salt.Dictionary dictionary>;

        staticinvoke <net.sourceforge.plantuml.salt.PSystemSalt: void addSimpleFactory(net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex,net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r32, $r0, $r30);

        goto label1;

     label2:
        r33 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r25 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex) $r25;

        r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z7 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label5;

        $r27 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r28 = (net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex) $r27;

        virtualinvoke r34.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>(r28);

        goto label4;

     label5:
        goto label3;

     label6:
        r35 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z5 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label9;

        $r17 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (net.sourceforge.plantuml.salt.factory.ElementFactory) $r17;

        $z6 = interfaceinvoke r36.<net.sourceforge.plantuml.salt.factory.ElementFactory: boolean ready()>();

        if $z6 == 0 goto label8;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r21);

        $r22 = interfaceinvoke r36.<net.sourceforge.plantuml.salt.factory.ElementFactory: net.sourceforge.plantuml.salt.Terminated create()>();

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r24 = (net.sourceforge.plantuml.salt.element.Element) $r23;

        return $r24;

     label8:
        goto label7;

     label9:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void println(java.lang.Object)>($r15);

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r16;
    }

    private static void addSimpleFactory(net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex, net.sourceforge.plantuml.salt.DataSource, net.sourceforge.plantuml.salt.Dictionary)
    {
        net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex r0;
        net.sourceforge.plantuml.salt.factory.ElementFactoryMenu $r1;
        net.sourceforge.plantuml.salt.DataSource r2;
        net.sourceforge.plantuml.salt.Dictionary r3;
        net.sourceforge.plantuml.salt.factory.ElementFactoryTree $r4;
        net.sourceforge.plantuml.salt.factory.ElementFactoryTab $r5;
        net.sourceforge.plantuml.salt.factory.ElementFactoryLine $r6;
        net.sourceforge.plantuml.salt.factory.ElementFactoryTextField $r7;
        net.sourceforge.plantuml.salt.factory.ElementFactoryButton $r8;
        net.sourceforge.plantuml.salt.factory.ElementFactoryDroplist $r9;
        net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOn $r10;
        net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOff $r11;
        net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOn $r12;
        net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOff $r13;
        net.sourceforge.plantuml.salt.factory.ElementFactoryImage $r14;
        net.sourceforge.plantuml.salt.factory.ElementFactoryRetrieveFromDictonnary $r15;
        net.sourceforge.plantuml.salt.factory.ElementFactoryText $r16;

        r0 := @parameter0: net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex;

        r2 := @parameter1: net.sourceforge.plantuml.salt.DataSource;

        r3 := @parameter2: net.sourceforge.plantuml.salt.Dictionary;

        $r1 = new net.sourceforge.plantuml.salt.factory.ElementFactoryMenu;

        specialinvoke $r1.<net.sourceforge.plantuml.salt.factory.ElementFactoryMenu: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r1);

        $r4 = new net.sourceforge.plantuml.salt.factory.ElementFactoryTree;

        specialinvoke $r4.<net.sourceforge.plantuml.salt.factory.ElementFactoryTree: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r4);

        $r5 = new net.sourceforge.plantuml.salt.factory.ElementFactoryTab;

        specialinvoke $r5.<net.sourceforge.plantuml.salt.factory.ElementFactoryTab: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r5);

        $r6 = new net.sourceforge.plantuml.salt.factory.ElementFactoryLine;

        specialinvoke $r6.<net.sourceforge.plantuml.salt.factory.ElementFactoryLine: void <init>(net.sourceforge.plantuml.salt.DataSource)>(r2);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r6);

        $r7 = new net.sourceforge.plantuml.salt.factory.ElementFactoryTextField;

        specialinvoke $r7.<net.sourceforge.plantuml.salt.factory.ElementFactoryTextField: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r7);

        $r8 = new net.sourceforge.plantuml.salt.factory.ElementFactoryButton;

        specialinvoke $r8.<net.sourceforge.plantuml.salt.factory.ElementFactoryButton: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r8);

        $r9 = new net.sourceforge.plantuml.salt.factory.ElementFactoryDroplist;

        specialinvoke $r9.<net.sourceforge.plantuml.salt.factory.ElementFactoryDroplist: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r9);

        $r10 = new net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOn;

        specialinvoke $r10.<net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOn: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r10);

        $r11 = new net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOff;

        specialinvoke $r11.<net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOff: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r11);

        $r12 = new net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOn;

        specialinvoke $r12.<net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOn: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r12);

        $r13 = new net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOff;

        specialinvoke $r13.<net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOff: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r13);

        $r14 = new net.sourceforge.plantuml.salt.factory.ElementFactoryImage;

        specialinvoke $r14.<net.sourceforge.plantuml.salt.factory.ElementFactoryImage: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r14);

        $r15 = new net.sourceforge.plantuml.salt.factory.ElementFactoryRetrieveFromDictonnary;

        specialinvoke $r15.<net.sourceforge.plantuml.salt.factory.ElementFactoryRetrieveFromDictonnary: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r15);

        $r16 = new net.sourceforge.plantuml.salt.factory.ElementFactoryText;

        specialinvoke $r16.<net.sourceforge.plantuml.salt.factory.ElementFactoryText: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.ISkinSimple)>(r2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void addFactory(net.sourceforge.plantuml.salt.factory.ElementFactory)>($r16);

        return;
    }

    public void setIamSalt(boolean)
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.salt.PSystemSalt: boolean iamSalt> = 1;

        return;
    }

    public final boolean isIamSalt()
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        $z0 = r0.<net.sourceforge.plantuml.salt.PSystemSalt: boolean iamSalt>;

        return $z0;
    }

    public net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getDefaultMargins()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r0;
        net.sourceforge.plantuml.salt.PSystemSalt r1;

        r1 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        $r0 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft same(double)>(5.0);

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getBlack()
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r0;
        net.sourceforge.plantuml.salt.PSystemSalt r1;

        r1 := @this: net.sourceforge.plantuml.salt.PSystemSalt;

        $r0 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        return $r0;
    }

    static net.sourceforge.plantuml.ugraphic.color.HColor access$000(net.sourceforge.plantuml.salt.PSystemSalt)
    {
        net.sourceforge.plantuml.salt.PSystemSalt r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;

        r0 := @parameter0: net.sourceforge.plantuml.salt.PSystemSalt;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.salt.PSystemSalt: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        return $r1;
    }
}
