public class net.sourceforge.plantuml.argon2.model.Block extends java.lang.Object
{
    public long[] v;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.argon2.model.Block r0;
        long[] $r1;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Block;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[128];

        r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v> = $r1;

        return;
    }

    public void fromBytes(byte[])
    {
        boolean $z0;
        net.sourceforge.plantuml.argon2.model.Block r0;
        byte[] r1, r2;
        int $i0, $i1, $i2, $i4, i5, $i6;
        long[] $r3, $r5;
        long $l3;
        java.lang.AssertionError $r4;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Block;

        r1 := @parameter0: byte[];

        $z0 = <net.sourceforge.plantuml.argon2.model.Block: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = lengthof r1;

        if $i4 == 1024 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        i5 = 0;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $i6 = lengthof $r5;

        if i5 >= $i6 goto label3;

        $i2 = i5 * 8;

        $i0 = i5 + 1;

        $i1 = $i0 * 8;

        r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, $i2, $i1);

        $r3 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l3 = staticinvoke <net.sourceforge.plantuml.argon2.Util: long littleEndianBytesToLong(byte[])>(r2);

        $r3[i5] = $l3;

        i5 = i5 + 1;

        goto label2;

     label3:
        return;
    }

    public byte[] toBytes()
    {
        byte[] r0, r4;
        net.sourceforge.plantuml.argon2.model.Block r1;
        long[] $r2, $r3;
        int $i0, $i2, $i3, $i4, i5;
        long $l1;

        r1 := @this: net.sourceforge.plantuml.argon2.model.Block;

        r0 = newarray (byte)[1024];

        i5 = 0;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $i0 = lengthof $r2;

        if i5 >= $i0 goto label2;

        $r3 = r1.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l1 = $r3[i5];

        r4 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] longToLittleEndianBytes(long)>($l1);

        $i2 = lengthof r4;

        $i4 = i5 * $i2;

        $i3 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r0, $i4, $i3);

        i5 = i5 + 1;

        goto label1;

     label2:
        return r0;
    }

    public void copyBlock(net.sourceforge.plantuml.argon2.model.Block)
    {
        net.sourceforge.plantuml.argon2.model.Block r0, r1;
        long[] $r2, $r3, $r4;
        int $i0;

        r1 := @this: net.sourceforge.plantuml.argon2.model.Block;

        r0 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        $r4 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $r3 = r1.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $r2 = r1.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i0);

        return;
    }

    public void xor(net.sourceforge.plantuml.argon2.model.Block, net.sourceforge.plantuml.argon2.model.Block)
    {
        net.sourceforge.plantuml.argon2.model.Block r0, r2, r4;
        long[] $r1, $r3, $r5, $r6;
        int $i0, i4;
        long $l1, $l2, $l3;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Block;

        r2 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        r4 := @parameter1: net.sourceforge.plantuml.argon2.model.Block;

        i4 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $i0 = lengthof $r1;

        if i4 >= $i0 goto label2;

        $r6 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $r3 = r2.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l2 = $r3[i4];

        $r5 = r4.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l1 = $r5[i4];

        $l3 = $l2 ^ $l1;

        $r6[i4] = $l3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void xor(net.sourceforge.plantuml.argon2.model.Block, net.sourceforge.plantuml.argon2.model.Block, net.sourceforge.plantuml.argon2.model.Block)
    {
        net.sourceforge.plantuml.argon2.model.Block r0, r2, r4, r6;
        long[] $r1, $r3, $r5, $r7, $r8;
        int $i0, i6;
        long $l1, $l2, $l3, $l4, $l5;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Block;

        r2 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        r4 := @parameter1: net.sourceforge.plantuml.argon2.model.Block;

        r6 := @parameter2: net.sourceforge.plantuml.argon2.model.Block;

        i6 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $i0 = lengthof $r1;

        if i6 >= $i0 goto label2;

        $r8 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $r3 = r2.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l2 = $r3[i6];

        $r5 = r4.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l1 = $r5[i6];

        $l4 = $l2 ^ $l1;

        $r7 = r6.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l3 = $r7[i6];

        $l5 = $l4 ^ $l3;

        $r8[i6] = $l5;

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public void xorWith(net.sourceforge.plantuml.argon2.model.Block)
    {
        net.sourceforge.plantuml.argon2.model.Block r0, r3;
        long[] $r1, $r2, $r4, $r5;
        int $i0, i4;
        long $l1, $l2, $l3;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Block;

        r3 := @parameter0: net.sourceforge.plantuml.argon2.model.Block;

        i4 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $i0 = lengthof $r1;

        if i4 >= $i0 goto label2;

        $r5 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l2 = $r2[i4];

        $r4 = r3.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        $l1 = $r4[i4];

        $l3 = $l2 ^ $l1;

        $r5[i4] = $l3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.argon2.model.Block r2;
        long[] r3;
        int i0, i2;
        java.lang.String $r4, $r6;
        long l1;
        byte[] $r5;

        r2 := @this: net.sourceforge.plantuml.argon2.model.Block;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        r3 = r2.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        l1 = r3[i2];

        $r5 = staticinvoke <net.sourceforge.plantuml.argon2.Util: byte[] longToLittleEndianBytes(long)>(l1);

        $r6 = staticinvoke <net.sourceforge.plantuml.argon2.Util: java.lang.String bytesToHexString(byte[])>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    void clear()
    {
        net.sourceforge.plantuml.argon2.model.Block r0;
        long[] $r1;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Block;

        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Block: long[] v>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r1, 0L);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/argon2/model/Block;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.argon2.model.Block: boolean $assertionsDisabled> = $z1;

        return;
    }
}
