public class net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines extends net.sourceforge.plantuml.command.CommandMultilines3
{

    public void <init>()
    {
        net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;
        net.sourceforge.plantuml.command.MultilinesStrategy $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines;

        $r1 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        $r2 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy REMOVE_STARTING_QUOTE>;

        specialinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines3: void <init>(net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>($r1, $r2);

        return;
    }

    public net.sourceforge.plantuml.command.regex.RegexConcat getPatternEnd2()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines r6;

        r6 := @this: net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TEST1", "(.*)");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\)");

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(";?");

        $r1[2] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r1[3] = $r5;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.command.regex.RegexConcat $r11;

        $r0 = class "Lnet/sourceforge/plantuml/activitydiagram3/command/CommandRepeatWhile3Multilines;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[8];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("repeat");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("while");

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[4] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\(");

        $r2[5] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TEST1", "(.*)");

        $r2[6] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[7] = $r10;

        $r11 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r11;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3, net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;
        net.sourceforge.plantuml.StringLocated $r2, $r7, r27;
        java.lang.String $r3, $r4, $r8, r10, $r22, r28;
        net.sourceforge.plantuml.command.regex.RegexResult r5, r9;
        net.sourceforge.plantuml.command.regex.RegexConcat $r6;
        net.sourceforge.plantuml.command.BlocLines $r11, r23, r24;
        boolean $z0, $z1;
        net.sourceforge.plantuml.cucadiagram.Display r12, r14, r25, r29;
        net.sourceforge.plantuml.graphic.Rainbow r13;
        net.sourceforge.plantuml.command.regex.Pattern2 $r15;
        java.util.List r16;
        int $i0;
        net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3 r17;
        net.sourceforge.plantuml.command.CommandExecutionResult $r18;
        java.lang.Object $r19, $r20, $r21;
        java.util.Iterator r26;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines;

        r17 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3;

        r23 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        r24 = virtualinvoke r23.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines trim()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines: net.sourceforge.plantuml.command.regex.IRegex getStartingPattern()>();

        $r2 = virtualinvoke r24.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r4 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r3);

        r5 = interfaceinvoke $r1.<net.sourceforge.plantuml.command.regex.IRegex: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>($r4);

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines: net.sourceforge.plantuml.command.regex.RegexConcat getPatternEnd2()>();

        $r7 = virtualinvoke r24.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getLast()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r9 = virtualinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>($r8);

        r10 = virtualinvoke r5.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TEST1", 0);

        r25 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r10);

        $r11 = virtualinvoke r24.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines subExtract(int,int)>(1, 1);

        r26 = virtualinvoke $r11.<net.sourceforge.plantuml.command.BlocLines: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r21 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (net.sourceforge.plantuml.StringLocated) $r21;

        $r22 = virtualinvoke r27.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r25 = virtualinvoke r25.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display add(java.lang.CharSequence)>($r22);

        goto label1;

     label2:
        r28 = virtualinvoke r9.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TEST1", 0);

        $z1 = staticinvoke <net.sourceforge.plantuml.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r28);

        if $z1 != 0 goto label3;

        r25 = virtualinvoke r25.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display add(java.lang.CharSequence)>(r28);

     label3:
        r29 = <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display NULL>;

        r12 = <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display NULL>;

        r13 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow none()>();

        r14 = <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display NULL>;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\)[%s]*(is|equals?)[%s]*\\(");

        r16 = virtualinvoke r25.<net.sourceforge.plantuml.cucadiagram.Display: java.util.List splitMultiline(net.sourceforge.plantuml.command.regex.Pattern2)>($r15);

        $i0 = interfaceinvoke r16.<java.util.List: int size()>();

        if $i0 != 2 goto label4;

        $r19 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(0);

        r25 = (net.sourceforge.plantuml.cucadiagram.Display) $r19;

        $r20 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(1);

        r29 = (net.sourceforge.plantuml.cucadiagram.Display) $r20;

     label4:
        $r18 = virtualinvoke r17.<net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3: net.sourceforge.plantuml.command.CommandExecutionResult repeatWhile(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.graphic.Rainbow)>(r25, r29, r12, r14, r13);

        return $r18;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.command.BlocLines r2;
        net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3 $r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r3 = (net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3) r1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines: net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3,net.sourceforge.plantuml.command.BlocLines)>($r3, r2);

        return $r4;
    }
}
