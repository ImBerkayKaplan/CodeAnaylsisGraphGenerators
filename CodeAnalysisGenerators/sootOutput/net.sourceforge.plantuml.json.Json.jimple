public final class net.sourceforge.plantuml.json.Json extends java.lang.Object
{
    public static final net.sourceforge.plantuml.json.JsonValue NULL;
    public static final net.sourceforge.plantuml.json.JsonValue TRUE;
    public static final net.sourceforge.plantuml.json.JsonValue FALSE;

    private void <init>()
    {
        net.sourceforge.plantuml.json.Json r0;

        r0 := @this: net.sourceforge.plantuml.json.Json;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.json.JsonValue value(int)
    {
        net.sourceforge.plantuml.json.JsonNumber $r0;
        int i0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.json.JsonNumber;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(i0, 10);

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonNumber: void <init>(java.lang.String)>($r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonValue value(long)
    {
        net.sourceforge.plantuml.json.JsonNumber $r0;
        long l0;
        java.lang.String $r1;

        l0 := @parameter0: long;

        $r0 = new net.sourceforge.plantuml.json.JsonNumber;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(l0, 10);

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonNumber: void <init>(java.lang.String)>($r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonValue value(float)
    {
        float f0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r0;
        net.sourceforge.plantuml.json.JsonNumber $r1;
        java.lang.String $r2, $r3;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z1 == 0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Infinite and NaN values not permitted in JSON");

        throw $r0;

     label2:
        $r1 = new net.sourceforge.plantuml.json.JsonNumber;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        $r3 = staticinvoke <net.sourceforge.plantuml.json.Json: java.lang.String cutOffPointZero(java.lang.String)>($r2);

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonNumber: void <init>(java.lang.String)>($r3);

        return $r1;
    }

    public static net.sourceforge.plantuml.json.JsonValue value(double)
    {
        double d0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r0;
        net.sourceforge.plantuml.json.JsonNumber $r1;
        java.lang.String $r2, $r3;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Infinite and NaN values not permitted in JSON");

        throw $r0;

     label2:
        $r1 = new net.sourceforge.plantuml.json.JsonNumber;

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        $r3 = staticinvoke <net.sourceforge.plantuml.json.Json: java.lang.String cutOffPointZero(java.lang.String)>($r2);

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonNumber: void <init>(java.lang.String)>($r3);

        return $r1;
    }

    public static net.sourceforge.plantuml.json.JsonValue value(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.json.JsonValue $r1;
        net.sourceforge.plantuml.json.JsonString $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue NULL>;

        goto label2;

     label1:
        $r2 = new net.sourceforge.plantuml.json.JsonString;

        $r1 = $r2;

        specialinvoke $r2.<net.sourceforge.plantuml.json.JsonString: void <init>(java.lang.String)>(r0);

     label2:
        return $r1;
    }

    public static net.sourceforge.plantuml.json.JsonValue value(boolean)
    {
        boolean z0;
        net.sourceforge.plantuml.json.JsonValue $r0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue TRUE>;

        goto label2;

     label1:
        $r0 = <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue FALSE>;

     label2:
        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonArray array()
    {
        net.sourceforge.plantuml.json.JsonArray $r0;

        $r0 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        return $r0;
    }

    public static transient net.sourceforge.plantuml.json.JsonArray array(int[])
    {
        int[] r0;
        net.sourceforge.plantuml.json.JsonArray $r1;
        int i0, i1, i2;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("values is null");

        throw $r5;

     label1:
        $r1 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        i0 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        i1 = r0[i2];

        virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(int)>(i1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static transient net.sourceforge.plantuml.json.JsonArray array(long[])
    {
        long[] r0;
        net.sourceforge.plantuml.json.JsonArray $r1;
        int i0, i2;
        long l1;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("values is null");

        throw $r5;

     label1:
        $r1 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        i0 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        l1 = r0[i2];

        virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(long)>(l1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static transient net.sourceforge.plantuml.json.JsonArray array(float[])
    {
        float[] r0;
        net.sourceforge.plantuml.json.JsonArray $r1;
        int i0, i1;
        float f0;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("values is null");

        throw $r5;

     label1:
        $r1 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        f0 = r0[i1];

        virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(float)>(f0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static transient net.sourceforge.plantuml.json.JsonArray array(double[])
    {
        double[] r0;
        net.sourceforge.plantuml.json.JsonArray $r1;
        int i0, i1;
        double d0;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("values is null");

        throw $r5;

     label1:
        $r1 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        d0 = r0[i1];

        virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(double)>(d0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static transient net.sourceforge.plantuml.json.JsonArray array(boolean[])
    {
        boolean[] r0;
        net.sourceforge.plantuml.json.JsonArray $r1;
        int i0, i1;
        boolean z0;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: boolean[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("values is null");

        throw $r5;

     label1:
        $r1 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        z0 = r0[i1];

        virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(boolean)>(z0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static transient net.sourceforge.plantuml.json.JsonArray array(java.lang.String[])
    {
        java.lang.String[] r0;
        net.sourceforge.plantuml.json.JsonArray $r1;
        int i0, i1;
        java.lang.String r4;
        java.lang.NullPointerException $r6;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("values is null");

        throw $r6;

     label1:
        $r1 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r4 = r0[i1];

        virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(java.lang.String)>(r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static net.sourceforge.plantuml.json.JsonObject object()
    {
        net.sourceforge.plantuml.json.JsonObject $r0;

        $r0 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonValue parse(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.json.Json$DefaultHandler $r1;
        net.sourceforge.plantuml.json.JsonParser $r3;
        net.sourceforge.plantuml.json.JsonValue $r4;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("string is null");

        throw $r5;

     label1:
        $r1 = new net.sourceforge.plantuml.json.Json$DefaultHandler;

        specialinvoke $r1.<net.sourceforge.plantuml.json.Json$DefaultHandler: void <init>()>();

        $r3 = new net.sourceforge.plantuml.json.JsonParser;

        specialinvoke $r3.<net.sourceforge.plantuml.json.JsonParser: void <init>(net.sourceforge.plantuml.json.JsonHandler)>($r1);

        virtualinvoke $r3.<net.sourceforge.plantuml.json.JsonParser: void parse(java.lang.String)>(r0);

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue getValue()>();

        return $r4;
    }

    public static net.sourceforge.plantuml.json.JsonValue parse(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        net.sourceforge.plantuml.json.Json$DefaultHandler $r1;
        net.sourceforge.plantuml.json.JsonParser $r3;
        net.sourceforge.plantuml.json.JsonValue $r4;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.io.Reader;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("reader is null");

        throw $r5;

     label1:
        $r1 = new net.sourceforge.plantuml.json.Json$DefaultHandler;

        specialinvoke $r1.<net.sourceforge.plantuml.json.Json$DefaultHandler: void <init>()>();

        $r3 = new net.sourceforge.plantuml.json.JsonParser;

        specialinvoke $r3.<net.sourceforge.plantuml.json.JsonParser: void <init>(net.sourceforge.plantuml.json.JsonHandler)>($r1);

        virtualinvoke $r3.<net.sourceforge.plantuml.json.JsonParser: void parse(java.io.Reader)>(r0);

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue getValue()>();

        return $r4;
    }

    private static java.lang.String cutOffPointZero(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".0");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r1;

     label1:
        return r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.json.JsonLiteral $r0, $r1, $r2;

        $r0 = new net.sourceforge.plantuml.json.JsonLiteral;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonLiteral: void <init>(java.lang.String)>("null");

        <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue NULL> = $r0;

        $r1 = new net.sourceforge.plantuml.json.JsonLiteral;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonLiteral: void <init>(java.lang.String)>("true");

        <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue TRUE> = $r1;

        $r2 = new net.sourceforge.plantuml.json.JsonLiteral;

        specialinvoke $r2.<net.sourceforge.plantuml.json.JsonLiteral: void <init>(java.lang.String)>("false");

        <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue FALSE> = $r2;

        return;
    }
}
