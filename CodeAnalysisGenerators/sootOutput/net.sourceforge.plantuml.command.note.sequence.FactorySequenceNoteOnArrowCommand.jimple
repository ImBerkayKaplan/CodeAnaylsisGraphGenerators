public final class net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand extends java.lang.Object implements net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand
{

    public void <init>()
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand r0;

        r0 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r18, $r19, $r21, $r22;
        java.lang.Class $r1;
        java.lang.String $r2, $r5, $r20, $r23;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r24;
        net.sourceforge.plantuml.command.regex.RegexConcat $r25;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand r26;

        r26 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/note/sequence/FactorySequenceNoteOnArrowCommand;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("multi");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[12];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[1] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STYLE", "(note|hnote|rnote)");

        $r6[2] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<{2}.*\\>{2})?");

        $r6[4] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[5] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("POSITION", "(right|left|bottom|top)");

        $r6[6] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[7] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r6[8] = $r15;

        $r16 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[9] = $r16;

        $r17 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r20 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r23);

        $r6[10] = $r17;

        $r24 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[11] = $r24;

        $r25 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r25;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r18, $r19, $r21, $r22;
        java.lang.Class $r1;
        java.lang.String $r2, $r5, $r20, $r23;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r24, $r25, $r26, $r27, $r28;
        net.sourceforge.plantuml.command.regex.RegexConcat $r29;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand r30;

        r30 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/note/sequence/FactorySequenceNoteOnArrowCommand;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("single");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[16];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[1] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STYLE", "(note|hnote|rnote)");

        $r6[2] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<{2}.*\\>{2})?");

        $r6[4] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[5] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("POSITION", "(right|left|bottom|top)");

        $r6[6] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[7] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r6[8] = $r15;

        $r16 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[9] = $r16;

        $r17 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r20 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r23);

        $r6[10] = $r17;

        $r24 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[11] = $r24;

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(":");

        $r6[12] = $r25;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[13] = $r26;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("NOTE", "(.*)");

        $r6[14] = $r27;

        $r28 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[15] = $r28;

        $r29 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r29;
    }

    public net.sourceforge.plantuml.command.Command createSingleLine()
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand$1 $r0;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;

        r1 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand;

        $r0 = new net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand$1;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()>();

        specialinvoke $r0.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand$1: void <init>(net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand,net.sourceforge.plantuml.command.regex.IRegex)>(r1, $r2);

        return $r0;
    }

    public net.sourceforge.plantuml.command.Command createMultiLine(boolean)
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand$2 $r0;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;
        net.sourceforge.plantuml.command.MultilinesStrategy $r3;
        boolean z0;

        r1 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand;

        z0 := @parameter0: boolean;

        $r0 = new net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand$2;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()>();

        $r3 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy KEEP_STARTING_QUOTE>;

        specialinvoke $r0.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand$2: void <init>(net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand,net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>(r1, $r2, $r3);

        return $r0;
    }

    private net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.sequencediagram.SequenceDiagram, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.sequencediagram.EventWithDeactivate r1;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.command.regex.RegexResult r2;
        java.lang.String $r3, $r4, $r6, $r7, r11, r21, $r32, $r34;
        net.sourceforge.plantuml.sequencediagram.NotePosition r5;
        net.sourceforge.plantuml.command.BlocLines r8;
        net.sourceforge.plantuml.cucadiagram.Display $r9, r10;
        net.sourceforge.plantuml.graphic.color.Colors $r12, r40;
        net.sourceforge.plantuml.graphic.color.ColorType $r13;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r14;
        net.sourceforge.plantuml.ISkinParam $r15, $r18, $r25, $r31;
        net.sourceforge.plantuml.api.ThemeStyle $r16;
        net.sourceforge.plantuml.sequencediagram.Note $r17;
        net.sourceforge.plantuml.style.StyleBuilder $r19;
        net.sourceforge.plantuml.sequencediagram.GroupingLeaf $r22;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r23;
        net.sourceforge.plantuml.cucadiagram.Stereotype r24;
        net.sourceforge.plantuml.ColorParam[] $r26;
        net.sourceforge.plantuml.ColorParam $r27, $r28;
        net.sourceforge.plantuml.FontParam $r29;
        net.sourceforge.plantuml.UrlBuilder $r30;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r33;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand r35;
        net.sourceforge.plantuml.Url r36;
        net.sourceforge.plantuml.sequencediagram.NoteStyle r38;
        net.sourceforge.plantuml.ugraphic.color.HColor $r39;
        net.sourceforge.plantuml.command.CommandExecutionResult $r41;

        r35 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r8 := @parameter2: net.sourceforge.plantuml.command.BlocLines;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.EventWithDeactivate getLastEventWithDeactivate()>();

        $z0 = r1 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z0 != 0 goto label1;

        $z2 = r1 instanceof net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        if $z2 == 0 goto label7;

     label1:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("POSITION", 0);

        $r4 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goUpperCase(java.lang.String)>($r3);

        r5 = staticinvoke <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition valueOf(java.lang.String)>($r4);

        r36 = null;

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if $r6 == null goto label2;

        $r30 = new net.sourceforge.plantuml.UrlBuilder;

        $r31 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r32 = interfaceinvoke $r31.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r33 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r30.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r32, $r33);

        $r34 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        r36 = virtualinvoke $r30.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>($r34);

     label2:
        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STYLE", 0);

        r38 = staticinvoke <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle getNoteStyle(java.lang.String)>($r7);

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.cucadiagram.Display toDisplay()>();

        r10 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.cucadiagram.Display manageVariable(net.sourceforge.plantuml.cucadiagram.Display)>($r9);

        r11 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COLOR", 0);

        $r12 = staticinvoke <net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors empty()>();

        $r13 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        if r11 != null goto label3;

        $r39 = null;

        goto label4;

     label3:
        $r14 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r39 = virtualinvoke $r14.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r16, r11);

     label4:
        r40 = virtualinvoke $r12.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors add(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r13, $r39);

        $r17 = new net.sourceforge.plantuml.sequencediagram.Note;

        $r18 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r17.<net.sourceforge.plantuml.sequencediagram.Note: void <init>(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.sequencediagram.NotePosition,net.sourceforge.plantuml.sequencediagram.NoteStyle,net.sourceforge.plantuml.style.StyleBuilder)>(r10, r5, r38, $r19);

        r21 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEREO", 0);

        if r21 == null goto label5;

        r24 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String)>(r21);

        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r29 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam NOTE>;

        $r26 = newarray (net.sourceforge.plantuml.ColorParam)[2];

        $r27 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBackground>;

        $r26[0] = $r27;

        $r28 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBorder>;

        $r26[1] = $r28;

        r40 = virtualinvoke r40.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors applyStereotypeForNote(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ColorParam[])>(r24, $r25, $r29, $r26);

        virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.Note: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r24);

     label5:
        virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.Note: void setUrl(net.sourceforge.plantuml.Url)>(r36);

        virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.Note: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r40);

        $z1 = r1 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z1 == 0 goto label6;

        $r23 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) r1;

        virtualinvoke $r23.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: void setNote(net.sourceforge.plantuml.sequencediagram.Note)>($r17);

        goto label7;

     label6:
        $r22 = (net.sourceforge.plantuml.sequencediagram.GroupingLeaf) r1;

        virtualinvoke $r22.<net.sourceforge.plantuml.sequencediagram.GroupingLeaf: void setNote(net.sourceforge.plantuml.sequencediagram.Note)>($r17);

     label7:
        $r41 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r41;
    }

    static net.sourceforge.plantuml.command.CommandExecutionResult access$000(net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand, net.sourceforge.plantuml.sequencediagram.SequenceDiagram, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand r0;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r1;
        net.sourceforge.plantuml.command.regex.RegexResult r2;
        net.sourceforge.plantuml.command.BlocLines r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @parameter0: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter3: net.sourceforge.plantuml.command.BlocLines;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand: net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.command.BlocLines)>(r1, r2, r3);

        return $r4;
    }
}
