public class net.sourceforge.plantuml.tim.FunctionsSet extends java.lang.Object
{
    private final java.util.Map functions;
    private final java.util.Set functionsFinal;
    private final net.sourceforge.plantuml.tim.Trie functions3;
    private net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction;

    public void <init>()
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        java.util.HashMap $r1;
        java.util.HashSet $r2;
        net.sourceforge.plantuml.tim.TrieImpl $r3;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Set functionsFinal> = $r2;

        $r3 = new net.sourceforge.plantuml.tim.TrieImpl;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.TrieImpl: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.Trie functions3> = $r3;

        return;
    }

    public net.sourceforge.plantuml.tim.TFunction getFunctionSmart(net.sourceforge.plantuml.tim.TFunctionSignature)
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        net.sourceforge.plantuml.tim.TFunctionSignature r1, $r10;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r8;
        net.sourceforge.plantuml.tim.TFunction r4, r9;
        java.util.Collection $r6;
        java.util.Iterator r7;
        boolean $z0, $z1, $z2;
        int $i0;
        java.util.Set $r11;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TFunctionSignature;

        $r2 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.sourceforge.plantuml.tim.TFunction) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.tim.TFunction) $r8;

        $r10 = interfaceinvoke r9.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionSignature getSignature()>();

        $z0 = virtualinvoke $r10.<net.sourceforge.plantuml.tim.TFunctionSignature: boolean sameFunctionNameAs(net.sourceforge.plantuml.tim.TFunctionSignature)>(r1);

        if $z0 != 0 goto label3;

        goto label2;

     label3:
        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.tim.TFunctionSignature: int getNbArg()>();

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.tim.TFunctionSignature: java.util.Set getNamedArguments()>();

        $z1 = interfaceinvoke r9.<net.sourceforge.plantuml.tim.TFunction: boolean canCover(int,java.util.Set)>($i0, $r11);

        if $z1 == 0 goto label4;

        return r9;

     label4:
        goto label2;

     label5:
        return null;
    }

    public int size()
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Map functions()
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        java.util.Map $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        $r1 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.lang.String getLonguestMatchStartingIn(java.lang.String)
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        java.lang.String r1, $r3;
        net.sourceforge.plantuml.tim.Trie $r2;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.Trie functions3>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.tim.Trie: java.lang.String getLonguestMatchStartingIn(java.lang.String)>(r1);

        return $r3;
    }

    public net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction()
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        net.sourceforge.plantuml.tim.TFunctionImpl $r1;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        $r1 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction>;

        return $r1;
    }

    public void addFunction(net.sourceforge.plantuml.tim.TFunction)
    {
        net.sourceforge.plantuml.tim.TFunction r0;
        net.sourceforge.plantuml.tim.TFunctionType $r1, $r2;
        net.sourceforge.plantuml.tim.FunctionsSet r3;
        java.util.Map $r4;
        net.sourceforge.plantuml.tim.TFunctionSignature $r5, $r9;
        java.lang.StringBuilder $r7, $r11, $r12;
        net.sourceforge.plantuml.tim.Trie $r8;
        java.lang.String $r10, $r13;
        net.sourceforge.plantuml.tim.TFunctionImpl $r14;

        r3 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        r0 := @parameter0: net.sourceforge.plantuml.tim.TFunction;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionType getFunctionType()>();

        $r2 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType LEGACY_DEFINELONG>;

        if $r1 != $r2 goto label1;

        $r14 = (net.sourceforge.plantuml.tim.TFunctionImpl) r0;

        virtualinvoke $r14.<net.sourceforge.plantuml.tim.TFunctionImpl: void finalizeEnddefinelong()>();

     label1:
        $r4 = r3.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions>;

        $r5 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionSignature getSignature()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r0);

        $r8 = r3.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.Trie functions3>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionSignature getSignature()>();

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.tim.TFunctionSignature: java.lang.String getFunctionName()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<net.sourceforge.plantuml.tim.Trie: void add(java.lang.String)>($r13);

        return;
    }

    public void executeEndfunction()
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        net.sourceforge.plantuml.tim.TFunctionImpl $r1;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        $r1 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction>;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r1);

        r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction> = null;

        return;
    }

    public void executeLegacyDefine(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        net.sourceforge.plantuml.tim.TFunctionImpl $r1;
        net.sourceforge.plantuml.tim.EaterLegacyDefine $r2;
        net.sourceforge.plantuml.StringLocated r3;
        net.sourceforge.plantuml.tim.TContext r5;
        net.sourceforge.plantuml.tim.TMemory r6;
        net.sourceforge.plantuml.tim.TFunction r7;
        java.util.Map $r8;
        net.sourceforge.plantuml.tim.TFunctionSignature $r9, $r13;
        java.lang.StringBuilder $r11, $r15, $r16;
        net.sourceforge.plantuml.tim.Trie $r12;
        java.lang.String $r14, $r17;
        net.sourceforge.plantuml.tim.EaterException $r18;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r6 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter2: net.sourceforge.plantuml.StringLocated;

        $r1 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction>;

        if $r1 == null goto label1;

        $r18 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("already0048");

        throw $r18;

     label1:
        $r2 = new net.sourceforge.plantuml.tim.EaterLegacyDefine;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.EaterLegacyDefine: void <init>(net.sourceforge.plantuml.StringLocated)>(r3);

        virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterLegacyDefine: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r5, r6);

        r7 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterLegacyDefine: net.sourceforge.plantuml.tim.TFunction getFunction()>();

        $r8 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions>;

        $r9 = interfaceinvoke r7.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionSignature getSignature()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r7);

        $r12 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.Trie functions3>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = interfaceinvoke r7.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionSignature getSignature()>();

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.TFunctionSignature: java.lang.String getFunctionName()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<net.sourceforge.plantuml.tim.Trie: void add(java.lang.String)>($r17);

        return;
    }

    public void executeLegacyDefineLong(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        net.sourceforge.plantuml.tim.TFunctionImpl $r1, $r7;
        net.sourceforge.plantuml.tim.EaterLegacyDefineLong $r2;
        net.sourceforge.plantuml.StringLocated r3;
        net.sourceforge.plantuml.tim.TContext r5;
        net.sourceforge.plantuml.tim.TMemory r6;
        net.sourceforge.plantuml.tim.EaterException $r8;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r6 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter2: net.sourceforge.plantuml.StringLocated;

        $r1 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction>;

        if $r1 == null goto label1;

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("already0068");

        throw $r8;

     label1:
        $r2 = new net.sourceforge.plantuml.tim.EaterLegacyDefineLong;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.EaterLegacyDefineLong: void <init>(net.sourceforge.plantuml.StringLocated)>(r3);

        virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterLegacyDefineLong: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r5, r6);

        $r7 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterLegacyDefineLong: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction> = $r7;

        return;
    }

    public void executeDeclareReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        net.sourceforge.plantuml.tim.TFunctionImpl $r1, $r7, $r12, $r13, $r14;
        net.sourceforge.plantuml.tim.EaterDeclareReturnFunction $r2;
        net.sourceforge.plantuml.StringLocated r3;
        net.sourceforge.plantuml.tim.TContext r5;
        net.sourceforge.plantuml.tim.TMemory r6;
        boolean z0, $z1, $z3;
        net.sourceforge.plantuml.tim.TFunctionSignature r8;
        java.util.Map $r9;
        java.lang.Object $r10;
        net.sourceforge.plantuml.tim.TFunction r11;
        java.util.Set $r15, $r17;
        net.sourceforge.plantuml.tim.EaterException $r16, $r18;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r6 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter2: net.sourceforge.plantuml.StringLocated;

        $r1 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction>;

        if $r1 == null goto label1;

        $r18 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("already0068");

        throw $r18;

     label1:
        $r2 = new net.sourceforge.plantuml.tim.EaterDeclareReturnFunction;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareReturnFunction: void <init>(net.sourceforge.plantuml.StringLocated)>(r3);

        virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareReturnFunction: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r5, r6);

        z0 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareReturnFunction: boolean getFinalFlag()>();

        $r7 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareReturnFunction: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        r8 = virtualinvoke $r7.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionSignature getSignature()>();

        $r9 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r11 = (net.sourceforge.plantuml.tim.TFunction) $r10;

        if r11 == null goto label3;

        if z0 != 0 goto label2;

        $r17 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Set functionsFinal>;

        $z3 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>(r8);

        if $z3 == 0 goto label3;

     label2:
        $r16 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("This function is already defined");

        throw $r16;

     label3:
        if z0 == 0 goto label4;

        $r15 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Set functionsFinal>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>(r8);

     label4:
        $r12 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareReturnFunction: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        $z1 = virtualinvoke $r12.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean hasBody()>();

        if $z1 == 0 goto label5;

        $r14 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareReturnFunction: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r14);

        goto label6;

     label5:
        $r13 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareReturnFunction: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction> = $r13;

     label6:
        return;
    }

    public void executeDeclareProcedure(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.FunctionsSet r0;
        net.sourceforge.plantuml.tim.TFunctionImpl $r1, $r7, $r12, $r13, $r14;
        net.sourceforge.plantuml.tim.EaterDeclareProcedure $r2;
        net.sourceforge.plantuml.StringLocated r3;
        net.sourceforge.plantuml.tim.TContext r5;
        net.sourceforge.plantuml.tim.TMemory r6;
        boolean z0, $z1, $z3;
        net.sourceforge.plantuml.tim.TFunctionSignature r8;
        java.util.Map $r9;
        java.lang.Object $r10;
        net.sourceforge.plantuml.tim.TFunction r11;
        java.util.Set $r15, $r17;
        net.sourceforge.plantuml.tim.EaterException $r16, $r18;

        r0 := @this: net.sourceforge.plantuml.tim.FunctionsSet;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r6 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter2: net.sourceforge.plantuml.StringLocated;

        $r1 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction>;

        if $r1 == null goto label1;

        $r18 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("already0068");

        throw $r18;

     label1:
        $r2 = new net.sourceforge.plantuml.tim.EaterDeclareProcedure;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void <init>(net.sourceforge.plantuml.StringLocated)>(r3);

        virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r5, r6);

        z0 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: boolean getFinalFlag()>();

        $r7 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        r8 = virtualinvoke $r7.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionSignature getSignature()>();

        $r9 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r11 = (net.sourceforge.plantuml.tim.TFunction) $r10;

        if r11 == null goto label3;

        if z0 != 0 goto label2;

        $r17 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Set functionsFinal>;

        $z3 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>(r8);

        if $z3 == 0 goto label3;

     label2:
        $r16 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("This function is already defined");

        throw $r16;

     label3:
        if z0 == 0 goto label4;

        $r15 = r0.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Set functionsFinal>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>(r8);

     label4:
        $r12 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        $z1 = virtualinvoke $r12.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean hasBody()>();

        if $z1 == 0 goto label5;

        $r14 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r14);

        goto label6;

     label5:
        $r13 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.EaterDeclareProcedure: net.sourceforge.plantuml.tim.TFunctionImpl getFunction()>();

        r0.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction> = $r13;

     label6:
        return;
    }
}
