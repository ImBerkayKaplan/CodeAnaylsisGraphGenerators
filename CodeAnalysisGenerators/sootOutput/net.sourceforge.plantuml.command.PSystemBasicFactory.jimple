public abstract class net.sourceforge.plantuml.command.PSystemBasicFactory extends net.sourceforge.plantuml.command.PSystemAbstractFactory
{

    public void <init>(net.sourceforge.plantuml.core.DiagramType)
    {
        net.sourceforge.plantuml.command.PSystemBasicFactory r0;
        net.sourceforge.plantuml.core.DiagramType r1;

        r0 := @this: net.sourceforge.plantuml.command.PSystemBasicFactory;

        r1 := @parameter0: net.sourceforge.plantuml.core.DiagramType;

        specialinvoke r0.<net.sourceforge.plantuml.command.PSystemAbstractFactory: void <init>(net.sourceforge.plantuml.core.DiagramType)>(r1);

        return;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.command.PSystemBasicFactory r0;
        net.sourceforge.plantuml.core.DiagramType $r1;

        r0 := @this: net.sourceforge.plantuml.command.PSystemBasicFactory;

        $r1 = <net.sourceforge.plantuml.core.DiagramType: net.sourceforge.plantuml.core.DiagramType UML>;

        specialinvoke r0.<net.sourceforge.plantuml.command.PSystemBasicFactory: void <init>(net.sourceforge.plantuml.core.DiagramType)>($r1);

        return;
    }

    public abstract net.sourceforge.plantuml.AbstractPSystem executeLine(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.AbstractPSystem, java.lang.String);

    public abstract net.sourceforge.plantuml.AbstractPSystem initDiagram(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, java.lang.String);

    private boolean isEmptyLine(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.StringLocated r0, $r1;
        java.lang.String $r2;
        int $i0;
        net.sourceforge.plantuml.command.PSystemBasicFactory r3;
        boolean $z0;

        r3 := @this: net.sourceforge.plantuml.command.PSystemBasicFactory;

        r0 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final net.sourceforge.plantuml.core.Diagram createSystem(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.ISkinSimple)
    {
        net.sourceforge.plantuml.version.IteratorCounter2 r0;
        java.lang.Object $r1, $r6;
        net.sourceforge.plantuml.StringLocated r2, r7;
        net.sourceforge.plantuml.command.PSystemBasicFactory r3;
        net.sourceforge.plantuml.api.ThemeStyle r4;
        java.lang.String $r5, $r8, $r22;
        net.sourceforge.plantuml.ErrorUml $r9;
        net.sourceforge.plantuml.ErrorUmlType $r10;
        net.sourceforge.plantuml.LineLocation $r11, $r15;
        java.util.List $r13, $r16;
        net.sourceforge.plantuml.error.PSystemError $r14, $r17;
        int $i0;
        boolean $z0, $z1, z2, $z3, $z4;
        net.sourceforge.plantuml.ISkinSimple r18;
        net.sourceforge.plantuml.core.UmlSource r19, r20;
        net.sourceforge.plantuml.AbstractPSystem r21;

        r3 := @this: net.sourceforge.plantuml.command.PSystemBasicFactory;

        r4 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r19 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r18 := @parameter2: net.sourceforge.plantuml.ISkinSimple;

        r20 = virtualinvoke r19.<net.sourceforge.plantuml.core.UmlSource: net.sourceforge.plantuml.core.UmlSource removeInitialSkinparam()>();

        r0 = virtualinvoke r20.<net.sourceforge.plantuml.core.UmlSource: net.sourceforge.plantuml.version.IteratorCounter2 iterator2()>();

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.version.IteratorCounter2: java.lang.Object next()>();

        r2 = (net.sourceforge.plantuml.StringLocated) $r1;

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r21 = virtualinvoke r3.<net.sourceforge.plantuml.command.PSystemBasicFactory: net.sourceforge.plantuml.AbstractPSystem initDiagram(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,java.lang.String)>(r4, r20, $r5);

        z2 = 1;

     label1:
        $z3 = interfaceinvoke r0.<net.sourceforge.plantuml.version.IteratorCounter2: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r6 = interfaceinvoke r0.<net.sourceforge.plantuml.version.IteratorCounter2: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.StringLocated) $r6;

        if z2 == 0 goto label2;

        if r7 == null goto label2;

        $z1 = specialinvoke r3.<net.sourceforge.plantuml.command.PSystemBasicFactory: boolean isEmptyLine(net.sourceforge.plantuml.StringLocated)>(r7);

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        z2 = 0;

        $r22 = virtualinvoke r7.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z4 = staticinvoke <net.sourceforge.plantuml.utils.StartUtils: boolean isArobaseEndDiagram(java.lang.String)>($r22);

        if $z4 == 0 goto label4;

        $i0 = virtualinvoke r20.<net.sourceforge.plantuml.core.UmlSource: int getTotalLineCount()>();

        if $i0 != 2 goto label3;

        $z0 = virtualinvoke r20.<net.sourceforge.plantuml.core.UmlSource: boolean isStartDef()>();

        if $z0 != 0 goto label3;

        $r15 = virtualinvoke r7.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        $r16 = interfaceinvoke r0.<net.sourceforge.plantuml.version.IteratorCounter2: java.util.List getTrace()>();

        $r17 = virtualinvoke r3.<net.sourceforge.plantuml.command.PSystemBasicFactory: net.sourceforge.plantuml.error.PSystemError buildEmptyError(net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.LineLocation,java.util.List)>(r20, $r15, $r16);

        return $r17;

     label3:
        return r21;

     label4:
        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r21 = virtualinvoke r3.<net.sourceforge.plantuml.command.PSystemBasicFactory: net.sourceforge.plantuml.AbstractPSystem executeLine(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.AbstractPSystem,java.lang.String)>(r4, r20, r21, $r8);

        if r21 != null goto label5;

        $r9 = new net.sourceforge.plantuml.ErrorUml;

        $r10 = <net.sourceforge.plantuml.ErrorUmlType: net.sourceforge.plantuml.ErrorUmlType SYNTAX_ERROR>;

        $r11 = virtualinvoke r7.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        specialinvoke $r9.<net.sourceforge.plantuml.ErrorUml: void <init>(net.sourceforge.plantuml.ErrorUmlType,java.lang.String,int,net.sourceforge.plantuml.LineLocation)>($r10, "Syntax Error?", 0, $r11);

        $r13 = interfaceinvoke r0.<net.sourceforge.plantuml.version.IteratorCounter2: java.util.List getTrace()>();

        $r14 = staticinvoke <net.sourceforge.plantuml.error.PSystemErrorUtils: net.sourceforge.plantuml.error.PSystemError buildV2(net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.ErrorUml,java.util.List,java.util.List)>(r20, $r9, null, $r13);

        return $r14;

     label5:
        goto label1;

     label6:
        return r21;
    }
}
