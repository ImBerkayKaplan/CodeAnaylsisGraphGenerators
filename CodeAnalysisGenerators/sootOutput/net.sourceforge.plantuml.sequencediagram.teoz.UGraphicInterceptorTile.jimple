public class net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile extends net.sourceforge.plantuml.graphic.UGraphicDelegator implements net.sourceforge.plantuml.skin.Context2D
{
    private final boolean isBackground;

    public void <init>(net.sourceforge.plantuml.ugraphic.UGraphic, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        z0 := @parameter1: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.UGraphicDelegator: void <init>(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: boolean isBackground> = z0;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UShape)
    {
        net.sourceforge.plantuml.ugraphic.UShape r0;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile r1;
        net.sourceforge.plantuml.ugraphic.UGraphic $r2;
        net.sourceforge.plantuml.graphic.UDrawable r3;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        $z0 = r0 instanceof net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        if $z0 == 0 goto label1;

        r3 = (net.sourceforge.plantuml.graphic.UDrawable) r0;

        interfaceinvoke r3.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: net.sourceforge.plantuml.ugraphic.UGraphic getUg()>();

        interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r0);

     label2:
        return;
    }

    public net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile $r0, r1;
        net.sourceforge.plantuml.ugraphic.UGraphic $r2, $r4;
        net.sourceforge.plantuml.ugraphic.UChange r3;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UChange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: net.sourceforge.plantuml.ugraphic.UGraphic getUg()>();

        $r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r3);

        $z0 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: boolean isBackground>;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: void <init>(net.sourceforge.plantuml.ugraphic.UGraphic,boolean)>($r4, $z0);

        return $r0;
    }

    public boolean isBackground()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile: boolean isBackground>;

        return $z0;
    }
}
