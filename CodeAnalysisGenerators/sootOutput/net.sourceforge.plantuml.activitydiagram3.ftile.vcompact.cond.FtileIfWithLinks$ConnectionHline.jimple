class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline extends net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection
{
    private final net.sourceforge.plantuml.graphic.Rainbow arrowColor;
    final net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0;

    public void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks, net.sourceforge.plantuml.graphic.Rainbow)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks r1;
        net.sourceforge.plantuml.graphic.Rainbow r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.Rainbow;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0> = r1;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(null, null);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.graphic.Rainbow arrowColor> = r2;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks $r3, $r7, $r9, $r11;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r4;
        java.util.ArrayList $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r8, $r10;
        boolean $z2, $z3, $z4;
        double $d0, d1, $d2, $d3, $d4, d5;
        net.sourceforge.plantuml.ISkinParam $r12;
        net.sourceforge.plantuml.graphic.Rainbow $r13;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r14, r16;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r15;
        java.util.List r17;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r18;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane r19;
        double[] r20;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r7 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r8 = $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r10 = $r9.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile2>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10);

        $z2 = r0 instanceof net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane;

        if $z2 == 0 goto label1;

        r19 = (net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane) r0;

        r17 = virtualinvoke r19.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane: java.util.List getOrderedListOfAllSwimlanes()>();

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r18 = virtualinvoke r19.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlane()>();

        r20 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: double[] getMinmax(net.sourceforge.plantuml.graphic.StringBounder,double,java.util.List,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane,java.util.List)>(r1, $d4, $r5, $r18, r17);

        goto label2;

     label1:
        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        r20 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: double[] getMinmaxSimple(net.sourceforge.plantuml.graphic.StringBounder,double,java.util.List)>(r1, $d0, $r5);

     label2:
        d5 = r20[0];

        d1 = r20[1];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5);

        if $z3 != 0 goto label3;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z4 == 0 goto label4;

     label3:
        return;

     label4:
        $r11 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r13 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.graphic.Rainbow arrowColor>;

        $r14 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.Rainbow)>($r12, $r13);

        $r15 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy NONE>;

        r16 = virtualinvoke $r14.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake withMerge(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r15);

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r16.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d5, $d2);

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r16.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d1, $d3);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r16);

        return;
    }

    private double[] getMinmax(net.sourceforge.plantuml.graphic.StringBounder, double, java.util.List, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, java.util.List)
    {
        java.util.List r0, r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r1;
        int i0, i1, i2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double[] $r5, $r7;
        double d0, d1, $d2, d3, $d4, d5;
        java.util.Iterator r6;
        java.lang.Object $r8;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r9;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r10, $r13, $r14;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks $r11;
        net.sourceforge.plantuml.ugraphic.UTranslate r12;
        java.lang.IllegalStateException $r15;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        r4 := @parameter2: java.util.List;

        r1 := @parameter3: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r0 := @parameter4: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int indexOf(java.lang.Object)>(r1);

        if i0 != -1 goto label01;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>()>();

        throw $r15;

     label01:
        i1 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: int getFirstSwimlane(net.sourceforge.plantuml.graphic.StringBounder,java.util.List,java.util.List)>(r3, r4, r0);

        i2 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: int getLastSwimlane(net.sourceforge.plantuml.graphic.StringBounder,java.util.List,java.util.List)>(r3, r4, r0);

        if i0 < i1 goto label02;

        if i0 <= i2 goto label03;

     label02:
        $r5 = newarray (double)[2];

        $r5[0] = #NaN;

        $r5[1] = #NaN;

        return $r5;

     label03:
        if i0 == i1 goto label04;

        $d2 = 0.0;

        goto label05;

     label04:
        $d2 = d0;

     label05:
        d3 = $d2;

        if i0 == i2 goto label06;

        $d4 = d0;

        goto label07;

     label06:
        $d4 = 0.0;

     label07:
        d5 = $d4;

        r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r8;

        $r10 = interfaceinvoke r9.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $z0 = virtualinvoke $r10.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 != 0 goto label09;

        goto label08;

     label09:
        $z1 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: boolean ftileDoesOutcomeInThatSwimlane(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>(r9, r1);

        if $z1 != 0 goto label10;

        goto label08;

     label10:
        $r11 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        r12 = virtualinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.graphic.StringBounder)>(r9, r3);

        $r13 = interfaceinvoke r9.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry translate(net.sourceforge.plantuml.ugraphic.UTranslate)>(r12);

        d1 = virtualinvoke $r14.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d3 = staticinvoke <java.lang.Math: double min(double,double)>(d3, d1);

        d5 = staticinvoke <java.lang.Math: double max(double,double)>(d5, d1);

        goto label08;

     label11:
        $r7 = newarray (double)[2];

        $r7[0] = d3;

        $r7[1] = d5;

        return $r7;
    }

    private double[] getMinmaxSimple(net.sourceforge.plantuml.graphic.StringBounder, double, java.util.List)
    {
        double d0, d1, d2, d3;
        java.util.List r0;
        java.util.Iterator r1;
        double[] $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r6, $r10, $r11;
        boolean $z0, $z1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate r9;

        r7 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        r0 := @parameter2: java.util.List;

        d2 = d0 / 2.0;

        d3 = d0 / 2.0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r3;

        $r6 = interfaceinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $z0 = virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $r8 = r7.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks this$0>;

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.graphic.StringBounder)>(r4, r5);

        $r10 = interfaceinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry translate(net.sourceforge.plantuml.ugraphic.UTranslate)>(r9);

        d1 = virtualinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d2 = staticinvoke <java.lang.Math: double min(double,double)>(d2, d1);

        d3 = staticinvoke <java.lang.Math: double max(double,double)>(d3, d1);

        goto label1;

     label3:
        $r2 = newarray (double)[2];

        $r2[0] = d2;

        $r2[1] = d3;

        return $r2;
    }

    private int getFirstSwimlane(net.sourceforge.plantuml.graphic.StringBounder, java.util.List, java.util.List)
    {
        java.util.List r0, r5;
        int $i0, i1;
        java.lang.IllegalStateException $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r6;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: java.util.List;

        r0 := @parameter2: java.util.List;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane) $r4;

        $z0 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: boolean atLeastOne(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane,java.util.List)>(r3, $r6, r5);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    private int getLastSwimlane(net.sourceforge.plantuml.graphic.StringBounder, java.util.List, java.util.List)
    {
        java.util.List r0, r5;
        int $i0, i1;
        java.lang.IllegalStateException $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r6;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: java.util.List;

        r0 := @parameter2: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane) $r4;

        $z0 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: boolean atLeastOne(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane,java.util.List)>(r3, $r6, r5);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    private boolean atLeastOne(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r7;

        r6 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r7 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r0 := @parameter2: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r2;

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $z1 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r6.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline: boolean ftileDoesOutcomeInThatSwimlane(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>(r3, r7);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean ftileDoesOutcomeInThatSwimlane(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1, r2;
        java.util.Set $r3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline r4;

        r4 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks$ConnectionHline;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r2 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()>();

        if $r1 != r2 goto label1;

        $r3 = interfaceinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
