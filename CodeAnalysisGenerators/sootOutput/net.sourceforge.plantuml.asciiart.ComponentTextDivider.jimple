public class net.sourceforge.plantuml.asciiart.ComponentTextDivider extends net.sourceforge.plantuml.asciiart.AbstractComponentText
{
    private final net.sourceforge.plantuml.skin.ComponentType type;
    private final net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay;
    private final net.sourceforge.plantuml.FileFormat fileFormat;

    public void <init>(net.sourceforge.plantuml.skin.ComponentType, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.FileFormat)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextDivider r0;
        net.sourceforge.plantuml.skin.ComponentType r1;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        net.sourceforge.plantuml.FileFormat r3;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextDivider;

        r1 := @parameter0: net.sourceforge.plantuml.skin.ComponentType;

        r2 := @parameter1: net.sourceforge.plantuml.cucadiagram.Display;

        r3 := @parameter2: net.sourceforge.plantuml.FileFormat;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.AbstractComponentText: void <init>()>();

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.skin.ComponentType type> = r1;

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay> = r2;

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.FileFormat fileFormat> = r3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.skin.Area r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt $r3;
        net.sourceforge.plantuml.asciiart.UmlCharArea r4;
        double $d0;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        net.sourceforge.plantuml.asciiart.ComponentTextDivider r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6, $r9;
        java.lang.StringBuilder $r7, $r8, $r12;
        java.lang.CharSequence $r10;
        java.lang.String $r11, r13;
        net.sourceforge.plantuml.FileFormat $r14, $r15;
        net.sourceforge.plantuml.skin.Context2D r16;

        r5 := @this: net.sourceforge.plantuml.asciiart.ComponentTextDivider;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.skin.Area;

        r16 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $r3 = (net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt) r2;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea getCharArea()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        i0 = (int) $d0;

        $r6 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        i1 = staticinvoke <net.sourceforge.plantuml.StringUtils: int getWcWidth(net.sourceforge.plantuml.cucadiagram.Display)>($r6);

        $i2 = i0 - i1;

        $i3 = $i2 - 1;

        i4 = $i3 / 2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        $r11 = interfaceinvoke $r10.<java.lang.CharSequence: java.lang.String toString()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.FileFormat fileFormat>;

        $r14 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat UTXT>;

        if $r15 != $r14 goto label1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int,char,char)>(9552, 2, 0, i0, 9474, 9578);

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringLR(java.lang.String,int,int)>(r13, i4, 2);

        $i13 = i4 - 1;

        $i14 = virtualinvoke r13.<java.lang.String: int length()>();

        $i15 = i4 + $i14;

        $i16 = $i15 + 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int,char,char)>(9552, 1, $i13, $i16, 9474, 9575);

        $i17 = i4 - 1;

        $i18 = virtualinvoke r13.<java.lang.String: int length()>();

        $i19 = i4 + $i18;

        $i20 = $i19 + 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int,char,char)>(9552, 3, $i17, $i20, 9474, 9572);

        $i21 = i4 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringTB(java.lang.String,int,int)>("\u2554\u2563\u255a", $i21, 1);

        $i22 = virtualinvoke r13.<java.lang.String: int length()>();

        $i23 = i4 + $i22;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringTB(java.lang.String,int,int)>("\u2557\u2560\u255d", $i23, 1);

        goto label2;

     label1:
        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(61, 2, 0, i0);

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringLR(java.lang.String,int,int)>(r13, i4, 2);

        $i5 = i4 - 1;

        $i6 = virtualinvoke r13.<java.lang.String: int length()>();

        $i7 = i4 + $i6;

        $i8 = $i7 + 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(61, 1, $i5, $i8);

        $i9 = i4 - 1;

        $i10 = virtualinvoke r13.<java.lang.String: int length()>();

        $i11 = i4 + $i10;

        $i12 = $i11 + 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(61, 3, $i9, $i12);

     label2:
        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextDivider r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        int $i0, $i1;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextDivider;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $i0 = staticinvoke <net.sourceforge.plantuml.StringUtils: int getHeight(net.sourceforge.plantuml.cucadiagram.Display)>($r1);

        $i1 = $i0 + 4;

        $d0 = (double) $i1;

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextDivider r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        int $i0, $i1;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextDivider;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.asciiart.ComponentTextDivider: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $i0 = staticinvoke <net.sourceforge.plantuml.StringUtils: int getWcWidth(net.sourceforge.plantuml.cucadiagram.Display)>($r1);

        $i1 = $i0 + 2;

        $d0 = (double) $i1;

        return $d0;
    }
}
