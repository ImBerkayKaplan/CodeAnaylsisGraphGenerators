class net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter extends java.lang.Object
{
    private final double fullHeight;
    private final java.util.List positions;
    private final java.util.List titles;
    private final double headerHeight;
    private final double tailHeight;
    private final double signatureHeight;
    private final double newpageHeight;
    private final net.sourceforge.plantuml.cucadiagram.Display diagramTitle;

    void <init>(double, double, java.util.Map, double, double, double, net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter r0;
        double d0, d1, d2, d3, d4;
        net.sourceforge.plantuml.cucadiagram.Display r1, $r12;
        java.util.ArrayList $r2, $r3;
        java.util.Map r4;
        java.util.Set $r5;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.Object $r7, $r10, $r14;
        java.util.Map$Entry r8;
        java.util.List $r9, $r13;
        net.sourceforge.plantuml.sequencediagram.Newpage $r11;
        java.lang.Double $r15;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r4 := @parameter2: java.util.Map;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        r1 := @parameter6: net.sourceforge.plantuml.cucadiagram.Display;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double fullHeight> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: net.sourceforge.plantuml.cucadiagram.Display diagramTitle> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List titles> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions> = $r3;

        $r5 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List titles>;

        $r10 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (net.sourceforge.plantuml.sequencediagram.Newpage) $r10;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.sequencediagram.Newpage: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $r14 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.lang.Double) $r14;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double headerHeight> = d1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double tailHeight> = d2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double signatureHeight> = d3;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double newpageHeight> = d4;

        return;
    }

    public java.util.List getPages()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter r0;
        java.util.List $r1, $r5, $r10;
        int $i0, $i1, $i2, i3;
        java.util.ArrayList $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Page $r4, $r6, $r7, $r9;
        net.sourceforge.plantuml.sequencediagram.graphic.Page[] $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r8 = newarray (net.sourceforge.plantuml.sequencediagram.graphic.Page)[1];

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: net.sourceforge.plantuml.sequencediagram.graphic.Page onePage()>();

        $r8[0] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        return $r10;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: net.sourceforge.plantuml.sequencediagram.graphic.Page firstPage()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        i3 = 0;

     label2:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if i3 >= $i2 goto label3;

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: net.sourceforge.plantuml.sequencediagram.graphic.Page createPage(int)>(i3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: net.sourceforge.plantuml.sequencediagram.graphic.Page lastPage()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        return $r2;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.Page lastPage()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter r0;
        java.util.List $r1, $r2, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r7;
        java.lang.Double $r4;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10;
        net.sourceforge.plantuml.cucadiagram.Display r8;
        net.sourceforge.plantuml.sequencediagram.graphic.Page $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double newpageHeight>;

        d2 = $d0 - $d1;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double fullHeight>;

        $d3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double tailHeight>;

        $d6 = $d4 - $d3;

        $d5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double signatureHeight>;

        d7 = $d6 - $d5;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List titles>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i3);

        r8 = (net.sourceforge.plantuml.cucadiagram.Display) $r7;

        $r9 = new net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double headerHeight>;

        $d9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double tailHeight>;

        $d8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double signatureHeight>;

        specialinvoke $r9.<net.sourceforge.plantuml.sequencediagram.graphic.Page: void <init>(double,double,double,double,double,net.sourceforge.plantuml.cucadiagram.Display)>($d10, d2, d7, $d9, $d8, r8);

        return $r9;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.Page firstPage()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter r0;
        double d0, $d1, $d2, d3, $d4, $d5;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Double $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.Page $r4;
        net.sourceforge.plantuml.cucadiagram.Display $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter;

        d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double headerHeight>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.Double) $r2;

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double newpageHeight>;

        d3 = $d1 + $d2;

        $r4 = new net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double headerHeight>;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double tailHeight>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: net.sourceforge.plantuml.cucadiagram.Display diagramTitle>;

        specialinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.Page: void <init>(double,double,double,double,double,net.sourceforge.plantuml.cucadiagram.Display)>($d5, d0, d3, $d4, 0.0, $r5);

        return $r4;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.Page onePage()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter r0;
        double d0, $d1, $d2, $d3, $d4, d5, $d6, $d7, $d8;
        net.sourceforge.plantuml.sequencediagram.graphic.Page $r1;
        net.sourceforge.plantuml.cucadiagram.Display $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter;

        d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double headerHeight>;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double fullHeight>;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double tailHeight>;

        $d4 = $d2 - $d1;

        $d3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double signatureHeight>;

        d5 = $d4 - $d3;

        $r1 = new net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double headerHeight>;

        $d7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double tailHeight>;

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double signatureHeight>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: net.sourceforge.plantuml.cucadiagram.Display diagramTitle>;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.Page: void <init>(double,double,double,double,double,net.sourceforge.plantuml.cucadiagram.Display)>($d8, d0, d5, $d7, $d6, $r2);

        return $r1;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.Page createPage(int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter r0;
        int i0, $i1;
        java.util.List $r1, $r4, $r7;
        java.lang.Object $r2, $r5, $r8;
        java.lang.Double $r3, $r6;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7;
        net.sourceforge.plantuml.cucadiagram.Display r9;
        net.sourceforge.plantuml.sequencediagram.graphic.Page $r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double newpageHeight>;

        d2 = $d0 - $d1;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List positions>;

        $i1 = i0 + 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (java.lang.Double) $r5;

        $d3 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double newpageHeight>;

        d5 = $d3 + $d4;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: java.util.List titles>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (net.sourceforge.plantuml.cucadiagram.Display) $r8;

        $r10 = new net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double headerHeight>;

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter: double tailHeight>;

        specialinvoke $r10.<net.sourceforge.plantuml.sequencediagram.graphic.Page: void <init>(double,double,double,double,double,net.sourceforge.plantuml.cucadiagram.Display)>($d7, d2, d5, $d6, 0.0, r9);

        return $r10;
    }
}
