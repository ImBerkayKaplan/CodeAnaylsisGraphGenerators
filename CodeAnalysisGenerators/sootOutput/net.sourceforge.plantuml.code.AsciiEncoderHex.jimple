public class net.sourceforge.plantuml.code.AsciiEncoderHex extends java.lang.Object implements net.sourceforge.plantuml.code.URLEncoder
{

    public void <init>()
    {
        net.sourceforge.plantuml.code.AsciiEncoderHex r0;

        r0 := @this: net.sourceforge.plantuml.code.AsciiEncoderHex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String encode(byte[])
    {
        byte[] r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1, i2, $i4, $i5, i6;
        java.lang.String $r4, r5;
        byte b3;
        net.sourceforge.plantuml.code.AsciiEncoderHex r8;

        r8 := @this: net.sourceforge.plantuml.code.AsciiEncoderHex;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuilder;

        $i0 = lengthof r0;

        $i1 = $i0 * 2;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        i2 = lengthof r0;

        i6 = 0;

     label2:
        if i6 >= i2 goto label4;

        b3 = r0[i6];

        $i4 = b3 & 255;

        r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        $i5 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i5 != 1 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        i6 = i6 + 1;

        goto label2;

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public byte[] decode(java.lang.String)
    {
        java.lang.String r0, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8;
        byte[] r1;
        byte $b7;
        net.sourceforge.plantuml.code.AsciiEncoderHex r3;

        r3 := @this: net.sourceforge.plantuml.code.AsciiEncoderHex;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 / 2;

        r1 = newarray (byte)[$i1];

        i8 = 0;

     label1:
        $i2 = lengthof r1;

        if i8 >= $i2 goto label2;

        $i5 = i8 * 2;

        $i3 = i8 * 2;

        $i4 = $i3 + 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $b7 = (byte) $i6;

        r1[i8] = $b7;

        i8 = i8 + 1;

        goto label1;

     label2:
        return r1;
    }
}
