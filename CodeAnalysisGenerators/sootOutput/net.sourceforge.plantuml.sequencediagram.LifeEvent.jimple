public class net.sourceforge.plantuml.sequencediagram.LifeEvent extends net.sourceforge.plantuml.sequencediagram.AbstractEvent implements net.sourceforge.plantuml.sequencediagram.Event
{
    private final net.sourceforge.plantuml.sequencediagram.Participant p;
    private final net.sourceforge.plantuml.sequencediagram.LifeEventType type;
    private final net.sourceforge.plantuml.graphic.SymbolContext backcolor;
    private net.sourceforge.plantuml.sequencediagram.AbstractMessage message;

    public void <init>(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.LifeEventType, net.sourceforge.plantuml.graphic.SymbolContext)
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        net.sourceforge.plantuml.sequencediagram.LifeEventType r2;
        net.sourceforge.plantuml.graphic.SymbolContext r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.LifeEventType;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractEvent: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant p> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.graphic.SymbolContext backcolor> = r3;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r2;
        net.sourceforge.plantuml.sequencediagram.Participant $r3;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r6;
        java.lang.String $r8;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LifeEvent:");

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r2.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public net.sourceforge.plantuml.sequencediagram.Participant getParticipant()
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.Participant $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant p>;

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.LifeEventType getType()
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type>;

        return $r1;
    }

    public net.sourceforge.plantuml.graphic.SymbolContext getSpecificColors()
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.graphic.SymbolContext $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.graphic.SymbolContext backcolor>;

        return $r1;
    }

    public boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1, $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isActivate()
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r1, $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type>;

        $r1 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType ACTIVATE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDeactivateOrDestroy()
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type>;

        $r1 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DEACTIVATE>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type>;

        $r3 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DESTROY>;

        if $r4 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isDeactivate()
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r1, $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type>;

        $r1 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DEACTIVATE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDestroy(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1, $r2;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r3, $r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r2 != r1 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType type>;

        $r3 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DESTROY>;

        if $r4 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setMessage(net.sourceforge.plantuml.sequencediagram.AbstractMessage)
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.AbstractMessage message> = r1;

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.AbstractMessage getMessage()
    {
        net.sourceforge.plantuml.sequencediagram.LifeEvent r0;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.AbstractMessage message>;

        return $r1;
    }
}
