class net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point extends java.lang.Object
{
    public double x;
    public double y;

    public void rotate(double)
    {
        double d0, d1, $d2, d3, $d4, $d5, $d6, $d7, d8, $d9, $d10, $d11, $d12, $d13, $d14;
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point r0;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point;

        d0 := @parameter0: double;

        d1 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d2 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        d3 = neg $d2;

        $d4 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x>;

        $d7 = $d4 * d1;

        $d5 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y>;

        $d6 = $d5 * d3;

        d8 = $d7 - $d6;

        $d9 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x>;

        $d10 = neg $d9;

        $d13 = $d10 * d3;

        $d11 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y>;

        $d12 = $d11 * d1;

        $d14 = $d13 - $d12;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y> = $d14;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x> = d8;

        return;
    }

    public void <init>(double, double)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point r0;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x> = d0;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y> = d1;

        return;
    }

    public net.sourceforge.plantuml.ugraphic.UTranslate getPos(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate $r0;
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point r1;
        java.awt.geom.Point2D r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point;

        r2 := @parameter0: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x>;

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + $d1;

        $d3 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y>;

        $d4 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d2, $d5);

        return $r0;
    }

    public void translate(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x>;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + $d1;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x> = $d2;

        $d3 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y>;

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y> = $d5;

        return;
    }

    public void add(net.sourceforge.plantuml.ugraphic.UPolygon)
    {
        net.sourceforge.plantuml.ugraphic.UPolygon r0;
        net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point r1;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UPolygon;

        $d1 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double x>;

        $d0 = r1.<net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike$Point: double y>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d1, $d0);

        return;
    }
}
