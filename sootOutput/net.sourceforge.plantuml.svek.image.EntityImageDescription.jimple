public class net.sourceforge.plantuml.svek.image.EntityImageDescription extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private final net.sourceforge.plantuml.svek.ShapeType shapeType;
    private final net.sourceforge.plantuml.Url url;
    private final net.sourceforge.plantuml.graphic.TextBlock asSmall;
    private final net.sourceforge.plantuml.graphic.TextBlock name;
    private final net.sourceforge.plantuml.graphic.TextBlock desc;
    private net.sourceforge.plantuml.graphic.TextBlock stereo;
    private final boolean hideText;
    private final java.util.Collection links;
    private final boolean useRankSame;
    private final boolean fixCircleLabelOverlapping;
    private final net.sourceforge.plantuml.svek.Bibliotekon bibliotekon;
    private final net.sourceforge.plantuml.graphic.SymbolContext ctx;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.cucadiagram.PortionShower, java.util.Collection, net.sourceforge.plantuml.style.SName, net.sourceforge.plantuml.svek.Bibliotekon)
    {
        net.sourceforge.plantuml.svek.image.EntityImageDescription r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.graphic.color.Colors $r2, r16;
        net.sourceforge.plantuml.ISkinParam r3, $r4, $r5, $r7, $r18, $r22, $r24, $r25, $r30, $r33, $r36, $r45, $r48, $r49, $r57, $r64, $r71, $r76, $r78, $r80, $r82, $r88, $r99, $r102, $r106, $r108, $r116, $r118, $r120, $r122, $r126, $r128, $r131, $r149, $r153;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        net.sourceforge.plantuml.svek.Bibliotekon r6;
        java.util.Collection r8;
        net.sourceforge.plantuml.cucadiagram.Stereotype r9, $r27, $r86, $r89;
        net.sourceforge.plantuml.graphic.USymbol r10, $r11, $r12, $r13, $r136;
        net.sourceforge.plantuml.svek.ShapeType $r14, $r133, $r134, $r135;
        net.sourceforge.plantuml.Url $r15;
        net.sourceforge.plantuml.graphic.color.ColorType $r17;
        net.sourceforge.plantuml.ColorParam[] $r19, $r90;
        net.sourceforge.plantuml.ColorParam $r20, $r91;
        net.sourceforge.plantuml.graphic.SkinParameter $r21, $r23, $r28, $r29, $r84, $r85, $r96;
        net.sourceforge.plantuml.cucadiagram.IEntity $r26;
        net.sourceforge.plantuml.ugraphic.UStroke $r31, r143;
        net.sourceforge.plantuml.graphic.FontConfiguration $r32, $r35, r144, r145;
        net.sourceforge.plantuml.FontParam $r34, $r37, $r47, $r152;
        net.sourceforge.plantuml.graphic.SymbolContext $r38, $r39, $r40, $r41, $r56, $r63;
        java.lang.String $r42, $r68, $r73;
        net.sourceforge.plantuml.cucadiagram.Display $r43, $r44, $r46, $r74, r147;
        net.sourceforge.plantuml.LineBreakStrategy $r50;
        net.sourceforge.plantuml.graphic.TextBlock $r51, $r52, $r53, $r54, $r55, $r59, $r60, $r61, $r62, $r66, $r77, $r79, $r81, $r83, $r154;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r58, $r65, $r75, r146, r148, $r150, $r151;
        net.sourceforge.plantuml.Guillemet $r67, $r72;
        net.sourceforge.plantuml.cucadiagram.PortionShower r69;
        net.sourceforge.plantuml.cucadiagram.EntityPortion $r70;
        double $d0, d1, d2, d3, $d4;
        java.lang.AssertionError $r87;
        net.sourceforge.plantuml.style.SName[] $r92;
        net.sourceforge.plantuml.style.SName $r93, $r94, r95, $r97;
        net.sourceforge.plantuml.style.StyleSignature $r98, $r101, r139;
        net.sourceforge.plantuml.style.StyleBuilder $r100, $r103;
        net.sourceforge.plantuml.style.PName $r104, $r110, $r112, $r114, $r124;
        net.sourceforge.plantuml.style.Value $r105, $r111, $r113, $r115, $r125;
        net.sourceforge.plantuml.api.ThemeStyle $r107, $r117, $r121, $r127;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r109, $r119, $r123, $r129;
        net.sourceforge.plantuml.ugraphic.color.HColor r137, r142;
        net.sourceforge.plantuml.style.Style r138, r140, r141;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r3 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r69 := @parameter2: net.sourceforge.plantuml.cucadiagram.PortionShower;

        r8 := @parameter3: java.util.Collection;

        r95 := @parameter4: net.sourceforge.plantuml.style.SName;

        r6 := @parameter5: net.sourceforge.plantuml.svek.Bibliotekon;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ISkinParam mute(net.sourceforge.plantuml.ISkinParam)>(r3);

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, $r4);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z0 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: boolean useRankSame()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean useRankSame> = $z0;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon> = r6;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z1 = interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: boolean fixCircleLabelOverlapping()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean fixCircleLabelOverlapping> = $z1;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: java.util.Collection links> = r8;

        r9 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        r10 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.USymbol getUSymbol(net.sourceforge.plantuml.cucadiagram.ILeaf)>(r1);

        $r11 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol FOLDER>;

        if r10 != $r11 goto label01;

        $r134 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType FOLDER>;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.ShapeType shapeType> = $r134;

        goto label06;

     label01:
        $r12 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol HEXAGON>;

        if r10 != $r12 goto label02;

        $r133 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType HEXAGON>;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.ShapeType shapeType> = $r133;

        goto label06;

     label02:
        $r13 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol INTERFACE>;

        if r10 != $r13 goto label05;

        $r131 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z7 = interfaceinvoke $r131.<net.sourceforge.plantuml.ISkinParam: boolean fixCircleLabelOverlapping()>();

        if $z7 == 0 goto label03;

        $r135 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_WITH_CIRCLE_INSIDE>;

        goto label04;

     label03:
        $r135 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

     label04:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.ShapeType shapeType> = $r135;

        goto label06;

     label05:
        $r14 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.ShapeType shapeType> = $r14;

     label06:
        $r136 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol INTERFACE>;

        if r10 != $r136 goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hideText> = $z8;

        $r15 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.Url url> = $r15;

        r16 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r17 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r137 = virtualinvoke r16.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r17);

        r138 = null;

        $z2 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z2 == 0 goto label10;

        $r92 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r93 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r92[0] = $r93;

        $r94 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r92[1] = $r94;

        $r92[2] = r95;

        $r96 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $r97 = virtualinvoke $r96.<net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.style.SName getStyleName()>();

        $r92[3] = $r97;

        r139 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r92);

        $r98 = virtualinvoke r139.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r9);

        $r99 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r100 = interfaceinvoke $r99.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r140 = virtualinvoke $r98.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r100);

        r138 = virtualinvoke r140.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.graphic.color.Colors)>(r16);

        $r101 = virtualinvoke r139.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature forStereotypeItself(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r9);

        $r102 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r103 = interfaceinvoke $r102.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r141 = virtualinvoke $r101.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r103);

        $r104 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r105 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r104);

        $r106 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r107 = interfaceinvoke $r106.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r108 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r109 = interfaceinvoke $r108.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r142 = interfaceinvoke $r105.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r107, $r109);

        if r137 != null goto label09;

        $r124 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r125 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r124);

        $r126 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r127 = interfaceinvoke $r126.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r128 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r129 = interfaceinvoke $r128.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r137 = interfaceinvoke $r125.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r127, $r129);

     label09:
        $r110 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName RoundCorner>;

        $r111 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r110);

        d1 = interfaceinvoke $r111.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r112 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName DiagonalCorner>;

        $r113 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r112);

        d2 = interfaceinvoke $r113.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r114 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r115 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r114);

        d3 = interfaceinvoke $r115.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r143 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke(net.sourceforge.plantuml.graphic.color.Colors)>(r16);

        $r116 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r117 = interfaceinvoke $r116.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r118 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r119 = interfaceinvoke $r118.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r144 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r117, $r119);

        $r120 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r121 = interfaceinvoke $r120.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r122 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r123 = interfaceinvoke $r122.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r145 = virtualinvoke r141.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r121, $r123);

        r146 = virtualinvoke r138.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        goto label14;

     label10:
        $r18 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r20 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.ColorParam getColorParamBorder()>();

        $r19[0] = $r20;

        r142 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r18, r9, $r19);

        if r137 != null goto label11;

        $r88 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r89 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r90 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r91 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.ColorParam getColorParamBack()>();

        $r90[0] = $r91;

        r137 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r88, $r89, $r90);

     label11:
        $r21 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $r22 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        d1 = virtualinvoke $r21.<net.sourceforge.plantuml.graphic.SkinParameter: double getRoundCorner(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r22, r9);

        $r23 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        d2 = virtualinvoke $r23.<net.sourceforge.plantuml.graphic.SkinParameter: double getDiagonalCorner(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r24, r9);

        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r26 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r27 = interfaceinvoke $r26.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r28 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $z3 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: boolean shadowing2(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.graphic.SkinParameter)>($r27, $r28);

        if $z3 == 0 goto label12;

        $d4 = 3.0;

        goto label13;

     label12:
        $d4 = 0.0;

     label13:
        d3 = $d4;

        $r29 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $r30 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r31 = virtualinvoke $r29.<net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.ugraphic.UStroke getStroke(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r30, r9);

        r143 = virtualinvoke r16.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke muteStroke(net.sourceforge.plantuml.ugraphic.UStroke)>($r31);

        $r32 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r33 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r34 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.FontParam getFontParam()>();

        specialinvoke $r32.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r33, $r34, r9);

        r144 = $r32;

        $r35 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r36 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r37 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.FontParam getFontParamStereotype()>();

        specialinvoke $r35.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r36, $r37, r9);

        r145 = $r35;

        r146 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

     label14:
        $z9 = <net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean $assertionsDisabled>;

        if $z9 != 0 goto label15;

        $r86 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        if $r86 == r9 goto label15;

        $r87 = new java.lang.AssertionError;

        specialinvoke $r87.<java.lang.AssertionError: void <init>()>();

        throw $r87;

     label15:
        $r38 = new net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke $r38.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r137, r142);

        $r39 = virtualinvoke $r38.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withStroke(net.sourceforge.plantuml.ugraphic.UStroke)>(r143);

        $r40 = virtualinvoke $r39.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withShadow(double)>(d3);

        $r41 = virtualinvoke $r40.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withCorner(double,double)>(d1, d2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.SymbolContext ctx> = $r41;

        $r42 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: java.lang.String getCodeGetName()>();

        r147 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r42);

        $r43 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $z4 = virtualinvoke $r43.<net.sourceforge.plantuml.cucadiagram.Display: boolean equals(java.lang.Object)>(r147);

        if $z4 == 0 goto label16;

        $r84 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()>();

        $r85 = <net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.graphic.SkinParameter PACKAGE>;

        if $r84 == $r85 goto label17;

     label16:
        $r44 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $z5 = virtualinvoke $r44.<net.sourceforge.plantuml.cucadiagram.Display: boolean isWhite()>();

        if $z5 == 0 goto label18;

     label17:
        $r82 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $d0 = interfaceinvoke $r82.<net.sourceforge.plantuml.ISkinParam: double minClassWidth()>();

        $r83 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>($d0, 0.0);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock desc> = $r83;

        goto label19;

     label18:
        $r45 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r148 = interfaceinvoke $r45.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r146);

        $r46 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r47 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.FontParam getFontParam()>();

        $r48 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r49 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r50 = interfaceinvoke $r49.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        $r51 = staticinvoke <net.sourceforge.plantuml.cucadiagram.BodyFactory: net.sourceforge.plantuml.graphic.TextBlock create3(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.LineBreakStrategy,net.sourceforge.plantuml.style.Style)>($r46, $r47, $r48, r148, r144, $r50, r138);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock desc> = $r51;

     label19:
        $r52 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo> = $r52;

        if r9 == null goto label20;

        $r78 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r79 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.graphic.TextBlock getSprite(net.sourceforge.plantuml.SpriteContainer)>($r78);

        if $r79 == null goto label20;

        $r80 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r81 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.graphic.TextBlock getSprite(net.sourceforge.plantuml.SpriteContainer)>($r80);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo> = $r81;

        goto label21;

     label20:
        if r9 == null goto label21;

        $r67 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        $r68 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r67);

        if $r68 == null goto label21;

        $r70 = <net.sourceforge.plantuml.cucadiagram.EntityPortion: net.sourceforge.plantuml.cucadiagram.EntityPortion STEREOTYPE>;

        $z6 = interfaceinvoke r69.<net.sourceforge.plantuml.cucadiagram.PortionShower: boolean showPortion(net.sourceforge.plantuml.cucadiagram.EntityPortion,net.sourceforge.plantuml.cucadiagram.IEntity)>($r70, r1);

        if $z6 == 0 goto label21;

        $r71 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r72 = interfaceinvoke $r71.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.Guillemet guillemet()>();

        $r73 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Stereotype: java.lang.String getLabel(net.sourceforge.plantuml.Guillemet)>($r72);

        $r74 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r73);

        $r75 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r76 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r77 = virtualinvoke $r74.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r145, $r75, $r76);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo> = $r77;

     label21:
        $r149 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r150 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r151 = interfaceinvoke $r149.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r150);

        $r152 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.FontParam getFontParam()>();

        $r153 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r154 = staticinvoke <net.sourceforge.plantuml.cucadiagram.BodyFactory: net.sourceforge.plantuml.graphic.TextBlock create2(net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.style.Style)>($r151, r147, $r152, $r153, r9, r1, r138);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock name> = $r154;

        $z10 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hideText>;

        if $z10 == 0 goto label22;

        $r60 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        $r61 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        $r62 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        $r63 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.SymbolContext ctx>;

        $r64 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r65 = interfaceinvoke $r64.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getStereotypeAlignment()>();

        $r66 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.TextBlock asSmall(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r60, $r61, $r62, $r63, $r65);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock asSmall> = $r66;

        goto label23;

     label22:
        $r53 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock name>;

        $r54 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r55 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        $r56 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.SymbolContext ctx>;

        $r57 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r58 = interfaceinvoke $r57.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getStereotypeAlignment()>();

        $r59 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.TextBlock asSmall(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r53, $r54, $r55, $r56, $r58);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock asSmall> = $r59;

     label23:
        return;
    }

    private net.sourceforge.plantuml.graphic.USymbol getUSymbol(net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.cucadiagram.ILeaf r0;
        net.sourceforge.plantuml.graphic.USymbol $r1, $r4, $r8;
        java.lang.Object $r3;
        net.sourceforge.plantuml.svek.image.EntityImageDescription r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.ComponentStyle $r7;

        r5 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r1 != null goto label1;

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ComponentStyle componentStyle()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.ComponentStyle: net.sourceforge.plantuml.graphic.USymbol toUSymbol()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

     label2:
        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r4 = (net.sourceforge.plantuml.graphic.USymbol) $r3;

        return $r4;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getNameDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageDescription r0;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;
        net.sourceforge.plantuml.Dimension2DDouble $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $z0 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hideText>;

        if $z0 == 0 goto label1;

        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        return $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock name>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageDescription r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock asSmall>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageDescription r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.cucadiagram.IEntity $r1, $r4, $r16;
        java.util.Collection $r2, $r5, $r17;
        net.sourceforge.plantuml.cucadiagram.ILeaf $r3, $r6, $r18;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        net.sourceforge.plantuml.graphic.TextBlock $r8, $r10, $r12;
        net.sourceforge.plantuml.awt.geom.Dimension2D r9, r11, r13;
        double $d0, $d1, d2, $d3, $d4, $d5, d6, $d7, $d8, d9;
        byte $b0;
        net.sourceforge.plantuml.svek.Margins $r14, $r15, $r19, $r20, $r21;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $z0 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hideText>;

        if $z0 != 0 goto label1;

        $r21 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r21;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r3 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r1;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: java.util.Collection links>;

        $z1 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean isThereADoubleLink(net.sourceforge.plantuml.cucadiagram.ILeaf,java.util.Collection)>($r3, $r2);

        if $z1 == 0 goto label2;

        $r20 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r20;

     label2:
        $z2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean fixCircleLabelOverlapping>;

        if $z2 != 0 goto label3;

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r18 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r16;

        $r17 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: java.util.Collection links>;

        $z4 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hasSomeHorizontalLinkVisible(net.sourceforge.plantuml.cucadiagram.ILeaf,java.util.Collection)>($r18, $r17);

        if $z4 == 0 goto label3;

        $r19 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r19;

     label3:
        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r6 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r4;

        $r5 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: java.util.Collection links>;

        $z3 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hasSomeHorizontalLinkDoubleDecorated(net.sourceforge.plantuml.cucadiagram.ILeaf,java.util.Collection)>($r6, $r5);

        if $z3 == 0 goto label4;

        $r15 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r15;

     label4:
        $r8 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $r10 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock desc>;

        r11 = interfaceinvoke $r10.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $r12 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock asSmall>;

        r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $d0 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r11.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $d3 = virtualinvoke r13.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d9 = d2 - $d3;

        $b0 = d9 cmpg 1.0;

        if $b0 >= 0 goto label5;

        d9 = 1.0;

     label5:
        $d4 = virtualinvoke r11.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d6 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>(1.0, $d4, $d5);

        $r14 = new net.sourceforge.plantuml.svek.Margins;

        $d8 = d9 / 2.0;

        $d7 = d9 / 2.0;

        specialinvoke $r14.<net.sourceforge.plantuml.svek.Margins: void <init>(double,double,double,double)>($d8, $d7, d6, d6);

        return $r14;
    }

    private boolean hasSomeHorizontalLinkVisible(net.sourceforge.plantuml.cucadiagram.ILeaf, java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        net.sourceforge.plantuml.cucadiagram.Link r3;
        int $i0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r4;
        net.sourceforge.plantuml.svek.image.EntityImageDescription r5;

        r5 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r4 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r0 := @parameter1: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.cucadiagram.Link) $r2;

        $i0 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: int getLength()>();

        if $i0 != 1 goto label2;

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: boolean contains(net.sourceforge.plantuml.cucadiagram.IEntity)>(r4);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: boolean isInvis()>();

        if $z2 != 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean isThereADoubleLink(net.sourceforge.plantuml.cucadiagram.ILeaf, java.util.Collection)
    {
        java.util.HashSet $r0;
        java.util.Collection r2;
        java.util.Iterator r3;
        boolean $z0, $z1, z2;
        java.lang.Object $r4;
        net.sourceforge.plantuml.cucadiagram.Link r5;
        net.sourceforge.plantuml.cucadiagram.ILeaf r6;
        net.sourceforge.plantuml.cucadiagram.IEntity r7;
        net.sourceforge.plantuml.svek.image.EntityImageDescription r8;

        r8 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r6 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.cucadiagram.Link) $r4;

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Link: boolean contains(net.sourceforge.plantuml.cucadiagram.IEntity)>(r6);

        if $z1 == 0 goto label2;

        r7 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getOther(net.sourceforge.plantuml.cucadiagram.IEntity)>(r6);

        z2 = interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r7);

        if z2 != 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean hasSomeHorizontalLinkDoubleDecorated(net.sourceforge.plantuml.cucadiagram.ILeaf, java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        net.sourceforge.plantuml.cucadiagram.Link r3;
        int $i0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r4;
        net.sourceforge.plantuml.cucadiagram.LinkType $r5;
        net.sourceforge.plantuml.svek.image.EntityImageDescription r6;

        r6 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r4 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r0 := @parameter1: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.cucadiagram.Link) $r2;

        $i0 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: int getLength()>();

        if $i0 != 1 goto label2;

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: boolean contains(net.sourceforge.plantuml.cucadiagram.IEntity)>(r4);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.LinkType getType()>();

        $z2 = virtualinvoke $r5.<net.sourceforge.plantuml.cucadiagram.LinkType: boolean isDoubleDecorated()>();

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r46, $r48, r50, r51;
        net.sourceforge.plantuml.ugraphic.UComment $r1;
        java.lang.StringBuilder $r2, $r3, $r7, $r11, $r13, $r16, $r17, $r20, $r22, $r25;
        net.sourceforge.plantuml.svek.image.EntityImageDescription r4;
        net.sourceforge.plantuml.cucadiagram.IEntity $r5, $r14, $r23;
        java.lang.String $r6, $r8, $r18, $r26;
        java.util.EnumMap $r9;
        net.sourceforge.plantuml.ugraphic.UGroupType $r12, $r21;
        net.sourceforge.plantuml.cucadiagram.Code $r15, $r24;
        net.sourceforge.plantuml.Url $r28, $r32, $r49;
        net.sourceforge.plantuml.svek.ShapeType $r29, $r30;
        net.sourceforge.plantuml.graphic.TextBlock $r31, $r33, $r36, $r40, $r41, $r45;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder $r34, $r37, $r42;
        net.sourceforge.plantuml.awt.geom.Dimension2D r35, r38, r43;
        double $d1, $d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, d10, $d11, $d12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r39, $r44;
        net.sourceforge.plantuml.graphic.SymbolContext $r47;

        r4 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = new net.sourceforge.plantuml.ugraphic.UComment;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entity ");

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getCodeGetName()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UComment: void <init>(java.lang.String)>($r8);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        $r9 = new java.util.EnumMap;

        specialinvoke $r9.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/UGroupType;");

        $r12 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType CLASS>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem ");

        $r14 = virtualinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" selected");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r18);

        $r21 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem_");

        $r23 = virtualinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r26);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r9);

        $r28 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.Url url>;

        if $r28 == null goto label1;

        $r49 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r49);

     label1:
        $r30 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.ShapeType shapeType>;

        $r29 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType HEXAGON>;

        if $r30 != $r29 goto label2;

        $r47 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.SymbolContext ctx>;

        $r48 = virtualinvoke $r47.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        specialinvoke r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: void drawHexagon(net.sourceforge.plantuml.ugraphic.UGraphic)>($r48);

     label2:
        $r31 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock asSmall>;

        interfaceinvoke $r31.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        $z0 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hideText>;

        if $z0 == 0 goto label3;

        $r33 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock asSmall>;

        $r34 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r35 = interfaceinvoke $r33.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r34);

        $r36 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r37 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r38 = interfaceinvoke $r36.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r37);

        $d1 = virtualinvoke r35.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = virtualinvoke r38.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = $d1 - $d2;

        d4 = $d3 / 2.0;

        $r39 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d5 = virtualinvoke r35.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = 8.0 + $d5;

        specialinvoke $r39.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d4, $d6);

        r50 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r39);

        r51 = staticinvoke <net.sourceforge.plantuml.ugraphic.UGraphicStencil: net.sourceforge.plantuml.ugraphic.UGraphic create(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r50, r38);

        $r40 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock desc>;

        interfaceinvoke $r40.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r51);

        $r41 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        $r42 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r43 = interfaceinvoke $r41.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r42);

        $d7 = virtualinvoke r35.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d8 = virtualinvoke r43.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d9 = $d7 - $d8;

        d10 = $d9 / 2.0;

        $r45 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        $r44 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d11 = virtualinvoke r43.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d12 = -8.0 - $d11;

        specialinvoke $r44.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d10, $d12);

        $r46 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r44);

        interfaceinvoke $r45.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r46);

     label3:
        $r32 = r4.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.Url url>;

        if $r32 == null goto label4;

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label4:
        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;
    }

    private void drawHexagon(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageDescription r0;
        net.sourceforge.plantuml.svek.Bibliotekon $r1, $r2;
        net.sourceforge.plantuml.cucadiagram.IEntity $r3;
        net.sourceforge.plantuml.svek.SvekNode r4;
        net.sourceforge.plantuml.ugraphic.Shadowable r5;
        net.sourceforge.plantuml.graphic.SymbolContext $r6;
        double $d0;
        net.sourceforge.plantuml.ugraphic.UGraphic r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        r4 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r3);

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.ugraphic.Shadowable getPolygon()>();

        if r5 == null goto label2;

        $r6 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.SymbolContext ctx>;

        $d0 = virtualinvoke $r6.<net.sourceforge.plantuml.graphic.SymbolContext: double getDeltaShadow()>();

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>($d0);

        interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r5);

     label2:
        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.image.EntityImageDescription r0;
        net.sourceforge.plantuml.svek.ShapeType $r1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.svek.ShapeType shapeType>;

        return $r1;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageDescription r0;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4, $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r5, r7;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, d7, $d8, $d9, $d10;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageDescription;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $z0 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean hideText>;

        if $z0 == 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock asSmall>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock desc>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r6 = r0.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.graphic.TextBlock stereo>;

        r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d0 - $d1;

        d3 = $d2 / 2.0;

        $d4 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = $d4 - $d5;

        d7 = $d6 / 2.0;

        $d9 = neg d3;

        $d8 = neg d7;

        $d10 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>($d9, $d8, 0.0);

        return $d10;

     label1:
        return 0.0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/svek/image/EntityImageDescription;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.svek.image.EntityImageDescription: boolean $assertionsDisabled> = $z1;

        return;
    }
}
