class net.sourceforge.plantuml.json.Json$DefaultHandler extends net.sourceforge.plantuml.json.JsonHandler
{
    protected net.sourceforge.plantuml.json.JsonValue value;

    void <init>()
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        specialinvoke r0.<net.sourceforge.plantuml.json.JsonHandler: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.json.JsonArray startArray()
    {
        net.sourceforge.plantuml.json.JsonArray $r0;
        net.sourceforge.plantuml.json.Json$DefaultHandler r1;

        r1 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        $r0 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        return $r0;
    }

    public net.sourceforge.plantuml.json.JsonObject startObject()
    {
        net.sourceforge.plantuml.json.JsonObject $r0;
        net.sourceforge.plantuml.json.Json$DefaultHandler r1;

        r1 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        $r0 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        return $r0;
    }

    public void endNull()
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonValue $r1;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        $r1 = <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue NULL>;

        r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value> = $r1;

        return;
    }

    public void endBoolean(boolean)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        boolean z0;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue TRUE>;

        goto label2;

     label1:
        $r2 = <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue FALSE>;

     label2:
        r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value> = $r2;

        return;
    }

    public void endString(java.lang.String)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonString $r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r2 := @parameter0: java.lang.String;

        $r1 = new net.sourceforge.plantuml.json.JsonString;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonString: void <init>(java.lang.String)>(r2);

        r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value> = $r1;

        return;
    }

    public void endNumber(java.lang.String)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonNumber $r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r2 := @parameter0: java.lang.String;

        $r1 = new net.sourceforge.plantuml.json.JsonNumber;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonNumber: void <init>(java.lang.String)>(r2);

        r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value> = $r1;

        return;
    }

    public void endArray(net.sourceforge.plantuml.json.JsonArray)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonArray r1;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonArray;

        r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value> = r1;

        return;
    }

    public void endObject(net.sourceforge.plantuml.json.JsonObject)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonObject r1;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonObject;

        r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value> = r1;

        return;
    }

    public void endArrayValue(net.sourceforge.plantuml.json.JsonArray)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        net.sourceforge.plantuml.json.Json$DefaultHandler r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r1 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r0 := @parameter0: net.sourceforge.plantuml.json.JsonArray;

        $r2 = r1.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value>;

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r2);

        return;
    }

    public void endObjectValue(net.sourceforge.plantuml.json.JsonObject, java.lang.String)
    {
        net.sourceforge.plantuml.json.JsonObject r0;
        java.lang.String r1;
        net.sourceforge.plantuml.json.Json$DefaultHandler r2;
        net.sourceforge.plantuml.json.JsonValue $r3;

        r2 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r0 := @parameter0: net.sourceforge.plantuml.json.JsonObject;

        r1 := @parameter1: java.lang.String;

        $r3 = r2.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value>;

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r1, $r3);

        return;
    }

    net.sourceforge.plantuml.json.JsonValue getValue()
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonValue $r1;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        $r1 = r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonValue value>;

        return $r1;
    }

    public volatile void endObjectValue(java.lang.Object, java.lang.String)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        java.lang.Object r1;
        java.lang.String r2;
        net.sourceforge.plantuml.json.JsonObject $r3;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = (net.sourceforge.plantuml.json.JsonObject) r1;

        virtualinvoke r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: void endObjectValue(net.sourceforge.plantuml.json.JsonObject,java.lang.String)>($r3, r2);

        return;
    }

    public volatile void endObject(java.lang.Object)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        java.lang.Object r1;
        net.sourceforge.plantuml.json.JsonObject $r2;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.json.JsonObject) r1;

        virtualinvoke r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: void endObject(net.sourceforge.plantuml.json.JsonObject)>($r2);

        return;
    }

    public volatile java.lang.Object startObject()
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonObject $r1;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonObject startObject()>();

        return $r1;
    }

    public volatile void endArrayValue(java.lang.Object)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        java.lang.Object r1;
        net.sourceforge.plantuml.json.JsonArray $r2;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.json.JsonArray) r1;

        virtualinvoke r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: void endArrayValue(net.sourceforge.plantuml.json.JsonArray)>($r2);

        return;
    }

    public volatile void endArray(java.lang.Object)
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        java.lang.Object r1;
        net.sourceforge.plantuml.json.JsonArray $r2;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.json.JsonArray) r1;

        virtualinvoke r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: void endArray(net.sourceforge.plantuml.json.JsonArray)>($r2);

        return;
    }

    public volatile java.lang.Object startArray()
    {
        net.sourceforge.plantuml.json.Json$DefaultHandler r0;
        net.sourceforge.plantuml.json.JsonArray $r1;

        r0 := @this: net.sourceforge.plantuml.json.Json$DefaultHandler;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.json.Json$DefaultHandler: net.sourceforge.plantuml.json.JsonArray startArray()>();

        return $r1;
    }
}
