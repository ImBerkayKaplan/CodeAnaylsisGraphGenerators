public class net.sourceforge.plantuml.ugraphic.hand.UEllipseHand extends java.lang.Object
{
    private net.sourceforge.plantuml.ugraphic.Shadowable poly;
    private final java.util.Random rnd;

    private double randomMe()
    {
        net.sourceforge.plantuml.ugraphic.hand.UEllipseHand r0;
        java.util.Random $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.UEllipseHand;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: java.util.Random rnd>;

        $d0 = virtualinvoke $r1.<java.util.Random: double nextDouble()>();

        return $d0;
    }

    public void <init>(net.sourceforge.plantuml.ugraphic.UEllipse, java.util.Random)
    {
        net.sourceforge.plantuml.ugraphic.hand.UEllipseHand r0;
        java.util.Random r1;
        net.sourceforge.plantuml.ugraphic.UEllipse r2;
        double $d0, $d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, $d21, $d22, $d23, $d24, $d25, d26, d27, d28;
        byte $b0, $b1, $b2, $b3, $b4;
        net.sourceforge.plantuml.ugraphic.UPolygon $r3, $r6, $r8;
        net.sourceforge.plantuml.ugraphic.Shadowable $r4, $r5, $r7;
        java.awt.geom.Point2D r9;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.UEllipseHand;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UEllipse;

        r1 := @parameter1: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: java.util.Random rnd> = r1;

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UEllipse: double getStart()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UEllipse: double getExtend()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 == 0 goto label2;

     label1:
        r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: net.sourceforge.plantuml.ugraphic.Shadowable poly> = r2;

        return;

     label2:
        $r3 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: net.sourceforge.plantuml.ugraphic.Shadowable poly> = $r3;

        d2 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UEllipse: double getWidth()>();

        d3 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UEllipse: double getHeight()>();

        d27 = 0.0;

        $b2 = d2 cmpl d3;

        if $b2 != 0 goto label4;

     label3:
        $b4 = d27 cmpg 6.283185307179586;

        if $b4 >= 0 goto label5;

        $d7 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: double randomMe()>();

        $d8 = $d7 * 10.0;

        $d9 = 10.0 + $d8;

        $d10 = $d9 * 3.141592653589793;

        $d11 = $d10 / 180.0;

        d27 = d27 + $d11;

        $d12 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: double randomMe()>();

        $d13 = $d12 - 0.5;

        $d14 = $d13 / 8.0;

        d28 = 1.0 + $d14;

        $d15 = d2 / 2.0;

        $d16 = staticinvoke <java.lang.Math: double cos(double)>(d27);

        $d17 = $d16 * d2;

        $d18 = $d17 * d28;

        $d19 = $d18 / 2.0;

        d20 = $d15 + $d19;

        $d21 = d3 / 2.0;

        $d22 = staticinvoke <java.lang.Math: double sin(double)>(d27);

        $d23 = $d22 * d3;

        $d24 = $d23 * d28;

        $d25 = $d24 / 2.0;

        d26 = $d21 + $d25;

        $r7 = r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: net.sourceforge.plantuml.ugraphic.Shadowable poly>;

        $r8 = (net.sourceforge.plantuml.ugraphic.UPolygon) $r7;

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d20, d26);

        goto label3;

     label4:
        $b3 = d27 cmpg 6.283185307179586;

        if $b3 >= 0 goto label5;

        d27 = d27 + 0.15707963267948966;

        r9 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: java.awt.geom.Point2D getPoint(double,double,double)>(d2, d3, d27);

        $r5 = r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: net.sourceforge.plantuml.ugraphic.Shadowable poly>;

        $r6 = (net.sourceforge.plantuml.ugraphic.UPolygon) $r5;

        $d5 = virtualinvoke r9.<java.awt.geom.Point2D: double getX()>();

        $d6 = virtualinvoke r9.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d5, $d6);

        goto label4;

     label5:
        $r4 = r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: net.sourceforge.plantuml.ugraphic.Shadowable poly>;

        $d4 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UEllipse: double getDeltaShadow()>();

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>($d4);

        return;
    }

    private java.awt.geom.Point2D getPoint(double, double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, d6, d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, d15, $d16, $d17, $d18, $d19;
        net.sourceforge.plantuml.ugraphic.hand.UEllipseHand r0;
        java.awt.geom.Point2D$Double $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.UEllipseHand;

        d0 := @parameter0: double;

        d7 := @parameter1: double;

        d1 := @parameter2: double;

        $d2 = d0 / 2.0;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d4 = $d3 * d0;

        $d5 = $d4 / 2.0;

        d6 = $d2 + $d5;

        $d8 = d7 / 2.0;

        $d9 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        $d10 = $d9 * d7;

        $d11 = $d10 / 2.0;

        d12 = $d8 + $d11;

        $d13 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: double randomMe()>();

        $d14 = $d13 - 0.5;

        d15 = $d14 / 50.0;

        $r1 = new java.awt.geom.Point2D$Double;

        $d16 = d15 * d0;

        $d19 = d6 + $d16;

        $d17 = d15 * d7;

        $d18 = d12 + $d17;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d19, $d18);

        return $r1;
    }

    public net.sourceforge.plantuml.ugraphic.Shadowable getHanddrawn()
    {
        net.sourceforge.plantuml.ugraphic.hand.UEllipseHand r0;
        net.sourceforge.plantuml.ugraphic.Shadowable $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.UEllipseHand;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.hand.UEllipseHand: net.sourceforge.plantuml.ugraphic.Shadowable poly>;

        return $r1;
    }
}
