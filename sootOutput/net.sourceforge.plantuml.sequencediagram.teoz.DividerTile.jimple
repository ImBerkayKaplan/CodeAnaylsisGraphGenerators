public class net.sourceforge.plantuml.sequencediagram.teoz.DividerTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile implements net.sourceforge.plantuml.sequencediagram.teoz.Tile
{
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.sequencediagram.Divider divider;
    private final net.sourceforge.plantuml.real.Real origin;
    private final net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r0;
        net.sourceforge.plantuml.sequencediagram.Divider $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.Divider divider>;

        return $r1;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.Divider, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.sequencediagram.Divider r3;
        net.sourceforge.plantuml.skin.rose.Rose $r4;
        net.sourceforge.plantuml.ISkinParam $r5;
        net.sourceforge.plantuml.real.Real $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.Divider;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.Divider divider> = r3;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.skin.rose.Rose skin> = $r4;

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.ISkinParam skinParam> = $r5;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.real.Real getOrigin()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.real.Real origin> = $r6;

        return;
    }

    private net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r0;
        net.sourceforge.plantuml.sequencediagram.Divider $r1, $r4;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.skin.ComponentType $r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.cucadiagram.Display $r7;
        net.sourceforge.plantuml.skin.Component r8;
        net.sourceforge.plantuml.graphic.StringBounder r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        r9 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.Divider divider>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Divider: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r5 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DIVIDER>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.Divider divider>;

        $r7 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.Divider: net.sourceforge.plantuml.cucadiagram.Display getText()>();

        r8 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r5, null, $r6, $r7);

        return r8;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.skin.Area $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r5, $r6, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        net.sourceforge.plantuml.real.Real $r7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;
        net.sourceforge.plantuml.skin.Context2D $r11;
        net.sourceforge.plantuml.ugraphic.UGraphic r12, r13;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r4 = new net.sourceforge.plantuml.skin.Area;

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $d0 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: double getBorder2()>();

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $d1 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: double getBorder1()>();

        $d2 = $d0 - $d1;

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.real.Real origin>;

        $d3 = interfaceinvoke $r7.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d4 = $d2 - $d3;

        $d5 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r4.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d4, $d5);

        $r9 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $d6 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: double getBorder1()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d6);

        r13 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        $r11 = (net.sourceforge.plantuml.skin.Context2D) r13;

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r13, $r4, $r11);

        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r0;
        net.sourceforge.plantuml.real.Real $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.real.Real origin>;

        return $r1;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DividerTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.real.Real $r5, $r6;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DividerTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DividerTile: net.sourceforge.plantuml.real.Real origin>;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        return $r6;
    }
}
