public class net.sourceforge.plantuml.argon2.model.Instance extends java.lang.Object
{
    public net.sourceforge.plantuml.argon2.model.Block[] memory;
    private int version;
    private int iterations;
    private int segmentLength;
    private int laneLength;
    private int lanes;
    private net.sourceforge.plantuml.argon2.model.Argon2Type type;

    public void <init>(net.sourceforge.plantuml.argon2.Argon2)
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        net.sourceforge.plantuml.argon2.Argon2 r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        net.sourceforge.plantuml.argon2.model.Argon2Type $r2;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        r1 := @parameter0: net.sourceforge.plantuml.argon2.Argon2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getVersion()>();

        r0.<net.sourceforge.plantuml.argon2.model.Instance: int version> = $i0;

        $i1 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getIterations()>();

        r0.<net.sourceforge.plantuml.argon2.model.Instance: int iterations> = $i1;

        $i2 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getLanes()>();

        r0.<net.sourceforge.plantuml.argon2.model.Instance: int lanes> = $i2;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: net.sourceforge.plantuml.argon2.model.Argon2Type getType()>();

        r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Argon2Type type> = $r2;

        i14 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getMemory()>();

        $i3 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getLanes()>();

        $i4 = 8 * $i3;

        if i14 >= $i4 goto label1;

        $i13 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getLanes()>();

        i14 = 8 * $i13;

     label1:
        $i5 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getLanes()>();

        $i6 = $i5 * 4;

        $i7 = i14 / $i6;

        r0.<net.sourceforge.plantuml.argon2.model.Instance: int segmentLength> = $i7;

        $i8 = r0.<net.sourceforge.plantuml.argon2.model.Instance: int segmentLength>;

        $i9 = $i8 * 4;

        r0.<net.sourceforge.plantuml.argon2.model.Instance: int laneLength> = $i9;

        $i10 = r0.<net.sourceforge.plantuml.argon2.model.Instance: int segmentLength>;

        $i11 = virtualinvoke r1.<net.sourceforge.plantuml.argon2.Argon2: int getLanes()>();

        $i12 = $i11 * 4;

        i15 = $i10 * $i12;

        specialinvoke r0.<net.sourceforge.plantuml.argon2.model.Instance: void initMemory(int)>(i15);

        return;
    }

    private void initMemory(int)
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        int i0, $i1, i2;
        net.sourceforge.plantuml.argon2.model.Block[] $r1, $r2, $r4;
        net.sourceforge.plantuml.argon2.model.Block $r3;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        i0 := @parameter0: int;

        $r1 = newarray (net.sourceforge.plantuml.argon2.model.Block)[i0];

        r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory> = $r1;

        i2 = 0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory>;

        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory>;

        $r3 = new net.sourceforge.plantuml.argon2.model.Block;

        specialinvoke $r3.<net.sourceforge.plantuml.argon2.model.Block: void <init>()>();

        $r4[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        net.sourceforge.plantuml.argon2.model.Block[] r1;
        int i0, i1;
        net.sourceforge.plantuml.argon2.model.Block r2;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        r1 = r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<net.sourceforge.plantuml.argon2.model.Block: void clear()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory> = null;

        return;
    }

    public net.sourceforge.plantuml.argon2.model.Block[] getMemory()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        net.sourceforge.plantuml.argon2.model.Block[] $r1;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Block[] memory>;

        return $r1;
    }

    public int getVersion()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        $i0 = r0.<net.sourceforge.plantuml.argon2.model.Instance: int version>;

        return $i0;
    }

    public int getIterations()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        $i0 = r0.<net.sourceforge.plantuml.argon2.model.Instance: int iterations>;

        return $i0;
    }

    public int getSegmentLength()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        $i0 = r0.<net.sourceforge.plantuml.argon2.model.Instance: int segmentLength>;

        return $i0;
    }

    public int getLaneLength()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        $i0 = r0.<net.sourceforge.plantuml.argon2.model.Instance: int laneLength>;

        return $i0;
    }

    public int getLanes()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        $i0 = r0.<net.sourceforge.plantuml.argon2.model.Instance: int lanes>;

        return $i0;
    }

    public net.sourceforge.plantuml.argon2.model.Argon2Type getType()
    {
        net.sourceforge.plantuml.argon2.model.Instance r0;
        net.sourceforge.plantuml.argon2.model.Argon2Type $r1;

        r0 := @this: net.sourceforge.plantuml.argon2.model.Instance;

        $r1 = r0.<net.sourceforge.plantuml.argon2.model.Instance: net.sourceforge.plantuml.argon2.model.Argon2Type type>;

        return $r1;
    }
}
