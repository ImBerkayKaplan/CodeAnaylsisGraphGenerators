final enum class net.sourceforge.plantuml.zopfli.Deflate$BlockType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.zopfli.Deflate$BlockType DYNAMIC;
    public static final enum net.sourceforge.plantuml.zopfli.Deflate$BlockType FIXED;
    private static final net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $VALUES;

    public static net.sourceforge.plantuml.zopfli.Deflate$BlockType[] values()
    {
        net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.zopfli.Deflate$BlockType: net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.zopfli.Deflate$BlockType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.zopfli.Deflate$BlockType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.zopfli.Deflate$BlockType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/zopfli/Deflate$BlockType;", r0);

        $r2 = (net.sourceforge.plantuml.zopfli.Deflate$BlockType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.zopfli.Deflate$BlockType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.zopfli.Deflate$BlockType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $values()
    {
        net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $r0;
        net.sourceforge.plantuml.zopfli.Deflate$BlockType $r1, $r2;

        $r0 = newarray (net.sourceforge.plantuml.zopfli.Deflate$BlockType)[2];

        $r1 = <net.sourceforge.plantuml.zopfli.Deflate$BlockType: net.sourceforge.plantuml.zopfli.Deflate$BlockType DYNAMIC>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.zopfli.Deflate$BlockType: net.sourceforge.plantuml.zopfli.Deflate$BlockType FIXED>;

        $r0[1] = $r2;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.zopfli.Deflate$BlockType $r0, $r1;
        net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $r2;

        $r0 = new net.sourceforge.plantuml.zopfli.Deflate$BlockType;

        specialinvoke $r0.<net.sourceforge.plantuml.zopfli.Deflate$BlockType: void <init>(java.lang.String,int)>("DYNAMIC", 0);

        <net.sourceforge.plantuml.zopfli.Deflate$BlockType: net.sourceforge.plantuml.zopfli.Deflate$BlockType DYNAMIC> = $r0;

        $r1 = new net.sourceforge.plantuml.zopfli.Deflate$BlockType;

        specialinvoke $r1.<net.sourceforge.plantuml.zopfli.Deflate$BlockType: void <init>(java.lang.String,int)>("FIXED", 1);

        <net.sourceforge.plantuml.zopfli.Deflate$BlockType: net.sourceforge.plantuml.zopfli.Deflate$BlockType FIXED> = $r1;

        $r2 = staticinvoke <net.sourceforge.plantuml.zopfli.Deflate$BlockType: net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $values()>();

        <net.sourceforge.plantuml.zopfli.Deflate$BlockType: net.sourceforge.plantuml.zopfli.Deflate$BlockType[] $VALUES> = $r2;

        return;
    }
}
