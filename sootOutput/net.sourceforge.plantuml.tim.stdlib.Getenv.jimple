public class net.sourceforge.plantuml.tim.stdlib.Getenv extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.Getenv r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Getenv;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.Getenv r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.Getenv;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%getenv", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.Getenv r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Getenv;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        boolean $z0;
        java.util.List r0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2, $r6, $r7, $r8;
        java.lang.String r3, r5;
        net.sourceforge.plantuml.tim.stdlib.Getenv r4;
        net.sourceforge.plantuml.tim.TContext r9;
        net.sourceforge.plantuml.tim.TMemory r10;
        net.sourceforge.plantuml.LineLocation r11;
        java.util.Map r12;

        r4 := @this: net.sourceforge.plantuml.tim.stdlib.Getenv;

        r9 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r10 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r11 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r12 := @parameter4: java.util.Map;

        $z0 = <net.sourceforge.plantuml.OptionFlags: boolean ALLOW_INCLUDE>;

        if $z0 != 0 goto label1;

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("");

        return $r8;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        r5 = specialinvoke r4.<net.sourceforge.plantuml.tim.stdlib.Getenv: java.lang.String getenv(java.lang.String)>(r3);

        if r5 != null goto label2;

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("");

        return $r7;

     label2:
        $r6 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r5);

        return $r6;
    }

    private java.lang.String getenv(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0;
        net.sourceforge.plantuml.tim.stdlib.Getenv r3;

        r3 := @this: net.sourceforge.plantuml.tim.stdlib.Getenv;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: boolean isSecurityEnv(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r1 == null goto label2;

        return r1;

     label2:
        $r2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r0);

        return $r2;
    }
}
