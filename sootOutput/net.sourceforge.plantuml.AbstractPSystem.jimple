public abstract class net.sourceforge.plantuml.AbstractPSystem extends java.lang.Object implements net.sourceforge.plantuml.core.Diagram
{
    private final net.sourceforge.plantuml.core.UmlSource source;
    private net.sourceforge.plantuml.Scale scale;
    private int splitPagesHorizontal;
    private int splitPagesVertical;

    public void <init>(net.sourceforge.plantuml.core.UmlSource)
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        net.sourceforge.plantuml.core.UmlSource r1, $r3;
        java.lang.Object $r2;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.AbstractPSystem: int splitPagesHorizontal> = 1;

        r0.<net.sourceforge.plantuml.AbstractPSystem: int splitPagesVertical> = 1;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.core.UmlSource) $r2;

        r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source> = $r3;

        return;
    }

    private java.lang.String getVersion()
    {
        java.lang.StringBuilder $r0, $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16;
        java.lang.String $r3, $r7, $r10, $r17, $r21, r23;
        net.sourceforge.plantuml.version.License $r14;
        java.util.Collection $r19;
        java.util.Iterator r20;
        boolean $z0;
        java.lang.Object $r22;
        net.sourceforge.plantuml.AbstractPSystem r26;

        r26 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PlantUML version ");

        $r3 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r7 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String compileTimeString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r14 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License getCurrent()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" source distribution)\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = staticinvoke <net.sourceforge.plantuml.OptionPrint: java.util.Collection interestingProperties()>();

        r20 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r22 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r22;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        $r21 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;
    }

    public final java.lang.String getMetadata()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        net.sourceforge.plantuml.core.UmlSource $r1, $r2, $r4;
        java.lang.String r3, r5, $r11, $r13, $r17, $r19, $r20;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r18;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $r1 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source>;

        if $r1 != null goto label1;

        $r20 = specialinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: java.lang.String getVersion()>();

        return $r20;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.core.UmlSource: java.lang.String getRawString()>();

        $r4 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source>;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.core.UmlSource: java.lang.String getPlainString()>();

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r17 = specialinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: java.lang.String getVersion()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r11 = specialinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: java.lang.String getVersion()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public final net.sourceforge.plantuml.core.UmlSource getSource()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        net.sourceforge.plantuml.core.UmlSource $r1;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $r1 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source>;

        return $r1;
    }

    public final long seed()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        net.sourceforge.plantuml.core.UmlSource $r1, $r2;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $r1 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source>;

        if $r1 != null goto label1;

        return 42L;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource getSource()>();

        $l0 = virtualinvoke $r2.<net.sourceforge.plantuml.core.UmlSource: long seed()>();

        return $l0;
    }

    public int getNbImages()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        return 1;
    }

    public int getSplitPagesHorizontal()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $i0 = r0.<net.sourceforge.plantuml.AbstractPSystem: int splitPagesHorizontal>;

        return $i0;
    }

    public void setSplitPagesHorizontal(int)
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.AbstractPSystem: int splitPagesHorizontal> = i0;

        return;
    }

    public int getSplitPagesVertical()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $i0 = r0.<net.sourceforge.plantuml.AbstractPSystem: int splitPagesVertical>;

        return $i0;
    }

    public void setSplitPagesVertical(int)
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.AbstractPSystem: int splitPagesVertical> = i0;

        return;
    }

    public net.sourceforge.plantuml.cucadiagram.DisplayPositionned getTitle()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        net.sourceforge.plantuml.core.UmlSource $r1, $r2;
        net.sourceforge.plantuml.cucadiagram.Display $r3, $r7;
        net.sourceforge.plantuml.graphic.VerticalAlignment $r4, $r8;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r5, $r9;
        net.sourceforge.plantuml.cucadiagram.DisplayPositioned $r6, $r10;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $r1 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display empty()>();

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r8 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment TOP>;

        $r10 = staticinvoke <net.sourceforge.plantuml.cucadiagram.DisplayPositioned: net.sourceforge.plantuml.cucadiagram.DisplayPositioned single(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.VerticalAlignment)>($r7, $r9, $r8);

        return $r10;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.UmlSource source>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.core.UmlSource: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        $r5 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r4 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment TOP>;

        $r6 = staticinvoke <net.sourceforge.plantuml.cucadiagram.DisplayPositioned: net.sourceforge.plantuml.cucadiagram.DisplayPositioned single(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.VerticalAlignment)>($r3, $r5, $r4);

        return $r6;
    }

    public java.lang.String getWarningOrError()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        return null;
    }

    public java.lang.String checkFinalError()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        return null;
    }

    public void makeDiagramReady()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        return;
    }

    public boolean isOk()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        return 1;
    }

    public net.sourceforge.plantuml.command.CommandExecutionResult executeCommand(net.sourceforge.plantuml.command.Command, net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.ProtectedCommand $r0;
        net.sourceforge.plantuml.AbstractPSystem r1;
        net.sourceforge.plantuml.command.BlocLines r2;
        net.sourceforge.plantuml.command.CommandExecutionResult $r3, $r6;
        net.sourceforge.plantuml.ugraphic.color.NoSuchColorException $r4;
        net.sourceforge.plantuml.command.Command r7;

        r1 := @this: net.sourceforge.plantuml.AbstractPSystem;

        r7 := @parameter0: net.sourceforge.plantuml.command.Command;

        r2 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r0 = new net.sourceforge.plantuml.command.ProtectedCommand;

        specialinvoke $r0.<net.sourceforge.plantuml.command.ProtectedCommand: void <init>(net.sourceforge.plantuml.command.Command)>(r7);

     label1:
        $r3 = interfaceinvoke $r0.<net.sourceforge.plantuml.command.Command: net.sourceforge.plantuml.command.CommandExecutionResult execute(net.sourceforge.plantuml.core.Diagram,net.sourceforge.plantuml.command.BlocLines)>(r1, r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r6 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult badColor()>();

        return $r6;

        catch net.sourceforge.plantuml.ugraphic.color.NoSuchColorException from label1 to label2 with label3;
    }

    public boolean hasUrl()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        return 0;
    }

    public final net.sourceforge.plantuml.core.ImageData exportDiagram(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        long l0, $l2, $l3, $l4, $l5;
        net.sourceforge.plantuml.AbstractPSystem r0;
        java.io.OutputStream r1;
        int i1;
        net.sourceforge.plantuml.FileFormatOption r2;
        net.sourceforge.plantuml.core.ImageData r3;
        net.sourceforge.plantuml.OptionFlags $r4, $r9;
        boolean $z0, $z1;
        java.lang.Class $r5, $r10;
        net.sourceforge.plantuml.FileFormat $r6, $r11;
        java.lang.Throwable $r7;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        r1 := @parameter0: java.io.OutputStream;

        i1 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label1:
        r3 = virtualinvoke r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.core.ImageData exportDiagramNow(java.io.OutputStream,int,net.sourceforge.plantuml.FileFormatOption)>(r1, i1, r2);

     label2:
        $r4 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r4.<net.sourceforge.plantuml.OptionFlags: boolean isEnableStats()>();

        if $z0 == 0 goto label3;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 - l0;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtilsIncrement: void onceMoreGenerate(long,java.lang.Class,net.sourceforge.plantuml.FileFormat)>($l3, $r5, $r6);

     label3:
        return r3;

     label4:
        $r7 := @caughtexception;

     label5:
        $r9 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z1 = virtualinvoke $r9.<net.sourceforge.plantuml.OptionFlags: boolean isEnableStats()>();

        if $z1 == 0 goto label6;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l4 - l0;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke r2.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        staticinvoke <net.sourceforge.plantuml.stats.StatsUtilsIncrement: void onceMoreGenerate(long,java.lang.Class,net.sourceforge.plantuml.FileFormat)>($l5, $r10, $r11);

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void setScale(net.sourceforge.plantuml.Scale)
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        net.sourceforge.plantuml.Scale r1;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        r1 := @parameter0: net.sourceforge.plantuml.Scale;

        r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.Scale scale> = r1;

        return;
    }

    public final net.sourceforge.plantuml.Scale getScale()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;
        net.sourceforge.plantuml.Scale $r1;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $r1 = r0.<net.sourceforge.plantuml.AbstractPSystem: net.sourceforge.plantuml.Scale scale>;

        return $r1;
    }

    public net.sourceforge.plantuml.ugraphic.ImageBuilder createImageBuilder(net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.FileFormatOption r0;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r1;
        net.sourceforge.plantuml.AbstractPSystem r2;

        r2 := @this: net.sourceforge.plantuml.AbstractPSystem;

        r0 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        $r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder imageBuilder(net.sourceforge.plantuml.FileFormatOption)>(r0);

        return $r1;
    }

    protected abstract net.sourceforge.plantuml.core.ImageData exportDiagramNow(java.io.OutputStream, int, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException;

    public net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getDefaultMargins()
    {
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r0;
        net.sourceforge.plantuml.AbstractPSystem r1;

        r1 := @this: net.sourceforge.plantuml.AbstractPSystem;

        $r0 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft same(double)>(0.0);

        return $r0;
    }

    public net.sourceforge.plantuml.cucadiagram.Display getTitleDisplay()
    {
        net.sourceforge.plantuml.AbstractPSystem r0;

        r0 := @this: net.sourceforge.plantuml.AbstractPSystem;

        return null;
    }
}
