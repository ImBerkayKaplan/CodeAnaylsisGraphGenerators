public class net.sourceforge.plantuml.argon2.blake2.Blake2b$Param extends java.lang.Object implements java.security.spec.AlgorithmParameterSpec
{
    static final byte[] default_bytes;
    static final long[] default_h;
    private final long[] h;
    private boolean hasKey;
    private byte[] key_bytes;
    private byte[] bytes;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        long[] $r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[8];

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h> = $r1;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey> = 0;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes> = null;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes> = null;

        $r3 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, 8);

        return;
    }

    public long[] initialized_H()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        long[] $r1;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        return $r1;
    }

    public byte[] getBytes()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte[] $r1, r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $i0 = lengthof $r1;

        r2 = newarray (byte)[$i0];

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        return r2;
    }

    final byte getByteParam(int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        byte $b1;
        byte[] r1;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        if r1 != null goto label1;

        r1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

     label1:
        $b1 = r1[i0];

        return $b1;
    }

    final int getIntParam(int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0, $i1;
        byte[] r1;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        if r1 != null goto label1;

        r1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

     label1:
        $i1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: int readInt(byte[],int)>(r1, i0);

        return $i1;
    }

    final long getLongParam(int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        long $l1;
        byte[] r1;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        if r1 != null goto label1;

        r1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

     label1:
        $l1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>(r1, i0);

        return $l1;
    }

    public final int getDigestLength()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $b0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte getByteParam(int)>(0);

        return $b0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDigestLength(int)
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        byte $b1;
        byte[] $r1, $r2;
        long[] $r3, $r4, $r5;
        long $l2, $l3, $l4, $l5;
        java.lang.AssertionError $r6, $r10;
        java.lang.Integer $r7, $r8, $r11, $r12;
        java.lang.String $r9, $r13;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r10 = new java.lang.AssertionError;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("len", $r11, "\'%s\' %d is <= %d", $r12);

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r10;

     label1:
        $z1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 <= 64 goto label2;

        $r6 = new java.lang.AssertionError;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        $r9 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("len", $r7, "\'%s\' %d is > %d", $r8);

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r6;

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $b1 = (byte) i0;

        $r1[0] = $b1;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r2, 0);

        $r3[0] = $l2;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l4 = $r4[0];

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l3 = $r5[0];

        $l5 = $l4 ^ $l3;

        $r4[0] = $l5;

        return r0;
    }

    public final int getKeyLength()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $b0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte getByteParam(int)>(1);

        return $b0;
    }

    public final int getFanout()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $b0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte getByteParam(int)>(2);

        return $b0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setFanout(int)
    {
        boolean $z0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        byte $b1;
        byte[] $r1, $r2;
        long[] $r3, $r4, $r5;
        long $l2, $l3, $l4, $l5;
        java.lang.AssertionError $r6;
        java.lang.Integer $r7, $r8;
        java.lang.String $r9;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r6 = new java.lang.AssertionError;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("fanout", $r7, "\'%s\' %d is <= %d", $r8);

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r6;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $b1 = (byte) i0;

        $r1[2] = $b1;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r2, 0);

        $r3[0] = $l2;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l4 = $r4[0];

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l3 = $r5[0];

        $l5 = $l4 ^ $l3;

        $r4[0] = $l5;

        return r0;
    }

    public final int getDepth()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $b0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte getByteParam(int)>(3);

        return $b0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDepth(int)
    {
        boolean $z0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        byte $b1;
        byte[] $r1, $r2;
        long[] $r3, $r4, $r5;
        long $l2, $l3, $l4, $l5;
        java.lang.AssertionError $r6;
        java.lang.Integer $r7, $r8;
        java.lang.String $r9;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r6 = new java.lang.AssertionError;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("depth", $r7, "\'%s\' %d is <= %d", $r8);

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r6;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $b1 = (byte) i0;

        $r1[3] = $b1;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r2, 0);

        $r3[0] = $l2;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l4 = $r4[0];

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l3 = $r5[0];

        $l5 = $l4 ^ $l3;

        $r4[0] = $l5;

        return r0;
    }

    public final int getLeafLength()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: int getIntParam(int)>(4);

        return $i0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setLeafLength(int)
    {
        boolean $z0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        byte[] $r1, $r2;
        long[] $r3, $r4, $r5;
        long $l1, $l2, $l3, $l4;
        java.lang.AssertionError $r6;
        java.lang.Integer $r7, $r8;
        java.lang.String $r9;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.AssertionError;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("leaf_length", $r7, "\'%s\' %d is < %d", $r8);

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r6;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: void writeInt(int,byte[],int)>(i0, $r1, 4);

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r2, 0);

        $r3[0] = $l1;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l3 = $r4[0];

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l2 = $r5[0];

        $l4 = $l3 ^ $l2;

        $r4[0] = $l4;

        return r0;
    }

    public final long getNodeOffset()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $l0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long getLongParam(int)>(8);

        return $l0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setNodeOffset(long)
    {
        boolean $z0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        long l0, $l1, $l2, $l3, $l4;
        byte[] $r1, $r2;
        long[] $r3, $r4, $r5;
        byte $b5;
        java.lang.AssertionError $r6;
        java.lang.Long $r7;
        java.lang.Integer $r8;
        java.lang.String $r9;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        l0 := @parameter0: long;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b5 = l0 cmp 0L;

        if $b5 >= 0 goto label1;

        $r6 = new java.lang.AssertionError;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("node_offset", $r7, "\'%s\' %d is < %d", $r8);

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r6;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: void writeLong(long,byte[],int)>(l0, $r1, 8);

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r2, 8);

        $r3[1] = $l1;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l3 = $r4[1];

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l2 = $r5[1];

        $l4 = $l3 ^ $l2;

        $r4[1] = $l4;

        return r0;
    }

    public final int getNodeDepth()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $b0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte getByteParam(int)>(16);

        return $b0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setNodeDepth(int)
    {
        boolean $z0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        byte $b1;
        byte[] $r1, $r2, $r6;
        long[] $r3, $r4, $r5, $r7, $r8, $r9;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        java.lang.AssertionError $r10;
        java.lang.Integer $r11, $r12;
        java.lang.String $r13;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r10 = new java.lang.AssertionError;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("node_depth", $r11, "\'%s\' %d is < %d", $r12);

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r10;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $b1 = (byte) i0;

        $r1[16] = $b1;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r2, 16);

        $r3[2] = $l2;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l4 = $r4[2];

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l3 = $r5[2];

        $l5 = $l4 ^ $l3;

        $r4[2] = $l5;

        $r7 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r6 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l6 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r6, 24);

        $r7[3] = $l6;

        $r8 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l8 = $r8[3];

        $r9 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l7 = $r9[3];

        $l9 = $l8 ^ $l7;

        $r8[3] = $l9;

        return r0;
    }

    public final int getInnerLength()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $b0 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte getByteParam(int)>(17);

        return $b0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setInnerLength(int)
    {
        boolean $z0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        int i0;
        byte $b1;
        byte[] $r1, $r2, $r6;
        long[] $r3, $r4, $r5, $r7, $r8, $r9;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        java.lang.AssertionError $r10;
        java.lang.Integer $r11, $r12;
        java.lang.String $r13;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        i0 := @parameter0: int;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r10 = new java.lang.AssertionError;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("inner_length", $r11, "\'%s\' %d is < %d", $r12);

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r10;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $b1 = (byte) i0;

        $r1[17] = $b1;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r2, 16);

        $r3[2] = $l2;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l4 = $r4[2];

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l3 = $r5[2];

        $l5 = $l4 ^ $l3;

        $r4[2] = $l5;

        $r7 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r6 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l6 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r6, 24);

        $r7[3] = $l6;

        $r8 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l8 = $r8[3];

        $r9 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l7 = $r9[3];

        $l9 = $l8 ^ $l7;

        $r8[3] = $l9;

        return r0;
    }

    public final boolean hasKey()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $z0 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey>;

        return $z0;
    }

    public net.sourceforge.plantuml.argon2.blake2.Blake2b$Param clone()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r0, r2;
        long[] $r3, $r4, $r5;
        int $i0, $i1, $i2;
        byte[] $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1;

        r2 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void <init>()>();

        $r5 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r4 = $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r3 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, $i0);

        virtualinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r8 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $r7 = $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $r6 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $i1 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, $i1);

        $z0 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey>;

        if $z0 == 0 goto label1;

        $z1 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey>;

        $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey> = $z1;

        $r9 = newarray (byte)[128];

        $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes> = $r9;

        $r12 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes>;

        $r11 = $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes>;

        $r10 = r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes>;

        $i2 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, 0, $i2);

     label1:
        return $r0;
    }

    final void lazyInitBytes()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte[] $r1, $r2, $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        if $r1 != null goto label1;

        $r2 = newarray (byte)[64];

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes> = $r2;

        $r4 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, 64);

     label1:
        return;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setKey(java.security.Key)
    {
        boolean $z0, $z1;
        java.security.Key r0;
        byte[] r1;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r2, $r3;
        java.lang.AssertionError $r4, $r5;

        r2 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        r0 := @parameter0: java.security.Key;

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("key is null");

        throw $r5;

     label1:
        r1 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        $z1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r1 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("key.encoded() is null");

        throw $r4;

     label2:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setKey(byte[])>(r1);

        return $r3;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setKey(byte[])
    {
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte[] $r1, r2, $r3, $r4, $r5;
        int $i0, $i1, $i7, $i9, $i10, $i11;
        byte $b2;
        long[] $r6, $r7, $r8;
        long $l3, $l4, $l5, $l6;
        java.lang.AssertionError $r9, $r13, $r17;
        java.lang.Integer $r10, $r11, $r14, $r15;
        java.lang.String $r12, $r16;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        r2 := @parameter0: byte[];

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>("key is null");

        throw $r17;

     label1:
        $z1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i10 = lengthof r2;

        if $i10 >= 0 goto label2;

        $r13 = new java.lang.AssertionError;

        $i11 = lengthof r2;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r16 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("key.length", $r14, "\'%s\' %d is > %d", $r15);

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r13;

     label2:
        $z2 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i7 = lengthof r2;

        if $i7 <= 64 goto label3;

        $r9 = new java.lang.AssertionError;

        $i9 = lengthof r2;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        $r12 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("key.length", $r10, "\'%s\' %d is > %d", $r11);

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r9;

     label3:
        $r1 = newarray (byte)[128];

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes> = $r1;

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes>;

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, 0, $i0);

        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $i1 = lengthof r2;

        $b2 = (byte) $i1;

        $r4[1] = $b2;

        $r6 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r5 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l3 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r5, 0);

        $r6[0] = $l3;

        $r7 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l5 = $r7[0];

        $r8 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l4 = $r8[0];

        $l6 = $l5 ^ $l4;

        $r7[0] = $l6;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey> = 1;

        return r0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setSalt(byte[])
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte[] $r1, r2, $r3, $r4, $r8;
        int $i0, $i9, $i12;
        long[] $r5, $r6, $r7, $r9, $r10, $r11;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;
        java.lang.AssertionError $r12, $r16;
        java.lang.Integer $r13, $r14;
        java.lang.String $r15;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        r2 := @parameter0: byte[];

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>("salt is null");

        throw $r16;

     label1:
        $z1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i9 = lengthof r2;

        if $i9 <= 16 goto label2;

        $r12 = new java.lang.AssertionError;

        $i12 = lengthof r2;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r15 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("salt.length", $r13, "\'%s\' %d is > %d", $r14);

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r12;

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r1, 32, 48, 0);

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, 32, $i0);

        $r5 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r4, 32);

        $r5[4] = $l1;

        $r6 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l3 = $r6[4];

        $r7 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l2 = $r7[4];

        $l4 = $l3 ^ $l2;

        $r6[4] = $l4;

        $r9 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r8 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l5 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r8, 40);

        $r9[5] = $l5;

        $r10 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l7 = $r10[5];

        $r11 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l6 = $r11[5];

        $l8 = $l7 ^ $l6;

        $r10[5] = $l8;

        return r0;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setPersonal(byte[])
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte[] $r1, r2, $r3, $r4, $r8;
        int $i0, $i9, $i12;
        long[] $r5, $r6, $r7, $r9, $r10, $r11;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;
        java.lang.AssertionError $r12, $r16;
        java.lang.Integer $r13, $r14;
        java.lang.String $r15;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        r2 := @parameter0: byte[];

        $z0 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>("personal is null");

        throw $r16;

     label1:
        $z1 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i9 = lengthof r2;

        if $i9 <= 16 goto label2;

        $r12 = new java.lang.AssertionError;

        $i12 = lengthof r2;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r15 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Assert: java.lang.String assertFail(java.lang.String,java.lang.Number,java.lang.String,java.lang.Number)>("personal.length", $r13, "\'%s\' %d is > %d", $r14);

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r12;

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void lazyInitBytes()>();

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r1, 48, 64, 0);

        $r3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, 48, $i0);

        $r5 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r4 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r4, 48);

        $r5[6] = $l1;

        $r6 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l3 = $r6[6];

        $r7 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l2 = $r7[6];

        $l4 = $l3 ^ $l2;

        $r6[6] = $l4;

        $r9 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $r8 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] bytes>;

        $l5 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r8, 56);

        $r9[7] = $l5;

        $r10 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] h>;

        $l7 = $r10[7];

        $r11 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l6 = $r11[7];

        $l8 = $l7 ^ $l6;

        $r10[7] = $l8;

        return r0;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0, $r1;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param clone()>();

        return $r1;
    }

    static boolean access$000(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        boolean $z0;

        r0 := @parameter0: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $z0 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean hasKey>;

        return $z0;
    }

    static byte[] access$100(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param r0;
        byte[] $r1;

        r0 := @parameter0: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        $r1 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] key_bytes>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        byte[] $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;
        long[] $r2, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31;

        $r0 = class "Lnet/sourceforge/plantuml/argon2/blake2/Blake2b;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (byte)[64];

        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes> = $r1;

        $r2 = newarray (long)[8];

        <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h> = $r2;

        $r3 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $r3[0] = 64;

        $r4 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $r4[1] = 0;

        $r5 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $r5[2] = 1;

        $r6 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $r6[3] = 1;

        $r7 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $r7[16] = 0;

        $r8 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $r8[17] = 0;

        $r10 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r9 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l0 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r9, 0);

        $r10[0] = $l0;

        $r12 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r11 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l1 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r11, 8);

        $r12[1] = $l1;

        $r14 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r13 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l2 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r13, 16);

        $r14[2] = $l2;

        $r16 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r15 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l3 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r15, 24);

        $r16[3] = $l3;

        $r18 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r17 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l4 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r17, 32);

        $r18[4] = $l4;

        $r20 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r19 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l5 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r19, 40);

        $r20[5] = $l5;

        $r22 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r21 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l6 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r21, 48);

        $r22[6] = $l6;

        $r24 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $r23 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: byte[] default_bytes>;

        $l7 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$LittleEndian: long readLong(byte[],int)>($r23, 56);

        $r24[7] = $l7;

        $r25 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l9 = $r25[0];

        $r26 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l8 = $r26[0];

        $l10 = $l9 ^ $l8;

        $r25[0] = $l10;

        $r27 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l12 = $r27[1];

        $r28 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l11 = $r28[1];

        $l13 = $l12 ^ $l11;

        $r27[1] = $l13;

        $r29 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l15 = $r29[2];

        $r30 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l14 = $r30[2];

        $l16 = $l15 ^ $l14;

        $r29[2] = $l16;

        $r31 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l18 = $r31[3];

        $r32 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l17 = $r32[3];

        $l19 = $l18 ^ $l17;

        $r31[3] = $l19;

        $r33 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l21 = $r33[4];

        $r34 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l20 = $r34[4];

        $l22 = $l21 ^ $l20;

        $r33[4] = $l22;

        $r35 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l24 = $r35[5];

        $r36 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l23 = $r36[5];

        $l25 = $l24 ^ $l23;

        $r35[5] = $l25;

        $r37 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l27 = $r37[6];

        $r38 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l26 = $r38[6];

        $l28 = $l27 ^ $l26;

        $r37[6] = $l28;

        $r39 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: long[] default_h>;

        $l30 = $r39[7];

        $r40 = <net.sourceforge.plantuml.argon2.blake2.Blake2b$Spec: long[] IV>;

        $l29 = $r40[7];

        $l31 = $l30 ^ $l29;

        $r39[7] = $l31;

        return;
    }
}
