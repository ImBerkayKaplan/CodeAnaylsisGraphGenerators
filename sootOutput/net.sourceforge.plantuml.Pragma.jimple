public class net.sourceforge.plantuml.Pragma extends java.lang.Object
{
    private final java.util.Map values;

    public void <init>()
    {
        net.sourceforge.plantuml.Pragma r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.Pragma: java.util.Map values> = $r1;

        return;
    }

    public void define(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.Pragma r0;
        java.lang.String r1, r2;
        java.util.Map $r3;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<net.sourceforge.plantuml.Pragma: java.util.Map values>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public boolean isDefine(java.lang.String)
    {
        net.sourceforge.plantuml.Pragma r0;
        java.lang.String r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.Pragma: java.util.Map values>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void undefine(java.lang.String)
    {
        net.sourceforge.plantuml.Pragma r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.Pragma: java.util.Map values>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String getValue(java.lang.String)
    {
        net.sourceforge.plantuml.Pragma r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.Pragma: java.util.Map values>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public boolean horizontalLineBetweenDifferentPackageAllowed()
    {
        net.sourceforge.plantuml.Pragma r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.Pragma: boolean isDefine(java.lang.String)>("horizontallinebetweendifferentpackageallowed");

        return $z0;
    }

    public boolean backToLegacyPackage()
    {
        net.sourceforge.plantuml.Pragma r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.Pragma: boolean isDefine(java.lang.String)>("backtolegacypackage");

        return $z0;
    }

    public boolean useNewPackage()
    {
        net.sourceforge.plantuml.Pragma r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.Pragma: boolean isDefine(java.lang.String)>("usenewpackage");

        return $z0;
    }

    public boolean useVerticalIf()
    {
        net.sourceforge.plantuml.Pragma r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.Pragma: java.lang.String getValue(java.lang.String)>("useverticalif");

        $r2 = "true";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = "on";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean useTeozLayout()
    {
        net.sourceforge.plantuml.Pragma r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.Pragma;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.Pragma: java.lang.String getValue(java.lang.String)>("teoz");

        $r2 = "true";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = "on";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }
}
