public class net.sourceforge.plantuml.code.ArobaseStringCompressor2 extends java.lang.Object implements net.sourceforge.plantuml.code.StringCompressor
{

    public void <init>()
    {
        net.sourceforge.plantuml.code.ArobaseStringCompressor2 r0;

        r0 := @this: net.sourceforge.plantuml.code.ArobaseStringCompressor2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String compress(java.lang.String)
    {
        net.sourceforge.plantuml.code.ArobaseStringCompressor2 r0;
        java.lang.String r1, $r2;

        r0 := @this: net.sourceforge.plantuml.code.ArobaseStringCompressor2;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.code.ArobaseStringCompressor2: java.lang.String clean2(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String decompress(java.lang.String)
    {
        net.sourceforge.plantuml.code.ArobaseStringCompressor2 r0;
        java.lang.String r1, $r2;

        r0 := @this: net.sourceforge.plantuml.code.ArobaseStringCompressor2;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.code.ArobaseStringCompressor2: java.lang.String clean2(java.lang.String)>(r1);

        return $r2;
    }

    private java.lang.String clean2(java.lang.String)
    {
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String $r4, r6, r7;
        net.sourceforge.plantuml.code.ArobaseStringCompressor2 r5;

        r5 := @this: net.sourceforge.plantuml.code.ArobaseStringCompressor2;

        r6 := @parameter0: java.lang.String;

        r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r6);

        $z0 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("@start");

        if $z0 == 0 goto label1;

        return r7;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@startuml\n");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n@enduml");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
