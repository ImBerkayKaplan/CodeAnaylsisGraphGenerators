public class net.sourceforge.plantuml.gitlog.SmetanaForGit extends java.lang.Object
{
    private final net.sourceforge.plantuml.ugraphic.UGraphic ug;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private int num;
    private h.ST_Agraph_s g;
    private net.sourceforge.plantuml.graphic.StringBounder stringBounder;
    private final java.util.Map nodes;
    private final java.util.List edges;
    private net.sourceforge.plantuml.jsondiagram.Mirror yMirror;

    public void <init>(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.gitlog.SmetanaForGit r0;
        java.util.LinkedHashMap $r1;
        java.util.ArrayList $r2;
        net.sourceforge.plantuml.ugraphic.UGraphic r3, $r9;
        net.sourceforge.plantuml.graphic.StringBounder $r4;
        net.sourceforge.plantuml.ISkinParam r5;
        net.sourceforge.plantuml.style.Style $r6;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7;
        net.sourceforge.plantuml.api.ThemeStyle $r8;

        r0 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r5 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.Map nodes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.List edges> = $r2;

        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = $r4;

        r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ISkinParam skinParam> = r5;

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.style.Style getStyle()>();

        $r7 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r8 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r9 = virtualinvoke $r6.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UGraphic applyStrokeAndLineColor(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r3, $r7, $r8);

        r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ugraphic.UGraphic ug> = $r9;

        return;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3;
        net.sourceforge.plantuml.style.StyleSignature $r4;
        net.sourceforge.plantuml.gitlog.SmetanaForGit r5;
        net.sourceforge.plantuml.ISkinParam $r6;
        net.sourceforge.plantuml.style.StyleBuilder $r7;
        net.sourceforge.plantuml.style.Style $r8;

        r5 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[3];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName gitDiagram>;

        $r0[2] = $r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        $r6 = r5.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r8 = virtualinvoke $r4.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r7);

        return $r8;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor arrowColor()
    {
        net.sourceforge.plantuml.gitlog.SmetanaForGit r0;
        net.sourceforge.plantuml.style.Style $r1;
        net.sourceforge.plantuml.style.PName $r2;
        net.sourceforge.plantuml.style.Value $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r6;
        net.sourceforge.plantuml.api.ThemeStyle $r5;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor $r8;

        r0 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.style.Style getStyle()>();

        $r2 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r2);

        $r4 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r6 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r8 = interfaceinvoke $r3.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r5, $r7);

        return $r8;
    }

    public void drawMe(java.util.Collection)
    {
        net.sourceforge.plantuml.gitlog.SmetanaForGit r0;
        java.util.Collection r1;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0, $z1;
        java.util.List $r4;
        java.lang.Object $r5, $r11, $r12, $r16;
        h.ST_Agrec_s $r6;
        net.sourceforge.plantuml.gitlog.GitCurve $r7;
        net.sourceforge.plantuml.jsondiagram.Mirror $r8;
        net.sourceforge.plantuml.ugraphic.color.HColor $r9;
        net.sourceforge.plantuml.ugraphic.UGraphic $r10, $r19, $r20;
        net.sourceforge.plantuml.ugraphic.UTranslate r13;
        net.sourceforge.plantuml.gitlog.MagicBox $r14;
        net.sourceforge.plantuml.ISkinParam $r15;
        net.sourceforge.plantuml.gitlog.GNode $r17;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r21;
        java.util.Iterator r22, r25;
        java.util.Map$Entry r23;
        h.ST_Agnode_s r24;
        h.ST_Agedge_s r26;
        h.ST_Agedgeinfo_t r27;

        r0 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: void initGraph(java.util.Collection)>(r1);

        $r2 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.Map nodes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r22 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        r24 = (h.ST_Agnode_s) $r12;

        r13 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ugraphic.UTranslate getPosition(h.ST_Agnode_s)>(r24);

        $r14 = new net.sourceforge.plantuml.gitlog.MagicBox;

        $r15 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r16 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (net.sourceforge.plantuml.gitlog.GNode) $r16;

        specialinvoke $r14.<net.sourceforge.plantuml.gitlog.MagicBox: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.gitlog.GNode)>($r15, $r17);

        $r19 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ugraphic.UGraphic ug>;

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r13);

        $r21 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.awt.geom.Dimension2D getSize(h.ST_Agnode_s)>(r24);

        virtualinvoke $r14.<net.sourceforge.plantuml.gitlog.MagicBox: void drawBorder(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r20, $r21);

        goto label1;

     label2:
        $r4 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.List edges>;

        r25 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (h.ST_Agedge_s) $r5;

        $r6 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r26);

        r27 = (h.ST_Agedgeinfo_t) $r6;

        $r7 = new net.sourceforge.plantuml.gitlog.GitCurve;

        $r8 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.jsondiagram.Mirror yMirror>;

        specialinvoke $r7.<net.sourceforge.plantuml.gitlog.GitCurve: void <init>(h.ST_Agedgeinfo_t,net.sourceforge.plantuml.jsondiagram.Mirror)>(r27, $r8);

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ugraphic.color.HColor arrowColor()>();

        $r10 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ugraphic.UGraphic ug>;

        virtualinvoke $r7.<net.sourceforge.plantuml.gitlog.GitCurve: void drawCurve(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.UGraphic)>($r9, $r10);

        goto label3;

     label4:
        return;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getSize(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t r2;
        double $d0, d1, $d2, d3;
        net.sourceforge.plantuml.Dimension2DDouble $r3;
        net.sourceforge.plantuml.gitlog.SmetanaForGit r4;

        r4 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = r2.<h.ST_Agnodeinfo_t: double width>;

        d1 = $d0 * 72.0;

        $d2 = r2.<h.ST_Agnodeinfo_t: double height>;

        d3 = $d2 * 72.0;

        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d1, d3);

        return $r3;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getPosition(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t r2;
        double $d0, d1, $d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10;
        h.ST_pointf $r3, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.gitlog.SmetanaForGit r6;
        net.sourceforge.plantuml.jsondiagram.Mirror $r7;

        r6 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = r2.<h.ST_Agnodeinfo_t: double width>;

        d1 = $d0 * 72.0;

        $d2 = r2.<h.ST_Agnodeinfo_t: double height>;

        d3 = $d2 * 72.0;

        $r3 = r2.<h.ST_Agnodeinfo_t: h.ST_pointf coord>;

        d4 = $r3.<h.ST_pointf: double x>;

        $r4 = r2.<h.ST_Agnodeinfo_t: h.ST_pointf coord>;

        d5 = $r4.<h.ST_pointf: double y>;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d6 = d1 / 2.0;

        $d9 = d4 - $d6;

        $r7 = r6.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.jsondiagram.Mirror yMirror>;

        $d7 = d3 / 2.0;

        $d8 = d5 + $d7;

        $d10 = virtualinvoke $r7.<net.sourceforge.plantuml.jsondiagram.Mirror: double inv(double)>($d8);

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d9, $d10);

        return $r5;
    }

    private void initGraph(java.util.Collection)
    {
        net.sourceforge.plantuml.gitlog.SmetanaForGit r0;
        h.ST_Agraph_s $r1, $r5, $r7, $r14;
        smetana.core.CString $r2, $r6, $r8, $r9;
        smetana.core.Z $r3;
        h.ST_Agdesc_s $r4;
        java.util.Collection r10, $r16, $r23;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r11, $r15, $r30;
        java.util.Set $r12;
        java.lang.Object[] $r13;
        net.sourceforge.plantuml.jsondiagram.Mirror $r17;
        java.lang.Object $r18, $r22, $r24, $r26;
        h.ST_Agrec_s $r19;
        h.ST_Agnodeinfo_t r20;
        double $d0, d1, d2, $d3, d4;
        h.ST_pointf $r21;
        java.util.List $r25;
        net.sourceforge.plantuml.gitlog.MagicBox $r27;
        net.sourceforge.plantuml.ISkinParam $r28;
        net.sourceforge.plantuml.graphic.StringBounder $r29;
        h.ST_Agnode_s $r31, r45;
        java.lang.Throwable $r33;
        java.util.Iterator r35, r38, r40, r44;
        net.sourceforge.plantuml.gitlog.GNode r36, r39, r41;
        net.sourceforge.plantuml.awt.geom.Dimension2D r37;
        h.ST_Agedge_s r42;
        h.ST_GVC_s r43;

        r0 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        r10 := @parameter0: java.util.Collection;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agraph_s g>;

        if $r1 == null goto label01;

        return;

     label01:
        staticinvoke <smetana.core.Z: void open()>();

     label02:
        $r2 = new smetana.core.CString;

        specialinvoke $r2.<smetana.core.CString: void <init>(java.lang.String)>("g");

        $r3 = staticinvoke <smetana.core.Z: smetana.core.Z z()>();

        $r4 = $r3.<smetana.core.Z: h.ST_Agdesc_s Agdirected>;

        $r5 = staticinvoke <gen.lib.cgraph.graph__c: h.ST_Agraph_s agopen(smetana.core.CString,h.ST_Agdesc_s,h.ST_Agdisc_s)>($r2, $r4, null);

        r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agraph_s g> = $r5;

        $r7 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agraph_s g>;

        $r6 = new smetana.core.CString;

        specialinvoke $r6.<smetana.core.CString: void <init>(java.lang.String)>("ranksep");

        $r8 = new smetana.core.CString;

        specialinvoke $r8.<smetana.core.CString: void <init>(java.lang.String)>("0.35");

        $r9 = new smetana.core.CString;

        specialinvoke $r9.<smetana.core.CString: void <init>(java.lang.String)>("");

        staticinvoke <gen.lib.cgraph.attr__c: int agsafeset(h.ST_Agobj_s,smetana.core.CString,smetana.core.CString,smetana.core.CString)>($r7, $r6, $r8, $r9);

        r35 = interfaceinvoke r10.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r26 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (net.sourceforge.plantuml.gitlog.GNode) $r26;

        $r27 = new net.sourceforge.plantuml.gitlog.MagicBox;

        $r28 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.ISkinParam skinParam>;

        specialinvoke $r27.<net.sourceforge.plantuml.gitlog.MagicBox: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.gitlog.GNode)>($r28, r36);

        $r29 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r37 = virtualinvoke $r27.<net.sourceforge.plantuml.gitlog.MagicBox: net.sourceforge.plantuml.awt.geom.Dimension2D getBigDim(net.sourceforge.plantuml.graphic.StringBounder)>($r29);

        $r30 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.Map nodes>;

        $r31 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agnode_s createNode(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r37);

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r36, $r31);

        goto label03;

     label04:
        $r11 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.Map nodes>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        r38 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r22 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (net.sourceforge.plantuml.gitlog.GNode) $r22;

        $r23 = virtualinvoke r39.<net.sourceforge.plantuml.gitlog.GNode: java.util.Collection getDowns()>();

        r40 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r24 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (net.sourceforge.plantuml.gitlog.GNode) $r24;

        r42 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agedge_s createEdge(net.sourceforge.plantuml.gitlog.GNode,net.sourceforge.plantuml.gitlog.GNode)>(r39, r41);

        if r42 == null goto label07;

        $r25 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.List edges>;

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r42);

     label07:
        goto label06;

     label08:
        goto label05;

     label09:
        $r13 = newarray (java.lang.Object)[0];

        r43 = staticinvoke <gen.lib.gvc.gvc__c: h.ST_GVC_s gvContext(java.lang.Object[])>($r13);

        $r14 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agraph_s g>;

        staticinvoke <gen.lib.gvc.gvlayout__c: int gvLayoutJobs(h.ST_GVC_s,h.ST_Agraph_s)>(r43, $r14);

        d4 = 0.0;

        $r15 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.Map nodes>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        r44 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r18 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (h.ST_Agnode_s) $r18;

        $r19 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r45);

        r20 = (h.ST_Agnodeinfo_t) $r19;

        $d0 = r20.<h.ST_Agnodeinfo_t: double height>;

        d1 = $d0 * 72.0;

        $r21 = r20.<h.ST_Agnodeinfo_t: h.ST_pointf coord>;

        d2 = $r21.<h.ST_pointf: double y>;

        $d3 = d2 + d1;

        d4 = staticinvoke <java.lang.Math: double max(double,double)>(d4, $d3);

        goto label10;

     label11:
        $r17 = new net.sourceforge.plantuml.jsondiagram.Mirror;

        specialinvoke $r17.<net.sourceforge.plantuml.jsondiagram.Mirror: void <init>(double)>(d4);

        r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: net.sourceforge.plantuml.jsondiagram.Mirror yMirror> = $r17;

     label12:
        staticinvoke <smetana.core.Z: void close()>();

        goto label15;

     label13:
        $r33 := @caughtexception;

     label14:
        staticinvoke <smetana.core.Z: void close()>();

        throw $r33;

     label15:
        return;

        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private h.ST_Agedge_s createEdge(net.sourceforge.plantuml.gitlog.GNode, net.sourceforge.plantuml.gitlog.GNode)
    {
        net.sourceforge.plantuml.gitlog.SmetanaForGit r0;
        net.sourceforge.plantuml.gitlog.GNode r1, r5;
        java.util.Map $r2, $r6;
        java.lang.Object $r3, $r7;
        h.ST_Agnode_s r4, r8;
        h.ST_Agraph_s $r9;
        h.ST_Agedge_s r10;
        smetana.core.CString $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        r0 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        r1 := @parameter0: net.sourceforge.plantuml.gitlog.GNode;

        r5 := @parameter1: net.sourceforge.plantuml.gitlog.GNode;

        $r2 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.Map nodes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (h.ST_Agnode_s) $r3;

        $r6 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: java.util.Map nodes>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (h.ST_Agnode_s) $r7;

        if r4 == null goto label1;

        if r8 != null goto label2;

     label1:
        return null;

     label2:
        $r9 = r0.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agraph_s g>;

        r10 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agedge(h.ST_Agraph_s,h.ST_Agnode_s,h.ST_Agnode_s,smetana.core.CString,boolean)>($r9, r4, r8, null, 1);

        $r11 = new smetana.core.CString;

        specialinvoke $r11.<smetana.core.CString: void <init>(java.lang.String)>("arrowsize");

        $r12 = new smetana.core.CString;

        specialinvoke $r12.<smetana.core.CString: void <init>(java.lang.String)>(".7");

        $r13 = new smetana.core.CString;

        specialinvoke $r13.<smetana.core.CString: void <init>(java.lang.String)>("");

        staticinvoke <gen.lib.cgraph.attr__c: int agsafeset(h.ST_Agobj_s,smetana.core.CString,smetana.core.CString,smetana.core.CString)>(r10, $r11, $r12, $r13);

        $r14 = new smetana.core.CString;

        specialinvoke $r14.<smetana.core.CString: void <init>(java.lang.String)>("arrowtail");

        $r15 = new smetana.core.CString;

        specialinvoke $r15.<smetana.core.CString: void <init>(java.lang.String)>("none");

        $r16 = new smetana.core.CString;

        specialinvoke $r16.<smetana.core.CString: void <init>(java.lang.String)>("");

        staticinvoke <gen.lib.cgraph.attr__c: int agsafeset(h.ST_Agobj_s,smetana.core.CString,smetana.core.CString,smetana.core.CString)>(r10, $r14, $r15, $r16);

        $r17 = new smetana.core.CString;

        specialinvoke $r17.<smetana.core.CString: void <init>(java.lang.String)>("arrowhead");

        $r18 = new smetana.core.CString;

        specialinvoke $r18.<smetana.core.CString: void <init>(java.lang.String)>("normal");

        $r19 = new smetana.core.CString;

        specialinvoke $r19.<smetana.core.CString: void <init>(java.lang.String)>("");

        staticinvoke <gen.lib.cgraph.attr__c: int agsafeset(h.ST_Agobj_s,smetana.core.CString,smetana.core.CString,smetana.core.CString)>(r10, $r17, $r18, $r19);

        return r10;
    }

    private h.ST_Agnode_s createNode(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r5, $r6, $r7, $r11, $r13, $r14, $r17, $r18, $r19, $r26, $r27, $r28, $r33, $r34, $r35;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double $d0, $d1, $d2, $d3;
        java.lang.String r4, r8, $r15, $r20, $r29, $r36;
        net.sourceforge.plantuml.gitlog.SmetanaForGit r9;
        smetana.core.CString $r10, $r21, $r22, $r23, $r24, $r25, $r30, $r31, $r32, $r37;
        h.ST_Agraph_s $r12;
        int $i0, $i1, $i2, $i3;
        h.ST_Agnode_s r16;

        r9 := @this: net.sourceforge.plantuml.gitlog.SmetanaForGit;

        r2 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 / 72.0;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 / 72.0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r9.<net.sourceforge.plantuml.gitlog.SmetanaForGit: h.ST_Agraph_s g>;

        $r10 = new smetana.core.CString;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N");

        $i0 = r9.<net.sourceforge.plantuml.gitlog.SmetanaForGit: int num>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<smetana.core.CString: void <init>(java.lang.String)>($r15);

        r16 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agnode(h.ST_Agraph_s,smetana.core.CString,boolean)>($r12, $r10, 1);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N ");

        $i1 = r9.<net.sourceforge.plantuml.gitlog.SmetanaForGit: int num>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r16.<h.ST_Agnode_s: java.lang.String NAME> = $r20;

        $i2 = r9.<net.sourceforge.plantuml.gitlog.SmetanaForGit: int num>;

        $i3 = $i2 + 1;

        r9.<net.sourceforge.plantuml.gitlog.SmetanaForGit: int num> = $i3;

        $r21 = new smetana.core.CString;

        specialinvoke $r21.<smetana.core.CString: void <init>(java.lang.String)>("shape");

        $r22 = new smetana.core.CString;

        specialinvoke $r22.<smetana.core.CString: void <init>(java.lang.String)>("box");

        $r23 = new smetana.core.CString;

        specialinvoke $r23.<smetana.core.CString: void <init>(java.lang.String)>("");

        staticinvoke <gen.lib.cgraph.attr__c: int agsafeset(h.ST_Agobj_s,smetana.core.CString,smetana.core.CString,smetana.core.CString)>(r16, $r21, $r22, $r23);

        $r24 = new smetana.core.CString;

        specialinvoke $r24.<smetana.core.CString: void <init>(java.lang.String)>("height");

        $r25 = new smetana.core.CString;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<smetana.core.CString: void <init>(java.lang.String)>($r29);

        $r30 = new smetana.core.CString;

        specialinvoke $r30.<smetana.core.CString: void <init>(java.lang.String)>("");

        staticinvoke <gen.lib.cgraph.attr__c: int agsafeset(h.ST_Agobj_s,smetana.core.CString,smetana.core.CString,smetana.core.CString)>(r16, $r24, $r25, $r30);

        $r31 = new smetana.core.CString;

        specialinvoke $r31.<smetana.core.CString: void <init>(java.lang.String)>("width");

        $r32 = new smetana.core.CString;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<smetana.core.CString: void <init>(java.lang.String)>($r36);

        $r37 = new smetana.core.CString;

        specialinvoke $r37.<smetana.core.CString: void <init>(java.lang.String)>("");

        staticinvoke <gen.lib.cgraph.attr__c: int agsafeset(h.ST_Agobj_s,smetana.core.CString,smetana.core.CString,smetana.core.CString)>(r16, $r31, $r32, $r37);

        return r16;
    }
}
