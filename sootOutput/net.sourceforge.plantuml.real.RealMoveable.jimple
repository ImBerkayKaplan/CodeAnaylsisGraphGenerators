abstract class net.sourceforge.plantuml.real.RealMoveable extends net.sourceforge.plantuml.real.AbstractReal implements net.sourceforge.plantuml.real.Real
{
    public static final java.util.concurrent.atomic.AtomicInteger CPT;
    private final int cpt;
    private final java.lang.String name;
    private final java.lang.Throwable creationPoint;

    void <init>(net.sourceforge.plantuml.real.RealLine, java.lang.String)
    {
        net.sourceforge.plantuml.real.RealMoveable r0;
        net.sourceforge.plantuml.real.RealLine r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;
        java.lang.String r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.real.RealMoveable;

        r1 := @parameter0: net.sourceforge.plantuml.real.RealLine;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<net.sourceforge.plantuml.real.AbstractReal: void <init>(net.sourceforge.plantuml.real.RealLine)>(r1);

        $r2 = <net.sourceforge.plantuml.real.RealMoveable: java.util.concurrent.atomic.AtomicInteger CPT>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<net.sourceforge.plantuml.real.RealMoveable: int cpt> = $i0;

        r0.<net.sourceforge.plantuml.real.RealMoveable: java.lang.String name> = r3;

        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

        r0.<net.sourceforge.plantuml.real.RealMoveable: java.lang.Throwable creationPoint> = $r4;

        $r5 = r0.<net.sourceforge.plantuml.real.RealMoveable: java.lang.Throwable creationPoint>;

        virtualinvoke $r5.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    abstract void move(double);

    public final void printCreationStackTrace()
    {
        net.sourceforge.plantuml.real.RealMoveable r0;
        java.lang.Throwable $r1;

        r0 := @this: net.sourceforge.plantuml.real.RealMoveable;

        $r1 = r0.<net.sourceforge.plantuml.real.RealMoveable: java.lang.Throwable creationPoint>;

        virtualinvoke $r1.<java.lang.Throwable: void printStackTrace()>();

        return;
    }

    public final net.sourceforge.plantuml.real.Real addFixed(double)
    {
        net.sourceforge.plantuml.real.RealDelta $r0;
        net.sourceforge.plantuml.real.RealMoveable r1;
        double d0;

        r1 := @this: net.sourceforge.plantuml.real.RealMoveable;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.real.RealDelta;

        specialinvoke $r0.<net.sourceforge.plantuml.real.RealDelta: void <init>(net.sourceforge.plantuml.real.Real,double)>(r1, d0);

        return $r0;
    }

    public final java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        net.sourceforge.plantuml.real.RealMoveable r2;
        int $i0;
        java.lang.String $r5, $r7;

        r2 := @this: net.sourceforge.plantuml.real.RealMoveable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $i0 = r2.<net.sourceforge.plantuml.real.RealMoveable: int cpt>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r5 = r2.<net.sourceforge.plantuml.real.RealMoveable: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final java.lang.String getName()
    {
        net.sourceforge.plantuml.real.RealMoveable r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.real.RealMoveable;

        $r1 = r0.<net.sourceforge.plantuml.real.RealMoveable: java.lang.String name>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <net.sourceforge.plantuml.real.RealMoveable: java.util.concurrent.atomic.AtomicInteger CPT> = $r0;

        return;
    }
}
