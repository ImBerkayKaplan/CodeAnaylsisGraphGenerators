public class net.sourceforge.plantuml.posimo.Frame extends java.lang.Object implements net.sourceforge.plantuml.skin.Component
{
    private final java.util.List name;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.skin.rose.Rose rose;

    public net.sourceforge.plantuml.style.Style[] getUsedStyles()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.posimo.Frame r1;

        r1 := @this: net.sourceforge.plantuml.posimo.Frame;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.posimo.Frame r1;

        r1 := @this: net.sourceforge.plantuml.posimo.Frame;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void <init>(java.util.List, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.posimo.Frame r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1;
        java.util.List r2;
        net.sourceforge.plantuml.ISkinParam r3;

        r0 := @this: net.sourceforge.plantuml.posimo.Frame;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r1.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        r0.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.skin.rose.Rose rose> = $r1;

        r0.<net.sourceforge.plantuml.posimo.Frame: java.util.List name> = r2;

        r0.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.ISkinParam skinParam> = r3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.skin.Area r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1, r16;
        net.sourceforge.plantuml.posimo.Frame r2;
        net.sourceforge.plantuml.ColorParam $r3;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.ugraphic.color.HColor r6;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r7;
        net.sourceforge.plantuml.ugraphic.UBackground $r8;
        net.sourceforge.plantuml.ugraphic.UStroke $r9, $r19;
        net.sourceforge.plantuml.ugraphic.UGraphic $r10, $r14, $r20, r22, r23, r24;
        net.sourceforge.plantuml.ugraphic.URectangle $r11;
        double $d0, $d1, $d2, d3, $d4, d5, $d6, $d7;
        net.sourceforge.plantuml.graphic.TextBlock r12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r13;
        net.sourceforge.plantuml.graphic.StringBounder $r15;
        net.sourceforge.plantuml.ugraphic.UPolygon $r17;
        net.sourceforge.plantuml.skin.Context2D r21;

        r2 := @this: net.sourceforge.plantuml.posimo.Frame;

        r22 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.skin.Area;

        r21 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $r5 = r2.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.skin.rose.Rose rose>;

        $r4 = r2.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r3 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam packageBorder>;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>($r4, $r3);

        r23 = interfaceinvoke r22.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r6);

        $r7 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r24 = interfaceinvoke r23.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        $r9 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.4);

        $r10 = interfaceinvoke r24.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r11 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d0, $d1);

        interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r11);

        r12 = specialinvoke r2.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.graphic.TextBlock createTextBloc()>();

        $r13 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(2.0, 2.0);

        $r14 = interfaceinvoke r24.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r13);

        interfaceinvoke r12.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r14);

        $r15 = interfaceinvoke r24.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r16 = virtualinvoke r2.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.StringBounder)>($r15);

        $d2 = virtualinvoke r16.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d3 = $d2 + 6.0;

        $d4 = virtualinvoke r16.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d5 = $d4 + 6.0;

        $r17 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r17.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d3, 0.0);

        $d6 = d5 - 6.0;

        virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d3, $d6);

        $d7 = d3 - 6.0;

        virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d7, d5);

        virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, d5);

        virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        $r19 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r19.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.4);

        $r20 = interfaceinvoke r24.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r19);

        interfaceinvoke $r20.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r17);

        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.posimo.Frame r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.posimo.Frame;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = $d0 + 8.0;

        return $d1;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.posimo.Frame r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.posimo.Frame;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 + 8.0;

        return $d1;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getTextDim(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.posimo.Frame r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.posimo.Frame;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.graphic.TextBlock createTextBloc()>();

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r3;
    }

    private net.sourceforge.plantuml.graphic.TextBlock createTextBloc()
    {
        net.sourceforge.plantuml.posimo.Frame r0;
        net.sourceforge.plantuml.FontParam[] $r1, $r5;
        net.sourceforge.plantuml.FontParam $r2, $r6;
        net.sourceforge.plantuml.ISkinParam $r3, $r7;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: net.sourceforge.plantuml.posimo.Frame;

        $r3 = r0.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r2 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam PACKAGE>;

        $r1[0] = $r2;

        interfaceinvoke $r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r1);

        $r7 = r0.<net.sourceforge.plantuml.posimo.Frame: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r6 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam PACKAGE>;

        $r5[0] = $r6;

        interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getFontHtmlColor(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.FontParam[])>(null, $r5);

        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r9;
    }

    public final net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.posimo.Frame r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @this: net.sourceforge.plantuml.posimo.Frame;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.Frame: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.Frame: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d0, d1);

        return $r2;
    }
}
