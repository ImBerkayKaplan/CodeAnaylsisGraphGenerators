public final enum class net.sourceforge.plantuml.version.LicenseType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.version.LicenseType NONE;
    public static final enum net.sourceforge.plantuml.version.LicenseType NAMED;
    public static final enum net.sourceforge.plantuml.version.LicenseType DISTRIBUTOR;
    public static final enum net.sourceforge.plantuml.version.LicenseType UNKNOWN;
    private static final net.sourceforge.plantuml.version.LicenseType[] $VALUES;

    public static net.sourceforge.plantuml.version.LicenseType[] values()
    {
        net.sourceforge.plantuml.version.LicenseType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.version.LicenseType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.version.LicenseType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.version.LicenseType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/version/LicenseType;", r0);

        $r2 = (net.sourceforge.plantuml.version.LicenseType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.version.LicenseType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.version.LicenseType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.version.LicenseType fromInt(int)
    {
        int i0;
        net.sourceforge.plantuml.version.LicenseType $r0, $r1, $r2, $r3;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        $r3 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NONE>;

        return $r3;

     label1:
        if i0 != 0 goto label2;

        $r2 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NAMED>;

        return $r2;

     label2:
        if i0 != 2 goto label3;

        $r1 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType DISTRIBUTOR>;

        return $r1;

     label3:
        $r0 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType UNKNOWN>;

        return $r0;
    }

    private static net.sourceforge.plantuml.version.LicenseType[] $values()
    {
        net.sourceforge.plantuml.version.LicenseType[] $r0;
        net.sourceforge.plantuml.version.LicenseType $r1, $r2, $r3, $r4;

        $r0 = newarray (net.sourceforge.plantuml.version.LicenseType)[4];

        $r1 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NONE>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NAMED>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType DISTRIBUTOR>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType UNKNOWN>;

        $r0[3] = $r4;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.version.LicenseType $r0, $r1, $r2, $r3;
        net.sourceforge.plantuml.version.LicenseType[] $r4;

        $r0 = new net.sourceforge.plantuml.version.LicenseType;

        specialinvoke $r0.<net.sourceforge.plantuml.version.LicenseType: void <init>(java.lang.String,int)>("NONE", 0);

        <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NONE> = $r0;

        $r1 = new net.sourceforge.plantuml.version.LicenseType;

        specialinvoke $r1.<net.sourceforge.plantuml.version.LicenseType: void <init>(java.lang.String,int)>("NAMED", 1);

        <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NAMED> = $r1;

        $r2 = new net.sourceforge.plantuml.version.LicenseType;

        specialinvoke $r2.<net.sourceforge.plantuml.version.LicenseType: void <init>(java.lang.String,int)>("DISTRIBUTOR", 2);

        <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType DISTRIBUTOR> = $r2;

        $r3 = new net.sourceforge.plantuml.version.LicenseType;

        specialinvoke $r3.<net.sourceforge.plantuml.version.LicenseType: void <init>(java.lang.String,int)>("UNKNOWN", 3);

        <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType UNKNOWN> = $r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType[] $values()>();

        <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType[] $VALUES> = $r4;

        return;
    }
}
