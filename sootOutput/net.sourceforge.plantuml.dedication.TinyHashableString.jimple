public final class net.sourceforge.plantuml.dedication.TinyHashableString extends java.lang.Object
{
    private final java.lang.String sentence;
    private int cachedTinyHash;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.dedication.TinyHashableString r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.dedication.TinyHashableString;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.dedication.TinyHashableString: int cachedTinyHash> = -1;

        r0.<net.sourceforge.plantuml.dedication.TinyHashableString: java.lang.String sentence> = r1;

        return;
    }

    public final java.lang.String getSentence()
    {
        net.sourceforge.plantuml.dedication.TinyHashableString r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.dedication.TinyHashableString;

        $r1 = r0.<net.sourceforge.plantuml.dedication.TinyHashableString: java.lang.String sentence>;

        return $r1;
    }

    public final synchronized int tinyHash() throws java.io.UnsupportedEncodingException
    {
        net.sourceforge.plantuml.dedication.TinyHashableString r0;
        int $i0, $i1, $i2;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        byte[] $r3, $r5;
        java.math.BigInteger $r4;

        r0 := @this: net.sourceforge.plantuml.dedication.TinyHashableString;

        $i0 = r0.<net.sourceforge.plantuml.dedication.TinyHashableString: int cachedTinyHash>;

        if $i0 != -1 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.dedication.TinyHashableString: java.lang.String sentence>;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r4 = <net.sourceforge.plantuml.dedication.Dedication: java.math.BigInteger N>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $i2 = staticinvoke <net.sourceforge.plantuml.dedication.Noise: int shortHash(byte[],byte[])>($r3, $r5);

        r0.<net.sourceforge.plantuml.dedication.TinyHashableString: int cachedTinyHash> = $i2;

     label1:
        $i1 = r0.<net.sourceforge.plantuml.dedication.TinyHashableString: int cachedTinyHash>;

        return $i1;
    }
}
