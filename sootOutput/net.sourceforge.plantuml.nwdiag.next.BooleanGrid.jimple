public class net.sourceforge.plantuml.nwdiag.next.BooleanGrid extends java.lang.Object
{
    private final java.util.Set burned;

    public void <init>()
    {
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;
        java.util.HashSet $r1;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: java.util.Set burned> = $r1;

        return;
    }

    private int merge(int, int)
    {
        int i0, i1, $i2, $i3;
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 << 16;

        $i3 = i0 + $i2;

        return $i3;
    }

    public void burn(int, int)
    {
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;
        int i0, i1, $i2;
        java.util.Set $r1;
        java.lang.Integer $r2;
        boolean z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: java.util.Set burned>;

        $i2 = specialinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: int merge(int,int)>(i0, i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        z0 = interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        if z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Already present");

        throw $r3;

     label1:
        return;
    }

    public boolean isBurned(int, int)
    {
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;
        int i0, i1, $i2;
        java.util.Set $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: java.util.Set burned>;

        $i2 = specialinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: int merge(int,int)>(i0, i1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    public void burnRect(int, int, int, int)
    {
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: void check(int,int,int,int)>(i0, i1, i2, i3);

        i4 = i0;

     label1:
        if i4 > i2 goto label4;

        i5 = i1;

     label2:
        if i5 > i3 goto label3;

        virtualinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: void burn(int,int)>(i4, i5);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return;
    }

    public boolean isBurnRect(int, int, int, int)
    {
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;
        int i0, i1, i2, i3, i4, i5;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: void check(int,int,int,int)>(i0, i1, i2, i3);

        i4 = i0;

     label1:
        if i4 > i2 goto label5;

        i5 = i1;

     label2:
        if i5 > i3 goto label4;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: boolean isBurned(int,int)>(i4, i5);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        return 0;
    }

    private void check(int, int, int, int)
    {
        int i0, i1, i2, i3;
        java.lang.IllegalArgumentException $r0, $r1, $r3;
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r2;

        r2 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        if i2 < 0 goto label1;

        if i3 >= 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        if i2 >= i0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label3:
        if i3 >= i1 goto label4;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label4:
        return;
    }

    public boolean isSpaceAvailable(net.sourceforge.plantuml.nwdiag.next.Staged, int)
    {
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        net.sourceforge.plantuml.nwdiag.next.Staged r1;
        net.sourceforge.plantuml.nwdiag.next.NStage $r2, $r3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        r1 := @parameter0: net.sourceforge.plantuml.nwdiag.next.Staged;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.nwdiag.next.Staged: net.sourceforge.plantuml.nwdiag.next.NStage getStart()>();

        $i1 = virtualinvoke $r2.<net.sourceforge.plantuml.nwdiag.next.NStage: int getNumber()>();

        $i2 = interfaceinvoke r1.<net.sourceforge.plantuml.nwdiag.next.Staged: int getNWidth()>();

        $i3 = i0 + $i2;

        $i4 = $i3 - 1;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.nwdiag.next.Staged: net.sourceforge.plantuml.nwdiag.next.NStage getEnd()>();

        $i5 = virtualinvoke $r3.<net.sourceforge.plantuml.nwdiag.next.NStage: int getNumber()>();

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: boolean isBurnRect(int,int,int,int)>(i0, $i1, $i4, $i5);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void useSpace(net.sourceforge.plantuml.nwdiag.next.Staged, int)
    {
        net.sourceforge.plantuml.nwdiag.next.BooleanGrid r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        net.sourceforge.plantuml.nwdiag.next.Staged r1;
        net.sourceforge.plantuml.nwdiag.next.NStage $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.nwdiag.next.BooleanGrid;

        r1 := @parameter0: net.sourceforge.plantuml.nwdiag.next.Staged;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.nwdiag.next.Staged: net.sourceforge.plantuml.nwdiag.next.NStage getStart()>();

        $i1 = virtualinvoke $r2.<net.sourceforge.plantuml.nwdiag.next.NStage: int getNumber()>();

        $i2 = interfaceinvoke r1.<net.sourceforge.plantuml.nwdiag.next.Staged: int getNWidth()>();

        $i3 = i0 + $i2;

        $i4 = $i3 - 1;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.nwdiag.next.Staged: net.sourceforge.plantuml.nwdiag.next.NStage getEnd()>();

        $i5 = virtualinvoke $r3.<net.sourceforge.plantuml.nwdiag.next.NStage: int getNumber()>();

        virtualinvoke r0.<net.sourceforge.plantuml.nwdiag.next.BooleanGrid: void burnRect(int,int,int,int)>(i0, $i1, $i4, $i5);

        return;
    }
}
