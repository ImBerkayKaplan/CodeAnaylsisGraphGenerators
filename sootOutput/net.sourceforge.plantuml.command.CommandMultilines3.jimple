public abstract class net.sourceforge.plantuml.command.CommandMultilines3 extends java.lang.Object implements net.sourceforge.plantuml.command.Command
{
    private final net.sourceforge.plantuml.command.regex.IRegex starting;
    private final net.sourceforge.plantuml.command.MultilinesStrategy strategy;

    public void <init>(net.sourceforge.plantuml.command.regex.IRegex, net.sourceforge.plantuml.command.MultilinesStrategy)
    {
        net.sourceforge.plantuml.command.CommandMultilines3 r0;
        net.sourceforge.plantuml.command.regex.IRegex r1;
        java.lang.String $r2, $r6, $r8, $r9;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        net.sourceforge.plantuml.command.MultilinesStrategy r10;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines3;

        r1 := @parameter0: net.sourceforge.plantuml.command.regex.IRegex;

        r10 := @parameter1: net.sourceforge.plantuml.command.MultilinesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        if $z0 == 0 goto label1;

        $r9 = interfaceinvoke r1.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("$");

        if $z1 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad pattern ");

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.MultilinesStrategy strategy> = r10;

        r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.regex.IRegex starting> = r1;

        return;
    }

    public abstract net.sourceforge.plantuml.command.regex.RegexConcat getPatternEnd2();

    public java.lang.String[] getDescription()
    {
        java.lang.String[] $r0;
        java.lang.StringBuilder $r1, $r2, $r6, $r8, $r9, $r12;
        net.sourceforge.plantuml.command.CommandMultilines3 r3;
        net.sourceforge.plantuml.command.regex.IRegex $r4;
        java.lang.String $r5, $r7, $r11, $r13;
        net.sourceforge.plantuml.command.regex.RegexConcat $r10;

        r3 := @this: net.sourceforge.plantuml.command.CommandMultilines3;

        $r0 = newarray (java.lang.String)[2];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("START: ");

        $r4 = r3.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.regex.IRegex starting>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.command.regex.IRegex: java.lang.String getPattern()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[0] = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("END: ");

        $r10 = virtualinvoke r3.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.regex.RegexConcat getPatternEnd2()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexConcat: java.lang.String getPattern()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[1] = $r13;

        return $r0;
    }

    public final net.sourceforge.plantuml.command.CommandControl isValid(net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.CommandMultilines3 r0;
        net.sourceforge.plantuml.command.MultilinesStrategy $r1;
        boolean $z0, z1, z2;
        net.sourceforge.plantuml.StringLocated r2, $r4, $r5, r6;
        net.sourceforge.plantuml.command.regex.IRegex $r3;
        int $i0;
        net.sourceforge.plantuml.command.regex.RegexConcat $r7;
        net.sourceforge.plantuml.command.CommandControl $r8, $r9, $r10, $r11, $r12, $r13;
        net.sourceforge.plantuml.command.BlocLines r14, r15;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines3;

        r14 := @parameter0: net.sourceforge.plantuml.command.BlocLines;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.MultilinesStrategy strategy>;

        r15 = virtualinvoke r14.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines cleanList(net.sourceforge.plantuml.command.MultilinesStrategy)>($r1);

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines3: boolean isCommandForbidden()>();

        if $z0 == 0 goto label1;

        $r13 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r13;

     label1:
        r2 = virtualinvoke r15.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        if r2 != null goto label2;

        $r12 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r12;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.regex.IRegex starting>;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        z1 = interfaceinvoke $r3.<net.sourceforge.plantuml.command.regex.IRegex: boolean match(net.sourceforge.plantuml.StringLocated)>($r4);

        if z1 != 0 goto label3;

        $r11 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl NOT_OK>;

        return $r11;

     label3:
        $i0 = virtualinvoke r15.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 != 1 goto label4;

        $r10 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r10;

     label4:
        $r5 = virtualinvoke r15.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getLast()>();

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.regex.RegexConcat getPatternEnd2()>();

        z2 = virtualinvoke $r7.<net.sourceforge.plantuml.command.regex.RegexConcat: boolean match(net.sourceforge.plantuml.StringLocated)>(r6);

        if z2 != 0 goto label5;

        $r9 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK_PARTIAL>;

        return $r9;

     label5:
        virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines3: void actionIfCommandValid()>();

        $r8 = <net.sourceforge.plantuml.command.CommandControl: net.sourceforge.plantuml.command.CommandControl OK>;

        return $r8;
    }

    public final net.sourceforge.plantuml.command.CommandExecutionResult execute(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines)
    {
        net.sourceforge.plantuml.command.CommandMultilines3 r0;
        net.sourceforge.plantuml.command.MultilinesStrategy $r1;
        net.sourceforge.plantuml.core.Diagram r2;
        net.sourceforge.plantuml.command.CommandExecutionResult $r3;
        net.sourceforge.plantuml.command.BlocLines r4, r5;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines3;

        r2 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r4 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.MultilinesStrategy strategy>;

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines cleanList(net.sourceforge.plantuml.command.MultilinesStrategy)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram,net.sourceforge.plantuml.command.BlocLines)>(r2, r5);

        return $r3;
    }

    protected abstract net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines);

    protected boolean isCommandForbidden()
    {
        net.sourceforge.plantuml.command.CommandMultilines3 r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines3;

        return 0;
    }

    protected void actionIfCommandValid()
    {
        net.sourceforge.plantuml.command.CommandMultilines3 r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines3;

        return;
    }

    protected final net.sourceforge.plantuml.command.regex.IRegex getStartingPattern()
    {
        net.sourceforge.plantuml.command.CommandMultilines3 r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.command.CommandMultilines3;

        $r1 = r0.<net.sourceforge.plantuml.command.CommandMultilines3: net.sourceforge.plantuml.command.regex.IRegex starting>;

        return $r1;
    }
}
