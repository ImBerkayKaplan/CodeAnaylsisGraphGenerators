public final class net.sourceforge.plantuml.sequencediagram.graphic.Page extends java.lang.Object
{
    private final double headerHeight;
    private final double newpage1;
    private final double newpage2;
    private final double tailHeight;
    private final double signatureHeight;
    private final net.sourceforge.plantuml.cucadiagram.Display title;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7;
        net.sourceforge.plantuml.sequencediagram.graphic.Page r2;
        double $d0, $d1, $d2;
        java.lang.String $r8;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("headerHeight=");

        $d0 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double headerHeight>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newpage1=");

        $d1 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage1>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newpage2=");

        $d2 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage2>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void <init>(double, double, double, double, double, net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double d0, d1, d2, d3, d4;
        byte $b0, $b1, $b2, $b3;
        net.sourceforge.plantuml.cucadiagram.Display r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        d4 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        r1 := @parameter5: net.sourceforge.plantuml.cucadiagram.Display;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $b1 = d1 cmpg 0.0;

        if $b1 >= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $b2 = d2 cmpg 0.0;

        if $b2 >= 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label3:
        $b3 = d3 cmpl d4;

        if $b3 <= 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label4:
        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double headerHeight> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage1> = d3;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage2> = d4;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double tailHeight> = d1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double signatureHeight> = d2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: net.sourceforge.plantuml.cucadiagram.Display title> = r1;

        return;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double headerHeight>;

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getBodyHeight()>();

        $d3 = $d0 + $d1;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double tailHeight>;

        $d5 = $d3 + $d2;

        $d4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double signatureHeight>;

        $d6 = $d5 + $d4;

        return $d6;
    }

    public double getHeaderRelativePosition()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        return 0.0;
    }

    public double getBodyRelativePosition()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getHeaderRelativePosition()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double headerHeight>;

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getBodyHeight()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage2>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage1>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public double getTailRelativePosition()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getBodyRelativePosition()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getBodyHeight()>();

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getSignatureRelativePosition()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: boolean displaySignature()>();

        if $z0 != 0 goto label1;

        return -1.0;

     label1:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getTailRelativePosition()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double tailHeight>;

        $d2 = $d0 + $d1;

        return $d2;
    }

    public boolean displaySignature()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double signatureHeight>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double getNewpage1()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage1>;

        return $d0;
    }

    public double getNewpage2()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double newpage2>;

        return $d0;
    }

    public double getHeaderHeight()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double headerHeight>;

        return $d0;
    }

    public final net.sourceforge.plantuml.cucadiagram.Display getTitle()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: net.sourceforge.plantuml.cucadiagram.Display title>;

        return $r1;
    }
}
