public class net.sourceforge.plantuml.ugraphic.hand.HandJiggle extends java.lang.Object
{
    private final java.util.Collection points;
    private double startX;
    private double startY;
    private final double defaultVariation;
    private final java.util.Random rnd;

    private double randomMe()
    {
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        java.util.Random $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Random rnd>;

        $d0 = virtualinvoke $r1.<java.util.Random: double nextDouble()>();

        return $d0;
    }

    public void <init>(double, double, double, java.util.Random)
    {
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        java.util.ArrayList $r1;
        double d0, d1, d2;
        java.util.Random r2;
        java.awt.geom.Point2D$Double $r3;
        java.util.Collection $r4;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r2 := @parameter3: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Collection points> = $r1;

        r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startX> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startY> = d1;

        r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double defaultVariation> = d2;

        r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Random rnd> = r2;

        $r4 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Collection points>;

        $r3 = new java.awt.geom.Point2D$Double;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d1);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void <init>(java.awt.geom.Point2D, double, java.util.Random)
    {
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1, d2;
        java.util.Random r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        r1 := @parameter0: java.awt.geom.Point2D;

        d2 := @parameter1: double;

        r2 := @parameter2: java.util.Random;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void <init>(double,double,double,java.util.Random)>($d0, $d1, d2, r2);

        return;
    }

    public void lineTo(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void lineTo(double,double)>($d0, $d1);

        return;
    }

    public void arcTo(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        double d0, d1, d2, d3, $d4, d5, d6, $d7;
        java.awt.geom.Point2D $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        d2 := @parameter0: double;

        d3 := @parameter1: double;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d5 := @parameter4: double;

        d6 := @parameter5: double;

        $d4 = d2 + d3;

        $d7 = $d4 / 2.0;

        $r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.awt.geom.Point2D pointOnCircle(double,double,double,double,double)>(d0, d1, $d7, d5, d6);

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void lineTo(java.awt.geom.Point2D)>($r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.awt.geom.Point2D pointOnCircle(double,double,double,double,double)>(d0, d1, d3, d5, d6);

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void lineTo(java.awt.geom.Point2D)>($r2);

        return;
    }

    private static java.awt.geom.Point2D pointOnCircle(double, double, double, double, double)
    {
        double d0, d1, $d2, d3, $d4, d5, d6, $d7, d8, $d9, d10;
        java.awt.geom.Point2D$Double $r0;

        d0 := @parameter0: double;

        d6 := @parameter1: double;

        d1 := @parameter2: double;

        d3 := @parameter3: double;

        d8 := @parameter4: double;

        $d2 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d4 = $d2 * d3;

        d5 = d0 + $d4;

        $d7 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        $d9 = $d7 * d8;

        d10 = d6 + $d9;

        $r0 = new java.awt.geom.Point2D$Double;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d5, d10);

        return $r0;
    }

    public void lineTo(double, double)
    {
        double d0, $d1, $d2, d3, d4, $d5, $d6, d7, $d8, $d9, $d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, $d20, $d21, $d22, $d23, d24, d25, d26, $d27, $d28, $d29, d30, $d31, $d32, $d33, d34, $d35, $d36, d37, $d38, $d39, $d40, $d41, d42;
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        byte $b0;
        long $l1;
        java.awt.geom.Point2D$Double $r1, $r3;
        java.util.Collection $r2, $r4;
        int i2, i3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        d0 := @parameter0: double;

        d4 := @parameter1: double;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startX>;

        $d2 = d0 - $d1;

        d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d5 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startY>;

        $d6 = d4 - $d5;

        d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $d9 = d3 * d3;

        $d8 = d7 * d7;

        $d10 = $d9 + $d8;

        d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);

        $b0 = d11 cmpg 0.001;

        if $b0 >= 0 goto label1;

        return;

     label1:
        $d12 = d11 / 10.0;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d12);

        i2 = (int) $l1;

        d42 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double defaultVariation>;

        if i2 >= 5 goto label2;

        i2 = 5;

        d42 = d42 / 3.0;

     label2:
        $d13 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startX>;

        $d14 = d0 - $d13;

        $d15 = staticinvoke <java.lang.Math: double signum(double)>($d14);

        $d17 = $d15 * d3;

        $d16 = (double) i2;

        d18 = $d17 / $d16;

        $d19 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startY>;

        $d20 = d4 - $d19;

        $d21 = staticinvoke <java.lang.Math: double signum(double)>($d20);

        $d23 = $d21 * d7;

        $d22 = (double) i2;

        d24 = $d23 / $d22;

        d25 = d3 / d11;

        d26 = d7 / d11;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $d27 = (double) i3;

        $d29 = d18 * $d27;

        $d28 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startX>;

        d30 = $d29 + $d28;

        $d31 = (double) i3;

        $d33 = d24 * $d31;

        $d32 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startY>;

        d34 = $d33 + $d32;

        $d35 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double randomMe()>();

        $d36 = $d35 - 0.5;

        d37 = $d36 * d42;

        $r4 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Collection points>;

        $r3 = new java.awt.geom.Point2D$Double;

        $d38 = d37 * d26;

        $d41 = d30 - $d38;

        $d39 = d37 * d25;

        $d40 = d34 - $d39;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d41, $d40);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r2 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Collection points>;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d4);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startX> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: double startY> = d4;

        return;
    }

    public void curveTo(java.awt.geom.CubicCurve2D)
    {
        java.awt.geom.CubicCurve2D r0;
        double d0, d1;
        java.awt.geom.Point2D $r1, $r2, $r4;
        byte $b0, $b1;
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r3;
        java.awt.geom.CubicCurve2D$Double $r5, $r7;

        r3 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        r0 := @parameter0: java.awt.geom.CubicCurve2D;

        d0 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: double getFlatness()>();

        $r1 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: java.awt.geom.Point2D getP1()>();

        $r2 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: java.awt.geom.Point2D getP2()>();

        d1 = virtualinvoke $r1.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r2);

        $b0 = d0 cmpl 0.1;

        if $b0 <= 0 goto label1;

        $b1 = d1 cmpl 20.0;

        if $b1 <= 0 goto label1;

        $r5 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r5.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r7 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r7.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r0.<java.awt.geom.CubicCurve2D: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r5, $r7);

        virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void curveTo(java.awt.geom.CubicCurve2D)>($r5);

        virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void curveTo(java.awt.geom.CubicCurve2D)>($r7);

        return;

     label1:
        $r4 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: java.awt.geom.Point2D getP2()>();

        virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void lineTo(java.awt.geom.Point2D)>($r4);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.UPolygon toUPolygon()
    {
        net.sourceforge.plantuml.ugraphic.UPolygon $r0;
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r2;
        java.util.Collection $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        java.awt.geom.Point2D r6;
        double $d0, $d1;

        r2 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Collection points>;

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.geom.Point2D) $r5;

        $d0 = virtualinvoke r6.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r6.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UPath toUPath()
    {
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        java.util.Collection $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.Object $r4;
        java.awt.geom.Point2D r5;
        net.sourceforge.plantuml.ugraphic.UPath $r6, r7;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        r7 = null;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Collection points>;

        r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.awt.geom.Point2D) $r4;

        if r7 != null goto label2;

        $r6 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        r7 = $r6;

        virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(java.awt.geom.Point2D)>(r5);

        goto label3;

     label2:
        virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(java.awt.geom.Point2D)>(r5);

     label3:
        goto label1;

     label4:
        if r7 != null goto label5;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label5:
        return r7;
    }

    public void appendTo(net.sourceforge.plantuml.ugraphic.UPath)
    {
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle r0;
        java.util.Collection $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.Point2D r4;
        net.sourceforge.plantuml.ugraphic.UPath r5;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UPath;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: java.util.Collection points>;

        r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.Point2D) $r3;

        virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(java.awt.geom.Point2D)>(r4);

        goto label1;

     label2:
        return;
    }
}
