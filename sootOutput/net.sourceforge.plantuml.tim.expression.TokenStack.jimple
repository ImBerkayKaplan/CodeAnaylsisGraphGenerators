public class net.sourceforge.plantuml.tim.expression.TokenStack extends java.lang.Object
{
    private final java.util.List tokens;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void <init>(java.util.List)>($r1);

        return;
    }

    private void <init>(java.util.List)
    {
        net.sourceforge.plantuml.tim.expression.TokenStack r0;
        java.util.List r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens> = r1;

        return;
    }

    public int size()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public net.sourceforge.plantuml.tim.expression.TokenStack subTokenStack(int)
    {
        net.sourceforge.plantuml.tim.expression.TokenStack $r0, r1;
        int i0, $i1;
        java.util.List $r2, $r3, $r4, $r5;

        r1 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenStack;

        $r3 = r1.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $r2 = r1.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.List subList(int,int)>(i0, $i1);

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void <init>(java.util.List)>($r5);

        return $r0;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public void add(net.sourceforge.plantuml.tim.expression.Token)
    {
        net.sourceforge.plantuml.tim.expression.TokenStack r0;
        net.sourceforge.plantuml.tim.expression.Token r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        r1 := @parameter0: net.sourceforge.plantuml.tim.expression.Token;

        $r2 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public net.sourceforge.plantuml.tim.expression.TokenStack withoutSpace()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack $r0, r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.tim.expression.Token r6;
        net.sourceforge.plantuml.tim.expression.TokenType $r7, $r8;

        r2 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenStack;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.tim.expression.Token) $r5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r8 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType SPACES>;

        if $r7 == $r8 goto label2;

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void add(net.sourceforge.plantuml.tim.expression.Token)>(r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public static net.sourceforge.plantuml.tim.expression.TokenStack eatUntilCloseParenthesisOrComma(net.sourceforge.plantuml.tim.Eater) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.expression.TokenStack $r0;
        net.sourceforge.plantuml.tim.Eater r2;
        char c0;
        net.sourceforge.plantuml.tim.expression.Token r3;
        net.sourceforge.plantuml.tim.expression.TokenType r4, $r5, $r6;
        net.sourceforge.plantuml.tim.EaterException $r7;
        int i1;

        r2 := @parameter0: net.sourceforge.plantuml.tim.Eater;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenStack;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void <init>()>();

        i1 = 0;

     label1:
        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void skipSpaces()>();

        c0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if c0 != 0 goto label2;

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("until001");

        throw $r7;

     label2:
        if i1 != 0 goto label4;

        if c0 == 44 goto label3;

        if c0 != 41 goto label4;

     label3:
        return $r0;

     label4:
        r3 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.Token eatOneToken(net.sourceforge.plantuml.tim.Eater,boolean)>(r2, 0);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r5 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        if r4 != $r5 goto label5;

        i1 = i1 + 1;

        goto label6;

     label5:
        $r6 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        if r4 != $r6 goto label6;

        i1 = i1 + -1;

     label6:
        virtualinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void add(net.sourceforge.plantuml.tim.expression.Token)>(r3);

        goto label1;
    }

    public static void eatUntilCloseParenthesisOrComma(net.sourceforge.plantuml.tim.expression.TokenIterator) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.expression.TokenIterator r0;
        net.sourceforge.plantuml.tim.expression.Token r1, r4;
        net.sourceforge.plantuml.tim.expression.TokenType r2, $r3, r5, $r6, $r7, $r8, $r9, $r10, $r11;
        net.sourceforge.plantuml.tim.EaterException $r12;
        int i0;

        r0 := @parameter0: net.sourceforge.plantuml.tim.expression.TokenIterator;

        i0 = 0;

     label1:
        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenIterator: net.sourceforge.plantuml.tim.expression.Token peekToken()>();

        if r1 != null goto label2;

        $r12 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("until002");

        throw $r12;

     label2:
        r2 = virtualinvoke r1.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        if i0 != 0 goto label3;

        $r10 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType COMMA>;

        if r2 == $r10 goto label4;

        $r11 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        if r2 == $r11 goto label4;

     label3:
        $r3 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC>;

        if r2 != $r3 goto label5;

     label4:
        return;

     label5:
        r4 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenIterator: net.sourceforge.plantuml.tim.expression.Token nextToken()>();

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r6 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        if r5 == $r6 goto label6;

        $r7 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_FUNC>;

        if r5 != $r7 goto label7;

     label6:
        i0 = i0 + 1;

        goto label9;

     label7:
        $r8 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        if r5 == $r8 goto label8;

        $r9 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC>;

        if r5 != $r9 goto label9;

     label8:
        i0 = i0 + -1;

     label9:
        goto label1;
    }

    private int countFunctionArg(net.sourceforge.plantuml.tim.expression.TokenIterator) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.expression.TokenIterator r0;
        net.sourceforge.plantuml.tim.expression.Token $r1, r6;
        net.sourceforge.plantuml.tim.expression.TokenType r2, $r3, $r4, r7, $r8, $r9, $r10;
        boolean $z0;
        net.sourceforge.plantuml.tim.EaterException $r5, $r11;
        net.sourceforge.plantuml.tim.expression.TokenStack r12;
        int i0;

        r12 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        r0 := @parameter0: net.sourceforge.plantuml.tim.expression.TokenIterator;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenIterator: net.sourceforge.plantuml.tim.expression.Token peekToken()>();

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r3 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        if r2 == $r3 goto label1;

        $r4 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC>;

        if r2 != $r4 goto label2;

     label1:
        return 0;

     label2:
        i0 = 1;

     label3:
        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenIterator: boolean hasMoreTokens()>();

        if $z0 == 0 goto label8;

        staticinvoke <net.sourceforge.plantuml.tim.expression.TokenStack: void eatUntilCloseParenthesisOrComma(net.sourceforge.plantuml.tim.expression.TokenIterator)>(r0);

        r6 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenIterator: net.sourceforge.plantuml.tim.expression.Token nextToken()>();

        r7 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r8 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        if r7 == $r8 goto label4;

        $r9 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC>;

        if r7 != $r9 goto label5;

     label4:
        return i0;

     label5:
        $r10 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType COMMA>;

        if r7 != $r10 goto label6;

        i0 = i0 + 1;

        goto label7;

     label6:
        $r11 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("count13");

        throw $r11;

     label7:
        goto label3;

     label8:
        $r5 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("count12");

        throw $r5;
    }

    public void guessFunctions() throws net.sourceforge.plantuml.tim.EaterException
    {
        java.util.ArrayDeque $r0;
        java.util.HashMap $r2;
        net.sourceforge.plantuml.tim.expression.TokenStack r4, $r25;
        java.util.List $r5, $r12, $r18, $r19, $r29, $r37, $r39, $r45, $r51;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        java.util.Set $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r8, $r10, $r13, $r20, $r40, $r46, $r52, $r57;
        java.lang.Integer $r9, $r11, $r58, $r59, $r61;
        net.sourceforge.plantuml.tim.expression.Token $r14, $r17, $r21, $r27, $r35, $r41, $r47, r62;
        net.sourceforge.plantuml.tim.expression.TokenType $r15, $r16, $r23, $r33, $r36, $r42, $r43, $r48, $r49, $r53, $r54, $r55, $r56;
        java.lang.String $r22, $r32;
        net.sourceforge.plantuml.tim.expression.TokenIterator $r26;
        java.lang.StringBuilder $r28, $r30, $r31;
        java.lang.AssertionError $r44, $r50;
        java.util.Iterator r63;
        java.util.Map$Entry r64;

        r4 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        $r0 = new java.util.ArrayDeque;

        specialinvoke $r0.<java.util.ArrayDeque: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        i8 = 0;

     label1:
        $r5 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i8 >= $i0 goto label4;

        $r51 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $r52 = interfaceinvoke $r51.<java.util.List: java.lang.Object get(int)>(i8);

        r62 = (net.sourceforge.plantuml.tim.expression.Token) $r52;

        $r53 = virtualinvoke r62.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r54 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        $z3 = virtualinvoke $r53.<net.sourceforge.plantuml.tim.expression.TokenType: boolean equals(java.lang.Object)>($r54);

        if $z3 == 0 goto label2;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        interfaceinvoke $r0.<java.util.Deque: void addFirst(java.lang.Object)>($r61);

        goto label3;

     label2:
        $r55 = virtualinvoke r62.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r56 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        $z4 = virtualinvoke $r55.<net.sourceforge.plantuml.tim.expression.TokenType: boolean equals(java.lang.Object)>($r56);

        if $z4 == 0 goto label3;

        $r57 = interfaceinvoke $r0.<java.util.Deque: java.lang.Object pollFirst()>();

        $r58 = (java.lang.Integer) $r57;

        $r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, $r59);

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        $r6 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r63 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        r64 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r64.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = interfaceinvoke r64.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.Integer) $r10;

        i2 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $z1 = <net.sourceforge.plantuml.tim.expression.TokenStack: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $r45 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $r46 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>(i1);

        $r47 = (net.sourceforge.plantuml.tim.expression.Token) $r46;

        $r48 = virtualinvoke $r47.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r49 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        if $r48 == $r49 goto label6;

        $r50 = new java.lang.AssertionError;

        specialinvoke $r50.<java.lang.AssertionError: void <init>()>();

        throw $r50;

     label6:
        $z2 = <net.sourceforge.plantuml.tim.expression.TokenStack: boolean $assertionsDisabled>;

        if $z2 != 0 goto label7;

        $r39 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(i2);

        $r41 = (net.sourceforge.plantuml.tim.expression.Token) $r40;

        $r42 = virtualinvoke $r41.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r43 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        if $r42 == $r43 goto label7;

        $r44 = new java.lang.AssertionError;

        specialinvoke $r44.<java.lang.AssertionError: void <init>()>();

        throw $r44;

     label7:
        if i1 <= 0 goto label8;

        $r12 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $i3 = i1 - 1;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        $r14 = (net.sourceforge.plantuml.tim.expression.Token) $r13;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.tim.expression.Token: net.sourceforge.plantuml.tim.expression.TokenType getTokenType()>();

        $r16 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType PLAIN_TEXT>;

        if $r15 != $r16 goto label8;

        $r19 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $i5 = i1 - 1;

        $r17 = new net.sourceforge.plantuml.tim.expression.Token;

        $r18 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $i4 = i1 - 1;

        $r20 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>($i4);

        $r21 = (net.sourceforge.plantuml.tim.expression.Token) $r20;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.tim.expression.Token: java.lang.String getSurface()>();

        $r23 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType FUNCTION_NAME>;

        specialinvoke $r17.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r22, $r23, null);

        interfaceinvoke $r19.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i5, $r17);

        $i6 = i1 + 1;

        $r25 = virtualinvoke r4.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenStack subTokenStack(int)>($i6);

        $r26 = virtualinvoke $r25.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenIterator tokenIterator()>();

        i7 = specialinvoke r4.<net.sourceforge.plantuml.tim.expression.TokenStack: int countFunctionArg(net.sourceforge.plantuml.tim.expression.TokenIterator)>($r26);

        $r29 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $r27 = new net.sourceforge.plantuml.tim.expression.Token;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_FUNC>;

        specialinvoke $r27.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r32, $r33, null);

        interfaceinvoke $r29.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r27);

        $r37 = r4.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        $r35 = new net.sourceforge.plantuml.tim.expression.Token;

        $r36 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC>;

        specialinvoke $r35.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>(")", $r36, null);

        interfaceinvoke $r37.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i2, $r35);

     label8:
        goto label5;

     label9:
        return;
    }

    public net.sourceforge.plantuml.tim.expression.TokenIterator tokenIterator()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator $r0;
        net.sourceforge.plantuml.tim.expression.TokenStack r1;

        r1 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: void <init>(net.sourceforge.plantuml.tim.expression.TokenStack)>(r1);

        return $r0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue getResult(net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.tim.expression.Knowledge r3;
        net.sourceforge.plantuml.tim.expression.TokenStack r4, r5, $r10;
        net.sourceforge.plantuml.tim.expression.TokenIterator r6;
        net.sourceforge.plantuml.tim.expression.ShuntingYard $r7;
        net.sourceforge.plantuml.tim.expression.ReversePolishInterpretor $r9;
        net.sourceforge.plantuml.tim.expression.TValue $r12;

        r4 := @this: net.sourceforge.plantuml.tim.expression.TokenStack;

        r2 := @parameter0: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter1: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter2: net.sourceforge.plantuml.tim.TMemory;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.Knowledge asKnowledge(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation)>(r1, r2);

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenStack withoutSpace()>();

        virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TokenStack: void guessFunctions()>();

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenIterator tokenIterator()>();

        $r7 = new net.sourceforge.plantuml.tim.expression.ShuntingYard;

        specialinvoke $r7.<net.sourceforge.plantuml.tim.expression.ShuntingYard: void <init>(net.sourceforge.plantuml.tim.expression.TokenIterator,net.sourceforge.plantuml.tim.expression.Knowledge)>(r6, r3);

        $r9 = new net.sourceforge.plantuml.tim.expression.ReversePolishInterpretor;

        $r10 = virtualinvoke $r7.<net.sourceforge.plantuml.tim.expression.ShuntingYard: net.sourceforge.plantuml.tim.expression.TokenStack getQueue()>();

        specialinvoke $r9.<net.sourceforge.plantuml.tim.expression.ReversePolishInterpretor: void <init>(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.expression.TokenStack,net.sourceforge.plantuml.tim.expression.Knowledge,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.tim.TContext)>(r2, $r10, r3, r1, r0);

        $r12 = virtualinvoke $r9.<net.sourceforge.plantuml.tim.expression.ReversePolishInterpretor: net.sourceforge.plantuml.tim.expression.TValue getResult()>();

        return $r12;
    }

    static java.util.List access$000(net.sourceforge.plantuml.tim.expression.TokenStack)
    {
        net.sourceforge.plantuml.tim.expression.TokenStack r0;
        java.util.List $r1;

        r0 := @parameter0: net.sourceforge.plantuml.tim.expression.TokenStack;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List tokens>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/expression/TokenStack;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.expression.TokenStack: boolean $assertionsDisabled> = $z1;

        return;
    }
}
