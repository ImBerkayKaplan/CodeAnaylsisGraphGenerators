public class net.sourceforge.plantuml.sequencediagram.teoz.DelayTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile implements net.sourceforge.plantuml.sequencediagram.teoz.Tile
{
    private final net.sourceforge.plantuml.sequencediagram.Delay delay;
    private final net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments;
    private net.sourceforge.plantuml.real.Real middle;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.sequencediagram.Delay $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.Delay delay>;

        return $r1;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.Delay, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.sequencediagram.Delay r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.Delay;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.Delay delay> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments> = r1;

        return;
    }

    private void init(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.real.Real $r1, r5, r9, $r10;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r2, $r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r3, $r8;
        net.sourceforge.plantuml.graphic.StringBounder r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.real.Real middle>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getFirstLivingSpace()>();

        r5 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace getLastLivingSpace()>();

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $r10 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real middle(net.sourceforge.plantuml.real.Real,net.sourceforge.plantuml.real.Real)>(r5, r9);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.real.Real middle> = $r10;

        return;
    }

    private net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r1, $r5;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.sequencediagram.Delay $r3, $r8;
        net.sourceforge.plantuml.style.Style[] $r4;
        net.sourceforge.plantuml.skin.ComponentType $r6;
        net.sourceforge.plantuml.ISkinParam $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r9;
        net.sourceforge.plantuml.skin.Component r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.Delay delay>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Delay: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DELAY_TEXT>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.Delay delay>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.Delay: net.sourceforge.plantuml.cucadiagram.Display getText()>();

        r10 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r4, $r6, null, $r7, $r9);

        return r10;
    }

    private double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.skin.Area $r4;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments $r6;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r7;
        net.sourceforge.plantuml.real.Real $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r9;
        net.sourceforge.plantuml.skin.Context2D $r10;
        net.sourceforge.plantuml.ugraphic.UGraphic r11, r12;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        r11 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: void init(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r4 = new net.sourceforge.plantuml.skin.Area;

        $d0 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r4.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d0, $d1);

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: double getY()>();

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: void delayOn(double,double)>($d2, $d3);

        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.real.Real getMinX()>();

        $d4 = interfaceinvoke $r8.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        r12 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r10 = (net.sourceforge.plantuml.skin.Context2D) r12;

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r12, $r4, $r10);

        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.real.Real $r2, $r4;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: void init(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.real.Real middle>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d1 = neg $d0;

        $d2 = $d1 / 2.0;

        $r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d2);

        return $r4;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.DelayTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.real.Real $r2, $r4;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.DelayTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: void init(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.real.Real middle>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.DelayTile: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d1 = $d0 / 2.0;

        $r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d1);

        return $r4;
    }
}
