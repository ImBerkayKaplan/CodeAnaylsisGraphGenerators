public class net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet extends java.lang.Object
{
    private final java.util.Map participants;
    private final java.util.Map events;
    private final java.util.Map participantEnglobers2;
    private final java.util.List eventsList;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private net.sourceforge.plantuml.awt.geom.Dimension2D dimension;
    private double topStartingY;
    private static final int MARGIN_FOR_ENGLOBERS;
    private static final int MARGIN_FOR_ENGLOBERS1;
    static final boolean $assertionsDisabled;

    void <init>(net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.LinkedHashMap $r1, $r3;
        java.util.HashMap $r2;
        java.util.ArrayList $r4;
        net.sourceforge.plantuml.skin.rose.Rose r5, $r7;
        java.lang.Object $r6, $r9;
        net.sourceforge.plantuml.ISkinParam r8, $r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r5 := @parameter0: net.sourceforge.plantuml.skin.rose.Rose;

        r8 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map events> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participantEnglobers2> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List eventsList> = $r4;

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        $r7 = (net.sourceforge.plantuml.skin.rose.Rose) $r6;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose skin> = $r7;

        $r9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        $r10 = (net.sourceforge.plantuml.ISkinParam) $r9;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam> = $r10;

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getVeryfirst()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r4;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        return $r6;
    }

    public final net.sourceforge.plantuml.skin.rose.Rose getSkin()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose skin>;

        return $r1;
    }

    public final net.sourceforge.plantuml.ISkinParam getSkinParam()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.ISkinParam $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        return $r1;
    }

    public java.util.Collection getAllEvents()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List eventsList>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public java.util.Set getAllParticipants()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Collection getAllLivingParticipantBox()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.Map $r1;
        java.util.Collection $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public java.util.Collection getAllGraphicalElements()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.util.Collection $r5;
        java.lang.Object $r6, $r9;
        net.sourceforge.plantuml.sequencediagram.Event r7;
        java.util.Map $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement $r10;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List eventsList>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Event) $r6;

        $r8 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map events>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r10 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement) $r9;

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r0);

        return $r5;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r3;

        return $r4;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement getEvent(net.sourceforge.plantuml.sequencediagram.Event)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Event r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map events>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement) $r3;

        return $r4;
    }

    public double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.Participant r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.Participant) $r4;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getHeadAndEngloberHeight(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.graphic.StringBounder)>(r5, r6);

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d0);

        goto label1;

     label2:
        return d1;
    }

    public double getHeadAndEngloberHeight(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r4;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        double d0, d1, $d2;
        net.sourceforge.plantuml.sequencediagram.Doll r7;
        net.sourceforge.plantuml.skin.rose.Rose $r8;
        net.sourceforge.plantuml.style.Style[] $r9;
        net.sourceforge.plantuml.skin.ComponentType $r10;
        net.sourceforge.plantuml.ISkinParam $r11;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r12;
        net.sourceforge.plantuml.cucadiagram.Display $r13;
        net.sourceforge.plantuml.skin.Component r14;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r6 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        d0 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        r7 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.Doll getParticipantEnglober(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.graphic.StringBounder)>(r1, r6);

        if r7 != null goto label1;

        return d0;

     label1:
        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r9 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r10 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENGLOBER>;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r12 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()>();

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        r14 = virtualinvoke $r8.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r9, $r10, null, $r11, $r13);

        d1 = interfaceinvoke r14.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d2 = d0 + d1;

        return $d2;
    }

    public java.util.List getExistingParticipantEnglober(net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator r5;
        java.util.List $r6;
        java.lang.Object $r7, $r9, $r11, $r19;
        java.util.Map$Entry r8;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r10, $r18;
        boolean $z0, $z2;
        net.sourceforge.plantuml.sequencediagram.Participant $r12, $r20;
        net.sourceforge.plantuml.ISkinParam $r13, $r15;
        net.sourceforge.plantuml.graphic.StringBounder r14;
        net.sourceforge.plantuml.skin.rose.Rose $r16;
        net.sourceforge.plantuml.style.StyleBuilder $r17;
        java.lang.AssertionError $r21;
        net.sourceforge.plantuml.sequencediagram.Doll r22;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r14 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r22 = null;

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participantEnglobers2>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (net.sourceforge.plantuml.sequencediagram.ParticipantEnglober) $r9;

        if r10 != null goto label2;

        r22 = null;

        goto label1;

     label2:
        $z0 = <net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if r10 != null goto label3;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label3:
        if r22 == null goto label4;

        $r18 = virtualinvoke r22.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()>();

        if r10 != $r18 goto label4;

        $r19 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (net.sourceforge.plantuml.sequencediagram.Participant) $r19;

        virtualinvoke r22.<net.sourceforge.plantuml.sequencediagram.Doll: void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant)>($r20);

        goto label1;

     label4:
        $r11 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (net.sourceforge.plantuml.sequencediagram.Participant) $r11;

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r15 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r17 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r22 = staticinvoke <net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Doll createPuma(net.sourceforge.plantuml.sequencediagram.ParticipantEnglober,net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.style.StyleBuilder)>(r10, $r12, $r13, $r16, r14, $r17);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r22);

        goto label1;

     label5:
        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r6;
    }

    public double getOffsetForEnglobers(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.Doll r5;
        net.sourceforge.plantuml.skin.rose.Rose $r6;
        net.sourceforge.plantuml.skin.ComponentType $r7;
        net.sourceforge.plantuml.ISkinParam $r8;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r9;
        net.sourceforge.plantuml.cucadiagram.Display $r10;
        net.sourceforge.plantuml.skin.Component r11;
        double d0, d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List getExistingParticipantEnglober(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.Doll) $r4;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r7 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENGLOBER>;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r9 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()>();

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        r11 = virtualinvoke $r6.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>(null, $r7, null, $r8, $r10);

        d0 = interfaceinvoke r11.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label2;

        d1 = d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    public double getTailHeight(net.sourceforge.plantuml.graphic.StringBounder, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        java.util.List $r2;
        int $i0;
        double d0, $d1, d2, $d3, $d4, d5;
        boolean z0, $z1;
        java.util.Map $r3;
        java.util.Collection $r4;
        java.util.Iterator r5;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r7;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List getExistingParticipantEnglober(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $d4 = 4.0;

        goto label2;

     label1:
        $d4 = 0.0;

     label2:
        d0 = $d4;

        if z0 != 0 goto label3;

        $d3 = 1.0 + $d4;

        return $d3;

     label3:
        d5 = 0.0;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r6;

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        d2 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getTailHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d5 = staticinvoke <java.lang.Math: double max(double,double)>(d5, d2);

        goto label4;

     label5:
        $d1 = d5 + d0;

        return $d1;
    }

    public void addParticipant(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.ParticipantEnglober)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.Map $r2, $r5;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participantEnglobers2>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        return;
    }

    public void setLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        java.util.Map $r2, $r4;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r3;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    public void addEvent(net.sourceforge.plantuml.sequencediagram.Event, net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.Map $r1, $r5;
        java.util.Set $r2;
        net.sourceforge.plantuml.sequencediagram.Event r3;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement r4;
        java.util.List $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map events>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List eventsList>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map events>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void addEvent(net.sourceforge.plantuml.sequencediagram.Newpage, net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage, net.sourceforge.plantuml.sequencediagram.Event)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Event r1;
        java.util.List $r2, $r4, $r9;
        int i0, $i1, $i2;
        net.sourceforge.plantuml.sequencediagram.Newpage r3;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage r5;
        java.util.Map $r6, $r8;
        boolean $z0;
        java.lang.AssertionError $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.Newpage;

        r5 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.Event;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List eventsList>;

        i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        if i0 != -1 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r11;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List eventsList>;

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(i0, r3);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map events>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);

        $z0 = <net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map events>;

        $i1 = interfaceinvoke $r8.<java.util.Map: int size()>();

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List eventsList>;

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i1 == $i2 goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        return;
    }

    void setDimension(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r1, r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r2 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.awt.geom.Dimension2D dimension>;

        if $r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.awt.geom.Dimension2D dimension> = r2;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.awt.geom.Dimension2D dimension>;

        return $r1;
    }

    net.sourceforge.plantuml.graphic.TextBlock asTextBlock(double, double, net.sourceforge.plantuml.sequencediagram.graphic.Page, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet$1 $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r1;
        double d0, d1;
        net.sourceforge.plantuml.sequencediagram.graphic.Page r2;
        boolean z0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        z0 := @parameter3: boolean;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet$1;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet$1: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet,double,double,net.sourceforge.plantuml.sequencediagram.graphic.Page,boolean)>(r1, d0, d1, r2, z0);

        return $r0;
    }

    void drawU22(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, net.sourceforge.plantuml.sequencediagram.graphic.Page, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Page r0;
        double d0, d1, d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, r3;
        net.sourceforge.plantuml.skin.SimpleContext2D $r4, $r6;
        boolean z0;
        net.sourceforge.plantuml.graphic.StringBounder $r7;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        z0 := @parameter4: boolean;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getHeight()>();

        r3 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ugraphic.UGraphic clipAndTranslate2(double,double,net.sourceforge.plantuml.sequencediagram.graphic.Page,net.sourceforge.plantuml.ugraphic.UGraphic)>(d1, d2, r0, r2);

        $r4 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r4.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(1);

        $d3 = d0 - 2.0;

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void drawDolls(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>(r2, $d3, $r4);

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void drawPlaygroundU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D)>(r3, $r4);

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void drawLineU22(net.sourceforge.plantuml.ugraphic.UGraphic,boolean,net.sourceforge.plantuml.sequencediagram.graphic.Page)>(r2, z0, r0);

        if z0 == 0 goto label1;

        $r7 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getTailHeight(net.sourceforge.plantuml.graphic.StringBounder,boolean)>($r7, 1);

        $d5 = d0 - $d4;

        goto label2;

     label1:
        $d5 = 0.0;

     label2:
        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void drawHeadTailU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.sequencediagram.graphic.Page,double)>(r2, r0, $d5);

        $r6 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r6.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void drawPlaygroundU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D)>(r3, $r6);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UGraphic clipAndTranslate2(double, double, net.sourceforge.plantuml.sequencediagram.graphic.Page, net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UClip $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Page r1;
        double $d0, d1, $d2, $d3, d4;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, r5, r6;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        d4 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        r4 := @parameter3: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.ugraphic.UClip;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getBodyRelativePosition()>();

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getBodyHeight()>();

        $d3 = $d2 + 1.0;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UClip: void <init>(double,double,double,double)>(0.0, $d0, d1, $d3);

        r5 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate4(double)>(d4);

        r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        return r6;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getTranslate4(double)
    {
        double d0, $d1;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r0, $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r2;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $d1 = neg d0;

        $r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d1);

        return $r1;

     label1:
        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>()>();

        return $r0;
    }

    private void drawLineU22(net.sourceforge.plantuml.ugraphic.UGraphic, boolean, net.sourceforge.plantuml.sequencediagram.graphic.Page)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        boolean z0, z1, $z2;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r5;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, $d20;
        net.sourceforge.plantuml.sequencediagram.graphic.Page r6;
        net.sourceforge.plantuml.graphic.StringBounder $r7, $r8, $r9;
        byte $b0, $b1, $b2, $b3;
        int $i4;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        z1 := @parameter1: boolean;

        r6 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        z0 = r0 instanceof net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Collection getAllLivingParticipantBox()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r4;

        d0 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double getCreate()>();

        $d1 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getBodyRelativePosition()>();

        $r7 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d2 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double magicMargin(net.sourceforge.plantuml.graphic.StringBounder)>($r7);

        d3 = $d1 - $d2;

        $d4 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getBodyHeight()>();

        $d5 = d3 + $d4;

        $r8 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d6 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double magicMargin(net.sourceforge.plantuml.graphic.StringBounder)>($r8);

        $d7 = 2.0 * $d6;

        d8 = $d5 + $d7;

        d18 = d3;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label4;

        $d10 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage2()>();

        $b1 = d0 cmpl $d10;

        if $b1 <= 0 goto label2;

        goto label1;

     label2:
        $d11 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage1()>();

        $b2 = d0 cmpl $d11;

        if $b2 < 0 goto label4;

        $d12 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage2()>();

        $b3 = d0 cmpg $d12;

        if $b3 >= 0 goto label4;

        if z0 == 0 goto label3;

        $i4 = (int) d0;

        d18 = (double) $i4;

        goto label4;

     label3:
        $d13 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage1()>();

        $d14 = d0 - $d13;

        $r9 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d15 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double magicMargin(net.sourceforge.plantuml.graphic.StringBounder)>($r9);

        $d16 = 2.0 * $d15;

        $d17 = $d14 + $d16;

        d18 = d3 + $d17;

     label4:
        $d19 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage1()>();

        $d20 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getHeaderHeight()>();

        d9 = $d19 - $d20;

        virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: void drawLineU22(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean,double)>(r0, d18, d8, z1, d9);

        goto label1;

     label5:
        return;
    }

    private void drawHeadTailU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.sequencediagram.graphic.Page, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        java.lang.Object $r4, $r6, $r8;
        java.util.Map$Entry r5;
        net.sourceforge.plantuml.sequencediagram.Participant r7;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r9;
        double d0, d1, $d2, $d3, $d4, $d5;
        byte $b0, $b1, $b2, $b3;
        net.sourceforge.plantuml.Url r10;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r11;
        net.sourceforge.plantuml.ugraphic.UGraphic r12;
        net.sourceforge.plantuml.sequencediagram.graphic.Page r13;
        boolean $z0, z1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r13 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.Page;

        d1 := @parameter2: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Participant) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r8;

        d0 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double getCreate()>();

        z1 = 1;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label3;

        $d3 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage2()>();

        $b1 = d0 cmpl $d3;

        if $b1 <= 0 goto label2;

        goto label1;

     label2:
        $d4 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage1()>();

        $b2 = d0 cmpl $d4;

        if $b2 < 0 goto label3;

        $d5 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.graphic.Page: double getNewpage2()>();

        $b3 = d0 cmpg $d5;

        if $b3 >= 0 goto label3;

        z1 = 0;

     label3:
        r10 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.Url getUrl()>();

        if r10 == null goto label4;

        interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>(r10);

     label4:
        $r11 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double topStartingY>;

        virtualinvoke $r11.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void drawHeadTailU(net.sourceforge.plantuml.ugraphic.UGraphic,double,boolean,double)>(r12, $d2, z1, d1);

        if r10 == null goto label5;

        interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label5:
        goto label1;

     label6:
        return;
    }

    private double getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.awt.geom.Dimension2D dimension>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    private double getMaxY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.awt.geom.Dimension2D dimension>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    private void drawPlaygroundU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        java.util.Set $r1;
        boolean $z0, $z1;
        java.util.Collection $r2;
        java.lang.Object $r3, $r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r4;
        double $d0;
        net.sourceforge.plantuml.skin.Context2D r5;
        java.util.Iterator r7, r9;
        net.sourceforge.plantuml.sequencediagram.Participant r8;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement r10;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r5 := @parameter1: net.sourceforge.plantuml.skin.Context2D;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Set getAllParticipants()>();

        r7 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.sequencediagram.Participant) $r6;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: void drawLifeLineU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.sequencediagram.Participant)>(r4, r8);

        goto label1;

     label2:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Collection getAllGraphicalElements()>();

        r9 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement) $r3;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getMaxX()>();

        virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>(r4, $d0, r5);

        goto label3;

     label4:
        return;
    }

    private void drawDolls(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r12, $r17;
        net.sourceforge.plantuml.graphic.StringBounder $r2, $r7, $r9;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.sequencediagram.Doll r6;
        double d0, d1, d2, d3, $d4, $d5, d6, d7;
        net.sourceforge.plantuml.skin.Component r8;
        byte $b0;
        net.sourceforge.plantuml.Dimension2DDouble $r10, $r15;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11, $r16;
        net.sourceforge.plantuml.skin.Area $r13, $r18;
        net.sourceforge.plantuml.skin.Context2D r14;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d3 := @parameter1: double;

        r14 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List getExistingParticipantEnglober(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.sequencediagram.Doll) $r5;

        d6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getX1(net.sourceforge.plantuml.sequencediagram.Doll)>(r6);

        $r7 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getX2(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Doll)>($r7, r6);

        r8 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.Component getEngloberComponent(net.sourceforge.plantuml.sequencediagram.Doll)>(r6);

        d1 = d0 - d6;

        $r9 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getEngloberPreferedWidth(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.Doll)>($r9, r6);

        $b0 = d2 cmpl d1;

        if $b0 <= 0 goto label2;

        $d4 = d2 - d1;

        $d5 = $d4 / 2.0;

        d7 = d6 - $d5;

        $r15 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r15.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d2, d3);

        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d7, 1.0);

        $r17 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        $r18 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r18.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r15);

        interfaceinvoke r8.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r17, $r18, r14);

        goto label3;

     label2:
        $r10 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r10.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d1, d3);

        $r11 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, 1.0);

        $r12 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        $r13 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r13.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r10);

        interfaceinvoke r8.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r12, $r13, r14);

     label3:
        goto label1;

     label4:
        return;
    }

    public double getEngloberPreferedWidth(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Doll)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Doll r1;
        net.sourceforge.plantuml.skin.Component $r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Doll;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.Component getEngloberComponent(net.sourceforge.plantuml.sequencediagram.Doll)>(r1);

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        return $d0;
    }

    private net.sourceforge.plantuml.skin.Component getEngloberComponent(net.sourceforge.plantuml.sequencediagram.Doll)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2, $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r12;
        net.sourceforge.plantuml.skin.rose.Rose $r7;
        net.sourceforge.plantuml.style.Style[] $r8;
        net.sourceforge.plantuml.skin.ComponentType $r9;
        net.sourceforge.plantuml.cucadiagram.Display $r10;
        net.sourceforge.plantuml.skin.Component $r11;
        net.sourceforge.plantuml.SkinParamBackcolored $r13;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getParticipantEnglober()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.ugraphic.color.HColor getBoxColor()>();

        if $r2 != null goto label1;

        $r12 = r3.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        goto label2;

     label1:
        $r13 = new net.sourceforge.plantuml.SkinParamBackcolored;

        $r12 = $r13;

        $r4 = r3.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.ugraphic.color.HColor getBoxColor()>();

        specialinvoke $r13.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor)>($r4, $r5);

     label2:
        $r7 = r3.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r9 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENGLOBER>;

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.ParticipantEnglober: net.sourceforge.plantuml.cucadiagram.Display getTitle()>();

        $r11 = virtualinvoke $r7.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r8, $r9, null, $r12, $r10);

        return $r11;
    }

    public double getX1(net.sourceforge.plantuml.sequencediagram.Doll)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r6;
        double $d0, $d1;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getFirst2TOBEPRIVATE()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r4;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

        $d1 = $d0 + 1.0;

        return $d1;
    }

    public double getX2(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.Doll)
    {
        net.sourceforge.plantuml.sequencediagram.Doll r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r6;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        double $d0, $d1;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.Doll;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.Doll: net.sourceforge.plantuml.sequencediagram.Participant getLast2TOBEPRIVATE()>();

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r4;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()>();

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $d1 = $d0 - 1.0;

        return $d1;
    }

    private void drawLifeLineU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.sequencediagram.Participant r1;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r3;
        double $d0;
        net.sourceforge.plantuml.ugraphic.UGraphic r4;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.ISkinParam $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.Participant;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getLivingParticipantBox(net.sourceforge.plantuml.sequencediagram.Participant)>(r1);

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine getLifeLine()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double getMaxY()>();

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void finish(double)>($d0);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        virtualinvoke r3.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam)>(r4, $r5, $r6);

        return;
    }

    private net.sourceforge.plantuml.sequencediagram.Doll getParticipantEnglober(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.Doll r5;
        net.sourceforge.plantuml.sequencediagram.Participant r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r6 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.List getExistingParticipantEnglober(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.Doll) $r4;

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.Doll: boolean contains(net.sourceforge.plantuml.sequencediagram.Participant)>(r6);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void setTopStartingY(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: double topStartingY> = d0;

        return;
    }

    net.sourceforge.plantuml.sequencediagram.Participant getFirst(java.util.Collection)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Collection r5;
        java.util.Iterator r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r9;
        net.sourceforge.plantuml.sequencediagram.Participant $r8, r10;
        int i0, i1;
        java.lang.AssertionError $r11;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r5 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        i1 = -1;

        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.sequencediagram.Participant) $r9;

        i0 = interfaceinvoke $r0.<java.util.List: int indexOf(java.lang.Object)>(r10);

        $z1 = <net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 != -1 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        if i1 == -1 goto label3;

        if i1 <= i0 goto label4;

     label3:
        i1 = i0;

     label4:
        goto label1;

     label5:
        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r8 = (net.sourceforge.plantuml.sequencediagram.Participant) $r7;

        return $r8;
    }

    net.sourceforge.plantuml.sequencediagram.Participant getLast(java.util.Collection)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Collection r5;
        java.util.Iterator r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r9;
        net.sourceforge.plantuml.sequencediagram.Participant $r8, r10;
        int i0, i1;
        java.lang.AssertionError $r11;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        r5 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: java.util.Map participants>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        i1 = -1;

        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.sequencediagram.Participant) $r9;

        i0 = interfaceinvoke $r0.<java.util.List: int indexOf(java.lang.Object)>(r10);

        $z1 = <net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 != -1 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        if i1 == -1 goto label3;

        if i1 >= i0 goto label4;

     label3:
        i1 = i0;

     label4:
        goto label1;

     label5:
        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r8 = (net.sourceforge.plantuml.sequencediagram.Participant) $r7;

        return $r8;
    }

    public double getArrowThickness()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet r0;
        net.sourceforge.plantuml.LineParam $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.ugraphic.UStroke r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r1 = <net.sourceforge.plantuml.LineParam: net.sourceforge.plantuml.LineParam sequenceArrow>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.LineParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r1, null);

        if r3 != null goto label1;

        return 1.0;

     label1:
        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        return $d0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: int MARGIN_FOR_ENGLOBERS1> = 2;

        <net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: int MARGIN_FOR_ENGLOBERS> = 4;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/DrawableSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
