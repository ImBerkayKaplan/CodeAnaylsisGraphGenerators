public class net.sourceforge.plantuml.anim.Animation extends java.lang.Object
{
    private final java.util.List all;

    private void <init>(java.util.List)
    {
        net.sourceforge.plantuml.anim.Animation r0;
        java.util.List r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: net.sourceforge.plantuml.anim.Animation;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r0.<net.sourceforge.plantuml.anim.Animation: java.util.List all> = r1;

        return;
    }

    public static net.sourceforge.plantuml.anim.Animation singleton(net.sourceforge.plantuml.anim.AffineTransformation)
    {
        net.sourceforge.plantuml.anim.AffineTransformation r0;
        net.sourceforge.plantuml.anim.Animation $r1;
        java.util.List $r2;

        r0 := @parameter0: net.sourceforge.plantuml.anim.AffineTransformation;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new net.sourceforge.plantuml.anim.Animation;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r0);

        specialinvoke $r1.<net.sourceforge.plantuml.anim.Animation: void <init>(java.util.List)>($r2);

        return $r1;
    }

    public static net.sourceforge.plantuml.anim.Animation create(java.util.List)
    {
        java.util.ArrayList $r0;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0;
        net.sourceforge.plantuml.anim.Animation $r4;
        java.lang.Object $r5;
        java.lang.String r6;
        net.sourceforge.plantuml.anim.AffineTransformation r7;

        r2 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        r7 = staticinvoke <net.sourceforge.plantuml.anim.AffineTransformation: net.sourceforge.plantuml.anim.AffineTransformation create(java.lang.String)>(r6);

        if r7 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        $r4 = new net.sourceforge.plantuml.anim.Animation;

        specialinvoke $r4.<net.sourceforge.plantuml.anim.Animation: void <init>(java.util.List)>($r0);

        return $r4;
    }

    public java.util.Collection getAll()
    {
        net.sourceforge.plantuml.anim.Animation r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: net.sourceforge.plantuml.anim.Animation;

        $r1 = r0.<net.sourceforge.plantuml.anim.Animation: java.util.List all>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public void setDimension(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.anim.Animation r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.anim.AffineTransformation r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r5;

        r0 := @this: net.sourceforge.plantuml.anim.Animation;

        r5 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $r1 = r0.<net.sourceforge.plantuml.anim.Animation: java.util.List all>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.anim.AffineTransformation) $r3;

        virtualinvoke r4.<net.sourceforge.plantuml.anim.AffineTransformation: void setDimension(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r5);

        goto label1;

     label2:
        return;
    }

    public net.sourceforge.plantuml.anim.AffineTransformation getFirst()
    {
        net.sourceforge.plantuml.anim.Animation r0;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.anim.AffineTransformation $r3;

        r0 := @this: net.sourceforge.plantuml.anim.Animation;

        $r1 = r0.<net.sourceforge.plantuml.anim.Animation: java.util.List all>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (net.sourceforge.plantuml.anim.AffineTransformation) $r2;

        return $r3;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.anim.Animation r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.anim.AffineTransformation r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r5;
        net.sourceforge.plantuml.ugraphic.MinMax r6, r7;

        r0 := @this: net.sourceforge.plantuml.anim.Animation;

        r5 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(0);

        $r1 = r0.<net.sourceforge.plantuml.anim.Animation: java.util.List all>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.anim.AffineTransformation) $r3;

        r6 = virtualinvoke r4.<net.sourceforge.plantuml.anim.AffineTransformation: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r5);

        r7 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addMinMax(net.sourceforge.plantuml.ugraphic.MinMax)>(r6);

        goto label1;

     label2:
        return r7;
    }
}
