public class net.sourceforge.plantuml.project.lang.ComplementDate extends java.lang.Object implements net.sourceforge.plantuml.project.lang.Something
{

    public void <init>()
    {
        net.sourceforge.plantuml.project.lang.ComplementDate r0;

        r0 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.command.regex.IRegex toRegex(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexOr $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.project.lang.ComplementDate r2;
        java.lang.String r3;
        net.sourceforge.plantuml.command.regex.IRegex $r4, $r5, $r6, $r7, $r8;

        r2 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r3 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r4 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.command.regex.IRegex toRegexA(java.lang.String)>(r3);

        $r1[0] = $r4;

        $r5 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.command.regex.IRegex toRegexB(java.lang.String)>(r3);

        $r1[1] = $r5;

        $r6 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.command.regex.IRegex toRegexC(java.lang.String)>(r3);

        $r1[2] = $r6;

        $r7 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.command.regex.IRegex toRegexD(java.lang.String)>(r3);

        $r1[3] = $r7;

        $r8 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.command.regex.IRegex toRegexE(java.lang.String)>(r3);

        $r1[4] = $r8;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexA(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r8, $r9, $r20, $r21;
        java.lang.StringBuilder $r3, $r4, $r6, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r22, $r23, $r24;
        java.lang.String r5, $r7, $r13, $r16, $r19, $r25;
        net.sourceforge.plantuml.project.lang.ComplementDate r26;

        r26 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r5 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ADAY");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r7, "([\\d]+)");

        $r1[0] = $r2;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[\\w, ]*?");

        $r1[1] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AMONTH");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r16 = staticinvoke <net.sourceforge.plantuml.project.time.Month: java.lang.String getRegexString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r13, $r19);

        $r1[2] = $r9;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[\\w, ]*?");

        $r1[3] = $r20;

        $r21 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AYEAR");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r25, "([\\d]{4})");

        $r1[4] = $r21;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexB(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r8, $r9, $r14, $r15;
        java.lang.StringBuilder $r3, $r4, $r6, $r10, $r11, $r12, $r16, $r17, $r18;
        java.lang.String r5, $r7, $r13, $r19;
        net.sourceforge.plantuml.project.lang.ComplementDate r20;

        r20 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r5 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BYEAR");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r7, "([\\d]{4})");

        $r1[0] = $r2;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[1] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BMONTH");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r13, "([\\d]{1,2})");

        $r1[2] = $r9;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[3] = $r14;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BDAY");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r19, "([\\d]{1,2})");

        $r1[4] = $r15;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexC(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r14, $r15, $r20, $r21;
        java.lang.StringBuilder $r3, $r4, $r6, $r8, $r9, $r11, $r12, $r16, $r17, $r18, $r22, $r23, $r24;
        java.lang.String r5, $r7, $r10, $r13, $r19, $r25;
        net.sourceforge.plantuml.project.lang.ComplementDate r26;

        r26 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r5 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CMONTH");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = staticinvoke <net.sourceforge.plantuml.project.time.Month: java.lang.String getRegexString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r7, $r13);

        $r1[0] = $r2;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[\\w, ]*?");

        $r1[1] = $r14;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CDAY");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r19, "([\\d]+)");

        $r1[2] = $r15;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[\\w, ]*?");

        $r1[3] = $r20;

        $r21 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CYEAR");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r25, "([\\d]{4})");

        $r1[4] = $r21;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexD(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String r5, $r7;
        net.sourceforge.plantuml.project.lang.ComplementDate r14;

        r14 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r5 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[7];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DCOUNT");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r7, "([\\d]+)");

        $r1[0] = $r2;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[1] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("days?");

        $r1[2] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("after");

        $r1[4] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[5] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("start");

        $r1[6] = $r13;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexE(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String r6, $r8;
        net.sourceforge.plantuml.project.lang.ComplementDate r9;

        r9 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r6 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[dD]\\+");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ECOUNT");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r8, "([\\d]+)");

        $r1[1] = $r3;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    public net.sourceforge.plantuml.project.Failable getMe(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24;
        java.lang.String r3, $r5, $r6, $r10, $r11, $r15, $r16, $r20, $r21, $r25, $r26;
        java.lang.IllegalStateException $r27;
        net.sourceforge.plantuml.project.lang.ComplementDate r28;
        net.sourceforge.plantuml.project.GanttDiagram r29;
        net.sourceforge.plantuml.project.time.Day $r30, $r32, $r34, $r36, $r38;
        net.sourceforge.plantuml.project.Failable $r31, $r33, $r35, $r37, $r39;

        r28 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r29 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ADAY");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        if $r6 == null goto label1;

        $r38 = specialinvoke r28.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.project.time.Day resultA(net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r0, r3);

        $r39 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r38);

        return $r39;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BDAY");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r10, 0);

        if $r11 == null goto label2;

        $r36 = specialinvoke r28.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.project.time.Day resultB(net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r0, r3);

        $r37 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r36);

        return $r37;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CDAY");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r15, 0);

        if $r16 == null goto label3;

        $r34 = specialinvoke r28.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.project.time.Day resultC(net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r0, r3);

        $r35 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r34);

        return $r35;

     label3:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DCOUNT");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r20, 0);

        if $r21 == null goto label4;

        $r32 = specialinvoke r28.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.project.time.Day resultD(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r29, r0, r3);

        $r33 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r32);

        return $r33;

     label4:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ECOUNT");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r25, 0);

        if $r26 == null goto label5;

        $r30 = specialinvoke r28.<net.sourceforge.plantuml.project.lang.ComplementDate: net.sourceforge.plantuml.project.time.Day resultE(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r29, r0, r3);

        $r31 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r30);

        return $r31;

     label5:
        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>()>();

        throw $r27;
    }

    private net.sourceforge.plantuml.project.time.Day resultA(net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r7, $r8, $r9, $r12, $r13, $r14;
        java.lang.String r3, $r5, $r6, $r10, r11, $r15, $r16;
        int i0, i1;
        net.sourceforge.plantuml.project.time.Day $r17;
        net.sourceforge.plantuml.project.lang.ComplementDate r18;

        r18 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r0 := @parameter0: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ADAY");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AMONTH");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r10, 0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AYEAR");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r15, 0);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        $r17 = staticinvoke <net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day create(int,java.lang.String,int)>(i1, r11, i0);

        return $r17;
    }

    private net.sourceforge.plantuml.project.time.Day resultB(net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r7, $r8, $r9, $r12, $r13, $r14;
        java.lang.String r3, $r5, $r6, $r10, $r11, $r15, $r16;
        int i0, i1, i2;
        net.sourceforge.plantuml.project.time.Day $r17;
        net.sourceforge.plantuml.project.lang.ComplementDate r18;

        r18 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r0 := @parameter0: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BDAY");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BMONTH");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r10, 0);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BYEAR");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r15, 0);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        $r17 = staticinvoke <net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day create(int,int,int)>(i2, i1, i0);

        return $r17;
    }

    private net.sourceforge.plantuml.project.time.Day resultC(net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r7, $r8, $r9, $r12, $r13, $r14;
        java.lang.String r3, $r5, $r6, $r10, r11, $r15, $r16;
        int i0, i1;
        net.sourceforge.plantuml.project.time.Day $r17;
        net.sourceforge.plantuml.project.lang.ComplementDate r18;

        r18 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r0 := @parameter0: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CDAY");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CMONTH");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r10, 0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CYEAR");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r15, 0);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        $r17 = staticinvoke <net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day create(int,java.lang.String,int)>(i1, r11, i0);

        return $r17;
    }

    private net.sourceforge.plantuml.project.time.Day resultD(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5, $r6;
        int i0;
        net.sourceforge.plantuml.project.GanttDiagram r7;
        net.sourceforge.plantuml.project.time.Day $r8, $r9;
        net.sourceforge.plantuml.project.lang.ComplementDate r10;

        r10 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r7 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DCOUNT");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.project.GanttDiagram: net.sourceforge.plantuml.project.time.Day getStartingDate()>();

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day addDays(int)>(i0);

        return $r9;
    }

    private net.sourceforge.plantuml.project.time.Day resultE(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5, $r6;
        int i0;
        net.sourceforge.plantuml.project.GanttDiagram r7;
        net.sourceforge.plantuml.project.time.Day $r8, $r9;
        net.sourceforge.plantuml.project.lang.ComplementDate r10;

        r10 := @this: net.sourceforge.plantuml.project.lang.ComplementDate;

        r7 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ECOUNT");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.project.GanttDiagram: net.sourceforge.plantuml.project.time.Day getStartingDate()>();

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day addDays(int)>(i0);

        return $r9;
    }
}
