public class net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UDriver
{

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UPolygon, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, net.sourceforge.plantuml.tikz.TikzGraphics)
    {
        net.sourceforge.plantuml.ugraphic.UPolygon r0;
        double d0, d1, $d2;
        double[] r1;
        net.sourceforge.plantuml.ugraphic.UParam r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, $r7, $r13, $r15;
        boolean $z0;
        net.sourceforge.plantuml.tikz.TikzGraphics r4;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r5;
        java.awt.Color $r6, $r8, r14, r16;
        net.sourceforge.plantuml.ugraphic.UStroke $r9, $r10;
        java.lang.String $r11;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient r12;
        char $c0;
        net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz r17;

        r17 := @this: net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UPolygon;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r5 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r2 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UPolygon: double[] getPointArray(double,double)>(d0, d1);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $z0 = r3 instanceof net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        if $z0 == 0 goto label1;

        r12 = (net.sourceforge.plantuml.ugraphic.color.HColorGradient) r3;

        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        r14 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r13);

        $r15 = virtualinvoke r12.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        r16 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r15);

        $c0 = virtualinvoke r12.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: char getPolicy()>();

        virtualinvoke r4.<net.sourceforge.plantuml.tikz.TikzGraphics: void setGradientColor(java.awt.Color,java.awt.Color,char)>(r14, r16, $c0);

        goto label2;

     label1:
        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r3);

        virtualinvoke r4.<net.sourceforge.plantuml.tikz.TikzGraphics: void setFillColor(java.awt.Color)>($r6);

     label2:
        $r7 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r8 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r7);

        virtualinvoke r4.<net.sourceforge.plantuml.tikz.TikzGraphics: void setStrokeColor(java.awt.Color)>($r8);

        $r9 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d2 = virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        $r10 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.ugraphic.UStroke: java.lang.String getDashTikz()>();

        virtualinvoke r4.<net.sourceforge.plantuml.tikz.TikzGraphics: void setStrokeWidth(double,java.lang.String)>($d2, $r11);

        virtualinvoke r4.<net.sourceforge.plantuml.tikz.TikzGraphics: void polygon(double[])>(r1);

        return;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        net.sourceforge.plantuml.tikz.TikzGraphics $r5;
        net.sourceforge.plantuml.ugraphic.UPolygon $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.UPolygon) r1;

        $r5 = (net.sourceforge.plantuml.tikz.TikzGraphics) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz: void draw(net.sourceforge.plantuml.ugraphic.UPolygon,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.tikz.TikzGraphics)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
