public class net.sourceforge.plantuml.FileGroup extends java.lang.Object
{
    private final java.util.List result;
    private final java.lang.String pattern;
    private final java.util.List excluded;
    private final net.sourceforge.plantuml.Option option;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 predirPath;
    private static final net.sourceforge.plantuml.command.regex.Pattern2 noStarInDirectory;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, java.util.List, net.sourceforge.plantuml.Option)
    {
        net.sourceforge.plantuml.FileGroup r0;
        java.util.ArrayList $r1;
        java.lang.String r2;
        java.util.List r3, $r5;
        net.sourceforge.plantuml.Option r4;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.plantuml.FileGroup;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: net.sourceforge.plantuml.Option;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.FileGroup: java.util.List result> = $r1;

        r0.<net.sourceforge.plantuml.FileGroup: java.lang.String pattern> = r2;

        r0.<net.sourceforge.plantuml.FileGroup: java.util.List excluded> = r3;

        r0.<net.sourceforge.plantuml.FileGroup: net.sourceforge.plantuml.Option option> = r4;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("*");

        if $i0 != -1 goto label1;

        $i2 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("?");

        if $i2 != -1 goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.FileGroup: void initNoStar()>();

        goto label3;

     label1:
        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("**");

        if $i1 == -1 goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.FileGroup: void recurse()>();

        goto label3;

     label2:
        specialinvoke r0.<net.sourceforge.plantuml.FileGroup: void initWithSimpleStar()>();

     label3:
        $r5 = r0.<net.sourceforge.plantuml.FileGroup: java.util.List result>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r5);

        return;
    }

    private void recurse()
    {
        net.sourceforge.plantuml.FileGroup r0;
        java.lang.String $r1, $r4, $r6;
        net.sourceforge.plantuml.command.regex.Pattern2 $r2;
        net.sourceforge.plantuml.command.regex.Matcher2 r3;
        boolean z0;
        java.io.File $r5, $r7, r9;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: net.sourceforge.plantuml.FileGroup;

        $r2 = <net.sourceforge.plantuml.FileGroup: net.sourceforge.plantuml.command.regex.Pattern2 predirPath>;

        $r1 = r0.<net.sourceforge.plantuml.FileGroup: java.lang.String pattern>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>($r1);

        z0 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label1:
        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        if $r4 != null goto label2;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(".");

        r9 = $r7;

        goto label3;

     label2:
        $r5 = new java.io.File;

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);

        r9 = $r5;

     label3:
        specialinvoke r0.<net.sourceforge.plantuml.FileGroup: void initWithDoubleStar(java.io.File)>(r9);

        return;
    }

    private void initNoStar()
    {
        java.io.File $r0;
        net.sourceforge.plantuml.FileGroup r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r1 := @this: net.sourceforge.plantuml.FileGroup;

        $r0 = new java.io.File;

        $r2 = r1.<net.sourceforge.plantuml.FileGroup: java.lang.String pattern>;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.FileGroup: void addSimpleDirectory(java.io.File)>($r0);

        goto label2;

     label1:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isFile()>();

        if $z1 == 0 goto label2;

        specialinvoke r1.<net.sourceforge.plantuml.FileGroup: void addResultFile(java.io.File)>($r0);

     label2:
        return;
    }

    private void addResultFile(java.io.File)
    {
        java.io.File r0;
        java.lang.String r1, r7, $r8;
        net.sourceforge.plantuml.FileGroup r2;
        java.util.List $r3, $r5;
        java.util.Iterator r4;
        boolean $z0, $z2;
        java.lang.Object $r6;

        r2 := @this: net.sourceforge.plantuml.FileGroup;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <net.sourceforge.plantuml.FileGroup: java.lang.String getNormalizedPath(java.io.File)>(r0);

        $r3 = r2.<net.sourceforge.plantuml.FileGroup: java.util.List excluded>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <net.sourceforge.plantuml.FileGroup: java.lang.String toRegexp(java.lang.String)>(r7);

        $z2 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>($r8);

        if $z2 == 0 goto label2;

        return;

     label2:
        goto label1;

     label3:
        $r5 = r2.<net.sourceforge.plantuml.FileGroup: java.util.List result>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    private void addSimpleDirectory(java.io.File)
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        boolean $z0;
        net.sourceforge.plantuml.FileGroup r1;
        java.io.File r2;
        java.lang.String $r4;

        r1 := @this: net.sourceforge.plantuml.FileGroup;

        r2 := @parameter0: java.io.File;

        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: boolean isWord()>();

        if $z0 == 0 goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.FileGroup: void addSimpleDirectory(java.io.File,java.lang.String)>(r2, "(?i)^.*_extr\\d+\\.txt$");

        goto label2;

     label1:
        $r4 = staticinvoke <net.sourceforge.plantuml.Option: java.lang.String getPattern()>();

        specialinvoke r1.<net.sourceforge.plantuml.FileGroup: void addSimpleDirectory(java.io.File,java.lang.String)>(r2, $r4);

     label2:
        return;
    }

    private void addSimpleDirectory(java.io.File, java.lang.String)
    {
        java.io.File r0, r3;
        boolean $z0, $z1;
        java.io.File[] $r1, r2;
        int i0, i1;
        java.lang.String $r4, r5, $r11;
        net.sourceforge.plantuml.FileGroup r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r6 := @this: net.sourceforge.plantuml.FileGroup;

        r0 := @parameter0: java.io.File;

        r5 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dir=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 == null goto label4;

        r2 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $r4 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean matches(java.lang.String)>(r5);

        if $z1 == 0 goto label3;

        specialinvoke r6.<net.sourceforge.plantuml.FileGroup: void addResultFile(java.io.File)>(r3);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    private static java.lang.String getNormalizedPath(java.io.File)
    {
        java.io.File r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        return $r2;
    }

    private void initWithSimpleStar()
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.FileGroup r0;
        java.lang.String $r1, $r5, $r6, $r8, r11, r12;
        net.sourceforge.plantuml.command.regex.Pattern2 $r2;
        net.sourceforge.plantuml.command.regex.Matcher2 r3;
        java.io.File $r4, $r7, r10;
        int $i0;
        java.lang.AssertionError $r9;

        r0 := @this: net.sourceforge.plantuml.FileGroup;

        $z0 = <net.sourceforge.plantuml.FileGroup: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r8 = r0.<net.sourceforge.plantuml.FileGroup: java.lang.String pattern>;

        $i0 = virtualinvoke $r8.<java.lang.String: int indexOf(java.lang.String)>("**");

        if $i0 == -1 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r2 = <net.sourceforge.plantuml.FileGroup: net.sourceforge.plantuml.command.regex.Pattern2 noStarInDirectory>;

        $r1 = r0.<net.sourceforge.plantuml.FileGroup: java.lang.String pattern>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>($r1);

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z1 == 0 goto label3;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(".");

        r10 = $r4;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        if $r5 == null goto label2;

        r11 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r11);

        r10 = $r7;

     label2:
        r12 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        $r6 = staticinvoke <net.sourceforge.plantuml.FileGroup: java.lang.String toRegexp(java.lang.String)>(r12);

        specialinvoke r0.<net.sourceforge.plantuml.FileGroup: void addSimpleDirectory(java.io.File,java.lang.String)>(r10, $r6);

        goto label4;

     label3:
        specialinvoke r0.<net.sourceforge.plantuml.FileGroup: void recurse()>();

     label4:
        return;
    }

    private void initWithDoubleStar(java.io.File)
    {
        java.io.File r0, r3;
        java.io.File[] $r1, r2;
        int i0, i1;
        boolean $z0, $z1, $z2;
        java.lang.String r4, $r6, $r7;
        net.sourceforge.plantuml.FileGroup r5;

        r5 := @this: net.sourceforge.plantuml.FileGroup;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 == null goto label4;

        r2 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $z0 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        specialinvoke r5.<net.sourceforge.plantuml.FileGroup: void initWithDoubleStar(java.io.File)>(r3);

        goto label3;

     label2:
        $z1 = virtualinvoke r3.<java.io.File: boolean isFile()>();

        if $z1 == 0 goto label3;

        r4 = staticinvoke <net.sourceforge.plantuml.FileGroup: java.lang.String getNormalizedPath(java.io.File)>(r3);

        $r6 = r5.<net.sourceforge.plantuml.FileGroup: java.lang.String pattern>;

        $r7 = staticinvoke <net.sourceforge.plantuml.FileGroup: java.lang.String toRegexp(java.lang.String)>($r6);

        $z2 = virtualinvoke r4.<java.lang.String: boolean matches(java.lang.String)>($r7);

        if $z2 == 0 goto label3;

        specialinvoke r5.<net.sourceforge.plantuml.FileGroup: void addResultFile(java.io.File)>(r3);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public java.util.List getFiles()
    {
        net.sourceforge.plantuml.FileGroup r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.FileGroup;

        $r1 = r0.<net.sourceforge.plantuml.FileGroup: java.util.List result>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public static java.lang.String toRegexp(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String r4, r5, r6, r7, r8, r9, r10, r11;

        r4 := @parameter0: java.lang.String;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "\\.");

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("?", "[^/]");

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/**/", "(/|/.{0,}/)");

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("**", ".{0,}");

        r10 = virtualinvoke r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "[^/]{0,}");

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?i)^(\\./)?");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return r11;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1, $r2;

        $r0 = class "Lnet/sourceforge/plantuml/FileGroup;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.FileGroup: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^([^*?]*[/\\\\])?(.*)$");

        <net.sourceforge.plantuml.FileGroup: net.sourceforge.plantuml.command.regex.Pattern2 predirPath> = $r1;

        $r2 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^(?:([^*?]*)[/\\\\])?([^/\\\\]*)$");

        <net.sourceforge.plantuml.FileGroup: net.sourceforge.plantuml.command.regex.Pattern2 noStarInDirectory> = $r2;

        return;
    }
}
