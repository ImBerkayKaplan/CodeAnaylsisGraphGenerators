public class net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace;
    private net.sourceforge.plantuml.awt.geom.Dimension2D cacheDimension;
    private double ymin;
    private double ymax;

    public void <init>(net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r0;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace r1, $r3;
        java.lang.Object $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace) $r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace> = $r3;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r1, $r12;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace $r3, $r5, $r7, $r8, $r9;
        net.sourceforge.plantuml.real.Real $r4, $r6;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, d7;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces $r10;
        net.sourceforge.plantuml.Dimension2DDouble $r11;
        byte $b1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.awt.geom.Dimension2D cacheDimension>;

        if $r1 != null goto label3;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = interfaceinvoke $r4.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d2 = $d0 - $d1;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $z0 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: boolean isShowFootbox()>();

        if $z0 == 0 goto label1;

        $b1 = 2;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $d3 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d4 = (double) $b1;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        $d5 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d6 = $d4 * $d5;

        d7 = $d3 + $d6;

        $r11 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r11.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d2, d7);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.awt.geom.Dimension2D cacheDimension> = $r11;

     label3:
        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.awt.geom.Dimension2D cacheDimension>;

        return $r12;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r11, $r12, $r14, $r20, $r21, $r24, $r26, $r30;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.SimpleContext2D $r2;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r4;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace $r5, $r6, $r9, $r16, $r18, $r22, $r28;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces r7;
        byte $b0, $b1;
        net.sourceforge.plantuml.ugraphic.UClip $r8, $r17;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10, $r13, $r19, $r23, $r25, $r29;
        net.sourceforge.plantuml.graphic.VerticalAlignment $r15, $r27;
        boolean $z0;

        r4 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r2.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        $r5 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        d0 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r6 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces getLivingSpaces()>();

        d1 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymax>;

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r28 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r29 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d1);

        $r30 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r29);

        virtualinvoke $r28.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: void drawBackground(net.sourceforge.plantuml.ugraphic.UGraphic)>($r30);

        goto label2;

     label1:
        $r8 = new net.sourceforge.plantuml.ugraphic.UClip;

        $d7 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymin>;

        $d4 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymax>;

        $d3 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymin>;

        $d5 = $d4 - $d3;

        $d6 = $d5 + 1.0;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UClip: void <init>(double,double,double,double)>(-1000.0, $d7, 1.7976931348623157E308, $d6);

        $r9 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d1);

        $r11 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: void drawBackground(net.sourceforge.plantuml.ugraphic.UGraphic)>($r12);

     label2:
        $r13 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d1);

        $r14 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r13);

        virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: void drawLifeLines(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>($r14, d0, $r2);

        $r15 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment BOTTOM>;

        virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: void drawHeads(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.graphic.VerticalAlignment)>(r0, $r2, $r15);

        $r16 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $z0 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: boolean isShowFootbox()>();

        if $z0 == 0 goto label3;

        $d14 = d0 + d1;

        $r25 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d14);

        $r26 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r25);

        $r27 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment TOP>;

        virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces: void drawHeads(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.graphic.VerticalAlignment)>($r26, $r2, $r27);

     label3:
        $d8 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymax>;

        $b1 = $d8 cmpl 0.0;

        if $b1 != 0 goto label4;

        $r22 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r23 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d1);

        $r24 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r23);

        virtualinvoke $r22.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: void drawForeground(net.sourceforge.plantuml.ugraphic.UGraphic)>($r24);

        goto label5;

     label4:
        $r17 = new net.sourceforge.plantuml.ugraphic.UClip;

        $d13 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymin>;

        $d10 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymax>;

        $d9 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymin>;

        $d11 = $d10 - $d9;

        $d12 = $d11 + 1.0;

        specialinvoke $r17.<net.sourceforge.plantuml.ugraphic.UClip: void <init>(double,double,double,double)>(-1000.0, $d13, 1.7976931348623157E308, $d12);

        $r18 = r4.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r19 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d1);

        $r20 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r19);

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: void drawForeground(net.sourceforge.plantuml.ugraphic.UGraphic)>($r21);

     label5:
        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace $r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: net.sourceforge.plantuml.real.Real getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public int getNbPages()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r0;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: int getNbPages()>();

        return $i0;
    }

    public void setIndex(int)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r0;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace $r1;
        java.util.List r2;
        int i0, $i1;
        java.lang.Object $r3, $r5;
        java.lang.Double $r4, $r6;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List yNewPages()>();

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymin> = $d0;

        $i1 = i0 + 1;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (java.lang.Double) $r5;

        $d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: double ymax> = $d1;

        return;
    }

    private java.util.List yNewPages()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r0;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace $r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace playingSpace>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace: java.util.List yNewPages()>();

        return $r2;
    }

    private void drawNewPages(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.color.HColor $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants r1;
        java.util.List $r2;
        java.util.Iterator r3;
        java.lang.Object $r4;
        java.lang.Double r5;
        double $d0, $d1, $d2;
        byte $b0, $b1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;
        net.sourceforge.plantuml.ugraphic.UGraphic $r7, r9, r10;
        net.sourceforge.plantuml.ugraphic.ULine $r8;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor BLUE>;

        r10 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants: java.util.List yNewPages()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $d1 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $b1 = $d1 cmpl 1.7976931348623157E308;

        if $b1 != 0 goto label2;

        goto label1;

     label2:
        $d2 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        $r7 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(100.0);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        goto label1;

     label3:
        return;
    }
}
