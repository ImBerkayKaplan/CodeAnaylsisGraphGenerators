public class net.sourceforge.plantuml.svek.FrontierCalculator extends java.lang.Object
{
    private static final double DELTA;
    private net.sourceforge.plantuml.svek.ClusterPosition core;
    private final net.sourceforge.plantuml.svek.ClusterPosition initial;

    public void <init>(net.sourceforge.plantuml.svek.ClusterPosition, java.util.Collection, java.util.Collection)
    {
        net.sourceforge.plantuml.svek.FrontierCalculator r0;
        net.sourceforge.plantuml.svek.ClusterPosition r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r45, $r46, $r47, r49, $r57, $r60;
        java.util.Collection r2, r4;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6, z7, z8, z9, z10, z11, $z12;
        java.lang.Object $r13, $r19, $r35, $r40, $r44;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17;
        java.util.Iterator r48, r51, r53, r55, r58;
        java.awt.geom.Point2D r50, r52, r54, r56, r59;

        r0 := @this: net.sourceforge.plantuml.svek.FrontierCalculator;

        r1 := @parameter0: net.sourceforge.plantuml.svek.ClusterPosition;

        r2 := @parameter1: java.util.Collection;

        r4 := @parameter2: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition initial> = r1;

        r48 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r44 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (net.sourceforge.plantuml.svek.ClusterPosition) $r44;

        $r45 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        if $r45 != null goto label02;

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = r49;

        goto label03;

     label02:
        $r46 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r47 = virtualinvoke $r46.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition merge(net.sourceforge.plantuml.svek.ClusterPosition)>(r49);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r47;

     label03:
        goto label01;

     label04:
        $r3 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        if $r3 != null goto label05;

        r50 = virtualinvoke r1.<net.sourceforge.plantuml.svek.ClusterPosition: java.awt.geom.Point2D getPointCenter()>();

        $r43 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d44 = virtualinvoke r50.<java.awt.geom.Point2D: double getX()>();

        $d45 = $d44 - 1.0;

        $d46 = virtualinvoke r50.<java.awt.geom.Point2D: double getY()>();

        $d47 = $d46 - 1.0;

        $d48 = virtualinvoke r50.<java.awt.geom.Point2D: double getX()>();

        $d49 = $d48 + 1.0;

        $d50 = virtualinvoke r50.<java.awt.geom.Point2D: double getY()>();

        $d51 = $d50 + 1.0;

        specialinvoke $r43.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d45, $d47, $d49, $d51);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r43;

     label05:
        r51 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r40 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r52 = (java.awt.geom.Point2D) $r40;

        $r41 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r42 = virtualinvoke $r41.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition merge(java.awt.geom.Point2D)>(r52);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r42;

        goto label06;

     label07:
        z4 = 0;

        z5 = 0;

        z6 = 0;

        z7 = 0;

        r53 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r35 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.awt.geom.Point2D) $r35;

        $d36 = virtualinvoke r54.<java.awt.geom.Point2D: double getX()>();

        $r36 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d37 = virtualinvoke $r36.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $b12 = $d36 cmpl $d37;

        if $b12 != 0 goto label09;

        z4 = 1;

     label09:
        $d38 = virtualinvoke r54.<java.awt.geom.Point2D: double getX()>();

        $r37 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d39 = virtualinvoke $r37.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $b13 = $d38 cmpl $d39;

        if $b13 != 0 goto label10;

        z5 = 1;

     label10:
        $d40 = virtualinvoke r54.<java.awt.geom.Point2D: double getY()>();

        $r38 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d41 = virtualinvoke $r38.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinY()>();

        $b14 = $d40 cmpl $d41;

        if $b14 != 0 goto label11;

        z6 = 1;

     label11:
        $d42 = virtualinvoke r54.<java.awt.geom.Point2D: double getY()>();

        $r39 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d43 = virtualinvoke $r39.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxY()>();

        $b15 = $d42 cmpl $d43;

        if $b15 != 0 goto label12;

        z7 = 1;

     label12:
        goto label08;

     label13:
        if z4 != 0 goto label14;

        $r33 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d35 = virtualinvoke r1.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $r34 = virtualinvoke $r33.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition withMinX(double)>($d35);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r34;

     label14:
        if z5 != 0 goto label15;

        $r31 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d34 = virtualinvoke r1.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $r32 = virtualinvoke $r31.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition withMaxX(double)>($d34);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r32;

     label15:
        if z6 != 0 goto label16;

        $r29 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d33 = virtualinvoke r1.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinY()>();

        $r30 = virtualinvoke $r29.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition withMinY(double)>($d33);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r30;

     label16:
        if z7 != 0 goto label17;

        $r27 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d32 = virtualinvoke r1.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxY()>();

        $r28 = virtualinvoke $r27.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition withMaxY(double)>($d32);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r28;

     label17:
        z8 = 0;

        z9 = 0;

        z10 = 0;

        z11 = 0;

        r55 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label18:
        $z12 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label25;

        $r19 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r56 = (java.awt.geom.Point2D) $r19;

        $d10 = virtualinvoke r56.<java.awt.geom.Point2D: double getY()>();

        $r20 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d11 = virtualinvoke $r20.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinY()>();

        $b5 = $d10 cmpl $d11;

        if $b5 == 0 goto label19;

        $d30 = virtualinvoke r56.<java.awt.geom.Point2D: double getY()>();

        $r26 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d31 = virtualinvoke $r26.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxY()>();

        $b11 = $d30 cmpl $d31;

        if $b11 != 0 goto label21;

     label19:
        $d12 = virtualinvoke r56.<java.awt.geom.Point2D: double getX()>();

        $r21 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d13 = virtualinvoke $r21.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $d14 = $d12 - $d13;

        $d15 = staticinvoke <java.lang.Math: double abs(double)>($d14);

        $b6 = $d15 cmpg 18.0;

        if $b6 >= 0 goto label20;

        z9 = 1;

     label20:
        $d16 = virtualinvoke r56.<java.awt.geom.Point2D: double getX()>();

        $r22 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d17 = virtualinvoke $r22.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $d18 = $d16 - $d17;

        $d19 = staticinvoke <java.lang.Math: double abs(double)>($d18);

        $b7 = $d19 cmpg 18.0;

        if $b7 >= 0 goto label21;

        z8 = 1;

     label21:
        $d52 = virtualinvoke r56.<java.awt.geom.Point2D: double getX()>();

        $r57 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d53 = virtualinvoke $r57.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $b16 = $d52 cmpl $d53;

        if $b16 == 0 goto label22;

        $d28 = virtualinvoke r56.<java.awt.geom.Point2D: double getX()>();

        $r25 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d29 = virtualinvoke $r25.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $b10 = $d28 cmpl $d29;

        if $b10 != 0 goto label24;

     label22:
        $d20 = virtualinvoke r56.<java.awt.geom.Point2D: double getY()>();

        $r23 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d21 = virtualinvoke $r23.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxY()>();

        $d22 = $d20 - $d21;

        $d23 = staticinvoke <java.lang.Math: double abs(double)>($d22);

        $b8 = $d23 cmpg 18.0;

        if $b8 >= 0 goto label23;

        z11 = 1;

     label23:
        $d24 = virtualinvoke r56.<java.awt.geom.Point2D: double getY()>();

        $r24 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d25 = virtualinvoke $r24.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinY()>();

        $d26 = $d24 - $d25;

        $d27 = staticinvoke <java.lang.Math: double abs(double)>($d26);

        $b9 = $d27 cmpg 18.0;

        if $b9 >= 0 goto label24;

        z10 = 1;

     label24:
        goto label18;

     label25:
        r58 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label26:
        $z2 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label31;

        $r13 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (java.awt.geom.Point2D) $r13;

        $d0 = virtualinvoke r59.<java.awt.geom.Point2D: double getY()>();

        $r14 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d1 = virtualinvoke $r14.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinY()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label28;

        $d6 = virtualinvoke r59.<java.awt.geom.Point2D: double getX()>();

        $r17 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d7 = virtualinvoke $r17.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $b3 = $d6 cmpl $d7;

        if $b3 == 0 goto label27;

        $d8 = virtualinvoke r59.<java.awt.geom.Point2D: double getX()>();

        $r18 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d9 = virtualinvoke $r18.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $b4 = $d8 cmpl $d9;

        if $b4 != 0 goto label28;

     label27:
        z10 = 0;

     label28:
        $d54 = virtualinvoke r59.<java.awt.geom.Point2D: double getY()>();

        $r60 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d55 = virtualinvoke $r60.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxY()>();

        $b17 = $d54 cmpl $d55;

        if $b17 != 0 goto label30;

        $d2 = virtualinvoke r59.<java.awt.geom.Point2D: double getX()>();

        $r15 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d3 = virtualinvoke $r15.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $b1 = $d2 cmpl $d3;

        if $b1 == 0 goto label29;

        $d4 = virtualinvoke r59.<java.awt.geom.Point2D: double getX()>();

        $r16 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d5 = virtualinvoke $r16.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $b2 = $d4 cmpl $d5;

        if $b2 != 0 goto label30;

     label29:
        z11 = 0;

     label30:
        goto label26;

     label31:
        if z9 == 0 goto label32;

        $r11 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition addMaxX(double)>(18.0);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r12;

     label32:
        if z8 == 0 goto label33;

        $r9 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition addMinX(double)>(-18.0);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r10;

     label33:
        if z11 == 0 goto label34;

        $r7 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition addMaxY(double)>(18.0);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r8;

     label34:
        if z10 == 0 goto label35;

        $r5 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition addMinY(double)>(-18.0);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r6;

     label35:
        return;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition getSuggestedPosition()
    {
        net.sourceforge.plantuml.svek.FrontierCalculator r0;
        net.sourceforge.plantuml.svek.ClusterPosition $r1;

        r0 := @this: net.sourceforge.plantuml.svek.FrontierCalculator;

        $r1 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        return $r1;
    }

    public void ensureMinWidth(double)
    {
        net.sourceforge.plantuml.svek.FrontierCalculator r0;
        net.sourceforge.plantuml.svek.ClusterPosition $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        double $d0, $d1, d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d12;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.svek.FrontierCalculator;

        d2 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $r2 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d1 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $d3 = $d0 - $d1;

        d4 = $d3 - d2;

        $b0 = d4 cmpg 0.0;

        if $b0 >= 0 goto label2;

        $r3 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d5 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        $d6 = d4 / 2.0;

        d11 = $d5 + $d6;

        $r4 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $d7 = virtualinvoke $r4.<net.sourceforge.plantuml.svek.ClusterPosition: double getMaxX()>();

        $d8 = d4 / 2.0;

        d12 = $d7 - $d8;

        $r5 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition initial>;

        $d9 = virtualinvoke $r5.<net.sourceforge.plantuml.svek.ClusterPosition: double getMinX()>();

        d10 = d11 - $d9;

        $b1 = d10 cmpg 0.0;

        if $b1 >= 0 goto label1;

        d11 = d11 - d10;

        d12 = d12 - d10;

     label1:
        $r6 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition withMinX(double)>(d11);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r7;

        $r8 = r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.ClusterPosition withMaxX(double)>(d12);

        r0.<net.sourceforge.plantuml.svek.FrontierCalculator: net.sourceforge.plantuml.svek.ClusterPosition core> = $r9;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.FrontierCalculator: double DELTA> = 18.0;

        return;
    }
}
