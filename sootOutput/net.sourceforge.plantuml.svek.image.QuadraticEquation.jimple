public class net.sourceforge.plantuml.svek.image.QuadraticEquation extends java.lang.Object
{
    private final double a;
    private final double b;
    private final double c;

    public void <init>(double, double, double)
    {
        net.sourceforge.plantuml.svek.image.QuadraticEquation r0;
        double d0, d1, d2;

        r0 := @this: net.sourceforge.plantuml.svek.image.QuadraticEquation;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double a> = d0;

        r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double b> = d1;

        r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double c> = d2;

        return;
    }

    public double[] solve()
    {
        net.sourceforge.plantuml.svek.image.QuadraticEquation r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, d21;
        double[] $r1;

        r0 := @this: net.sourceforge.plantuml.svek.image.QuadraticEquation;

        $d1 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double b>;

        $d0 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double b>;

        $d6 = $d1 * $d0;

        $d2 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double a>;

        $d4 = 4.0 * $d2;

        $d3 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double c>;

        $d5 = $d4 * $d3;

        d7 = $d6 - $d5;

        $d8 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double b>;

        $d9 = neg $d8;

        $d10 = staticinvoke <java.lang.Math: double sqrt(double)>(d7);

        $d11 = $d9 - $d10;

        $d13 = $d11 / 2.0;

        $d12 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double a>;

        d14 = $d13 / $d12;

        $d15 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double b>;

        $d16 = neg $d15;

        $d17 = staticinvoke <java.lang.Math: double sqrt(double)>(d7);

        $d18 = $d16 + $d17;

        $d20 = $d18 / 2.0;

        $d19 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double a>;

        d21 = $d20 / $d19;

        $r1 = newarray (double)[2];

        $r1[0] = d14;

        $r1[1] = d21;

        return $r1;
    }

    public double getV(double)
    {
        net.sourceforge.plantuml.svek.image.QuadraticEquation r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: net.sourceforge.plantuml.svek.image.QuadraticEquation;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double a>;

        $d2 = $d1 * d0;

        $d5 = $d2 * d0;

        $d3 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double b>;

        $d4 = $d3 * d0;

        $d7 = $d5 + $d4;

        $d6 = r0.<net.sourceforge.plantuml.svek.image.QuadraticEquation: double c>;

        $d8 = $d7 + $d6;

        return $d8;
    }
}
