public class net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer extends java.lang.Object
{
    private double y1;
    private net.sourceforge.plantuml.graphic.SymbolContext symbolContext;
    private final net.sourceforge.plantuml.skin.Component cross;
    private final net.sourceforge.plantuml.skin.Context2D context;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.skin.Component compForWidth;
    private final java.util.Collection delays;

    public void <init>(net.sourceforge.plantuml.skin.Context2D, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, java.util.Map)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer r0;
        net.sourceforge.plantuml.skin.rose.Rose r1;
        net.sourceforge.plantuml.style.Style[] $r2, $r10;
        net.sourceforge.plantuml.skin.ComponentType $r3, $r8, $r11, $r15;
        net.sourceforge.plantuml.style.StyleSignature $r4, $r12;
        net.sourceforge.plantuml.ISkinParam r5;
        net.sourceforge.plantuml.style.StyleBuilder $r6, $r13;
        net.sourceforge.plantuml.style.Style $r7, $r14;
        net.sourceforge.plantuml.skin.Component $r9, $r16;
        net.sourceforge.plantuml.skin.Context2D r17;
        java.util.HashSet $r18;
        java.util.Map r19;
        java.util.Set $r20;
        java.util.Iterator r21;
        boolean $z0;
        java.lang.Object $r22, $r26, $r28, $r30;
        java.util.Map$Entry r23;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r24;
        java.util.Collection $r25;
        java.lang.Double $r27, $r29, $r31;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        r17 := @parameter0: net.sourceforge.plantuml.skin.Context2D;

        r1 := @parameter1: net.sourceforge.plantuml.skin.rose.Rose;

        r5 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r19 := @parameter3: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r3 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DESTROY>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r7 = virtualinvoke $r4.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r6);

        $r2[0] = $r7;

        $r8 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DESTROY>;

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r2, $r8, null, r5, null);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Component cross> = $r9;

        $r10 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r11 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_CLOSE>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r13 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r14 = virtualinvoke $r12.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r13);

        $r10[0] = $r14;

        $r15 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_CLOSE>;

        $r16 = virtualinvoke r1.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r10, $r15, null, r5, null);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Component compForWidth> = $r16;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Context2D context> = r17;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.rose.Rose skin> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.ISkinParam skinParam> = r5;

        $r18 = new java.util.HashSet;

        specialinvoke $r18.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: java.util.Collection delays> = $r18;

        $r20 = interfaceinvoke r19.<java.util.Map: java.util.Set entrySet()>();

        r21 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r22 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r22;

        $r25 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: java.util.Collection delays>;

        $r24 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $r26 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r27 = (java.lang.Double) $r26;

        $d0 = virtualinvoke $r27.<java.lang.Double: double doubleValue()>();

        $r28 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r29 = (java.lang.Double) $r28;

        $d1 = virtualinvoke $r29.<java.lang.Double: double doubleValue()>();

        $r30 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r31 = (java.lang.Double) $r30;

        $d2 = virtualinvoke $r31.<java.lang.Double: double doubleValue()>();

        $d3 = $d1 + $d2;

        specialinvoke $r24.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: void <init>(double,double)>($d0, $d3);

        interfaceinvoke $r25.<java.util.Collection: boolean add(java.lang.Object)>($r24);

        goto label1;

     label2:
        return;
    }

    public double getWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Component compForWidth>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public void addStart(double, net.sourceforge.plantuml.graphic.SymbolContext)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer r0;
        double d0;
        net.sourceforge.plantuml.graphic.SymbolContext r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.SymbolContext;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: double y1> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.graphic.SymbolContext symbolContext> = r1;

        return;
    }

    public void doDrawing(net.sourceforge.plantuml.ugraphic.UGraphic, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r0, r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer r1;
        double d0, $d1, $d2, $d3;
        java.util.Collection $r3, r4;
        int $i0;
        java.util.Iterator r5;
        java.lang.Object $r6;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.UGraphic r8;
        net.sourceforge.plantuml.skin.ComponentType $r9, r10;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        $d1 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: double y1>;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: void <init>(double,double)>($d1, d0);

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: java.util.Collection delays>;

        r4 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: java.util.Collection cutSegmentIfNeed(java.util.Collection)>($r3);

        r10 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_CLOSE>;

        $i0 = interfaceinvoke r4.<java.util.Collection: int size()>();

        if $i0 <= 1 goto label1;

        r10 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_OPEN>;

     label1:
        r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.Segment) $r6;

        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r9 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_CLOSE>;

        if r10 == $r9 goto label3;

        r10 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_OPEN_CLOSE>;

     label3:
        $d2 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        $d3 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos2()>();

        specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.skin.ComponentType)>(r8, $d2, $d3, r10);

        r10 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_OPEN_OPEN>;

        goto label2;

     label4:
        r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: double y1> = 1.7976931348623157E308;

        return;
    }

    public void drawDestroyIfNeeded(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.sequencediagram.teoz.Step)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Step r0;
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r8;
        net.sourceforge.plantuml.skin.Component $r3, $r7;
        net.sourceforge.plantuml.graphic.StringBounder $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        net.sourceforge.plantuml.skin.Context2D $r9;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.Step;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Step: boolean isDestroy()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Component cross>;

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r5 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Component cross>;

        $r6 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = neg $d0;

        $d2 = $d1 / 2.0;

        $d3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Step: double getValue()>();

        $d4 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = $d4 / 2.0;

        $d6 = $d3 - $d5;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d2, $d6);

        $r8 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r9 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Context2D context>;

        interfaceinvoke $r7.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r8, null, $r9);

     label1:
        return;
    }

    private void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, net.sourceforge.plantuml.skin.ComponentType)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r25;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        double d0, d1, d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.skin.Area $r3;
        net.sourceforge.plantuml.SkinParamBackcolored $r5;
        net.sourceforge.plantuml.graphic.SymbolContext $r6, $r7, $r14, $r16, $r17;
        net.sourceforge.plantuml.ISkinParam $r8, $r12;
        net.sourceforge.plantuml.skin.ComponentType r10;
        net.sourceforge.plantuml.style.StyleSignature $r11;
        net.sourceforge.plantuml.style.StyleBuilder $r13;
        net.sourceforge.plantuml.skin.Component r15;
        net.sourceforge.plantuml.ColorParam $r18;
        net.sourceforge.plantuml.ugraphic.color.HColor $r19, $r20;
        net.sourceforge.plantuml.style.Style r21;
        net.sourceforge.plantuml.skin.rose.Rose $r22;
        net.sourceforge.plantuml.style.Style[] $r23;
        net.sourceforge.plantuml.ugraphic.UTranslate $r24;
        net.sourceforge.plantuml.skin.Context2D $r26;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        r10 := @parameter3: net.sourceforge.plantuml.skin.ComponentType;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $r3 = new net.sourceforge.plantuml.skin.Area;

        $d3 = d1 - d2;

        specialinvoke $r3.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>(d0, $d3);

        $r5 = new net.sourceforge.plantuml.SkinParamBackcolored;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        if $r6 != null goto label1;

        $r20 = null;

        goto label2;

     label1:
        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $r20 = virtualinvoke $r7.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

     label2:
        specialinvoke $r5.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor)>($r8, $r20);

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r21 = virtualinvoke $r11.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r13);

        if r21 != null goto label3;

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        if $r16 == null goto label4;

        $r18 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam sequenceLifeLineBorder>;

        $r17 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        $r19 = virtualinvoke $r17.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.color.HColor getForeColor()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.SkinParamBackcolored: void forceColor(net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.ugraphic.color.HColor)>($r18, $r19);

        goto label4;

     label3:
        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.graphic.SymbolContext symbolContext>;

        r21 = virtualinvoke r21.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.graphic.SymbolContext)>($r14);

     label4:
        $r22 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r23 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r23[0] = r21;

        r15 = virtualinvoke $r22.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r23, r10, null, $r5, null);

        $r24 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = neg d0;

        $d5 = $d4 / 2.0;

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d5, d2);

        $r25 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        $r26 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: net.sourceforge.plantuml.skin.Context2D context>;

        interfaceinvoke r15.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r25, $r3, $r26);

        return;
    }
}
