class net.sourceforge.plantuml.real.RealMax extends net.sourceforge.plantuml.real.AbstractReal implements net.sourceforge.plantuml.real.Real
{
    private final java.util.List all;
    private final java.lang.Throwable creationPoint;

    void <init>(java.util.Collection)
    {
        net.sourceforge.plantuml.real.RealMax r0;
        java.util.Collection r1;
        net.sourceforge.plantuml.real.RealLine $r2;
        java.util.ArrayList $r3;
        java.util.List $r4;
        java.lang.Throwable $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.real.RealMax;

        r1 := @parameter0: java.util.Collection;

        $r2 = staticinvoke <net.sourceforge.plantuml.real.RealMax: net.sourceforge.plantuml.real.RealLine line(java.util.Collection)>(r1);

        specialinvoke r0.<net.sourceforge.plantuml.real.AbstractReal: void <init>(net.sourceforge.plantuml.real.RealLine)>($r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.real.RealMax: java.util.List all> = $r3;

        $r4 = r0.<net.sourceforge.plantuml.real.RealMax: java.util.List all>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        $r5 = new java.lang.Throwable;

        specialinvoke $r5.<java.lang.Throwable: void <init>()>();

        r0.<net.sourceforge.plantuml.real.RealMax: java.lang.Throwable creationPoint> = $r5;

        $r6 = r0.<net.sourceforge.plantuml.real.RealMax: java.lang.Throwable creationPoint>;

        virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    static net.sourceforge.plantuml.real.RealLine line(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.real.AbstractReal $r3;
        net.sourceforge.plantuml.real.RealLine $r4;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (net.sourceforge.plantuml.real.AbstractReal) $r2;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.real.AbstractReal: net.sourceforge.plantuml.real.RealLine getLine()>();

        return $r4;
    }

    public java.lang.String getName()
    {
        java.lang.StringBuilder $r0, $r1, $r4;
        net.sourceforge.plantuml.real.RealMax r2;
        java.util.List $r3;
        java.lang.String $r5;

        r2 := @this: net.sourceforge.plantuml.real.RealMax;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max ");

        $r3 = r2.<net.sourceforge.plantuml.real.RealMax: java.util.List all>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    double getCurrentValueInternal()
    {
        net.sourceforge.plantuml.real.RealMax r0;
        java.util.List $r1, $r4, $r9;
        java.lang.Object $r2, $r10;
        net.sourceforge.plantuml.real.Real $r3, $r11;
        int $i0, i1, i3;
        java.lang.Throwable $r5;
        java.lang.StackTraceElement[] $r8;
        double d0, d1;
        byte $b2;
        java.lang.StringBuilder $r12, $r14, $r16;
        java.io.PrintStream $r13, $r18;
        java.lang.String $r15, $r17;
        java.lang.IllegalStateException $r19;

        r0 := @this: net.sourceforge.plantuml.real.RealMax;

        $r1 = r0.<net.sourceforge.plantuml.real.RealMax: java.util.List all>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (net.sourceforge.plantuml.real.Real) $r2;

        d1 = interfaceinvoke $r3.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        i3 = 1;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.real.RealMax: java.util.List all>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r5 = new java.lang.Throwable;

        specialinvoke $r5.<java.lang.Throwable: void <init>()>();

        virtualinvoke $r5.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r8 = virtualinvoke $r5.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i1 = lengthof $r8;

        if i1 <= 1000 goto label2;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The faulty RealMax ");

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.real.RealMax: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r17);

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("has been created here:");

        virtualinvoke r0.<net.sourceforge.plantuml.real.RealMax: void printCreationStackTrace()>();

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Infinite recursion?");

        throw $r19;

     label2:
        $r9 = r0.<net.sourceforge.plantuml.real.RealMax: java.util.List all>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i3);

        $r11 = (net.sourceforge.plantuml.real.Real) $r10;

        d0 = interfaceinvoke $r11.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $b2 = d0 cmpl d1;

        if $b2 <= 0 goto label3;

        d1 = d0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return d1;
    }

    public net.sourceforge.plantuml.real.Real addFixed(double)
    {
        net.sourceforge.plantuml.real.RealDelta $r0;
        net.sourceforge.plantuml.real.RealMax r1;
        double d0;

        r1 := @this: net.sourceforge.plantuml.real.RealMax;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.real.RealDelta;

        specialinvoke $r0.<net.sourceforge.plantuml.real.RealDelta: void <init>(net.sourceforge.plantuml.real.Real,double)>(r1, d0);

        return $r0;
    }

    public net.sourceforge.plantuml.real.Real addAtLeast(double)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.real.RealMax r1;
        double d0;

        r1 := @this: net.sourceforge.plantuml.real.RealMax;

        d0 := @parameter0: double;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void ensureBiggerThan(net.sourceforge.plantuml.real.Real)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.real.RealMax r1;
        net.sourceforge.plantuml.real.Real r2;

        r1 := @this: net.sourceforge.plantuml.real.RealMax;

        r2 := @parameter0: net.sourceforge.plantuml.real.Real;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void printCreationStackTrace()
    {
        net.sourceforge.plantuml.real.RealMax r0;
        java.lang.Throwable $r1;

        r0 := @this: net.sourceforge.plantuml.real.RealMax;

        $r1 = r0.<net.sourceforge.plantuml.real.RealMax: java.lang.Throwable creationPoint>;

        virtualinvoke $r1.<java.lang.Throwable: void printStackTrace()>();

        return;
    }
}
