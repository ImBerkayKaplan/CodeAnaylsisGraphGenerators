public final class net.sourceforge.plantuml.command.CommandFactorySprite extends java.lang.Object implements net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand
{

    public void <init>()
    {
        net.sourceforge.plantuml.command.CommandFactorySprite r0;

        r0 := @this: net.sourceforge.plantuml.command.CommandFactorySprite;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17;
        net.sourceforge.plantuml.command.regex.RegexOptional $r13;
        net.sourceforge.plantuml.command.regex.RegexConcat $r18;
        net.sourceforge.plantuml.command.CommandFactorySprite r19;

        r19 := @this: net.sourceforge.plantuml.command.CommandFactorySprite;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/CommandFactorySprite;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("multi");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[10];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("sprite");

        $r6[1] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[2] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\$?");

        $r6[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("NAME", "([-.%pLN_]+)");

        $r6[4] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[5] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DIM", "\\[(\\d+)x(\\d+)/(?:(\\d+)(z)?|(color))\\]");

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r14);

        $r6[6] = $r13;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[7] = $r15;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\{");

        $r6[8] = $r16;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[9] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r18;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17;
        net.sourceforge.plantuml.command.regex.RegexOptional $r13;
        net.sourceforge.plantuml.command.regex.RegexConcat $r18;
        net.sourceforge.plantuml.command.CommandFactorySprite r19;

        r19 := @this: net.sourceforge.plantuml.command.CommandFactorySprite;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/CommandFactorySprite;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("single");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[10];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("sprite");

        $r6[1] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[2] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\$?");

        $r6[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("NAME", "([-.%pLN_]+)");

        $r6[4] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[5] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DIM", "\\[(\\d+)x(\\d+)/(?:(\\d+)(z)|(color))\\]");

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r14);

        $r6[6] = $r13;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[7] = $r15;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DATA", "([-_A-Za-z0-9]+)");

        $r6[8] = $r16;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[9] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r18;
    }

    public net.sourceforge.plantuml.command.Command createSingleLine()
    {
        net.sourceforge.plantuml.command.CommandFactorySprite$1 $r0;
        net.sourceforge.plantuml.command.CommandFactorySprite r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;

        r1 := @this: net.sourceforge.plantuml.command.CommandFactorySprite;

        $r0 = new net.sourceforge.plantuml.command.CommandFactorySprite$1;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.CommandFactorySprite: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()>();

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandFactorySprite$1: void <init>(net.sourceforge.plantuml.command.CommandFactorySprite,net.sourceforge.plantuml.command.regex.IRegex)>(r1, $r2);

        return $r0;
    }

    public net.sourceforge.plantuml.command.Command createMultiLine(boolean)
    {
        net.sourceforge.plantuml.command.CommandFactorySprite$2 $r0;
        net.sourceforge.plantuml.command.CommandFactorySprite r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;
        net.sourceforge.plantuml.command.MultilinesStrategy $r3;
        boolean z0;

        r1 := @this: net.sourceforge.plantuml.command.CommandFactorySprite;

        z0 := @parameter0: boolean;

        $r0 = new net.sourceforge.plantuml.command.CommandFactorySprite$2;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.CommandFactorySprite: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()>();

        $r3 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy REMOVE_STARTING_QUOTE>;

        specialinvoke $r0.<net.sourceforge.plantuml.command.CommandFactorySprite$2: void <init>(net.sourceforge.plantuml.command.CommandFactorySprite,net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>(r1, $r2, $r3);

        return $r0;
    }

    private net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.WithSprite, net.sourceforge.plantuml.command.regex.RegexResult, java.util.List)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, $r2, $r3, $r4, $r7, $r10, $r15, $r16;
        int i0, i1, i2;
        java.util.List r5;
        net.sourceforge.plantuml.WithSprite r6;
        net.sourceforge.plantuml.sprite.SpriteGrayLevel r8, $r13;
        net.sourceforge.plantuml.command.CommandFactorySprite r9;
        net.sourceforge.plantuml.command.CommandExecutionResult $r11, $r12, $r17;
        net.sourceforge.plantuml.sprite.Sprite r14;

        r9 := @this: net.sourceforge.plantuml.command.CommandFactorySprite;

        r6 := @parameter0: net.sourceforge.plantuml.WithSprite;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r5 := @parameter2: java.util.List;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIM", 0);

        if $r1 != null goto label1;

        $r13 = <net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.SpriteGrayLevel GRAY_16>;

        r14 = virtualinvoke $r13.<net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.Sprite buildSprite(int,int,java.util.List)>(-1, -1, r5);

        goto label6;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIM", 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIM", 1);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIM", 4);

        if $r4 != null goto label5;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIM", 2);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        if i2 == 4 goto label2;

        if i2 == 8 goto label2;

        if i2 == 16 goto label2;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Only 4, 8 or 16 graylevel are allowed.");

        return $r12;

     label2:
        r8 = staticinvoke <net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.SpriteGrayLevel get(int)>(i2);

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIM", 3);

        if $r15 != null goto label3;

        r14 = virtualinvoke r8.<net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.Sprite buildSprite(int,int,java.util.List)>(i0, i1, r5);

        goto label4;

     label3:
        $r10 = specialinvoke r9.<net.sourceforge.plantuml.command.CommandFactorySprite: java.lang.String concat(java.util.List)>(r5);

        r14 = virtualinvoke r8.<net.sourceforge.plantuml.sprite.SpriteGrayLevel: net.sourceforge.plantuml.sprite.Sprite buildSpriteZ(int,int,java.lang.String)>(i0, i1, $r10);

        if r14 != null goto label4;

        $r11 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Cannot decode sprite.");

        return $r11;

     label4:
        goto label6;

     label5:
        r14 = staticinvoke <net.sourceforge.plantuml.sprite.SpriteColorBuilder4096: net.sourceforge.plantuml.sprite.Sprite buildSprite(java.util.List)>(r5);

     label6:
        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("NAME", 0);

        interfaceinvoke r6.<net.sourceforge.plantuml.WithSprite: void addSprite(java.lang.String,net.sourceforge.plantuml.sprite.Sprite)>($r16, r14);

        $r17 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r17;
    }

    private java.lang.String concat(java.util.List)
    {
        java.lang.StringBuilder $r0;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.String $r4, r6, $r7;
        java.lang.Object $r5;
        net.sourceforge.plantuml.command.CommandFactorySprite r9;

        r9 := @this: net.sourceforge.plantuml.command.CommandFactorySprite;

        r2 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static net.sourceforge.plantuml.command.CommandExecutionResult access$000(net.sourceforge.plantuml.command.CommandFactorySprite, net.sourceforge.plantuml.WithSprite, net.sourceforge.plantuml.command.regex.RegexResult, java.util.List)
    {
        net.sourceforge.plantuml.command.CommandFactorySprite r0;
        net.sourceforge.plantuml.WithSprite r1;
        net.sourceforge.plantuml.command.regex.RegexResult r2;
        java.util.List r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @parameter0: net.sourceforge.plantuml.command.CommandFactorySprite;

        r1 := @parameter1: net.sourceforge.plantuml.WithSprite;

        r2 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter3: java.util.List;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.command.CommandFactorySprite: net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.WithSprite,net.sourceforge.plantuml.command.regex.RegexResult,java.util.List)>(r1, r2, r3);

        return $r4;
    }
}
