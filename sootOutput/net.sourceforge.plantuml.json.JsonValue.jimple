public abstract class net.sourceforge.plantuml.json.JsonValue extends java.lang.Object implements java.io.Serializable
{
    public static final net.sourceforge.plantuml.json.JsonValue TRUE;
    public static final net.sourceforge.plantuml.json.JsonValue FALSE;
    public static final net.sourceforge.plantuml.json.JsonValue NULL;

    void <init>()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.json.JsonValue readFrom(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        net.sourceforge.plantuml.json.JsonValue $r1;

        r0 := @parameter0: java.io.Reader;

        $r1 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue parse(java.io.Reader)>(r0);

        return $r1;
    }

    public static net.sourceforge.plantuml.json.JsonValue readFrom(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.json.JsonValue $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue parse(java.lang.String)>(r0);

        return $r1;
    }

    public static net.sourceforge.plantuml.json.JsonValue valueOf(int)
    {
        int i0;
        net.sourceforge.plantuml.json.JsonValue $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(int)>(i0);

        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonValue valueOf(long)
    {
        long l0;
        net.sourceforge.plantuml.json.JsonValue $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(long)>(l0);

        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonValue valueOf(float)
    {
        float f0;
        net.sourceforge.plantuml.json.JsonValue $r0;

        f0 := @parameter0: float;

        $r0 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(float)>(f0);

        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonValue valueOf(double)
    {
        double d0;
        net.sourceforge.plantuml.json.JsonValue $r0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(double)>(d0);

        return $r0;
    }

    public static net.sourceforge.plantuml.json.JsonValue valueOf(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.json.JsonValue $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(java.lang.String)>(r0);

        return $r1;
    }

    public static net.sourceforge.plantuml.json.JsonValue valueOf(boolean)
    {
        boolean z0;
        net.sourceforge.plantuml.json.JsonValue $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(boolean)>(z0);

        return $r0;
    }

    public boolean isObject()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public boolean isArray()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public boolean isNumber()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public boolean isString()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public boolean isBoolean()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public boolean isTrue()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public boolean isFalse()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public boolean isNull()
    {
        net.sourceforge.plantuml.json.JsonValue r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        return 0;
    }

    public net.sourceforge.plantuml.json.JsonObject asObject()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an object: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public net.sourceforge.plantuml.json.JsonArray asArray()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an array: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public int asInt()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public long asLong()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public float asFloat()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public double asDouble()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public java.lang.String asString()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public boolean asBoolean()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        net.sourceforge.plantuml.json.JsonValue r3;
        java.lang.String $r4, $r6;

        r3 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a boolean: ");

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public void writeTo(java.io.Writer) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonValue r0;
        java.io.Writer r1;
        net.sourceforge.plantuml.json.WriterConfig $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        r1 := @parameter0: java.io.Writer;

        $r2 = <net.sourceforge.plantuml.json.WriterConfig: net.sourceforge.plantuml.json.WriterConfig MINIMAL>;

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: void writeTo(java.io.Writer,net.sourceforge.plantuml.json.WriterConfig)>(r1, $r2);

        return;
    }

    public void writeTo(java.io.Writer, net.sourceforge.plantuml.json.WriterConfig) throws java.io.IOException
    {
        java.io.Writer r0;
        net.sourceforge.plantuml.json.WriterConfig r1;
        net.sourceforge.plantuml.json.WritingBuffer $r2;
        net.sourceforge.plantuml.json.JsonValue r4;
        net.sourceforge.plantuml.json.JsonWriter $r5;
        java.lang.NullPointerException $r6, $r7;

        r4 := @this: net.sourceforge.plantuml.json.JsonValue;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: net.sourceforge.plantuml.json.WriterConfig;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("writer is null");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("config is null");

        throw $r6;

     label2:
        $r2 = new net.sourceforge.plantuml.json.WritingBuffer;

        specialinvoke $r2.<net.sourceforge.plantuml.json.WritingBuffer: void <init>(java.io.Writer,int)>(r0, 128);

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.json.WriterConfig: net.sourceforge.plantuml.json.JsonWriter createWriter(java.io.Writer)>($r2);

        virtualinvoke r4.<net.sourceforge.plantuml.json.JsonValue: void write(net.sourceforge.plantuml.json.JsonWriter)>($r5);

        virtualinvoke $r2.<net.sourceforge.plantuml.json.WritingBuffer: void flush()>();

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.json.JsonValue r0;
        net.sourceforge.plantuml.json.WriterConfig $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        $r1 = <net.sourceforge.plantuml.json.WriterConfig: net.sourceforge.plantuml.json.WriterConfig MINIMAL>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString(net.sourceforge.plantuml.json.WriterConfig)>($r1);

        return $r2;
    }

    public java.lang.String toString(net.sourceforge.plantuml.json.WriterConfig)
    {
        java.io.StringWriter $r0;
        net.sourceforge.plantuml.json.JsonValue r2;
        net.sourceforge.plantuml.json.WriterConfig r3;
        java.lang.String $r4;
        java.io.IOException $r5;
        java.lang.RuntimeException $r7;

        r2 := @this: net.sourceforge.plantuml.json.JsonValue;

        r3 := @parameter0: net.sourceforge.plantuml.json.WriterConfig;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r2.<net.sourceforge.plantuml.json.JsonValue: void writeTo(java.io.Writer,net.sourceforge.plantuml.json.WriterConfig)>($r0, r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r7;

     label4:
        $r4 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        net.sourceforge.plantuml.json.JsonValue r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.json.JsonValue r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.json.JsonValue;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    abstract void write(net.sourceforge.plantuml.json.JsonWriter) throws java.io.IOException;

    static void <clinit>()
    {
        net.sourceforge.plantuml.json.JsonLiteral $r0, $r1, $r2;

        $r0 = new net.sourceforge.plantuml.json.JsonLiteral;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonLiteral: void <init>(java.lang.String)>("true");

        <net.sourceforge.plantuml.json.JsonValue: net.sourceforge.plantuml.json.JsonValue TRUE> = $r0;

        $r1 = new net.sourceforge.plantuml.json.JsonLiteral;

        specialinvoke $r1.<net.sourceforge.plantuml.json.JsonLiteral: void <init>(java.lang.String)>("false");

        <net.sourceforge.plantuml.json.JsonValue: net.sourceforge.plantuml.json.JsonValue FALSE> = $r1;

        $r2 = new net.sourceforge.plantuml.json.JsonLiteral;

        specialinvoke $r2.<net.sourceforge.plantuml.json.JsonLiteral: void <init>(java.lang.String)>("null");

        <net.sourceforge.plantuml.json.JsonValue: net.sourceforge.plantuml.json.JsonValue NULL> = $r2;

        return;
    }
}
