public class net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree extends java.lang.Object
{
    final int depth;
    final int fanout;
    final int leaf_length;
    final int inner_length;
    final int digest_length;

    public void <init>(int, int, int, int, int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree r0;
        int i0, i1, i2, i3, i4;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int fanout> = i0;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int depth> = i1;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int leaf_length> = i2;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int inner_length> = i3;

        r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int digest_length> = i4;

        return;
    }

    private net.sourceforge.plantuml.argon2.blake2.Blake2b$Param treeParam()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r0, $r2, $r3, $r4, $r5;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree r1;
        int $i0, $i1, $i2, $i3;

        r1 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree;

        $r0 = new net.sourceforge.plantuml.argon2.blake2.Blake2b$Param;

        specialinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: void <init>()>();

        $i0 = r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int depth>;

        $r2 = virtualinvoke $r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDepth(int)>($i0);

        $i1 = r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int fanout>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setFanout(int)>($i1);

        $i2 = r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int leaf_length>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setLeafLength(int)>($i2);

        $i3 = r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int inner_length>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setInnerLength(int)>($i3);

        return $r5;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest getNode(int, int)
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree r0;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r1, $r2, $r3, r4;
        int i0, i1, $i3;
        long $l2;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest $r5;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param treeParam()>();

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setNodeDepth(int)>(i0);

        $l2 = (long) i1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setNodeOffset(long)>($l2);

        $i3 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int inner_length>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDigestLength(int)>($i3);

        $r5 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest: net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest newInstance(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>(r4);

        return $r5;
    }

    public final net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest getRoot()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree r0;
        int $i0, i1, $i2;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Param $r1, $r2, $r3, r4;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest $r5;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree;

        $i0 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int depth>;

        i1 = $i0 - 1;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param treeParam()>();

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setNodeDepth(int)>(i1);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setNodeOffset(long)>(0L);

        $i2 = r0.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Tree: int digest_length>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.argon2.blake2.Blake2b$Param: net.sourceforge.plantuml.argon2.blake2.Blake2b$Param setDigestLength(int)>($i2);

        $r5 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest: net.sourceforge.plantuml.argon2.blake2.Blake2b$Digest newInstance(net.sourceforge.plantuml.argon2.blake2.Blake2b$Param)>(r4);

        return $r5;
    }
}
