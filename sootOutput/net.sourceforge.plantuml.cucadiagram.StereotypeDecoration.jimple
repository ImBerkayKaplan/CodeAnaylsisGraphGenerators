public class net.sourceforge.plantuml.cucadiagram.StereotypeDecoration extends java.lang.Object
{
    private static final net.sourceforge.plantuml.command.regex.RegexComposed circleChar;
    private static final net.sourceforge.plantuml.command.regex.RegexComposed circleSprite;
    final java.lang.String label;
    final net.sourceforge.plantuml.ugraphic.color.HColor htmlColor;
    final char character;
    final java.lang.String spriteName;
    final double spriteScale;

    private void <init>(java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor, char, java.lang.String, double)
    {
        net.sourceforge.plantuml.cucadiagram.StereotypeDecoration r0;
        java.lang.String r1, r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        char c0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.cucadiagram.StereotypeDecoration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        c0 := @parameter2: char;

        r3 := @parameter3: java.lang.String;

        d0 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: java.lang.String label> = r1;

        r0.<net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: net.sourceforge.plantuml.ugraphic.color.HColor htmlColor> = r2;

        r0.<net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: char character> = c0;

        r0.<net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: java.lang.String spriteName> = r3;

        r0.<net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: double spriteScale> = d0;

        return;
    }

    static net.sourceforge.plantuml.cucadiagram.StereotypeDecoration buildSimple(java.lang.String)
    {
        java.lang.String r0, $r3, r4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.command.regex.RegexComposed $r1;
        net.sourceforge.plantuml.command.regex.RegexResult r2;
        double d0;
        net.sourceforge.plantuml.cucadiagram.StereotypeDecoration $r5;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("<<$");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(">>");

        if $z1 == 0 goto label1;

        $r1 = <net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: net.sourceforge.plantuml.command.regex.RegexComposed circleSprite>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.command.regex.RegexComposed: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>(r0);

        r4 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("NAME", 0);

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SCALE", 0);

        d0 = staticinvoke <net.sourceforge.plantuml.creole.Parser: double getScale(java.lang.String,double)>($r3, 1.0);

        goto label2;

     label1:
        r4 = null;

        d0 = 0.0;

     label2:
        $r5 = new net.sourceforge.plantuml.cucadiagram.StereotypeDecoration;

        specialinvoke $r5.<net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: void <init>(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor,char,java.lang.String,double)>(r0, null, 0, r4, d0);

        return $r5;
    }

    public static net.sourceforge.plantuml.cucadiagram.StereotypeDecoration buildComplex(java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColorSet) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        java.lang.String r0, $r10, $r12, $r15, $r18, $r20, $r23, r26, r28, r29, r30, r33;
        net.sourceforge.plantuml.Guillemet $r1;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.cucadiagram.StereotypeDecoration $r4;
        java.lang.Object $r5;
        net.sourceforge.plantuml.command.regex.RegexComposed $r6, $r8;
        net.sourceforge.plantuml.command.regex.RegexResult r7, r9;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r11;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r21, $r22, $r24, $r25, $r35, $r36, $r37;
        net.sourceforge.plantuml.ugraphic.color.HColor r27, $r31, $r32, $r34;
        char c0;
        double d0;

        r0 := @parameter0: java.lang.String;

        r11 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        r26 = "";

        r27 = null;

        c0 = 0;

        r28 = null;

        d0 = 0.0;

        $r1 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet DOUBLE_COMPARATOR>;

        r2 = staticinvoke <net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: java.util.List cutLabels(java.lang.String,net.sourceforge.plantuml.Guillemet)>(r0, $r1);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.lang.String) $r5;

        $r6 = <net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: net.sourceforge.plantuml.command.regex.RegexComposed circleChar>;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexComposed: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>(r29);

        $r8 = <net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: net.sourceforge.plantuml.command.regex.RegexComposed circleSprite>;

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexComposed: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>(r29);

        if r9 == null goto label08;

        $r18 = virtualinvoke r9.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LABEL", 0);

        $z2 = staticinvoke <net.sourceforge.plantuml.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>($r18);

        if $z2 == 0 goto label02;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<");

        $r23 = virtualinvoke r9.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LABEL", 0);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>");

        r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label03;

     label02:
        r29 = "";

     label03:
        r30 = virtualinvoke r9.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COLOR", 0);

        if r30 != null goto label04;

        $r31 = null;

        goto label05;

     label04:
        $r31 = virtualinvoke r11.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorLEGACY(java.lang.String)>(r30);

     label05:
        if $r31 != null goto label06;

        $r32 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        goto label07;

     label06:
        $r32 = $r31;

     label07:
        r27 = $r32;

        c0 = 0;

        r28 = virtualinvoke r9.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("NAME", 0);

        $r20 = virtualinvoke r9.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SCALE", 0);

        d0 = staticinvoke <net.sourceforge.plantuml.creole.Parser: double getScale(java.lang.String,double)>($r20, 1.0);

        goto label13;

     label08:
        if r7 == null goto label13;

        $r10 = virtualinvoke r7.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LABEL", 0);

        $z1 = staticinvoke <net.sourceforge.plantuml.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>($r10);

        if $z1 == 0 goto label09;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<");

        $r15 = virtualinvoke r7.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LABEL", 0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>");

        r29 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label09:
        r29 = "";

     label10:
        r33 = virtualinvoke r7.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COLOR", 0);

        if r33 != null goto label11;

        $r34 = null;

        goto label12;

     label11:
        $r34 = virtualinvoke r11.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorLEGACY(java.lang.String)>(r33);

     label12:
        r27 = $r34;

        $r12 = virtualinvoke r7.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("CHAR", 0);

        c0 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(0);

     label13:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        r26 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label01;

     label14:
        $r4 = new net.sourceforge.plantuml.cucadiagram.StereotypeDecoration;

        specialinvoke $r4.<net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: void <init>(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor,char,java.lang.String,double)>(r26, r27, c0, r28, d0);

        return $r4;
    }

    static java.util.List cutLabels(java.lang.String, net.sourceforge.plantuml.Guillemet)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.command.regex.Pattern2 r2;
        java.lang.String r3, r6, $r8;
        net.sourceforge.plantuml.command.regex.Matcher2 r4;
        boolean $z0, $z1;
        java.util.List $r5;
        net.sourceforge.plantuml.Guillemet r7;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: net.sourceforge.plantuml.Guillemet;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r2 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\<{2,3}.*?\\>{2,3}");

        r4 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r3);

     label1:
        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 == 0 goto label3;

        r6 = virtualinvoke r4.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("<<<");

        if $z1 != 0 goto label2;

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.Guillemet: java.lang.String manageGuillemetStrict(java.lang.String)>(r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0, $r14, $r23;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1, $r15, $r24;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r16, $r17, $r18, $r19, $r20, $r21, $r25, $r26, $r27, $r28, $r30, $r31;
        net.sourceforge.plantuml.command.regex.RegexOptional $r11, $r22, $r29;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[11];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\<\\<");

        $r1[0] = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\(?");

        $r1[2] = $r4;

        $r5 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r5.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CHAR", "(\\S)");

        $r1[3] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r1[4] = $r6;

        $r7 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r7.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(",");

        $r1[5] = $r7;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r1[6] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("COLOR", "(#[0-9a-fA-F]{6}|\\w+)");

        $r1[7] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r1[8] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("LABEL", "[),](.*?)");

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r12);

        $r1[9] = $r11;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\>\\>");

        $r1[10] = $r13;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        <net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: net.sourceforge.plantuml.command.regex.RegexComposed circleChar> = $r0;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r15 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[10];

        $r16 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\<\\<");

        $r15[0] = $r16;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r15[1] = $r17;

        $r18 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r18.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\(?\\$");

        $r15[2] = $r18;

        $r19 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r19.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("NAME", "([-\\p{L}0-9_/]+)");

        $r15[3] = $r19;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SCALE", "((?:\\{scale=|\\*)([0-9.]+)\\}?)?");

        $r15[4] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r15[5] = $r21;

        $r22 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r24 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[3];

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(",");

        $r24[0] = $r25;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r24[1] = $r26;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("COLOR", "(#[0-9a-fA-F]{6}|\\w+)");

        $r24[2] = $r27;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r24);

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r23);

        $r15[6] = $r22;

        $r28 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r15[7] = $r28;

        $r29 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r30 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r30.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("LABEL", "[),](.*?)");

        specialinvoke $r29.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r30);

        $r15[8] = $r29;

        $r31 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r31.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\>\\>");

        $r15[9] = $r31;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r15);

        <net.sourceforge.plantuml.cucadiagram.StereotypeDecoration: net.sourceforge.plantuml.command.regex.RegexComposed circleSprite> = $r14;

        return;
    }
}
