public class ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault extends ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMap
{

    public void <init>(ext.plantuml.com.ctreber.acearth.projection.Projection)
    {
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault r0;
        ext.plantuml.com.ctreber.acearth.projection.Projection r1;

        r0 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault;

        r1 := @parameter0: ext.plantuml.com.ctreber.acearth.projection.Projection;

        specialinvoke r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMap: void <init>(ext.plantuml.com.ctreber.acearth.projection.Projection)>(r1);

        return;
    }

    protected java.util.Comparator getEdgeXingComparator()
    {
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault$EdgeXingComparator $r0;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault r1;

        r1 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault;

        $r0 = new ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault$EdgeXingComparator;

        specialinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault$EdgeXingComparator: void <init>(ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault$1)>(null);

        return $r0;
    }

    protected ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf scanOutline()
    {
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf $r0;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault r1;
        int $i0, $i1;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r3, $r4, $r5, $r6;
        double d0, d1, d2, d3;

        r1 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault;

        $r0 = new ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        $i1 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: int fImageHeight>;

        $i0 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: int fImageWidth>;

        specialinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void <init>(int,int)>($i1, $i0);

        $r3 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d0 = virtualinvoke $r3.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(-3.141592653589793);

        $r4 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d1 = virtualinvoke $r4.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(3.141592653589793);

        $r5 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d2 = virtualinvoke $r5.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(1000000.0);

        $r6 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d3 = virtualinvoke $r6.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(-1000000.0);

        virtualinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d1, d2, d0, d2);

        virtualinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d0, d2, d0, d3);

        virtualinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d0, d3, d1, d3);

        virtualinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d1, d3, d1, d2);

        return $r0;
    }

    protected void scanPolygon(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf, ext.plantuml.com.ctreber.acearth.util.Point3D[], ext.plantuml.com.ctreber.acearth.util.Point2D[], int)
    {
        ext.plantuml.com.ctreber.acearth.util.Point2D[] r0;
        int i0, $i1, $i2, $i7;
        ext.plantuml.com.ctreber.acearth.util.Point2D r1, r2;
        double $d0, $d1, d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27, d28;
        byte $b4, $b5, $b6, b8, b9;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault r3;
        ext.plantuml.com.ctreber.acearth.util.Point3D[] r4;
        ext.plantuml.com.ctreber.acearth.util.Point3D $r5, $r6;
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf r7;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21;
        ext.plantuml.com.ctreber.acearth.util.EdgeCrossing $r12, $r17;

        r3 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault;

        r7 := @parameter0: ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        r4 := @parameter1: ext.plantuml.com.ctreber.acearth.util.Point3D[];

        r0 := @parameter2: ext.plantuml.com.ctreber.acearth.util.Point2D[];

        i0 := @parameter3: int;

        r1 = r0[i0];

        $i1 = i0 - 1;

        if $i1 < 0 goto label1;

        $i7 = i0 - 1;

        goto label2;

     label1:
        $i2 = lengthof r0;

        $i7 = $i2 - 1;

     label2:
        r2 = r0[$i7];

        $d0 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $d1 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        d2 = $d0 - $d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $b4 = $d3 cmpg 3.141592653589793;

        if $b4 > 0 goto label3;

        $r18 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d19 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $d20 = virtualinvoke $r18.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d19);

        $r19 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d21 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getY()>();

        $d22 = virtualinvoke $r19.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d21);

        $r20 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d23 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $d24 = virtualinvoke $r20.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d23);

        $r21 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d25 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getY()>();

        $d26 = virtualinvoke $r21.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d25);

        virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>($d20, $d22, $d24, $d26);

        return;

     label3:
        $r6 = r4[$i7];

        $r5 = r4[i0];

        d4 = specialinvoke r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: double getYMidPoint(ext.plantuml.com.ctreber.acearth.util.Point3D,ext.plantuml.com.ctreber.acearth.util.Point3D)>($r6, $r5);

        $b5 = d2 cmpl 0.0;

        if $b5 <= 0 goto label4;

        d27 = -3.141592653589793;

        b8 = 2;

        goto label5;

     label4:
        d27 = 3.141592653589793;

        b8 = 0;

     label5:
        $r8 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d5 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $d6 = virtualinvoke $r8.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d5);

        $r9 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d7 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getY()>();

        $d8 = virtualinvoke $r9.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d7);

        $r10 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d9 = virtualinvoke $r10.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(d27);

        $r11 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d10 = virtualinvoke $r11.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(d4);

        virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>($d6, $d8, $d9, $d10);

        $r12 = new ext.plantuml.com.ctreber.acearth.util.EdgeCrossing;

        $d11 = (double) b8;

        specialinvoke $r12.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: void <init>(int,int,double,double,double)>(1, i0, d27, d4, $d11);

        virtualinvoke r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: void addEdgeXing(ext.plantuml.com.ctreber.acearth.util.EdgeCrossing)>($r12);

        $b6 = d2 cmpl 0.0;

        if $b6 <= 0 goto label6;

        d28 = 3.141592653589793;

        b9 = 0;

        goto label7;

     label6:
        d28 = -3.141592653589793;

        b9 = 2;

     label7:
        $r13 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d12 = virtualinvoke $r13.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(d28);

        $r14 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d13 = virtualinvoke $r14.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(d4);

        $r15 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d14 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $d15 = virtualinvoke $r15.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d14);

        $r16 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d16 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getY()>();

        $d17 = virtualinvoke $r16.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d16);

        virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>($d12, $d13, $d15, $d17);

        $r17 = new ext.plantuml.com.ctreber.acearth.util.EdgeCrossing;

        $d18 = (double) b9;

        specialinvoke $r17.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: void <init>(int,int,double,double,double)>(0, i0, d28, d4, $d18);

        virtualinvoke r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: void addEdgeXing(ext.plantuml.com.ctreber.acearth.util.EdgeCrossing)>($r17);

        return;
    }

    private double getYMidPoint(ext.plantuml.com.ctreber.acearth.util.Point3D, ext.plantuml.com.ctreber.acearth.util.Point3D)
    {
        ext.plantuml.com.ctreber.acearth.util.Point3D r0, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d18, d19, d20;
        byte $b0, $b1, $b2;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault r1;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r2;

        r1 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault;

        r3 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point3D;

        r0 := @parameter1: ext.plantuml.com.ctreber.acearth.util.Point3D;

        $d0 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $d8 = virtualinvoke r3.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d9 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        d16 = $d8 / $d9;

        $d10 = virtualinvoke r3.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d11 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d12 = d16 * $d11;

        d17 = $d10 - $d12;

        $d13 = virtualinvoke r3.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d14 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d15 = d16 * $d14;

        d18 = $d13 - $d15;

        goto label2;

     label1:
        d17 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        d18 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

     label2:
        $d2 = d17 * d17;

        $d1 = d18 * d18;

        $d3 = $d2 + $d1;

        d19 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        $d7 = d17;

        $b1 = d18 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $b2 = -1;

        goto label4;

     label3:
        $b2 = 1;

     label4:
        $d4 = (double) $b2;

        $d5 = $d4 / d19;

        d20 = $d7 * $d5;

        $r2 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d6 = virtualinvoke $r2.<ext.plantuml.com.ctreber.acearth.projection.Projection: double projectY(double)>(d20);

        return $d6;
    }

    protected void handleCrossings(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf, ext.plantuml.com.ctreber.acearth.util.EdgeCrossing[])
    {
        ext.plantuml.com.ctreber.acearth.util.EdgeCrossing[] r0;
        ext.plantuml.com.ctreber.acearth.util.EdgeCrossing $r1, r4, r5, r6, r7;
        int $i0, $i1, $i2, $i3, i5, $i6, $i7;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault r2;
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf r3;
        byte b4;

        r2 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault;

        r3 := @parameter0: ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        r0 := @parameter1: ext.plantuml.com.ctreber.acearth.util.EdgeCrossing[];

        $r1 = r0[0];

        $i0 = virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: int getType()>();

        if $i0 != 1 goto label1;

        b4 = 0;

        goto label2;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        r4 = r0[$i2];

        r5 = r0[0];

        specialinvoke r2.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: void addEdgeToScanbuf(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf,ext.plantuml.com.ctreber.acearth.util.EdgeCrossing,ext.plantuml.com.ctreber.acearth.util.EdgeCrossing)>(r3, r4, r5);

        b4 = 1;

     label2:
        i5 = b4;

     label3:
        $i6 = lengthof r0;

        $i7 = $i6 - 1;

        if i5 >= $i7 goto label4;

        r6 = r0[i5];

        $i3 = i5 + 1;

        r7 = r0[$i3];

        specialinvoke r2.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: void addEdgeToScanbuf(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf,ext.plantuml.com.ctreber.acearth.util.EdgeCrossing,ext.plantuml.com.ctreber.acearth.util.EdgeCrossing)>(r3, r6, r7);

        i5 = i5 + 2;

        goto label3;

     label4:
        return;
    }

    private void addEdgeToScanbuf(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf, ext.plantuml.com.ctreber.acearth.util.EdgeCrossing, ext.plantuml.com.ctreber.acearth.util.EdgeCrossing)
    {
        ext.plantuml.com.ctreber.acearth.util.EdgeCrossing r0, r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault r1;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, i1;
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf r5;
        byte b2;

        r1 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault;

        r5 := @parameter0: ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        r0 := @parameter1: ext.plantuml.com.ctreber.acearth.util.EdgeCrossing;

        r4 := @parameter2: ext.plantuml.com.ctreber.acearth.util.EdgeCrossing;

        $d0 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getAngle()>();

        i1 = (int) $d0;

        $r2 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d1 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getX()>();

        d8 = virtualinvoke $r2.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d1);

        $r3 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d2 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getY()>();

        d9 = virtualinvoke $r3.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d2);

     label1:
        $d3 = virtualinvoke r4.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getAngle()>();

        $i0 = (int) $d3;

        if i1 == $i0 goto label7;

        b2 = 0;

        d10 = 0.0;

        d11 = 0.0;

        tableswitch(i1)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label2:
        $r14 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d10 = virtualinvoke $r14.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(3.141592653589793);

        $r15 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d11 = virtualinvoke $r15.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(1000000.0);

        b2 = 1;

        goto label6;

     label3:
        $r12 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d10 = virtualinvoke $r12.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(-3.141592653589793);

        $r13 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d11 = virtualinvoke $r13.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(1000000.0);

        b2 = 2;

        goto label6;

     label4:
        $r10 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d10 = virtualinvoke $r10.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(-3.141592653589793);

        $r11 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d11 = virtualinvoke $r11.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(-1000000.0);

        b2 = 3;

        goto label6;

     label5:
        $r8 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d10 = virtualinvoke $r8.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(3.141592653589793);

        $r9 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d11 = virtualinvoke $r9.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(-1000000.0);

        b2 = 0;

     label6:
        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d8, d9, d10, d11);

        i1 = b2;

        d8 = d10;

        d9 = d11;

        goto label1;

     label7:
        $r6 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d4 = virtualinvoke r4.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getX()>();

        $d5 = virtualinvoke $r6.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d4);

        $r7 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d6 = virtualinvoke r4.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getY()>();

        $d7 = virtualinvoke $r7.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d6);

        virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d8, d9, $d5, $d7);

        return;
    }
}
