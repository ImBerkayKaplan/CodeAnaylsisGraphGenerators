public class net.sourceforge.plantuml.tim.EaterDumpMemory extends net.sourceforge.plantuml.tim.Eater
{

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterDumpMemory r0;
        net.sourceforge.plantuml.StringLocated r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDumpMemory;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterDumpMemory r0;
        java.lang.String r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        net.sourceforge.plantuml.tim.TContext r3;

        r0 := @this: net.sourceforge.plantuml.tim.EaterDumpMemory;

        r3 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDumpMemory: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDumpMemory: void checkAndEatChar(java.lang.String)>("!dump_memory");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDumpMemory: void skipSpaces()>();

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterDumpMemory: java.lang.String eatAllToEnd()>();

        interfaceinvoke r2.<net.sourceforge.plantuml.tim.TMemory: void dumpDebug(java.lang.String)>(r1);

        return;
    }
}
