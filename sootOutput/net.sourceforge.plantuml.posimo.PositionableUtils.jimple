public class net.sourceforge.plantuml.posimo.PositionableUtils extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.posimo.PositionableUtils r0;

        r0 := @this: net.sourceforge.plantuml.posimo.PositionableUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.geom.Rectangle2D convert(net.sourceforge.plantuml.posimo.Positionable)
    {
        net.sourceforge.plantuml.posimo.Positionable r0;
        java.awt.geom.Point2D r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        java.awt.geom.Rectangle2D$Double $r3;
        double $d0, $d1, $d2, $d3;

        r0 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: java.awt.geom.Point2D getPosition()>();

        r2 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: net.sourceforge.plantuml.awt.geom.Dimension2D getSize()>();

        $r3 = new java.awt.geom.Rectangle2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r3;
    }

    public static boolean contains(net.sourceforge.plantuml.posimo.Positionable, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.posimo.Positionable r0;
        java.awt.geom.Point2D r1, r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0, $b1, $b2, $b3;

        r0 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        r3 := @parameter1: java.awt.geom.Point2D;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: java.awt.geom.Point2D getPosition()>();

        r2 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: net.sourceforge.plantuml.awt.geom.Dimension2D getSize()>();

        d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $b0 = $d2 cmpg $d3;

        if $b0 >= 0 goto label1;

        return 0;

     label1:
        $d4 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d5 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d6 = $d5 + d0;

        $b1 = $d4 cmpl $d6;

        if $b1 <= 0 goto label2;

        return 0;

     label2:
        $d7 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d8 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $b2 = $d7 cmpg $d8;

        if $b2 >= 0 goto label3;

        return 0;

     label3:
        $d9 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d10 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d11 = $d10 + d1;

        $b3 = $d9 cmpl $d11;

        if $b3 <= 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public static boolean intersect(net.sourceforge.plantuml.posimo.Positionable, net.sourceforge.plantuml.posimo.Positionable)
    {
        net.sourceforge.plantuml.posimo.Positionable r0, r2;
        java.awt.geom.Rectangle2D r1, r3;
        boolean $z0;

        r0 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        r2 := @parameter1: net.sourceforge.plantuml.posimo.Positionable;

        r1 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: java.awt.geom.Rectangle2D convert(net.sourceforge.plantuml.posimo.Positionable)>(r0);

        r3 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: java.awt.geom.Rectangle2D convert(net.sourceforge.plantuml.posimo.Positionable)>(r2);

        $z0 = virtualinvoke r1.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(r3);

        return $z0;
    }

    public static net.sourceforge.plantuml.posimo.Positionable addMargin(net.sourceforge.plantuml.posimo.Positionable, double, double)
    {
        net.sourceforge.plantuml.posimo.PositionableUtils$1 $r0;
        net.sourceforge.plantuml.posimo.Positionable r1;
        double d0, d1;

        r1 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r0 = new net.sourceforge.plantuml.posimo.PositionableUtils$1;

        specialinvoke $r0.<net.sourceforge.plantuml.posimo.PositionableUtils$1: void <init>(net.sourceforge.plantuml.posimo.Positionable,double,double)>(r1, d0, d1);

        return $r0;
    }

    static java.awt.geom.Rectangle2D move(java.awt.geom.Rectangle2D, double, double)
    {
        java.awt.geom.Rectangle2D$Double $r0;
        java.awt.geom.Rectangle2D r1;
        double $d0, d1, $d2, $d3, d4, $d5, $d6, $d7;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        d1 := @parameter1: double;

        d4 := @parameter2: double;

        $r0 = new java.awt.geom.Rectangle2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getX()>();

        $d2 = $d0 + d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getY()>();

        $d5 = $d3 + d4;

        $d6 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d7 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $r0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d2, $d5, $d6, $d7);

        return $r0;
    }

    public static java.awt.geom.Point2D getCenter(net.sourceforge.plantuml.posimo.Positionable)
    {
        net.sourceforge.plantuml.posimo.Positionable r0;
        java.awt.geom.Point2D r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        java.awt.geom.Point2D$Double $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: java.awt.geom.Point2D getPosition()>();

        r2 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: net.sourceforge.plantuml.awt.geom.Dimension2D getSize()>();

        $r3 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d1 / 2.0;

        $d3 = $d0 + $d2;

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = $d5 / 2.0;

        $d7 = $d4 + $d6;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d7);

        return $r3;
    }

    public static net.sourceforge.plantuml.posimo.Positionable move(net.sourceforge.plantuml.posimo.Positionable, double, double)
    {
        net.sourceforge.plantuml.posimo.Positionable r0;
        java.awt.geom.Point2D r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        net.sourceforge.plantuml.posimo.PositionableImpl $r3;
        double $d0, d1, $d2, $d3, d4, $d5;

        r0 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        d1 := @parameter1: double;

        d4 := @parameter2: double;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: java.awt.geom.Point2D getPosition()>();

        r2 = interfaceinvoke r0.<net.sourceforge.plantuml.posimo.Positionable: net.sourceforge.plantuml.awt.geom.Dimension2D getSize()>();

        $r3 = new net.sourceforge.plantuml.posimo.PositionableImpl;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + d4;

        specialinvoke $r3.<net.sourceforge.plantuml.posimo.PositionableImpl: void <init>(double,double,net.sourceforge.plantuml.awt.geom.Dimension2D)>($d2, $d5, r2);

        return $r3;
    }

    public static net.sourceforge.plantuml.posimo.Positionable moveAwayFrom(net.sourceforge.plantuml.posimo.Positionable, net.sourceforge.plantuml.posimo.Positionable)
    {
        net.sourceforge.plantuml.posimo.Positionable r0, r2, $r4;
        java.awt.geom.Point2D r1, r3;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, d10, d11, d12, d13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r5, $r6;
        java.lang.IllegalArgumentException $r7;
        int i0;

        r0 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        r2 := @parameter1: net.sourceforge.plantuml.posimo.Positionable;

        r1 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: java.awt.geom.Point2D getCenter(net.sourceforge.plantuml.posimo.Positionable)>(r0);

        r3 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: java.awt.geom.Point2D getCenter(net.sourceforge.plantuml.posimo.Positionable)>(r2);

        $d0 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d5 = $d3 - $d4;

        d11 = 0.0;

        $z0 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: boolean doesIntersectWithThisCoef(net.sourceforge.plantuml.posimo.Positionable,net.sourceforge.plantuml.posimo.Positionable,double,double,double)>(r0, r2, d2, d5, 0.0);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        d12 = 0.1;

     label2:
        $z1 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: boolean doesIntersectWithThisCoef(net.sourceforge.plantuml.posimo.Positionable,net.sourceforge.plantuml.posimo.Positionable,double,double,double)>(r0, r2, d2, d5, d12);

        if $z1 == 0 goto label3;

        d12 = d12 * 2.0;

        goto label2;

     label3:
        i0 = 0;

     label4:
        if i0 >= 5 goto label9;

        $z2 = <net.sourceforge.plantuml.posimo.PositionableUtils: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $z6 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: boolean doesIntersectWithThisCoef(net.sourceforge.plantuml.posimo.Positionable,net.sourceforge.plantuml.posimo.Positionable,double,double,double)>(r0, r2, d2, d5, d11);

        if $z6 != 0 goto label5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label5:
        $z3 = <net.sourceforge.plantuml.posimo.PositionableUtils: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $z5 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: boolean doesIntersectWithThisCoef(net.sourceforge.plantuml.posimo.Positionable,net.sourceforge.plantuml.posimo.Positionable,double,double,double)>(r0, r2, d2, d5, d12);

        if $z5 == 0 goto label6;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label6:
        $d9 = d11 + d12;

        d10 = $d9 / 2.0;

        $z4 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: boolean doesIntersectWithThisCoef(net.sourceforge.plantuml.posimo.Positionable,net.sourceforge.plantuml.posimo.Positionable,double,double,double)>(r0, r2, d2, d5, d10);

        if $z4 == 0 goto label7;

        d11 = d10;

        goto label8;

     label7:
        d12 = d10;

     label8:
        i0 = i0 + 1;

        goto label4;

     label9:
        $d6 = d11 + d12;

        d13 = $d6 / 2.0;

        $d8 = d2 * d13;

        $d7 = d5 * d13;

        $r4 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: net.sourceforge.plantuml.posimo.Positionable move(net.sourceforge.plantuml.posimo.Positionable,double,double)>(r2, $d8, $d7);

        return $r4;
    }

    private static boolean doesIntersectWithThisCoef(net.sourceforge.plantuml.posimo.Positionable, net.sourceforge.plantuml.posimo.Positionable, double, double, double)
    {
        net.sourceforge.plantuml.posimo.Positionable r0, r1, r2;
        double d0, d1, d2, $d3, $d4;
        boolean $z0;

        r2 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        r0 := @parameter1: net.sourceforge.plantuml.posimo.Positionable;

        d0 := @parameter2: double;

        d2 := @parameter3: double;

        d1 := @parameter4: double;

        $d4 = d0 * d1;

        $d3 = d2 * d1;

        r1 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: net.sourceforge.plantuml.posimo.Positionable move(net.sourceforge.plantuml.posimo.Positionable,double,double)>(r0, $d4, $d3);

        $z0 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: boolean intersect(net.sourceforge.plantuml.posimo.Positionable,net.sourceforge.plantuml.posimo.Positionable)>(r2, r1);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/posimo/PositionableUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.posimo.PositionableUtils: boolean $assertionsDisabled> = $z1;

        return;
    }
}
