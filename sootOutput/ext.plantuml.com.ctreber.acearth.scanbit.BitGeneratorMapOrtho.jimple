public class ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho extends ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMap
{

    public void <init>(ext.plantuml.com.ctreber.acearth.projection.Projection)
    {
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho r0;
        ext.plantuml.com.ctreber.acearth.projection.Projection r1;

        r0 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho;

        r1 := @parameter0: ext.plantuml.com.ctreber.acearth.projection.Projection;

        specialinvoke r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMap: void <init>(ext.plantuml.com.ctreber.acearth.projection.Projection)>(r1);

        return;
    }

    protected java.util.Comparator getEdgeXingComparator()
    {
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho$EdgeCrossingComparator $r0;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho r1;

        r1 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho;

        $r0 = new ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho$EdgeCrossingComparator;

        specialinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho$EdgeCrossingComparator: void <init>(ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho$1)>(null);

        return $r0;
    }

    protected ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf scanOutline()
    {
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf $r0;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho r1;
        int $i0, $i1;

        r1 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho;

        $r0 = new ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        $i1 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: int fImageHeight>;

        $i0 = r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: int fImageWidth>;

        specialinvoke $r0.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void <init>(int,int)>($i1, $i0);

        specialinvoke r1.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: void addArcToScanbuf(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf,double,double,double,double,double,double)>($r0, 1.0, 0.0, 0.0, 1.0, 0.0, 6.283185307179586);

        return $r0;
    }

    private void addArcToScanbuf(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf, double, double, double, double, double, double)
    {
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho r0;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r1, $r2, $r3, $r4, $r5, $r7, $r8;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, d8, d9, d10, d11, d12, d13, $d14, d15, $d16, $d17, d18, $d19, $d20, d21, d22, d23, d24, d25, d26, d27, d28, d29;
        byte $b0;
        int i1, i2, i3;
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf r6;

        r0 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho;

        r6 := @parameter0: ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        d8 := @parameter1: double;

        d9 := @parameter2: double;

        d2 := @parameter3: double;

        d10 := @parameter4: double;

        d11 := @parameter5: double;

        d5 := @parameter6: double;

        $r1 = r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d0 = virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double getScale()>();

        $d1 = 1.0 / $d0;

        d21 = $d1 * 10.0;

        $b0 = d21 cmpl 0.05;

        if $b0 <= 0 goto label1;

        d21 = 0.05;

     label1:
        $d3 = d2 / d21;

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i1 = (int) $d4;

        $d6 = d5 / d21;

        $d7 = staticinvoke <java.lang.Math: double floor(double)>($d6);

        i2 = (int) $d7;

        $r2 = r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d22 = virtualinvoke $r2.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(d8);

        $r3 = r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d23 = virtualinvoke $r3.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(d9);

        if i1 > i2 goto label3;

        d12 = staticinvoke <java.lang.Math: double cos(double)>(d21);

        d13 = staticinvoke <java.lang.Math: double sin(double)>(d21);

        $d14 = (double) i1;

        d15 = $d14 * d21;

        d24 = staticinvoke <java.lang.Math: double cos(double)>(d15);

        d25 = staticinvoke <java.lang.Math: double sin(double)>(d15);

        i3 = i1;

     label2:
        if i3 > i2 goto label3;

        $r7 = r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d26 = virtualinvoke $r7.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(d24);

        $r8 = r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d27 = virtualinvoke $r8.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(d25);

        virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d22, d23, d26, d27);

        $d17 = d12 * d24;

        $d16 = d13 * d25;

        d18 = $d17 - $d16;

        $d20 = d13 * d24;

        $d19 = d12 * d25;

        d25 = $d20 + $d19;

        d24 = d18;

        d22 = d26;

        d23 = d27;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r4 = r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d28 = virtualinvoke $r4.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>(d10);

        $r5 = r0.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        d29 = virtualinvoke $r5.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>(d11);

        virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>(d22, d23, d28, d29);

        return;
    }

    protected void scanPolygon(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf, ext.plantuml.com.ctreber.acearth.util.Point3D[], ext.plantuml.com.ctreber.acearth.util.Point2D[], int)
    {
        ext.plantuml.com.ctreber.acearth.util.Point3D[] r0;
        int i0, $i1, $i2, $i7;
        ext.plantuml.com.ctreber.acearth.util.Point2D[] r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        byte $b4, $b5, $b6;
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf r2;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho r3;
        ext.plantuml.com.ctreber.acearth.util.EdgeCrossing $r4, $r5;
        ext.plantuml.com.ctreber.acearth.util.Point3D r6, r7, r8, r9;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r10, $r11, $r12, $r13;

        r3 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho;

        r2 := @parameter0: ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        r0 := @parameter1: ext.plantuml.com.ctreber.acearth.util.Point3D[];

        r1 := @parameter2: ext.plantuml.com.ctreber.acearth.util.Point2D[];

        i0 := @parameter3: int;

        r6 = r0[i0];

        $i1 = i0 - 1;

        if $i1 < 0 goto label1;

        $i7 = i0 - 1;

        goto label2;

     label1:
        $i2 = lengthof r1;

        $i7 = $i2 - 1;

     label2:
        r7 = r0[$i7];

        $d0 = virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $b4 = $d0 cmpg 0.0;

        if $b4 > 0 goto label4;

        $d7 = virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $b6 = $d7 cmpg 0.0;

        if $b6 > 0 goto label3;

        return;

     label3:
        r8 = specialinvoke r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.util.Point3D findEdgeCrossing(ext.plantuml.com.ctreber.acearth.util.Point3D,ext.plantuml.com.ctreber.acearth.util.Point3D)>(r7, r6);

        $r5 = new ext.plantuml.com.ctreber.acearth.util.EdgeCrossing;

        $d8 = virtualinvoke r8.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d9 = virtualinvoke r8.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d10 = virtualinvoke r8.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d11 = virtualinvoke r8.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d12 = staticinvoke <java.lang.Math: double atan2(double,double)>($d10, $d11);

        specialinvoke $r5.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: void <init>(int,int,double,double,double)>(0, i0, $d8, $d9, $d12);

        virtualinvoke r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: void addEdgeXing(ext.plantuml.com.ctreber.acearth.util.EdgeCrossing)>($r5);

        r7 = r8;

        goto label5;

     label4:
        $d1 = virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $b5 = $d1 cmpg 0.0;

        if $b5 > 0 goto label5;

        r9 = specialinvoke r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.util.Point3D findEdgeCrossing(ext.plantuml.com.ctreber.acearth.util.Point3D,ext.plantuml.com.ctreber.acearth.util.Point3D)>(r7, r6);

        $r4 = new ext.plantuml.com.ctreber.acearth.util.EdgeCrossing;

        $d2 = virtualinvoke r9.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d3 = virtualinvoke r9.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d4 = virtualinvoke r9.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d5 = virtualinvoke r9.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d6 = staticinvoke <java.lang.Math: double atan2(double,double)>($d4, $d5);

        specialinvoke $r4.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: void <init>(int,int,double,double,double)>(1, i0, $d2, $d3, $d6);

        virtualinvoke r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: void addEdgeXing(ext.plantuml.com.ctreber.acearth.util.EdgeCrossing)>($r4);

        r6 = r9;

     label5:
        $r10 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d13 = virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d14 = virtualinvoke $r10.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d13);

        $r11 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d15 = virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d16 = virtualinvoke $r11.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d15);

        $r12 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d17 = virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d18 = virtualinvoke $r12.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d17);

        $r13 = r3.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d19 = virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d20 = virtualinvoke $r13.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d19);

        virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf: void addLine(double,double,double,double)>($d14, $d16, $d18, $d20);

        return;
    }

    private ext.plantuml.com.ctreber.acearth.util.Point3D findEdgeCrossing(ext.plantuml.com.ctreber.acearth.util.Point3D, ext.plantuml.com.ctreber.acearth.util.Point3D)
    {
        ext.plantuml.com.ctreber.acearth.util.Point3D r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, $d10, $d11, $d12, $d13, $d14, d15, $d16, $d17, $d18, $d19, $d20, d21, d22;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho r3;

        r3 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho;

        r1 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point3D;

        r0 := @parameter1: ext.plantuml.com.ctreber.acearth.util.Point3D;

        $d0 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d1 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d2 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d3 = $d1 - $d2;

        d21 = $d0 / $d3;

        $d4 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d5 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d6 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d7 = $d5 - $d6;

        $d8 = d21 * $d7;

        d9 = $d4 - $d8;

        $d10 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d11 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d12 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d13 = $d11 - $d12;

        $d14 = d21 * $d13;

        d15 = $d10 - $d14;

        $d17 = d9 * d9;

        $d16 = d15 * d15;

        $d18 = $d17 + $d16;

        d22 = staticinvoke <java.lang.Math: double sqrt(double)>($d18);

        $r2 = new ext.plantuml.com.ctreber.acearth.util.Point3D;

        $d20 = d9 / d22;

        $d19 = d15 / d22;

        specialinvoke $r2.<ext.plantuml.com.ctreber.acearth.util.Point3D: void <init>(double,double,double)>($d20, $d19, 0.0);

        return $r2;
    }

    protected void handleCrossings(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf, ext.plantuml.com.ctreber.acearth.util.EdgeCrossing[])
    {
        ext.plantuml.com.ctreber.acearth.util.EdgeCrossing[] r0;
        ext.plantuml.com.ctreber.acearth.util.EdgeCrossing $r1, r4, r5, r6, r7;
        int $i0, $i1, $i2, $i3, i5, $i6, $i7;
        ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho r2;
        ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        byte b4;

        r2 := @this: ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho;

        r3 := @parameter0: ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf;

        r0 := @parameter1: ext.plantuml.com.ctreber.acearth.util.EdgeCrossing[];

        $r1 = r0[0];

        $i0 = virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: int getType()>();

        if $i0 != 1 goto label1;

        b4 = 0;

        goto label2;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        r4 = r0[$i2];

        r5 = r0[0];

        $d0 = virtualinvoke r4.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getX()>();

        $d1 = virtualinvoke r4.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getY()>();

        $d2 = virtualinvoke r4.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getAngle()>();

        $d3 = virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getX()>();

        $d4 = virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getY()>();

        $d5 = virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getAngle()>();

        $d6 = $d5 + 6.283185307179586;

        specialinvoke r2.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: void addArcToScanbuf(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf,double,double,double,double,double,double)>(r3, $d0, $d1, $d2, $d3, $d4, $d6);

        b4 = 1;

     label2:
        i5 = b4;

     label3:
        $i6 = lengthof r0;

        $i7 = $i6 - 1;

        if i5 >= $i7 goto label4;

        r6 = r0[i5];

        $i3 = i5 + 1;

        r7 = r0[$i3];

        $d7 = virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getX()>();

        $d8 = virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getY()>();

        $d9 = virtualinvoke r6.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getAngle()>();

        $d10 = virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getX()>();

        $d11 = virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getY()>();

        $d12 = virtualinvoke r7.<ext.plantuml.com.ctreber.acearth.util.EdgeCrossing: double getAngle()>();

        specialinvoke r2.<ext.plantuml.com.ctreber.acearth.scanbit.BitGeneratorMapOrtho: void addArcToScanbuf(ext.plantuml.com.ctreber.acearth.scanbit.ScanBuf,double,double,double,double,double,double)>(r3, $d7, $d8, $d9, $d10, $d11, $d12);

        i5 = i5 + 2;

        goto label3;

     label4:
        return;
    }
}
