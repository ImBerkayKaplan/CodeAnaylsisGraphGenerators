public class net.sourceforge.plantuml.graphic.SpecialText extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UShapeIgnorableForCompression
{
    private final net.sourceforge.plantuml.graphic.TextBlock title;

    public void <init>(net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.graphic.SpecialText r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;

        r0 := @this: net.sourceforge.plantuml.graphic.SpecialText;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.SpecialText: net.sourceforge.plantuml.graphic.TextBlock title> = r1;

        return;
    }

    public boolean isIgnoreForCompressionOn(net.sourceforge.plantuml.ugraphic.comp.CompressionMode)
    {
        net.sourceforge.plantuml.graphic.SpecialText r0;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode r1;

        r0 := @this: net.sourceforge.plantuml.graphic.SpecialText;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.CompressionMode;

        return 1;
    }

    public void drawWhenCompressed(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.comp.CompressionMode)
    {
        net.sourceforge.plantuml.graphic.SpecialText r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r6;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.ugraphic.UEmpty $r7;
        net.sourceforge.plantuml.ugraphic.comp.CompressionMode r8;

        r0 := @this: net.sourceforge.plantuml.graphic.SpecialText;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r8 := @parameter1: net.sourceforge.plantuml.ugraphic.comp.CompressionMode;

        $r2 = r0.<net.sourceforge.plantuml.graphic.SpecialText: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d0);

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r7 = new net.sourceforge.plantuml.ugraphic.UEmpty;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UEmpty: void <init>(double,double)>(1.0, 1.0);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r7);

        return;
    }

    public final net.sourceforge.plantuml.graphic.TextBlock getTitle()
    {
        net.sourceforge.plantuml.graphic.SpecialText r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;

        r0 := @this: net.sourceforge.plantuml.graphic.SpecialText;

        $r1 = r0.<net.sourceforge.plantuml.graphic.SpecialText: net.sourceforge.plantuml.graphic.TextBlock title>;

        return $r1;
    }
}
