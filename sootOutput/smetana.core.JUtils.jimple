public class smetana.core.JUtils extends java.lang.Object
{
    public static int USHRT_MAX;

    public void <init>()
    {
        smetana.core.JUtils r0;

        r0 := @this: smetana.core.JUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static smetana.core.size_t sizeof(java.lang.Class)
    {
        smetana.core.size_t $r0;
        java.lang.Class r1;

        r1 := @parameter0: java.lang.Class;

        $r0 = new smetana.core.size_t;

        specialinvoke $r0.<smetana.core.size_t: void <init>(java.lang.Class)>(r1);

        return $r0;
    }

    public static smetana.core.size_t sizeof(java.lang.String, int)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r1;
        int i0;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static int strcmp(smetana.core.CString, smetana.core.CString)
    {
        smetana.core.CString r0, r1;
        int $i0;

        r0 := @parameter0: smetana.core.CString;

        r1 := @parameter1: smetana.core.CString;

        $i0 = virtualinvoke r0.<smetana.core.CString: int strcmp(smetana.core.CString)>(r1);

        return $i0;
    }

    public static int strncmp(smetana.core.CString, smetana.core.CString, int)
    {
        smetana.core.CString r0, r1;
        int i0, $i1;

        r0 := @parameter0: smetana.core.CString;

        r1 := @parameter1: smetana.core.CString;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<smetana.core.CString: int strcmp(smetana.core.CString,int)>(r1, i0);

        return $i1;
    }

    public static smetana.core.CString strstr(smetana.core.CString, smetana.core.CString)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7;
        smetana.core.CString r3, r6;
        java.lang.String $r8;

        r3 := @parameter0: smetana.core.CString;

        r6 := @parameter1: smetana.core.CString;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s1=");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s2=");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r0;
    }

    public static void strncpy(smetana.core.CString, smetana.core.CString, int)
    {
        smetana.core.CString r0, r1;
        int i0;

        r0 := @parameter0: smetana.core.CString;

        r1 := @parameter1: smetana.core.CString;

        i0 := @parameter2: int;

        virtualinvoke r0.<smetana.core.CString: void copyFrom(smetana.core.CString,int)>(r1, i0);

        return;
    }

    public static smetana.core.CString strchr(smetana.core.CString, char)
    {
        smetana.core.CString r0, $r1;
        char c0;

        r0 := @parameter0: smetana.core.CString;

        c0 := @parameter1: char;

        $r1 = virtualinvoke r0.<smetana.core.CString: smetana.core.CString strchr(char)>(c0);

        return $r1;
    }

    public static int strtol(smetana.core.CString, smetana.core.CString[], int)
    {
        int i0, i1, $i2;
        smetana.core.CString r0, $r8;
        java.lang.String $r2, $r7;
        smetana.core.CString[] r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @parameter0: smetana.core.CString;

        r3 := @parameter1: smetana.core.CString[];

        i0 := @parameter2: int;

        if i0 == 10 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label1:
        $r2 = virtualinvoke r0.<smetana.core.CString: java.lang.String getContent()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = virtualinvoke r0.<smetana.core.CString: smetana.core.CString plus_(int)>($i2);

        r3[0] = $r8;

        return i1;
    }

    public static double strtod(smetana.core.CString, smetana.core.CString[])
    {
        smetana.core.CString r0;
        java.lang.String $r1;
        double d0;
        smetana.core.CString[] r2;

        r0 := @parameter0: smetana.core.CString;

        r2 := @parameter1: smetana.core.CString[];

        $r1 = virtualinvoke r0.<smetana.core.CString: java.lang.String getContent()>();

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        return d0;
    }

    public static double atof(smetana.core.CString)
    {
        smetana.core.CString r0;
        java.lang.String $r1;
        double $d0;

        r0 := @parameter0: smetana.core.CString;

        $r1 = virtualinvoke r0.<smetana.core.CString: java.lang.String getContent()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        return $d0;
    }

    public static int memcmp(smetana.core.__ptr__, smetana.core.__ptr__, int)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9;
        smetana.core.__ptr__ r3, r6;
        int i0;
        java.lang.String $r10;

        r3 := @parameter0: smetana.core.__ptr__;

        r6 := @parameter1: smetana.core.__ptr__;

        i0 := @parameter2: int;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s1=");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s2=");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sz=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r0;
    }

    public static void memset(smetana.core.__ptr__, int, smetana.core.size_t)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        smetana.core.__ptr__ r1;
        smetana.core.size_t r2;

        r1 := @parameter0: smetana.core.__ptr__;

        i0 := @parameter1: int;

        r2 := @parameter2: smetana.core.size_t;

        if i0 == 0 goto label1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static int strlen(smetana.core.CString)
    {
        smetana.core.CString r0;
        int $i0;

        r0 := @parameter0: smetana.core.CString;

        $i0 = virtualinvoke r0.<smetana.core.CString: int length()>();

        return $i0;
    }

    public static double abs(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        return $d1;
    }

    public static double cos(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        return $d1;
    }

    public static double sin(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        return $d1;
    }

    public static double sqrt(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        return $d1;
    }

    public static double atan2(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>(d0, d1);

        return $d2;
    }

    public static double pow(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d1);

        return $d2;
    }

    public static boolean isdigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        return $z0;
    }

    public static int atoi(smetana.core.CString)
    {
        smetana.core.CString r0;
        java.lang.String $r1;
        int $i0;

        r0 := @parameter0: smetana.core.CString;

        $r1 = virtualinvoke r0.<smetana.core.CString: java.lang.String getContent()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i0;
    }

    public static char tolower(char)
    {
        char c0, $c1;

        c0 := @parameter0: char;

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        return $c1;
    }

    public static smetana.core.CString getenv(smetana.core.CString)
    {
        smetana.core.CString r0;

        r0 := @parameter0: smetana.core.CString;

        return null;
    }

    public static void LOG(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return;
    }

    public static void LOG2(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return;
    }

    public static boolean EQ(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean z0, $z1, $z2, $z3;
        smetana.core.UnsupportedStarStruct r2, r3;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z0 = staticinvoke <smetana.core.JUtils: boolean EQ_(java.lang.Object,java.lang.Object)>(r0, r1);

        $z1 = r0 instanceof smetana.core.UnsupportedStarStruct;

        if $z1 == 0 goto label3;

        $z2 = r1 instanceof smetana.core.UnsupportedStarStruct;

        if $z2 == 0 goto label3;

        r2 = (smetana.core.UnsupportedStarStruct) r0;

        r3 = (smetana.core.UnsupportedStarStruct) r1;

        $i1 = r2.<smetana.core.UnsupportedStarStruct: int UID>;

        $i0 = r3.<smetana.core.UnsupportedStarStruct: int UID>;

        if $i1 != $i0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == z0 goto label3;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;

     label3:
        return z0;
    }

    private static boolean EQ_(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r8, $r10, $r12, $r14, $r15, $r16;
        java.io.PrintStream $r3, $r11;
        java.lang.Class $r5, $r13;
        java.lang.String $r9, $r17;
        java.lang.UnsupportedOperationException $r18;
        smetana.core.__ptr__ $r19, $r20;
        smetana.core.CArrayOfStar $r21, $r22;
        int $i0;
        smetana.core.CString $r23, $r24;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        if r1 == null goto label2;

        return 0;

     label2:
        if r1 != null goto label3;

        if r0 == null goto label3;

        return 0;

     label3:
        $z0 = r0 instanceof smetana.core.CString;

        if $z0 == 0 goto label4;

        $z6 = r1 instanceof smetana.core.CString;

        if $z6 == 0 goto label4;

        $r24 = (smetana.core.CString) r0;

        $r23 = (smetana.core.CString) r1;

        $z7 = virtualinvoke $r24.<smetana.core.CString: boolean isSameThan(smetana.core.CString)>($r23);

        return $z7;

     label4:
        $z1 = r0 instanceof smetana.core.CArrayOfStar;

        if $z1 == 0 goto label7;

        $z5 = r1 instanceof smetana.core.CArrayOfStar;

        if $z5 == 0 goto label7;

        $r22 = (smetana.core.CArrayOfStar) r0;

        $r21 = (smetana.core.CArrayOfStar) r1;

        $i0 = virtualinvoke $r22.<smetana.core.CArrayOfStar: int comparePointer_(smetana.core.CArrayOfStar)>($r21);

        if $i0 != 0 goto label5;

        $z8 = 1;

        goto label6;

     label5:
        $z8 = 0;

     label6:
        return $z8;

     label7:
        $z2 = r0 instanceof smetana.core.__ptr__;

        if $z2 == 0 goto label8;

        $z3 = r1 instanceof smetana.core.__ptr__;

        if $z3 == 0 goto label8;

        $r20 = (smetana.core.__ptr__) r0;

        $r19 = (smetana.core.__ptr__) r1;

        $z4 = interfaceinvoke $r20.<smetana.core.__ptr__: boolean isSameThan(smetana.core.__ptr__)>($r19);

        return $z4;

     label8:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("o1=");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("o2=");

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r17);

        $r18 = new java.lang.UnsupportedOperationException;

        specialinvoke $r18.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r18;
    }

    public static boolean NEQ(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <smetana.core.JUtils: boolean EQ(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void qsort1(smetana.core.CArrayOfStar, int, smetana.core.CFunction)
    {
        java.lang.StringBuilder $r0, $r1, $r2;
        int i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r3;
        smetana.core.CArrayOfStar r4, r5, r6;
        smetana.core.CFunction r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        java.lang.Integer r10;
        boolean z0;

        r4 := @parameter0: smetana.core.CArrayOfStar;

        i0 := @parameter1: int;

        r7 := @parameter2: smetana.core.CFunction;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("qsort1 ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <smetana.core.debug.SmetanaDebug: void LOG(java.lang.String)>($r3);

     label1:
        z0 = 0;

        i4 = 0;

     label2:
        $i5 = i0 - 1;

        if i4 >= $i5 goto label4;

        r5 = virtualinvoke r4.<smetana.core.CArrayOfStar: smetana.core.CArrayOfStar plus_(int)>(i4);

        $i1 = i4 + 1;

        r6 = virtualinvoke r4.<smetana.core.CArrayOfStar: smetana.core.CArrayOfStar plus_(int)>($i1);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r5;

        $r8[1] = r6;

        $r9 = interfaceinvoke r7.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r8);

        r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        if $i2 <= 0 goto label3;

        z0 = 1;

        $i3 = i4 + 1;

        virtualinvoke r4.<smetana.core.CArrayOfStar: void _swap(int,int)>(i4, $i3);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        if z0 != 0 goto label1;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LOG(java.lang.String)>("qsort1 ok");

        return;
    }

    public static void qsort2(int[], int, smetana.core.CFunction)
    {
        java.lang.StringBuilder $r0, $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, i9, $i10;
        java.lang.String $r3;
        int[] r4;
        java.lang.Integer r5, r6, r10;
        smetana.core.CFunction r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        boolean z0;

        r4 := @parameter0: int[];

        i0 := @parameter1: int;

        r7 := @parameter2: smetana.core.CFunction;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("qsort2 ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <smetana.core.debug.SmetanaDebug: void LOG(java.lang.String)>($r3);

     label1:
        z0 = 0;

        i9 = 0;

     label2:
        $i10 = i0 - 1;

        if i9 >= $i10 goto label4;

        $i1 = r4[i9];

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = i9 + 1;

        $i3 = r4[$i2];

        r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r5;

        $r8[1] = r6;

        $r9 = interfaceinvoke r7.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r8);

        r10 = (java.lang.Integer) $r9;

        $i4 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        if $i4 <= 0 goto label3;

        z0 = 1;

        i5 = r4[i9];

        $i6 = i9 + 1;

        $i7 = r4[$i6];

        r4[i9] = $i7;

        $i8 = i9 + 1;

        r4[$i8] = i5;

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        if z0 != 0 goto label1;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LOG(java.lang.String)>("qsort2 ok");

        return;
    }

    public static int setjmp(smetana.core.jmp_buf)
    {
        smetana.core.jmp_buf r0;

        r0 := @parameter0: smetana.core.jmp_buf;

        virtualinvoke r0.<smetana.core.jmp_buf: void saveCallingEnvironment()>();

        return 0;
    }

    public static void printDebugEdge(h.ST_Agedge_s)
    {
        java.io.PrintStream $r0, $r10;
        h.ST_Agedge_s r1;
        h.ST_Agrec_s $r2;
        smetana.core.__ptr__ $r3;
        h.ST_Agedgeinfo_t r4;
        h.ST_splines r5;
        smetana.core.CArray $r6, $r14;
        java.lang.Object $r7, $r15;
        h.ST_bezier r8, $r16;
        java.lang.StringBuilder $r9, $r11, $r12;
        int $i0;
        java.lang.String $r13;

        r1 := @parameter0: h.ST_Agedge_s;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("*********** PRINT EDGE ********** ");

        $r2 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r1);

        $r3 = virtualinvoke $r2.<h.ST_Agrec_s: smetana.core.__ptr__ castTo(java.lang.Class)>(class "Lh/ST_Agedgeinfo_t;");

        r4 = (h.ST_Agedgeinfo_t) $r3;

        r5 = r4.<h.ST_Agedgeinfo_t: h.ST_splines spl>;

        $r6 = r5.<h.ST_splines: smetana.core.CArray list>;

        $r7 = virtualinvoke $r6.<smetana.core.CArray: java.lang.Object get__(int)>(0);

        r8 = (h.ST_bezier) $r7;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splines.size=");

        $i0 = r5.<h.ST_splines: int size>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r14 = r5.<h.ST_splines: smetana.core.CArray list>;

        $r15 = virtualinvoke $r14.<smetana.core.CArray: java.lang.Object get__(int)>(0);

        $r16 = (h.ST_bezier) $r15;

        staticinvoke <smetana.core.JUtils: void printDebugBezier(h.ST_bezier)>($r16);

        return;
    }

    private static java.lang.String pointftoString(h.ST_pointf)
    {
        java.lang.StringBuilder $r0;
        h.ST_pointf r3;
        double $d0, $d1;
        java.lang.String $r8;

        r3 := @parameter0: h.ST_pointf;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $d0 = r3.<h.ST_pointf: double x>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ; ");

        $d1 = r3.<h.ST_pointf: double y>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static void printDebugBezier(h.ST_bezier)
    {
        java.lang.StringBuilder $r0, $r2, $r4, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r18, $r21, $r23, $r25, $r28, $r33, $r35, $r37;
        java.io.PrintStream $r1, $r7, $r12, $r17, $r24, $r34;
        h.ST_bezier r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r5, $r10, $r15, $r20, $r22, $r27, $r29, $r36, $r38;
        h.ST_pointf $r19, $r26, r32;
        smetana.core.CArray $r30;
        java.lang.Object $r31;

        r3 := @parameter0: h.ST_bezier;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bezier.size=");

        $i0 = r3.<h.ST_bezier: int size>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bezier.sflag=");

        $i1 = r3.<h.ST_bezier: int sflag>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splines.eflag=");

        $i2 = r3.<h.ST_bezier: int eflag>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bezier.sp=");

        $r19 = r3.<h.ST_bezier: h.ST_pointf sp>;

        $r20 = staticinvoke <smetana.core.JUtils: java.lang.String pointftoString(h.ST_pointf)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r24 = <java.lang.System: java.io.PrintStream err>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bezier.ep=");

        $r26 = r3.<h.ST_bezier: h.ST_pointf ep>;

        $r27 = staticinvoke <smetana.core.JUtils: java.lang.String pointftoString(h.ST_pointf)>($r26);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r29);

        i4 = 0;

     label1:
        $i3 = r3.<h.ST_bezier: int size>;

        if i4 >= $i3 goto label2;

        $r30 = r3.<h.ST_bezier: smetana.core.CArray list>;

        $r31 = virtualinvoke $r30.<smetana.core.CArray: java.lang.Object get__(int)>(i4);

        r32 = (h.ST_pointf) $r31;

        $r34 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt=");

        $r36 = staticinvoke <smetana.core.JUtils: java.lang.String pointftoString(h.ST_pointf)>(r32);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r38);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public static smetana.core.__ptr__ create(java.lang.Class, smetana.core.__ptr__)
    {
        java.lang.Class r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.String $r2;
        h.ST_Agclos_s $r3;
        h.ST_Agnode_s $r4;
        h.ST_Agsubnode_s $r5;
        h.ST_Agraph_s $r6;
        h.ST_dtdata_s $r7;
        h.ST_Agdatadict_s $r8;
        h.ST_Agattr_s $r9;
        h.ST_Agraphinfo_t $r10;
        h.ST_Agnodeinfo_t $r11;
        h.ST_Agedgeinfo_t $r12;
        h.ST_path $r13;
        h.ST_dthold_s $r14;
        h.ST_Agsym_s $r15;
        h.ST_Agedgepair_s $r16;
        smetana.core.__ptr__ r17;

        r0 := @parameter0: java.lang.Class;

        r17 := @parameter1: smetana.core.__ptr__;

        if r0 != class "Lh/ST_Agedgepair_s;" goto label01;

        $r16 = new h.ST_Agedgepair_s;

        specialinvoke $r16.<h.ST_Agedgepair_s: void <init>()>();

        return $r16;

     label01:
        if r0 != class "Lh/ST_Agsym_s;" goto label02;

        $r15 = new h.ST_Agsym_s;

        specialinvoke $r15.<h.ST_Agsym_s: void <init>()>();

        return $r15;

     label02:
        if r0 != class "Lh/ST_dthold_s;" goto label03;

        $r14 = new h.ST_dthold_s;

        specialinvoke $r14.<h.ST_dthold_s: void <init>()>();

        return $r14;

     label03:
        if r0 != class "Lh/ST_path;" goto label04;

        $r13 = new h.ST_path;

        specialinvoke $r13.<h.ST_path: void <init>()>();

        return $r13;

     label04:
        if r0 != class "Lh/ST_Agedgeinfo_t;" goto label05;

        $r12 = new h.ST_Agedgeinfo_t;

        specialinvoke $r12.<h.ST_Agedgeinfo_t: void <init>()>();

        return $r12;

     label05:
        if r0 != class "Lh/ST_Agnodeinfo_t;" goto label06;

        $r11 = new h.ST_Agnodeinfo_t;

        specialinvoke $r11.<h.ST_Agnodeinfo_t: void <init>()>();

        return $r11;

     label06:
        if r0 != class "Lh/ST_Agraphinfo_t;" goto label07;

        $r10 = new h.ST_Agraphinfo_t;

        specialinvoke $r10.<h.ST_Agraphinfo_t: void <init>()>();

        return $r10;

     label07:
        if r0 != class "Lh/ST_Agattr_s;" goto label08;

        $r9 = new h.ST_Agattr_s;

        specialinvoke $r9.<h.ST_Agattr_s: void <init>()>();

        return $r9;

     label08:
        if r0 != class "Lh/ST_Agdatadict_s;" goto label09;

        $r8 = new h.ST_Agdatadict_s;

        specialinvoke $r8.<h.ST_Agdatadict_s: void <init>()>();

        return $r8;

     label09:
        if r0 != class "Lh/ST_dtdata_s;" goto label10;

        $r7 = new h.ST_dtdata_s;

        specialinvoke $r7.<h.ST_dtdata_s: void <init>()>();

        return $r7;

     label10:
        if r0 != class "Lh/ST_Agraph_s;" goto label11;

        $r6 = new h.ST_Agraph_s;

        specialinvoke $r6.<h.ST_Agraph_s: void <init>()>();

        return $r6;

     label11:
        if r0 != class "Lh/ST_Agsubnode_s;" goto label12;

        $r5 = new h.ST_Agsubnode_s;

        specialinvoke $r5.<h.ST_Agsubnode_s: void <init>()>();

        return $r5;

     label12:
        if r0 != class "Lh/ST_Agnode_s;" goto label13;

        $r4 = new h.ST_Agnode_s;

        specialinvoke $r4.<h.ST_Agnode_s: void <init>()>();

        return $r4;

     label13:
        if r0 != class "Lh/ST_Agclos_s;" goto label14;

        $r3 = new h.ST_Agclos_s;

        specialinvoke $r3.<h.ST_Agclos_s: void <init>()>();

        return $r3;

     label14:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    static void <clinit>()
    {
        <smetana.core.JUtils: int USHRT_MAX> = 65535;

        return;
    }
}
