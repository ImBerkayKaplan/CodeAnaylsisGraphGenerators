public class net.sourceforge.plantuml.api.NumberAnalyzed2 extends java.lang.Object implements net.sourceforge.plantuml.api.INumberAnalyzed
{
    private static final int SLIDING_WINDOW;
    private final java.util.concurrent.atomic.AtomicLong nb;
    private final java.util.concurrent.atomic.AtomicLong sum;
    private final java.util.concurrent.atomic.AtomicLong min;
    private final java.util.concurrent.atomic.AtomicLong max;
    private final java.util.concurrent.atomic.AtomicLong sumOfSquare;
    private final java.util.concurrent.atomic.AtomicLong sliddingSum;
    private final java.lang.String name;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String r7;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        r7 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sumOfSquare> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum> = $r6;

        r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String name> = r7;

        return;
    }

    public void reset()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r2 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r3 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r4 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r5 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sumOfSquare>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r6 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        return;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        specialinvoke r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: void <init>(java.lang.String)>("");

        return;
    }

    public final void save(java.util.prefs.Preferences)
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.lang.String $r1, $r4, $r7, $r8;
        int $i0;
        java.util.prefs.Preferences r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        r2 := @parameter0: java.util.prefs.Preferences;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String name>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".saved");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String getSavedString()>();

        virtualinvoke r2.<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>($r7, $r8);

        return;
    }

    protected java.lang.String getSavedString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r12, $r13, $r16, $r17, $r20, $r21, $r24;
        net.sourceforge.plantuml.api.NumberAnalyzed2 r1;
        java.util.concurrent.atomic.AtomicLong $r2, $r6, $r10, $r14, $r18, $r22;
        java.lang.String $r3, $r7, $r11, $r15, $r19, $r23, r25;

        r1 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String longToString(java.util.concurrent.atomic.AtomicLong)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r6 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String longToString(java.util.concurrent.atomic.AtomicLong)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r10 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String longToString(java.util.concurrent.atomic.AtomicLong)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r14 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $r15 = virtualinvoke r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String longToString(java.util.concurrent.atomic.AtomicLong)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r18 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sumOfSquare>;

        $r19 = virtualinvoke r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String longToString(java.util.concurrent.atomic.AtomicLong)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r22 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum>;

        $r23 = virtualinvoke r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String longToString(java.util.concurrent.atomic.AtomicLong)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return r25;
    }

    protected final java.lang.String longToString(java.util.concurrent.atomic.AtomicLong)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;
        java.lang.String $r1;
        net.sourceforge.plantuml.api.NumberAnalyzed2 r2;

        r2 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>($l0, 36);

        return $r1;
    }

    public static net.sourceforge.plantuml.api.NumberAnalyzed2 load(java.lang.String, java.util.prefs.Preferences)
    {
        java.util.prefs.Preferences r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r15, $r17, $r18, $r21, $r22, $r23;
        java.lang.String r2, $r5, r6, $r9, $r10, $r11, $r12, $r13, $r14, $r19, $r24;
        int $i0;
        java.util.StringTokenizer $r7;
        net.sourceforge.plantuml.api.NumberAnalyzed2 $r8;
        long $l1, $l2, $l3, $l4, $l5, $l6;
        java.io.PrintStream $r16;
        java.lang.Exception $r20;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.prefs.Preferences;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".saved");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>($r5, "");

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot load ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r19);

        return null;

     label1:
        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r6, ";");

        $r8 = new net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r9 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r9, 36);

        $r10 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r10, 36);

        $r11 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r11, 36);

        $r12 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r12, 36);

        $r13 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r13, 36);

        $r14 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r14, 36);

        specialinvoke $r8.<net.sourceforge.plantuml.api.NumberAnalyzed2: void <init>(java.lang.String,long,long,long,long,long,long)>(r2, $l1, $l2, $l3, $l4, $l5, $l6);

     label2:
        return $r8;

     label3:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.Exception: void printStackTrace()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r24);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r15;
        net.sourceforge.plantuml.api.NumberAnalyzed2 r2;
        java.util.concurrent.atomic.AtomicLong $r3, $r6, $r9, $r12;
        long $l0;
        java.lang.String $r16;

        r2 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sum=");

        $r3 = r2.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nb=");

        $r6 = r2.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" min=");

        $r9 = r2.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" max=");

        $r12 = r2.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mean=");

        $l0 = virtualinvoke r2.<net.sourceforge.plantuml.api.NumberAnalyzed2: long getMean()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    protected void <init>(java.lang.String, long, long, long, long, long, long)
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.lang.String r1;
        long l0, l1, l2, l3, l4, l5;
        java.util.concurrent.atomic.AtomicLong $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        l3 := @parameter4: long;

        l4 := @parameter5: long;

        l5 := @parameter6: long;

        specialinvoke r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: void <init>(java.lang.String)>(r1);

        $r2 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l0);

        $r3 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l1);

        $r4 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l2);

        $r5 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l3);

        $r6 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sumOfSquare>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l4);

        $r7 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l5);

        return;
    }

    public net.sourceforge.plantuml.api.INumberAnalyzed getCopyImmutable()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 $r0, r1;
        java.util.concurrent.atomic.AtomicLong $r2, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r3;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r1 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r0 = new net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r3 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String name>;

        $r2 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $l1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r5 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $l2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r6 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $l3 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r7 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sumOfSquare>;

        $l4 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r8 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum>;

        $l5 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: void <init>(java.lang.String,long,long,long,long,long,long)>($r3, $l0, $l1, $l2, $l3, $l4, $l5);

        return $r0;
    }

    public void addValue(long)
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        long $l1, l3, $l4, $l6, $l10, $l11, $l12, $l13, $l14;
        byte $b2, $b5, $b7;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        l3 := @parameter0: long;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r2 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b2 = $l1 cmp 1L;

        if $b2 != 0 goto label1;

        $r7 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l3);

        $r8 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l3);

        goto label3;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $l4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b5 = l3 cmp $l4;

        if $b5 <= 0 goto label2;

        $r6 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l3);

        goto label3;

     label2:
        $r4 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $l6 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b7 = l3 cmp $l6;

        if $b7 >= 0 goto label3;

        $r5 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l3);

     label3:
        $r9 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l3);

        $r10 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sumOfSquare>;

        $l10 = l3 * l3;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l10);

        $r11 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum>;

        $r12 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum>;

        $l11 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l12 = $l11 * 511L;

        $l13 = $l12 / 512L;

        $l14 = $l13 + l3;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l14);

        return;
    }

    public void add(net.sourceforge.plantuml.api.NumberAnalyzed2)
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0, r1;
        java.util.concurrent.atomic.AtomicLong $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        long $l0, $l2, $l4, $l5, $l6, $l7, $l8, $l9;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        r1 := @parameter0: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r3 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $r2 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l0);

        $r5 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $r4 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l2);

        $r7 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $r6 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $l4 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r8 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $l5 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>($l4, $l5);

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l6);

        $r10 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $r9 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $l7 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r11 = r1.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $l8 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l9 = staticinvoke <java.lang.Math: long max(long,long)>($l7, $l8);

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l9);

        return;
    }

    public final long getNb()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public final long getSum()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public final long getMin()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong min>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public final long getMax()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong max>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public final long getMean()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        long $l0, $l2, $l3, $l4;
        byte $b1;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0L;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r3 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l3 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l4 = $l2 / $l3;

        return $l4;
    }

    public final long getSliddingMean()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0, $l2, $l4, $l5, $l6, $l7, $l8, $l9;
        byte $b1, $b3;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0L;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b3 = $l2 cmp 512L;

        if $b3 >= 0 goto label2;

        $r5 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sum>;

        $l7 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r6 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l8 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l9 = $l7 / $l8;

        return $l9;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong sliddingSum>;

        $l4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.util.concurrent.atomic.AtomicLong nb>;

        $l5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l6 = $l4 / $l5;

        return $l6;
    }

    public final java.lang.String getName()
    {
        net.sourceforge.plantuml.api.NumberAnalyzed2 r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.api.NumberAnalyzed2;

        $r1 = r0.<net.sourceforge.plantuml.api.NumberAnalyzed2: java.lang.String name>;

        return $r1;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.api.NumberAnalyzed2: int SLIDING_WINDOW> = 512;

        return;
    }
}
