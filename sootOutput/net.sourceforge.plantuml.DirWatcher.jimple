public class net.sourceforge.plantuml.DirWatcher extends java.lang.Object
{
    private final java.io.File dir;
    private final net.sourceforge.plantuml.Option option;
    private final java.lang.String pattern;
    private final java.util.Map modifieds;

    public void <init>(java.io.File, net.sourceforge.plantuml.Option, java.lang.String)
    {
        net.sourceforge.plantuml.DirWatcher r0;
        java.util.HashMap $r1;
        java.io.File r2;
        net.sourceforge.plantuml.Option r3;
        java.lang.String r4;

        r0 := @this: net.sourceforge.plantuml.DirWatcher;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: net.sourceforge.plantuml.Option;

        r4 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.DirWatcher: java.util.Map modifieds> = $r1;

        r0.<net.sourceforge.plantuml.DirWatcher: java.io.File dir> = r2;

        r0.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option> = r3;

        r0.<net.sourceforge.plantuml.DirWatcher: java.lang.String pattern> = r4;

        return;
    }

    public java.util.List buildCreatedFiles() throws java.io.IOException, java.lang.InterruptedException
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.DirWatcher r2;
        java.io.File $r3, $r6, r8, $r16;
        java.io.File[] $r4, r7;
        java.util.List $r5, $r18, $r26;
        int i0, $i1, i2;
        boolean $z0, $z1, $z4, $z5, z6, $z7;
        java.lang.String $r9, $r20;
        java.util.Map $r10, $r29;
        java.lang.Object $r11, $r31;
        net.sourceforge.plantuml.FileWatcher r12, $r28;
        net.sourceforge.plantuml.SourceFileReader $r13;
        net.sourceforge.plantuml.preproc.Defines $r14;
        net.sourceforge.plantuml.Option $r15, $r17, $r19, $r21, $r33;
        net.sourceforge.plantuml.FileFormatOption $r22;
        java.util.Set $r24, r25;
        java.util.Iterator r27;
        net.sourceforge.plantuml.GeneratedImage r32;

        r2 := @this: net.sourceforge.plantuml.DirWatcher;

        z6 = 0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.DirWatcher: java.io.File dir>;

        $r4 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles()>();

        if $r4 == null goto label10;

        $r6 = r2.<net.sourceforge.plantuml.DirWatcher: java.io.File dir>;

        r7 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r7;

        i2 = 0;

     label01:
        if i2 >= i0 goto label10;

        r8 = r7[i2];

        if z6 == 0 goto label02;

        goto label09;

     label02:
        $z0 = virtualinvoke r8.<java.io.File: boolean isFile()>();

        if $z0 != 0 goto label03;

        goto label09;

     label03:
        $r9 = virtualinvoke r8.<java.io.File: java.lang.String getName()>();

        $z1 = specialinvoke r2.<net.sourceforge.plantuml.DirWatcher: boolean fileToProcess(java.lang.String)>($r9);

        if $z1 != 0 goto label04;

        goto label09;

     label04:
        $r10 = r2.<net.sourceforge.plantuml.DirWatcher: java.util.Map modifieds>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r12 = (net.sourceforge.plantuml.FileWatcher) $r11;

        if r12 == null goto label05;

        $z5 = virtualinvoke r12.<net.sourceforge.plantuml.FileWatcher: boolean hasChanged()>();

        if $z5 == 0 goto label09;

     label05:
        $r13 = new net.sourceforge.plantuml.SourceFileReader;

        $r14 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(java.io.File)>(r8);

        $r15 = r2.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.Option: java.io.File getOutputDir()>();

        $r17 = r2.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.Option: java.util.List getConfig()>();

        $r19 = r2.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r21 = r2.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        specialinvoke $r13.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r14, r8, $r16, $r18, $r20, $r22);

        $r24 = virtualinvoke $r13.<net.sourceforge.plantuml.SourceFileReader: java.util.Set getIncludedFiles()>();

        r25 = staticinvoke <net.sourceforge.plantuml.preproc.FileWithSuffix: java.util.Set convert(java.util.Set)>($r24);

        interfaceinvoke r25.<java.util.Set: boolean add(java.lang.Object)>(r8);

        $r26 = virtualinvoke $r13.<net.sourceforge.plantuml.SourceFileReader: java.util.List getGeneratedImages()>();

        r27 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z7 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r31 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r32 = (net.sourceforge.plantuml.GeneratedImage) $r31;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r32);

        $r33 = r2.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $z4 = virtualinvoke $r33.<net.sourceforge.plantuml.Option: boolean isFailfastOrFailfast2()>();

        if $z4 == 0 goto label07;

        $i1 = interfaceinvoke r32.<net.sourceforge.plantuml.GeneratedImage: int lineErrorRaw()>();

        if $i1 == -1 goto label07;

        z6 = 1;

     label07:
        goto label06;

     label08:
        $r29 = r2.<net.sourceforge.plantuml.DirWatcher: java.util.Map modifieds>;

        $r28 = new net.sourceforge.plantuml.FileWatcher;

        specialinvoke $r28.<net.sourceforge.plantuml.FileWatcher: void <init>(java.util.Set)>(r25);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r28);

     label09:
        i2 = i2 + 1;

        goto label01;

     label10:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    public java.io.File getErrorFile() throws java.io.IOException, java.lang.InterruptedException
    {
        net.sourceforge.plantuml.DirWatcher r0;
        java.io.File $r1, $r3, r5, $r13;
        java.io.File[] $r2, r4;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r6, $r17;
        java.util.Map $r7;
        java.lang.Object $r8;
        net.sourceforge.plantuml.FileWatcher r9;
        net.sourceforge.plantuml.SourceFileReader $r10;
        net.sourceforge.plantuml.preproc.Defines $r11;
        net.sourceforge.plantuml.Option $r12, $r14, $r16, $r18;
        java.util.List $r15;
        net.sourceforge.plantuml.FileFormatOption $r19;

        r0 := @this: net.sourceforge.plantuml.DirWatcher;

        $r1 = r0.<net.sourceforge.plantuml.DirWatcher: java.io.File dir>;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        if $r2 == null goto label6;

        $r3 = r0.<net.sourceforge.plantuml.DirWatcher: java.io.File dir>;

        r4 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r5 = r4[i1];

        $z0 = virtualinvoke r5.<java.io.File: boolean isFile()>();

        if $z0 != 0 goto label2;

        goto label5;

     label2:
        $r6 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $z1 = specialinvoke r0.<net.sourceforge.plantuml.DirWatcher: boolean fileToProcess(java.lang.String)>($r6);

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $r7 = r0.<net.sourceforge.plantuml.DirWatcher: java.util.Map modifieds>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r9 = (net.sourceforge.plantuml.FileWatcher) $r8;

        if r9 == null goto label4;

        $z3 = virtualinvoke r9.<net.sourceforge.plantuml.FileWatcher: boolean hasChanged()>();

        if $z3 == 0 goto label5;

     label4:
        $r10 = new net.sourceforge.plantuml.SourceFileReader;

        $r11 = staticinvoke <net.sourceforge.plantuml.preproc.Defines: net.sourceforge.plantuml.preproc.Defines createWithFileName(java.io.File)>(r5);

        $r12 = r0.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.Option: java.io.File getOutputDir()>();

        $r14 = r0.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.Option: java.util.List getConfig()>();

        $r16 = r0.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.Option: java.lang.String getCharset()>();

        $r18 = r0.<net.sourceforge.plantuml.DirWatcher: net.sourceforge.plantuml.Option option>;

        $r19 = virtualinvoke $r18.<net.sourceforge.plantuml.Option: net.sourceforge.plantuml.FileFormatOption getFileFormatOption()>();

        specialinvoke $r10.<net.sourceforge.plantuml.SourceFileReader: void <init>(net.sourceforge.plantuml.preproc.Defines,java.io.File,java.io.File,java.util.List,java.lang.String,net.sourceforge.plantuml.FileFormatOption)>($r11, r5, $r13, $r15, $r17, $r19);

        $z2 = virtualinvoke $r10.<net.sourceforge.plantuml.SourceFileReader: boolean hasError()>();

        if $z2 == 0 goto label5;

        return r5;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return null;
    }

    private boolean fileToProcess(java.lang.String)
    {
        java.lang.String r0, $r2;
        net.sourceforge.plantuml.DirWatcher r1;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.DirWatcher;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<net.sourceforge.plantuml.DirWatcher: java.lang.String pattern>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>($r2);

        return $z0;
    }

    public final java.io.File getDir()
    {
        net.sourceforge.plantuml.DirWatcher r0;
        java.io.File $r1;

        r0 := @this: net.sourceforge.plantuml.DirWatcher;

        $r1 = r0.<net.sourceforge.plantuml.DirWatcher: java.io.File dir>;

        return $r1;
    }
}
