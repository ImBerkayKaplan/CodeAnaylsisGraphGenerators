public class net.sourceforge.plantuml.creole.SheetBlock1 extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.creole.atom.Atom, net.sourceforge.plantuml.creole.Stencil
{
    private final net.sourceforge.plantuml.creole.Sheet sheet;
    private java.util.List stripes;
    private java.util.Map heights;
    private java.util.Map widths;
    private java.util.Map positions;
    private net.sourceforge.plantuml.ugraphic.MinMax minMax;
    private final net.sourceforge.plantuml.LineBreakStrategy maxWidth;
    private final double padding;
    private final double marginX1;
    private final double marginX2;

    public java.util.List splitInTwo(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.creole.SheetBlock1 r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        double d0;

        r1 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        $r0 = new java.lang.UnsupportedOperationException;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    public void <init>(net.sourceforge.plantuml.creole.Sheet, net.sourceforge.plantuml.LineBreakStrategy, double)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        net.sourceforge.plantuml.creole.Sheet r1;
        net.sourceforge.plantuml.LineBreakStrategy r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r1 := @parameter0: net.sourceforge.plantuml.creole.Sheet;

        r2 := @parameter1: net.sourceforge.plantuml.LineBreakStrategy;

        d0 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.creole.SheetBlock1: void <init>(net.sourceforge.plantuml.creole.Sheet,net.sourceforge.plantuml.LineBreakStrategy,double,double,double)>(r1, r2, d0, 0.0, 0.0);

        return;
    }

    public void <init>(net.sourceforge.plantuml.creole.Sheet, net.sourceforge.plantuml.LineBreakStrategy, double, double, double)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        net.sourceforge.plantuml.creole.Sheet r1;
        net.sourceforge.plantuml.LineBreakStrategy r2, $r4;
        java.lang.Object $r3;
        double d0, d1, d2;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r1 := @parameter0: net.sourceforge.plantuml.creole.Sheet;

        r2 := @parameter1: net.sourceforge.plantuml.LineBreakStrategy;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.creole.Sheet sheet> = r1;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = (net.sourceforge.plantuml.LineBreakStrategy) $r3;

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.LineBreakStrategy maxWidth> = $r4;

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: double padding> = d0;

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: double marginX1> = d1;

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: double marginX2> = d2;

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        net.sourceforge.plantuml.creole.Sheet $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        $r1 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.creole.Sheet sheet>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.creole.Sheet: java.lang.String toString()>();

        return $r2;
    }

    public net.sourceforge.plantuml.graphic.HorizontalAlignment getCellAlignment()
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        java.util.List $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.creole.Stripe r4;
        boolean $z0;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r5, $r7, $r8;
        net.sourceforge.plantuml.creole.legacy.StripeSimple $r6;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        $r1 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.List stripes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        $r8 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        return $r8;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.List stripes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (net.sourceforge.plantuml.creole.Stripe) $r3;

        $z0 = r4 instanceof net.sourceforge.plantuml.creole.legacy.StripeSimple;

        if $z0 == 0 goto label2;

        $r6 = (net.sourceforge.plantuml.creole.legacy.StripeSimple) r4;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.creole.legacy.StripeSimple: net.sourceforge.plantuml.graphic.HorizontalAlignment getCellAlignment()>();

        return $r7;

     label2:
        $r5 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        return $r5;
    }

    private void initMap(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        java.util.Map $r1, $r15, $r17, $r28, $r31, $r41, $r42, $r47;
        java.util.ArrayList $r2;
        net.sourceforge.plantuml.creole.Sheet $r3, $r9, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        java.util.LinkedHashMap $r4, $r5, $r6;
        net.sourceforge.plantuml.ugraphic.MinMax $r7, $r45, $r46;
        java.util.List $r8, $r24, $r36, $r40, $r55, $r56;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r10, $r11, $r13, $r14;
        java.util.Collection $r16;
        java.util.Set $r18;
        java.lang.Object $r19, $r20, $r22, $r26, $r29, $r34, $r35, $r50, $r51;
        java.lang.Double $r21, $r43, $r48, r63;
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7, d8;
        byte $b0, $b1, b3;
        net.sourceforge.plantuml.creole.Stripe $r23, r52, r59;
        java.util.Iterator r25, r57, r58, r60, r62, r64;
        net.sourceforge.plantuml.creole.atom.Atom r27, r61;
        net.sourceforge.plantuml.creole.Position r30, $r32;
        int $i2;
        net.sourceforge.plantuml.creole.Sea $r37;
        net.sourceforge.plantuml.graphic.StringBounder r38;
        net.sourceforge.plantuml.creole.Fission $r53;
        net.sourceforge.plantuml.LineBreakStrategy $r54;
        java.util.Map$Entry r65;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r38 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map positions>;

        if $r1 == null goto label01;

        return;

     label01:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.List stripes> = $r2;

        $r3 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.creole.Sheet sheet>;

        r57 = virtualinvoke $r3.<net.sourceforge.plantuml.creole.Sheet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r51 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r52 = (net.sourceforge.plantuml.creole.Stripe) $r51;

        $r55 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.List stripes>;

        $r53 = new net.sourceforge.plantuml.creole.Fission;

        $r54 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.LineBreakStrategy maxWidth>;

        specialinvoke $r53.<net.sourceforge.plantuml.creole.Fission: void <init>(net.sourceforge.plantuml.creole.Stripe,net.sourceforge.plantuml.LineBreakStrategy)>(r52, $r54);

        $r56 = virtualinvoke $r53.<net.sourceforge.plantuml.creole.Fission: java.util.List getSplitted(net.sourceforge.plantuml.graphic.StringBounder)>(r38);

        interfaceinvoke $r55.<java.util.List: boolean addAll(java.util.Collection)>($r56);

        goto label02;

     label03:
        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map positions> = $r4;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map widths> = $r5;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map heights> = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(1);

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.ugraphic.MinMax minMax> = $r7;

        d4 = 0.0;

        $r8 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.List stripes>;

        r58 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label08;

        $r35 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (net.sourceforge.plantuml.creole.Stripe) $r35;

        $r36 = interfaceinvoke r59.<net.sourceforge.plantuml.creole.Stripe: java.util.List getAtoms()>();

        $i2 = interfaceinvoke $r36.<java.util.List: int size()>();

        if $i2 != 0 goto label05;

        goto label04;

     label05:
        $r37 = new net.sourceforge.plantuml.creole.Sea;

        specialinvoke $r37.<net.sourceforge.plantuml.creole.Sea: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r38);

        $r40 = interfaceinvoke r59.<net.sourceforge.plantuml.creole.Stripe: java.util.List getAtoms()>();

        r60 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z4 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label07;

        $r50 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (net.sourceforge.plantuml.creole.atom.Atom) $r50;

        virtualinvoke $r37.<net.sourceforge.plantuml.creole.Sea: void add(net.sourceforge.plantuml.creole.atom.Atom)>(r61);

        goto label06;

     label07:
        virtualinvoke $r37.<net.sourceforge.plantuml.creole.Sea: void doAlign()>();

        virtualinvoke $r37.<net.sourceforge.plantuml.creole.Sea: void translateMinYto(double)>(d4);

        $r41 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map positions>;

        virtualinvoke $r37.<net.sourceforge.plantuml.creole.Sea: void exportAllPositions(java.util.Map)>($r41);

        d5 = virtualinvoke $r37.<net.sourceforge.plantuml.creole.Sea: double getWidth()>();

        $r42 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map widths>;

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, $r43);

        $r45 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $r46 = virtualinvoke $r37.<net.sourceforge.plantuml.creole.Sea: net.sourceforge.plantuml.ugraphic.MinMax update(net.sourceforge.plantuml.ugraphic.MinMax)>($r45);

        r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.ugraphic.MinMax minMax> = $r46;

        d6 = virtualinvoke $r37.<net.sourceforge.plantuml.creole.Sea: double getHeight()>();

        $r47 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map heights>;

        $r48 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, $r48);

        d4 = d4 + d6;

        goto label04;

     label08:
        $r9 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.creole.Sheet sheet>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.creole.Sheet: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        $r11 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        if $r10 != $r11 goto label09;

        b3 = 2;

        goto label11;

     label09:
        $r12 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.creole.Sheet sheet>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.creole.Sheet: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        $r14 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        if $r13 != $r14 goto label10;

        b3 = 1;

        goto label11;

     label10:
        b3 = 0;

     label11:
        if b3 == 0 goto label18;

        d7 = 0.0;

        $r15 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map widths>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        r62 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r34 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.lang.Double) $r34;

        $d3 = virtualinvoke r63.<java.lang.Double: double doubleValue()>();

        $b1 = $d3 cmpl d7;

        if $b1 <= 0 goto label13;

        d7 = virtualinvoke r63.<java.lang.Double: double doubleValue()>();

     label13:
        goto label12;

     label14:
        $r17 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map widths>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set entrySet()>();

        r64 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z2 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label18;

        $r19 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r65.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (java.lang.Double) $r20;

        $d0 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        d8 = d7 - $d0;

        $b0 = d8 cmpl 0.0;

        if $b0 <= 0 goto label17;

        $r22 = interfaceinvoke r65.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (net.sourceforge.plantuml.creole.Stripe) $r22;

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.creole.Stripe: java.util.List getAtoms()>();

        r25 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z3 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r26 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r27 = (net.sourceforge.plantuml.creole.atom.Atom) $r26;

        $r28 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map positions>;

        $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        r30 = (net.sourceforge.plantuml.creole.Position) $r29;

        $r31 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map positions>;

        $d1 = (double) b3;

        $d2 = d8 / $d1;

        $r32 = virtualinvoke r30.<net.sourceforge.plantuml.creole.Position: net.sourceforge.plantuml.creole.Position translateX(double)>($d2);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, $r32);

        goto label16;

     label17:
        goto label15;

     label18:
        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.ugraphic.MinMax $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3, $r4;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<net.sourceforge.plantuml.creole.SheetBlock1: void initMap(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()>();

        $d0 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: double padding>;

        $d1 = 2.0 * $d0;

        $r4 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double)>($r3, $d1);

        return $r4;
    }

    public java.awt.geom.Rectangle2D getInnerPosition(java.lang.String, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.InnerStrategy)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.InnerStrategy r3;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.InnerStrategy;

        return null;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        double $d0, $d1, $d2;
        byte $b0;
        java.util.List $r2, $r6;
        java.util.Iterator r3, r7;
        java.lang.Object $r4, $r8, $r11;
        net.sourceforge.plantuml.creole.Stripe r5;
        boolean $z0, $z1;
        net.sourceforge.plantuml.creole.atom.Atom r9;
        java.util.Map $r10;
        net.sourceforge.plantuml.creole.Position r12;
        net.sourceforge.plantuml.ugraphic.UGraphic $r13, r15;
        net.sourceforge.plantuml.ugraphic.UTranslate $r14;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r15 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.creole.SheetBlock1: void initMap(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $d0 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: double padding>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $r14 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d2 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: double padding>;

        $d1 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: double padding>;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d2, $d1);

        r15 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r14);

     label1:
        $r2 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.List stripes>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.creole.Stripe) $r4;

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.creole.Stripe: java.util.List getAtoms()>();

        r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.creole.atom.Atom) $r8;

        $r10 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: java.util.Map positions>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r12 = (net.sourceforge.plantuml.creole.Position) $r11;

        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.creole.Position: net.sourceforge.plantuml.ugraphic.UGraphic translate(net.sourceforge.plantuml.ugraphic.UGraphic)>(r15);

        interfaceinvoke r9.<net.sourceforge.plantuml.creole.atom.Atom: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r13);

        goto label3;

     label4:
        goto label2;

     label5:
        return;
    }

    public double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        double $d0, $d1, d2;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d2 := @parameter1: double;

        $d0 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: double marginX1>;

        $d1 = neg $d0;

        return $d1;
    }

    public double getEndingX(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.creole.SheetBlock1 r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        double $d0, $d1, $d2, d3;

        r0 := @this: net.sourceforge.plantuml.creole.SheetBlock1;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d3 := @parameter1: double;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.creole.SheetBlock1: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = r0.<net.sourceforge.plantuml.creole.SheetBlock1: double marginX2>;

        $d2 = $d0 + $d1;

        return $d2;
    }
}
