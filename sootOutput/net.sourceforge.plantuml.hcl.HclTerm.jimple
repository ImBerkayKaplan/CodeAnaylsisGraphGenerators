public class net.sourceforge.plantuml.hcl.HclTerm extends java.lang.Object
{
    private final net.sourceforge.plantuml.hcl.SymbolType type;
    private final java.lang.String data;

    public void <init>(net.sourceforge.plantuml.hcl.SymbolType)
    {
        net.sourceforge.plantuml.hcl.HclTerm r0;
        net.sourceforge.plantuml.hcl.SymbolType r1;

        r0 := @this: net.sourceforge.plantuml.hcl.HclTerm;

        r1 := @parameter0: net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type> = r1;

        r0.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String data> = null;

        return;
    }

    public void <init>(net.sourceforge.plantuml.hcl.SymbolType, java.lang.String)
    {
        net.sourceforge.plantuml.hcl.HclTerm r0;
        net.sourceforge.plantuml.hcl.SymbolType r1;
        java.lang.String r2, $r4;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.hcl.HclTerm;

        r1 := @parameter0: net.sourceforge.plantuml.hcl.SymbolType;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type> = r1;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = (java.lang.String) $r3;

        r0.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String data> = $r4;

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.hcl.HclTerm r0;
        java.lang.String $r1, $r6, $r9, $r11;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8;
        net.sourceforge.plantuml.hcl.SymbolType $r3, $r10;

        r0 := @this: net.sourceforge.plantuml.hcl.HclTerm;

        $r1 = r0.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String data>;

        if $r1 != null goto label1;

        $r10 = r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.hcl.SymbolType: java.lang.String toString()>();

        return $r11;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r6 = r0.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String data>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public net.sourceforge.plantuml.hcl.SymbolType getType()
    {
        net.sourceforge.plantuml.hcl.HclTerm r0;
        net.sourceforge.plantuml.hcl.SymbolType $r1;

        r0 := @this: net.sourceforge.plantuml.hcl.HclTerm;

        $r1 = r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type>;

        return $r1;
    }

    public java.lang.String getData()
    {
        net.sourceforge.plantuml.hcl.HclTerm r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.hcl.HclTerm;

        $r1 = r0.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String data>;

        return $r1;
    }

    public boolean is(net.sourceforge.plantuml.hcl.SymbolType)
    {
        net.sourceforge.plantuml.hcl.HclTerm r0;
        net.sourceforge.plantuml.hcl.SymbolType r1, $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.hcl.HclTerm;

        r1 := @parameter0: net.sourceforge.plantuml.hcl.SymbolType;

        $r2 = r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean is(net.sourceforge.plantuml.hcl.SymbolType, net.sourceforge.plantuml.hcl.SymbolType)
    {
        net.sourceforge.plantuml.hcl.HclTerm r0;
        net.sourceforge.plantuml.hcl.SymbolType r1, $r2, r3, $r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.hcl.HclTerm;

        r1 := @parameter0: net.sourceforge.plantuml.hcl.SymbolType;

        r3 := @parameter1: net.sourceforge.plantuml.hcl.SymbolType;

        $r2 = r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type>;

        if $r2 == r1 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.hcl.HclTerm: net.sourceforge.plantuml.hcl.SymbolType type>;

        if $r4 != r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }
}
