public class net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox;
    private final net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox, net.sourceforge.plantuml.sequencediagram.graphic.LifeLine)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r1;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine> = r2;

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox getParticipantBox()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.LifeLine getLifeLine()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        double d0, d1, d2, d3, $d4, $d5;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r1, $r2, $r5, $r8;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r4;
        net.sourceforge.plantuml.graphic.SymbolContext r6;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r7;
        byte $b0, $b1;
        java.lang.AssertionError $r9, $r14;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        d1 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getLeftShift(double)>(d0);

        $z0 = <net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b1 = d1 cmpl 0.0;

        if $b1 >= 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        d2 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getRightShift(double)>(d0);

        $z1 = <net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $b0 = d2 cmpl 0.0;

        if $b0 >= 0 goto label2;

        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("right=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r9;

     label2:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        d3 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.graphic.SymbolContext getColors()>();

        $r7 = new net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $d4 = d3 - d1;

        $d5 = d3 + d2;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        $z2 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean shadowing()>();

        specialinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void <init>(double,double,net.sourceforge.plantuml.graphic.SymbolContext,boolean)>($d4, $d5, r6, $z2);

        return $r7;
    }

    public void drawLineU22(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean, double)
    {
        double d0, d1, d2, d3;
        byte $b0, $b1, $b2, $b3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        boolean z0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d3 := @parameter2: double;

        z0 := @parameter3: boolean;

        d2 := @parameter4: double;

        $b0 = d3 cmpg d0;

        if $b0 > 0 goto label1;

        return;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        d1 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getDestroy()>();

        $b1 = d1 cmpl 0.0;

        if $b1 == 0 goto label2;

        $b2 = d1 cmpl d0;

        if $b2 <= 0 goto label2;

        $b3 = d1 cmpg d3;

        if $b3 >= 0 goto label2;

        d3 = d1;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void drawLineU22(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean,double)>(r2, d0, d3, z0, d2);

        return;
    }

    public double magicMargin(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double magicMargin(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public void create(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void setCreate(double)>(d0);

        return;
    }

    public double getCreate()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine lifeLine>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getCreate()>();

        return $d0;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r1;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

        return $d0;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/LivingParticipantBox;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: boolean $assertionsDisabled> = $z1;

        return;
    }
}
