public class net.sourceforge.plantuml.sequencediagram.LinkAnchor extends java.lang.Object
{
    private final java.lang.String anchor1;
    private final java.lang.String anchor2;
    private final java.lang.String message;

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.LinkAnchor r0;
        java.lang.String r1, r2, r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LinkAnchor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String anchor1> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String anchor2> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String message> = r3;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9;
        net.sourceforge.plantuml.sequencediagram.LinkAnchor r1;
        java.lang.String $r2, $r5, $r8, $r10;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.LinkAnchor;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String anchor1>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<->");

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String anchor2>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r1.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String message>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public final java.lang.String getAnchor1()
    {
        net.sourceforge.plantuml.sequencediagram.LinkAnchor r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LinkAnchor;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String anchor1>;

        return $r1;
    }

    public final java.lang.String getAnchor2()
    {
        net.sourceforge.plantuml.sequencediagram.LinkAnchor r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LinkAnchor;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String anchor2>;

        return $r1;
    }

    public final java.lang.String getMessage()
    {
        net.sourceforge.plantuml.sequencediagram.LinkAnchor r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.LinkAnchor;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String message>;

        return $r1;
    }

    public void drawAnchor(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.sequencediagram.teoz.CommonTile, net.sourceforge.plantuml.sequencediagram.teoz.CommonTile, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, d7, $d8, d9, d10, d11, $d12, $d13;
        boolean $z0;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.ISkinParam r3;
        net.sourceforge.plantuml.ColorParam $r4;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5, $r27, r31;
        net.sourceforge.plantuml.FontParam $r6;
        net.sourceforge.plantuml.sequencediagram.LinkAnchor r7;
        java.lang.String $r8;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r9, $r14;
        net.sourceforge.plantuml.graphic.TextBlock r10;
        net.sourceforge.plantuml.ugraphic.UPolygon $r11, $r12;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r13, r15;
        net.sourceforge.plantuml.ugraphic.UGraphic r16;
        net.sourceforge.plantuml.style.SName[] $r17;
        net.sourceforge.plantuml.style.SName $r18, $r19, $r20, $r21;
        net.sourceforge.plantuml.style.StyleBuilder $r22;
        net.sourceforge.plantuml.style.PName $r23;
        net.sourceforge.plantuml.style.Value $r24;
        net.sourceforge.plantuml.api.ThemeStyle $r25;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r26;
        net.sourceforge.plantuml.style.StyleSignature r28;
        net.sourceforge.plantuml.style.Style r29;
        net.sourceforge.plantuml.ugraphic.color.HColor r30;
        net.sourceforge.plantuml.graphic.Rainbow r32;
        net.sourceforge.plantuml.cucadiagram.Display r33;

        r7 := @this: net.sourceforge.plantuml.sequencediagram.LinkAnchor;

        r16 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.teoz.CommonTile;

        r3 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double getY()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double getContactPointRelative()>();

        d2 = $d0 + $d1;

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double getY()>();

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double getContactPointRelative()>();

        d5 = $d3 + $d4;

        d6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double getMiddleX()>();

        d7 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: double getMiddleX()>();

        $d8 = d6 + d7;

        d9 = $d8 / 2.0;

        d10 = staticinvoke <java.lang.Math: double min(double,double)>(d2, d5);

        d11 = staticinvoke <java.lang.Math: double max(double,double)>(d2, d5);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r17 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r18 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r17[0] = $r18;

        $r19 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r17[1] = $r19;

        $r20 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName sequenceDiagram>;

        $r17[2] = $r20;

        $r21 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName arrow>;

        $r17[3] = $r21;

        r28 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r17);

        $r22 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r29 = virtualinvoke r28.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r22);

        $r23 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r24 = virtualinvoke r29.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r23);

        $r25 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r26 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r30 = interfaceinvoke $r24.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r25, $r26);

        $r27 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        specialinvoke $r27.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>(r3, r29);

        r31 = $r27;

        goto label2;

     label1:
        $r2 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r4 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        r30 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>(r3, $r4);

        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam ARROW>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r3, $r6, null);

        r31 = $r5;

     label2:
        r32 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow fromColor(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r30, null);

        $r8 = r7.<net.sourceforge.plantuml.sequencediagram.LinkAnchor: java.lang.String message>;

        r33 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r8);

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        r10 = virtualinvoke r33.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r31, $r9, r3);

        $r11 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Arrows: net.sourceforge.plantuml.ugraphic.UPolygon asToUp()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Arrows: net.sourceforge.plantuml.ugraphic.UPolygon asToDown()>();

        $r13 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon)>(r3, $r11, r32, $r12);

        $r14 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        r15 = virtualinvoke $r13.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake withLabel(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r10, $r14);

        $d12 = d10 + 2.0;

        virtualinvoke r15.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d9, $d12);

        $d13 = d11 - 2.0;

        virtualinvoke r15.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d9, $d13);

        virtualinvoke r15.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic)>(r16);

        return;
    }
}
