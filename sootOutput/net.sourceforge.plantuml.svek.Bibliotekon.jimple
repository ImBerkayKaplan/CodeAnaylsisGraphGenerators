public class net.sourceforge.plantuml.svek.Bibliotekon extends java.lang.Object
{
    private final java.util.List allCluster;
    private final java.util.Map nodeMap;
    private final java.util.List lines0;
    private final java.util.List lines1;
    private final java.util.List allLines;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.ArrayList $r1, $r3, $r4, $r5;
        java.util.LinkedHashMap $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines1> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines> = $r5;

        return;
    }

    public net.sourceforge.plantuml.svek.SvekNode createNode(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.svek.IEntityImage, net.sourceforge.plantuml.svek.ColorSequence, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekNode $r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.svek.IEntityImage r2;
        net.sourceforge.plantuml.svek.ColorSequence r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.svek.Bibliotekon r6;
        java.util.Map $r7;

        r6 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.svek.IEntityImage;

        r3 := @parameter2: net.sourceforge.plantuml.svek.ColorSequence;

        r4 := @parameter3: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.svek.SvekNode;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.SvekNode: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.svek.IEntityImage,net.sourceforge.plantuml.svek.ColorSequence,net.sourceforge.plantuml.graphic.StringBounder)>(r1, r2, r3, r4);

        $r7 = r6.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r0);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.Cluster getCluster(net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.svek.Cluster r4;
        java.util.Set $r5;
        net.sourceforge.plantuml.cucadiagram.IGroup r6;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r6 := @parameter0: net.sourceforge.plantuml.cucadiagram.IGroup;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.svek.Cluster) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.svek.Cluster: java.util.Set getGroups()>();

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void addLine(net.sourceforge.plantuml.svek.SvekLine)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        net.sourceforge.plantuml.svek.SvekLine r1, r9;
        java.util.List $r2, $r3, $r4, $r5, $r6, $r7, $r10;
        boolean $z1, $z3, $z6, $z7;
        int $i0, i1;
        java.lang.Object $r8;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r1 := @parameter0: net.sourceforge.plantuml.svek.SvekLine;

        $r2 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $z1 = staticinvoke <net.sourceforge.plantuml.svek.Bibliotekon: boolean first(net.sourceforge.plantuml.svek.SvekLine)>(r1);

        if $z1 == 0 goto label5;

        $z3 = virtualinvoke r1.<net.sourceforge.plantuml.svek.SvekLine: boolean hasNoteLabelText()>();

        if $z3 == 0 goto label4;

        i1 = 0;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r7 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i1);

        r9 = (net.sourceforge.plantuml.svek.SvekLine) $r8;

        $z6 = virtualinvoke r9.<net.sourceforge.plantuml.svek.SvekLine: boolean hasNoteLabelText()>();

        if $z6 != 0 goto label2;

        $z7 = virtualinvoke r1.<net.sourceforge.plantuml.svek.SvekLine: boolean sameConnections(net.sourceforge.plantuml.svek.SvekLine)>(r9);

        if $z7 == 0 goto label2;

        $r10 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0>;

        interfaceinvoke $r10.<java.util.List: void add(int,java.lang.Object)>(i1, r1);

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        goto label6;

     label4:
        $r4 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        goto label6;

     label5:
        $r3 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines1>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label6:
        return;
    }

    private static boolean first(net.sourceforge.plantuml.svek.SvekLine)
    {
        net.sourceforge.plantuml.svek.SvekLine r0;
        int i0;

        r0 := @parameter0: net.sourceforge.plantuml.svek.SvekLine;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvekLine: int getLength()>();

        if i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void addCluster(net.sourceforge.plantuml.svek.Cluster)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        net.sourceforge.plantuml.svek.Cluster r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r1 := @parameter0: net.sourceforge.plantuml.svek.Cluster;

        $r2 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        net.sourceforge.plantuml.cucadiagram.IEntity r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.svek.SvekNode $r4;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r2 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.svek.SvekNode) $r3;

        return $r4;
    }

    public java.lang.String getNodeUid(net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.svek.SvekNode r2, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalStateException $r3;
        java.util.Map $r4;
        java.util.Set $r5;
        java.lang.String $r6, $r9, $r10, $r12, r17;
        java.lang.Object $r7;
        net.sourceforge.plantuml.cucadiagram.IEntity r8;
        java.lang.AssertionError $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.util.Iterator r18;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>(r1);

        if r2 == null goto label2;

        r17 = virtualinvoke r2.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        $z4 = virtualinvoke r2.<net.sourceforge.plantuml.svek.SvekNode: boolean isShielded()>();

        if $z4 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":h");

        r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r17;

     label2:
        $z0 = <net.sourceforge.plantuml.svek.Bibliotekon: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if r2 == null goto label3;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label3:
        $z1 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isGroup()>();

        if $z1 == 0 goto label7;

        $r4 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        r18 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r7;

        $r9 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: java.lang.String getCodeGetName()>();

        $r10 = interfaceinvoke r8.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getCodeGetName()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label5;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Bibliotekon: net.sourceforge.plantuml.svek.SvekNode getNode(net.sourceforge.plantuml.cucadiagram.IEntity)>(r8);

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String getUid()>();

        return $r12;

     label5:
        goto label4;

     label6:
        $r6 = staticinvoke <net.sourceforge.plantuml.svek.Cluster: java.lang.String getSpecialPointId(net.sourceforge.plantuml.cucadiagram.IEntity)>(r1);

        return $r6;

     label7:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }

    public java.lang.String getWarningOrError(int)
    {
        java.lang.StringBuilder $r0, $r12, $r14, $r15;
        net.sourceforge.plantuml.svek.Bibliotekon r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator r5;
        boolean $z0;
        int $i0, i1;
        java.lang.Object $r6, $r8, $r10;
        java.util.Map$Entry r7;
        net.sourceforge.plantuml.svek.SvekNode r9;
        double $d0, $d1, d2, $d3;
        byte $b2;
        net.sourceforge.plantuml.cucadiagram.IEntity r11;
        java.lang.String $r13, $r16, $r19;

        r2 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        i1 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (net.sourceforge.plantuml.svek.SvekNode) $r8;

        $d0 = virtualinvoke r9.<net.sourceforge.plantuml.svek.SvekNode: double getMinX()>();

        $d1 = virtualinvoke r9.<net.sourceforge.plantuml.svek.SvekNode: double getWidth()>();

        d2 = $d0 + $d1;

        $d3 = (double) i1;

        $b2 = d2 cmpl $d3;

        if $b2 <= 0 goto label2;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r11 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r10;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = interfaceinvoke r11.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getCodeGetName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is overpassing the width limit.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label4;

        $r19 = "";

        goto label5;

     label4:
        $r19 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        return $r19;
    }

    public java.util.Map getMaxX()
    {
        java.util.HashMap $r0;
        net.sourceforge.plantuml.svek.Bibliotekon r2;
        java.util.Map $r3, $r6;
        java.util.Set $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r7, $r9, $r11;
        java.util.Map$Entry r8;
        net.sourceforge.plantuml.svek.SvekNode r10;
        double $d0, $d1, d2;
        net.sourceforge.plantuml.cucadiagram.IEntity r12;
        java.lang.String $r13;
        java.lang.Double $r14;

        r2 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (net.sourceforge.plantuml.svek.SvekNode) $r9;

        $d0 = virtualinvoke r10.<net.sourceforge.plantuml.svek.SvekNode: double getMinX()>();

        $d1 = virtualinvoke r10.<net.sourceforge.plantuml.svek.SvekNode: double getWidth()>();

        d2 = $d0 + $d1;

        $r11 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (net.sourceforge.plantuml.cucadiagram.IEntity) $r11;

        $r13 = interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: java.lang.String getCodeGetName()>();

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r14);

        goto label1;

     label2:
        $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r6;
    }

    public java.util.List allLines()
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List lines0()
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines0>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List lines1()
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List lines1>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List allCluster()
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.Collection allNodes()
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.Map $r1;
        java.util.Collection $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public java.util.List getAllLineConnectedTo(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.svek.Bibliotekon r2;
        java.util.List $r3, $r5;
        java.util.Iterator r4;
        boolean $z0, $z1;
        java.lang.Object $r6;
        net.sourceforge.plantuml.svek.SvekLine r7;
        net.sourceforge.plantuml.cucadiagram.IEntity r8;

        r2 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r8 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.svek.SvekLine) $r6;

        $z1 = virtualinvoke r7.<net.sourceforge.plantuml.svek.SvekLine: boolean isLinkFromOrTo(net.sourceforge.plantuml.cucadiagram.IEntity)>(r8);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    public net.sourceforge.plantuml.svek.SvekLine getLine(net.sourceforge.plantuml.cucadiagram.Link)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.svek.SvekLine r5;
        net.sourceforge.plantuml.cucadiagram.Link r6;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r6 := @parameter0: net.sourceforge.plantuml.cucadiagram.Link;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.svek.SvekLine) $r4;

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekLine: boolean isLink(net.sourceforge.plantuml.cucadiagram.Link)>(r6);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    public net.sourceforge.plantuml.cucadiagram.IEntity getOnlyOther(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.svek.SvekLine r4;
        net.sourceforge.plantuml.cucadiagram.IEntity r5, r6;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r5 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.svek.SvekLine) $r3;

        r6 = virtualinvoke r4.<net.sourceforge.plantuml.svek.SvekLine: net.sourceforge.plantuml.cucadiagram.IEntity getOther(net.sourceforge.plantuml.cucadiagram.IEntity)>(r5);

        if r6 == null goto label2;

        return r6;

     label2:
        goto label1;

     label3:
        return null;
    }

    public net.sourceforge.plantuml.cucadiagram.ILeaf getLeaf(net.sourceforge.plantuml.svek.SvekNode)
    {
        net.sourceforge.plantuml.svek.Bibliotekon r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object $r5, $r7, $r9;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.svek.SvekNode r8;
        net.sourceforge.plantuml.cucadiagram.ILeaf $r10;

        r0 := @this: net.sourceforge.plantuml.svek.Bibliotekon;

        r8 := @parameter0: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Map nodeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r7 != r8 goto label2;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r9;

        return $r10;

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/svek/Bibliotekon;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.svek.Bibliotekon: boolean $assertionsDisabled> = $z1;

        return;
    }
}
