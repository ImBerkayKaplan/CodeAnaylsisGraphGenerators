public class net.sourceforge.plantuml.timingdiagram.command.TimeTickBuilder extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.timingdiagram.command.TimeTickBuilder r0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.command.TimeTickBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex expressionAtWithoutArobase(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexOr $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r8, $r13, $r18, $r23;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r10, $r11, $r14, $r15, $r16, $r19, $r20, $r21, $r24, $r25, $r26;
        java.lang.String r4, $r7, $r12, $r17, $r22, $r27;

        r4 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CODE");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r7, ":([%pLN_.]+)([-+]\\d+)?");

        $r1[0] = $r2;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DATE");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r12, "(\\d+)/(\\d+)/(\\d+)");

        $r1[1] = $r8;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HOUR");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r17, "(\\d+):(\\d+):(\\d+)");

        $r1[2] = $r13;

        $r18 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIGIT");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r22, "(\\+?)(-?\\d+\\.?\\d*)");

        $r1[3] = $r18;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLOCK");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>($r27, "([%pLN_.@]+)\\*(\\d+)");

        $r1[4] = $r23;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex expressionAtWithArobase(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2;
        java.lang.String r3;
        net.sourceforge.plantuml.command.regex.IRegex $r4;

        r3 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("@");

        $r1[0] = $r2;

        $r4 = staticinvoke <net.sourceforge.plantuml.timingdiagram.command.TimeTickBuilder: net.sourceforge.plantuml.command.regex.IRegex expressionAtWithoutArobase(java.lang.String)>(r3);

        $r1[1] = $r4;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.command.regex.IRegex optionalExpressionAtWithArobase(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexOptional $r0;
        java.lang.String r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r2 = staticinvoke <net.sourceforge.plantuml.timingdiagram.command.TimeTickBuilder: net.sourceforge.plantuml.command.regex.IRegex expressionAtWithArobase(java.lang.String)>(r1);

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r2);

        return $r0;
    }

    public static net.sourceforge.plantuml.timingdiagram.TimeTick parseTimeTick(java.lang.String, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.timingdiagram.Clocks)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r23, $r25, $r26, $r35, $r36, $r37, $r40, $r41, $r42, $r45, $r46, $r47, $r51, $r52, $r53, $r56, $r57, $r58, $r61, $r62, $r63, $r69, $r70, $r71, $r75, $r76, $r77;
        java.lang.String r2, $r5, r6, $r10, $r14, $r18, $r22, $r24, $r27, $r28, $r38, $r39, $r43, $r44, $r48, $r49, $r54, $r55, $r59, $r60, $r64, $r65, $r72, $r73, $r78, r83, r86, r87, r89, r90;
        java.math.BigDecimal $r29, $r33, $r66, $r79, $r80, r85, r91;
        net.sourceforge.plantuml.timingdiagram.Clocks r30;
        net.sourceforge.plantuml.timingdiagram.TimeTick $r31, $r32, $r34, $r50, $r67, $r74, $r81, r84, $r92;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10;
        net.sourceforge.plantuml.timingdiagram.TimingFormat $r68, $r82, $r93;
        boolean z0;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r30 := @parameter2: net.sourceforge.plantuml.timingdiagram.Clocks;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CODE");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        if r6 == null goto label2;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CODE");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        r83 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r78, 1);

        r84 = interfaceinvoke r30.<net.sourceforge.plantuml.timingdiagram.Clocks: net.sourceforge.plantuml.timingdiagram.TimeTick getCodeValue(java.lang.String)>(r6);

        if r83 != null goto label1;

        return r84;

     label1:
        $r79 = virtualinvoke r84.<net.sourceforge.plantuml.timingdiagram.TimeTick: java.math.BigDecimal getTime()>();

        $r80 = new java.math.BigDecimal;

        specialinvoke $r80.<java.math.BigDecimal: void <init>(java.lang.String)>(r83);

        r85 = virtualinvoke $r79.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r80);

        $r81 = new net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r82 = <net.sourceforge.plantuml.timingdiagram.TimingFormat: net.sourceforge.plantuml.timingdiagram.TimingFormat DECIMAL>;

        specialinvoke $r81.<net.sourceforge.plantuml.timingdiagram.TimeTick: void <init>(java.math.BigDecimal,net.sourceforge.plantuml.timingdiagram.TimingFormat)>(r85, $r82);

        return $r81;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLOCK");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r86 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r10, 0);

        if r86 == null goto label3;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLOCK");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        $r73 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r72, 1);

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r73);

        $r74 = interfaceinvoke r30.<net.sourceforge.plantuml.timingdiagram.Clocks: net.sourceforge.plantuml.timingdiagram.TimeTick getClockValue(java.lang.String,int)>(r86, i4);

        return $r74;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HOUR");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r87 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r14, 0);

        if r87 == null goto label4;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HOUR");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r54, 0);

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r55);

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HOUR");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r60 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r59, 1);

        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r60);

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HOUR");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        $r65 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r64, 2);

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r65);

        $r66 = new java.math.BigDecimal;

        $i1 = 3600 * i5;

        $i0 = 60 * i6;

        $i2 = $i1 + $i0;

        $i3 = $i2 + i7;

        specialinvoke $r66.<java.math.BigDecimal: void <init>(int)>($i3);

        $r67 = new net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r68 = <net.sourceforge.plantuml.timingdiagram.TimingFormat: net.sourceforge.plantuml.timingdiagram.TimingFormat HOUR>;

        specialinvoke $r67.<net.sourceforge.plantuml.timingdiagram.TimeTick: void <init>(java.math.BigDecimal,net.sourceforge.plantuml.timingdiagram.TimingFormat)>($r66, $r68);

        return $r67;

     label4:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DATE");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r89 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r18, 0);

        if r89 == null goto label5;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DATE");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r38, 0);

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r39);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DATE");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r43, 1);

        i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r44);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DATE");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $r49 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r48, 2);

        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r49);

        $r50 = staticinvoke <net.sourceforge.plantuml.timingdiagram.TimingFormat: net.sourceforge.plantuml.timingdiagram.TimeTick createDate(int,int,int)>(i8, i9, i10);

        return $r50;

     label5:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIGIT");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        r90 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r22, 1);

        if r90 != null goto label6;

        $r34 = interfaceinvoke r30.<net.sourceforge.plantuml.timingdiagram.Clocks: net.sourceforge.plantuml.timingdiagram.TimeTick getNow()>();

        return $r34;

     label6:
        $r24 = "+";

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIGIT");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r27, 0);

        z0 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        $r29 = new java.math.BigDecimal;

        specialinvoke $r29.<java.math.BigDecimal: void <init>(java.lang.String)>(r90);

        r91 = $r29;

        if z0 == 0 goto label7;

        $r31 = interfaceinvoke r30.<net.sourceforge.plantuml.timingdiagram.Clocks: net.sourceforge.plantuml.timingdiagram.TimeTick getNow()>();

        if $r31 == null goto label7;

        $r32 = interfaceinvoke r30.<net.sourceforge.plantuml.timingdiagram.Clocks: net.sourceforge.plantuml.timingdiagram.TimeTick getNow()>();

        $r33 = virtualinvoke $r32.<net.sourceforge.plantuml.timingdiagram.TimeTick: java.math.BigDecimal getTime()>();

        r91 = virtualinvoke $r33.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r29);

     label7:
        $r92 = new net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r93 = <net.sourceforge.plantuml.timingdiagram.TimingFormat: net.sourceforge.plantuml.timingdiagram.TimingFormat DECIMAL>;

        specialinvoke $r92.<net.sourceforge.plantuml.timingdiagram.TimeTick: void <init>(java.math.BigDecimal,net.sourceforge.plantuml.timingdiagram.TimingFormat)>(r91, $r93);

        return $r92;
    }
}
