public class net.sourceforge.plantuml.graphic.Text extends java.lang.Object implements net.sourceforge.plantuml.graphic.HtmlCommand
{
    private final java.lang.String text;
    public static final net.sourceforge.plantuml.graphic.Text TEXT_BS_BS_N;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.graphic.Text r0;
        java.lang.String r1, $r2, $r3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.graphic.Text;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\\\[", "[");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\\\]", "]");

        r0.<net.sourceforge.plantuml.graphic.Text: java.lang.String text> = $r3;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(10);

        if $i0 == -1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        return;
    }

    public java.lang.String getText()
    {
        boolean $z0;
        net.sourceforge.plantuml.graphic.Text r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.AssertionError $r3;

        r0 := @this: net.sourceforge.plantuml.graphic.Text;

        $z0 = <net.sourceforge.plantuml.graphic.Text: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.graphic.Text: java.lang.String text>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 > 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.graphic.Text: java.lang.String text>;

        return $r1;
    }

    public boolean isNewline()
    {
        net.sourceforge.plantuml.graphic.Text r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.graphic.Text;

        $r1 = r0.<net.sourceforge.plantuml.graphic.Text: java.lang.String text>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("\\n");

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.Text $r1;

        $r0 = class "Lnet/sourceforge/plantuml/graphic/Text;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.graphic.Text: boolean $assertionsDisabled> = $z1;

        $r1 = new net.sourceforge.plantuml.graphic.Text;

        specialinvoke $r1.<net.sourceforge.plantuml.graphic.Text: void <init>(java.lang.String)>("\\n");

        <net.sourceforge.plantuml.graphic.Text: net.sourceforge.plantuml.graphic.Text TEXT_BS_BS_N> = $r1;

        return;
    }
}
