public class net.sourceforge.plantuml.utils.MathUtils extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.utils.MathUtils r0;

        r0 := @this: net.sourceforge.plantuml.utils.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double max(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        return $d2;
    }

    public static double max(double, double, double)
    {
        double d0, d1, $d2, d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $d2 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double)>(d0, d1);

        $d4 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double)>($d2, d3);

        return $d4;
    }

    public static double max(double, double, double, double)
    {
        double d0, d1, $d2, d3, d4, $d5, $d6;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        d4 := @parameter3: double;

        $d2 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double)>(d0, d1);

        $d5 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double)>(d3, d4);

        $d6 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double)>($d2, $d5);

        return $d6;
    }

    public static double max(double, double, double, double, double)
    {
        double d0, d1, d2, $d3, d4, d5, $d6, $d7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d4 := @parameter3: double;

        d5 := @parameter4: double;

        $d3 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>(d0, d1, d2);

        $d6 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double)>(d4, d5);

        $d7 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double)>($d3, $d6);

        return $d7;
    }

    public static double min(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1);

        return $d2;
    }

    public static double min(double, double, double)
    {
        double d0, d1, $d2, d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $d2 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double)>(d0, d1);

        $d4 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double)>($d2, d3);

        return $d4;
    }

    public static double min(double, double, double, double)
    {
        double d0, d1, $d2, d3, d4, $d5, $d6;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        d4 := @parameter3: double;

        $d2 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double)>(d0, d1);

        $d5 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double)>(d3, d4);

        $d6 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double)>($d2, $d5);

        return $d6;
    }

    public static double min(double, double, double, double, double)
    {
        double d0, d1, d2, $d3, d4, d5, $d6, $d7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d4 := @parameter3: double;

        d5 := @parameter4: double;

        $d3 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double,double)>(d0, d1, d2);

        $d6 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double)>(d4, d5);

        $d7 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double)>($d3, $d6);

        return $d7;
    }

    public static double limitation(double, double, double)
    {
        double d0, d1, d2;
        byte $b0, $b1, $b2;

        d2 := @parameter0: double;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        return d2;

     label1:
        $b1 = d2 cmpg d0;

        if $b1 >= 0 goto label2;

        return d0;

     label2:
        $b2 = d2 cmpl d1;

        if $b2 <= 0 goto label3;

        return d1;

     label3:
        return d2;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D max(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r2 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d4 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d3, $d4);

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d5);

        return $r0;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D max(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1, r2, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r2 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r3 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>($d0, $d1, $d2);

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d7 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>($d4, $d5, $d6);

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d3, $d7);

        return $r0;
    }

    public static java.awt.geom.Point2D max(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D$Double $r0;
        java.awt.geom.Point2D r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Point2D;

        $r0 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d3, $d4);

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d5);

        return $r0;
    }

    public static java.awt.geom.Point2D max(java.awt.geom.Point2D, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D$Double $r0;
        java.awt.geom.Point2D r1, r2, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Point2D;

        r3 := @parameter2: java.awt.geom.Point2D;

        $r0 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d2 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d3 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>($d0, $d1, $d2);

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d6 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d7 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>($d4, $d5, $d6);

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d7);

        return $r0;
    }
}
