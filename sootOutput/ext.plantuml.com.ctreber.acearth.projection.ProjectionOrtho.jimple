public class ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho extends ext.plantuml.com.ctreber.acearth.projection.Projection
{

    public void <init>()
    {
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        specialinvoke r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: void <init>()>();

        return;
    }

    public boolean isVisible(ext.plantuml.com.ctreber.acearth.util.Point3D)
    {
        ext.plantuml.com.ctreber.acearth.util.Point3D r0;
        double $d0;
        byte $b0;
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r1;
        boolean $z0;

        r1 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        r0 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point3D;

        $d0 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public ext.plantuml.com.ctreber.acearth.util.Coordinate getLocation(int, int)
    {
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r0;
        int i0, i1;
        double $d0, d1, $d2, d3, $d4, $d5, $d6, $d7, d8;
        ext.plantuml.com.ctreber.acearth.util.Point3D $r1, $r3;
        ext.plantuml.com.ctreber.acearth.util.Coordinate $r4;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $d0 = (double) i0;

        d1 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho: double inverseFinalizeX(double)>($d0);

        $d2 = (double) i1;

        d3 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho: double inverseFinalizeY(double)>($d2);

        $d4 = d1 * d1;

        $d6 = 1.0 - $d4;

        $d5 = d3 * d3;

        $d7 = $d6 - $d5;

        d8 = staticinvoke <java.lang.Math: double sqrt(double)>($d7);

        $r1 = new ext.plantuml.com.ctreber.acearth.util.Point3D;

        specialinvoke $r1.<ext.plantuml.com.ctreber.acearth.util.Point3D: void <init>(double,double,double)>(d1, d3, d8);

        $r3 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho: ext.plantuml.com.ctreber.acearth.util.Point3D rotateReverse(ext.plantuml.com.ctreber.acearth.util.Point3D)>($r1);

        $r4 = virtualinvoke $r3.<ext.plantuml.com.ctreber.acearth.util.Point3D: ext.plantuml.com.ctreber.acearth.util.Coordinate getCoordinate()>();

        return $r4;
    }

    public double projectX(double, double)
    {
        double d0, d1;
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        return d0;
    }

    public double inverseProjectX(double)
    {
        double d0;
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        d0 := @parameter0: double;

        return d0;
    }

    public double projectY(double)
    {
        double d0;
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        d0 := @parameter0: double;

        return d0;
    }

    public double inverseProjectY(double)
    {
        double d0;
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        d0 := @parameter0: double;

        return d0;
    }

    protected void setScale()
    {
        ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho r0;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho;

        $i1 = r0.<ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho: int fImageHeight>;

        $i0 = r0.<ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho: int fImageWidth>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $d1 = (double) $i2;

        $d0 = r0.<ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho: double fViewMagnification>;

        $d2 = $d1 * $d0;

        $d3 = $d2 * 0.99;

        $d4 = $d3 / 2.0;

        r0.<ext.plantuml.com.ctreber.acearth.projection.ProjectionOrtho: double fScale> = $d4;

        return;
    }
}
