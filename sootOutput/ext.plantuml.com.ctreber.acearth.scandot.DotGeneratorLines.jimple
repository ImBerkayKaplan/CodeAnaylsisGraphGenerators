public class ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines extends ext.plantuml.com.ctreber.acearth.scandot.ScanDotGenerator
{
    private ext.plantuml.com.ctreber.acearth.projection.Projection fProjection;
    private int fLineDivider;
    private int fPointDivider;
    private static final double PI;
    private static final double TWOPI;
    private static final double HALFPI;

    public void <init>(ext.plantuml.com.ctreber.acearth.projection.Projection, int, int)
    {
        ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines r0;
        ext.plantuml.com.ctreber.acearth.projection.Projection r1;
        int i0, i1;

        r0 := @this: ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines;

        r1 := @parameter0: ext.plantuml.com.ctreber.acearth.projection.Projection;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<ext.plantuml.com.ctreber.acearth.scandot.ScanDotGenerator: void <init>()>();

        r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection> = r1;

        r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fLineDivider> = i0;

        r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fPointDivider> = i1;

        return;
    }

    public void generateScanDots()
    {
        ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7, d8, d9, d10, d11;
        byte $b6, $b13, $b14, $b15;
        ext.plantuml.com.ctreber.acearth.util.Coordinate $r1, $r2;

        r0 := @this: ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines;

        $i0 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fLineDivider>;

        $i1 = $i0 * 4;

        $d0 = (double) $i1;

        d4 = 6.283185307179586 / $d0;

        $i2 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fLineDivider>;

        $i4 = $i2 * 2;

        $i3 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fPointDivider>;

        $i5 = $i4 * $i3;

        $d1 = (double) $i5;

        d5 = 3.141592653589793 / $d1;

        d6 = -3.141592653589793;

     label1:
        $b6 = d6 cmpg 3.141592653589793;

        if $b6 > 0 goto label4;

        d7 = -1.5707963267948966;

     label2:
        $b15 = d7 cmpg 1.5707963267948966;

        if $b15 > 0 goto label3;

        $r2 = new ext.plantuml.com.ctreber.acearth.util.Coordinate;

        specialinvoke $r2.<ext.plantuml.com.ctreber.acearth.util.Coordinate: void <init>(double,double)>(d7, d6);

        specialinvoke r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: void transformAndAddDot(ext.plantuml.com.ctreber.acearth.util.Coordinate)>($r2);

        d7 = d7 + d5;

        goto label2;

     label3:
        d6 = d6 + d4;

        goto label1;

     label4:
        $i7 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fLineDivider>;

        $i8 = $i7 * 4;

        $d2 = (double) $i8;

        d8 = 6.283185307179586 / $d2;

        $i9 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fLineDivider>;

        $i11 = $i9 * 2;

        $i10 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: int fPointDivider>;

        $i12 = $i11 * $i10;

        $d3 = (double) $i12;

        d9 = 3.141592653589793 / $d3;

        d10 = -1.5707963267948966;

     label5:
        $b13 = d10 cmpg 1.5707963267948966;

        if $b13 > 0 goto label8;

        d11 = -3.141592653589793;

     label6:
        $b14 = d11 cmpg 3.141592653589793;

        if $b14 > 0 goto label7;

        $r1 = new ext.plantuml.com.ctreber.acearth.util.Coordinate;

        specialinvoke $r1.<ext.plantuml.com.ctreber.acearth.util.Coordinate: void <init>(double,double)>(d10, d11);

        specialinvoke r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: void transformAndAddDot(ext.plantuml.com.ctreber.acearth.util.Coordinate)>($r1);

        d11 = d11 + d9;

        goto label6;

     label7:
        d10 = d10 + d8;

        goto label5;

     label8:
        return;
    }

    private void transformAndAddDot(ext.plantuml.com.ctreber.acearth.util.Coordinate)
    {
        ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines r0;
        ext.plantuml.com.ctreber.acearth.util.Coordinate r1;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r2, $r5, $r6, $r7, $r10;
        ext.plantuml.com.ctreber.acearth.util.Point3D $r3, r4;
        boolean $z0, $z1;
        ext.plantuml.com.ctreber.acearth.util.Point2D $r8, r9;
        ext.plantuml.com.ctreber.acearth.scandot.ScanDot $r11;
        java.util.List $r12;

        r0 := @this: ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines;

        r1 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Coordinate;

        $r2 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $r3 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.util.Coordinate: ext.plantuml.com.ctreber.acearth.util.Point3D getPoint3DRads()>();

        r4 = virtualinvoke $r2.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Point3D rotate(ext.plantuml.com.ctreber.acearth.util.Point3D)>($r3);

        $r5 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $z0 = virtualinvoke $r5.<ext.plantuml.com.ctreber.acearth.projection.Projection: boolean isVisible(ext.plantuml.com.ctreber.acearth.util.Point3D)>(r4);

        if $z0 == 0 goto label1;

        $r7 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $r6 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $r8 = virtualinvoke $r6.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Point2D project2D(ext.plantuml.com.ctreber.acearth.util.Point3D)>(r4);

        r9 = virtualinvoke $r7.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Point2D finalize(ext.plantuml.com.ctreber.acearth.util.Point2D)>($r8);

        $r10 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $z1 = virtualinvoke $r10.<ext.plantuml.com.ctreber.acearth.projection.Projection: boolean isWithinImage(ext.plantuml.com.ctreber.acearth.util.Point2D)>(r9);

        if $z1 == 0 goto label1;

        $r12 = r0.<ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: java.util.List fDots>;

        $r11 = new ext.plantuml.com.ctreber.acearth.scandot.ScanDot;

        specialinvoke $r11.<ext.plantuml.com.ctreber.acearth.scandot.ScanDot: void <init>(int,ext.plantuml.com.ctreber.acearth.util.Point2D)>(1, r9);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: double HALFPI> = 1.5707963267948966;

        <ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: double TWOPI> = 6.283185307179586;

        <ext.plantuml.com.ctreber.acearth.scandot.DotGeneratorLines: double PI> = 3.141592653589793;

        return;
    }
}
