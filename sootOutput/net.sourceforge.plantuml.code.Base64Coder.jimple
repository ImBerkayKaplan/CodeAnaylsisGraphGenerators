public class net.sourceforge.plantuml.code.Base64Coder extends java.lang.Object
{
    private static final java.lang.String systemLineSeparator;
    private static final char[] map1;
    private static final byte[] map2;

    public static java.lang.String encodeString(java.lang.String)
    {
        java.lang.String $r0, r1;
        byte[] $r2;
        char[] $r3;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: char[] encode(byte[])>($r2);

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r3);

        return $r0;
    }

    public static java.lang.String encodeLines(byte[])
    {
        byte[] r0;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = <net.sourceforge.plantuml.code.Base64Coder: java.lang.String systemLineSeparator>;

        $r2 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: java.lang.String encodeLines(byte[],int,int,int,java.lang.String)>(r0, 0, $i0, 76, $r1);

        return $r2;
    }

    public static java.lang.String encodeLines(byte[], int, int, int, java.lang.String)
    {
        int i0, $i1, i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, i15, $i16, i17;
        java.lang.String r0, $r3;
        java.lang.StringBuilder $r1;
        byte[] r4;
        char[] $r5;
        java.lang.IllegalArgumentException $r8;

        r4 := @parameter0: byte[];

        i15 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r0 := @parameter4: java.lang.String;

        $i1 = i0 * 3;

        i2 = $i1 / 4;

        if i2 > 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label1:
        $i4 = i3 + i2;

        $i5 = $i4 - 1;

        i6 = $i5 / i2;

        $i7 = i3 + 2;

        $i8 = $i7 / 3;

        $i9 = $i8 * 4;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = i6 * $i10;

        i12 = $i9 + $i11;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(i12);

        i17 = 0;

     label2:
        if i17 >= i3 goto label3;

        $i13 = i3 - i17;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>($i13, i2);

        $i16 = i15 + i17;

        $r5 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: char[] encode(byte[],int,int)>(r4, $i16, i14);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        i17 = i17 + i14;

        goto label2;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static char[] encode(byte[])
    {
        byte[] r0;
        int $i0;
        char[] $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: char[] encode(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static char[] encode(byte[], int)
    {
        byte[] r0;
        int i0;
        char[] $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: char[] encode(byte[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static char[] encode(byte[], int, int)
    {
        int i0, $i1, $i2, i3, $i4, $i5, i6, i7, i8, $i9, i11, i12, i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, i22, i23, $i28, $i30, i32, i33, $i34, $i35, i36, i37, i39;
        char[] r0, $r2, $r3, $r4, $r6;
        byte[] r1;
        byte $b10, $b29, $b31;
        char $c24, $c25, $c38, $c40;

        r1 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = i0 * 4;

        $i2 = $i1 + 2;

        i3 = $i2 / 3;

        $i4 = i0 + 2;

        $i5 = $i4 / 3;

        i6 = $i5 * 4;

        r0 = newarray (char)[i6];

        i32 = i7;

        i8 = i7 + i0;

        i33 = 0;

     label01:
        if i32 >= i8 goto label10;

        $i9 = i32;

        i32 = i32 + 1;

        $b10 = r1[$i9];

        i11 = $b10 & 255;

        if i32 >= i8 goto label02;

        $i30 = i32;

        i32 = i32 + 1;

        $b31 = r1[$i30];

        $i34 = $b31 & 255;

        goto label03;

     label02:
        $i34 = 0;

     label03:
        i12 = $i34;

        if i32 >= i8 goto label04;

        $i28 = i32;

        i32 = i32 + 1;

        $b29 = r1[$i28];

        $i35 = $b29 & 255;

        goto label05;

     label04:
        $i35 = 0;

     label05:
        i14 = i11 >>> 2;

        $i15 = i11 & 3;

        $i17 = $i15 << 4;

        $i16 = i12 >>> 4;

        i18 = $i17 | $i16;

        $i19 = i12 & 15;

        $i21 = $i19 << 2;

        $i20 = $i35 >>> 6;

        i22 = $i21 | $i20;

        i23 = $i35 & 63;

        i36 = i33 + 1;

        $r2 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $c24 = $r2[i14];

        r0[i33] = $c24;

        i37 = i36 + 1;

        $r3 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $c25 = $r3[i18];

        r0[i36] = $c25;

        if i37 >= i3 goto label06;

        $r6 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $c38 = $r6[i22];

        goto label07;

     label06:
        $c38 = 61;

     label07:
        r0[i37] = $c38;

        i39 = i37 + 1;

        if i39 >= i3 goto label08;

        $r4 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $c40 = $r4[i23];

        goto label09;

     label08:
        $c40 = 61;

     label09:
        r0[i39] = $c40;

        i33 = i39 + 1;

        goto label01;

     label10:
        return r0;
    }

    public static java.lang.String decodeString(java.lang.String)
    {
        java.lang.String $r0, r1;
        byte[] $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.String;

        $r2 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: byte[] decode(java.lang.String)>(r1);

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }

    public static byte[] decodeLines(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1, $i3, i4, i5;
        char[] r1;
        byte[] $r2;
        char c2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[$i0];

        i4 = 0;

        i5 = 0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i1 goto label3;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        if c2 == 32 goto label2;

        if c2 == 13 goto label2;

        if c2 == 10 goto label2;

        if c2 == 9 goto label2;

        $i3 = i4;

        i4 = i4 + 1;

        r1[$i3] = c2;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $r2 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: byte[] decode(char[],int,int)>(r1, 0, i4);

        return $r2;
    }

    public static byte[] decode(java.lang.String)
    {
        java.lang.String r0;
        char[] $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: byte[] decode(char[])>($r1);

        return $r2;
    }

    public static byte[] decode(char[])
    {
        char[] r0;
        int $i0;
        byte[] $r1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: byte[] decode(char[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] decode(char[], int, int)
    {
        int $i0, $i1, i2, i3, i4, $i13, $i14, i15, $i16, $i17, $i18, i19, $i20, $i21, i22, $i23, $i25, $i27, $i29, $i30, $i31, $i32, i34, i35, i36, i37;
        byte[] r0, $r2, $r3, $r4, $r5;
        char[] r1;
        char c5, c6, c7, $c33, $c38, $c39;
        byte b9, b10, b11, b12, $b24, $b26, $b28;
        java.lang.IllegalArgumentException $r6, $r7, $r8;

        r1 := @parameter0: char[];

        i3 := @parameter1: int;

        i34 := @parameter2: int;

        $i0 = i34 % 4;

        if $i0 == 0 goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length of Base64 encoded input string is not a multiple of 4.");

        throw $r6;

     label01:
        if i34 <= 0 goto label02;

        $i31 = i3 + i34;

        $i32 = $i31 - 1;

        $c33 = r1[$i32];

        if $c33 != 61 goto label02;

        i34 = i34 + -1;

        goto label01;

     label02:
        $i1 = i34 * 3;

        i2 = $i1 / 4;

        r0 = newarray (byte)[i2];

        i35 = i3;

        i4 = i3 + i34;

        i36 = 0;

     label03:
        if i35 >= i4 goto label14;

        i37 = i35 + 1;

        c5 = r1[i35];

        i35 = i37 + 1;

        c6 = r1[i37];

        if i35 >= i4 goto label04;

        $i30 = i35;

        i35 = i35 + 1;

        $c38 = r1[$i30];

        goto label05;

     label04:
        $c38 = 65;

     label05:
        c7 = $c38;

        if i35 >= i4 goto label06;

        $i29 = i35;

        i35 = i35 + 1;

        $c39 = r1[$i29];

        goto label07;

     label06:
        $c39 = 65;

     label07:
        if c5 > 127 goto label08;

        if c6 > 127 goto label08;

        if c7 > 127 goto label08;

        if $c39 <= 127 goto label09;

     label08:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal character in Base64 encoded data.");

        throw $r7;

     label09:
        $r2 = <net.sourceforge.plantuml.code.Base64Coder: byte[] map2>;

        b9 = $r2[c5];

        $r3 = <net.sourceforge.plantuml.code.Base64Coder: byte[] map2>;

        b10 = $r3[c6];

        $r4 = <net.sourceforge.plantuml.code.Base64Coder: byte[] map2>;

        b11 = $r4[c7];

        $r5 = <net.sourceforge.plantuml.code.Base64Coder: byte[] map2>;

        b12 = $r5[$c39];

        if b9 < 0 goto label10;

        if b10 < 0 goto label10;

        if b11 < 0 goto label10;

        if b12 >= 0 goto label11;

     label10:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal character in Base64 encoded data.");

        throw $r8;

     label11:
        $i14 = b9 << 2;

        $i13 = b10 >>> 4;

        i15 = $i14 | $i13;

        $i16 = b10 & 15;

        $i18 = $i16 << 4;

        $i17 = b11 >>> 2;

        i19 = $i18 | $i17;

        $i20 = b11 & 3;

        $i21 = $i20 << 6;

        i22 = $i21 | b12;

        $i23 = i36;

        i36 = i36 + 1;

        $b24 = (byte) i15;

        r0[$i23] = $b24;

        if i36 >= i2 goto label12;

        $i27 = i36;

        i36 = i36 + 1;

        $b28 = (byte) i19;

        r0[$i27] = $b28;

     label12:
        if i36 >= i2 goto label13;

        $i25 = i36;

        i36 = i36 + 1;

        $b26 = (byte) i22;

        r0[$i25] = $b26;

     label13:
        goto label03;

     label14:
        return r0;
    }

    private void <init>()
    {
        net.sourceforge.plantuml.code.Base64Coder r0;

        r0 := @this: net.sourceforge.plantuml.code.Base64Coder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        char[] $r1, $r2, $r3, $r6, $r9, $r10, $r11;
        byte[] $r4, $r5, $r7, $r8;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, i9, i13, i15, i16;
        byte $b1;
        char $c2, c10, c11, c12;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <net.sourceforge.plantuml.code.Base64Coder: java.lang.String systemLineSeparator> = $r0;

        $r1 = newarray (char)[64];

        <net.sourceforge.plantuml.code.Base64Coder: char[] map1> = $r1;

        i9 = 0;

        c10 = 65;

     label01:
        if c10 > 90 goto label02;

        $r11 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $i7 = i9;

        i9 = i9 + 1;

        $r11[$i7] = c10;

        $i8 = c10 + 1;

        c10 = (char) $i8;

        goto label01;

     label02:
        c11 = 97;

     label03:
        if c11 > 122 goto label04;

        $r10 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $i5 = i9;

        i9 = i9 + 1;

        $r10[$i5] = c11;

        $i6 = c11 + 1;

        c11 = (char) $i6;

        goto label03;

     label04:
        c12 = 48;

     label05:
        if c12 > 57 goto label06;

        $r9 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $i3 = i9;

        i9 = i9 + 1;

        $r9[$i3] = c12;

        $i4 = c12 + 1;

        c12 = (char) $i4;

        goto label05;

     label06:
        $r2 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        i13 = i9 + 1;

        $r2[i9] = 43;

        $r3 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $r3[i13] = 47;

        $r4 = newarray (byte)[128];

        <net.sourceforge.plantuml.code.Base64Coder: byte[] map2> = $r4;

        i15 = 0;

     label07:
        $r5 = <net.sourceforge.plantuml.code.Base64Coder: byte[] map2>;

        $i0 = lengthof $r5;

        if i15 >= $i0 goto label08;

        $r8 = <net.sourceforge.plantuml.code.Base64Coder: byte[] map2>;

        $r8[i15] = -1;

        i15 = i15 + 1;

        goto label07;

     label08:
        i16 = 0;

     label09:
        if i16 >= 64 goto label10;

        $r7 = <net.sourceforge.plantuml.code.Base64Coder: byte[] map2>;

        $r6 = <net.sourceforge.plantuml.code.Base64Coder: char[] map1>;

        $c2 = $r6[i16];

        $b1 = (byte) i16;

        $r7[$c2] = $b1;

        i16 = i16 + 1;

        goto label09;

     label10:
        return;
    }
}
