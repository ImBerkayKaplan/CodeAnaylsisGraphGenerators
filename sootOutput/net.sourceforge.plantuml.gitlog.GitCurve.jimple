public class net.sourceforge.plantuml.gitlog.GitCurve extends java.lang.Object
{
    private final java.util.List points;
    private final net.sourceforge.plantuml.jsondiagram.Mirror xMirror;
    private final java.awt.geom.Point2D sp;
    private final java.awt.geom.Point2D ep;

    public void <init>(h.ST_Agedgeinfo_t, net.sourceforge.plantuml.jsondiagram.Mirror)
    {
        net.sourceforge.plantuml.gitlog.GitCurve r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.jsondiagram.Mirror r2;
        h.ST_Agedgeinfo_t r3;
        h.ST_splines r4;
        int $i0, $i1, i5;
        smetana.core.CArray $r5;
        java.lang.Object $r6;
        h.ST_bezier r7;
        h.ST_pointf $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b2, $b3, $b4, $b6;
        java.awt.geom.Point2D$Double $r9, $r12;
        java.awt.geom.Point2D r17;
        java.util.List $r18;
        java.lang.IllegalStateException $r19;

        r0 := @this: net.sourceforge.plantuml.gitlog.GitCurve;

        r3 := @parameter0: h.ST_Agedgeinfo_t;

        r2 := @parameter1: net.sourceforge.plantuml.jsondiagram.Mirror;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points> = $r1;

        r0.<net.sourceforge.plantuml.gitlog.GitCurve: net.sourceforge.plantuml.jsondiagram.Mirror xMirror> = r2;

        r4 = r3.<h.ST_Agedgeinfo_t: h.ST_splines spl>;

        $i0 = r4.<h.ST_splines: int size>;

        if $i0 == 1 goto label1;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>()>();

        throw $r19;

     label1:
        $r5 = r4.<h.ST_splines: smetana.core.CArray list>;

        $r6 = virtualinvoke $r5.<smetana.core.CArray: java.lang.Object get__(int)>(0);

        r7 = (h.ST_bezier) $r6;

        i5 = 0;

     label2:
        $i1 = r7.<h.ST_bezier: int size>;

        if i5 >= $i1 goto label3;

        r17 = specialinvoke r0.<net.sourceforge.plantuml.gitlog.GitCurve: java.awt.geom.Point2D getPoint(h.ST_splines,int)>(r4, i5);

        $r18 = r0.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r17);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r8 = r7.<h.ST_bezier: h.ST_pointf sp>;

        $d0 = $r8.<h.ST_pointf: double x>;

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label4;

        $r16 = r7.<h.ST_bezier: h.ST_pointf sp>;

        $d6 = $r16.<h.ST_pointf: double y>;

        $b4 = $d6 cmpl 0.0;

        if $b4 != 0 goto label4;

        r0.<net.sourceforge.plantuml.gitlog.GitCurve: java.awt.geom.Point2D sp> = null;

        goto label5;

     label4:
        $r9 = new java.awt.geom.Point2D$Double;

        $r10 = r7.<h.ST_bezier: h.ST_pointf sp>;

        $d2 = $r10.<h.ST_pointf: double x>;

        $r11 = r7.<h.ST_bezier: h.ST_pointf sp>;

        $d1 = $r11.<h.ST_pointf: double y>;

        specialinvoke $r9.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d1);

        r0.<net.sourceforge.plantuml.gitlog.GitCurve: java.awt.geom.Point2D sp> = $r9;

     label5:
        $r20 = r7.<h.ST_bezier: h.ST_pointf ep>;

        $d7 = $r20.<h.ST_pointf: double x>;

        $b6 = $d7 cmpl 0.0;

        if $b6 != 0 goto label6;

        $r15 = r7.<h.ST_bezier: h.ST_pointf ep>;

        $d5 = $r15.<h.ST_pointf: double y>;

        $b3 = $d5 cmpl 0.0;

        if $b3 != 0 goto label6;

        r0.<net.sourceforge.plantuml.gitlog.GitCurve: java.awt.geom.Point2D ep> = null;

        goto label7;

     label6:
        $r12 = new java.awt.geom.Point2D$Double;

        $r13 = r7.<h.ST_bezier: h.ST_pointf ep>;

        $d4 = $r13.<h.ST_pointf: double x>;

        $r14 = r7.<h.ST_bezier: h.ST_pointf ep>;

        $d3 = $r14.<h.ST_pointf: double y>;

        specialinvoke $r12.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d4, $d3);

        r0.<net.sourceforge.plantuml.gitlog.GitCurve: java.awt.geom.Point2D ep> = $r12;

     label7:
        return;
    }

    private java.awt.geom.Point2D getPoint(h.ST_splines, int)
    {
        h.ST_splines r0;
        smetana.core.CArray $r1, $r4;
        java.lang.Object $r2, $r5;
        h.ST_bezier r3;
        int i0;
        h.ST_pointf r6;
        java.awt.geom.Point2D$Double $r7;
        double $d0, $d1;
        net.sourceforge.plantuml.gitlog.GitCurve r8;

        r8 := @this: net.sourceforge.plantuml.gitlog.GitCurve;

        r0 := @parameter0: h.ST_splines;

        i0 := @parameter1: int;

        $r1 = r0.<h.ST_splines: smetana.core.CArray list>;

        $r2 = virtualinvoke $r1.<smetana.core.CArray: java.lang.Object get__(int)>(0);

        r3 = (h.ST_bezier) $r2;

        $r4 = r3.<h.ST_bezier: smetana.core.CArray list>;

        $r5 = virtualinvoke $r4.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        r6 = (h.ST_pointf) $r5;

        $r7 = new java.awt.geom.Point2D$Double;

        $d1 = r6.<h.ST_pointf: double x>;

        $d0 = r6.<h.ST_pointf: double y>;

        specialinvoke $r7.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r7;
    }

    public void drawCurve(net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UStroke $r0;
        net.sourceforge.plantuml.ugraphic.UPath $r1;
        net.sourceforge.plantuml.gitlog.GitCurve r3;
        java.util.List $r4, $r9, $r11, $r13, $r22, $r26, $r31;
        net.sourceforge.plantuml.jsondiagram.Mirror $r5, $r12, $r17, $r23, $r27, $r32;
        java.lang.Object $r6, $r14, $r24, $r28, $r33;
        java.awt.geom.Point2D $r7, $r8, $r10, $r15, $r16, $r25, $r29, r30, $r34, r35, r38, r39, r40;
        int $i0, $i1, $i2, $i3, $i4, i5;
        net.sourceforge.plantuml.jsondiagram.Arrow $r18;
        net.sourceforge.plantuml.ugraphic.color.HColor r19;
        net.sourceforge.plantuml.ugraphic.UBackground $r20;
        net.sourceforge.plantuml.ugraphic.UGraphic $r21, r36, r37;

        r3 := @this: net.sourceforge.plantuml.gitlog.GitCurve;

        r19 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        r36 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double,double,double)>(2.0, 2.0, 1.0);

        r37 = interfaceinvoke r36.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $r1 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $r5 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: net.sourceforge.plantuml.jsondiagram.Mirror xMirror>;

        $r4 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (java.awt.geom.Point2D) $r6;

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.jsondiagram.Mirror: java.awt.geom.Point2D invGit(java.awt.geom.Point2D)>($r7);

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(java.awt.geom.Point2D)>($r8);

        i5 = 1;

     label1:
        $r9 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if i5 >= $i0 goto label2;

        $r23 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: net.sourceforge.plantuml.jsondiagram.Mirror xMirror>;

        $r22 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        $r24 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i5);

        $r25 = (java.awt.geom.Point2D) $r24;

        r38 = virtualinvoke $r23.<net.sourceforge.plantuml.jsondiagram.Mirror: java.awt.geom.Point2D invGit(java.awt.geom.Point2D)>($r25);

        $r27 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: net.sourceforge.plantuml.jsondiagram.Mirror xMirror>;

        $r26 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        $i3 = i5 + 1;

        $r28 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>($i3);

        $r29 = (java.awt.geom.Point2D) $r28;

        r30 = virtualinvoke $r27.<net.sourceforge.plantuml.jsondiagram.Mirror: java.awt.geom.Point2D invGit(java.awt.geom.Point2D)>($r29);

        $r32 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: net.sourceforge.plantuml.jsondiagram.Mirror xMirror>;

        $r31 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        $i4 = i5 + 2;

        $r33 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>($i4);

        $r34 = (java.awt.geom.Point2D) $r33;

        r35 = virtualinvoke $r32.<net.sourceforge.plantuml.jsondiagram.Mirror: java.awt.geom.Point2D invGit(java.awt.geom.Point2D)>($r34);

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r38, r30, r35);

        i5 = i5 + 3;

        goto label1;

     label2:
        interfaceinvoke r37.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        $r10 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.awt.geom.Point2D ep>;

        if $r10 == null goto label3;

        $r12 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: net.sourceforge.plantuml.jsondiagram.Mirror xMirror>;

        $r13 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        $r11 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.util.List points>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i2);

        $r15 = (java.awt.geom.Point2D) $r14;

        r39 = virtualinvoke $r12.<net.sourceforge.plantuml.jsondiagram.Mirror: java.awt.geom.Point2D invGit(java.awt.geom.Point2D)>($r15);

        $r17 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: net.sourceforge.plantuml.jsondiagram.Mirror xMirror>;

        $r16 = r3.<net.sourceforge.plantuml.gitlog.GitCurve: java.awt.geom.Point2D ep>;

        r40 = virtualinvoke $r17.<net.sourceforge.plantuml.jsondiagram.Mirror: java.awt.geom.Point2D invGit(java.awt.geom.Point2D)>($r16);

        $r18 = new net.sourceforge.plantuml.jsondiagram.Arrow;

        specialinvoke $r18.<net.sourceforge.plantuml.jsondiagram.Arrow: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r39, r40);

        $r20 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r21 = interfaceinvoke r37.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r20);

        virtualinvoke $r18.<net.sourceforge.plantuml.jsondiagram.Arrow: void drawArrow(net.sourceforge.plantuml.ugraphic.UGraphic)>($r21);

     label3:
        return;
    }
}
