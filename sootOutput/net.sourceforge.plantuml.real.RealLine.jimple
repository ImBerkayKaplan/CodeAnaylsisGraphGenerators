class net.sourceforge.plantuml.real.RealLine extends java.lang.Object
{
    private final java.util.List forces;
    private double min;
    private double max;
    private java.util.Set all;
    private static int CPT;

    void <init>()
    {
        net.sourceforge.plantuml.real.RealLine r0;
        java.util.ArrayList $r1;
        java.util.HashSet $r2;

        r0 := @this: net.sourceforge.plantuml.real.RealLine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.real.RealLine: java.util.List forces> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.real.RealLine: java.util.Set all> = $r2;

        return;
    }

    void register(double)
    {
        net.sourceforge.plantuml.real.RealLine r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.real.RealLine;

        d0 := @parameter0: double;

        return;
    }

    void register2(net.sourceforge.plantuml.real.AbstractReal)
    {
        net.sourceforge.plantuml.real.RealLine r0;
        net.sourceforge.plantuml.real.AbstractReal r1;
        java.util.Set $r2;

        r0 := @this: net.sourceforge.plantuml.real.RealLine;

        r1 := @parameter0: net.sourceforge.plantuml.real.AbstractReal;

        $r2 = r0.<net.sourceforge.plantuml.real.RealLine: java.util.Set all>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public double getAbsoluteMin()
    {
        net.sourceforge.plantuml.real.RealLine r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.real.RealLine;

        $d0 = r0.<net.sourceforge.plantuml.real.RealLine: double min>;

        return $d0;
    }

    public double getAbsoluteMax()
    {
        net.sourceforge.plantuml.real.RealLine r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.real.RealLine;

        $d0 = r0.<net.sourceforge.plantuml.real.RealLine: double max>;

        return $d0;
    }

    public void addForce(net.sourceforge.plantuml.real.PositiveForce)
    {
        net.sourceforge.plantuml.real.RealLine r0;
        net.sourceforge.plantuml.real.PositiveForce r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.real.RealLine;

        r1 := @parameter0: net.sourceforge.plantuml.real.PositiveForce;

        $r2 = r0.<net.sourceforge.plantuml.real.RealLine: java.util.List forces>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void compile()
    {
        java.util.HashMap $r0;
        net.sourceforge.plantuml.real.RealLine r2;
        java.util.List $r3;
        java.lang.IllegalStateException $r4;
        int $i0, $i1, i4;
        java.util.Set $r5;
        boolean $z0, z1, $z2, z3;
        java.lang.Object $r6, $r7;
        double $d0, $d1, d2;
        byte $b2, $b3;
        java.util.Iterator r8, r10;
        net.sourceforge.plantuml.real.PositiveForce r9;
        net.sourceforge.plantuml.real.AbstractReal r11;

        r2 := @this: net.sourceforge.plantuml.real.RealLine;

        i4 = 0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

     label01:
        z1 = 1;

        $r3 = r2.<net.sourceforge.plantuml.real.RealLine: java.util.List forces>;

        r8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r7 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.real.PositiveForce) $r7;

        z3 = virtualinvoke r9.<net.sourceforge.plantuml.real.PositiveForce: boolean apply()>();

        if z3 == 0 goto label03;

        staticinvoke <net.sourceforge.plantuml.real.RealLine: void incCounter(java.util.Map,net.sourceforge.plantuml.real.PositiveForce)>($r0, r9);

        z1 = 0;

     label03:
        goto label02;

     label04:
        if z1 == 0 goto label09;

        $i0 = <net.sourceforge.plantuml.real.RealLine: int CPT>;

        $i1 = $i0 + i4;

        <net.sourceforge.plantuml.real.RealLine: int CPT> = $i1;

        r2.<net.sourceforge.plantuml.real.RealLine: double min> = 0.0;

        r2.<net.sourceforge.plantuml.real.RealLine: double max> = 0.0;

        $r5 = r2.<net.sourceforge.plantuml.real.RealLine: java.util.Set all>;

        r10 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (net.sourceforge.plantuml.real.AbstractReal) $r6;

        d2 = virtualinvoke r11.<net.sourceforge.plantuml.real.AbstractReal: double getCurrentValue()>();

        $d0 = r2.<net.sourceforge.plantuml.real.RealLine: double max>;

        $b2 = d2 cmpl $d0;

        if $b2 <= 0 goto label06;

        r2.<net.sourceforge.plantuml.real.RealLine: double max> = d2;

     label06:
        $d1 = r2.<net.sourceforge.plantuml.real.RealLine: double min>;

        $b3 = d2 cmpg $d1;

        if $b3 >= 0 goto label07;

        r2.<net.sourceforge.plantuml.real.RealLine: double min> = d2;

     label07:
        goto label05;

     label08:
        return;

     label09:
        i4 = i4 + 1;

        if i4 <= 99999 goto label10;

        specialinvoke r2.<net.sourceforge.plantuml.real.RealLine: void printCounter(java.util.Map)>($r0);

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Inifinite Loop?");

        throw $r4;

     label10:
        goto label01;
    }

    private void printCounter(java.util.Map)
    {
        net.sourceforge.plantuml.real.RealLine r0;
        java.util.List $r1;
        boolean $z0, $z1;
        java.util.Map r2;
        java.util.Set $r3;
        java.lang.Object $r4, $r8, $r11, $r14;
        java.lang.StringBuilder $r5, $r7, $r9, $r10, $r12, $r15, $r17, $r18;
        java.io.PrintStream $r6, $r16;
        java.lang.String $r13, $r19;
        java.util.Iterator r20, r22;
        net.sourceforge.plantuml.real.PositiveForce r21;
        java.util.Map$Entry r23;

        r0 := @this: net.sourceforge.plantuml.real.RealLine;

        r2 := @parameter0: java.util.Map;

        $r1 = r0.<net.sourceforge.plantuml.real.RealLine: java.util.List forces>;

        r20 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (net.sourceforge.plantuml.real.PositiveForce) $r14;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("force=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r19);

        goto label1;

     label2:
        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r22 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r4;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count=");

        $r8 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r11 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r13);

        goto label3;

     label4:
        return;
    }

    private static void incCounter(java.util.Map, net.sourceforge.plantuml.real.PositiveForce)
    {
        java.util.Map r0;
        net.sourceforge.plantuml.real.PositiveForce r1;
        java.lang.Object $r2;
        java.lang.Integer r3, $r4;
        int $i0, $i1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: net.sourceforge.plantuml.real.PositiveForce;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.Integer) $r2;

        if r3 != null goto label1;

        $i1 = 1;

        goto label2;

     label1:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

     label2:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return;
    }

    net.sourceforge.plantuml.real.Real asMaxAbsolute()
    {
        net.sourceforge.plantuml.real.RealLine$MaxAbsolute $r0;
        net.sourceforge.plantuml.real.RealLine r1;

        r1 := @this: net.sourceforge.plantuml.real.RealLine;

        $r0 = new net.sourceforge.plantuml.real.RealLine$MaxAbsolute;

        specialinvoke $r0.<net.sourceforge.plantuml.real.RealLine$MaxAbsolute: void <init>(net.sourceforge.plantuml.real.RealLine)>(r1);

        return $r0;
    }

    net.sourceforge.plantuml.real.Real asMinAbsolute()
    {
        net.sourceforge.plantuml.real.RealLine$MinAbsolute $r0;
        net.sourceforge.plantuml.real.RealLine r1;

        r1 := @this: net.sourceforge.plantuml.real.RealLine;

        $r0 = new net.sourceforge.plantuml.real.RealLine$MinAbsolute;

        specialinvoke $r0.<net.sourceforge.plantuml.real.RealLine$MinAbsolute: void <init>(net.sourceforge.plantuml.real.RealLine)>(r1);

        return $r0;
    }

    static double access$000(net.sourceforge.plantuml.real.RealLine)
    {
        net.sourceforge.plantuml.real.RealLine r0;
        double $d0;

        r0 := @parameter0: net.sourceforge.plantuml.real.RealLine;

        $d0 = r0.<net.sourceforge.plantuml.real.RealLine: double max>;

        return $d0;
    }

    static double access$100(net.sourceforge.plantuml.real.RealLine)
    {
        net.sourceforge.plantuml.real.RealLine r0;
        double $d0;

        r0 := @parameter0: net.sourceforge.plantuml.real.RealLine;

        $d0 = r0.<net.sourceforge.plantuml.real.RealLine: double min>;

        return $d0;
    }
}
