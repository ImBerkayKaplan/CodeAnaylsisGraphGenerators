public class net.sourceforge.plantuml.math.ConverterSvg extends java.lang.Object
{
    private final javax.swing.Icon icon;
    private java.awt.Dimension dimension;

    public void <init>(javax.swing.Icon)
    {
        net.sourceforge.plantuml.math.ConverterSvg r0;
        javax.swing.Icon r1;

        r0 := @this: net.sourceforge.plantuml.math.ConverterSvg;

        r1 := @parameter0: javax.swing.Icon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.math.ConverterSvg: javax.swing.Icon icon> = r1;

        return;
    }

    public java.lang.String getSvg(double, boolean, java.awt.Color) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.InstantiationException, java.io.IOException
    {
        java.lang.Class r0, r8, r13, $r15, $r25, $r35, $r37;
        java.lang.Class[] $r1, $r9, $r14, $r26, $r36;
        java.lang.reflect.Method $r2, $r10, $r27, $r38;
        java.lang.Object[] $r3, $r11, $r17, $r28, $r39;
        java.lang.Object $r4, r12, $r19;
        org.w3c.dom.DOMImplementation r5;
        org.w3c.dom.Document r7;
        java.lang.reflect.Constructor $r16;
        boolean z0;
        java.lang.Boolean $r18, $r40;
        java.awt.Graphics r20;
        net.sourceforge.plantuml.math.ConverterSvg r21;
        java.awt.Dimension $r22, $r29;
        javax.swing.Icon $r23, $r24, $r32, $r43, $r44;
        int $i0, $i1, $i2, $i3;
        java.awt.Color r31;
        java.io.CharArrayWriter $r33;
        java.lang.String $r42;
        double d0;

        r21 := @this: net.sourceforge.plantuml.math.ConverterSvg;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        r31 := @parameter2: java.awt.Color;

        r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.batik.dom.GenericDOMImplementation");

        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getDOMImplementation", $r1);

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        r5 = (org.w3c.dom.DOMImplementation) $r4;

        r7 = interfaceinvoke r5.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>("http://www.w3.org/2000/svg", "svg", null);

        r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.batik.svggen.SVGGeneratorContext");

        $r9 = newarray (java.lang.Class)[1];

        $r9[0] = class "Lorg/w3c/dom/Document;";

        $r10 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createDefault", $r9);

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r7;

        r12 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r11);

        r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.batik.svggen.SVGGraphics2D");

        $r14 = newarray (java.lang.Class)[2];

        $r14[0] = r8;

        $r15 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r14[1] = $r15;

        $r16 = virtualinvoke r13.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r14);

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r12;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r17[1] = $r18;

        $r19 = virtualinvoke $r16.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r17);

        r20 = (java.awt.Graphics) $r19;

        $r22 = new java.awt.Dimension;

        $r23 = r21.<net.sourceforge.plantuml.math.ConverterSvg: javax.swing.Icon icon>;

        $i0 = interfaceinvoke $r23.<javax.swing.Icon: int getIconWidth()>();

        $r24 = r21.<net.sourceforge.plantuml.math.ConverterSvg: javax.swing.Icon icon>;

        $i1 = interfaceinvoke $r24.<javax.swing.Icon: int getIconHeight()>();

        specialinvoke $r22.<java.awt.Dimension: void <init>(int,int)>($i0, $i1);

        r21.<net.sourceforge.plantuml.math.ConverterSvg: java.awt.Dimension dimension> = $r22;

        $r25 = virtualinvoke r20.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = newarray (java.lang.Class)[1];

        $r26[0] = class "Ljava/awt/Dimension;";

        $r27 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setSVGCanvasSize", $r26);

        $r28 = newarray (java.lang.Object)[1];

        $r29 = r21.<net.sourceforge.plantuml.math.ConverterSvg: java.awt.Dimension dimension>;

        $r28[0] = $r29;

        virtualinvoke $r27.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r20, $r28);

        if r31 == null goto label1;

        virtualinvoke r20.<java.awt.Graphics: void setColor(java.awt.Color)>(r31);

        $r43 = r21.<net.sourceforge.plantuml.math.ConverterSvg: javax.swing.Icon icon>;

        $i2 = interfaceinvoke $r43.<javax.swing.Icon: int getIconWidth()>();

        $r44 = r21.<net.sourceforge.plantuml.math.ConverterSvg: javax.swing.Icon icon>;

        $i3 = interfaceinvoke $r44.<javax.swing.Icon: int getIconHeight()>();

        virtualinvoke r20.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i2, $i3);

     label1:
        $r32 = r21.<net.sourceforge.plantuml.math.ConverterSvg: javax.swing.Icon icon>;

        interfaceinvoke $r32.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(null, r20, 0, 0);

        $r33 = new java.io.CharArrayWriter;

        specialinvoke $r33.<java.io.CharArrayWriter: void <init>()>();

        $r35 = virtualinvoke r20.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = newarray (java.lang.Class)[2];

        $r36[0] = class "Ljava/io/Writer;";

        $r37 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r36[1] = $r37;

        $r38 = virtualinvoke $r35.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("stream", $r36);

        $r39 = newarray (java.lang.Object)[2];

        $r39[0] = $r33;

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r39[1] = $r40;

        virtualinvoke $r38.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r20, $r39);

        virtualinvoke $r33.<java.io.Writer: void flush()>();

        virtualinvoke $r33.<java.io.Writer: void close()>();

        $r42 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>();

        return $r42;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()
    {
        net.sourceforge.plantuml.math.ConverterSvg r0;
        java.awt.Dimension $r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;

        r0 := @this: net.sourceforge.plantuml.math.ConverterSvg;

        $r1 = r0.<net.sourceforge.plantuml.math.ConverterSvg: java.awt.Dimension dimension>;

        $r2 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D fromDimension(java.awt.Dimension)>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class r0, $r4, $r8, r12;
        java.lang.Class[] $r1;
        java.lang.reflect.Method r2;
        java.lang.Object[] $r3, $r7;
        java.lang.Object $r5, $r9;
        java.lang.Exception $r11;

     label1:
        r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.scilab.forge.jlatexmath.DefaultTeXFont");

        r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.scilab.forge.jlatexmath.AlphabetRegistration");

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = r0;

        r2 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("registerAlphabet", $r1);

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.scilab.forge.jlatexmath.cyrillic.CyrillicRegistration");

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r3[0] = $r5;

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.scilab.forge.jlatexmath.greek.GreekRegistration");

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Object newInstance()>();

        $r7[0] = $r9;

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
