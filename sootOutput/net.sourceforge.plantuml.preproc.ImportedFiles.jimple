public class net.sourceforge.plantuml.preproc.ImportedFiles extends java.lang.Object
{
    private final java.util.List imported;
    private final net.sourceforge.plantuml.AParentFolder currentDir;

    private void <init>(java.util.List, net.sourceforge.plantuml.AParentFolder)
    {
        net.sourceforge.plantuml.preproc.ImportedFiles r0;
        java.util.List r1;
        net.sourceforge.plantuml.AParentFolder r2;

        r0 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: net.sourceforge.plantuml.AParentFolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List imported> = r1;

        r0.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.AParentFolder currentDir> = r2;

        return;
    }

    public net.sourceforge.plantuml.preproc.ImportedFiles withCurrentDir(net.sourceforge.plantuml.AParentFolder)
    {
        net.sourceforge.plantuml.AParentFolder r0;
        net.sourceforge.plantuml.preproc.ImportedFiles $r1, r2;
        java.util.List $r3;

        r2 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        r0 := @parameter0: net.sourceforge.plantuml.AParentFolder;

        if r0 != null goto label1;

        return r2;

     label1:
        $r1 = new net.sourceforge.plantuml.preproc.ImportedFiles;

        $r3 = r2.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List imported>;

        specialinvoke $r1.<net.sourceforge.plantuml.preproc.ImportedFiles: void <init>(java.util.List,net.sourceforge.plantuml.AParentFolder)>($r3, r0);

        return $r1;
    }

    public static net.sourceforge.plantuml.preproc.ImportedFiles createImportedFiles(net.sourceforge.plantuml.AParentFolder)
    {
        net.sourceforge.plantuml.preproc.ImportedFiles $r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.AParentFolder r2;

        r2 := @parameter0: net.sourceforge.plantuml.AParentFolder;

        $r0 = new net.sourceforge.plantuml.preproc.ImportedFiles;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke $r0.<net.sourceforge.plantuml.preproc.ImportedFiles: void <init>(java.util.List,net.sourceforge.plantuml.AParentFolder)>($r1, r2);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        net.sourceforge.plantuml.preproc.ImportedFiles r2;
        java.util.List $r3;
        net.sourceforge.plantuml.AParentFolder $r6;
        java.lang.String $r8;

        r2 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImportedFiles=");

        $r3 = r2.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List imported>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" currentDir=");

        $r6 = r2.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.AParentFolder currentDir>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public net.sourceforge.plantuml.AFile getAFile(java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.preproc.ImportedFiles r0;
        net.sourceforge.plantuml.AParentFolder r1;
        net.sourceforge.plantuml.AFileRegular $r2, $r16;
        net.sourceforge.plantuml.security.SFile $r3, $r5, r14, $r17, r18;
        java.lang.String r4, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        net.sourceforge.plantuml.AFile r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.util.List $r11;
        java.util.Iterator r12;
        java.lang.Object $r13;
        net.sourceforge.plantuml.AFileZipEntry $r15;

        r0 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.AParentFolder currentDir>;

        if r1 == null goto label1;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.preproc.ImportedFiles: boolean isAbsolute(java.lang.String)>(r4);

        if $z0 == 0 goto label2;

     label1:
        $r2 = new net.sourceforge.plantuml.AFileRegular;

        $r3 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r3.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>(r4);

        $r5 = virtualinvoke $r3.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getCanonicalFile()>();

        specialinvoke $r2.<net.sourceforge.plantuml.AFileRegular: void <init>(net.sourceforge.plantuml.security.SFile)>($r5);

        return $r2;

     label2:
        r6 = interfaceinvoke r1.<net.sourceforge.plantuml.AParentFolder: net.sourceforge.plantuml.AFile getAFile(java.lang.String)>(r4);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImportedFiles::getAFile filecurrent = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r10);

        if r6 == null goto label3;

        $z5 = interfaceinvoke r6.<net.sourceforge.plantuml.AFile: boolean isOk()>();

        if $z5 == 0 goto label3;

        return r6;

     label3:
        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List getPath()>();

        r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z6 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label8;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.security.SFile) $r13;

        $z1 = virtualinvoke r14.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z1 == 0 goto label6;

        r18 = virtualinvoke r14.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile file(java.lang.String)>(r4);

        $z4 = virtualinvoke r18.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z4 == 0 goto label5;

        $r16 = new net.sourceforge.plantuml.AFileRegular;

        $r17 = virtualinvoke r18.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getCanonicalFile()>();

        specialinvoke $r16.<net.sourceforge.plantuml.AFileRegular: void <init>(net.sourceforge.plantuml.security.SFile)>($r17);

        return $r16;

     label5:
        goto label7;

     label6:
        $z2 = virtualinvoke r14.<net.sourceforge.plantuml.security.SFile: boolean isFile()>();

        if $z2 == 0 goto label7;

        $r15 = new net.sourceforge.plantuml.AFileZipEntry;

        specialinvoke $r15.<net.sourceforge.plantuml.AFileZipEntry: void <init>(net.sourceforge.plantuml.security.SFile,java.lang.String)>(r14, r4);

        $z3 = virtualinvoke $r15.<net.sourceforge.plantuml.AFileZipEntry: boolean isOk()>();

        if $z3 == 0 goto label7;

        return $r15;

     label7:
        goto label4;

     label8:
        return r6;
    }

    public java.util.List getPath()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.preproc.ImportedFiles r1;
        java.util.List $r2, $r4, $r5;

        r1 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List imported>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = specialinvoke r1.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List includePath()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.util.List getPath(java.lang.String)>("java.class.path");

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r0;
    }

    private java.util.List includePath()
    {
        java.util.List $r0;
        net.sourceforge.plantuml.preproc.ImportedFiles r1;

        r1 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        $r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.util.List getPath(java.lang.String)>("plantuml.include.path");

        return $r0;
    }

    private boolean isAbsolute(java.lang.String)
    {
        net.sourceforge.plantuml.security.SFile $r0;
        java.lang.String r1;
        boolean $z0;
        net.sourceforge.plantuml.preproc.ImportedFiles r3;

        r3 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        r1 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r0.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.security.SFile: boolean isAbsolute()>();

        return $z0;
    }

    public void add(net.sourceforge.plantuml.security.SFile)
    {
        net.sourceforge.plantuml.preproc.ImportedFiles r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        $r2 = r0.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List imported>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public net.sourceforge.plantuml.AParentFolder getCurrentDir()
    {
        net.sourceforge.plantuml.preproc.ImportedFiles r0;
        net.sourceforge.plantuml.AParentFolder $r1;

        r0 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        $r1 = r0.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.AParentFolder currentDir>;

        return $r1;
    }

    public net.sourceforge.plantuml.preproc.FileWithSuffix getFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r2, r4, r7;
        int i0, $i1;
        net.sourceforge.plantuml.preproc.ImportedFiles r1;
        boolean $z0;
        net.sourceforge.plantuml.preproc.FileWithSuffix $r3, $r5;
        net.sourceforge.plantuml.AFile r6;

        r1 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(126);

        if i0 != -1 goto label1;

        r6 = virtualinvoke r1.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.AFile getAFile(java.lang.String)>(r0);

        r7 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r6 = virtualinvoke r1.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.AFile getAFile(java.lang.String)>($r2);

        $i1 = i0 + 1;

        r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        $z0 = specialinvoke r1.<net.sourceforge.plantuml.preproc.ImportedFiles: boolean isAllowed(net.sourceforge.plantuml.AFile)>(r6);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.preproc.FileWithSuffix none()>();

        return $r5;

     label3:
        $r3 = new net.sourceforge.plantuml.preproc.FileWithSuffix;

        specialinvoke $r3.<net.sourceforge.plantuml.preproc.FileWithSuffix: void <init>(java.lang.String,java.lang.String,net.sourceforge.plantuml.AFile,java.lang.String)>(r0, r4, r6, r7);

        return $r3;
    }

    private boolean isAllowed(net.sourceforge.plantuml.AFile) throws java.io.IOException
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.AFile r0;
        net.sourceforge.plantuml.security.SFile r1;
        net.sourceforge.plantuml.preproc.ImportedFiles r2;
        java.util.List $r3;

        r2 := @this: net.sourceforge.plantuml.preproc.ImportedFiles;

        r0 := @parameter0: net.sourceforge.plantuml.AFile;

        $z0 = <net.sourceforge.plantuml.OptionFlags: boolean ALLOW_INCLUDE>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.AFile: net.sourceforge.plantuml.security.SFile getSystemFolder()>();

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.preproc.ImportedFiles: java.util.List includePath()>();

        $z1 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
}
