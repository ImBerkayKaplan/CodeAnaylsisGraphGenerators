public class net.sourceforge.plantuml.json.JsonArray extends net.sourceforge.plantuml.json.JsonValue implements java.lang.Iterable
{
    private final java.util.List values;

    public void <init>()
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        specialinvoke r0.<net.sourceforge.plantuml.json.JsonValue: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values> = $r1;

        return;
    }

    public void <init>(net.sourceforge.plantuml.json.JsonArray)
    {
        net.sourceforge.plantuml.json.JsonArray r0, r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonArray;

        specialinvoke r0.<net.sourceforge.plantuml.json.JsonArray: void <init>(net.sourceforge.plantuml.json.JsonArray,boolean)>(r1, 0);

        return;
    }

    private void <init>(net.sourceforge.plantuml.json.JsonArray, boolean)
    {
        net.sourceforge.plantuml.json.JsonArray r0, r1;
        boolean z0;
        java.util.ArrayList $r2;
        java.util.List $r3, $r4, $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonArray;

        z0 := @parameter1: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.json.JsonValue: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("array is null");

        throw $r6;

     label1:
        if z0 == 0 goto label2;

        $r4 = r1.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values> = $r5;

        goto label3;

     label2:
        $r2 = new java.util.ArrayList;

        $r3 = r1.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values> = $r2;

     label3:
        return;
    }

    public static net.sourceforge.plantuml.json.JsonArray readFrom(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        net.sourceforge.plantuml.json.JsonValue $r1;
        net.sourceforge.plantuml.json.JsonArray $r2;

        r0 := @parameter0: java.io.Reader;

        $r1 = staticinvoke <net.sourceforge.plantuml.json.JsonValue: net.sourceforge.plantuml.json.JsonValue readFrom(java.io.Reader)>(r0);

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonValue: net.sourceforge.plantuml.json.JsonArray asArray()>();

        return $r2;
    }

    public static net.sourceforge.plantuml.json.JsonArray readFrom(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.json.JsonValue $r1;
        net.sourceforge.plantuml.json.JsonArray $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <net.sourceforge.plantuml.json.JsonValue: net.sourceforge.plantuml.json.JsonValue readFrom(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.json.JsonValue: net.sourceforge.plantuml.json.JsonArray asArray()>();

        return $r2;
    }

    public static net.sourceforge.plantuml.json.JsonArray unmodifiableArray(net.sourceforge.plantuml.json.JsonArray)
    {
        net.sourceforge.plantuml.json.JsonArray $r0, r1;

        r1 := @parameter0: net.sourceforge.plantuml.json.JsonArray;

        $r0 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: void <init>(net.sourceforge.plantuml.json.JsonArray,boolean)>(r1, 1);

        return $r0;
    }

    public net.sourceforge.plantuml.json.JsonArray add(int)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(int)>(i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray add(long)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        long l0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        l0 := @parameter0: long;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(long)>(l0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray add(float)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        float f0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        f0 := @parameter0: float;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(float)>(f0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray add(double)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        double d0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(double)>(d0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray add(boolean)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        boolean z0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        z0 := @parameter0: boolean;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(boolean)>(z0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray add(java.lang.String)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        java.lang.String r1;
        java.util.List $r2;
        net.sourceforge.plantuml.json.JsonValue $r3;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r3 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(java.lang.String)>(r1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)
    {
        net.sourceforge.plantuml.json.JsonValue r0;
        net.sourceforge.plantuml.json.JsonArray r1;
        java.util.List $r2;
        java.lang.NullPointerException $r3;

        r1 := @this: net.sourceforge.plantuml.json.JsonArray;

        r0 := @parameter0: net.sourceforge.plantuml.json.JsonValue;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("value is null");

        throw $r3;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return r1;
    }

    public net.sourceforge.plantuml.json.JsonArray set(int, int)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0, i1;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(int)>(i1);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray set(int, long)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        long l1;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(long)>(l1);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray set(int, float)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        float f0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(float)>(f0);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray set(int, double)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        double d0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(double)>(d0);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray set(int, boolean)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        boolean z0;
        java.util.List $r1;
        net.sourceforge.plantuml.json.JsonValue $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(boolean)>(z0);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray set(int, java.lang.String)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        java.lang.String r1;
        java.util.List $r2;
        net.sourceforge.plantuml.json.JsonValue $r3;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r3 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(java.lang.String)>(r1);

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r3);

        return r0;
    }

    public net.sourceforge.plantuml.json.JsonArray set(int, net.sourceforge.plantuml.json.JsonValue)
    {
        net.sourceforge.plantuml.json.JsonValue r0;
        net.sourceforge.plantuml.json.JsonArray r1;
        int i0;
        java.util.List $r2;
        java.lang.NullPointerException $r4;

        r1 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        r0 := @parameter1: net.sourceforge.plantuml.json.JsonValue;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("value is null");

        throw $r4;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r0);

        return r1;
    }

    public net.sourceforge.plantuml.json.JsonArray remove(int)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        return r0;
    }

    public int size()
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public net.sourceforge.plantuml.json.JsonValue get(int)
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.json.JsonValue $r3;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (net.sourceforge.plantuml.json.JsonValue) $r2;

        return $r3;
    }

    public java.util.List values()
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        java.util.List $r1;
        java.util.Iterator r2;
        net.sourceforge.plantuml.json.JsonArray$1 $r3;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $r3 = new net.sourceforge.plantuml.json.JsonArray$1;

        specialinvoke $r3.<net.sourceforge.plantuml.json.JsonArray$1: void <init>(net.sourceforge.plantuml.json.JsonArray,java.util.Iterator)>(r0, r2);

        return $r3;
    }

    void write(net.sourceforge.plantuml.json.JsonWriter) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        net.sourceforge.plantuml.json.JsonArray r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3, $r5;
        net.sourceforge.plantuml.json.JsonValue $r4, $r6;

        r1 := @this: net.sourceforge.plantuml.json.JsonArray;

        r0 := @parameter0: net.sourceforge.plantuml.json.JsonWriter;

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonWriter: void writeArrayOpen()>();

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.json.JsonArray: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (net.sourceforge.plantuml.json.JsonValue) $r3;

        virtualinvoke $r4.<net.sourceforge.plantuml.json.JsonValue: void write(net.sourceforge.plantuml.json.JsonWriter)>(r0);

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonWriter: void writeArraySeparator()>();

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (net.sourceforge.plantuml.json.JsonValue) $r5;

        virtualinvoke $r6.<net.sourceforge.plantuml.json.JsonValue: void write(net.sourceforge.plantuml.json.JsonWriter)>(r0);

        goto label1;

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonWriter: void writeArrayClose()>();

        return;
    }

    public boolean isArray()
    {
        net.sourceforge.plantuml.json.JsonArray r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        return 1;
    }

    public net.sourceforge.plantuml.json.JsonArray asArray()
    {
        net.sourceforge.plantuml.json.JsonArray r0;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        return r0;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.json.JsonArray r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        net.sourceforge.plantuml.json.JsonArray r0, r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        java.util.List $r5, $r6;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonArray;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (net.sourceforge.plantuml.json.JsonArray) r1;

        $r6 = r0.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $r5 = r4.<net.sourceforge.plantuml.json.JsonArray: java.util.List values>;

        $z0 = interfaceinvoke $r6.<java.util.List: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }
}
