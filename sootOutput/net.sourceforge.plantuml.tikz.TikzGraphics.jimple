public class net.sourceforge.plantuml.tikz.TikzGraphics extends java.lang.Object
{
    private final java.util.List cmd;
    private final boolean withPreamble;
    private java.awt.Color color;
    private java.awt.Color fillcolor;
    private java.awt.Color fillcolorGradient2;
    private char gradientPolicy;
    private double thickness;
    private final double scale;
    private java.lang.String dash;
    private final java.util.Map colornames;
    private final java.util.Map styles;
    private final java.util.Map stylesID;
    private java.lang.String pendingUrl;
    private boolean urlIgnoreText;
    private boolean hasUrl;
    static final boolean $assertionsDisabled;

    public void <init>(double, boolean)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.util.ArrayList $r1;
        java.awt.Color $r2, $r3;
        java.util.LinkedHashMap $r4, $r5;
        java.util.HashMap $r6;
        boolean z0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.List cmd> = $r1;

        $r2 = <java.awt.Color: java.awt.Color BLACK>;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color> = $r2;

        $r3 = <java.awt.Color: java.awt.Color BLACK>;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor> = $r3;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolorGradient2> = null;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness> = 1.0;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String dash> = null;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map colornames> = $r4;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map styles> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map stylesID> = $r6;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl> = null;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean urlIgnoreText> = 0;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean hasUrl> = 0;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean withPreamble> = z0;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: double scale> = d0;

        return;
    }

    private void addCommand(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0, $r10, $r12, $r14;
        java.lang.String r1, r4, $r15;
        net.sourceforge.plantuml.tikz.TikzGraphics r2;
        java.util.List $r3;
        boolean $z1, $z2;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.Map $r5, $r8, $r11, $r13;
        java.lang.Object $r6;
        java.lang.Integer r17, r18;

        r2 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.List cmd>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("\\draw[");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("\\shade[");

        if $z2 == 0 goto label4;

     label1:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(93);

        if i0 == -1 goto label4;

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(91);

        $i2 = i1 + 1;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i2, i0);

        $r5 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map styles>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r17 = (java.lang.Integer) $r6;

        if r17 != null goto label2;

        r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r11 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map stylesID>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pstyle");

        $r13 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map stylesID>;

        $i5 = interfaceinvoke $r13.<java.util.Map: int size()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r15);

        goto label3;

     label2:
        $i3 = virtualinvoke r17.<java.lang.Integer: int intValue()>();

        $i4 = $i3 + 1;

        r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

     label3:
        $r8 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map styles>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r18);

     label4:
        return;
    }

    private java.lang.String getColorName(java.awt.Color)
    {
        java.awt.Color r0, $r1, $r2;
        boolean $z0, $z1;
        net.sourceforge.plantuml.tikz.TikzGraphics r3;
        java.util.Map $r4;
        java.lang.Object $r5, $r7;
        java.lang.String r6, $r8;

        r3 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r0 := @parameter0: java.awt.Color;

        $r1 = <java.awt.Color: java.awt.Color WHITE>;

        $z0 = virtualinvoke r0.<java.awt.Color: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return "white";

     label1:
        $r2 = <java.awt.Color: java.awt.Color BLACK>;

        $z1 = virtualinvoke r0.<java.awt.Color: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return "black";

     label2:
        $r4 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map colornames>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $r8 = (java.lang.String) $r7;

        return $r8;
    }

    public void createData(java.io.OutputStream) throws java.io.IOException
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.io.OutputStream r1;
        double $d0, $d1, $d2;
        byte $b0, $b1;
        java.util.Map $r2, $r10, $r35;
        java.util.Set $r3, $r36;
        java.util.List $r4;
        java.lang.Object $r5, $r7, $r11, $r24, $r25, $r27;
        java.lang.String $r6, $r12, $r17, $r20, $r23, $r26, $r29, $r32, $r34, r40, r42;
        java.lang.StringBuilder $r8, $r9, $r13, $r14, $r15, $r16, $r18, $r19, $r21, $r22, $r30, $r31, $r33;
        java.awt.Color $r28;
        java.util.Iterator r37, r39, r41;
        java.util.Map$Entry r38;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 := @parameter0: java.io.OutputStream;

        $z0 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean withPreamble>;

        if $z0 == 0 goto label02;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\documentclass{standalone}");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\usepackage{tikz}");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\usepackage{aeguill}");

        $z4 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean hasUrl>;

        if $z4 == 0 goto label01;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\usetikzlibrary{calc}");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\usepackage{hyperref}");

     label01:
        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\begin{document}");

     label02:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("% generated by Plantuml ");

        $r32 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString(int)>(15);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, $r34);

        $z5 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean hasUrl>;

        if $z5 == 0 goto label03;

        $z3 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean withPreamble>;

        if $z3 == 0 goto label03;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\tikzset{");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "    href node/.style={");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "        alias=sourcenode,");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "        append after command={");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "            let \\p1 = (sourcenode.north west),");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                \\p2=(sourcenode.south east),");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                \\n1={\\x2-\\x1},");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                \\n2={\\y2-\\y1} in");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "            node [inner sep=0pt, outer sep=0pt,anchor=north west,at=(\\p1)] {\\href{#1}{\\XeTeXLinkBox{\\phantom{\\rule{\\n1}{\\n2}}}}}");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                    %xelatex needs \\XeTeXLinkBox, won\'t create a link unless it");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                    %finds text --- rules don\'t work without \\XeTeXLinkBox.");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                    %Still builds correctly with pdflatex and lualatex");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "        }");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "    }");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "}");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\tikzset{");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "    hyperref node/.style={");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "        alias=sourcenode,");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "        append after command={");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "            let \\p1 = (sourcenode.north west),");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                \\p2=(sourcenode.south east),");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                \\n1={\\x2-\\x1},");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                \\n2={\\y2-\\y1} in");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "            node [inner sep=0pt, outer sep=0pt,anchor=north west,at=(\\p1)] {\\hyperref [#1]{\\XeTeXLinkBox{\\phantom{\\rule{\\n1}{\\n2}}}}}");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                    %xelatex needs \\XeTeXLinkBox, won\'t create a link unless it");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                    %finds text --- rules don\'t work without \\XeTeXLinkBox.");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "                    %Still builds correctly with pdflatex and lualatex");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "        }");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "    }");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "}");

     label03:
        $r35 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map colornames>;

        $r36 = interfaceinvoke $r35.<java.util.Map: java.util.Set entrySet()>();

        r37 = interfaceinvoke $r36.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r24 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.util.Map$Entry) $r24;

        $r25 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (java.lang.String) $r25;

        $r27 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = (java.awt.Color) $r27;

        $r29 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String definecolor(java.lang.String,java.awt.Color)>($r26, $r28);

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, $r29);

        goto label04;

     label05:
        $d0 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: double scale>;

        $b0 = $d0 cmpl 1.0;

        if $b0 == 0 goto label06;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\scalebox{");

        $d2 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: double scale>;

        $r20 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>($d2);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}{");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, $r23);

     label06:
        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\begin{tikzpicture}[yscale=-1");

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void purgeStyles()>();

        $r2 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map styles>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r39 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z7 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r7 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.lang.String) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r10 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map stylesID>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40);

        $r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.style={");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, $r17);

        goto label07;

     label08:
        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "]");

        $r4 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.List cmd>;

        r41 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r5 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.String) $r5;

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String useStyle(java.lang.String)>(r42);

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, $r6);

        goto label09;

     label10:
        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\end{tikzpicture}");

        $d1 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: double scale>;

        $b1 = $d1 cmpl 1.0;

        if $b1 == 0 goto label11;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "}");

     label11:
        $z2 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean withPreamble>;

        if $z2 == 0 goto label12;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void out(java.io.OutputStream,java.lang.String)>(r1, "\\end{document}");

     label12:
        return;
    }

    private java.lang.String useStyle(java.lang.String)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.util.Map $r1, $r18, $r31;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2;
        java.lang.String r4, r6, r11, $r20, r23, $r26, $r28, $r33, $r38, $r40, r41, r42;
        java.lang.Object $r5, $r19, $r32;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r21, $r22, $r24, $r25, $r27, $r29, $r30, $r34, $r35, $r36, $r37, $r39;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map styles>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\draw[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r11);

        if $z1 == 0 goto label2;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\draw[");

        $r31 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map stylesID>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r33 = (java.lang.String) $r32;

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r41 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $i1 = virtualinvoke r11.<java.lang.String: int length()>();

        $r38 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i1);

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r40;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\shade[");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r42 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r42);

        if $z2 == 0 goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\shade[");

        $r18 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map stylesID>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r20 = (java.lang.String) $r19;

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $i0 = virtualinvoke r42.<java.lang.String: int length()>();

        $r26 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r28;

     label3:
        goto label1;

     label4:
        return r4;
    }

    private void purgeStyles()
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.util.Map$Entry r5;
        java.lang.Integer $r7;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        $r1 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map styles>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label2;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    private java.lang.String definecolor(java.lang.String, java.awt.Color)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String r2, $r12;
        java.awt.Color r5;
        int $i0, $i1, $i2;
        net.sourceforge.plantuml.tikz.TikzGraphics r13;

        r13 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.awt.Color;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\definecolor{");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}{RGB}{");

        $i0 = virtualinvoke r5.<java.awt.Color: int getRed()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i1 = virtualinvoke r5.<java.awt.Color: int getGreen()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i2 = virtualinvoke r5.<java.awt.Color: int getBlue()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public void rectangle(double, double, double, double)
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8, $r18, $r19, $r21, $r26, $r27, $r30, $r33, $r34, $r37, $r38, $r42, $r43, $r46, $r47, $r50, $r51, $r54, $r55, $r58, $r59, $r60, $r61, $r64, $r66, $r67, $r69, $r73, $r74, $r75, $r76, $r78, $r79, $r81, $r82, $r84, $r85, $r87, $r88;
        net.sourceforge.plantuml.tikz.TikzGraphics r2;
        java.lang.String $r3, $r6, $r9, $r20, $r22, $r28, $r29, $r31, $r36, $r39, $r45, $r48, $r53, $r56, $r62, $r65, $r68, $r70, $r77, $r80, $r83, $r86, $r89, $r90;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7;
        java.awt.Color $r11, $r12, $r35, $r41, $r44, $r52;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        if $r3 != null goto label1;

        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void appendShadeOrDraw(java.lang.StringBuilder)>($r0);

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d4 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt] ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d0, d1);

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rectangle ");

        $d6 = d0 + d2;

        $d5 = d1 + d3;

        $r68 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d6, $d5);

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        goto label6;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\node at ");

        $r6 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d0, d1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[draw, ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r11 == null goto label2;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=");

        $r52 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r53 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r52);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

     label2:
        $r12 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        if $r12 == null goto label3;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fill=");

        $r35 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        $r36 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r35);

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r41 != null goto label3;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=");

        $r44 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        $r45 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r44);

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

     label3:
        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d7 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d7);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt,");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("below right,");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inner sep=2ex,");

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minimum width=");

        $r80 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d2);

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt,");

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r83);

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minimum height=");

        $r86 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d3);

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt,");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r89);

        $r90 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        $z0 = staticinvoke <net.sourceforge.plantuml.Url: boolean isLatex(java.lang.String)>($r90);

        if $z0 == 0 goto label4;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hyperref node=");

        $r28 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        $r29 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String extractInternalHref(java.lang.String)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        goto label5;

     label4:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("href node=");

        $r20 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {};");

        r2.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean urlIgnoreText> = 1;

     label6:
        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    private java.lang.String getAngleFromGradientPolicy()
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        char $c0, $c1, $c2, $c3;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        $c0 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: char gradientPolicy>;

        if $c0 != 45 goto label1;

        return "0";

     label1:
        $c1 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: char gradientPolicy>;

        if $c1 != 124 goto label2;

        return "90";

     label2:
        $c2 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: char gradientPolicy>;

        if $c2 != 47 goto label3;

        return "45";

     label3:
        $c3 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: char gradientPolicy>;

        if $c3 != 92 goto label4;

        return "135";

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    private java.lang.String couple(double, double)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7;
        double d0, d1;
        java.lang.String $r2, $r5, $r8;
        net.sourceforge.plantuml.tikz.TikzGraphics r9;

        r9 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt,");

        $r5 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt)");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String format(double)
    {
        double d0;
        java.lang.String $r0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple4(double)>(d0);

        return $r0;
    }

    private void out(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.lang.String r1, $r5;
        java.nio.charset.Charset $r2, $r4;
        byte[] $r3, $r6;
        net.sourceforge.plantuml.tikz.TikzGraphics r7;

        r7 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r3);

        $r5 = "\n";

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r6);

        return;
    }

    public void text(double, double, java.lang.String, boolean, boolean, boolean)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r5;
        net.sourceforge.plantuml.tikz.TikzGraphics r3;
        double d0, d1;
        java.lang.String $r4, $r6, $r11, r12, $r13, $r23, $r28;
        java.awt.Color $r9, $r27;
        boolean z0, z1, z2, $z3;

        r3 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r12 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\node at ");

        $r4 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d0, d1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[below right");

        $r9 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r9 == null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",color=");

        $r27 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r28 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r27);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]{");

        $r11 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        if $r11 == null goto label2;

        $z3 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean urlIgnoreText>;

        if $z3 == 0 goto label8;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\underline{");

     label3:
        if z1 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\textit{");

     label4:
        if z2 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\textbf{");

     label5:
        $r13 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String protectText(java.lang.String)>(r12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        if z2 == 0 goto label6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label6:
        if z1 == 0 goto label7;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label7:
        if z0 == 0 goto label9;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        goto label9;

     label8:
        specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: void appendPendingUrl(java.lang.StringBuilder)>($r0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r23 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String protectText(java.lang.String)>(r12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label9:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("};");

        specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    public void appendRaw(double, double, java.lang.String)
    {
        java.lang.String r0, $r6, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r7;
        net.sourceforge.plantuml.tikz.TikzGraphics r5;
        double d0, d1;

        r5 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r2 = new java.lang.StringBuilder;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\node at ");

        $r6 = specialinvoke r5.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d0, d1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[below right");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]{");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("};");

        specialinvoke r5.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r2);

        return;
    }

    private void appendPendingUrl(java.lang.StringBuilder)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.lang.String $r1, $r4, $r8, $r9;
        boolean $z0;
        java.lang.StringBuilder r2;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r2 := @parameter0: java.lang.StringBuilder;

        $r1 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        $z0 = staticinvoke <net.sourceforge.plantuml.Url: boolean isLatex(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\hyperref[");

        $r8 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        $r9 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String extractInternalHref(java.lang.String)>($r8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label2;

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\href{");

        $r4 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label2:
        return;
    }

    private static java.lang.String extractInternalHref(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <net.sourceforge.plantuml.Url: boolean isLatex(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r1 = "latex://";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;
    }

    private java.lang.String protectText(java.lang.String)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\", "\\\\\\\\");

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "\\\\_");

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\u00ab", "\\\\guillemotleft ");

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\u00bb", "\\\\guillemotright ");

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "\\\\textless ");

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "\\\\textgreater ");

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "\\\\&");

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("%", "\\\\%");

        r10 = virtualinvoke r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$", "\\$");

        r11 = virtualinvoke r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("{", "\\{");

        r12 = virtualinvoke r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("}", "\\}");

        r13 = virtualinvoke r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("~", "{\\raise.35ex\\hbox{$\\scriptstyle\\mathtt{\\sim}$}}");

        return r13;
    }

    public void line(double, double, double, double)
    {
        java.lang.StringBuilder $r0, $r5, $r6, $r7, $r8, $r19, $r20, $r22, $r25, $r26, $r29, $r30;
        net.sourceforge.plantuml.tikz.TikzGraphics r3;
        java.awt.Color $r4, $r27;
        double $d0, d1, d2, d3, d4;
        java.lang.String $r9, $r11, $r13, $r16, $r21, $r23, $r28, $r31;

        r3 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        d4 := @parameter3: double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\draw[");

        $r4 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r4 == null goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=");

        $r27 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r28 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r27);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d0 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String dash>;

        if $r11 == null goto label2;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",dash pattern=");

        $r21 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String dash>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r13 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d1, d2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r16 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d3, d4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    public void polygon(double[])
    {
        boolean $z0;
        java.lang.StringBuilder $r0, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.tikz.TikzGraphics r2;
        double $d0, $d1, $d2;
        java.lang.String $r7, $r12;
        double[] r10;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.AssertionError $r15;

        r2 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r10 := @parameter0: double[];

        $z0 = <net.sourceforge.plantuml.tikz.TikzGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = lengthof r10;

        $i2 = $i1 % 2;

        if $i2 == 0 goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void appendShadeOrDraw(java.lang.StringBuilder)>($r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d0 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i3 = 0;

     label2:
        $i4 = lengthof r10;

        if i3 >= $i4 goto label3;

        $d2 = r10[i3];

        $i0 = i3 + 1;

        $d1 = r10[$i0];

        $r12 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d2, $d1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        i3 = i3 + 2;

        goto label2;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cycle;");

        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    private void round(double, double[])
    {
        boolean $z0;
        java.lang.StringBuilder $r0, $r3, $r4, $r5, $r6, $r13, $r14, $r16, $r17, $r25, $r26, $r28, $r29, $r37, $r38, $r40, $r41, $r49, $r50, $r52, $r53;
        net.sourceforge.plantuml.tikz.TikzGraphics r2;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        java.lang.String $r7, $r11, $r15, $r18, $r20, $r23, $r27, $r30, $r32, $r35, $r39, $r42, $r44, $r47, $r51, $r54, $r56;
        double[] r10;
        int $i0, $i1, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        java.lang.AssertionError $r60;

        r2 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d3 := @parameter0: double;

        r10 := @parameter1: double[];

        $z0 = <net.sourceforge.plantuml.tikz.TikzGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = lengthof r10;

        $i1 = $i0 % 2;

        if $i1 == 0 goto label1;

        $r60 = new java.lang.AssertionError;

        specialinvoke $r60.<java.lang.AssertionError: void <init>()>();

        throw $r60;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void appendShadeOrDraw(java.lang.StringBuilder)>($r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d0 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i3 = 0 + 1;

        $d2 = r10[0];

        i4 = i3 + 1;

        $d1 = r10[i3];

        $r11 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d2, $d1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arc (180:270:");

        $r15 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt) -- ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        i5 = i4 + 1;

        $d5 = r10[i4];

        i6 = i5 + 1;

        $d4 = r10[i5];

        $r20 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d5, $d4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        i7 = i6 + 1;

        $d7 = r10[i6];

        i8 = i7 + 1;

        $d6 = r10[i7];

        $r23 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d7, $d6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arc (270:360:");

        $r27 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d3);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt) -- ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        i9 = i8 + 1;

        $d9 = r10[i8];

        i10 = i9 + 1;

        $d8 = r10[i9];

        $r32 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d9, $d8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        i11 = i10 + 1;

        $d11 = r10[i10];

        i12 = i11 + 1;

        $d10 = r10[i11];

        $r35 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d11, $d10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arc (0:90:");

        $r39 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d3);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt) -- ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        i13 = i12 + 1;

        $d13 = r10[i12];

        i14 = i13 + 1;

        $d12 = r10[i13];

        $r44 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d13, $d12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        i15 = i14 + 1;

        $d15 = r10[i14];

        i16 = i15 + 1;

        $d14 = r10[i15];

        $r47 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d15, $d14);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arc (90:180:");

        $r51 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d3);

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt) -- ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        i17 = i16 + 1;

        $d17 = r10[i16];

        $d16 = r10[i17];

        $r56 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d17, $d16);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cycle;");

        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    private void appendShadeOrDraw(java.lang.StringBuilder)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.awt.Color $r1, $r4, $r5, $r8, $r14, $r17, $r25, $r33, $r48;
        boolean z0, $z1;
        java.lang.StringBuilder r2, $r6, $r7, $r10, $r11, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r28, $r31, $r32, $r35, $r36, $r39, $r40, $r42, $r43, $r47, $r50, $r51;
        java.lang.String $r9, $r12, $r18, $r21, $r26, $r29, $r34, $r37, $r41, $r44, $r49, $r52, $r56, $r57;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r2 := @parameter0: java.lang.StringBuilder;

        $r1 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolorGradient2>;

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if $z1 == 0 goto label3;

        $r56 = "\\shade[";

        goto label4;

     label3:
        $r56 = "\\draw[";

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r4 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r4 == null goto label7;

        if z0 == 0 goto label5;

        $r57 = "draw=";

        goto label6;

     label5:
        $r57 = "color=";

     label6:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r49 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r48);

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

     label7:
        if z0 == 0 goto label8;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("top color=");

        $r25 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        $r26 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r25);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bottom color=");

        $r33 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolorGradient2>;

        $r34 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r33);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shading=axis,shading angle=");

        $r41 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getAngleFromGradientPolicy()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        goto label9;

     label8:
        $r5 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        if $r5 == null goto label9;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fill=");

        $r8 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r14 != null goto label9;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=");

        $r17 = r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        $r18 = specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label9:
        return;
    }

    public void rectangleRound(double, double, double, double, double)
    {
        double[] r0;
        double d0, d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        net.sourceforge.plantuml.tikz.TikzGraphics r1;

        r1 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d5 := @parameter2: double;

        d11 := @parameter3: double;

        d2 := @parameter4: double;

        r0 = newarray (double)[16];

        r0[0] = d0;

        $d3 = d1 + d2;

        r0[1] = $d3;

        $d4 = d0 + d2;

        r0[2] = $d4;

        r0[3] = d1;

        $d6 = d0 + d5;

        $d7 = $d6 - d2;

        r0[4] = $d7;

        r0[5] = d1;

        $d8 = d0 + d5;

        r0[6] = $d8;

        $d9 = d1 + d2;

        r0[7] = $d9;

        $d10 = d0 + d5;

        r0[8] = $d10;

        $d12 = d1 + d11;

        $d13 = $d12 - d2;

        r0[9] = $d13;

        $d14 = d0 + d5;

        $d15 = $d14 - d2;

        r0[10] = $d15;

        $d16 = d1 + d11;

        r0[11] = $d16;

        $d17 = d0 + d2;

        r0[12] = $d17;

        $d18 = d1 + d11;

        r0[13] = $d18;

        r0[14] = d0;

        $d19 = d1 + d11;

        $d20 = $d19 - d2;

        r0[15] = $d20;

        specialinvoke r1.<net.sourceforge.plantuml.tikz.TikzGraphics: void round(double,double[])>(d2, r0);

        return;
    }

    public void upath(double, double, net.sourceforge.plantuml.ugraphic.UPath)
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r5, $r6, $r24, $r25, $r26, $r43, $r44, $r46;
        net.sourceforge.plantuml.tikz.TikzGraphics r2;
        double $d0, d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22;
        java.lang.String $r7, $r9, $r27, $r29, $r32, $r35, $r39, $r41, $r45, $r47;
        net.sourceforge.plantuml.ugraphic.UPath r11;
        java.util.Iterator r12;
        java.lang.Object $r14;
        net.sourceforge.plantuml.ugraphic.USegment r15;
        net.sourceforge.plantuml.ugraphic.USegmentType r16, $r18, $r19, $r20, $r21, $r22, $r23;
        double[] r17;
        java.lang.UnsupportedOperationException $r37;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d1 := @parameter0: double;

        d3 := @parameter1: double;

        r11 := @parameter2: net.sourceforge.plantuml.ugraphic.UPath;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void appendShadeOrDraw(java.lang.StringBuilder)>($r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d0 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String dash>;

        if $r9 == null goto label01;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",dash pattern=");

        $r45 = r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String dash>;

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

     label01:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        r12 = virtualinvoke r11.<net.sourceforge.plantuml.ugraphic.UPath: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r14 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r15 = (net.sourceforge.plantuml.ugraphic.USegment) $r14;

        r16 = virtualinvoke r15.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegmentType getSegmentType()>();

        r17 = virtualinvoke r15.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $r18 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        if r16 != $r18 goto label03;

        $d19 = r17[0];

        $d22 = $d19 + d1;

        $d20 = r17[1];

        $d21 = $d20 + d3;

        $r41 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d22, $d21);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        goto label09;

     label03:
        $r19 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        if r16 != $r19 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $d15 = r17[0];

        $d18 = $d15 + d1;

        $d16 = r17[1];

        $d17 = $d16 + d3;

        $r39 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d18, $d17);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        goto label09;

     label04:
        $r20 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_QUADTO>;

        if r16 != $r20 goto label05;

        $r37 = new java.lang.UnsupportedOperationException;

        specialinvoke $r37.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r37;

     label05:
        $r21 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        if r16 != $r21 goto label06;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ..controls ");

        $d2 = r17[0];

        $d6 = $d2 + d1;

        $d4 = r17[1];

        $d5 = $d4 + d3;

        $r29 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d6, $d5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $d7 = r17[2];

        $d10 = $d7 + d1;

        $d8 = r17[3];

        $d9 = $d8 + d3;

        $r32 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d10, $d9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" .. ");

        $d11 = r17[4];

        $d14 = $d11 + d1;

        $d12 = r17[5];

        $d13 = $d12 + d3;

        $r35 = specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d14, $d13);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        goto label09;

     label06:
        $r22 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CLOSE>;

        if r16 != $r22 goto label07;

        goto label09;

     label07:
        $r23 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        if r16 != $r23 goto label08;

        goto label09;

     label08:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown4 ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void println(java.lang.Object)>($r27);

     label09:
        goto label02;

     label10:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        specialinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    public void ellipse(double, double, double, double)
    {
        java.lang.StringBuilder $r0, $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r30, $r33, $r34;
        net.sourceforge.plantuml.tikz.TikzGraphics r3;
        java.awt.Color $r4, $r5, $r23, $r31;
        double $d0, d1, d2, d3, d4;
        java.lang.String $r10, $r13, $r16, $r19, $r24, $r27, $r32, $r35;

        r3 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        d4 := @parameter3: double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\draw[");

        $r4 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r4 == null goto label1;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=");

        $r31 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r32 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r31);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

     label1:
        $r5 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        if $r5 == null goto label2;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fill=");

        $r23 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        $r24 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d0 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt] ");

        $r10 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d1, d2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ellipse (");

        $r13 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt and ");

        $r16 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d4);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt);");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    public void arc(double, double, int, int, double)
    {
        java.lang.StringBuilder $r0, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r22, $r23, $r26, $r27, $r30, $r31, $r34, $r35;
        net.sourceforge.plantuml.tikz.TikzGraphics r3;
        java.awt.Color $r4, $r5, $r24, $r32;
        double $d0, d1, d2, d3;
        java.lang.String $r10, $r17, $r20, $r25, $r28, $r33, $r36;
        int i0, i1;

        r3 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        d3 := @parameter4: double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\draw[");

        $r4 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        if $r4 == null goto label1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=");

        $r32 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r33 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r32);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

     label1:
        $r5 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        if $r5 == null goto label2;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fill=");

        $r24 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor>;

        $r25 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line width=");

        $d0 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt] ");

        $r10 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d1, d2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arc (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r17 = staticinvoke <net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String format(double)>(d3);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt);");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    public void drawSingleCharacter(double, double, char)
    {
        java.lang.StringBuilder $r0, $r6, $r7, $r8, $r9;
        net.sourceforge.plantuml.tikz.TikzGraphics r3;
        double d0, d1;
        java.lang.String $r4, $r10;
        char c0;

        r3 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        c0 := @parameter2: char;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\node at ");

        $r4 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>(d0, d1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]{\\textbf{\\Large ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}};");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        return;
    }

    public void drawPathIterator(double, double, java.awt.geom.PathIterator)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r6, $r7, $r10, $r11, $r17, $r18, $r19;
        net.sourceforge.plantuml.tikz.TikzGraphics r3;
        java.awt.Color $r4, $r8;
        java.lang.String $r5, $r9, $r12, $r20, $r22, $r25, $r28, $r31, $r34, $r39, $r41;
        double[] r14;
        java.awt.geom.PathIterator r15;
        boolean $z0;
        int i0;
        java.lang.UnsupportedOperationException $r16;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;

        r3 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r15 := @parameter2: java.awt.geom.PathIterator;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\draw[color=");

        $r4 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r5 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",fill=");

        $r8 = r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color>;

        $r9 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String getColorName(java.awt.Color)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        r14 = newarray (double)[6];

     label1:
        $z0 = interfaceinvoke r15.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label8;

        i0 = interfaceinvoke r15.<java.awt.geom.PathIterator: int currentSegment(double[])>(r14);

        if i0 != 0 goto label2;

        $d26 = r14[0];

        $d29 = $d26 + d0;

        $d27 = r14[1];

        $d28 = $d27 + d2;

        $r41 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d29, $d28);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        goto label7;

     label2:
        if i0 != 1 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $d22 = r14[0];

        $d25 = $d22 + d0;

        $d23 = r14[1];

        $d24 = $d23 + d2;

        $r39 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d25, $d24);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        goto label7;

     label3:
        if i0 != 4 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: void addCommand(java.lang.StringBuilder)>($r0);

        virtualinvoke $r0.<java.lang.StringBuilder: void setLength(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\draw ");

        goto label7;

     label4:
        if i0 != 3 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ..controls ");

        $d10 = r14[0];

        $d13 = $d10 + d0;

        $d11 = r14[1];

        $d12 = $d11 + d2;

        $r28 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d13, $d12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $d14 = r14[2];

        $d17 = $d14 + d0;

        $d15 = r14[3];

        $d16 = $d15 + d2;

        $r31 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d17, $d16);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" .. ");

        $d18 = r14[4];

        $d21 = $d18 + d0;

        $d19 = r14[5];

        $d20 = $d19 + d2;

        $r34 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d21, $d20);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        goto label7;

     label5:
        if i0 != 2 goto label6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ..controls ");

        $d1 = r14[0];

        $d5 = $d1 + d0;

        $d3 = r14[1];

        $d4 = $d3 + d2;

        $r22 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d5, $d4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" .. ");

        $d6 = r14[2];

        $d9 = $d6 + d0;

        $d7 = r14[3];

        $d8 = $d7 + d2;

        $r25 = specialinvoke r3.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String couple(double,double)>($d9, $d8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        goto label7;

     label6:
        $r16 = new java.lang.UnsupportedOperationException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("code=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label7:
        interfaceinvoke r15.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label8:
        return;
    }

    public void setFillColor(java.awt.Color)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.awt.Color r1;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 := @parameter0: java.awt.Color;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor> = r1;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolorGradient2> = null;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void addColor(java.awt.Color)>(r1);

        return;
    }

    public void setGradientColor(java.awt.Color, java.awt.Color, char)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.awt.Color r1, r2;
        char c0;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 := @parameter0: java.awt.Color;

        r2 := @parameter1: java.awt.Color;

        c0 := @parameter2: char;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolor> = r1;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color fillcolorGradient2> = r2;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: char gradientPolicy> = c0;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void addColor(java.awt.Color)>(r1);

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void addColor(java.awt.Color)>(r2);

        return;
    }

    public void setStrokeColor(java.awt.Color)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.awt.Color r1;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 := @parameter0: java.awt.Color;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.awt.Color color> = r1;

        specialinvoke r0.<net.sourceforge.plantuml.tikz.TikzGraphics: void addColor(java.awt.Color)>(r1);

        return;
    }

    private void addColor(java.awt.Color)
    {
        java.awt.Color r0;
        net.sourceforge.plantuml.tikz.TikzGraphics r1;
        java.util.Map $r2, $r6, $r11;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r9;
        java.lang.Object[] $r5;
        int $i0;
        java.lang.Integer $r7;
        java.lang.String $r8, r10;

        r1 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map colornames>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("plantucolor");

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r1.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map colornames>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%04d", $r5);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = r1.<net.sourceforge.plantuml.tikz.TikzGraphics: java.util.Map colornames>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10);

        return;
    }

    public void setStrokeWidth(double, java.lang.String)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        double d0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.String;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: double thickness> = d0;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String dash> = r1;

        return;
    }

    public void openLink(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;
        java.lang.String r1, $r3, r4;
        java.lang.Object $r2;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean hasUrl> = 1;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: boolean urlIgnoreText> = 0;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl> = $r3;

        return;
    }

    public void closeLink()
    {
        net.sourceforge.plantuml.tikz.TikzGraphics r0;

        r0 := @this: net.sourceforge.plantuml.tikz.TikzGraphics;

        r0.<net.sourceforge.plantuml.tikz.TikzGraphics: java.lang.String pendingUrl> = null;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tikz/TikzGraphics;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tikz.TikzGraphics: boolean $assertionsDisabled> = $z1;

        return;
    }
}
