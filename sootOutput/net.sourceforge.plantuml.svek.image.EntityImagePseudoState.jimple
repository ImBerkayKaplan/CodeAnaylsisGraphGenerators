public class net.sourceforge.plantuml.svek.image.EntityImagePseudoState extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private static final int SIZE;
    private final net.sourceforge.plantuml.graphic.TextBlock desc;
    private final net.sourceforge.plantuml.style.SName sname;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.SName)
    {
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.style.SName r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.style.SName;

        specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,java.lang.String,net.sourceforge.plantuml.style.SName)>(r1, r2, "H", r3);

        return;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.style.StyleBuilder $r3;
        net.sourceforge.plantuml.style.Style $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r3);

        return $r4;
    }

    private net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r4, $r5;
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState r3;
        net.sourceforge.plantuml.style.StyleSignature $r6;

        r3 := @this: net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r4 = r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.style.SName sname>;

        $r0[2] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName diamond>;

        $r0[3] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r6;
    }

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, java.lang.String, net.sourceforge.plantuml.style.SName)
    {
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2, $r6, $r14;
        net.sourceforge.plantuml.style.SName r3;
        net.sourceforge.plantuml.cucadiagram.Stereotype r4;
        boolean $z0;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5, $r13, r16;
        net.sourceforge.plantuml.style.Style $r7;
        java.lang.CharSequence[] $r8;
        java.lang.String r9;
        net.sourceforge.plantuml.cucadiagram.Display $r10;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r11;
        net.sourceforge.plantuml.graphic.TextBlock $r12;
        net.sourceforge.plantuml.FontParam $r15;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r9 := @parameter2: java.lang.String;

        r3 := @parameter3: net.sourceforge.plantuml.style.SName;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.style.SName sname> = r3;

        r4 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r13 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam STATE>;

        specialinvoke $r13.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r14, $r15, r4);

        r16 = $r13;

        goto label2;

     label1:
        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.style.Style getStyle()>();

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>($r6, $r7);

        r16 = $r5;

     label2:
        $r8 = newarray (java.lang.CharSequence)[1];

        $r8[0] = r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r8);

        $r11 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r12 = virtualinvoke $r10.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r16, $r11, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.graphic.TextBlock desc> = $r12;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(22.0, 22.0);

        return $r0;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0;
        net.sourceforge.plantuml.ugraphic.UStroke $r2, r30;
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r8, $r12, $r17, $r19, $r23, $r25;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r5, $r9, $r14;
        net.sourceforge.plantuml.ColorParam[] $r6, $r10;
        net.sourceforge.plantuml.ColorParam $r7, $r11;
        net.sourceforge.plantuml.cucadiagram.IEntity $r13;
        double d0, d1, d2, d3, d4, $d5, $d6;
        net.sourceforge.plantuml.style.PName $r15, $r21, $r27;
        net.sourceforge.plantuml.style.Value $r16, $r22, $r28;
        net.sourceforge.plantuml.api.ThemeStyle $r18, $r24;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r20, $r26;
        net.sourceforge.plantuml.ugraphic.UGraphic r29, r34, $r36, r37, $r43;
        net.sourceforge.plantuml.style.Style r31;
        net.sourceforge.plantuml.ugraphic.color.HColor r32, r33;
        net.sourceforge.plantuml.ugraphic.UBackground $r35;
        net.sourceforge.plantuml.graphic.TextBlock $r38, $r41;
        net.sourceforge.plantuml.graphic.StringBounder $r39;
        net.sourceforge.plantuml.awt.geom.Dimension2D r40;
        net.sourceforge.plantuml.ugraphic.UTranslate $r42;

        r3 := @this: net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        r29 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(22.0, 22.0);

        d4 = 0.0;

        $r2 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        r30 = $r2;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        r31 = specialinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.style.Style getStyle()>();

        $r15 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r16 = virtualinvoke r31.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r15);

        $r17 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r19 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r32 = interfaceinvoke $r16.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r18, $r20);

        $r21 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r22 = virtualinvoke r31.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r21);

        $r23 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r25 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r33 = interfaceinvoke $r22.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r24, $r26);

        $r27 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r28 = virtualinvoke r31.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r27);

        d4 = interfaceinvoke $r28.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r30 = virtualinvoke r31.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r6 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r7 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateBackground>;

        $r6[0] = $r7;

        r33 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r4, $r5, $r6);

        $r8 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r9 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r10 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r11 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateBorder>;

        $r10[0] = $r11;

        r32 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r8, $r9, $r10);

        $r12 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r13 = virtualinvoke r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r12.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r14);

        if $z1 == 0 goto label2;

        d4 = 4.0;

     label2:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>(d4);

        r34 = interfaceinvoke r29.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r30);

        $r35 = interfaceinvoke r33.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r36 = interfaceinvoke r34.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r35);

        r37 = interfaceinvoke $r36.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r32);

        interfaceinvoke r37.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r38 = r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r39 = interfaceinvoke r37.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r40 = interfaceinvoke $r38.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r39);

        d0 = virtualinvoke r40.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = virtualinvoke r40.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = 22.0 - d0;

        d2 = $d5 / 2.0;

        $d6 = 22.0 - d1;

        d3 = $d6 / 2.0;

        $r41 = r3.<net.sourceforge.plantuml.svek.image.EntityImagePseudoState: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r42 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r42.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d2, d3);

        $r43 = interfaceinvoke r37.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r42);

        interfaceinvoke $r41.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r43);

        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImagePseudoState r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImagePseudoState;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType CIRCLE>;

        return $r0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.image.EntityImagePseudoState: int SIZE> = 22;

        return;
    }
}
