public class net.sourceforge.plantuml.timingdiagram.graphic.Histogram extends java.lang.Object implements net.sourceforge.plantuml.timingdiagram.graphic.PDrawing
{
    private final java.util.List changes;
    private final java.util.List constraints;
    private java.util.List allStates;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.timingdiagram.TimingRuler ruler;
    private final boolean compact;
    private java.lang.String initialState;
    private final net.sourceforge.plantuml.graphic.TextBlock title;
    private final int suggestedHeight;
    private final net.sourceforge.plantuml.style.Style style;
    private final net.sourceforge.plantuml.style.Style style0;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.timingdiagram.TimingRuler, net.sourceforge.plantuml.ISkinParam, java.util.Collection, boolean, net.sourceforge.plantuml.graphic.TextBlock, int, net.sourceforge.plantuml.style.Style, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.ArrayList $r1, $r2, $r7;
        net.sourceforge.plantuml.style.Style r3, r4;
        int i0;
        net.sourceforge.plantuml.timingdiagram.TimingRuler r5;
        net.sourceforge.plantuml.ISkinParam r6;
        java.util.Collection r8;
        boolean z0;
        net.sourceforge.plantuml.graphic.TextBlock r9;
        java.util.List $r10;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r5 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimingRuler;

        r6 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r8 := @parameter2: java.util.Collection;

        z0 := @parameter3: boolean;

        r9 := @parameter4: net.sourceforge.plantuml.graphic.TextBlock;

        i0 := @parameter5: int;

        r3 := @parameter6: net.sourceforge.plantuml.style.Style;

        r4 := @parameter7: net.sourceforge.plantuml.style.Style;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List constraints> = $r2;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.style.Style style> = r3;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.style.Style style0> = r4;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: int suggestedHeight> = i0;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler> = r5;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>(r8);

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates> = $r7;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: boolean compact> = z0;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock title> = r9;

        $r10 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10);

        return;
    }

    public net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint getTimeProjection(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.timingdiagram.TimeTick)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.timingdiagram.TimeTick r1;
        net.sourceforge.plantuml.timingdiagram.TimingRuler $r2;
        double d0, d1, $d2, $d3, d4, $d5, d6, d7;
        java.util.List r3;
        int $i0, $i1, $i3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r7, $r14;
        java.lang.String $r6, $r8, $r15;
        net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint $r9, $r16;
        java.awt.geom.Point2D$Double $r10, $r11, $r17, $r18;
        byte $b2;
        java.lang.AssertionError $r12, $r13;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.timingdiagram.TimingRuler: double getPosInPixel(net.sourceforge.plantuml.timingdiagram.TimeTick)>(r1);

        r3 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List getStatesAt(net.sourceforge.plantuml.timingdiagram.TimeTick)>(r1);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getHeightForConstraints(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 != 1 goto label2;

        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (java.lang.String) $r14;

        $d5 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r15);

        d6 = $d5 + d1;

        $r16 = new net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint;

        $r17 = new java.awt.geom.Point2D$Double;

        specialinvoke $r17.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d6);

        $r18 = new java.awt.geom.Point2D$Double;

        specialinvoke $r18.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d6);

        specialinvoke $r16.<net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r17, $r18);

        return $r16;

     label2:
        $z0 = <net.sourceforge.plantuml.timingdiagram.graphic.Histogram: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i3 == 2 goto label3;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label3:
        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r5;

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r6);

        d7 = $d2 + d1;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(1);

        $r8 = (java.lang.String) $r7;

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r8);

        d4 = $d3 + d1;

        $z1 = <net.sourceforge.plantuml.timingdiagram.graphic.Histogram: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $b2 = d7 cmpl d4;

        if $b2 != 0 goto label4;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label4:
        $r9 = new net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint;

        $r10 = new java.awt.geom.Point2D$Double;

        specialinvoke $r10.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d7);

        $r11 = new java.awt.geom.Point2D$Double;

        specialinvoke $r11.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d4);

        specialinvoke $r9.<net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r10, $r11);

        return $r9;
    }

    private java.util.List getStatesAt(net.sourceforge.plantuml.timingdiagram.TimeTick)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.List $r1, $r2, $r3, $r4, $r8, $r9, $r14, $r18, $r20, $r24, $r28, $r32, $r36, $r39, $r43, $r44;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, i7;
        java.lang.Object $r5, $r10, $r15, $r21, $r25, $r33, $r40;
        net.sourceforge.plantuml.timingdiagram.ChangeState $r6, $r11, $r16, $r22, $r26, $r34, $r41;
        java.lang.String $r7, $r17, $r23, $r27, $r29, $r31, $r35, $r37, $r42;
        net.sourceforge.plantuml.timingdiagram.TimeTick $r12, r13;
        java.lang.String[] $r19, $r30, $r38;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r13 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r44 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r44;

     label1:
        i6 = 0;

     label2:
        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i6 >= $i1 goto label9;

        $r9 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r10;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick getWhen()>();

        i4 = virtualinvoke $r12.<net.sourceforge.plantuml.timingdiagram.TimeTick: int compareTo(net.sourceforge.plantuml.timingdiagram.TimeTick)>(r13);

        if i4 != 0 goto label5;

        if i6 != 0 goto label3;

        $r37 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        if $r37 != null goto label3;

        $r38 = newarray (java.lang.String)[1];

        $r39 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(i6);

        $r41 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r40;

        $r42 = virtualinvoke $r41.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String getState()>();

        $r38[0] = $r42;

        $r43 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r38);

        return $r43;

     label3:
        if i6 != 0 goto label4;

        $r29 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        if $r29 == null goto label4;

        $r30 = newarray (java.lang.String)[2];

        $r31 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        $r30[0] = $r31;

        $r32 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(i6);

        $r34 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r33;

        $r35 = virtualinvoke $r34.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String getState()>();

        $r30[1] = $r35;

        $r36 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r30);

        return $r36;

     label4:
        $r19 = newarray (java.lang.String)[2];

        $r20 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i5 = i6 - 1;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>($i5);

        $r22 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r21;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String getState()>();

        $r19[0] = $r23;

        $r24 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i6);

        $r26 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r25;

        $r27 = virtualinvoke $r26.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String getState()>();

        $r19[1] = $r27;

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        return $r28;

     label5:
        if i4 <= 0 goto label8;

        if i6 != 0 goto label6;

        i7 = 0;

        goto label7;

     label6:
        i7 = i6 - 1;

     label7:
        $r14 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i7);

        $r16 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r15;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String getState()>();

        $r18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r17);

        return $r18;

     label8:
        i6 = i6 + 1;

        goto label2;

     label9:
        $r4 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r3 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i3);

        $r6 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r5;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String getState()>();

        $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7);

        return $r8;
    }

    public void addChange(net.sourceforge.plantuml.timingdiagram.ChangeState)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.timingdiagram.ChangeState r1;
        java.util.List $r2, $r6, $r7;
        boolean $z1, $z2;
        java.lang.String[] r3;
        int i0, i1;
        java.lang.String r5;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter0: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.timingdiagram.ChangeState: boolean isCompletelyHidden()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        r3 = virtualinvoke r1.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] getStates()>();

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r5 = r3[i1];

        $r6 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        $z2 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z2 != 0 goto label3;

        $r7 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    private java.awt.geom.Point2D[] getPoints(int)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.timingdiagram.ChangeState r3;
        net.sourceforge.plantuml.timingdiagram.TimingRuler $r4;
        net.sourceforge.plantuml.timingdiagram.TimeTick $r5;
        double d0, $d1, $d2, $d3;
        java.lang.String[] r6;
        java.awt.geom.Point2D[] $r7, $r10;
        java.awt.geom.Point2D$Double $r8, $r11, $r13;
        java.lang.String $r9, $r12, $r14;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r2;

        $r4 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick getWhen()>();

        d0 = virtualinvoke $r4.<net.sourceforge.plantuml.timingdiagram.TimingRuler: double getPosInPixel(net.sourceforge.plantuml.timingdiagram.TimeTick)>($r5);

        r6 = virtualinvoke r3.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] getStates()>();

        $i1 = lengthof r6;

        if $i1 != 2 goto label1;

        $r10 = newarray (java.awt.geom.Point2D)[2];

        $r11 = new java.awt.geom.Point2D$Double;

        $r12 = r6[0];

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r12);

        specialinvoke $r11.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, $d2);

        $r10[0] = $r11;

        $r13 = new java.awt.geom.Point2D$Double;

        $r14 = r6[1];

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r14);

        specialinvoke $r13.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, $d3);

        $r10[1] = $r13;

        return $r10;

     label1:
        $r7 = newarray (java.awt.geom.Point2D)[1];

        $r8 = new java.awt.geom.Point2D$Double;

        $r9 = r6[0];

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r9);

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, $d1);

        $r7[0] = $r8;

        return $r7;
    }

    private double getPointx(int)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.timingdiagram.ChangeState r3;
        net.sourceforge.plantuml.timingdiagram.TimingRuler $r4;
        net.sourceforge.plantuml.timingdiagram.TimeTick $r5;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r2;

        $r4 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick getWhen()>();

        $d0 = virtualinvoke $r4.<net.sourceforge.plantuml.timingdiagram.TimingRuler: double getPosInPixel(net.sourceforge.plantuml.timingdiagram.TimeTick)>($r5);

        return $d0;
    }

    private double getPointMinY(int)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.timingdiagram.ChangeState $r3;
        java.lang.String[] r4;
        java.lang.String $r5, $r6, $r7;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r2;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] getStates()>();

        $i1 = lengthof r4;

        if $i1 != 2 goto label1;

        $r6 = r4[0];

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r6);

        $r7 = r4[1];

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r7);

        $d3 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d2);

        return $d3;

     label1:
        $r5 = r4[0];

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r5);

        return $d0;
    }

    private double getPointMaxY(int)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.timingdiagram.ChangeState $r3;
        java.lang.String[] r4;
        java.lang.String $r5, $r6, $r7;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r2;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] getStates()>();

        $i1 = lengthof r4;

        if $i1 != 2 goto label1;

        $r6 = r4[0];

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r6);

        $r7 = r4[1];

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r7);

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d2);

        return $d3;

     label1:
        $r5 = r4[0];

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r5);

        return $d0;
    }

    private net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()
    {
        boolean $z0;
        net.sourceforge.plantuml.graphic.FontConfiguration $r0, $r4;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r1;
        net.sourceforge.plantuml.style.Style $r2;
        net.sourceforge.plantuml.ISkinParam $r3, $r6;
        net.sourceforge.plantuml.FontParam $r5;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 != 0 goto label1;

        $r4 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam TIMING>;

        specialinvoke $r4.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r6, $r5, null);

        return $r4;

     label1:
        $r0 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r3 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r2 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.style.Style style>;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>($r3, $r2);

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getStroke()
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.style.Style $r1;
        net.sourceforge.plantuml.ugraphic.UStroke $r2;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.style.Style style>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        return $r2;
    }

    private net.sourceforge.plantuml.graphic.SymbolContext getContext()
    {
        boolean $z0;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.style.PName $r1, $r9;
        net.sourceforge.plantuml.style.Style $r2, $r10;
        net.sourceforge.plantuml.style.Value $r3, $r11;
        net.sourceforge.plantuml.ISkinParam $r4, $r6, $r12, $r14;
        net.sourceforge.plantuml.api.ThemeStyle $r5, $r13;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7, $r15;
        net.sourceforge.plantuml.ugraphic.color.HColor r8, r16, $r21, $r22;
        net.sourceforge.plantuml.graphic.SymbolContext $r17, $r19, $r20, $r24;
        net.sourceforge.plantuml.ugraphic.UStroke $r18, $r23;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 != 0 goto label1;

        $r20 = new net.sourceforge.plantuml.graphic.SymbolContext;

        $r22 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor COL_D7E0F2>;

        $r21 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor COL_038048>;

        specialinvoke $r20.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>($r22, $r21);

        $r23 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r23.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(2.0);

        $r24 = virtualinvoke $r20.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withStroke(net.sourceforge.plantuml.ugraphic.UStroke)>($r23);

        return $r24;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.style.Style style>;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        $r4 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r6 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r8 = interfaceinvoke $r3.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r5, $r7);

        $r10 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.style.Style style>;

        $r9 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r9);

        $r12 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r14 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r16 = interfaceinvoke $r11.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r13, $r15);

        $r17 = new net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke $r17.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r16, r8);

        $r18 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $r19 = virtualinvoke $r17.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withStroke(net.sourceforge.plantuml.ugraphic.UStroke)>($r18);

        return $r19;
    }

    public net.sourceforge.plantuml.graphic.TextBlock getPart1(double)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram$1 $r0;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r1;
        double d0;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.timingdiagram.graphic.Histogram$1;

        specialinvoke $r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram$1: void <init>(net.sourceforge.plantuml.timingdiagram.graphic.Histogram,double)>(r1, d0);

        return $r0;
    }

    public net.sourceforge.plantuml.graphic.UDrawable getPart2()
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram$2 $r0;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r1;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        $r0 = new net.sourceforge.plantuml.timingdiagram.graphic.Histogram$2;

        specialinvoke $r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram$2: void <init>(net.sourceforge.plantuml.timingdiagram.graphic.Histogram)>(r1);

        return $r0;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimensionPart1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.String $r3, r9;
        net.sourceforge.plantuml.Dimension2DDouble $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double $d0, $d1, $d2, $d3, $d4, d5;
        net.sourceforge.plantuml.graphic.TextBlock $r6, r10;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r7, r11;
        java.lang.Object $r8;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d5 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        r10 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(java.lang.String)>(r9);

        r11 = interfaceinvoke r10.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d4 = virtualinvoke r11.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d5 = staticinvoke <java.lang.Math: double max(double,double)>(d5, $d4);

        goto label1;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        if $r3 == null goto label3;

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getInitialWidth()>();

        d5 = d5 + $d3;

     label3:
        $z1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: boolean compact>;

        if $z1 == 0 goto label4;

        $r6 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d1 = virtualinvoke $r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d1 + 15.0;

        d5 = d5 + $d2;

     label4:
        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getFullHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d5, $d0);

        return $r4;
    }

    private void drawPart1(net.sourceforge.plantuml.ugraphic.UGraphic, double)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r1;
        double $d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, d15, d16;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2, $r4, $r10, $r12, $r16;
        boolean $z0, $z1;
        java.lang.String $r3, r7;
        byte $b0;
        java.util.List $r5;
        java.lang.Object $r6;
        net.sourceforge.plantuml.graphic.TextBlock r8, $r13, $r15;
        net.sourceforge.plantuml.awt.geom.Dimension2D r9, $r14;
        net.sourceforge.plantuml.ugraphic.UGraphic $r11, $r17, r18, r19, r20;
        java.util.Iterator r21;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r18 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        r0 = interfaceinvoke r18.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getHeightForConstraints(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d0);

        r19 = interfaceinvoke r18.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $z0 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: boolean compact>;

        if $z0 == 0 goto label1;

        $r13 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d14 = virtualinvoke $r14.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d12 = virtualinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getFullHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d13 = $d12 - d14;

        d15 = $d13 / 2.0;

        $r15 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r16 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d15);

        $r17 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        interfaceinvoke $r15.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r17);

     label1:
        d16 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getStatesWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r3 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        if $r3 == null goto label2;

        $d11 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getInitialWidth()>();

        d16 = d16 + $d11;

     label2:
        $d2 = d16 + 5.0;

        $b0 = d1 cmpl $d2;

        if $b0 <= 0 goto label3;

        $d9 = d1 - d16;

        $d10 = $d9 - 5.0;

        $r12 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d10);

        r20 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        goto label4;

     label3:
        $d3 = d1 - d16;

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d3);

        r20 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

     label4:
        $r5 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        r21 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        r8 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(java.lang.String)>(r7);

        r9 = interfaceinvoke r8.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d4 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>(r7);

        $d5 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = $d5 / 2.0;

        $d7 = $d4 - $d6;

        $d8 = $d7 + 1.0;

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d8);

        $r11 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        interfaceinvoke r8.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r11);

        goto label5;

     label6:
        return;
    }

    private double getStatesWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4;
        net.sourceforge.plantuml.graphic.TextBlock r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        r5 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(java.lang.String)>(r4);

        r7 = interfaceinvoke r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d0 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    private void drawPart2(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.List $r1;
        int $i0;
        net.sourceforge.plantuml.graphic.SymbolContext $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r5;
        net.sourceforge.plantuml.ugraphic.UGraphic $r6, r7, r8, r9;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.SymbolContext getContext()>();

        r8 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UGraphic)>(r7);

        $r3 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getHeightForConstraints(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d0);

        r9 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawHlines(net.sourceforge.plantuml.ugraphic.UGraphic)>(r9);

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawVlines(net.sourceforge.plantuml.ugraphic.UGraphic)>(r9);

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawLabels(net.sourceforge.plantuml.ugraphic.UGraphic)>(r9);

        $d1 = staticinvoke <net.sourceforge.plantuml.timingdiagram.TimeConstraint: double getTopMargin()>();

        $d2 = neg $d1;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        $r6 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawConstraints(net.sourceforge.plantuml.ugraphic.UGraphic)>($r6);

        return;
    }

    private void drawHlines(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.lang.String $r1;
        java.util.List $r2, $r3, $r6, $r9, $r12, $r15, $r18, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, i11, i12, i13, $i14, i15, i16, i17;
        java.lang.Object $r4, $r10, $r19;
        net.sourceforge.plantuml.timingdiagram.ChangeState $r5, $r11, $r22;
        boolean $z0, $z1;
        net.sourceforge.plantuml.timingdiagram.TimingRuler $r7, $r13;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, d9;
        net.sourceforge.plantuml.ugraphic.UGraphic r8, $r25;
        java.awt.geom.Point2D[] r14, r29, r32;
        java.awt.geom.Point2D r17, $r26, $r27, r30, r33;
        net.sourceforge.plantuml.style.Style $r20;
        net.sourceforge.plantuml.ISkinParam $r21;
        net.sourceforge.plantuml.ugraphic.color.HColor $r23;
        net.sourceforge.plantuml.ugraphic.UBackground $r24;
        java.awt.geom.Point2D$Double $r28;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        if $r1 == null goto label02;

        r29 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.awt.geom.Point2D[] getPoints(int)>(0);

        i11 = lengthof r29;

        i12 = 0;

     label01:
        if i12 >= i11 goto label02;

        r30 = r29[i12];

        $r28 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.awt.geom.Point2D$Double getInitialPoint()>();

        $d4 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getInitialWidth()>();

        $d5 = virtualinvoke r30.<java.awt.geom.Point2D: double getX()>();

        $d6 = $d4 + $d5;

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawHLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Point2D,double)>(r8, $r28, $d6);

        i12 = i12 + 1;

        goto label01;

     label02:
        i13 = 0;

     label03:
        $r31 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i14 = interfaceinvoke $r31.<java.util.List: int size()>();

        if i13 >= $i14 goto label10;

        $r9 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i13);

        $r11 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r10;

        $z1 = virtualinvoke $r11.<net.sourceforge.plantuml.timingdiagram.ChangeState: boolean isCompletelyHidden()>();

        if $z1 == 0 goto label04;

        goto label09;

     label04:
        $r12 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i4 = interfaceinvoke $r12.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        if i13 >= $i5 goto label05;

        $i10 = i13 + 1;

        $d7 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getPointx(int)>($i10);

        goto label06;

     label05:
        $r13 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        $d7 = virtualinvoke $r13.<net.sourceforge.plantuml.timingdiagram.TimingRuler: double getWidth()>();

     label06:
        $d3 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getPointx(int)>(i13);

        d9 = $d7 - $d3;

        r14 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.awt.geom.Point2D[] getPoints(int)>(i13);

        $i6 = lengthof r14;

        if $i6 != 2 goto label07;

        $r18 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i13);

        $r22 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r19;

        $r21 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r20 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.style.Style style>;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>($r21, $r20);

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r25 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

        $r27 = r14[0];

        $r26 = r14[1];

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawHBlock(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Point2D,java.awt.geom.Point2D,double)>($r25, $r27, $r26, d9);

     label07:
        $r15 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i7 = interfaceinvoke $r15.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        if i13 >= $i8 goto label09;

        i9 = lengthof r14;

        i15 = 0;

     label08:
        if i15 >= i9 goto label09;

        r17 = r14[i15];

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawHLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Point2D,double)>(r8, r17, d9);

        i15 = i15 + 1;

        goto label08;

     label09:
        i13 = i13 + 1;

        goto label03;

     label10:
        $r3 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r4;

        $z0 = virtualinvoke $r5.<net.sourceforge.plantuml.timingdiagram.ChangeState: boolean isCompletelyHidden()>();

        if $z0 != 0 goto label12;

        $r6 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        r32 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.awt.geom.Point2D[] getPoints(int)>($i3);

        i16 = lengthof r32;

        i17 = 0;

     label11:
        if i17 >= i16 goto label12;

        r33 = r32[i17];

        $r7 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        $d0 = virtualinvoke $r7.<net.sourceforge.plantuml.timingdiagram.TimingRuler: double getWidth()>();

        $d1 = virtualinvoke r33.<java.awt.geom.Point2D: double getX()>();

        d2 = $d0 - $d1;

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawHLine(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.Point2D,double)>(r8, r33, d2);

        i17 = i17 + 1;

        goto label11;

     label12:
        return;
    }

    private void drawHBlock(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.Point2D, java.awt.geom.Point2D, double)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, d7, $d8, $d9, d10;
        java.awt.geom.Point2D$Double $r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r6;
        net.sourceforge.plantuml.ugraphic.URectangle $r5;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.UGraphic $r7, r10, r11;
        net.sourceforge.plantuml.ugraphic.ULine $r8;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r9;

        r9 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r10 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: java.awt.geom.Point2D;

        r1 := @parameter2: java.awt.geom.Point2D;

        d7 := @parameter3: double;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d2 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        $d3 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d5 = staticinvoke <java.lang.Math: double max(double,double)>($d3, $d4);

        $r2 = new java.awt.geom.Point2D$Double;

        $d6 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d6, d2);

        $r4 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>($r2);

        r11 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        $r5 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d8 = d5 - d2;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d7, $d8);

        interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        d10 = 0.0;

     label1:
        $b0 = d10 cmpg d7;

        if $b0 >= 0 goto label2;

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d10);

        $r7 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $d9 = d5 - d2;

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>($d9);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        d10 = d10 + 5.0;

        goto label1;

     label2:
        return;
    }

    private void drawHLine(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.Point2D, double)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r1;
        java.awt.geom.Point2D r2;
        double d0;
        net.sourceforge.plantuml.ugraphic.ULine $r4;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r5;

        r5 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r2 := @parameter1: java.awt.geom.Point2D;

        d0 := @parameter2: double;

        $r1 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r2);

        $r3 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(d0);

        interfaceinvoke $r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        return;
    }

    private void drawVlines(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, i3, $i4;
        java.util.List $r2, $r5, $r18;
        java.lang.Object $r3, $r6;
        net.sourceforge.plantuml.timingdiagram.ChangeState $r4, $r7;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, d10;
        net.sourceforge.plantuml.ugraphic.UGraphic r8, $r10, $r14;
        net.sourceforge.plantuml.ugraphic.UTranslate $r9, $r13;
        net.sourceforge.plantuml.ugraphic.ULine $r11, $r15;
        java.awt.geom.Point2D[] $r12;
        java.awt.geom.Point2D$Double r16;
        java.awt.geom.Point2D r17;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        if $r1 == null goto label1;

        r16 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.awt.geom.Point2D$Double getInitialPoint()>();

        $r12 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.awt.geom.Point2D[] getPoints(int)>(0);

        r17 = $r12[0];

        $r13 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r17);

        $r14 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r13);

        $d7 = virtualinvoke r16.<java.awt.geom.Point2D: double getY()>();

        $d8 = virtualinvoke r17.<java.awt.geom.Point2D: double getY()>();

        $d9 = $d7 - $d8;

        $r15 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>($d9);

        interfaceinvoke $r14.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r15);

     label1:
        i3 = 1;

     label2:
        $r18 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i4 = interfaceinvoke $r18.<java.util.List: int size()>();

        if i3 >= $i4 goto label5;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i0 = i3 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r3;

        $z0 = virtualinvoke $r4.<net.sourceforge.plantuml.timingdiagram.ChangeState: boolean isCompletelyHidden()>();

        if $z0 != 0 goto label4;

        $r5 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        $r7 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r6;

        $z1 = virtualinvoke $r7.<net.sourceforge.plantuml.timingdiagram.ChangeState: boolean isCompletelyHidden()>();

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getPointMinY(int)>(i3);

        $i1 = i3 - 1;

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getPointMinY(int)>($i1);

        d10 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getPointMaxY(int)>(i3);

        $i2 = i3 - 1;

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getPointMaxY(int)>($i2);

        d4 = staticinvoke <java.lang.Math: double max(double,double)>($d2, $d3);

        $r9 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d5 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getPointx(int)>(i3);

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d5, d10);

        $r10 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $d6 = d4 - d10;

        $r11 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>($d6);

        interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r11);

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        return;
    }

    private void drawLabels(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.List $r1, $r4;
        int $i0, i1;
        java.awt.geom.Point2D[] $r2;
        java.awt.geom.Point2D r3;
        java.lang.Object $r5;
        net.sourceforge.plantuml.timingdiagram.ChangeState $r6;
        java.lang.String r7;
        net.sourceforge.plantuml.graphic.TextBlock r8;
        net.sourceforge.plantuml.ugraphic.UGraphic r9, $r15;
        net.sourceforge.plantuml.graphic.StringBounder $r10;
        net.sourceforge.plantuml.awt.geom.Dimension2D r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r12, $r13, $r14;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        i1 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.awt.geom.Point2D[] getPoints(int)>(i1);

        r3 = $r2[0];

        $r4 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r5;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String getComment()>();

        if r7 != null goto label2;

        goto label3;

     label2:
        r8 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(java.lang.String)>(r7);

        $r10 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r11 = interfaceinvoke r8.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r10);

        $r12 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r3);

        $r13 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r11.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = neg $d0;

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(2.0, $d1);

        $r14 = virtualinvoke $r12.<net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate compose(net.sourceforge.plantuml.ugraphic.UTranslate)>($r13);

        $r15 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r14);

        interfaceinvoke r8.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r15);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private void drawConstraints(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.List $r1, $r6;
        java.util.Iterator r2, r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r12;
        net.sourceforge.plantuml.timingdiagram.TimeConstraint r4;
        net.sourceforge.plantuml.timingdiagram.TimeTick $r5, $r14, $r15;
        net.sourceforge.plantuml.ugraphic.UGraphic r8, $r10;
        net.sourceforge.plantuml.ugraphic.UTranslate $r9;
        net.sourceforge.plantuml.timingdiagram.TimingRuler $r11;
        net.sourceforge.plantuml.timingdiagram.ChangeState r13;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List constraints>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.timingdiagram.TimeConstraint) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.timingdiagram.TimeConstraint: net.sourceforge.plantuml.timingdiagram.TimeTick getTick1()>();

        d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(net.sourceforge.plantuml.timingdiagram.TimeTick)>($r5);

        $r6 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List changes>;

        r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r13 = (net.sourceforge.plantuml.timingdiagram.ChangeState) $r12;

        $r14 = virtualinvoke r13.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick getWhen()>();

        $z2 = virtualinvoke r4.<net.sourceforge.plantuml.timingdiagram.TimeConstraint: boolean containsStrict(net.sourceforge.plantuml.timingdiagram.TimeTick)>($r14);

        if $z2 == 0 goto label3;

        $r15 = virtualinvoke r13.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick getWhen()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(net.sourceforge.plantuml.timingdiagram.TimeTick)>($r15);

        d1 = staticinvoke <java.lang.Math: double min(double,double)>(d1, $d0);

     label3:
        goto label2;

     label4:
        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d1);

        $r10 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r11 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        virtualinvoke r4.<net.sourceforge.plantuml.timingdiagram.TimeConstraint: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.timingdiagram.TimingRuler)>($r10, $r11);

        goto label1;

     label5:
        return;
    }

    private java.awt.geom.Point2D$Double getInitialPoint()
    {
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r1;
        double $d0, $d1, $d2;
        java.lang.String $r2;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        $r0 = new java.awt.geom.Point2D$Double;

        $d0 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getInitialWidth()>();

        $d1 = neg $d0;

        $r2 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState>;

        $d2 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r2);

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d2);

        return $r0;
    }

    private double getHeightForConstraints(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r1;
        java.util.List $r2;
        double $d0;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r1.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List constraints>;

        $d0 = staticinvoke <net.sourceforge.plantuml.timingdiagram.TimeConstraint: double getHeightForConstraints(net.sourceforge.plantuml.graphic.StringBounder,java.util.List)>(r0, $r2);

        return $d0;
    }

    public double getFullHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.util.List $r2;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getHeightForConstraints(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double stepHeight()>();

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $d2 = (double) $i1;

        $d3 = $d1 * $d2;

        $d4 = $d0 + $d3;

        $d5 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double getBottomMargin()>();

        $d6 = $d4 + $d5;

        return $d6;
    }

    private double getBottomMargin()
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        return 12.0;
    }

    private double yOfState(java.lang.String)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.util.List $r1, $r3;
        int $i0, $i1, $i2, i3;
        java.lang.String r2;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        $i2 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r2);

        i3 = $i1 - $i2;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double stepHeight()>();

        $d1 = (double) i3;

        $d2 = $d0 * $d1;

        return $d2;
    }

    private double yOfState(net.sourceforge.plantuml.timingdiagram.TimeTick)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.timingdiagram.TimeTick r1;
        java.util.List $r2;
        java.lang.String $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List getStatesAt(net.sourceforge.plantuml.timingdiagram.TimeTick)>(r1);

        $r3 = staticinvoke <net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String last(java.util.List)>($r2);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: double yOfState(java.lang.String)>($r3);

        return $d0;
    }

    private static java.lang.String last(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    private double stepHeight()
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.List $r1, $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        $i0 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: int suggestedHeight>;

        if $i0 == 0 goto label1;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 > 1 goto label2;

     label1:
        return 20.0;

     label2:
        $i2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: int suggestedHeight>;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $i5 = $i2 / $i4;

        $d0 = (double) $i5;

        return $d0;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getTextBlock(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.cucadiagram.Display r1;
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r2;
        net.sourceforge.plantuml.graphic.FontConfiguration $r3;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r5;
        net.sourceforge.plantuml.graphic.TextBlock $r6;

        r2 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r0);

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()>();

        $r5 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r4 = r2.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r3, $r5, $r4);

        return $r6;
    }

    public void setInitialState(java.lang.String, net.sourceforge.plantuml.graphic.color.Colors)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        java.lang.String r1;
        java.util.List $r2, $r3;
        boolean $z0;
        net.sourceforge.plantuml.graphic.color.Colors r4;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: net.sourceforge.plantuml.graphic.color.Colors;

        r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.lang.String initialState> = r1;

        if r1 == null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List allStates>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private double getInitialWidth()
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        return 40.0;
    }

    public void addConstraint(net.sourceforge.plantuml.timingdiagram.TimeConstraint)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.timingdiagram.TimeConstraint r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeConstraint;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: java.util.List constraints>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    static void access$000(net.sourceforge.plantuml.timingdiagram.graphic.Histogram, net.sourceforge.plantuml.ugraphic.UGraphic, double)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        double d0;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawPart1(net.sourceforge.plantuml.ugraphic.UGraphic,double)>(r1, d0);

        return;
    }

    static net.sourceforge.plantuml.awt.geom.Dimension2D access$100(net.sourceforge.plantuml.timingdiagram.graphic.Histogram, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimensionPart1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }

    static void access$200(net.sourceforge.plantuml.timingdiagram.graphic.Histogram, net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.graphic.Histogram r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.graphic.Histogram;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.graphic.Histogram: void drawPart2(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/timingdiagram/graphic/Histogram;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.timingdiagram.graphic.Histogram: boolean $assertionsDisabled> = $z1;

        return;
    }
}
