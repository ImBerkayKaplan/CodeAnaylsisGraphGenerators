public final enum class net.sourceforge.plantuml.version.License extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.version.License GPL;
    public static final enum net.sourceforge.plantuml.version.License GPLV2;
    public static final enum net.sourceforge.plantuml.version.License LGPL;
    public static final enum net.sourceforge.plantuml.version.License APACHE;
    public static final enum net.sourceforge.plantuml.version.License EPL;
    public static final enum net.sourceforge.plantuml.version.License MIT;
    public static final enum net.sourceforge.plantuml.version.License BSD;
    private static final net.sourceforge.plantuml.version.License[] $VALUES;

    public static net.sourceforge.plantuml.version.License[] values()
    {
        net.sourceforge.plantuml.version.License[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.version.License[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.version.License valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.version.License $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/version/License;", r0);

        $r2 = (net.sourceforge.plantuml.version.License) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.version.License r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.version.License;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.version.License getCurrent()
    {
        net.sourceforge.plantuml.version.License $r0;

        $r0 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPL>;

        return $r0;
    }

    private void addMit(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.License r1;
        net.sourceforge.plantuml.version.LicenseInfo r2;

        r1 := @this: net.sourceforge.plantuml.version.License;

        r2 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r0 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("under the terms of the MIT License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("See http://opensource.org/licenses/MIT");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Permission is hereby granted, free of charge, to any person obtaining");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("a copy of this software and associated documentation files (the \"Software\"),");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("to deal in the Software without restriction, including without limitation");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the rights to use, copy, modify, merge, publish, distribute, sublicense,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("and/or sell copies of the Software, and to permit persons to whom the");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Software is furnished to do so, subject to the following conditions:");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The above copyright notice and this permission notice shall be included");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("in all copies or substantial portions of the Software.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        specialinvoke r1.<net.sourceforge.plantuml.version.License: void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r2, r0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the MIT License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The generated images can then be used without any reference to the MIT License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("It is not even necessary to stipulate that they have been generated with PlantUML,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("although this will be appreciated by the PlantUML team.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("There is an exception : if the textual description in PlantUML language is also covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by a license (like the MIT), then the generated images are logically covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by the very same license.");

        return;
    }

    private void addEpl(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.License r1;
        net.sourceforge.plantuml.version.LicenseInfo r2;

        r1 := @this: net.sourceforge.plantuml.version.License;

        r2 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r0 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("under the terms of the Eclipse Public License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("LICENSE (\"AGREEMENT\"). [Eclipse Public License - v 1.0]");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("RECIPIENT\'S ACCEPTANCE OF THIS AGREEMENT.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("You may obtain a copy of the License at");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("http://www.eclipse.org/legal/epl-v10.html");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Unless required by applicable law or agreed to in writing, software");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("distributed under the License is distributed on an \"AS IS\" BASIS,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("See the License for the specific language governing permissions and");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("limitations under the License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        specialinvoke r1.<net.sourceforge.plantuml.version.License: void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r2, r0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the Eclipse Public License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The generated images can then be used without any reference to the Eclipse Public License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("It is not even necessary to stipulate that they have been generated with PlantUML,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("although this will be appreciated by the PlantUML team.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("There is an exception : if the textual description in PlantUML language is also covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by a license (like the EPL), then the generated images are logically covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by the very same license.");

        return;
    }

    private void addBsd(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.License r1;
        net.sourceforge.plantuml.version.LicenseInfo r2;

        r1 := @this: net.sourceforge.plantuml.version.License;

        r2 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r0 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("under the terms of the Revised BSD License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("All rights reserved.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Redistribution and use in source and binary forms, with or without");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("modification, are permitted provided that the following conditions are met:");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("* Redistributions of source code must retain the above copyright");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("  notice, this list of conditions and the following disclaimer.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("* Redistributions in binary form must reproduce the above copyright");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("  notice, this list of conditions and the following disclaimer in the");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("  documentation and/or other materials provided with the distribution.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("* Neither the name of the University of California, Berkeley nor the");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("  names of its contributors may be used to endorse or promote products");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("  derived from this software without specific prior written permission.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS\'\' AND ANY");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        specialinvoke r1.<net.sourceforge.plantuml.version.License: void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r2, r0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the Eclipse Public License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The generated images can then be used without any reference to the Eclipse Public License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("It is not even necessary to stipulate that they have been generated with PlantUML,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("although this will be appreciated by the PlantUML team.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("There is an exception : if the textual description in PlantUML language is also covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by a license (like the BSD), then the generated images are logically covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by the very same license.");

        return;
    }

    private void addApache(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.License r1;
        net.sourceforge.plantuml.version.LicenseInfo r2;

        r1 := @this: net.sourceforge.plantuml.version.License;

        r2 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r0 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("under the terms of the Apache Software License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Licensed under the Apache License, Version 2.0 (the \"License\");");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("you may not use this file except in compliance with the License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("You may obtain a copy of the License at");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("http://www.apache.org/licenses/LICENSE-2.0");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Unless required by applicable law or agreed to in writing, software");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("distributed under the License is distributed on an \"AS IS\" BASIS,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("See the License for the specific language governing permissions and");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("limitations under the License.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        specialinvoke r1.<net.sourceforge.plantuml.version.License: void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r2, r0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the Apache license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The generated images can then be used without any reference to the Apache license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("It is not even necessary to stipulate that they have been generated with PlantUML,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("although this will be appreciated by the PlantUML team.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("There is an exception : if the textual description in PlantUML language is also covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by a license (like the Apache), then the generated images are logically covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by the very same license.");

        return;
    }

    private void addGpl(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.License r1;
        net.sourceforge.plantuml.version.LicenseInfo r2;

        r1 := @this: net.sourceforge.plantuml.version.License;

        r2 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r0 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("under the terms of the GNU General Public License as published by");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the Free Software Foundation, either version 3 of the License, or");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("(at your option) any later version.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML distributed in the hope that it will be useful, but");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("License for more details.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("You should have received a copy of the GNU General Public License");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("along with this library.  If not, see <https://www.gnu.org/licenses/>.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        specialinvoke r1.<net.sourceforge.plantuml.version.License: void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r2, r0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the GPL license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The generated images can then be used without any reference to the GPL license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("It is not even necessary to stipulate that they have been generated with PlantUML,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("although this will be appreciated by the PlantUML team.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("There is an exception : if the textual description in PlantUML language is also covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by a license (like the GPL), then the generated images are logically covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by the very same license.");

        return;
    }

    private void addGplV2(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.License r1;
        net.sourceforge.plantuml.version.LicenseInfo r2;

        r1 := @this: net.sourceforge.plantuml.version.License;

        r2 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r0 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("under the terms of the GNU General Public License as published by");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the Free Software Foundation, either version 2 of the License, or");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("(at your option) any later version.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML distributed in the hope that it will be useful, but");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("License for more details.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("You should have received a copy of the GNU General Public License");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("along with this library.  If not, see <https://www.gnu.org/licenses/>.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        specialinvoke r1.<net.sourceforge.plantuml.version.License: void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r2, r0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the GPL license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The generated images can then be used without any reference to the GPL license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("It is not even necessary to stipulate that they have been generated with PlantUML,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("although this will be appreciated by the PlantUML team.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("There is an exception : if the textual description in PlantUML language is also covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by a license (like the GPL), then the generated images are logically covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by the very same license.");

        return;
    }

    private void addLgpl(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.License r1;
        net.sourceforge.plantuml.version.LicenseInfo r2;

        r1 := @this: net.sourceforge.plantuml.version.License;

        r2 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r0 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("under the terms of the GNU Lesser General Public License as published by");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the Free Software Foundation, either version 3 of the License, or");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("(at your option) any later version.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("PlantUML distributed in the hope that it will be useful, but");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("License for more details.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("You should have received a copy of the GNU Lesser General Public License");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("along with this library.  If not, see <https://www.gnu.org/licenses/>.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        specialinvoke r1.<net.sourceforge.plantuml.version.License: void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r2, r0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("the LGPL license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("The generated images can then be used without any reference to the LGPL license.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("It is not even necessary to stipulate that they have been generated with PlantUML,");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("although this will be appreciated by the PlantUML team.");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("There is an exception : if the textual description in PlantUML language is also covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by a license (like the LGPL), then the generated images are logically covered");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("by the very same license.");

        return;
    }

    private void addSupplementary(net.sourceforge.plantuml.version.LicenseInfo, java.util.List)
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        boolean $z0;
        java.util.List r1;
        net.sourceforge.plantuml.version.License r2;

        r2 := @this: net.sourceforge.plantuml.version.License;

        r0 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r1 := @parameter1: java.util.List;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: boolean isValid()>();

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("PlantUML can occasionally display sponsored or advertising messages. Those");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("messages are usually generated on welcome or error images and never on");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("functional diagrams.");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("See https://plantuml.com/professional if you want to remove them");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(" ");

     label1:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("Images (whatever their format : PNG, SVG, EPS...) generated by running PlantUML");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("are owned by the author of their corresponding sources code (that is, their");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("textual description in PlantUML language). Those images are not covered by");

        return;
    }

    private void header1(java.util.List, net.sourceforge.plantuml.version.LicenseInfo)
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        boolean $z0;
        java.util.List r1;
        net.sourceforge.plantuml.version.License r2;

        r2 := @this: net.sourceforge.plantuml.version.License;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: net.sourceforge.plantuml.version.LicenseInfo;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: boolean isNone()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("+=======================================================================");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("| ");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("|      PlantUML : a free UML diagram generator");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("| ");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("+=======================================================================");

        goto label2;

     label1:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("+=======================================================================");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("| ");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("|      PlantUML Professional Edition");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("| ");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("+=======================================================================");

        staticinvoke <net.sourceforge.plantuml.version.License: void addLicenseInfo(java.util.List,net.sourceforge.plantuml.version.LicenseInfo)>(r1, r0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("+=======================================================================");

     label2:
        return;
    }

    private void header2(java.util.List, net.sourceforge.plantuml.version.LicenseInfo, boolean)
    {
        java.util.List r0;
        net.sourceforge.plantuml.version.LicenseInfo r1;
        boolean $z5, z11;
        net.sourceforge.plantuml.version.License r2;

        r2 := @this: net.sourceforge.plantuml.version.License;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: net.sourceforge.plantuml.version.LicenseInfo;

        z11 := @parameter2: boolean;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("(C) Copyright 2009-2020, Arnaud Roques");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("Project Info:  https://plantuml.com");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        $z5 = virtualinvoke r1.<net.sourceforge.plantuml.version.LicenseInfo: boolean isValid()>();

        if $z5 != 0 goto label2;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("If you like this project or if you find it useful, you can support us at:");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("https://plantuml.com/patreon (only 1$ per month!)");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("https://plantuml.com/liberapay (only 1\u20ac per month!)");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("https://plantuml.com/paypal");

        if z11 == 0 goto label1;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("\t<qrcode:http://plantuml.com/patreon>\t\t<qrcode:http://plantuml.com/lp>\t\t<qrcode:http://plantuml.com/paypal>");

        goto label2;

     label1:
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>("");

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(" ");

     label2:
        return;
    }

    public static void addLicenseInfo(java.util.List, net.sourceforge.plantuml.version.LicenseInfo)
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        net.sourceforge.plantuml.version.LicenseType $r1, $r2, $r3, $r4, $r23, $r24;
        boolean $z0;
        java.util.List r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r11, $r12, $r14, $r16, $r17, $r21;
        java.lang.String $r8, $r10, $r13, $r15, $r20, $r22;
        java.text.DateFormat $r18;
        java.util.Date $r19;

        r5 := @parameter0: java.util.List;

        r0 := @parameter1: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseType getLicenseType()>();

        $r2 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NAMED>;

        if $r1 != $r2 goto label1;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>("| ");

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|      LICENSED TO : ");

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String getOwner()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|      EXPIRATION DATE : ");

        $r18 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance()>();

        $r19 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: java.util.Date getExpirationDate()>();

        $r20 = virtualinvoke $r18.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r19);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r22);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>("|  ");

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseType getLicenseType()>();

        $r4 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType DISTRIBUTOR>;

        if $r3 != $r4 goto label2;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>("|  ");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|      DISTRIBUTED BY : ");

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String getOwner()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r10);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>("|  ");

     label2:
        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseType getLicenseType()>();

        $r24 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType UNKNOWN>;

        if $r23 == $r24 goto label3;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: boolean hasExpired()>();

        if $z0 == 0 goto label3;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>("|      <i>Warning: Your license has expired.");

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>("|  ");

     label3:
        return;
    }

    public java.util.List getJavaHeader(java.util.List)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.version.License r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.util.List r9, $r10;

        r2 := @this: net.sourceforge.plantuml.version.License;

        r9 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("/* ========================================================================");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * PlantUML : a free UML diagram generator");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ========================================================================");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * (C) Copyright 2009-2020, Arnaud Roques");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Project Info:  https://plantuml.com");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * If you like this project or if you find it useful, you can support us at:");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * https://plantuml.com/patreon (only 1$ per month!)");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * https://plantuml.com/paypal");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * This file is part of PlantUML.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        $r3 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License LGPL>;

        if r2 != $r3 goto label1;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * under the terms of the GNU Lesser General Public License as published by");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * the Free Software Foundation, either version 3 of the License, or");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * (at your option) any later version.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * PlantUML distributed in the hope that it will be useful, but");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * License for more details.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * You should have received a copy of the GNU General Public License");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * along with this library.  If not, see <https://www.gnu.org/licenses/>.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        goto label6;

     label1:
        $r4 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPLV2>;

        if r2 != $r4 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * PlantUML is free software; you can redistribute it and/or modify it");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * under the terms of the GNU General Public License as published by");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * the Free Software Foundation, either version 2 of the License, or");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * (at your option) any later version.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * PlantUML distributed in the hope that it will be useful, but");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * License for more details.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * You should have received a copy of the GNU General Public License");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * along with this library.  If not, see <https://www.gnu.org/licenses/>.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        goto label6;

     label2:
        $r5 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License APACHE>;

        if r2 != $r5 goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Licensed under the Apache License, Version 2.0 (the \"License\");");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * you may not use this file except in compliance with the License.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * You may obtain a copy of the License at");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * http://www.apache.org/licenses/LICENSE-2.0");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Unless required by applicable law or agreed to in writing, software");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * distributed under the License is distributed on an \"AS IS\" BASIS,");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * See the License for the specific language governing permissions and");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * limitations under the License.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        goto label6;

     label3:
        $r6 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License EPL>;

        if r2 != $r6 goto label4;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * LICENSE (\"AGREEMENT\"). [Eclipse Public License - v 1.0]");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * RECIPIENT\'S ACCEPTANCE OF THIS AGREEMENT.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * You may obtain a copy of the License at");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * http://www.eclipse.org/legal/epl-v10.html");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Unless required by applicable law or agreed to in writing, software");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * distributed under the License is distributed on an \"AS IS\" BASIS,");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * See the License for the specific language governing permissions and");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * limitations under the License.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        goto label6;

     label4:
        $r7 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License BSD>;

        if r2 != $r7 goto label5;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Licensed under the Revised BSD License (the Revised Berkeley Software Distribution)");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Redistribution and use in source and binary forms, with or without");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * modification, are permitted provided that the following conditions are met:");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * * Redistributions of source code must retain the above copyright");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *   notice, this list of conditions and the following disclaimer.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * * Redistributions in binary form must reproduce the above copyright");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *   notice, this list of conditions and the following disclaimer in the");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *   documentation and/or other materials provided with the distribution.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * * Neither the name of the University of California, Berkeley nor the");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *   names of its contributors may be used to endorse or promote products");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *   derived from this software without specific prior written permission.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS\'\' AND ANY");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        goto label6;

     label5:
        $r8 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License MIT>;

        if r2 != $r8 goto label6;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Licensed under The MIT License (Massachusetts Institute of Technology License)");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * See http://opensource.org/licenses/MIT");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Permission is hereby granted, free of charge, to any person obtaining");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * a copy of this software and associated documentation files (the \"Software\"),");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * to deal in the Software without restriction, including without limitation");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * the rights to use, copy, modify, merge, publish, distribute, sublicense,");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * and/or sell copies of the Software, and to permit persons to whom the");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Software is furnished to do so, subject to the following conditions:");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * The above copyright notice and this permission notice shall be included");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * in all copies or substantial portions of the Software.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * ");

     label6:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" *");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" * Original Author:  Arnaud Roques");

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(r9);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(" */");

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r10;
    }

    public java.util.List getTextFull()
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.version.License r3;

        r3 := @this: net.sourceforge.plantuml.version.License;

        r0 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveQuick()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r3.<net.sourceforge.plantuml.version.License: void header1(java.util.List,net.sourceforge.plantuml.version.LicenseInfo)>($r1, r0);

        specialinvoke r3.<net.sourceforge.plantuml.version.License: void header2(java.util.List,net.sourceforge.plantuml.version.LicenseInfo,boolean)>($r1, r0, 0);

        specialinvoke r3.<net.sourceforge.plantuml.version.License: void end3(java.util.List,net.sourceforge.plantuml.version.LicenseInfo)>($r1, r0);

        return $r1;
    }

    public java.util.List getText1(net.sourceforge.plantuml.version.LicenseInfo)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.version.License r2;
        net.sourceforge.plantuml.version.LicenseInfo r3;

        r2 := @this: net.sourceforge.plantuml.version.License;

        r3 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        specialinvoke r2.<net.sourceforge.plantuml.version.License: void header1(java.util.List,net.sourceforge.plantuml.version.LicenseInfo)>($r0, r3);

        return $r0;
    }

    public java.util.List getText2(net.sourceforge.plantuml.version.LicenseInfo)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.version.License r2;
        net.sourceforge.plantuml.version.LicenseInfo r3;

        r2 := @this: net.sourceforge.plantuml.version.License;

        r3 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        specialinvoke r2.<net.sourceforge.plantuml.version.License: void header2(java.util.List,net.sourceforge.plantuml.version.LicenseInfo,boolean)>($r0, r3, 1);

        specialinvoke r2.<net.sourceforge.plantuml.version.License: void end3(java.util.List,net.sourceforge.plantuml.version.LicenseInfo)>($r0, r3);

        return $r0;
    }

    private void end3(java.util.List, net.sourceforge.plantuml.version.LicenseInfo)
    {
        net.sourceforge.plantuml.version.License r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.IllegalStateException $r8;
        net.sourceforge.plantuml.version.LicenseInfo r9;
        java.util.List r10;
        net.sourceforge.plantuml.windowsdot.WindowsDotArchive $r11;
        boolean $z1, $z22;
        net.sourceforge.plantuml.OptionFlags $r12;

        r0 := @this: net.sourceforge.plantuml.version.License;

        r10 := @parameter0: java.util.List;

        r9 := @parameter1: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPL>;

        if r0 != $r1 goto label01;

        specialinvoke r0.<net.sourceforge.plantuml.version.License: void addGpl(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r9, r10);

        goto label08;

     label01:
        $r2 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPLV2>;

        if r0 != $r2 goto label02;

        specialinvoke r0.<net.sourceforge.plantuml.version.License: void addGplV2(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r9, r10);

        goto label08;

     label02:
        $r3 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License MIT>;

        if r0 != $r3 goto label03;

        specialinvoke r0.<net.sourceforge.plantuml.version.License: void addMit(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r9, r10);

        goto label08;

     label03:
        $r4 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License EPL>;

        if r0 != $r4 goto label04;

        specialinvoke r0.<net.sourceforge.plantuml.version.License: void addEpl(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r9, r10);

        goto label08;

     label04:
        $r5 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License BSD>;

        if r0 != $r5 goto label05;

        specialinvoke r0.<net.sourceforge.plantuml.version.License: void addBsd(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r9, r10);

        goto label08;

     label05:
        $r6 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License APACHE>;

        if r0 != $r6 goto label06;

        specialinvoke r0.<net.sourceforge.plantuml.version.License: void addApache(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r9, r10);

        goto label08;

     label06:
        $r7 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License LGPL>;

        if r0 != $r7 goto label07;

        specialinvoke r0.<net.sourceforge.plantuml.version.License: void addLgpl(net.sourceforge.plantuml.version.LicenseInfo,java.util.List)>(r9, r10);

        goto label08;

     label07:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label08:
        $r12 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z22 = virtualinvoke $r12.<net.sourceforge.plantuml.OptionFlags: boolean isEnableStats()>();

        if $z22 == 0 goto label09;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("This version of PlantUML records general local statistics about usage.");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("(more info on https://plantuml.com/statistics-report)");

     label09:
        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.windowsdot.WindowsDotArchive: net.sourceforge.plantuml.windowsdot.WindowsDotArchive getInstance()>();

        $z1 = virtualinvoke $r11.<net.sourceforge.plantuml.windowsdot.WindowsDotArchive: boolean isThereArchive()>();

        if $z1 == 0 goto label10;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("This distribution bundles a minimal set of GraphViz files and may install them");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(" if needed in the local temporary directory.");

        goto label11;

     label10:
        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("This is the IGY distribution (Install GraphViz by Yourself).");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("You have to install GraphViz and to setup the GRAPHVIZ_DOT environment variable");

     label11:
        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("(see https://plantuml.com/graphviz-dot )");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("Icons provided by OpenIconic :  https://useiconic.com/open");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("Archimate sprites provided by Archi :  http://www.archimatetool.com");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("Stdlib AWS provided by https://github.com/milo-minderbinder/AWS-PlantUML");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("Stdlib Icons provided https://github.com/tupadr3/plantuml-icon-font-sprites");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("ASCIIMathML (c) Peter Jipsen http://www.chapman.edu/~jipsen");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("ASCIIMathML (c) David Lippman http://www.pierce.ctc.edu/dlippman");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("CafeUndZopfli ported by Eugene Klyuchnikov https://github.com/eustas/CafeUndZopfli");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("Brotli (c) by the Brotli Authors https://github.com/google/brotli");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("Themes (c) by Brett Schwarz https://github.com/bschwarz/puml-themes");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>("Twemoji (c) by Twitter at https://twemoji.twitter.com/");

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(" ");

        return;
    }

    private static net.sourceforge.plantuml.version.License[] $values()
    {
        net.sourceforge.plantuml.version.License[] $r0;
        net.sourceforge.plantuml.version.License $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        $r0 = newarray (net.sourceforge.plantuml.version.License)[7];

        $r1 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPL>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPLV2>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License LGPL>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License APACHE>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License EPL>;

        $r0[4] = $r5;

        $r6 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License MIT>;

        $r0[5] = $r6;

        $r7 = <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License BSD>;

        $r0[6] = $r7;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.version.License $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.version.License[] $r7;

        $r0 = new net.sourceforge.plantuml.version.License;

        specialinvoke $r0.<net.sourceforge.plantuml.version.License: void <init>(java.lang.String,int)>("GPL", 0);

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPL> = $r0;

        $r1 = new net.sourceforge.plantuml.version.License;

        specialinvoke $r1.<net.sourceforge.plantuml.version.License: void <init>(java.lang.String,int)>("GPLV2", 1);

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License GPLV2> = $r1;

        $r2 = new net.sourceforge.plantuml.version.License;

        specialinvoke $r2.<net.sourceforge.plantuml.version.License: void <init>(java.lang.String,int)>("LGPL", 2);

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License LGPL> = $r2;

        $r3 = new net.sourceforge.plantuml.version.License;

        specialinvoke $r3.<net.sourceforge.plantuml.version.License: void <init>(java.lang.String,int)>("APACHE", 3);

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License APACHE> = $r3;

        $r4 = new net.sourceforge.plantuml.version.License;

        specialinvoke $r4.<net.sourceforge.plantuml.version.License: void <init>(java.lang.String,int)>("EPL", 4);

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License EPL> = $r4;

        $r5 = new net.sourceforge.plantuml.version.License;

        specialinvoke $r5.<net.sourceforge.plantuml.version.License: void <init>(java.lang.String,int)>("MIT", 5);

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License MIT> = $r5;

        $r6 = new net.sourceforge.plantuml.version.License;

        specialinvoke $r6.<net.sourceforge.plantuml.version.License: void <init>(java.lang.String,int)>("BSD", 6);

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License BSD> = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License[] $values()>();

        <net.sourceforge.plantuml.version.License: net.sourceforge.plantuml.version.License[] $VALUES> = $r7;

        return;
    }
}
