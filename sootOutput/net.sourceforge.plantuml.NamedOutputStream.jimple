public class net.sourceforge.plantuml.NamedOutputStream extends java.io.OutputStream
{
    private final java.io.OutputStream os;
    private final net.sourceforge.plantuml.BaseFile basefile;

    public void <init>(net.sourceforge.plantuml.security.SFile) throws java.io.FileNotFoundException
    {
        net.sourceforge.plantuml.NamedOutputStream r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.io.BufferedOutputStream $r2;
        net.sourceforge.plantuml.BaseFile $r3;

        r0 := @this: net.sourceforge.plantuml.NamedOutputStream;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: java.io.BufferedOutputStream createBufferedOutputStream()>();

        r0.<net.sourceforge.plantuml.NamedOutputStream: java.io.OutputStream os> = $r2;

        $r3 = new net.sourceforge.plantuml.BaseFile;

        specialinvoke $r3.<net.sourceforge.plantuml.BaseFile: void <init>(net.sourceforge.plantuml.security.SFile)>(r1);

        r0.<net.sourceforge.plantuml.NamedOutputStream: net.sourceforge.plantuml.BaseFile basefile> = $r3;

        return;
    }

    public void close() throws java.io.IOException
    {
        net.sourceforge.plantuml.NamedOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: net.sourceforge.plantuml.NamedOutputStream;

        $r1 = r0.<net.sourceforge.plantuml.NamedOutputStream: java.io.OutputStream os>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        net.sourceforge.plantuml.NamedOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: net.sourceforge.plantuml.NamedOutputStream;

        $r1 = r0.<net.sourceforge.plantuml.NamedOutputStream: java.io.OutputStream os>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        net.sourceforge.plantuml.NamedOutputStream r0;
        byte[] r1;
        java.io.OutputStream $r2;

        r0 := @this: net.sourceforge.plantuml.NamedOutputStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<net.sourceforge.plantuml.NamedOutputStream: java.io.OutputStream os>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.NamedOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.OutputStream $r2;

        r0 := @this: net.sourceforge.plantuml.NamedOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<net.sourceforge.plantuml.NamedOutputStream: java.io.OutputStream os>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        net.sourceforge.plantuml.NamedOutputStream r0;
        int i0;
        java.io.OutputStream $r1;

        r0 := @this: net.sourceforge.plantuml.NamedOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.NamedOutputStream: java.io.OutputStream os>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    public net.sourceforge.plantuml.BaseFile getBasefile()
    {
        net.sourceforge.plantuml.NamedOutputStream r0;
        net.sourceforge.plantuml.BaseFile $r1;

        r0 := @this: net.sourceforge.plantuml.NamedOutputStream;

        $r1 = r0.<net.sourceforge.plantuml.NamedOutputStream: net.sourceforge.plantuml.BaseFile basefile>;

        return $r1;
    }
}
