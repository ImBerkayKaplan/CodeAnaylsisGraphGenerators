public class net.sourceforge.plantuml.ugraphic.FontChecker extends java.lang.Object
{
    private final net.sourceforge.plantuml.ugraphic.UFont font;
    private static final java.util.Set SQUARE;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.ugraphic.UFont)
    {
        net.sourceforge.plantuml.ugraphic.FontChecker r0;
        net.sourceforge.plantuml.ugraphic.UFont r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.FontChecker: net.sourceforge.plantuml.ugraphic.UFont font> = r1;

        return;
    }

    public boolean isCharOk(char)
    {
        net.sourceforge.plantuml.ugraphic.FontChecker r0;
        char c0;
        java.util.Set $r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        c0 := @parameter0: char;

        $r1 = <net.sourceforge.plantuml.ugraphic.FontChecker: java.util.Set SQUARE>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.FontChecker: java.lang.String getCharDesc(char)>(c0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static java.lang.String getType(int, double, double, double, double)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        double d0, d1, d2, d3;
        byte $b1, $b2;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        d1 := @parameter3: double;

        d3 := @parameter4: double;

        if i0 != 4 goto label1;

        return "X";

     label1:
        if i0 != 1 goto label4;

        $b1 = d0 cmpl d1;

        if $b1 != 0 goto label2;

        return "I";

     label2:
        $b2 = d2 cmpl d3;

        if $b2 != 0 goto label3;

        return "=";

     label3:
        return "L";

     label4:
        if i0 != 0 goto label5;

        return "M";

     label5:
        if i0 != 2 goto label6;

        return "Q";

     label6:
        if i0 != 3 goto label7;

        return "C";

     label7:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getCharDesc(char)
    {
        net.sourceforge.plantuml.ugraphic.FontChecker r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r10;
        net.sourceforge.plantuml.ugraphic.UFont $r2;
        char c0;
        java.lang.String $r5, $r12, $r13;
        java.awt.font.TextLayout r6;
        java.awt.Shape r7;
        double[] r8;
        java.awt.geom.PathIterator r9;
        boolean $z0;
        double d0, d1, $d2, $d3;
        int i1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        c0 := @parameter0: char;

        $r2 = r0.<net.sourceforge.plantuml.ugraphic.FontChecker: net.sourceforge.plantuml.ugraphic.UFont font>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: java.awt.font.TextLayout createTextLayout(net.sourceforge.plantuml.ugraphic.UFont,java.lang.String)>($r2, $r5);

        r7 = virtualinvoke r6.<java.awt.font.TextLayout: java.awt.Shape getOutline(java.awt.geom.AffineTransform)>(null);

        r8 = newarray (double)[6];

        r9 = interfaceinvoke r7.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

     label1:
        $z0 = interfaceinvoke r9.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label2;

        d0 = r8[0];

        d1 = r8[1];

        i1 = interfaceinvoke r9.<java.awt.geom.PathIterator: int currentSegment(double[])>(r8);

        $d3 = r8[0];

        $d2 = r8[1];

        $r13 = staticinvoke <net.sourceforge.plantuml.ugraphic.FontChecker: java.lang.String getType(int,double,double,double,double)>(i1, d0, d1, $d3, $d2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        interfaceinvoke r9.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label2:
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String getCharDescVerbose(char)
    {
        net.sourceforge.plantuml.ugraphic.FontChecker r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r10;
        net.sourceforge.plantuml.ugraphic.UFont $r2;
        char c0;
        java.lang.String $r5, $r12, $r13;
        java.awt.font.TextLayout r6;
        java.awt.Shape r7;
        double[] r8;
        java.awt.geom.PathIterator r9;
        boolean $z0;
        double d0, d1, $d2, $d3;
        int i1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        c0 := @parameter0: char;

        $r2 = r0.<net.sourceforge.plantuml.ugraphic.FontChecker: net.sourceforge.plantuml.ugraphic.UFont font>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: java.awt.font.TextLayout createTextLayout(net.sourceforge.plantuml.ugraphic.UFont,java.lang.String)>($r2, $r5);

        r7 = virtualinvoke r6.<java.awt.font.TextLayout: java.awt.Shape getOutline(java.awt.geom.AffineTransform)>(null);

        r8 = newarray (double)[6];

        r9 = interfaceinvoke r7.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

     label1:
        $z0 = interfaceinvoke r9.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label2;

        d0 = r8[0];

        d1 = r8[1];

        i1 = interfaceinvoke r9.<java.awt.geom.PathIterator: int currentSegment(double[])>(r8);

        $d3 = r8[0];

        $d2 = r8[1];

        $r13 = staticinvoke <net.sourceforge.plantuml.ugraphic.FontChecker: java.lang.String getType(int,double,double,double,double)>(i1, d0, d1, $d3, $d2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.FontChecker: void appendValue(java.lang.StringBuilder,double[])>($r10, r8);

        interfaceinvoke r9.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label2:
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private void appendValue(java.lang.StringBuilder, double[])
    {
        double[] r0;
        int i0, i1, i2;
        double d0, $d1;
        java.lang.StringBuilder r2;
        net.sourceforge.plantuml.ugraphic.FontChecker r5;

        r5 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        r2 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: double[];

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        d0 = r0[i2];

        $d1 = d0 * 100.0;

        i1 = (int) $d1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void printChar(java.io.PrintWriter, char) throws java.io.IOException, javax.xml.transform.TransformerException
    {
        java.io.PrintWriter r0;
        char c0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r6, $r8, $r9, $r10, $r11;
        java.lang.String $r4, $r7, $r12, r14;
        net.sourceforge.plantuml.ugraphic.FontChecker r13;

        r13 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        r0 := @parameter0: java.io.PrintWriter;

        c0 := @parameter1: char;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("<p>");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        r14 = specialinvoke r13.<net.sourceforge.plantuml.ugraphic.FontChecker: java.lang.String getSvgImage(char)>(c0);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(r14);

        return;
    }

    private java.lang.String getSvgImage(char) throws java.io.IOException, javax.xml.transform.TransformerException
    {
        net.sourceforge.plantuml.svg.SvgGraphics $r0;
        net.sourceforge.plantuml.Dimension2DDouble $r1;
        net.sourceforge.plantuml.svg.LengthAdjust $r2;
        net.sourceforge.plantuml.svg.DarkStrategy $r3;
        net.sourceforge.plantuml.ugraphic.FontChecker r5;
        char c0;
        java.awt.image.BufferedImage $r6;
        java.io.ByteArrayOutputStream $r7;
        java.lang.String $r9;
        byte[] $r10;

        r5 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        c0 := @parameter0: char;

        $r0 = new net.sourceforge.plantuml.svg.SvgGraphics;

        $r1 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r1.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        $r2 = staticinvoke <net.sourceforge.plantuml.svg.LengthAdjust: net.sourceforge.plantuml.svg.LengthAdjust defaultValue()>();

        $r3 = <net.sourceforge.plantuml.svg.DarkStrategy: net.sourceforge.plantuml.svg.DarkStrategy IGNORE_DARK_COLOR>;

        specialinvoke $r0.<net.sourceforge.plantuml.svg.SvgGraphics: void <init>(java.lang.String,boolean,net.sourceforge.plantuml.awt.geom.Dimension2D,double,java.lang.String,long,java.lang.String,net.sourceforge.plantuml.svg.LengthAdjust,net.sourceforge.plantuml.svg.DarkStrategy,boolean)>(null, 1, $r1, 1.0, null, 42L, "none", $r2, $r3, 0);

        virtualinvoke $r0.<net.sourceforge.plantuml.svg.SvgGraphics: void setStrokeColor(java.lang.String)>("black");

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.FontChecker: java.awt.image.BufferedImage getBufferedImage(char)>(c0);

        virtualinvoke $r0.<net.sourceforge.plantuml.svg.SvgGraphics: void svgImage(java.awt.image.BufferedImage,double,double)>($r6, 0.0, 0.0);

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.svg.SvgGraphics: void createXml(java.io.OutputStream)>($r7);

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

        $r9 = new java.lang.String;

        $r10 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>($r10);

        return $r9;
    }

    public java.awt.image.BufferedImage getBufferedImage(char) throws java.io.IOException
    {
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.FontChecker$1 $r0;
        net.sourceforge.plantuml.ugraphic.FontChecker r1;
        char c0;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r3;
        byte[] r4;
        java.awt.image.BufferedImage $r5;
        java.lang.AssertionError $r6;

        r1 := @this: net.sourceforge.plantuml.ugraphic.FontChecker;

        c0 := @parameter0: char;

        $z0 = <net.sourceforge.plantuml.ugraphic.FontChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if c0 != 9 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r0 = new net.sourceforge.plantuml.ugraphic.FontChecker$1;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.FontChecker$1: void <init>(net.sourceforge.plantuml.ugraphic.FontChecker,char)>(r1, c0);

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder plainPngBuilder(net.sourceforge.plantuml.graphic.UDrawable)>($r0);

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.ImageBuilder: byte[] writeByteArray()>();

        $r5 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.awt.image.BufferedImage read(byte[])>(r4);

        return $r5;
    }

    public static void main(java.lang.String[]) throws java.io.IOException, javax.xml.transform.TransformerException
    {
        java.lang.String[] r0, r28;
        java.lang.String r1, $r2, $r3, $r4, $r14, r21, r23, r27;
        int i0, i1, i2, i3, i4, i6, i8;
        net.sourceforge.plantuml.security.SFile $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        net.sourceforge.plantuml.ugraphic.FontChecker $r16, $r24;
        net.sourceforge.plantuml.ugraphic.UFont $r17, $r25;
        java.io.PrintWriter r19;
        java.awt.GraphicsEnvironment $r20;
        boolean z0, $z1, z2;
        char c5, c7;

        r0 := @parameter0: java.lang.String[];

        r1 = r0[0];

        $r2 = r0[1];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = r0[2];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r0[3];

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r5 = new net.sourceforge.plantuml.security.SFile;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fontchecker-");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".html");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>($r14);

        $r16 = new net.sourceforge.plantuml.ugraphic.FontChecker;

        $r17 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r17.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>(r1, 0, i0);

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.FontChecker: void <init>(net.sourceforge.plantuml.ugraphic.UFont)>($r17);

        r19 = virtualinvoke $r5.<net.sourceforge.plantuml.security.SFile: java.io.PrintWriter createPrintWriter()>();

        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>("<html>");

        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>("<h1>PROBLEM</h1>");

        i4 = i1;

     label1:
        if i4 > i2 goto label3;

        c5 = (char) i4;

        z2 = virtualinvoke $r16.<net.sourceforge.plantuml.ugraphic.FontChecker: boolean isCharOk(char)>(c5);

        if z2 != 0 goto label2;

        virtualinvoke $r16.<net.sourceforge.plantuml.ugraphic.FontChecker: void printChar(java.io.PrintWriter,char)>(r19, c5);

        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>("</p>");

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>("<h1>OK</h1>");

        $r20 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        r28 = virtualinvoke $r20.<java.awt.GraphicsEnvironment: java.lang.String[] getAvailableFontFamilyNames()>();

        i6 = i1;

     label4:
        if i6 > i2 goto label9;

        c7 = (char) i6;

        z0 = virtualinvoke $r16.<net.sourceforge.plantuml.ugraphic.FontChecker: boolean isCharOk(char)>(c7);

        if z0 == 0 goto label8;

        virtualinvoke $r16.<net.sourceforge.plantuml.ugraphic.FontChecker: void printChar(java.io.PrintWriter,char)>(r19, c7);

        r21 = virtualinvoke $r16.<net.sourceforge.plantuml.ugraphic.FontChecker: java.lang.String getCharDescVerbose(char)>(c7);

        i3 = lengthof r28;

        i8 = 0;

     label5:
        if i8 >= i3 goto label7;

        r23 = r28[i8];

        $r24 = new net.sourceforge.plantuml.ugraphic.FontChecker;

        $r25 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r25.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>(r23, 0, i0);

        specialinvoke $r24.<net.sourceforge.plantuml.ugraphic.FontChecker: void <init>(net.sourceforge.plantuml.ugraphic.UFont)>($r25);

        r27 = virtualinvoke $r24.<net.sourceforge.plantuml.ugraphic.FontChecker: java.lang.String getCharDescVerbose(char)>(c7);

        $z1 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z1 == 0 goto label6;

        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>("&nbsp;");

        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>(r23);

     label6:
        i8 = i8 + 1;

        goto label5;

     label7:
        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>("</p>");

     label8:
        i6 = i6 + 1;

        goto label4;

     label9:
        virtualinvoke r19.<java.io.PrintWriter: void println(java.lang.String)>("</html>");

        virtualinvoke r19.<java.io.PrintWriter: void close()>();

        return;
    }

    static net.sourceforge.plantuml.ugraphic.UFont access$000(net.sourceforge.plantuml.ugraphic.FontChecker)
    {
        net.sourceforge.plantuml.ugraphic.FontChecker r0;
        net.sourceforge.plantuml.ugraphic.UFont $r1;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.FontChecker;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.FontChecker: net.sourceforge.plantuml.ugraphic.UFont font>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.HashSet $r1;
        java.lang.String[] $r2;
        java.util.List $r3;

        $r0 = class "Lnet/sourceforge/plantuml/ugraphic/FontChecker;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.ugraphic.FontChecker: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.HashSet;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "MI=I=XM=I=IX";

        $r2[1] = "MI=I=XM=I=IXMI=I=XM=I=IX";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        <net.sourceforge.plantuml.ugraphic.FontChecker: java.util.Set SQUARE> = $r1;

        return;
    }
}
