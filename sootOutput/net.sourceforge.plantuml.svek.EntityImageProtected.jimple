public class net.sourceforge.plantuml.svek.EntityImageProtected extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.IEntityImage, net.sourceforge.plantuml.svek.Untranslated, net.sourceforge.plantuml.svek.WithPorts
{
    private final net.sourceforge.plantuml.svek.IEntityImage orig;
    private final double border;
    private final net.sourceforge.plantuml.svek.Bibliotekon bibliotekon;
    private final net.sourceforge.plantuml.cucadiagram.dot.Neighborhood neighborhood;

    public java.awt.geom.Rectangle2D getInnerPosition(java.lang.String, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.InnerStrategy)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.InnerStrategy r3;
        net.sourceforge.plantuml.svek.IEntityImage $r4;
        java.awt.geom.Rectangle2D r5;
        java.awt.geom.Rectangle2D$Double $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.InnerStrategy;

        $r4 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.svek.IEntityImage: java.awt.geom.Rectangle2D getInnerPosition(java.lang.String,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.InnerStrategy)>(r1, r2, r3);

        $r6 = new java.awt.geom.Rectangle2D$Double;

        $d0 = virtualinvoke r5.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d1 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border>;

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke r5.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d4 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border>;

        $d5 = $d3 + $d4;

        $d6 = virtualinvoke r5.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d7 = virtualinvoke r5.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $r6.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d2, $d5, $d6, $d7);

        return $r6;
    }

    public void <init>(net.sourceforge.plantuml.svek.IEntityImage, double, net.sourceforge.plantuml.cucadiagram.dot.Neighborhood, net.sourceforge.plantuml.svek.Bibliotekon)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.svek.IEntityImage r1;
        double d0;
        net.sourceforge.plantuml.svek.Bibliotekon r2;
        net.sourceforge.plantuml.cucadiagram.dot.Neighborhood r3;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r1 := @parameter0: net.sourceforge.plantuml.svek.IEntityImage;

        d0 := @parameter1: double;

        r3 := @parameter2: net.sourceforge.plantuml.cucadiagram.dot.Neighborhood;

        r2 := @parameter3: net.sourceforge.plantuml.svek.Bibliotekon;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig> = r1;

        r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border> = d0;

        r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon> = r2;

        r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.cucadiagram.dot.Neighborhood neighborhood> = r3;

        return;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        $r1 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: boolean isHidden()>();

        return $z0;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        $r1 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        return $r2;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3, $r4;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border>;

        $d1 = 2.0 * $d0;

        $r4 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double)>($r3, $d1);

        return $r4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2;
        double $d0, $d1;
        net.sourceforge.plantuml.svek.IEntityImage $r3;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r3 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r2 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d1 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border>;

        $d0 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border>;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, $d0);

        $r4 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        interfaceinvoke $r3.<net.sourceforge.plantuml.svek.IEntityImage: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r4);

        return;
    }

    public void drawUntranslated(net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double d0, $d1, d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.svek.Bibliotekon $r5;
        net.sourceforge.plantuml.cucadiagram.dot.Neighborhood $r6;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r6 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.cucadiagram.dot.Neighborhood neighborhood>;

        $d1 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border>;

        $d5 = d0 + $d1;

        $d3 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: double border>;

        $d4 = d2 + $d3;

        $r5 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.Bibliotekon bibliotekon>;

        virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.dot.Neighborhood: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r1, $d5, $d4, $r5, r4);

        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        net.sourceforge.plantuml.svek.ShapeType $r2;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        $r1 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.svek.ShapeType getShapeType()>();

        return $r2;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.svek.Margins $r3;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.EntityImageProtected r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.svek.WithPorts $r3;
        net.sourceforge.plantuml.svek.Ports $r4;

        r0 := @this: net.sourceforge.plantuml.svek.EntityImageProtected;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.svek.EntityImageProtected: net.sourceforge.plantuml.svek.IEntityImage orig>;

        $r3 = (net.sourceforge.plantuml.svek.WithPorts) $r1;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.svek.WithPorts: net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r4;
    }
}
