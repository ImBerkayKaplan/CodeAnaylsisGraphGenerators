class net.sourceforge.plantuml.json.JsonLiteral extends net.sourceforge.plantuml.json.JsonValue
{
    private final java.lang.String value;
    private final boolean isNull;
    private final boolean isTrue;
    private final boolean isFalse;

    void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<net.sourceforge.plantuml.json.JsonValue: void <init>()>();

        r0.<net.sourceforge.plantuml.json.JsonLiteral: java.lang.String value> = r1;

        $r2 = "null";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isNull> = $z0;

        $r3 = "true";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isTrue> = $z1;

        $r4 = "false";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isFalse> = $z2;

        return;
    }

    void write(net.sourceforge.plantuml.json.JsonWriter) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.JsonWriter r0;
        net.sourceforge.plantuml.json.JsonLiteral r1;
        java.lang.String $r2;

        r1 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        r0 := @parameter0: net.sourceforge.plantuml.json.JsonWriter;

        $r2 = r1.<net.sourceforge.plantuml.json.JsonLiteral: java.lang.String value>;

        virtualinvoke r0.<net.sourceforge.plantuml.json.JsonWriter: void writeLiteral(java.lang.String)>($r2);

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonLiteral: java.lang.String value>;

        return $r1;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        $r1 = r0.<net.sourceforge.plantuml.json.JsonLiteral: java.lang.String value>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean isNull()
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        $z0 = r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isNull>;

        return $z0;
    }

    public boolean isTrue()
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        $z0 = r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isTrue>;

        return $z0;
    }

    public boolean isFalse()
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        $z0 = r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isFalse>;

        return $z0;
    }

    public boolean isBoolean()
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        $z0 = r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isTrue>;

        if $z0 != 0 goto label1;

        $z1 = r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isFalse>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean asBoolean()
    {
        net.sourceforge.plantuml.json.JsonLiteral r0;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        $z0 = r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isNull>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<net.sourceforge.plantuml.json.JsonValue: boolean asBoolean()>();

        goto label2;

     label1:
        $z1 = r0.<net.sourceforge.plantuml.json.JsonLiteral: boolean isTrue>;

     label2:
        return $z1;
    }

    public boolean equals(java.lang.Object)
    {
        net.sourceforge.plantuml.json.JsonLiteral r0, r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.json.JsonLiteral;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (net.sourceforge.plantuml.json.JsonLiteral) r1;

        $r6 = r0.<net.sourceforge.plantuml.json.JsonLiteral: java.lang.String value>;

        $r5 = r4.<net.sourceforge.plantuml.json.JsonLiteral: java.lang.String value>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }
}
