public class net.sourceforge.plantuml.sequencediagram.graphic.LifeLine extends java.lang.Object
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.Pushable participant;
    private final double nominalPreferredWidth;
    private final java.util.List events;
    private final net.sourceforge.plantuml.sequencediagram.graphic.Stairs stairs;
    private int maxLevel;
    private final boolean shadowing;
    private double create;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Pushable, double, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable r3;
        double d0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Pushable;

        d0 := @parameter1: double;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events> = $r1;

        $r2 = new net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Stairs stairs> = $r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int maxLevel> = 0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double create> = 0.0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Pushable participant> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double nominalPreferredWidth> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean shadowing> = z0;

        return;
    }

    public void addSegmentVariation(net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation, double, net.sourceforge.plantuml.graphic.SymbolContext)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        java.util.List $r1, $r9, $r10, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, i13;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation r2, $r12;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.graphic.SymbolContext r3;
        boolean $z1, $z2, $z3;
        java.lang.AssertionError $r4, $r6, $r8;
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs $r5, $r7, $r16, $r17;
        java.lang.Object $r11;
        byte $b10, $b11;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation r13, $r15;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation;

        d0 := @parameter1: double;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.SymbolContext;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $i8 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i9 = $i8 - 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i9);

        r13 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r11;

        $d1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: double access$000(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>(r13);

        $b10 = d0 cmpg $d1;

        if $b10 >= 0 goto label1;

        return;

     label1:
        $d2 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: double access$000(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>(r13);

        $b11 = d0 cmpl $d2;

        if $b11 != 0 goto label2;

        $r12 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation access$100(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>(r13);

        if r2 == $r12 goto label2;

        return;

     label2:
        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r15 = new net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation;

        specialinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation,double,net.sourceforge.plantuml.graphic.SymbolContext)>(r2, d0, r3);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Stairs stairs>;

        $i12 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: int getLastValue()>();

        i13 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: int apply(int)>($i12);

        $r17 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Stairs stairs>;

        virtualinvoke $r17.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: void addStep(double,int)>(d0, i13);

        $z3 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        $i6 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getLevel(double)>(d0);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Stairs stairs>;

        $i7 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: int getValue(double)>(d0);

        if $i6 == $i7 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $z1 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Stairs stairs>;

        $i5 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: int getValue(double)>(d0);

        if i13 == $i5 goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        $z2 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $i4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getLevel(double)>(d0);

        if $i4 == i13 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getLevel(double)>(d0);

        $i2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int maxLevel>;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int maxLevel> = $i3;

        return;
    }

    public void finish(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        int i0, i1;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        d0 := @parameter0: double;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getMissingClose()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation SMALLER>;

        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: void addSegmentVariation(net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation,double,net.sourceforge.plantuml.graphic.SymbolContext)>($r1, d0, null);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    int getMissingClose()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation $r5, $r6;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        i0 = 0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r3;

        $r5 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation access$100(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>(r4);

        $r6 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation LARGER>;

        if $r5 != $r6 goto label2;

        i0 = i0 + 1;

        goto label3;

     label2:
        i0 = i0 + -1;

     label3:
        goto label1;

     label4:
        return i0;
    }

    int getLevel(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Stairs stairs>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: int getValue(double)>(d0);

        return $i0;
    }

    public int getMaxLevel()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        $i0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int maxLevel>;

        return $i0;
    }

    public double getRightShift(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        double d0, $d1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        d0 := @parameter0: double;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getLevel(double)>(d0);

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getRightShiftAtLevel(int)>($i0);

        return $d1;
    }

    public double getLeftShift(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        double d0, $d1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        d0 := @parameter0: double;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getLevel(double)>(d0);

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getLeftShiftAtLevel(int)>($i0);

        return $d1;
    }

    public double getMaxRightShift()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        int $i0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getMaxLevel()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getRightShiftAtLevel(int)>($i0);

        return $d0;
    }

    public double getMaxLeftShift()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        int $i0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getMaxLevel()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getLeftShiftAtLevel(int)>($i0);

        return $d0;
    }

    private double getRightShiftAtLevel(int)
    {
        int i0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0.0;

     label1:
        $d2 = (double) i0;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double nominalPreferredWidth>;

        $d1 = $d0 / 2.0;

        $d3 = $d2 * $d1;

        return $d3;
    }

    private double getLeftShiftAtLevel(int)
    {
        int i0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0.0;

     label1:
        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double nominalPreferredWidth>;

        $d1 = $d0 / 2.0;

        return $d1;
    }

    private double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable $r2;
        double $d0, $d1, $d2, d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Pushable participant>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double nominalPreferredWidth>;

        $d2 = $d1 / 2.0;

        d3 = $d0 - $d2;

        return d3;
    }

    private net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getSegment(int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        int i0, $i1, $i2, $i3, i4, i5;
        java.util.List $r1, $r6, $r8, $r11, $r12, $r15, $r19, $r24, $r27, $r31;
        java.lang.Object $r2, $r9, $r13, $r16, $r20, $r25, $r28, $r32;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation $r3, $r10, $r14, $r17, $r21, $r26, $r29, $r33;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation $r4, $r5, $r22, $r23;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r7, $r30;
        double $d0, $d1, d2, d3;
        net.sourceforge.plantuml.graphic.SymbolContext $r18, $r34;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r2;

        $r4 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation access$100(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r3);

        $r5 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation LARGER>;

        if $r4 == $r5 goto label1;

        return null;

     label1:
        i4 = 1;

        i5 = i0 + 1;

     label2:
        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i5 >= $i1 goto label6;

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i5);

        $r21 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r20;

        $r22 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation access$100(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r21);

        $r23 = <net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation: net.sourceforge.plantuml.sequencediagram.graphic.LifeSegmentVariation LARGER>;

        if $r22 != $r23 goto label3;

        i4 = i4 + 1;

        goto label4;

     label3:
        i4 = i4 + -1;

     label4:
        if i4 != 0 goto label5;

        $r24 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i0);

        $r26 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r25;

        d2 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: double access$000(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r26);

        $r27 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r28 = interfaceinvoke $r27.<java.util.List: java.lang.Object get(int)>(i5);

        $r29 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r28;

        d3 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: double access$000(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r29);

        $r30 = new net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r31 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(i0);

        $r33 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r32;

        $r34 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: net.sourceforge.plantuml.graphic.SymbolContext access$200(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r33);

        $z1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean shadowing>;

        specialinvoke $r30.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void <init>(double,double,net.sourceforge.plantuml.graphic.SymbolContext,boolean)>(d2, d3, $r34, $z1);

        return $r30;

     label5:
        i5 = i5 + 1;

        goto label2;

     label6:
        $r7 = new net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0);

        $r10 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r9;

        $d0 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: double access$000(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r10);

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        $r14 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r13;

        $d1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: double access$000(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r14);

        $r15 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i0);

        $r17 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r16;

        $r18 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: net.sourceforge.plantuml.graphic.SymbolContext access$200(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r17);

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean shadowing>;

        specialinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void <init>(double,double,net.sourceforge.plantuml.graphic.SymbolContext,boolean)>($d0, $d1, $r18, $z0);

        return $r7;
    }

    private java.util.Collection getSegmentsCutted(net.sourceforge.plantuml.graphic.StringBounder, int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        int i0;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r1;
        java.util.List $r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.sequencediagram.graphic.Pushable $r4;
        java.util.Collection $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        i0 := @parameter1: int;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getSegment(int)>(i0);

        if r1 == null goto label1;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: net.sourceforge.plantuml.sequencediagram.graphic.Pushable participant>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.Pushable: java.util.Collection getDelays(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: java.util.Collection cutSegmentIfNeed(java.util.Collection)>($r5);

        return $r6;

     label1:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r1;
        double $d0, $d1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2;
        java.util.List $r3;
        int $i0, i1, i2;
        java.util.Collection $r4;
        java.util.Iterator r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r7;
        net.sourceforge.plantuml.ugraphic.color.HColor r8, r11;
        net.sourceforge.plantuml.SkinParamBackcolored $r9;
        net.sourceforge.plantuml.ISkinParam r10;
        net.sourceforge.plantuml.skin.rose.Rose r12;
        net.sourceforge.plantuml.style.Style[] $r13;
        net.sourceforge.plantuml.skin.Component r14;
        net.sourceforge.plantuml.style.PName $r15, $r16;
        net.sourceforge.plantuml.skin.ComponentType $r17, r22, $r24;
        net.sourceforge.plantuml.SkinParamForceColor $r18;
        net.sourceforge.plantuml.ColorParam $r19;
        net.sourceforge.plantuml.ugraphic.UGraphic r20, r21;
        net.sourceforge.plantuml.SkinParamDelegator r23;
        net.sourceforge.plantuml.style.StyleSignature $r25;
        net.sourceforge.plantuml.style.StyleBuilder $r26;
        net.sourceforge.plantuml.style.Style r27, r28;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        r20 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r12 := @parameter1: net.sourceforge.plantuml.skin.rose.Rose;

        r10 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r0 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d0);

        r21 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        i2 = 0;

     label1:
        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i0 goto label9;

        r22 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_OPEN>;

        $r4 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.Collection getSegmentsCutted(net.sourceforge.plantuml.graphic.StringBounder,int)>(r0, i2);

        r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored) $r6;

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.ugraphic.color.HColor getSpecificBackColor()>();

        $r9 = new net.sourceforge.plantuml.SkinParamBackcolored;

        specialinvoke $r9.<net.sourceforge.plantuml.SkinParamBackcolored: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor)>(r10, r8);

        r23 = $r9;

        r11 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.ugraphic.color.HColor getSpecificLineColor()>();

        if r11 == null goto label3;

        $r18 = new net.sourceforge.plantuml.SkinParamForceColor;

        $r19 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam sequenceLifeLineBorder>;

        specialinvoke $r18.<net.sourceforge.plantuml.SkinParamForceColor: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam,net.sourceforge.plantuml.ugraphic.color.HColor)>($r9, $r19, r11);

        r23 = $r18;

     label3:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label6;

        $r17 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_OPEN>;

        if r22 != $r17 goto label4;

        $r24 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_CLOSE_CLOSE>;

        goto label5;

     label4:
        $r24 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_OPEN_CLOSE>;

     label5:
        r22 = $r24;

     label6:
        $r25 = virtualinvoke r22.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r26 = interfaceinvoke r23.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r27 = virtualinvoke $r25.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r26);

        if r27 == null goto label7;

        $r15 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        r28 = virtualinvoke r27.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r15, r8);

        $r16 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        r27 = virtualinvoke r28.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r16, r11);

     label7:
        $r13 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r13[0] = r27;

        r14 = virtualinvoke r12.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r13, r22, null, r23, null);

        r22 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ALIVE_BOX_OPEN_OPEN>;

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: double getPos1Initial()>();

        i1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: int getLevel(double)>($d1);

        virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Component,int)>(r21, r14, i1);

        goto label2;

     label8:
        i2 = i2 + 1;

        goto label1;

     label9:
        return;
    }

    public final void setCreate(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double create> = d0;

        return;
    }

    public final double getCreate()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: double create>;

        return $d0;
    }

    public final double getDestroy()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        return 0.0;
    }

    public final boolean shadowing()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean shadowing>;

        return $z0;
    }

    public net.sourceforge.plantuml.graphic.SymbolContext getColors()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine r0;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation $r5;
        net.sourceforge.plantuml.graphic.SymbolContext $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.LifeLine;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: java.util.List events>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation) $r4;

        $r6 = staticinvoke <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation: net.sourceforge.plantuml.graphic.SymbolContext access$200(net.sourceforge.plantuml.sequencediagram.graphic.LifeLine$Variation)>($r5);

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/LifeLine;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.LifeLine: boolean $assertionsDisabled> = $z1;

        return;
    }
}
