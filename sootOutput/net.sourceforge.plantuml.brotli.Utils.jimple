final class net.sourceforge.plantuml.brotli.Utils extends java.lang.Object
{
    private static final byte[] BYTE_ZEROES;
    private static final int[] INT_ZEROES;

    void <init>()
    {
        net.sourceforge.plantuml.brotli.Utils r0;

        r0 := @this: net.sourceforge.plantuml.brotli.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void fillBytesWithZeroes(byte[], int, int)
    {
        int i0, i1, $i2, $i3, i4, i5;
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i0;

     label1:
        if i5 >= i1 goto label2;

        $i2 = i5 + 1024;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i1);

        i4 = $i3 - i5;

        $r1 = <net.sourceforge.plantuml.brotli.Utils: byte[] BYTE_ZEROES>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r0, i5, i4);

        i5 = i5 + i4;

        goto label1;

     label2:
        return;
    }

    static void fillIntsWithZeroes(int[], int, int)
    {
        int i0, i1, $i2, $i3, i4, i5;
        int[] r0, $r1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i0;

     label1:
        if i5 >= i1 goto label2;

        $i2 = i5 + 1024;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i1);

        i4 = $i3 - i5;

        $r1 = <net.sourceforge.plantuml.brotli.Utils: int[] INT_ZEROES>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r0, i5, i4);

        i5 = i5 + i4;

        goto label1;

     label2:
        return;
    }

    static void copyBytesWithin(byte[], int, int, int)
    {
        byte[] r0;
        int i0, i1, i2, $i3;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = i2 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r0, i1, $i3);

        return;
    }

    static int readInput(java.io.InputStream, byte[], int, int)
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.io.IOException $r2;
        net.sourceforge.plantuml.brotli.BrotliRuntimeException $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        $i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

     label2:
        return $i2;

     label3:
        $r2 := @caughtexception;

        $r4 = new net.sourceforge.plantuml.brotli.BrotliRuntimeException;

        specialinvoke $r4.<net.sourceforge.plantuml.brotli.BrotliRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to read input", $r2);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void closeInput(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<java.io.InputStream: void close()>();

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;
        int[] $r1;

        $r0 = newarray (byte)[1024];

        <net.sourceforge.plantuml.brotli.Utils: byte[] BYTE_ZEROES> = $r0;

        $r1 = newarray (int)[1024];

        <net.sourceforge.plantuml.brotli.Utils: int[] INT_ZEROES> = $r1;

        return;
    }
}
