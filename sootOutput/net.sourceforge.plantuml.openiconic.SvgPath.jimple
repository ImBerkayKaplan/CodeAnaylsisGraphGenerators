public class net.sourceforge.plantuml.openiconic.SvgPath extends java.lang.Object
{
    private java.util.List movements;
    private java.util.List commands;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.openiconic.SvgPath r0;
        java.util.ArrayList $r1, $r2;
        java.util.StringTokenizer $r3;
        boolean $z0, $z1, $z2, $z4;
        java.util.List $r4, $r5, $r6, $r9, $r12, $r15, $r17;
        net.sourceforge.plantuml.openiconic.SvgPosition $r7, $r8, $r13, r22, r23, r24;
        java.util.Iterator r10;
        net.sourceforge.plantuml.openiconic.Movement $r11, r26;
        char $c0, $c1;
        net.sourceforge.plantuml.openiconic.SvgCommandNumber $r14;
        net.sourceforge.plantuml.openiconic.SvgCommandLetter $r16;
        java.lang.String r18, r19, r21;

        r0 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        r18 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List movements> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List commands> = $r2;

        r19 = staticinvoke <net.sourceforge.plantuml.openiconic.StringDecipher: java.lang.String decipher(java.lang.String)>(r18);

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String)>(r19);

     label01:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label04;

        r21 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z4 = virtualinvoke r21.<java.lang.String: boolean matches(java.lang.String)>("[a-zA-Z]");

        if $z4 == 0 goto label02;

        $r17 = r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List commands>;

        $r16 = new net.sourceforge.plantuml.openiconic.SvgCommandLetter;

        specialinvoke $r16.<net.sourceforge.plantuml.openiconic.SvgCommandLetter: void <init>(java.lang.String)>(r21);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label03;

     label02:
        $r15 = r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List commands>;

        $r14 = new net.sourceforge.plantuml.openiconic.SvgCommandNumber;

        specialinvoke $r14.<net.sourceforge.plantuml.openiconic.SvgCommandNumber: void <init>(java.lang.String)>(r21);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14);

     label03:
        goto label01;

     label04:
        $r4 = r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List commands>;

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List insertMissingLetter(java.util.List)>($r4);

        r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List commands> = $r5;

        $r6 = r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List commands>;

        specialinvoke r0.<net.sourceforge.plantuml.openiconic.SvgPath: void checkArguments(java.util.List)>($r6);

        $r7 = new net.sourceforge.plantuml.openiconic.SvgPosition;

        specialinvoke $r7.<net.sourceforge.plantuml.openiconic.SvgPosition: void <init>()>();

        r22 = $r7;

        $r8 = new net.sourceforge.plantuml.openiconic.SvgPosition;

        specialinvoke $r8.<net.sourceforge.plantuml.openiconic.SvgPosition: void <init>()>();

        r23 = $r8;

        r24 = null;

        $r9 = r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List commands>;

        r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r11 = new net.sourceforge.plantuml.openiconic.Movement;

        specialinvoke $r11.<net.sourceforge.plantuml.openiconic.Movement: void <init>(java.util.Iterator)>(r10);

        r26 = virtualinvoke $r11.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.Movement toAbsoluteUpperCase(net.sourceforge.plantuml.openiconic.SvgPosition)>(r22);

        $c0 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: char getLetter()>();

        if $c0 != 90 goto label06;

        r22 = r23;

     label06:
        $z2 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: boolean is(char)>(83);

        if $z2 == 0 goto label07;

        r26 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.Movement mutoToC(net.sourceforge.plantuml.openiconic.SvgPosition)>(r24);

     label07:
        $r12 = r0.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List movements>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r26);

        $c1 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: char getLetter()>();

        if $c1 != 77 goto label08;

        r23 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition lastPosition()>();

     label08:
        $r13 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition lastPosition()>();

        if $r13 == null goto label09;

        r22 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition lastPosition()>();

     label09:
        r24 = virtualinvoke r26.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition getMirrorControlPoint()>();

        goto label05;

     label10:
        return;
    }

    private java.util.List insertMissingLetter(java.util.List)
    {
        java.util.ArrayList $r0;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r7;
        net.sourceforge.plantuml.openiconic.SvgCommand r5;
        net.sourceforge.plantuml.openiconic.SvgCommandLetter $r6, r10;
        net.sourceforge.plantuml.openiconic.SvgCommandNumber r8;
        int $i0, i1, i2;
        net.sourceforge.plantuml.openiconic.SvgPath r9;

        r9 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        r2 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        r10 = null;

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.openiconic.SvgCommand) $r4;

        $z1 = r5 instanceof net.sourceforge.plantuml.openiconic.SvgCommandNumber;

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        $i0 = virtualinvoke r10.<net.sourceforge.plantuml.openiconic.SvgCommandLetter: int argumentNumber()>();

        i1 = $i0 - 1;

        goto label3;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        $r6 = (net.sourceforge.plantuml.openiconic.SvgCommandLetter) r5;

        r10 = virtualinvoke $r6.<net.sourceforge.plantuml.openiconic.SvgCommandLetter: net.sourceforge.plantuml.openiconic.SvgCommandLetter implicit()>();

        i1 = virtualinvoke r10.<net.sourceforge.plantuml.openiconic.SvgCommandLetter: int argumentNumber()>();

     label3:
        i2 = 0;

     label4:
        if i2 >= i1 goto label5;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.openiconic.SvgCommandNumber) $r7;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8);

        i2 = i2 + 1;

        goto label4;

     label5:
        goto label1;

     label6:
        return $r0;
    }

    private void checkArguments(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2, $r4;
        net.sourceforge.plantuml.openiconic.SvgCommandLetter r3;
        int i0, i1;
        net.sourceforge.plantuml.openiconic.SvgCommandNumber r5;
        net.sourceforge.plantuml.openiconic.SvgPath r6;

        r6 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.openiconic.SvgCommandLetter) $r2;

        i0 = virtualinvoke r3.<net.sourceforge.plantuml.openiconic.SvgCommandLetter: int argumentNumber()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.openiconic.SvgCommandNumber) $r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public java.lang.String toSvg()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.openiconic.SvgPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.String $r6, $r9;
        java.lang.Object $r7;
        net.sourceforge.plantuml.openiconic.Movement r8;

        r2 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("<path d=\"");

        $r3 = r2.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List movements>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.openiconic.Movement) $r7;

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.openiconic.Movement: java.lang.String toSvg()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private net.sourceforge.plantuml.ugraphic.UPath toUPath(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.openiconic.SvgPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.openiconic.Movement r6;
        char c0;
        net.sourceforge.plantuml.openiconic.SvgPosition r7, r13, r14;
        java.lang.UnsupportedOperationException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, d32;

        r2 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        d4 := @parameter0: double;

        d5 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List movements>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.openiconic.Movement) $r5;

        c0 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: char getLetter()>();

        r7 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition lastPosition()>();

        if c0 != 77 goto label2;

        $d28 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getXDouble()>();

        $d29 = $d28 * d4;

        $d30 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getYDouble()>();

        $d31 = $d30 * d5;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>($d29, $d31);

        goto label7;

     label2:
        if c0 != 67 goto label3;

        r14 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition getSvgPosition(int)>(0);

        r13 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition getSvgPosition(int)>(2);

        $d16 = virtualinvoke r14.<net.sourceforge.plantuml.openiconic.SvgPosition: double getXDouble()>();

        $d17 = $d16 * d4;

        $d18 = virtualinvoke r14.<net.sourceforge.plantuml.openiconic.SvgPosition: double getYDouble()>();

        $d19 = $d18 * d5;

        $d20 = virtualinvoke r13.<net.sourceforge.plantuml.openiconic.SvgPosition: double getXDouble()>();

        $d21 = $d20 * d4;

        $d22 = virtualinvoke r13.<net.sourceforge.plantuml.openiconic.SvgPosition: double getYDouble()>();

        $d23 = $d22 * d5;

        $d24 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getXDouble()>();

        $d25 = $d24 * d4;

        $d26 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getYDouble()>();

        $d27 = $d26 * d5;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d17, $d19, $d21, $d23, $d25, $d27);

        goto label7;

     label3:
        if c0 != 76 goto label4;

        $d12 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getXDouble()>();

        $d13 = $d12 * d4;

        $d14 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getYDouble()>();

        $d15 = $d14 * d5;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d13, $d15);

        goto label7;

     label4:
        if c0 != 65 goto label5;

        d32 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(0);

        d0 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(1);

        d1 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(2);

        d2 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(3);

        d3 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(4);

        $d6 = d32 * d4;

        $d7 = d0 * d5;

        $d8 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getXDouble()>();

        $d9 = $d8 * d4;

        $d10 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: double getYDouble()>();

        $d11 = $d10 * d5;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(double,double,double,double,double,double,double)>($d6, $d7, d1, d2, d3, $d9, $d11);

        goto label7;

     label5:
        if c0 != 90 goto label6;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        goto label7;

     label6:
        $r8 = new java.lang.UnsupportedOperationException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("letter ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label7:
        goto label1;

     label8:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void setOpenIconic(boolean)>(1);

        return $r0;
    }

    private net.sourceforge.plantuml.ugraphic.UPath toUPath(java.awt.geom.AffineTransform)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.openiconic.SvgPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.openiconic.Movement r6;
        char c0;
        net.sourceforge.plantuml.openiconic.SvgPosition r7, r16, r21;
        java.lang.UnsupportedOperationException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        java.awt.geom.AffineTransform r13;
        java.awt.geom.Point2D r14, $r15, $r17, $r18, $r19, $r20;

        r2 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        r13 := @parameter0: java.awt.geom.AffineTransform;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.openiconic.SvgPath: java.util.List movements>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.openiconic.Movement) $r5;

        c0 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: char getLetter()>();

        r7 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition lastPosition()>();

        if c0 != 77 goto label2;

        $r20 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: java.awt.geom.Point2D affine(java.awt.geom.AffineTransform)>(r13);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(java.awt.geom.Point2D)>($r20);

        goto label7;

     label2:
        if c0 != 67 goto label3;

        r21 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition getSvgPosition(int)>(0);

        r16 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: net.sourceforge.plantuml.openiconic.SvgPosition getSvgPosition(int)>(2);

        $r17 = virtualinvoke r21.<net.sourceforge.plantuml.openiconic.SvgPosition: java.awt.geom.Point2D affine(java.awt.geom.AffineTransform)>(r13);

        $r18 = virtualinvoke r16.<net.sourceforge.plantuml.openiconic.SvgPosition: java.awt.geom.Point2D affine(java.awt.geom.AffineTransform)>(r13);

        $r19 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: java.awt.geom.Point2D affine(java.awt.geom.AffineTransform)>(r13);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)>($r17, $r18, $r19);

        goto label7;

     label3:
        if c0 != 76 goto label4;

        $r15 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: java.awt.geom.Point2D affine(java.awt.geom.AffineTransform)>(r13);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(java.awt.geom.Point2D)>($r15);

        goto label7;

     label4:
        if c0 != 65 goto label5;

        d10 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(0);

        d0 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(1);

        d1 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(2);

        d2 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(3);

        d3 = virtualinvoke r6.<net.sourceforge.plantuml.openiconic.Movement: double getArgument(int)>(4);

        r14 = virtualinvoke r7.<net.sourceforge.plantuml.openiconic.SvgPosition: java.awt.geom.Point2D affine(java.awt.geom.AffineTransform)>(r13);

        $d4 = virtualinvoke r13.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d5 = d10 * $d4;

        $d6 = virtualinvoke r13.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d7 = d0 * $d6;

        $d8 = virtualinvoke r14.<java.awt.geom.Point2D: double getX()>();

        $d9 = virtualinvoke r14.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void arcTo(double,double,double,double,double,double,double)>($d5, $d7, d1, d2, d3, $d8, $d9);

        goto label7;

     label5:
        if c0 != 90 goto label6;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void closePath()>();

        goto label7;

     label6:
        $r8 = new java.lang.UnsupportedOperationException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("letter ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label7:
        goto label1;

     label8:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void setOpenIconic(boolean)>(1);

        return $r0;
    }

    public void drawMe(net.sourceforge.plantuml.ugraphic.UGraphic, double)
    {
        net.sourceforge.plantuml.openiconic.SvgPath r0;
        double d0;
        net.sourceforge.plantuml.ugraphic.UPath r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r0 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.openiconic.SvgPath: net.sourceforge.plantuml.ugraphic.UPath toUPath(double,double)>(d0, d0);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r1);

        return;
    }

    public void drawMe(net.sourceforge.plantuml.ugraphic.UGraphic, java.awt.geom.AffineTransform)
    {
        net.sourceforge.plantuml.openiconic.SvgPath r0;
        java.awt.geom.AffineTransform r1;
        net.sourceforge.plantuml.ugraphic.UPath r2;
        net.sourceforge.plantuml.ugraphic.UGraphic r3;

        r0 := @this: net.sourceforge.plantuml.openiconic.SvgPath;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 := @parameter1: java.awt.geom.AffineTransform;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.openiconic.SvgPath: net.sourceforge.plantuml.ugraphic.UPath toUPath(java.awt.geom.AffineTransform)>(r1);

        interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r2);

        return;
    }
}
