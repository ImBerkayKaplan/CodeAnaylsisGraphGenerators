class net.sourceforge.plantuml.graphic.USymbolQueue extends net.sourceforge.plantuml.graphic.USymbol
{
    private final double dx;

    void <init>()
    {
        net.sourceforge.plantuml.graphic.USymbolQueue r0;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbol: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.USymbolQueue: double dx> = 5.0;

        r0.<net.sourceforge.plantuml.graphic.USymbolQueue: double dx> = 5.0;

        return;
    }

    public net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()
    {
        net.sourceforge.plantuml.graphic.SkinParameter $r0;
        net.sourceforge.plantuml.graphic.USymbolQueue r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        $r0 = <net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.graphic.SkinParameter QUEUE>;

        return $r0;
    }

    public net.sourceforge.plantuml.style.SName getSName()
    {
        net.sourceforge.plantuml.style.SName $r0;
        net.sourceforge.plantuml.graphic.USymbolQueue r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        $r0 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName queue>;

        return $r0;
    }

    private void drawQueue(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0, r4;
        double d0, d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r7;
        net.sourceforge.plantuml.graphic.USymbolQueue r3;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r5;
        net.sourceforge.plantuml.ugraphic.UBackground $r6;

        r3 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        d0 := @parameter3: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>(d0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(5.0, 0.0);

        $d2 = d1 - 5.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d2, 0.0);

        $d5 = d3 / 2.0;

        $d4 = d3 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(d1, 0.0, d1, $d5, d1, $d4);

        $d7 = d3 / 2.0;

        $d6 = d1 - 5.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(d1, $d7, d1, d3, $d6, d3);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(5.0, d3);

        $d9 = d3 / 2.0;

        $d8 = d3 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(0.0, d3, 0.0, $d9, 0.0, $d8);

        $d10 = d3 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(0.0, $d10, 0.0, 0.0, 5.0, 0.0);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        r4 = specialinvoke r3.<net.sourceforge.plantuml.graphic.USymbolQueue: net.sourceforge.plantuml.ugraphic.UPath getClosingPath(double,double)>(d1, d3);

        $r5 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r7 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r4);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getClosingPath(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        net.sourceforge.plantuml.graphic.USymbolQueue r2;

        r2 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $d1 = d0 - 5.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>($d1, 0.0);

        $d7 = d0 - 10.0;

        $d6 = d0 - 10.0;

        $d5 = d2 / 2.0;

        $d4 = d0 - 10.0;

        $d3 = d2 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d7, 0.0, $d6, $d5, $d4, $d3);

        $d10 = d0 - 10.0;

        $d9 = d0 - 5.0;

        $d8 = d0 - 5.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d10, d2, $d9, d2, $d8, d2);

        return $r0;
    }

    private net.sourceforge.plantuml.graphic.USymbol$Margin getMargin()
    {
        net.sourceforge.plantuml.graphic.USymbol$Margin $r0;
        net.sourceforge.plantuml.graphic.USymbolQueue r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        $r0 = new net.sourceforge.plantuml.graphic.USymbol$Margin;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.USymbol$Margin: void <init>(double,double,double,double)>(5.0, 15.0, 5.0, 5.0);

        return $r0;
    }

    public net.sourceforge.plantuml.graphic.TextBlock asSmall(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.SymbolContext, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.USymbolQueue$1 $r0;
        net.sourceforge.plantuml.graphic.USymbolQueue r1;
        net.sourceforge.plantuml.graphic.SymbolContext r2;
        net.sourceforge.plantuml.graphic.TextBlock r3, r4, r5;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r6;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r4 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter3: net.sourceforge.plantuml.graphic.SymbolContext;

        r6 := @parameter4: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r0 = new net.sourceforge.plantuml.graphic.USymbolQueue$1;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.USymbolQueue$1: void <init>(net.sourceforge.plantuml.graphic.USymbolQueue,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock)>(r1, r2, r3, r4);

        return $r0;
    }

    public net.sourceforge.plantuml.graphic.TextBlock asBig(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.graphic.TextBlock, double, double, net.sourceforge.plantuml.graphic.SymbolContext, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.USymbolQueue$2 $r0;
        net.sourceforge.plantuml.graphic.USymbolQueue r1;
        net.sourceforge.plantuml.graphic.SymbolContext r2;
        net.sourceforge.plantuml.graphic.TextBlock r3, r4;
        double d0, d1;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r5, r6;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolQueue;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        r2 := @parameter5: net.sourceforge.plantuml.graphic.SymbolContext;

        r6 := @parameter6: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r0 = new net.sourceforge.plantuml.graphic.USymbolQueue$2;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.USymbolQueue$2: void <init>(net.sourceforge.plantuml.graphic.USymbolQueue,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.TextBlock,double,net.sourceforge.plantuml.graphic.TextBlock,double)>(r1, r2, r3, d0, r4, d1);

        return $r0;
    }

    static void access$000(net.sourceforge.plantuml.graphic.USymbolQueue, net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double)
    {
        net.sourceforge.plantuml.graphic.USymbolQueue r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        double d0, d1, d2;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.USymbolQueue;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolQueue: void drawQueue(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double)>(r1, d0, d1, d2);

        return;
    }

    static net.sourceforge.plantuml.graphic.USymbol$Margin access$100(net.sourceforge.plantuml.graphic.USymbolQueue)
    {
        net.sourceforge.plantuml.graphic.USymbolQueue r0;
        net.sourceforge.plantuml.graphic.USymbol$Margin $r1;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.USymbolQueue;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolQueue: net.sourceforge.plantuml.graphic.USymbol$Margin getMargin()>();

        return $r1;
    }
}
