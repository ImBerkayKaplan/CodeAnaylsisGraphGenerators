public class net.sourceforge.plantuml.sequencediagram.Notes extends net.sourceforge.plantuml.sequencediagram.AbstractEvent implements net.sourceforge.plantuml.sequencediagram.Event, java.lang.Iterable
{
    private final java.util.List notes;

    public void <init>(net.sourceforge.plantuml.sequencediagram.Note, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.Notes r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.sequencediagram.Note r2, r4;
        java.util.List $r3, $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Notes;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.Note;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.Note;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.AbstractEvent: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes> = $r1;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        return;
    }

    public void add(net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.Notes r0;
        net.sourceforge.plantuml.sequencediagram.Note r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Notes;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Note;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)
    {
        net.sourceforge.plantuml.sequencediagram.Notes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Note r4;
        net.sourceforge.plantuml.sequencediagram.Participant r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Notes;

        r5 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.Note) $r3;

        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.Note: boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)>(r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        net.sourceforge.plantuml.sequencediagram.Notes r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Notes;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public net.sourceforge.plantuml.sequencediagram.Note get(int)
    {
        net.sourceforge.plantuml.sequencediagram.Notes r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.sequencediagram.Note $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Notes;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (net.sourceforge.plantuml.sequencediagram.Note) $r2;

        return $r3;
    }

    public java.util.List asList()
    {
        net.sourceforge.plantuml.sequencediagram.Notes r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.Notes;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.Notes: java.util.List notes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }
}
