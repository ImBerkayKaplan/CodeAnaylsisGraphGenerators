class net.sourceforge.plantuml.logo.TurtleGraphicsPane extends java.lang.Object
{
    private final double width;
    private final double height;
    private double x;
    private double y;
    private double turtleDirection;
    private boolean penIsDown;
    private boolean showTurtle;
    private net.sourceforge.plantuml.ugraphic.color.HColor penColor;
    private java.util.List lines;
    private java.util.List colors;
    private java.lang.String message;

    public void <init>(int, int)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple $r1;
        java.util.ArrayList $r2, $r3;
        int i0, i1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection> = 90.0;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean penIsDown> = 1;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean showTurtle> = 1;

        $r1 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColorSimple BLACK>;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: net.sourceforge.plantuml.ugraphic.color.HColor penColor> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List lines> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List colors> = $r3;

        $d0 = (double) i0;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double width> = $d0;

        $d1 = (double) i1;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double height> = $d1;

        virtualinvoke r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void clearScreen()>();

        return;
    }

    public void clearScreen()
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        double $d0, $d1, $d2, $d3, $d4;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        $d0 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double width>;

        $d1 = $d0 / 2.0;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double x> = $d1;

        $d2 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double height>;

        $d3 = neg $d2;

        $d4 = $d3 / 2.0;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double y> = $d4;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection> = 90.0;

        $r1 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List lines>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List colors>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }

    private double dtor(double)
    {
        double d0, $d1, $d2;
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        d0 := @parameter0: double;

        $d1 = d0 * 3.141592653589793;

        $d2 = $d1 / 180.0;

        return $d2;
    }

    private void drawTurtle(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.UPolygon $r1;
        double d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, d65, $d66, $d67, $d68;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r4, r5;
        net.sourceforge.plantuml.ugraphic.UGraphic r6, $r7, $r9, $r11;
        net.sourceforge.plantuml.ugraphic.UBackground $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r6 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $z0 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean showTurtle>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        d1 = 4.5 * 2.0;

        $d2 = 0.0 * 2.0;

        $d3 = $d2 - d1;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d3, 0.0);

        $d4 = 0.0 * 2.0;

        $d6 = $d4 - d1;

        $d5 = -2.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d6, $d5);

        $d7 = 1.0 * 2.0;

        $d9 = $d7 - d1;

        $d8 = -2.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d9, $d8);

        $d10 = 1.0 * 2.0;

        $d12 = $d10 - d1;

        $d11 = -4.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d12, $d11);

        $d13 = 2.0 * 2.0;

        $d15 = $d13 - d1;

        $d14 = -4.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d15, $d14);

        $d16 = 2.0 * 2.0;

        $d18 = $d16 - d1;

        $d17 = -6.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d18, $d17);

        $d19 = 3.0 * 2.0;

        $d21 = $d19 - d1;

        $d20 = -6.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d21, $d20);

        $d22 = 3.0 * 2.0;

        $d24 = $d22 - d1;

        $d23 = -8.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d24, $d23);

        $d25 = 4.0 * 2.0;

        $d27 = $d25 - d1;

        $d26 = -8.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d27, $d26);

        $d28 = 4.0 * 2.0;

        $d30 = $d28 - d1;

        $d29 = -9.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d30, $d29);

        $d31 = 5.0 * 2.0;

        $d33 = $d31 - d1;

        $d32 = -9.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d33, $d32);

        $d34 = 5.0 * 2.0;

        $d36 = $d34 - d1;

        $d35 = -8.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d36, $d35);

        $d37 = 6.0 * 2.0;

        $d39 = $d37 - d1;

        $d38 = -8.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d39, $d38);

        $d40 = 6.0 * 2.0;

        $d42 = $d40 - d1;

        $d41 = -6.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d42, $d41);

        $d43 = 7.0 * 2.0;

        $d45 = $d43 - d1;

        $d44 = -6.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d45, $d44);

        $d46 = 7.0 * 2.0;

        $d48 = $d46 - d1;

        $d47 = -4.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d48, $d47);

        $d49 = 8.0 * 2.0;

        $d51 = $d49 - d1;

        $d50 = -4.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d51, $d50);

        $d52 = 8.0 * 2.0;

        $d54 = $d52 - d1;

        $d53 = -2.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d54, $d53);

        $d55 = 9.0 * 2.0;

        $d57 = $d55 - d1;

        $d56 = -2.0 * 2.0;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d57, $d56);

        $d58 = 9.0 * 2.0;

        $d59 = $d58 - d1;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d59, 0.0);

        $d60 = 0.0 * 2.0;

        $d61 = $d60 - d1;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d61, 0.0);

        $d62 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection>;

        $d63 = $d62 - 90.0;

        $d64 = specialinvoke r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double dtor(double)>($d63);

        d65 = neg $d64;

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void rotate(double)>(d65);

        r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(java.lang.String)>("OliveDrab");

        r5 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(java.lang.String)>("MediumSpringGreen");

        $r7 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r4);

        $r8 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r9 = interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d68 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double x>;

        $d66 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double y>;

        $d67 = neg $d66;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d68, $d67);

        $r11 = interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        interfaceinvoke $r11.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r1);

        return;
    }

    public void showTurtle()
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean showTurtle> = 1;

        return;
    }

    public void hideTurtle()
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean showTurtle> = 0;

        return;
    }

    public void setPenColor(net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: net.sourceforge.plantuml.ugraphic.color.HColor penColor> = r1;

        return;
    }

    void addLine(double, double, double, double)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        java.awt.geom.Rectangle2D$Double $r1;
        double d0, d1, d2, d3;
        java.util.List $r2, $r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r2 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List lines>;

        $r1 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r1.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(d0, d1, d2, d3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List colors>;

        $r3 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: net.sourceforge.plantuml.ugraphic.color.HColor penColor>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void forward(double)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        double $d0, d1, d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, d10, $d11, $d12;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        d2 := @parameter0: double;

        $d0 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection>;

        d1 = specialinvoke r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double dtor(double)>($d0);

        $d3 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double x>;

        $d4 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d5 = d2 * $d4;

        d6 = $d3 + $d5;

        $d7 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double y>;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        $d9 = d2 * $d8;

        d10 = $d7 + $d9;

        $z0 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean penIsDown>;

        if $z0 == 0 goto label1;

        $d12 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double x>;

        $d11 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double y>;

        virtualinvoke r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void addLine(double,double,double,double)>($d12, $d11, d6, d10);

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double x> = d6;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double y> = d10;

        goto label2;

     label1:
        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double x> = d6;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double y> = d10;

     label2:
        return;
    }

    public void back(double)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        double d0, $d1;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        d0 := @parameter0: double;

        $d1 = neg d0;

        virtualinvoke r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void forward(double)>($d1);

        return;
    }

    public void left(double)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection> = $d2;

     label1:
        $d3 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection>;

        $b0 = $d3 cmpl 360.0;

        if $b0 <= 0 goto label2;

        $d7 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection>;

        $d8 = $d7 - 360.0;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection> = $d8;

        goto label1;

     label2:
        $d4 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection>;

        $b1 = $d4 cmpg 0.0;

        if $b1 >= 0 goto label3;

        $d5 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection>;

        $d6 = $d5 + 360.0;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double turtleDirection> = $d6;

        goto label2;

     label3:
        return;
    }

    public void right(double)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        double d0, $d1;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        d0 := @parameter0: double;

        $d1 = neg d0;

        virtualinvoke r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void left(double)>($d1);

        return;
    }

    public void penUp()
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean penIsDown> = 0;

        return;
    }

    public void penDown()
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: boolean penIsDown> = 1;

        return;
    }

    public void paint(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        java.util.List $r1, $r13, $r15;
        int i0, i1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r12, $r18, $r20;
        java.lang.String $r3, $r6;
        net.sourceforge.plantuml.ugraphic.UFont $r4;
        java.lang.CharSequence[] $r5;
        net.sourceforge.plantuml.cucadiagram.Display $r7;
        net.sourceforge.plantuml.SpriteContainerEmpty $r8;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r9;
        net.sourceforge.plantuml.graphic.StringBounder $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11, $r19;
        java.lang.Object $r14, $r16;
        net.sourceforge.plantuml.ugraphic.ULine $r17;
        net.sourceforge.plantuml.ugraphic.color.HColor r21;
        java.awt.geom.Rectangle2D$Double r22;
        net.sourceforge.plantuml.graphic.FontConfiguration r24;
        net.sourceforge.plantuml.graphic.TextBlock r25;
        net.sourceforge.plantuml.awt.geom.Dimension2D r26;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List lines>;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r13 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List colors>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i1);

        r21 = (net.sourceforge.plantuml.ugraphic.color.HColor) $r14;

        $r15 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.util.List lines>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i1);

        r22 = (java.awt.geom.Rectangle2D$Double) $r16;

        $r17 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d3 = r22.<java.awt.geom.Rectangle2D$Double: double width>;

        $d2 = r22.<java.awt.geom.Rectangle2D$Double: double x>;

        $d8 = $d3 - $d2;

        $d4 = r22.<java.awt.geom.Rectangle2D$Double: double height>;

        $d6 = neg $d4;

        $d5 = r22.<java.awt.geom.Rectangle2D$Double: double y>;

        $d7 = $d6 + $d5;

        specialinvoke $r17.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>($d8, $d7);

        $r18 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r21);

        $r19 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d11 = r22.<java.awt.geom.Rectangle2D$Double: double x>;

        $d9 = r22.<java.awt.geom.Rectangle2D$Double: double y>;

        $d10 = neg $d9;

        specialinvoke $r19.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d11, $d10);

        $r20 = interfaceinvoke $r18.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r19);

        interfaceinvoke $r20.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r17);

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void drawTurtle(net.sourceforge.plantuml.ugraphic.UGraphic)>(r2);

        $r3 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.lang.String message>;

        if $r3 == null goto label3;

        $r4 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>("", 0, 14);

        r24 = staticinvoke <net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.graphic.FontConfiguration blackBlueTrue(net.sourceforge.plantuml.ugraphic.UFont)>($r4);

        $r5 = newarray (java.lang.CharSequence)[1];

        $r6 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.lang.String message>;

        $r5[0] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r5);

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r8 = new net.sourceforge.plantuml.SpriteContainerEmpty;

        specialinvoke $r8.<net.sourceforge.plantuml.SpriteContainerEmpty: void <init>()>();

        r25 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r24, $r9, $r8);

        $r10 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r26 = interfaceinvoke r25.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r10);

        d12 = virtualinvoke r26.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d0 = r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: double height>;

        $d1 = $d0 - d12;

        $r11 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d1);

        $r12 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        interfaceinvoke r25.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r12);

     label3:
        return;
    }

    public void message(java.lang.String)
    {
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: java.lang.String message> = r1;

        return;
    }
}
