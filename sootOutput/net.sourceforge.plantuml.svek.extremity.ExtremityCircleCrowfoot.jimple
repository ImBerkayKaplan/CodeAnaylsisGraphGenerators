class net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot extends net.sourceforge.plantuml.svek.extremity.Extremity
{
    private final java.awt.geom.Point2D contact;
    private final double angle;
    private final double radius;

    public java.awt.geom.Point2D somePoint()
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        return $r1;
    }

    public void <init>(java.awt.geom.Point2D, double)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot r0;
        java.awt.geom.Point2D$Double $r1;
        java.awt.geom.Point2D r2;
        double $d0, $d1, d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot;

        r2 := @parameter0: java.awt.geom.Point2D;

        d2 := @parameter1: double;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.Extremity: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: double radius> = 4.0;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: double radius> = 4.0;

        $r1 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact> = $r1;

        $d3 = d2 + 1.5707963267948966;

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: double manageround(double)>($d3);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: double angle> = $d4;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        java.awt.geom.AffineTransform r1;
        java.awt.geom.Point2D$Double $r2, $r4, $r6, $r8, $r10;
        net.sourceforge.plantuml.ugraphic.UGraphic r16, $r26;
        java.awt.geom.Point2D $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25;
        net.sourceforge.plantuml.ugraphic.UTranslate $r23;
        net.sourceforge.plantuml.ugraphic.UEllipse $r27;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot;

        r16 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $d0 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: double angle>;

        r1 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double)>($d0);

        $r2 = new java.awt.geom.Point2D$Double;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, 0.0);

        $r4 = new java.awt.geom.Point2D$Double;

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, -6.0);

        $r6 = new java.awt.geom.Point2D$Double;

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>(-8.0, 0.0);

        $r8 = new java.awt.geom.Point2D$Double;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, 6.0);

        $r10 = new java.awt.geom.Point2D$Double;

        specialinvoke $r10.<java.awt.geom.Point2D$Double: void <init>(double,double)>(-14.0, 0.0);

        virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r4, $r4);

        virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r6, $r6);

        virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r8, $r8);

        virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r10, $r10);

        $r17 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d1 = virtualinvoke $r17.<java.awt.geom.Point2D: double getX()>();

        $r18 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d2 = virtualinvoke $r18.<java.awt.geom.Point2D: double getY()>();

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r16, $d1, $d2, $r6, $r4);

        $r19 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d3 = virtualinvoke $r19.<java.awt.geom.Point2D: double getX()>();

        $r20 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d4 = virtualinvoke $r20.<java.awt.geom.Point2D: double getY()>();

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r16, $d3, $d4, $r6, $r8);

        $r21 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d5 = virtualinvoke $r21.<java.awt.geom.Point2D: double getX()>();

        $r22 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d6 = virtualinvoke $r22.<java.awt.geom.Point2D: double getY()>();

        staticinvoke <net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r16, $d5, $d6, $r6, $r2);

        $r23 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $r24 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d7 = virtualinvoke $r24.<java.awt.geom.Point2D: double getX()>();

        $d8 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d9 = $d7 + $d8;

        $d10 = $d9 - 4.0;

        $r25 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot: java.awt.geom.Point2D contact>;

        $d11 = virtualinvoke $r25.<java.awt.geom.Point2D: double getY()>();

        $d12 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        $d13 = $d11 + $d12;

        $d14 = $d13 - 4.0;

        specialinvoke $r23.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d10, $d14);

        $r26 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r23);

        $r27 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r27.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(8.0, 8.0);

        interfaceinvoke $r26.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r27);

        return;
    }

    private static void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, d8, $d9, $d10, $d11;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.ULine $r5;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d6 := @parameter1: double;

        d8 := @parameter2: double;

        r1 := @parameter3: java.awt.geom.Point2D;

        r0 := @parameter4: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d5 = $d3 - $d4;

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d7 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d9 = d6 + $d7;

        $d10 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d11 = d8 + $d10;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d9, $d11);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = new net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(d2, d5);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        return;
    }
}
