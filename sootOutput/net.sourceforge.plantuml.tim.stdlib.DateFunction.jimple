public class net.sourceforge.plantuml.tim.stdlib.DateFunction extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.DateFunction r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.DateFunction;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.DateFunction r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.DateFunction;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%date", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.DateFunction r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.DateFunction;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        int $i0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2, $r7, $r10;
        java.lang.String r3, $r6, $r9;
        java.text.SimpleDateFormat $r4;
        java.util.Date $r5, $r8;
        java.lang.Exception $r11;
        net.sourceforge.plantuml.tim.EaterException $r13;
        net.sourceforge.plantuml.tim.stdlib.DateFunction r14;
        net.sourceforge.plantuml.tim.TContext r15;
        net.sourceforge.plantuml.tim.TMemory r16;
        net.sourceforge.plantuml.LineLocation r17;
        java.util.Map r18;

        r14 := @this: net.sourceforge.plantuml.tim.stdlib.DateFunction;

        r15 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r16 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r17 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r18 := @parameter4: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>()>();

        $r9 = virtualinvoke $r8.<java.util.Date: java.lang.String toString()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>($r9);

        return $r10;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

     label2:
        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r3);

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        $r6 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r5);

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>($r6);

     label3:
        return $r7;

     label4:
        $r11 := @caughtexception;

        $r13 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("Bad date pattern");

        throw $r13;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
