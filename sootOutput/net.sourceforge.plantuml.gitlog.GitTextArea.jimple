public class net.sourceforge.plantuml.gitlog.GitTextArea extends java.lang.Object
{
    private final java.util.List lines;
    private final java.util.List commits;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.gitlog.GitTextArea r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.gitlog.GitTextArea;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List lines> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List commits> = $r2;

        return;
    }

    public void add(java.lang.String)
    {
        net.sourceforge.plantuml.gitlog.GitTextArea r0;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.gitlog.GitTextArea;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List lines>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getAllCommits()
    {
        net.sourceforge.plantuml.gitlog.GitTextArea r0;
        java.util.List $r1, $r2, $r3, $r4, $r5, $r11;
        int $i0, $i1, i2, i3;
        java.lang.Object $r6;
        java.lang.String r7, r8;
        boolean $z0, $z2, $z3;
        net.sourceforge.plantuml.gitlog.Commit $r9;
        net.sourceforge.plantuml.gitlog.CursorPosition $r10;
        java.lang.AssertionError $r12;

        r0 := @this: net.sourceforge.plantuml.gitlog.GitTextArea;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List commits>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label9;

        i3 = 0;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List lines>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i3 >= $i1 goto label9;

        $r5 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List lines>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        r7 = (java.lang.String) $r6;

        r8 = staticinvoke <net.sourceforge.plantuml.gitlog.CursorPosition: java.lang.String getCommitNameInLine(java.lang.String)>(r7);

        i2 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String)>("*");

        $z0 = <net.sourceforge.plantuml.gitlog.GitTextArea: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        if r8 != null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if i2 != -1 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z2 == $z3 goto label6;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label6:
        if i2 != -1 goto label7;

        goto label8;

     label7:
        $r11 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List commits>;

        $r9 = new net.sourceforge.plantuml.gitlog.Commit;

        $r10 = new net.sourceforge.plantuml.gitlog.CursorPosition;

        specialinvoke $r10.<net.sourceforge.plantuml.gitlog.CursorPosition: void <init>(net.sourceforge.plantuml.gitlog.GitTextArea,int,int)>(r0, i2, i3);

        specialinvoke $r9.<net.sourceforge.plantuml.gitlog.Commit: void <init>(java.lang.String,net.sourceforge.plantuml.gitlog.CursorPosition)>(r8, $r10);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r9);

     label8:
        i3 = i3 + 1;

        goto label1;

     label9:
        $r2 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List commits>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;
    }

    public char charAt(int, int)
    {
        net.sourceforge.plantuml.gitlog.GitTextArea r0;
        int i0, i1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        char $c2;

        r0 := @this: net.sourceforge.plantuml.gitlog.GitTextArea;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List lines>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i1);

        return $c2;
    }

    public java.lang.String getLine(int)
    {
        int i0, $i1;
        net.sourceforge.plantuml.gitlog.GitTextArea r0;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: net.sourceforge.plantuml.gitlog.GitTextArea;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List lines>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        return "";

     label1:
        $r2 = r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List lines>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public net.sourceforge.plantuml.gitlog.Commit getCommitByName(java.lang.String)
    {
        net.sourceforge.plantuml.gitlog.GitTextArea r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.gitlog.Commit r4;
        java.lang.String $r5, r6;

        r0 := @this: net.sourceforge.plantuml.gitlog.GitTextArea;

        r6 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.gitlog.GitTextArea: java.util.List getAllCommits()>();

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.gitlog.Commit) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/gitlog/GitTextArea;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.gitlog.GitTextArea: boolean $assertionsDisabled> = $z1;

        return;
    }
}
