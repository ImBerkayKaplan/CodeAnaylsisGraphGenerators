public class net.sourceforge.plantuml.hcl.HclParser extends java.lang.Object
{
    private final java.util.List terms;

    public void <init>(java.lang.Iterable)
    {
        net.sourceforge.plantuml.hcl.HclParser r0;
        java.util.ArrayList $r1;
        java.lang.Iterable r2;
        java.util.Iterator $r3;

        r0 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r2 := @parameter0: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.hcl.HclParser: java.util.List terms> = $r1;

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        specialinvoke r0.<net.sourceforge.plantuml.hcl.HclParser: void parse(java.util.Iterator)>($r3);

        return;
    }

    public net.sourceforge.plantuml.json.JsonObject parseMe()
    {
        java.util.LinkedHashMap $r0;
        net.sourceforge.plantuml.hcl.HclParser r2;
        java.util.List $r3;
        java.util.Iterator r4, r8, $r17;
        boolean $z0, $z1;
        int $i0;
        net.sourceforge.plantuml.json.JsonObject $r5, $r19;
        java.util.Set $r7;
        java.lang.Object $r9, $r11, $r13, $r18;
        java.util.Map$Entry r10;
        java.lang.String $r12;
        net.sourceforge.plantuml.json.JsonValue $r14;
        java.util.Collection $r16;
        java.util.Map $r20;

        r2 := @this: net.sourceforge.plantuml.hcl.HclParser;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.hcl.HclParser: java.util.List terms>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r20 = specialinvoke r2.<net.sourceforge.plantuml.hcl.HclParser: java.util.Map getModuleOrSomething(java.util.Iterator)>(r4);

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r20);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        if $i0 != 1 goto label3;

        $r16 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        $r17 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (net.sourceforge.plantuml.json.JsonObject) $r18;

        return $r19;

     label3:
        $r5 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r5.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        $r7 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (net.sourceforge.plantuml.json.JsonValue) $r13;

        virtualinvoke $r5.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>($r12, $r14);

        goto label4;

     label5:
        return $r5;
    }

    private java.util.Map getModuleOrSomething(java.util.Iterator)
    {
        java.lang.StringBuilder $r0, $r15, $r17, $r18, $r21, $r22, $r24, $r25;
        java.util.Iterator r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.hcl.HclTerm r4;
        net.sourceforge.plantuml.hcl.SymbolType $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9, $r10, $r11, $r16, $r19, $r23, $r26;
        net.sourceforge.plantuml.hcl.HclParser r12;
        net.sourceforge.plantuml.json.JsonObject $r13;
        java.util.Map $r14;

        r12 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r2 := @parameter0: java.util.Iterator;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.hcl.HclTerm) $r3;

        $r5 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED>;

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r5);

        if $z0 == 0 goto label2;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r23 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String getData()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        goto label5;

     label2:
        $r6 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_SIMPLE>;

        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r6);

        if $z1 == 0 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String getData()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        goto label5;

     label3:
        $r7 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_OPEN>;

        $z2 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r7);

        if $z2 == 0 goto label4;

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $r13 = specialinvoke r12.<net.sourceforge.plantuml.hcl.HclParser: net.sourceforge.plantuml.json.JsonObject getBracketData(java.util.Iterator)>(r2);

        $r14 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r11, $r13);

        return $r14;

     label4:
        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        goto label1;
    }

    private net.sourceforge.plantuml.json.JsonValue getFunctionData(java.lang.String, java.util.Iterator)
    {
        net.sourceforge.plantuml.json.JsonArray $r0, $r13;
        java.util.Iterator r2;
        java.lang.Object $r3, r7;
        net.sourceforge.plantuml.hcl.SymbolType $r4, $r17, $r19;
        net.sourceforge.plantuml.hcl.HclTerm $r5, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        net.sourceforge.plantuml.hcl.HclParser r6;
        java.lang.IllegalStateException $r8, $r34;
        net.sourceforge.plantuml.json.JsonString $r9;
        net.sourceforge.plantuml.json.JsonObject $r11, $r21;
        java.lang.String $r15, r24, $r27, $r32;
        int $i0;
        java.lang.StringBuilder $r23, $r25, $r26, $r29, $r30, $r31;
        net.sourceforge.plantuml.json.JsonValue $r33;

        r6 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r24 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Iterator;

        $r0 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (net.sourceforge.plantuml.hcl.HclTerm) $r3;

        $r4 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_OPEN>;

        $z0 = virtualinvoke $r5.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r4);

        if $z0 != 0 goto label1;

        $r34 = new java.lang.IllegalStateException;

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>()>();

        throw $r34;

     label1:
        r7 = specialinvoke r6.<net.sourceforge.plantuml.hcl.HclParser: java.lang.Object getValue(java.util.Iterator)>(r2);

        $z8 = r7 instanceof net.sourceforge.plantuml.hcl.HclTerm;

        if $z8 == 0 goto label3;

        $r20 = (net.sourceforge.plantuml.hcl.HclTerm) r7;

        $r19 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_CLOSE>;

        $z7 = virtualinvoke $r20.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r19);

        if $z7 == 0 goto label3;

        $i0 = virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: int size()>();

        if $i0 != 0 goto label2;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue value(java.lang.String)>($r32);

        return $r33;

     label2:
        $r21 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r21.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>($r27, $r0);

        return $r21;

     label3:
        $z1 = r7 instanceof net.sourceforge.plantuml.hcl.HclTerm;

        if $z1 == 0 goto label4;

        $r18 = (net.sourceforge.plantuml.hcl.HclTerm) r7;

        $r17 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType COMMA>;

        $z6 = virtualinvoke $r18.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r17);

        if $z6 == 0 goto label4;

        goto label1;

     label4:
        $z2 = r7 instanceof java.lang.String;

        if $z2 == 0 goto label5;

        $r15 = (java.lang.String) r7;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(java.lang.String)>($r15);

        goto label9;

     label5:
        $z3 = r7 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z3 == 0 goto label6;

        $r13 = (net.sourceforge.plantuml.json.JsonArray) r7;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r13);

        goto label9;

     label6:
        $z4 = r7 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z4 == 0 goto label7;

        $r11 = (net.sourceforge.plantuml.json.JsonObject) r7;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r11);

        goto label9;

     label7:
        $z5 = r7 instanceof net.sourceforge.plantuml.json.JsonString;

        if $z5 == 0 goto label8;

        $r9 = (net.sourceforge.plantuml.json.JsonString) r7;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r9);

        goto label9;

     label8:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label9:
        goto label1;
    }

    private net.sourceforge.plantuml.json.JsonObject getBracketData(java.util.Iterator)
    {
        net.sourceforge.plantuml.json.JsonObject $r0, $r17;
        java.util.Iterator r2;
        java.lang.Object $r3, $r8, r13;
        net.sourceforge.plantuml.hcl.HclTerm r4, r9;
        net.sourceforge.plantuml.hcl.SymbolType $r5, $r6, $r10, $r11, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String r7, $r21, $r24, $r27;
        net.sourceforge.plantuml.hcl.HclParser r12;
        java.lang.IllegalStateException $r14, $r23, $r26;
        net.sourceforge.plantuml.json.JsonString $r15;
        net.sourceforge.plantuml.json.JsonArray $r19;

        r12 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r2 := @parameter0: java.util.Iterator;

        $r0 = new net.sourceforge.plantuml.json.JsonObject;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonObject: void <init>()>();

     label01:
        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.hcl.HclTerm) $r3;

        $r5 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_CLOSE>;

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r5);

        if $z0 == 0 goto label02;

        return $r0;

     label02:
        $r6 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_SIMPLE>;

        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r6);

        if $z1 != 0 goto label03;

        $r25 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED>;

        $z7 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r25);

        if $z7 == 0 goto label10;

     label03:
        r7 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String getData()>();

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.hcl.HclTerm) $r8;

        $r11 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType EQUALS>;

        $r10 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType TWO_POINTS>;

        $z2 = virtualinvoke r9.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType,net.sourceforge.plantuml.hcl.SymbolType)>($r11, $r10);

        if $z2 != 0 goto label04;

        $r23 = new java.lang.IllegalStateException;

        $r24 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label04:
        r13 = specialinvoke r12.<net.sourceforge.plantuml.hcl.HclParser: java.lang.Object getValue(java.util.Iterator)>(r2);

        $z3 = r13 instanceof java.lang.String;

        if $z3 == 0 goto label05;

        $r21 = (java.lang.String) r13;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,java.lang.String)>(r7, $r21);

        goto label09;

     label05:
        $z4 = r13 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z4 == 0 goto label06;

        $r19 = (net.sourceforge.plantuml.json.JsonArray) r13;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r7, $r19);

        goto label09;

     label06:
        $z5 = r13 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z5 == 0 goto label07;

        $r17 = (net.sourceforge.plantuml.json.JsonObject) r13;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r7, $r17);

        goto label09;

     label07:
        $z6 = r13 instanceof net.sourceforge.plantuml.json.JsonString;

        if $z6 == 0 goto label08;

        $r15 = (net.sourceforge.plantuml.json.JsonString) r13;

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonObject add(java.lang.String,net.sourceforge.plantuml.json.JsonValue)>(r7, $r15);

        goto label09;

     label08:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>()>();

        throw $r14;

     label09:
        goto label11;

     label10:
        $r26 = new java.lang.IllegalStateException;

        $r27 = virtualinvoke r4.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label11:
        goto label01;
    }

    private java.lang.Object getValue(java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.Object $r1, $r16;
        net.sourceforge.plantuml.hcl.HclTerm r2;
        net.sourceforge.plantuml.hcl.SymbolType $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r10;
        java.lang.String $r11, $r13, $r17, $r18;
        net.sourceforge.plantuml.hcl.HclParser r12;
        net.sourceforge.plantuml.json.JsonValue $r14;
        net.sourceforge.plantuml.json.JsonObject $r15;

        r12 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r0 := @parameter0: java.util.Iterator;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (net.sourceforge.plantuml.hcl.HclTerm) $r1;

        $r4 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType COMMA>;

        $r3 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_CLOSE>;

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType,net.sourceforge.plantuml.hcl.SymbolType)>($r4, $r3);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r5 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED>;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r5);

        if $z1 == 0 goto label2;

        $r18 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String getData()>();

        return $r18;

     label2:
        $r6 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_SIMPLE>;

        $z2 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r6);

        if $z2 == 0 goto label3;

        $r17 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String getData()>();

        return $r17;

     label3:
        $r7 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_OPEN>;

        $z3 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r7);

        if $z3 == 0 goto label4;

        $r16 = specialinvoke r12.<net.sourceforge.plantuml.hcl.HclParser: java.lang.Object getArray(java.util.Iterator)>(r0);

        return $r16;

     label4:
        $r8 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_OPEN>;

        $z4 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r8);

        if $z4 == 0 goto label5;

        $r15 = specialinvoke r12.<net.sourceforge.plantuml.hcl.HclParser: net.sourceforge.plantuml.json.JsonObject getBracketData(java.util.Iterator)>(r0);

        return $r15;

     label5:
        $r9 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType FUNCTION_NAME>;

        $z5 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r9);

        if $z5 == 0 goto label6;

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String getData()>();

        $r14 = specialinvoke r12.<net.sourceforge.plantuml.hcl.HclParser: net.sourceforge.plantuml.json.JsonValue getFunctionData(java.lang.String,java.util.Iterator)>($r13, r0);

        return $r14;

     label6:
        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke r2.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    private java.lang.Object getArray(java.util.Iterator)
    {
        net.sourceforge.plantuml.json.JsonArray $r0;
        java.util.Iterator r2;
        net.sourceforge.plantuml.hcl.HclTerm r3;
        net.sourceforge.plantuml.hcl.SymbolType $r4, $r5, $r6, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r7;
        net.sourceforge.plantuml.hcl.HclParser r9;
        net.sourceforge.plantuml.json.JsonObject $r10;
        java.lang.Object $r12;

        r9 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r2 := @parameter0: java.util.Iterator;

        $r0 = new net.sourceforge.plantuml.json.JsonArray;

        specialinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: void <init>()>();

     label1:
        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.hcl.HclTerm) $r12;

        $r13 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_OPEN>;

        $z3 = virtualinvoke r3.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r13);

        if $z3 == 0 goto label2;

        $r10 = specialinvoke r9.<net.sourceforge.plantuml.hcl.HclParser: net.sourceforge.plantuml.json.JsonObject getBracketData(java.util.Iterator)>(r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(net.sourceforge.plantuml.json.JsonValue)>($r10);

     label2:
        $r4 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_CLOSE>;

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r4);

        if $z0 == 0 goto label3;

        return $r0;

     label3:
        $r5 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType COMMA>;

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r5);

        if $z1 == 0 goto label4;

        goto label1;

     label4:
        $r6 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED>;

        $z2 = virtualinvoke r3.<net.sourceforge.plantuml.hcl.HclTerm: boolean is(net.sourceforge.plantuml.hcl.SymbolType)>($r6);

        if $z2 == 0 goto label5;

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.hcl.HclTerm: java.lang.String getData()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonArray add(java.lang.String)>($r7);

     label5:
        goto label1;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.hcl.HclParser r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.hcl.HclParser;

        $r1 = r0.<net.sourceforge.plantuml.hcl.HclParser: java.util.List terms>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    private void parse(java.util.Iterator)
    {
        java.lang.StringBuilder $r0;
        java.util.Iterator r2;
        java.lang.Object $r3;
        java.lang.Character $r4;
        char c0;
        net.sourceforge.plantuml.hcl.HclParser r5;
        net.sourceforge.plantuml.hcl.SymbolType r6, $r7, $r11, $r17, $r21, $r24;
        java.lang.String r9, $r18, $r22;
        net.sourceforge.plantuml.hcl.HclTerm $r10, $r13, $r15, $r19;
        java.util.List $r12, $r14, $r16, $r20;
        int $i1, $i2;
        java.lang.IllegalArgumentException $r23;
        boolean $z4;

        r5 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r2 := @parameter0: java.util.Iterator;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Character) $r3;

        c0 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        r6 = specialinvoke r5.<net.sourceforge.plantuml.hcl.HclParser: net.sourceforge.plantuml.hcl.SymbolType getType(char)>(c0);

        $r7 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_OPEN>;

        if r6 != $r7 goto label3;

        $i2 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i2 != 0 goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r23;

     label2:
        $r20 = r5.<net.sourceforge.plantuml.hcl.HclParser: java.util.List terms>;

        $r19 = new net.sourceforge.plantuml.hcl.HclTerm;

        $r21 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType FUNCTION_NAME>;

        $r22 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<net.sourceforge.plantuml.hcl.HclTerm: void <init>(net.sourceforge.plantuml.hcl.SymbolType,java.lang.String)>($r21, $r22);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r19);

        virtualinvoke $r0.<java.lang.StringBuilder: void setLength(int)>(0);

        goto label4;

     label3:
        if r6 == null goto label4;

        $i1 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label4;

        $r16 = r5.<net.sourceforge.plantuml.hcl.HclParser: java.util.List terms>;

        $r15 = new net.sourceforge.plantuml.hcl.HclTerm;

        $r17 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_SIMPLE>;

        $r18 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<net.sourceforge.plantuml.hcl.HclTerm: void <init>(net.sourceforge.plantuml.hcl.SymbolType,java.lang.String)>($r17, $r18);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r15);

        virtualinvoke $r0.<java.lang.StringBuilder: void setLength(int)>(0);

     label4:
        $r24 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SPACE>;

        if r6 != $r24 goto label5;

        goto label1;

     label5:
        if r6 == null goto label6;

        $r14 = r5.<net.sourceforge.plantuml.hcl.HclParser: java.util.List terms>;

        $r13 = new net.sourceforge.plantuml.hcl.HclTerm;

        specialinvoke $r13.<net.sourceforge.plantuml.hcl.HclTerm: void <init>(net.sourceforge.plantuml.hcl.SymbolType)>(r6);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label1;

     label6:
        if c0 != 34 goto label7;

        r9 = specialinvoke r5.<net.sourceforge.plantuml.hcl.HclParser: java.lang.String eatUntilDoubleQuote(java.util.Iterator)>(r2);

        $r12 = r5.<net.sourceforge.plantuml.hcl.HclParser: java.util.List terms>;

        $r10 = new net.sourceforge.plantuml.hcl.HclTerm;

        $r11 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED>;

        specialinvoke $r10.<net.sourceforge.plantuml.hcl.HclTerm: void <init>(net.sourceforge.plantuml.hcl.SymbolType,java.lang.String)>($r11, r9);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label7:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label1;

     label8:
        return;
    }

    private java.lang.String eatUntilDoubleQuote(java.util.Iterator)
    {
        java.lang.StringBuilder $r0;
        java.util.Iterator r2;
        java.lang.String $r3, $r7;
        java.lang.Object $r4, $r8;
        java.lang.Character $r5;
        char c0;
        net.sourceforge.plantuml.hcl.HclParser r10;
        boolean $z0;

        r10 := @this: net.sourceforge.plantuml.hcl.HclParser;

        r2 := @parameter0: java.util.Iterator;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Character) $r4;

        c0 = virtualinvoke $r5.<java.lang.Character: char charValue()>();

        if c0 != 92 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        goto label1;

     label2:
        if c0 != 34 goto label3;

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label1;

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private net.sourceforge.plantuml.hcl.SymbolType getType(char)
    {
        char c0;
        boolean $z0;
        net.sourceforge.plantuml.hcl.SymbolType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        net.sourceforge.plantuml.hcl.HclParser r10;

        r10 := @this: net.sourceforge.plantuml.hcl.HclParser;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>(c0);

        if $z0 == 0 goto label01;

        $r9 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SPACE>;

        return $r9;

     label01:
        if c0 != 123 goto label02;

        $r8 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_OPEN>;

        return $r8;

     label02:
        if c0 != 125 goto label03;

        $r7 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_CLOSE>;

        return $r7;

     label03:
        if c0 != 91 goto label04;

        $r6 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_OPEN>;

        return $r6;

     label04:
        if c0 != 93 goto label05;

        $r5 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_CLOSE>;

        return $r5;

     label05:
        if c0 != 40 goto label06;

        $r4 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_OPEN>;

        return $r4;

     label06:
        if c0 != 41 goto label07;

        $r3 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_CLOSE>;

        return $r3;

     label07:
        if c0 != 61 goto label08;

        $r2 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType EQUALS>;

        return $r2;

     label08:
        if c0 != 44 goto label09;

        $r1 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType COMMA>;

        return $r1;

     label09:
        if c0 != 58 goto label10;

        $r0 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType TWO_POINTS>;

        return $r0;

     label10:
        return null;
    }
}
