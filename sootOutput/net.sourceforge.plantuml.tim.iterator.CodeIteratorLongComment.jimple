public class net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment extends net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator
{
    private final java.util.List logs;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator, java.util.List)
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment r0;
        net.sourceforge.plantuml.tim.iterator.CodeIterator r1;
        java.util.List r2;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment;

        r1 := @parameter0: net.sourceforge.plantuml.tim.iterator.CodeIterator;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator)>(r1);

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: java.util.List logs> = r2;

        return;
    }

    public net.sourceforge.plantuml.StringLocated peek() throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment r0;
        net.sourceforge.plantuml.tim.iterator.CodeIterator $r1, $r3, $r7, $r9, $r12, $r16, $r24, $r25, $r28;
        net.sourceforge.plantuml.StringLocated $r2, $r4, $r8, $r11, $r13, $r17, $r18, $r21, $r26, $r29;
        net.sourceforge.plantuml.tim.TLineType $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r10, $r23;
        java.lang.String $r14, $r19, $r22;
        java.lang.AssertionError $r15, $r20;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r6 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_LONG_START>;

        if $r5 == $r6 goto label3;

        $r25 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        return $r26;

     label3:
        $r7 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if $r8 == null goto label4;

        $r21 = virtualinvoke $r8.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z4 = virtualinvoke $r22.<java.lang.String: boolean endsWith(java.lang.String)>("\'/");

        if $z4 != 0 goto label4;

        $r23 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: java.util.List logs>;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r24 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        interfaceinvoke $r24.<net.sourceforge.plantuml.tim.iterator.CodeIterator: void next()>();

        goto label3;

     label4:
        $z0 = <net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $r16 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if $r17 == null goto label5;

        $r18 = virtualinvoke $r8.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r19 = virtualinvoke $r18.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean endsWith(java.lang.String)>("\'/");

        if $z3 != 0 goto label5;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label5:
        $r28 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r29 = interfaceinvoke $r28.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if $r29 == null goto label7;

        $z1 = <net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $r13 = virtualinvoke $r8.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>("\'/");

        if $z2 != 0 goto label6;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label6:
        $r10 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: java.util.List logs>;

        $r9 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        $r11 = interfaceinvoke $r9.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        interfaceinvoke $r12.<net.sourceforge.plantuml.tim.iterator.CodeIterator: void next()>();

     label7:
        goto label1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/iterator/CodeIteratorLongComment;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: boolean $assertionsDisabled> = $z1;

        return;
    }
}
