public class net.sourceforge.plantuml.version.Version extends java.lang.Object
{
    private static final int MAJOR_SEPARATOR;

    public void <init>()
    {
        net.sourceforge.plantuml.version.Version r0;

        r0 := @this: net.sourceforge.plantuml.version.Version;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int version()
    {
        return 1202201;
    }

    public static int versionPatched()
    {
        int $i0, $i1, $i2, $i3;

        $i0 = staticinvoke <net.sourceforge.plantuml.version.Version: int beta()>();

        if $i0 == 0 goto label1;

        $i2 = staticinvoke <net.sourceforge.plantuml.version.Version: int version()>();

        $i3 = $i2 + 1;

        return $i3;

     label1:
        $i1 = staticinvoke <net.sourceforge.plantuml.version.Version: int version()>();

        return $i1;
    }

    public static java.lang.String versionString()
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r0, $r2, $r6;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;

        $i0 = staticinvoke <net.sourceforge.plantuml.version.Version: int beta()>();

        if $i0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i2 = staticinvoke <net.sourceforge.plantuml.version.Version: int version()>();

        $i3 = $i2 + 1;

        $r2 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String dotted(int)>($i3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("beta");

        $i4 = staticinvoke <net.sourceforge.plantuml.version.Version: int beta()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label1:
        $i1 = staticinvoke <net.sourceforge.plantuml.version.Version: int version()>();

        $r0 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String dotted(int)>($i1);

        return $r0;
    }

    public static java.lang.String fullDescription()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PlantUML version ");

        $r2 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String compileTimeString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static java.lang.String dotted(int)
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r15;
        int i0, $i1, $i2, $i3;
        java.lang.String r3, r7, $r11, $r14, $r16;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i1 = i0 % 1000000;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i2 = i0 / 1000000;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r14 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(4);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public static java.lang.String versionString(int)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r3;
        int $i0, i1;

        i1 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        $r1 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

     label1:
        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 >= i1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static int beta()
    {
        return 6;
    }

    public static java.lang.String etag()
    {
        java.lang.StringBuilder $r0, $r2, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r3, $r5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = staticinvoke <net.sourceforge.plantuml.version.Version: int version()>();

        $i1 = $i0 % 1000000;

        $i2 = $i1 - 201670;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i2, 36);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i3 = staticinvoke <net.sourceforge.plantuml.version.Version: int beta()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i3, 36);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String turningId()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String etag()>();

        return $r0;
    }

    public static long compileTime()
    {
        return 1643739598174L;
    }

    public static java.lang.String compileTimeString()
    {
        int $i0;
        java.util.Date $r0;
        long $l1;
        java.lang.String $r1;

        $i0 = staticinvoke <net.sourceforge.plantuml.version.Version: int beta()>();

        if $i0 == 0 goto label1;

        return "Unknown compile time";

     label1:
        $r0 = new java.util.Date;

        $l1 = staticinvoke <net.sourceforge.plantuml.version.Version: long compileTime()>();

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l1);

        $r1 = virtualinvoke $r0.<java.util.Date: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String getJarPath()
    {
        java.lang.Class $r0;
        java.net.URL $r1;
        net.sourceforge.plantuml.security.SURL r2;
        java.lang.Throwable $r3;
        java.lang.String $r4, r6, r7;
        java.lang.ClassLoader r5;

     label1:
        $r0 = class "Lnet/sourceforge/plantuml/version/Version;";

        r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r5 != null goto label3;

     label2:
        return "No ClassLoader?";

     label3:
        $r1 = virtualinvoke r5.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("net/sourceforge/plantuml/version/Version.class");

        r2 = staticinvoke <net.sourceforge.plantuml.security.SURL: net.sourceforge.plantuml.security.SURL create(java.net.URL)>($r1);

        if r2 != null goto label5;

     label4:
        return "No URL?";

     label5:
        r6 = virtualinvoke r2.<net.sourceforge.plantuml.security.SURL: java.lang.String toString()>();

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("net/sourceforge/plantuml/version/Version\\.class", "");

     label6:
        return r7;

     label7:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

        $r4 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String toString()>();

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.version.Version: int MAJOR_SEPARATOR> = 1000000;

        return;
    }
}
