public class net.sourceforge.plantuml.timingdiagram.PlayerAnalog extends net.sourceforge.plantuml.timingdiagram.Player
{
    private final java.util.SortedMap values;
    private final double ymargin;
    private java.lang.Double initialState;
    private java.lang.Double start;
    private java.lang.Double end;
    private java.lang.Integer ticksEvery;

    public void <init>(java.lang.String, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.timingdiagram.TimingRuler, boolean)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.lang.String r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.timingdiagram.TimingRuler r3;
        boolean z0;
        java.util.TreeMap $r4;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.timingdiagram.TimingRuler;

        z0 := @parameter3: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.Player: void <init>(java.lang.String,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.timingdiagram.TimingRuler,boolean)>(r1, r2, r3, z0);

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double ymargin> = 8.0;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.util.SortedMap values> = $r4;

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double ymargin> = 8.0;

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: int suggestedHeight> = 100;

        return;
    }

    private double getMin()
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.lang.Double $r1, $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double start>;

        if $r1 == null goto label1;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double start>;

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        return $d0;

     label1:
        return 0.0;
    }

    private double getMax()
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.lang.Double $r1, r6, $r7;
        java.util.SortedMap $r2;
        java.util.Collection $r3;
        java.util.Iterator r4;
        boolean $z0;
        byte $b0;
        java.lang.Object $r5;
        double $d0, $d1, d2;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double end>;

        if $r1 == null goto label1;

        $r7 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double end>;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        return $d1;

     label1:
        d2 = 0.0;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.util.SortedMap values>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Double) $r5;

        $d0 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>(d2, $d0);

        goto label2;

     label3:
        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label4;

        return 10.0;

     label4:
        return d2;
    }

    public double getFullHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        int $i0;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $i0 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: int suggestedHeight>;

        $d0 = (double) $i0;

        return $d0;
    }

    protected net.sourceforge.plantuml.graphic.SymbolContext getContextLegacy()
    {
        net.sourceforge.plantuml.graphic.SymbolContext $r0, $r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, $r2;
        net.sourceforge.plantuml.ugraphic.UStroke $r3;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r5;

        r5 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r0 = new net.sourceforge.plantuml.graphic.SymbolContext;

        $r2 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor COL_D7E0F2>;

        $r1 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor COL_038048>;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>($r2, $r1);

        $r3 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        $r4 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withStroke(net.sourceforge.plantuml.ugraphic.UStroke)>($r3);

        return $r4;
    }

    public net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint getTimeProjection(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.timingdiagram.TimeTick)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        net.sourceforge.plantuml.timingdiagram.TimeTick r1;
        net.sourceforge.plantuml.timingdiagram.TimingRuler $r2;
        double d0, d1, $d2, $d3;
        net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint $r3;
        java.awt.geom.Point2D$Double $r4, $r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.timingdiagram.TimingRuler: double getPosInPixel(net.sourceforge.plantuml.timingdiagram.TimeTick)>(r1);

        d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getValueAt(net.sourceforge.plantuml.timingdiagram.TimeTick)>(r1);

        $r3 = new net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint;

        $r4 = new java.awt.geom.Point2D$Double;

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getYpos(double)>(d1);

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, $d2);

        $r5 = new java.awt.geom.Point2D$Double;

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getYpos(double)>(d1);

        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, $d3);

        specialinvoke $r3.<net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r4, $r5);

        return $r3;
    }

    private double getValueAt(net.sourceforge.plantuml.timingdiagram.TimeTick)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        net.sourceforge.plantuml.timingdiagram.TimeTick r1, $r13, $r17, $r22;
        java.util.SortedMap $r2, $r5;
        java.lang.Object $r3, $r8, $r10, $r12, $r14, $r16, $r19, $r21;
        java.lang.Double r4, $r9, $r15, $r20;
        java.util.Set $r6;
        java.util.Iterator r7;
        boolean $z0;
        double $d0, d1, d2, d3, d4, $d5, $d6, $d7, d8, $d9, $d10, $d11, $d12;
        java.util.Map$Entry r11, r25;
        int $i0;
        java.math.BigDecimal $r18, $r23, $r24;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r1 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeTick;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.util.SortedMap values>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Double) $r3;

        if r4 == null goto label1;

        $d12 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        return $d12;

     label1:
        r25 = null;

        $r5 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.util.SortedMap values>;

        $r6 = interfaceinvoke $r5.<java.util.SortedMap: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (net.sourceforge.plantuml.timingdiagram.TimeTick) $r12;

        $i0 = virtualinvoke $r13.<net.sourceforge.plantuml.timingdiagram.TimeTick: int compareTo(net.sourceforge.plantuml.timingdiagram.TimeTick)>(r1);

        if $i0 <= 0 goto label4;

        $r14 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.lang.Double) $r14;

        d1 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        if r25 != null goto label3;

        return d1;

     label3:
        $r16 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (net.sourceforge.plantuml.timingdiagram.TimeTick) $r16;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.timingdiagram.TimeTick: java.math.BigDecimal getTime()>();

        d2 = virtualinvoke $r18.<java.math.BigDecimal: double doubleValue()>();

        $r19 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (java.lang.Double) $r19;

        d3 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $r21 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (net.sourceforge.plantuml.timingdiagram.TimeTick) $r21;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.timingdiagram.TimeTick: java.math.BigDecimal getTime()>();

        d4 = virtualinvoke $r23.<java.math.BigDecimal: double doubleValue()>();

        $r24 = virtualinvoke r1.<net.sourceforge.plantuml.timingdiagram.TimeTick: java.math.BigDecimal getTime()>();

        $d5 = virtualinvoke $r24.<java.math.BigDecimal: double doubleValue()>();

        $d7 = $d5 - d4;

        $d6 = d2 - d4;

        d8 = $d7 / $d6;

        $d9 = d1 - d3;

        $d10 = $d9 * d8;

        $d11 = d3 + $d10;

        return $d11;

     label4:
        r25 = r11;

        goto label2;

     label5:
        $r8 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public void addNote(net.sourceforge.plantuml.timingdiagram.TimeTick, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.command.Position)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r1;
        net.sourceforge.plantuml.timingdiagram.TimeTick r2;
        net.sourceforge.plantuml.cucadiagram.Display r3;
        net.sourceforge.plantuml.command.Position r4;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r2 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeTick;

        r3 := @parameter1: net.sourceforge.plantuml.cucadiagram.Display;

        r4 := @parameter2: net.sourceforge.plantuml.command.Position;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void defineState(java.lang.String, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r1;
        java.lang.String r2, r3;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public transient void setState(net.sourceforge.plantuml.timingdiagram.TimeTick, java.lang.String, net.sourceforge.plantuml.graphic.color.Colors, java.lang.String[])
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.lang.String[] r1;
        java.lang.String $r2, r10;
        double d0;
        net.sourceforge.plantuml.timingdiagram.TimeTick r3;
        java.util.SortedMap $r4;
        java.lang.Double $r5, $r7, $r8, $r9;
        net.sourceforge.plantuml.graphic.color.Colors r11;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r3 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeTick;

        r10 := @parameter1: java.lang.String;

        r11 := @parameter2: net.sourceforge.plantuml.graphic.color.Colors;

        r1 := @parameter3: java.lang.String[];

        $r2 = r1[0];

        d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getState(java.lang.String)>($r2);

        if r3 != null goto label1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double initialState> = $r9;

        goto label2;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.util.SortedMap values>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

     label2:
        $r7 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double initialState>;

        if $r7 != null goto label3;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double initialState> = $r8;

     label3:
        return;
    }

    private double getState(java.lang.String)
    {
        java.lang.String r0;
        double $d0;
        java.lang.Exception $r1;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r3;

        r3 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r0 := @parameter0: java.lang.String;

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

     label2:
        return $d0;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void createConstraint(net.sourceforge.plantuml.timingdiagram.TimeTick, net.sourceforge.plantuml.timingdiagram.TimeTick, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r1;
        net.sourceforge.plantuml.timingdiagram.TimeTick r2, r3;
        java.lang.String r4;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r2 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeTick;

        r3 := @parameter1: net.sourceforge.plantuml.timingdiagram.TimeTick;

        r4 := @parameter2: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private double getYpos(double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, $d10, $d11;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        d1 := @parameter0: double;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getFullHeight(net.sourceforge.plantuml.graphic.StringBounder)>(null);

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMin()>();

        $d4 = d1 - $d2;

        $d3 = d0 - 16.0;

        $d5 = $d4 * $d3;

        $d6 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMax()>();

        $d7 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMin()>();

        $d8 = $d6 - $d7;

        d9 = $d5 / $d8;

        $d10 = d0 - 8.0;

        $d11 = $d10 - d9;

        return $d11;
    }

    public net.sourceforge.plantuml.graphic.TextBlock getPart1(double, double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1 $r0;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r1;
        double d0, d1;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1;

        specialinvoke $r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: void <init>(net.sourceforge.plantuml.timingdiagram.PlayerAnalog,double,double)>(r1, d0, d1);

        return $r0;
    }

    private double getMaxWidthForTicks(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.lang.Integer $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        int i0, i1, $i2, $i3, i4;
        net.sourceforge.plantuml.graphic.StringBounder r3;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Integer ticksEvery>;

        if $r1 != null goto label1;

        $d6 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMin()>();

        $d7 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getWidthLabel(net.sourceforge.plantuml.graphic.StringBounder,double)>(r3, $d6);

        $d8 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMax()>();

        $d9 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getWidthLabel(net.sourceforge.plantuml.graphic.StringBounder,double)>(r3, $d8);

        $d10 = staticinvoke <java.lang.Math: double max(double,double)>($d7, $d9);

        return $d10;

     label1:
        d11 = 0.0;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMin()>();

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d1;

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMax()>();

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        i1 = (int) $d3;

        i4 = i0;

     label2:
        if i4 > i1 goto label4;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Integer ticksEvery>;

        $i2 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i3 = i4 % $i2;

        if $i3 != 0 goto label3;

        $d4 = (double) i4;

        $d5 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getWidthLabel(net.sourceforge.plantuml.graphic.StringBounder,double)>(r3, $d4);

        d11 = staticinvoke <java.lang.Math: double max(double,double)>(d11, $d5);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return d11;
    }

    private void drawPart1(net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r6, $r10, $r12, $r14;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r2;
        net.sourceforge.plantuml.graphic.TextBlock r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, d8, d9, $d10, $d11, $d12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5, $r9, $r11, $r13;
        java.lang.Integer $r7, $r8;
        int i0, i1, $i2, $i3, i4;

        r2 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d9 := @parameter1: double;

        d8 := @parameter2: double;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.graphic.TextBlock getTitle()>();

        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getFullHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = $d0 - $d1;

        d3 = $d2 / 2.0;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d3);

        $r6 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke r3.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r6);

        $r7 = r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Integer ticksEvery>;

        if $r7 != null goto label1;

        $r11 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d8);

        $r12 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        $d11 = specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMin()>();

        specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: void drawScaleLabel(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r12, $d11, d9);

        $r13 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d8);

        $r14 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r13);

        $d12 = specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMax()>();

        specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: void drawScaleLabel(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r14, $d12, d9);

        goto label4;

     label1:
        $d4 = specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMin()>();

        $d5 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        i0 = (int) $d5;

        $d6 = specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMax()>();

        $d7 = staticinvoke <java.lang.Math: double floor(double)>($d6);

        i1 = (int) $d7;

        i4 = i0;

     label2:
        if i4 > i1 goto label4;

        $r8 = r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Integer ticksEvery>;

        $i2 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i3 = i4 % $i2;

        if $i3 != 0 goto label3;

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d8);

        $r10 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $d10 = (double) i4;

        specialinvoke r2.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: void drawScaleLabel(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r10, $d10, d9);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return;
    }

    private double getWidthLabel(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        double d0, $d1;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(double)>(d0);

        r3 = interfaceinvoke r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d1;
    }

    private void drawScaleLabel(net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4, $r5;
        net.sourceforge.plantuml.ugraphic.UGraphic $r6, r7, r8;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(double)>(d0);

        $r2 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = interfaceinvoke r1.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = d1 - $d2;

        $d4 = $d3 - 2.0;

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        $d5 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getYpos(double)>(d0);

        $d6 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d7 = $d6 / 2.0;

        $d8 = $d5 - $d7;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d8);

        $r6 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke r1.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r6);

        return;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getTextBlock(double)
    {
        java.lang.StringBuilder $r0, $r1, $r2;
        double d0;
        java.lang.String $r3;
        net.sourceforge.plantuml.cucadiagram.Display r4;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r5;
        net.sourceforge.plantuml.graphic.FontConfiguration $r6;
        net.sourceforge.plantuml.ISkinParam $r7;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r8;
        net.sourceforge.plantuml.graphic.TextBlock $r9;

        r5 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        d0 := @parameter0: double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r3);

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()>();

        $r8 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r7 = r5.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r9 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r6, $r8, $r7);

        return $r9;
    }

    private void drawTickHlines(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        net.sourceforge.plantuml.style.Style $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int i0, i1, $i2, $i3, i4;
        net.sourceforge.plantuml.timingdiagram.TimingRuler $r3;
        net.sourceforge.plantuml.ugraphic.ULine r4;
        java.lang.Integer $r5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;
        net.sourceforge.plantuml.ugraphic.UGraphic $r7, r8, r9;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.style.Style getStyle()>();

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.ISkinParam skinParam>;

        r9 = staticinvoke <net.sourceforge.plantuml.timingdiagram.TimingRuler: net.sourceforge.plantuml.ugraphic.UGraphic applyForVLines(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ISkinParam)>(r8, $r1, $r2);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMin()>();

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d1;

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMax()>();

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        i1 = (int) $d3;

        $r3 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.timingdiagram.TimingRuler ruler>;

        $d4 = virtualinvoke $r3.<net.sourceforge.plantuml.timingdiagram.TimingRuler: double getWidth()>();

        r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d4);

        i4 = i0;

     label1:
        if i4 > i1 goto label3;

        $r5 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Integer ticksEvery>;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i3 = i4 % $i2;

        if $i3 != 0 goto label2;

        $d5 = (double) i4;

        $d6 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getYpos(double)>($d5);

        $r6 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d6);

        $r7 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r4);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    public net.sourceforge.plantuml.graphic.UDrawable getPart2()
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog$2 $r0;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r1;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r0 = new net.sourceforge.plantuml.timingdiagram.PlayerAnalog$2;

        specialinvoke $r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$2: void <init>(net.sourceforge.plantuml.timingdiagram.PlayerAnalog)>(r1);

        return $r0;
    }

    public void setStartEnd(double, double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        double d0, d1;
        java.lang.Double $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double start> = $r1;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double end> = $r2;

        return;
    }

    public void setTicks(int)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Integer ticksEvery> = $r1;

        return;
    }

    protected net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3;
        net.sourceforge.plantuml.style.StyleSignature $r4;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r5;

        r5 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[3];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName timingDiagram>;

        $r0[2] = $r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r4;
    }

    static void access$000(net.sourceforge.plantuml.timingdiagram.PlayerAnalog, net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        double d0, d1;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: void drawPart1(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>(r1, d0, d1);

        return;
    }

    static double access$100(net.sourceforge.plantuml.timingdiagram.PlayerAnalog, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getMaxWidthForTicks(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    static java.lang.Integer access$200(net.sourceforge.plantuml.timingdiagram.PlayerAnalog)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.lang.Integer $r1;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Integer ticksEvery>;

        return $r1;
    }

    static void access$300(net.sourceforge.plantuml.timingdiagram.PlayerAnalog, net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: void drawTickHlines(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        return;
    }

    static java.lang.Double access$400(net.sourceforge.plantuml.timingdiagram.PlayerAnalog)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.lang.Double $r1;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.lang.Double initialState>;

        return $r1;
    }

    static java.util.SortedMap access$500(net.sourceforge.plantuml.timingdiagram.PlayerAnalog)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        java.util.SortedMap $r1;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: java.util.SortedMap values>;

        return $r1;
    }

    static double access$600(net.sourceforge.plantuml.timingdiagram.PlayerAnalog, double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r0;
        double d0, $d1;

        r0 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        d0 := @parameter1: double;

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double getYpos(double)>(d0);

        return $d1;
    }
}
