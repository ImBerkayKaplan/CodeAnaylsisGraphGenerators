public class net.sourceforge.plantuml.acearth.PSystemXearthFactory extends net.sourceforge.plantuml.command.PSystemBasicFactory
{
    private final java.util.Map config;
    private final java.util.List markers;
    private int width;
    private int height;

    public void <init>()
    {
        net.sourceforge.plantuml.acearth.PSystemXearthFactory r0;
        java.util.LinkedHashMap $r1;
        java.util.ArrayList $r2;

        r0 := @this: net.sourceforge.plantuml.acearth.PSystemXearthFactory;

        specialinvoke r0.<net.sourceforge.plantuml.command.PSystemBasicFactory: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.Map config> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.List markers> = $r2;

        return;
    }

    public net.sourceforge.plantuml.acearth.PSystemXearth initDiagram(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, java.lang.String)
    {
        net.sourceforge.plantuml.acearth.PSystemXearthFactory r0;
        java.util.Map $r1;
        java.util.List $r2;
        net.sourceforge.plantuml.api.ThemeStyle r3;
        net.sourceforge.plantuml.core.UmlSource r4;
        java.lang.String r5;

        r0 := @this: net.sourceforge.plantuml.acearth.PSystemXearthFactory;

        r3 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r4 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r5 := @parameter2: java.lang.String;

        r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: int width> = 512;

        r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: int height> = 512;

        $r1 = r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.Map config>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.List markers>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return null;
    }

    private void extractDimension(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.Pattern2 r0;
        java.lang.String r1, $r4, $r5;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        boolean z0;
        net.sourceforge.plantuml.acearth.PSystemXearthFactory r3;
        int $i0, $i1;

        r3 := @this: net.sourceforge.plantuml.acearth.PSystemXearthFactory;

        r1 := @parameter0: java.lang.String;

        r0 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("\\((\\d+),(\\d+)\\)");

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r1);

        z0 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: int width> = $i0;

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: int height> = $i1;

     label1:
        return;
    }

    public net.sourceforge.plantuml.acearth.PSystemXearth executeLine(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.acearth.PSystemXearth, java.lang.String)
    {
        java.lang.String r0, $r6, $r7;
        boolean $z0, $z1, $z2, $z4;
        net.sourceforge.plantuml.command.regex.Pattern2 r1;
        net.sourceforge.plantuml.command.regex.Matcher2 r2;
        net.sourceforge.plantuml.acearth.PSystemXearthFactory r3;
        java.util.List $r4, $r11;
        java.util.Map $r5, $r12;
        net.sourceforge.plantuml.acearth.PSystemXearth $r9, r15;
        net.sourceforge.plantuml.core.UmlSource r10;
        int $i0, $i1;
        java.lang.Exception $r13;
        net.sourceforge.plantuml.api.ThemeStyle r14;
        ext.plantuml.com.ctreber.acearth.plugins.markers.Marker r17;

        r3 := @this: net.sourceforge.plantuml.acearth.PSystemXearthFactory;

        r14 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r10 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r15 := @parameter2: net.sourceforge.plantuml.acearth.PSystemXearth;

        r0 := @parameter3: java.lang.String;

        if r15 != null goto label1;

        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("xearth");

        if $z4 == 0 goto label1;

        specialinvoke r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: void extractDimension(java.lang.String)>(r0);

        $r9 = new net.sourceforge.plantuml.acearth.PSystemXearth;

        $i1 = r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: int width>;

        $i0 = r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: int height>;

        $r12 = r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.Map config>;

        $r11 = r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.List markers>;

        specialinvoke $r9.<net.sourceforge.plantuml.acearth.PSystemXearth: void <init>(net.sourceforge.plantuml.core.UmlSource,int,int,java.util.Map,java.util.List)>(r10, $i1, $i0, $r12, $r11);

        return $r9;

     label1:
        if r15 != null goto label2;

        return null;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z1 == 0 goto label4;

     label3:
        return r15;

     label4:
        r1 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("(\\w+)[%s]*=[%s]*(.*)");

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r0);

        $z2 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z2 == 0 goto label5;

        $r5 = r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.Map config>;

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        return r15;

     label5:
        r17 = staticinvoke <ext.plantuml.com.ctreber.acearth.plugins.markers.Marker: ext.plantuml.com.ctreber.acearth.plugins.markers.Marker loadMarkerFile(java.lang.String)>(r0);

        if r17 == null goto label7;

        $r4 = r3.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: java.util.List markers>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r17);

     label6:
        return r15;

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        return null;

     label9:
        return null;

        catch java.lang.Exception from label5 to label6 with label8;
    }

    public volatile net.sourceforge.plantuml.AbstractPSystem initDiagram(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, java.lang.String)
    {
        net.sourceforge.plantuml.acearth.PSystemXearthFactory r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        java.lang.String r3;
        net.sourceforge.plantuml.acearth.PSystemXearth $r4;

        r0 := @this: net.sourceforge.plantuml.acearth.PSystemXearthFactory;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: net.sourceforge.plantuml.acearth.PSystemXearth initDiagram(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,java.lang.String)>(r1, r2, r3);

        return $r4;
    }

    public volatile net.sourceforge.plantuml.AbstractPSystem executeLine(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.core.UmlSource, net.sourceforge.plantuml.AbstractPSystem, java.lang.String)
    {
        net.sourceforge.plantuml.acearth.PSystemXearthFactory r0;
        net.sourceforge.plantuml.api.ThemeStyle r1;
        net.sourceforge.plantuml.core.UmlSource r2;
        net.sourceforge.plantuml.AbstractPSystem r3;
        java.lang.String r4;
        net.sourceforge.plantuml.acearth.PSystemXearth $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.acearth.PSystemXearthFactory;

        r1 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r2 := @parameter1: net.sourceforge.plantuml.core.UmlSource;

        r3 := @parameter2: net.sourceforge.plantuml.AbstractPSystem;

        r4 := @parameter3: java.lang.String;

        $r5 = (net.sourceforge.plantuml.acearth.PSystemXearth) r3;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.acearth.PSystemXearthFactory: net.sourceforge.plantuml.acearth.PSystemXearth executeLine(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.acearth.PSystemXearth,java.lang.String)>(r1, r2, $r5, r4);

        return $r6;
    }
}
