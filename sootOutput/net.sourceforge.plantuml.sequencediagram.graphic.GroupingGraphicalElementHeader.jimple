class net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader extends net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement
{
    private final net.sourceforge.plantuml.skin.Component comp;
    private double endY;
    private final boolean isParallel;
    private final java.util.List notes;

    public void <init>(double, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.sequencediagram.InGroupableList, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.InGroupableList r1;
        java.util.ArrayList $r2;
        net.sourceforge.plantuml.skin.Component r3;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        d0 := @parameter0: double;

        r3 := @parameter1: net.sourceforge.plantuml.skin.Component;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.InGroupableList;

        z0 := @parameter3: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement: void <init>(double,net.sourceforge.plantuml.sequencediagram.InGroupableList)>(d0, r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: java.util.List notes> = $r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.skin.Component comp> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: boolean isParallel> = z0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r7;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r1;
        java.lang.String $r2, $r8, $r9;
        net.sourceforge.plantuml.sequencediagram.InGroupableList $r5, $r6;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        if $r5 != null goto label1;

        $r9 = "no";

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        $r9 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.InGroupableList: java.lang.String toString()>();

     label2:
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public final double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2, r6;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        double $d0, $d1, d2;
        java.lang.Object $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.skin.Component comp>;

        d2 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: java.util.List notes>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.skin.Component) $r5;

        r7 = interfaceinvoke r6.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d2 = d2 + $d1;

        goto label1;

     label2:
        $d0 = d2 + 5.0;

        return $d0;
    }

    public final double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.InGroupableList $r2, $r3, $r4;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5, $r17;
        net.sourceforge.plantuml.skin.Component $r6, $r10, r15;
        byte $b0;
        net.sourceforge.plantuml.Dimension2DDouble $r7;
        net.sourceforge.plantuml.skin.Area $r9, $r19;
        net.sourceforge.plantuml.skin.Context2D r11;
        java.util.List $r12;
        java.util.Iterator r13;
        java.lang.Object $r14;
        net.sourceforge.plantuml.awt.geom.Dimension2D r16;
        net.sourceforge.plantuml.ugraphic.UGraphic $r18, r20, r21;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        r20 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d10 := @parameter1: double;

        r11 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: boolean isParallel>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        $d2 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.InGroupableList: double getHack2()>();

        d3 = $d1 - $d2;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: double getStartingY()>();

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, $d4);

        r21 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.skin.Component comp>;

        interfaceinvoke $r6.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: double endY>;

        $b0 = $d5 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $d6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: double endY>;

        $d7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: double getStartingY()>();

        d12 = $d6 - $d7;

        goto label3;

     label2:
        return;

     label3:
        $r7 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d8 = d3 - d0;

        specialinvoke $r7.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d8, d12);

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.skin.Component comp>;

        $r9 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r7);

        interfaceinvoke $r10.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r21, $r9, r11);

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: java.util.List notes>;

        r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (net.sourceforge.plantuml.skin.Component) $r14;

        r16 = interfaceinvoke r15.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d9 = d3 - d0;

        $r17 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d9);

        $r18 = interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        $r19 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r19.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r16);

        interfaceinvoke r15.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r18, $r19, r11);

        goto label4;

     label5:
        return;
    }

    public void setEndY(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: double endY> = d0;

        return;
    }

    public void addNotes(net.sourceforge.plantuml.graphic.StringBounder, java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        net.sourceforge.plantuml.skin.Component r3;
        net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader r4;
        java.util.List $r5;
        net.sourceforge.plantuml.sequencediagram.InGroupableList $r6;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        double $d0;

        r4 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r0 := @parameter1: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.skin.Component) $r2;

        $r5 = r4.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: java.util.List notes>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader: net.sourceforge.plantuml.sequencediagram.InGroupableList getInGroupableList()>();

        $d0 = interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.InGroupableList: void changeHack2(double)>($d0);

        goto label1;

     label2:
        return;
    }
}
