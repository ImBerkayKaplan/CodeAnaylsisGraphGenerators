public class net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines extends net.sourceforge.plantuml.command.CommandMultilines2
{
    private static final java.lang.String CODE;
    public static final java.lang.String CODES;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;
        net.sourceforge.plantuml.command.MultilinesStrategy $r2;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines;

        $r1 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        $r2 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy REMOVE_STARTING_QUOTE>;

        specialinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: void <init>(net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>($r1, $r2);

        return;
    }

    public java.lang.String getPatternEnd()
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines r0;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines;

        return "^[%s]*\\}[%s]*$";
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r7, $r10, $r18, $r30, $r40, $r43, $r49, $r52, $r57, $r60, $r77, $r80, $r88, $r91;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r14, $r16, $r24, $r35, $r67, $r72, $r83;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r11, $r12, $r17, $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r36, $r37, $r44, $r45, $r46, $r47, $r53, $r54, $r61, $r63, $r64, $r68, $r69, $r73, $r74, $r84, $r85, $r92, $r93, $r94, $r95;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r38, $r39, $r41, $r42, $r48, $r50, $r51, $r55, $r56, $r58, $r59, $r75, $r76, $r78, $r79, $r86, $r87, $r89, $r90;
        net.sourceforge.plantuml.command.regex.RegexOr $r13;
        net.sourceforge.plantuml.command.regex.RegexConcat $r15, $r23, $r34, $r66, $r71, $r82, $r96;
        net.sourceforge.plantuml.command.regex.RegexOptional $r33, $r65, $r70, $r81;
        net.sourceforge.plantuml.graphic.color.ColorParser $r62;

        $r0 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandCreateClassMultilines;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[22];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r7 = staticinvoke <net.sourceforge.plantuml.skin.VisibilityModifier: java.lang.String regexForVisibilityCharacterInClassName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("VISIBILITY", $r10);

        $r2[1] = $r4;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TYPE", "(interface|enum|annotation|abstract[%s]+class|abstract|class|entity)");

        $r2[2] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[3] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r14 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r15 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r16 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r17 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r18 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: java.lang.String DISPLAY_WITH_GENERIC>;

        specialinvoke $r17.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY1", $r18);

        $r16[0] = $r17;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r16[1] = $r19;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r16[2] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r16[3] = $r21;

        $r22 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([^%s{}%g<>]+)");

        $r16[4] = $r22;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r16);

        $r14[0] = $r15;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r24 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([^%s{}%g<>]+)");

        $r24[0] = $r25;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r24[1] = $r26;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r24[2] = $r27;

        $r28 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r24[3] = $r28;

        $r29 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r30 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClass: java.lang.String DISPLAY_WITH_GENERIC>;

        specialinvoke $r29.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", $r30);

        $r24[4] = $r29;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r24);

        $r14[1] = $r23;

        $r31 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r31.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE3", "([^%s{}%g<>]+)");

        $r14[2] = $r31;

        $r32 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r32.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE4", "[%g]([^%g]+)[%g]");

        $r14[3] = $r32;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r14);

        $r2[4] = $r13;

        $r33 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r34 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r35 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r36 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r35[0] = $r36;

        $r37 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\<(");

        $r40 = <net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer: java.lang.String PATTERN>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\\>");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("GENERIC", $r43);

        $r35[1] = $r37;

        specialinvoke $r34.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r35);

        specialinvoke $r33.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r34);

        $r2[5] = $r33;

        $r44 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r44;

        $r45 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r45.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<\\<.+\\>\\>)?");

        $r2[7] = $r45;

        $r46 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r46;

        $r47 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r52);

        $r2[9] = $r47;

        $r53 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[10] = $r53;

        $r54 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r57 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r60);

        $r2[11] = $r54;

        $r61 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[12] = $r61;

        $r62 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r63 = virtualinvoke $r62.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[13] = $r63;

        $r64 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[14] = $r64;

        $r65 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r66 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r67 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r68 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r68.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("##");

        $r67[0] = $r68;

        $r69 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r69.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("LINECOLOR", "(?:\\[(dotted|dashed|bold)\\])?(\\w+)?");

        $r67[1] = $r69;

        specialinvoke $r66.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r67);

        specialinvoke $r65.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r66);

        $r2[15] = $r65;

        $r70 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r71 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r72 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r73 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r72[0] = $r73;

        $r74 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(extends)[%s]+(");

        $r77 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODES>;

        $r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("EXTENDS", $r80);

        $r72[1] = $r74;

        specialinvoke $r71.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r72);

        specialinvoke $r70.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r71);

        $r2[16] = $r70;

        $r81 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r82 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r83 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r84 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r83[0] = $r84;

        $r85 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(implements)[%s]+(");

        $r88 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODES>;

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r85.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("IMPLEMENTS", $r91);

        $r83[1] = $r85;

        specialinvoke $r82.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r83);

        specialinvoke $r81.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r82);

        $r2[17] = $r81;

        $r92 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[18] = $r92;

        $r93 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r93.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\{");

        $r2[19] = $r93;

        $r94 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[20] = $r94;

        $r95 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[21] = $r95;

        $r96 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r96;
    }

    public boolean syntaxWithFinalBracket()
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines r0;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines;

        return 1;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.classdiagram.ClassDiagram, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;
        net.sourceforge.plantuml.StringLocated $r2, $r3, $r10, r14;
        java.lang.String $r4, $r8, $r15, $r16, $r22;
        net.sourceforge.plantuml.command.regex.RegexResult r5;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r6;
        net.sourceforge.plantuml.cucadiagram.IEntity r7;
        int $i0, $i1;
        net.sourceforge.plantuml.command.CommandExecutionResult $r9, $r17;
        net.sourceforge.plantuml.LineLocation $r11;
        java.util.Iterator r12;
        boolean $z0, $z1;
        java.lang.Object $r13;
        net.sourceforge.plantuml.command.BlocLines r18, r19, r20;
        net.sourceforge.plantuml.cucadiagram.Bodier $r21;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines;

        r6 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        r18 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        r19 = virtualinvoke r18.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines trimSmart(int)>(1);

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: net.sourceforge.plantuml.command.regex.IRegex getStartingPattern()>();

        $r2 = virtualinvoke r19.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r5 = interfaceinvoke $r1.<net.sourceforge.plantuml.command.regex.IRegex: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>($r4);

        r7 = specialinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: net.sourceforge.plantuml.cucadiagram.IEntity executeArg0(net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.command.regex.RegexResult)>(r6, r5);

        if r7 != null goto label1;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("No such entity");

        return $r17;

     label1:
        $i0 = virtualinvoke r19.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 <= 1 goto label4;

        $r10 = virtualinvoke r19.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getAt(int)>(0);

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.IEntity: void setCodeLine(net.sourceforge.plantuml.LineLocation)>($r11);

        r20 = virtualinvoke r19.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines subExtract(int,int)>(1, 1);

        r12 = virtualinvoke r20.<net.sourceforge.plantuml.command.BlocLines: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.StringLocated) $r13;

        $r15 = virtualinvoke r14.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $i1 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i1 <= 0 goto label3;

        $r16 = virtualinvoke r14.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.skin.VisibilityModifier: boolean isVisibilityCharacter(java.lang.CharSequence)>($r16);

        if $z1 == 0 goto label3;

        virtualinvoke r6.<net.sourceforge.plantuml.classdiagram.ClassDiagram: void setVisibilityModifierPresent(boolean)>(1);

     label3:
        $r21 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r22 = virtualinvoke r14.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        interfaceinvoke $r21.<net.sourceforge.plantuml.cucadiagram.Bodier: void addFieldOrMethod(java.lang.String)>($r22);

        goto label2;

     label4:
        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void manageExtends(java.lang.String,net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.cucadiagram.IEntity)>("EXTENDS", r6, r5, r7);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void manageExtends(java.lang.String,net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.cucadiagram.IEntity)>("IMPLEMENTS", r6, r5, r7);

        $r8 = virtualinvoke r5.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TAGS", 0);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void addTags(net.sourceforge.plantuml.cucadiagram.IEntity,java.lang.String)>(r7, $r8);

        $r9 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r9;
    }

    public static void addTags(net.sourceforge.plantuml.cucadiagram.IEntity, java.lang.String)
    {
        java.lang.String r0, r5, r6;
        java.lang.String[] r1;
        int i0, i1;
        boolean $z0, $z1;
        net.sourceforge.plantuml.cucadiagram.IEntity r2;
        net.sourceforge.plantuml.cucadiagram.Stereotag $r3;
        java.lang.AssertionError $r4;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("[ ]+");

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r5 = r1[i1];

        $z0 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("$");

        if $z1 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(1);

        $r3 = new net.sourceforge.plantuml.cucadiagram.Stereotag;

        specialinvoke $r3.<net.sourceforge.plantuml.cucadiagram.Stereotag: void <init>(java.lang.String)>(r6);

        interfaceinvoke r2.<net.sourceforge.plantuml.cucadiagram.IEntity: void addStereotag(net.sourceforge.plantuml.cucadiagram.Stereotag)>($r3);

        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public static void manageExtends(java.lang.String, net.sourceforge.plantuml.classdiagram.ClassDiagram, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, $r2, $r3, r7, r9, r10, $r31, $r32;
        boolean $z0, $z1;
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode r4, $r5, $r6, $r25;
        java.lang.String[] r8;
        int i0, i1;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r11;
        net.sourceforge.plantuml.cucadiagram.Ident r12;
        net.sourceforge.plantuml.cucadiagram.ILeaf r14;
        net.sourceforge.plantuml.cucadiagram.LinkType $r15, r28;
        net.sourceforge.plantuml.cucadiagram.LinkDecor $r16, $r17;
        net.sourceforge.plantuml.cucadiagram.LeafType $r18, $r21, $r22, $r23, $r24, r26;
        net.sourceforge.plantuml.cucadiagram.IEntity r19;
        net.sourceforge.plantuml.cucadiagram.Code $r27;
        net.sourceforge.plantuml.cucadiagram.Link $r29;
        net.sourceforge.plantuml.cucadiagram.Display $r30;
        net.sourceforge.plantuml.ISkinParam $r33;
        net.sourceforge.plantuml.style.StyleBuilder $r34;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r19 := @parameter3: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>(r1, 0);

        if $r2 == null goto label9;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>(r1, 0);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("extends");

        if $z0 == 0 goto label1;

        $r25 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode EXTENDS>;

        goto label2;

     label1:
        $r25 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode IMPLEMENTS>;

     label2:
        r4 = $r25;

        r26 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CLASS>;

        $r5 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode IMPLEMENTS>;

        if $r25 != $r5 goto label3;

        r26 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType INTERFACE>;

     label3:
        $r6 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines$Mode EXTENDS>;

        if r4 != $r6 goto label4;

        $r23 = interfaceinvoke r19.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r24 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType INTERFACE>;

        if $r23 != $r24 goto label4;

        r26 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType INTERFACE>;

     label4:
        r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>(r1, 1);

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r8;

        i1 = 0;

     label5:
        if i1 >= i0 goto label9;

        r9 = r8[i1];

        r10 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>(r9);

        r12 = virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r10);

        $z1 = virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z1 == 0 goto label6;

        $r27 = r12;

        goto label7;

     label6:
        $r27 = virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r10);

     label7:
        r14 = virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r12, $r27, r26, null);

        $r15 = new net.sourceforge.plantuml.cucadiagram.LinkType;

        $r17 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor NONE>;

        $r16 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor EXTENDS>;

        specialinvoke $r15.<net.sourceforge.plantuml.cucadiagram.LinkType: void <init>(net.sourceforge.plantuml.cucadiagram.LinkDecor,net.sourceforge.plantuml.cucadiagram.LinkDecor)>($r17, $r16);

        r28 = $r15;

        $r18 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType INTERFACE>;

        if r26 != $r18 goto label8;

        $r21 = interfaceinvoke r19.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r22 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType INTERFACE>;

        if $r21 == $r22 goto label8;

        r28 = virtualinvoke $r15.<net.sourceforge.plantuml.cucadiagram.LinkType: net.sourceforge.plantuml.cucadiagram.LinkType goDashed()>();

     label8:
        $r29 = new net.sourceforge.plantuml.cucadiagram.Link;

        $r30 = <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display NULL>;

        $r31 = virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: java.lang.String getLabeldistance()>();

        $r32 = virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: java.lang.String getLabelangle()>();

        $r33 = virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r34 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r29.<net.sourceforge.plantuml.cucadiagram.Link: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.cucadiagram.LinkType,net.sourceforge.plantuml.cucadiagram.Display,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,net.sourceforge.plantuml.style.StyleBuilder)>(r14, r19, r28, $r30, 2, null, null, $r31, $r32, $r34);

        virtualinvoke r11.<net.sourceforge.plantuml.classdiagram.ClassDiagram: void addLink(net.sourceforge.plantuml.cucadiagram.Link)>($r29);

        i1 = i1 + 1;

        goto label5;

     label9:
        return;
    }

    private net.sourceforge.plantuml.cucadiagram.IEntity executeArg0(net.sourceforge.plantuml.classdiagram.ClassDiagram, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, $r2, r4, $r5, r6, r10, r11, r12, r13, r15, $r26, $r27, $r31, $r45, $r49, r54;
        net.sourceforge.plantuml.cucadiagram.LeafType r3;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r7;
        net.sourceforge.plantuml.cucadiagram.Ident r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.cucadiagram.Code r9, $r48;
        net.sourceforge.plantuml.cucadiagram.Display $r14, $r41;
        net.sourceforge.plantuml.graphic.color.ColorParser $r16;
        net.sourceforge.plantuml.ISkinParam $r17, $r19, $r21, $r23, $r30, $r33, $r34, $r38;
        net.sourceforge.plantuml.api.ThemeStyle $r18, $r24;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r20, $r22, $r39;
        net.sourceforge.plantuml.graphic.color.ColorType $r28;
        net.sourceforge.plantuml.UrlBuilder $r29;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r32;
        int $i0;
        double $d0;
        net.sourceforge.plantuml.FontParam[] $r35;
        net.sourceforge.plantuml.FontParam $r36;
        net.sourceforge.plantuml.ugraphic.UFont $r37;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r40;
        java.lang.StringBuilder $r42, $r43, $r44;
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines r46;
        net.sourceforge.plantuml.skin.VisibilityModifier r47;
        net.sourceforge.plantuml.cucadiagram.ILeaf r50;
        net.sourceforge.plantuml.Url r52;
        net.sourceforge.plantuml.graphic.color.Colors r53;
        net.sourceforge.plantuml.ugraphic.color.HColor $r55;

        r46 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines;

        r7 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TYPE", 0);

        $r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goUpperCase(java.lang.String)>($r1);

        r3 = staticinvoke <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType(java.lang.String)>($r2);

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("VISIBILITY", 0);

        r47 = null;

        if r4 == null goto label01;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FOO");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        r47 = staticinvoke <net.sourceforge.plantuml.skin.VisibilityModifier: net.sourceforge.plantuml.skin.VisibilityModifier getVisibilityModifier(java.lang.CharSequence,boolean)>($r45, 0);

     label01:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r6 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String,java.lang.String)>($r5, "\"([:");

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r6);

        $z0 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z0 == 0 goto label02;

        $r48 = r8;

        goto label03;

     label02:
        $r48 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r6);

     label03:
        r9 = $r48;

        r10 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 1);

        if r11 == null goto label04;

        $r49 = r11;

        goto label05;

     label04:
        $r49 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("GENERIC", 0);

     label05:
        r12 = $r49;

        r13 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEREO", 0);

        $z1 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z1 == 0 goto label07;

        r50 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getLeafSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r8);

        if r50 == null goto label06;

        virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: void setLastEntity(net.sourceforge.plantuml.cucadiagram.ILeaf)>(r50);

        $z4 = interfaceinvoke r50.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean muteToType(net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, null);

        if $z4 != 0 goto label09;

        return null;

     label06:
        $r41 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r10);

        r50 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r8, r9, $r41, r3, null);

        goto label09;

     label07:
        $z2 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean leafExist(net.sourceforge.plantuml.cucadiagram.Code)>(r9);

        if $z2 == 0 goto label08;

        r50 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r8, r9, null, null);

        $z3 = interfaceinvoke r50.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean muteToType(net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, null);

        if $z3 != 0 goto label09;

        return null;

     label08:
        $r14 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r10);

        r50 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r8, r9, $r14, r3, null);

     label09:
        interfaceinvoke r50.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setVisibilityModifier(net.sourceforge.plantuml.skin.VisibilityModifier)>(r47);

        if r13 == null goto label10;

        $r33 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i0 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i0;

        $r34 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r35 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r36 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r35[0] = $r36;

        $r37 = interfaceinvoke $r34.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r35);

        $r38 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r39 = interfaceinvoke $r38.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r40 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r13, $d0, $r37, $r39);

        interfaceinvoke r50.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r40);

     label10:
        r15 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r15 == null goto label11;

        $r29 = new net.sourceforge.plantuml.UrlBuilder;

        $r30 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r32 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r29.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r31, $r32);

        r52 = virtualinvoke $r29.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r15);

        interfaceinvoke r50.<net.sourceforge.plantuml.cucadiagram.ILeaf: void addUrl(net.sourceforge.plantuml.Url)>(r52);

     label11:
        $r16 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r17 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r19 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r53 = virtualinvoke $r16.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r18, r0, $r20);

        r54 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 1);

        if r54 != null goto label12;

        $r55 = null;

        goto label13;

     label12:
        $r21 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r23 = virtualinvoke r7.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r55 = virtualinvoke $r22.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r24, r54);

     label13:
        if $r55 == null goto label14;

        $r28 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r53 = virtualinvoke r53.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors add(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r28, $r55);

     label14:
        $r26 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 0);

        if $r26 == null goto label15;

        $r27 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 0);

        r53 = virtualinvoke r53.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors addLegacyStroke(java.lang.String)>($r27);

     label15:
        interfaceinvoke r50.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r53);

        if r12 == null goto label16;

        interfaceinvoke r50.<net.sourceforge.plantuml.cucadiagram.ILeaf: void setGeneric(java.lang.String)>(r12);

     label16:
        return r50;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.command.BlocLines r2;
        net.sourceforge.plantuml.classdiagram.ClassDiagram $r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r3 = (net.sourceforge.plantuml.classdiagram.ClassDiagram) r1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.command.BlocLines)>($r3, r2);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r11, $r12, $r14, $r15;
        java.lang.String $r2, $r5, $r8, $r10, $r13, $r16;

        $r0 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandCreateClassMultilines;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: boolean $assertionsDisabled> = $z1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandLinkClass: java.lang.String getSeparator()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?[%pLN_$]+(?:");

        $r5 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandLinkClass: java.lang.String getSeparator()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[%pLN_$]+)*");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODE> = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODE>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:\\s*,\\s*");

        $r13 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODE>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")*");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: java.lang.String CODES> = $r16;

        return;
    }
}
