public class net.sourceforge.plantuml.graphic.TextBlockBordered extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private final double cornersize;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor;
    private final net.sourceforge.plantuml.ugraphic.color.HColor borderColor;
    private final double top;
    private final double right;
    private final double bottom;
    private final double left;
    private final net.sourceforge.plantuml.ugraphic.UStroke stroke;
    private final boolean withShadow;
    private final net.sourceforge.plantuml.graphic.TextBlock textBlock;

    void <init>(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.ugraphic.UStroke, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, double, double, double)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        double d0, d1, d2;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.ugraphic.UStroke r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r4;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.UStroke;

        r3 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        d2 := @parameter4: double;

        d1 := @parameter5: double;

        d0 := @parameter6: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double top> = d0;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double right> = d1;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double bottom> = d0;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double left> = d1;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double cornersize> = d2;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r1;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: boolean withShadow> = 0;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.UStroke stroke> = r2;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = r3;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor> = r4;

        return;
    }

    void <init>(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.ugraphic.UStroke, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, double, net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r1;
        double $d0, $d1, $d2, $d3, d4;
        net.sourceforge.plantuml.graphic.TextBlock r2;
        net.sourceforge.plantuml.ugraphic.UStroke r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r4, r5;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.UStroke;

        r4 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r5 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        d4 := @parameter4: double;

        r1 := @parameter5: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getTop()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double top> = $d0;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getRight()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double right> = $d1;

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getBottom()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double bottom> = $d2;

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: double getLeft()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double left> = $d3;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double cornersize> = d4;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r2;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: boolean withShadow> = 0;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.UStroke stroke> = r3;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = r4;

        r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor> = r5;

        return;
    }

    void <init>(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.ugraphic.UStroke, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, double)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        net.sourceforge.plantuml.ugraphic.UStroke r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r4;
        double d0;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.ugraphic.UStroke;

        r3 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        d0 := @parameter4: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ugraphic.UStroke,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,double,double,double)>(r1, r2, r3, r4, d0, 6.0, 5.0);

        return;
    }

    private double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double top>;

        $d3 = $d0 + $d1;

        $d2 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double bottom>;

        $d4 = $d3 + $d2;

        return $d4;
    }

    private double getPureTextWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    private double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double getPureTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double left>;

        $d3 = $d0 + $d1;

        $d2 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double right>;

        $d4 = $d3 + $d2;

        return $d4;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1, $d2, $d3;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d3 = d1 + 1.0;

        $d2 = d0 + 1.0;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d3, $d2);

        return $r2;
    }

    private net.sourceforge.plantuml.ugraphic.UGraphic applyStroke(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.ugraphic.UStroke $r1, $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.UStroke stroke>;

        if $r1 != null goto label1;

        return r2;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.UStroke stroke>;

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        return $r4;
    }

    private boolean noBorder()
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.ugraphic.UStroke $r1, $r2;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        $r1 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.UStroke stroke>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.UStroke stroke>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.graphic.TextBlockBordered r1;
        net.sourceforge.plantuml.ugraphic.Shadowable r2;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4, $r5, $r18, r19;
        net.sourceforge.plantuml.ugraphic.UBackground $r6, $r15;
        net.sourceforge.plantuml.graphic.TextBlock $r7, $r11, r22;
        net.sourceforge.plantuml.ugraphic.UGraphic $r8, $r10, r16, r17, r20, r21;
        net.sourceforge.plantuml.ugraphic.UTranslate $r9;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.creole.SheetBlock2 $r12;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r13, $r14;

        r1 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r16 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.Shadowable getPolygonNormal(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $z0 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: boolean withShadow>;

        if $z0 == 0 goto label1;

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.Shadowable: void setDeltaShadow(double)>(4.0);

     label1:
        $r4 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor>;

        if $r4 != null goto label2;

        $r14 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r17 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r15);

        goto label3;

     label2:
        $r5 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor>;

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r17 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

     label3:
        $z1 = specialinvoke r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: boolean noBorder()>();

        if $z1 == 0 goto label4;

        $r18 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor backgroundColor>;

        goto label5;

     label4:
        $r18 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

     label5:
        r19 = $r18;

        if $r18 != null goto label6;

        $r13 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r13.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        r19 = $r13;

     label6:
        r20 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r19);

        r21 = specialinvoke r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.ugraphic.UGraphic applyStroke(net.sourceforge.plantuml.ugraphic.UGraphic)>(r20);

        interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r2);

        r22 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r7 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $z2 = $r7 instanceof net.sourceforge.plantuml.creole.SheetBlock2;

        if $z2 == 0 goto label7;

        $r11 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r12 = (net.sourceforge.plantuml.creole.SheetBlock2) $r11;

        $d3 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: double left>;

        $d2 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: double right>;

        r22 = virtualinvoke $r12.<net.sourceforge.plantuml.creole.SheetBlock2: net.sourceforge.plantuml.creole.SheetBlock2 enlargeMe(double,double)>($d3, $d2);

     label7:
        $r8 = interfaceinvoke r16.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r19);

        $r9 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d1 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: double left>;

        $d0 = r1.<net.sourceforge.plantuml.graphic.TextBlockBordered: double top>;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, $d0);

        $r10 = interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        interfaceinvoke r22.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r10);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.Shadowable getPolygonNormal(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockBordered r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1, $d2;
        net.sourceforge.plantuml.ugraphic.URectangle $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockBordered;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double getTextHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double getTextWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d1, d0);

        $d2 = r0.<net.sourceforge.plantuml.graphic.TextBlockBordered: double cornersize>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>($d2);

        return $r3;
    }
}
