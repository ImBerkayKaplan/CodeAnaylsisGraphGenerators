public class net.sourceforge.plantuml.creole.atom.AtomSprite extends net.sourceforge.plantuml.creole.atom.AbstractAtom implements net.sourceforge.plantuml.creole.atom.Atom
{
    private final net.sourceforge.plantuml.sprite.Sprite sprite;
    private final double scale;
    private final net.sourceforge.plantuml.Url url;
    private final net.sourceforge.plantuml.ugraphic.color.HColor color;

    public void <init>(net.sourceforge.plantuml.ugraphic.color.HColor, double, net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.sprite.Sprite, net.sourceforge.plantuml.Url)
    {
        net.sourceforge.plantuml.creole.atom.AtomSprite r0;
        double d0;
        net.sourceforge.plantuml.sprite.Sprite r1;
        net.sourceforge.plantuml.Url r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, $r6;
        net.sourceforge.plantuml.graphic.FontConfiguration r4;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomSprite;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        d0 := @parameter1: double;

        r4 := @parameter2: net.sourceforge.plantuml.graphic.FontConfiguration;

        r1 := @parameter3: net.sourceforge.plantuml.sprite.Sprite;

        r2 := @parameter4: net.sourceforge.plantuml.Url;

        specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AbstractAtom: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: double scale> = d0;

        r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.sprite.Sprite sprite> = r1;

        r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.Url url> = r2;

        if r3 != null goto label1;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        goto label2;

     label1:
        $r6 = r3;

     label2:
        r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.ugraphic.color.HColor color> = $r6;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomSprite r0;
        double $d0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;
        net.sourceforge.plantuml.sprite.Sprite $r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r5;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomSprite;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.sprite.Sprite sprite>;

        $r1 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.ugraphic.color.HColor color>;

        $d0 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: double scale>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.sprite.Sprite: net.sourceforge.plantuml.graphic.TextBlock asTextBlock(net.sourceforge.plantuml.ugraphic.color.HColor,double)>($r1, $d0);

        $r5 = interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        return $r5;
    }

    public double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomSprite r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomSprite;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.creole.atom.AtomSprite r0;
        net.sourceforge.plantuml.Url $r1, $r6, $r7;
        double $d0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2;
        net.sourceforge.plantuml.sprite.Sprite $r3;
        net.sourceforge.plantuml.graphic.TextBlock $r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomSprite;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        $r7 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r7);

     label1:
        $r3 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.sprite.Sprite sprite>;

        $r2 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.ugraphic.color.HColor color>;

        $d0 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: double scale>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.sprite.Sprite: net.sourceforge.plantuml.graphic.TextBlock asTextBlock(net.sourceforge.plantuml.ugraphic.color.HColor,double)>($r2, $d0);

        interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r5);

        $r6 = r0.<net.sourceforge.plantuml.creole.atom.AtomSprite: net.sourceforge.plantuml.Url url>;

        if $r6 == null goto label2;

        interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label2:
        return;
    }
}
