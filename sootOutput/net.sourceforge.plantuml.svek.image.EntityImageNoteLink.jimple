public class net.sourceforge.plantuml.svek.image.EntityImageNoteLink extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final net.sourceforge.plantuml.skin.Component comp;

    public void <init>(net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.graphic.color.Colors, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.StyleBuilder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.skin.ComponentType $r4, $r10;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.style.StyleBuilder r6;
        net.sourceforge.plantuml.style.Style $r7;
        net.sourceforge.plantuml.graphic.color.Colors r8;
        net.sourceforge.plantuml.ISkinParam r9, $r11;
        net.sourceforge.plantuml.cucadiagram.Display r12;
        net.sourceforge.plantuml.skin.Component $r13;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        r12 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        r8 := @parameter1: net.sourceforge.plantuml.graphic.color.Colors;

        r9 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r6 := @parameter3: net.sourceforge.plantuml.style.StyleBuilder;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r1 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r1.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r3 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r4 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>(r6);

        $r3[0] = $r7;

        $r10 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        $r11 = virtualinvoke r8.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ISkinParam mute(net.sourceforge.plantuml.ISkinParam)>(r9);

        $r13 = virtualinvoke $r1.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNote(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r10, $r11, r12);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageNoteLink: net.sourceforge.plantuml.skin.Component comp> = $r13;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2, $r3;
        double d0, d1;
        net.sourceforge.plantuml.Dimension2DDouble $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNoteLink: net.sourceforge.plantuml.skin.Component comp>;

        d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNoteLink: net.sourceforge.plantuml.skin.Component comp>;

        d1 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d1, d0);

        return $r4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.skin.Area $r2;
        net.sourceforge.plantuml.skin.Component $r3;
        net.sourceforge.plantuml.graphic.StringBounder $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r5;
        net.sourceforge.plantuml.skin.SimpleContext2D $r6;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r3 = r0.<net.sourceforge.plantuml.svek.image.EntityImageNoteLink: net.sourceforge.plantuml.skin.Component comp>;

        $r2 = new net.sourceforge.plantuml.skin.Area;

        $r4 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageNoteLink: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        specialinvoke $r2.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5);

        $r6 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r6.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r1, $r2, $r6);

        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        return null;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Margins $r0;
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r0;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r0;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        return 0;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageNoteLink r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageNoteLink;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }
}
