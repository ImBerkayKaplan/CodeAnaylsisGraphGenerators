public class net.sourceforge.plantuml.sequencediagram.teoz.NoteTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile implements net.sourceforge.plantuml.sequencediagram.teoz.Tile
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.sequencediagram.Note note;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.sequencediagram.Note $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        return $r1;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d1 = $d0 / 2.0;

        return $d1;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace, net.sourceforge.plantuml.sequencediagram.Note, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r2, r3;
        net.sourceforge.plantuml.sequencediagram.Note r4;
        net.sourceforge.plantuml.skin.rose.Rose r5;
        net.sourceforge.plantuml.ISkinParam r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r3 := @parameter2: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r4 := @parameter3: net.sourceforge.plantuml.sequencediagram.Note;

        r5 := @parameter4: net.sourceforge.plantuml.skin.rose.Rose;

        r6 := @parameter5: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.skin.rose.Rose skin> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        return;
    }

    private net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.sequencediagram.Note $r1, $r4, $r8, $r10, $r12;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r5;
        net.sourceforge.plantuml.skin.ComponentType $r6;
        net.sourceforge.plantuml.ISkinParam $r7, $r9;
        net.sourceforge.plantuml.cucadiagram.Display $r11;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r13;
        net.sourceforge.plantuml.skin.Component r14;
        net.sourceforge.plantuml.graphic.StringBounder r15;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        r15 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NoteStyle getNoteStyle()>();

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.skin.ComponentType getNoteComponentType(net.sourceforge.plantuml.sequencediagram.NoteStyle)>($r5);

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.ISkinParam getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r7);

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        r14 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNote(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.sequencediagram.NotePosition)>($r3, $r6, $r9, $r11, $r13);

        return r14;
    }

    private net.sourceforge.plantuml.skin.ComponentType getNoteComponentType(net.sourceforge.plantuml.sequencediagram.NoteStyle)
    {
        net.sourceforge.plantuml.sequencediagram.NoteStyle r0, $r1, $r2;
        net.sourceforge.plantuml.skin.ComponentType $r3, $r4, $r5;
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r6;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.NoteStyle;

        $r1 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle HEXAGONAL>;

        if r0 != $r1 goto label1;

        $r5 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE_HEXAGONAL>;

        return $r5;

     label1:
        $r2 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle BOX>;

        if r0 != $r2 goto label2;

        $r4 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE_BOX>;

        return $r4;

     label2:
        $r3 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        return $r3;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.real.Real $r4;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.skin.Area $r5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7;
        net.sourceforge.plantuml.skin.Context2D $r8;
        net.sourceforge.plantuml.ugraphic.UGraphic r9, r10;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        r9 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r4 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d0 = interfaceinvoke $r4.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r5 = new net.sourceforge.plantuml.skin.Area;

        $d1 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r5.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d1, $d2);

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d0);

        r10 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        $r8 = (net.sourceforge.plantuml.skin.Context2D) r10;

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r10, $r5, $r8);

        return;
    }

    private double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double d0, d1, d2, d3;
        net.sourceforge.plantuml.sequencediagram.Note $r4;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r5, $r6;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r7, $r9;
        net.sourceforge.plantuml.real.Real $r8, $r10;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r6 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if $r5 != $r6 goto label1;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = interfaceinvoke $r8.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d2 = interfaceinvoke $r10.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        d3 = d2 - d1;

        $b0 = d0 cmpg d3;

        if $b0 >= 0 goto label1;

        return d3;

     label1:
        return d0;
    }

    private net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.sequencediagram.Note $r1;
        net.sourceforge.plantuml.sequencediagram.NotePosition r2, $r4, $r5, $r6, $r7;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        java.lang.UnsupportedOperationException $r8;
        java.lang.String $r9;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r10, $r13, $r14, $r18, $r19, $r22;
        net.sourceforge.plantuml.real.Real $r11, $r12, $r15, $r16, $r20, $r21, $r23, $r24, r25, r26;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode $r17;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r4 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition LEFT>;

        if r2 != $r4 goto label1;

        $r22 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d6 = neg d0;

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d6);

        return $r24;

     label1:
        $r5 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition RIGHT>;

        if r2 != $r5 goto label2;

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r17 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_DEACTIVATE>;

        i0 = virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r0, $r17);

        $d5 = (double) i0;

        d7 = $d5 * 5.0;

        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(d7);

        return $r21;

     label2:
        $r6 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if r2 != $r6 goto label3;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        r25 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        r26 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r15 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real middle(net.sourceforge.plantuml.real.Real,net.sourceforge.plantuml.real.Real)>(r25, r26);

        $d3 = neg d0;

        $d4 = $d3 / 2.0;

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d4);

        return $r16;

     label3:
        $r7 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER>;

        if r2 != $r7 goto label4;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d1 = neg d0;

        $d2 = $d1 / 2.0;

        $r12 = interfaceinvoke $r11.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d2);

        return $r12;

     label4:
        $r8 = new java.lang.UnsupportedOperationException;

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.NotePosition: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r7;
        net.sourceforge.plantuml.real.Real r2, r8, $r10;
        net.sourceforge.plantuml.sequencediagram.Note $r3;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r4, $r5;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r6;
        net.sourceforge.plantuml.real.Real[] $r9;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r5 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if $r4 != $r5 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace1>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r8 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>($r7);

        $r9 = newarray (net.sourceforge.plantuml.real.Real)[2];

        $r9[0] = r2;

        $r9[1] = r8;

        $r10 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real min(net.sourceforge.plantuml.real.Real[])>($r9);

        return $r10;

     label1:
        return r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.NoteTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3, $r9;
        net.sourceforge.plantuml.real.Real $r2, r4, r10, $r12;
        double $d0;
        net.sourceforge.plantuml.sequencediagram.Note $r5;
        net.sourceforge.plantuml.sequencediagram.NotePosition $r6, $r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r8;
        net.sourceforge.plantuml.real.Real[] $r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.NoteTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.real.Real getX(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: double getUsedWidth(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.Note note>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.sequencediagram.NotePosition getPosition()>();

        $r7 = <net.sourceforge.plantuml.sequencediagram.NotePosition: net.sourceforge.plantuml.sequencediagram.NotePosition OVER_SEVERAL>;

        if $r6 != $r7 goto label1;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace2>;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.NoteTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r10 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>($r9);

        $r11 = newarray (net.sourceforge.plantuml.real.Real)[2];

        $r11[0] = r4;

        $r11[1] = r10;

        $r12 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real max(net.sourceforge.plantuml.real.Real[])>($r11);

        return $r12;

     label1:
        return r4;
    }
}
