abstract class net.sourceforge.plantuml.sequencediagram.graphic.Arrow extends net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.skin.ArrowComponent arrowComponent;
    private double paddingArrowHead;
    private double maxX;
    private final net.sourceforge.plantuml.Url url;

    public void setMaxX(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        double $d0, d1;
        byte $b0;
        java.lang.IllegalStateException $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        d1 := @parameter0: double;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double maxX>;

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double maxX> = d1;

        return;
    }

    protected final double getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double maxX>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

     label1:
        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double maxX>;

        return $d1;
    }

    public abstract double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder);

    void <init>(double, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.skin.ArrowComponent, net.sourceforge.plantuml.Url)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        double d0;
        net.sourceforge.plantuml.skin.rose.Rose r1;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.Url r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.skin.rose.Rose;

        r2 := @parameter2: net.sourceforge.plantuml.skin.ArrowComponent;

        r3 := @parameter3: net.sourceforge.plantuml.Url;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void <init>(double)>(d0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.rose.Rose skin> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.ArrowComponent arrowComponent> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.Url url> = r3;

        return;
    }

    protected net.sourceforge.plantuml.Url getUrl()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        net.sourceforge.plantuml.Url $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.Url url>;

        return $r1;
    }

    protected final void startUrl(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        net.sourceforge.plantuml.Url $r1, $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r3);

     label1:
        return;
    }

    protected final void endUrl(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        net.sourceforge.plantuml.Url $r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label1:
        return;
    }

    public abstract int getDirection(net.sourceforge.plantuml.graphic.StringBounder);

    protected net.sourceforge.plantuml.skin.rose.Rose getSkin()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.rose.Rose skin>;

        return $r1;
    }

    protected final net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.ArrowComponent arrowComponent>;

        return $r1;
    }

    public double getArrowOnlyWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public abstract double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder);

    public abstract double getArrowYEndLevel(net.sourceforge.plantuml.graphic.StringBounder);

    public abstract net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.NotePosition);

    protected final double getPaddingArrowHead()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double paddingArrowHead>;

        return $d0;
    }

    protected final void setPaddingArrowHead(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double paddingArrowHead> = d0;

        return;
    }

    public final double getMargin()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        return 5.0;
    }
}
