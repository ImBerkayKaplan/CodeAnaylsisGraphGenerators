public class net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private static final int SIZE;
    private final net.sourceforge.plantuml.graphic.TextBlock desc;
    private final net.sourceforge.plantuml.style.SName sname;
    private final net.sourceforge.plantuml.Url url;
    private double angle;

    public net.sourceforge.plantuml.style.StyleSignature getSignature()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r4, $r5;
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface r3;
        net.sourceforge.plantuml.style.StyleSignature $r6;

        r3 := @this: net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r4 = r3.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.style.SName sname>;

        $r0[2] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName circle>;

        $r0[3] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r6;
    }

    private net.sourceforge.plantuml.ugraphic.UStroke getUStroke()
    {
        net.sourceforge.plantuml.ugraphic.UStroke $r0;
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        $r0 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.SName)
    {
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2, $r6, $r13;
        net.sourceforge.plantuml.style.SName r3;
        net.sourceforge.plantuml.cucadiagram.Stereotype r4;
        boolean $z0;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5, $r12, r17;
        net.sourceforge.plantuml.FontParam $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r9;
        net.sourceforge.plantuml.graphic.TextBlock $r10;
        net.sourceforge.plantuml.Url $r11;
        net.sourceforge.plantuml.style.StyleSignature $r14;
        net.sourceforge.plantuml.style.StyleBuilder $r15;
        net.sourceforge.plantuml.style.Style $r16;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.style.SName;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.style.SName sname> = r3;

        r4 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r12 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.style.StyleSignature getSignature()>();

        $r15 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r16 = virtualinvoke $r14.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r15);

        specialinvoke $r12.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>($r13, $r16);

        r17 = $r12;

        goto label2;

     label1:
        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CLASS>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r6, $r7, r4);

        r17 = $r5;

     label2:
        $r8 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r10 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r17, $r9, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.graphic.TextBlock desc> = $r10;

        $r11 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.Url url> = $r11;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(10.0, 10.0);

        return $r0;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface r0;
        net.sourceforge.plantuml.ISkinParam $r1, $r5, $r13, $r47, $r51, $r53, $r57, $r59;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r2, $r6, $r15;
        net.sourceforge.plantuml.ColorParam[] $r3, $r7;
        net.sourceforge.plantuml.ColorParam $r4, $r8;
        net.sourceforge.plantuml.cucadiagram.IEntity $r9, $r14, $r21, $r30;
        net.sourceforge.plantuml.cucadiagram.LeafType $r10, $r11;
        net.sourceforge.plantuml.ugraphic.UEllipse $r12, $r45, r67;
        java.util.EnumMap $r16;
        java.lang.StringBuilder $r18, $r20, $r23, $r24, $r27, $r29, $r32;
        net.sourceforge.plantuml.ugraphic.UGroupType $r19, $r28;
        net.sourceforge.plantuml.cucadiagram.Code $r22, $r31;
        java.lang.String $r25, $r33;
        net.sourceforge.plantuml.ugraphic.UStroke $r35;
        net.sourceforge.plantuml.ugraphic.UGraphic $r36, $r42, r63, $r69, r70;
        net.sourceforge.plantuml.graphic.TextBlock $r37, $r41;
        net.sourceforge.plantuml.graphic.StringBounder $r38;
        net.sourceforge.plantuml.awt.geom.Dimension2D r39;
        double d0, $d1, d2, $d4, $d5, d6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r40;
        net.sourceforge.plantuml.Url $r43, $r44, $r71;
        net.sourceforge.plantuml.style.StyleSignature $r46;
        net.sourceforge.plantuml.style.StyleBuilder $r48;
        net.sourceforge.plantuml.style.PName $r49, $r55, $r61;
        net.sourceforge.plantuml.style.Value $r50, $r56, $r62;
        net.sourceforge.plantuml.api.ThemeStyle $r52, $r58;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r54, $r60;
        net.sourceforge.plantuml.style.Style r64;
        net.sourceforge.plantuml.ugraphic.color.HColor r65, r66;
        net.sourceforge.plantuml.ugraphic.UBackground $r68;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        r63 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d6 = 4.0;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r46 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.style.StyleSignature getSignature()>();

        $r47 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r48 = interfaceinvoke $r47.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r64 = virtualinvoke $r46.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r48);

        $r49 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r50 = virtualinvoke r64.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r49);

        $r51 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r52 = interfaceinvoke $r51.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r53 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r54 = interfaceinvoke $r53.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r65 = interfaceinvoke $r50.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r52, $r54);

        $r55 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r56 = virtualinvoke r64.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r55);

        $r57 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r58 = interfaceinvoke $r57.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r59 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r60 = interfaceinvoke $r59.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r66 = interfaceinvoke $r56.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r58, $r60);

        $r61 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r62 = virtualinvoke r64.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r61);

        d6 = interfaceinvoke $r62.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r3 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r4 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classBackground>;

        $r3[0] = $r4;

        r65 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r1, $r2, $r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r7 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r8 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam classBorder>;

        $r7[0] = $r8;

        r66 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r5, $r6, $r7);

     label2:
        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        $r11 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType LOLLIPOP_HALF>;

        if $r10 != $r11 goto label3;

        $r45 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: double angle>;

        $d5 = $d4 - 90.0;

        specialinvoke $r45.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double,double,double)>(10.0, 10.0, $d5, 180.0);

        r67 = $r45;

        goto label4;

     label3:
        $r12 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(10.0, 10.0);

        r67 = $r12;

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r13.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r15);

        if $z1 == 0 goto label4;

        virtualinvoke $r12.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>(d6);

     label4:
        $r68 = interfaceinvoke r65.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r69 = interfaceinvoke r63.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r68);

        r70 = interfaceinvoke $r69.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r66);

        $r71 = r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.Url url>;

        if $r71 == null goto label5;

        $r44 = r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r70.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r44);

     label5:
        $r16 = new java.util.EnumMap;

        specialinvoke $r16.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/ugraphic/UGroupType;");

        $r19 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType CLASS>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem ");

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" selected");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r25);

        $r28 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elem_");

        $r30 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Code getCode()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r33);

        interfaceinvoke r70.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r16);

        $r35 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.ugraphic.UStroke getUStroke()>();

        $r36 = interfaceinvoke r70.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r35);

        interfaceinvoke $r36.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r67);

        interfaceinvoke r70.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        $r37 = r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r38 = interfaceinvoke r70.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r39 = interfaceinvoke $r37.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r38);

        d0 = virtualinvoke r39.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = d0 / 2.0;

        d2 = 5.0 - $d1;

        $r41 = r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r40 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r40.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d2, 10.0);

        $r42 = interfaceinvoke r70.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r40);

        interfaceinvoke $r41.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r42);

        $r43 = r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: net.sourceforge.plantuml.Url url>;

        if $r43 == null goto label6;

        interfaceinvoke r70.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label6:
        return;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType CIRCLE_IN_RECT>;

        return $r0;
    }

    public void addImpact(double)
    {
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface;

        d0 := @parameter0: double;

        $d1 = d0 * 180.0;

        $d2 = $d1 / 3.141592653589793;

        $d3 = 180.0 - $d2;

        r0.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: double angle> = $d3;

        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: int SIZE> = 10;

        return;
    }
}
