public class net.sourceforge.plantuml.eps.EpsGraphicsMacro extends net.sourceforge.plantuml.eps.EpsGraphics
{
    private final net.sourceforge.plantuml.eps.PostScriptData data;
    private final net.sourceforge.plantuml.eps.PostScriptCommandMacro rquadto;
    private double posX;
    private double posY;
    private int macroCpt;
    private final java.util.Map macros;
    private net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress;

    public void <init>()
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        net.sourceforge.plantuml.eps.PostScriptData $r1;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r2, $r5;
        java.util.HashMap $r3;
        net.sourceforge.plantuml.eps.PostScriptCommandRaw $r4;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void <init>()>();

        $r1 = new net.sourceforge.plantuml.eps.PostScriptData;

        specialinvoke $r1.<net.sourceforge.plantuml.eps.PostScriptData: void <init>()>();

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptData data> = $r1;

        $r2 = new net.sourceforge.plantuml.eps.PostScriptCommandMacro;

        specialinvoke $r2.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void <init>(java.lang.String)>("rquadto");

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro rquadto> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.util.Map macros> = $r3;

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress> = null;

        $r5 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro rquadto>;

        $r4 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r4.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("3 index 3 index 4 2 roll rcurveto", 1);

        virtualinvoke $r5.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r4);

        return;
    }

    protected void append(java.lang.String, boolean)
    {
        boolean z0;
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        net.sourceforge.plantuml.eps.PostScriptCommandRaw $r1;
        java.lang.String r2;
        net.sourceforge.plantuml.eps.PostScriptData $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("  ");

        if $i0 == -1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r4;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptData data>;

        $r1 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r1.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>(r2, z0);

        virtualinvoke $r3.<net.sourceforge.plantuml.eps.PostScriptData: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r1);

        return;
    }

    protected java.lang.String getBodyString()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r2;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r3, r14;
        java.lang.String $r4, $r10, $r12, $r15;
        java.util.Map $r6;
        java.util.Set $r7;
        java.util.Iterator r8;
        boolean $z0;
        net.sourceforge.plantuml.eps.PostScriptData $r9;
        java.lang.Object $r13;

        r2 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro rquadto>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: java.lang.String getPostStringDefinition()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = r2.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.util.Map macros>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.eps.PostScriptCommandMacro) $r13;

        $r15 = virtualinvoke r14.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: java.lang.String getPostStringDefinition()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        goto label1;

     label2:
        $r9 = r2.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptData data>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.eps.PostScriptData: java.lang.String toPostString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public void newpath()
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        java.awt.Color $r1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>("0 setlinewidth", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>("[] 0 setdash", 1);

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.awt.Color getColor()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void appendColor(java.awt.Color)>($r1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>("newpath", 1);

        return;
    }

    public void closepath()
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        net.sourceforge.plantuml.eps.PostScriptCommandRaw $r1;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r2;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        $r1 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r1.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("closepath", 1);

        virtualinvoke $r2.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r1);

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void closeMacro()>();

        return;
    }

    public void fill(int)
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        if $r1 == null goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void closeMacro()>();

     label1:
        if i0 != 0 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>("eofill", 1);

        goto label3;

     label2:
        if i0 != 1 goto label3;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>("fill", 1);

     label3:
        return;
    }

    public void moveto(double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        net.sourceforge.plantuml.eps.PostScriptCommandMoveTo $r1;
        double d0, d1;
        net.sourceforge.plantuml.eps.PostScriptData $r2;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptData data>;

        $r1 = new net.sourceforge.plantuml.eps.PostScriptCommandMoveTo;

        specialinvoke $r1.<net.sourceforge.plantuml.eps.PostScriptCommandMoveTo: void <init>(double,double)>(d0, d1);

        virtualinvoke $r2.<net.sourceforge.plantuml.eps.PostScriptData: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r1);

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX> = d0;

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY> = d1;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void openMacro()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void ensureVisible(double,double)>(d0, d1);

        return;
    }

    public void lineto(double, double)
    {
        net.sourceforge.plantuml.eps.PostScriptCommandLineTo $r0;
        double d0, $d1, d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r1;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r3;

        r1 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.eps.PostScriptCommandLineTo;

        $d1 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX>;

        $d5 = d0 - $d1;

        $d3 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY>;

        $d4 = d2 - $d3;

        specialinvoke $r0.<net.sourceforge.plantuml.eps.PostScriptCommandLineTo: void <init>(double,double)>($d5, $d4);

        $r3 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        virtualinvoke $r3.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r0);

        r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX> = d0;

        r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY> = d2;

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void ensureVisible(double,double)>(d0, d2);

        return;
    }

    public void curveto(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.PostScriptCommandCurveTo $r0;
        double d0, $d1, d2, $d3, d4, $d5, d6, $d7, d8, $d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r1;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r3;

        r1 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d4 := @parameter2: double;

        d6 := @parameter3: double;

        d8 := @parameter4: double;

        d10 := @parameter5: double;

        $r0 = new net.sourceforge.plantuml.eps.PostScriptCommandCurveTo;

        $d1 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX>;

        $d17 = d0 - $d1;

        $d3 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY>;

        $d16 = d2 - $d3;

        $d5 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX>;

        $d15 = d4 - $d5;

        $d7 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY>;

        $d14 = d6 - $d7;

        $d9 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX>;

        $d13 = d8 - $d9;

        $d11 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY>;

        $d12 = d10 - $d11;

        specialinvoke $r0.<net.sourceforge.plantuml.eps.PostScriptCommandCurveTo: void <init>(double,double,double,double,double,double)>($d17, $d16, $d15, $d14, $d13, $d12);

        $r3 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        virtualinvoke $r3.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r0);

        r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX> = d8;

        r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY> = d10;

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void ensureVisible(double,double)>(d0, d2);

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void ensureVisible(double,double)>(d4, d6);

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void ensureVisible(double,double)>(d8, d10);

        return;
    }

    public void quadto(double, double, double, double)
    {
        net.sourceforge.plantuml.eps.PostScriptCommandQuadTo $r0;
        double d0, $d1, d2, $d3, d4, $d5, d6, $d7, $d8, $d9, $d10, $d11;
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r1;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r3;

        r1 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d4 := @parameter2: double;

        d6 := @parameter3: double;

        $r0 = new net.sourceforge.plantuml.eps.PostScriptCommandQuadTo;

        $d1 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX>;

        $d11 = d0 - $d1;

        $d3 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY>;

        $d10 = d2 - $d3;

        $d5 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX>;

        $d9 = d4 - $d5;

        $d7 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY>;

        $d8 = d6 - $d7;

        specialinvoke $r0.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: void <init>(double,double,double,double)>($d11, $d10, $d9, $d8);

        $r3 = r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        virtualinvoke $r3.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r0);

        r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posX> = d4;

        r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: double posY> = d6;

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void ensureVisible(double,double)>(d0, d2);

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void ensureVisible(double,double)>(d4, d6);

        return;
    }

    private void openMacro()
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r1, $r2;
        java.lang.String $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        if $r1 == null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r2 = new net.sourceforge.plantuml.eps.PostScriptCommandMacro;

        $r3 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.lang.String macroName()>();

        specialinvoke $r2.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void <init>(java.lang.String)>($r3);

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress> = $r2;

        return;
    }

    private java.lang.String macroName()
    {
        java.lang.StringBuilder $r0, $r1, $r4;
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r2;
        int $i0;
        java.lang.String $r3, $r5;

        r2 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P$");

        $i0 = r2.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: int macroCpt>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i0, 36);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void closeMacro()
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r1, $r2, $r6, $r8;
        java.util.Map $r3, $r7;
        java.lang.Object $r4;
        java.lang.String r5, $r9, $r11;
        int $i0, $i1;
        java.lang.IllegalStateException $r12;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        if $r1 != null goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.util.Map macros>;

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.lang.String) $r4;

        if r5 != null goto label2;

        $r7 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.util.Map macros>;

        $r8 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        $r6 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress>;

        $r9 = virtualinvoke $r6.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: java.lang.String getName()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r11 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.lang.String macroName()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r11, 1);

        $i0 = r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: int macroCpt>;

        $i1 = $i0 + 1;

        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: int macroCpt> = $i1;

        goto label3;

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>(r5, 1);

     label3:
        r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: net.sourceforge.plantuml.eps.PostScriptCommandMacro macroInProgress> = null;

        return;
    }

    protected void epsHLine(double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        java.lang.String $r2, $r5, $r8, $r12, $r17, $r22, $r27;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, l9, $l10, $l11, $l13, $l14, l16, l17;
        byte $b12, $b15;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r8, 1);

        $d3 = d2 - d1;

        $d4 = $d3 * 100.0;

        l0 = (long) $d4;

        $l1 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $l2 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashSpace()>();

        $l3 = $l1 + $l2;

        l16 = l0 / $l3;

        $d5 = d1 * 100.0;

        $l4 = (long) $d5;

        $l5 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $l6 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashSpace()>();

        $l7 = $l5 + $l6;

        $l8 = l16 * $l7;

        l9 = $l4 + $l8;

        $d6 = d2 * 100.0;

        $l10 = (long) $d6;

        l17 = $l10 - l9;

        $l11 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $b12 = l17 cmp $l11;

        if $b12 <= 0 goto label1;

        l16 = l16 + 1L;

        l17 = 0L;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r12, 1);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 ");

        $l13 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rlineto");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r17, 1);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 ");

        $l14 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashSpace()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l14);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rmoveto");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r22, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>("} repeat", 1);

        $b15 = l17 cmp 0L;

        if $b15 <= 0 goto label2;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rlineto");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r27, 1);

     label2:
        return;
    }

    protected void epsVLine(double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacro r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r25;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        java.lang.String $r2, $r5, $r8, $r12, $r17, $r22, $r26;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, l9, $l10, $l11, $l13, $l14, l16, l17;
        byte $b12, $b15;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacro;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphicsMacro: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r8, 1);

        $d3 = d2 - d0;

        $d4 = $d3 * 100.0;

        l0 = (long) $d4;

        $l1 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $l2 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashSpace()>();

        $l3 = $l1 + $l2;

        l16 = l0 / $l3;

        $d5 = d0 * 100.0;

        $l4 = (long) $d5;

        $l5 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $l6 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashSpace()>();

        $l7 = $l5 + $l6;

        $l8 = l16 * $l7;

        l9 = $l4 + $l8;

        $d6 = d2 * 100.0;

        $l10 = (long) $d6;

        l17 = $l10 - l9;

        $l11 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $b12 = l17 cmp $l11;

        if $b12 <= 0 goto label1;

        l16 = l16 + 1L;

        l17 = 0L;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r12, 1);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $l13 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashVisible()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 rlineto");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r17, 1);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $l14 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: long getDashSpace()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l14);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 rmoveto");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r22, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>("} repeat", 1);

        $b15 = l17 cmp 0L;

        if $b15 <= 0 goto label2;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 rlineto");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void append(java.lang.String,boolean)>($r26, 1);

     label2:
        return;
    }
}
