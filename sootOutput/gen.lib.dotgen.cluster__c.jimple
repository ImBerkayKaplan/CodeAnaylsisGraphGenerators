public class gen.lib.dotgen.cluster__c extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        gen.lib.dotgen.cluster__c r0;

        r0 := @this: gen.lib.dotgen.cluster__c;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static h.ST_Agnode_s map_interclust_node(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, r9;
        h.ST_Agraph_s $r1, $r3, $r4;
        boolean $z0;
        smetana.core.CArrayOfStar $r5;
        int $i0;
        java.lang.Object $r6;
        java.lang.Throwable $r7;

        r0 := @parameter0: h.ST_Agnode_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("8bd317q0mykfu6wpr3e4cxmh2", "map_interclust_node");

     label1:
        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agraph_s ND_clust(h.ST_Agnode_s)>(r0);

        if $r1 == null goto label2;

        $r3 = staticinvoke <smetana.core.Macro: h.ST_Agraph_s ND_clust(h.ST_Agnode_s)>(r0);

        $z0 = staticinvoke <smetana.core.Macro: boolean GD_expanded(h.ST_Agraph_s)>($r3);

        if $z0 == 0 goto label3;

     label2:
        r9 = r0;

        goto label4;

     label3:
        $r4 = staticinvoke <smetana.core.Macro: h.ST_Agraph_s ND_clust(h.ST_Agnode_s)>(r0);

        $r5 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>($r4);

        $i0 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r0);

        $r6 = virtualinvoke $r5.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>($i0);

        r9 = (h.ST_Agnode_s) $r6;

     label4:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("8bd317q0mykfu6wpr3e4cxmh2", "map_interclust_node");

        return r9;

     label5:
        $r7 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("8bd317q0mykfu6wpr3e4cxmh2", "map_interclust_node");

        throw $r7;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public static void make_slots(h.ST_Agraph_s, int, int, int)
    {
        h.ST_Agraph_s r0;
        smetana.core.CArray $r1, $r5, $r8, $r11, $r15, $r18, $r21;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22;
        java.lang.Object $r2, $r6, $r9, $r12, $r14, $r16, $r19, $r22, $r24;
        h.ST_rank_t $r3, $r7, $r10, $r13, $r17, $r20, $r23;
        smetana.core.CArrayOfStar r4;
        java.lang.Throwable $r25;
        h.ST_Agnode_s r27, r28;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("5ib4nnt2ah5fdd22zs0xds29r", "make_slots");

     label01:
        $r1 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r2 = virtualinvoke $r1.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        $r3 = (h.ST_rank_t) $r2;

        r4 = $r3.<h.ST_rank_t: smetana.core.CArrayOfStar v>;

        if i1 > 0 goto label05;

        $i11 = i3 - i1;

        i19 = $i11 + 1;

     label02:
        $r15 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r16 = virtualinvoke $r15.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        $r17 = (h.ST_rank_t) $r16;

        $i12 = $r17.<h.ST_rank_t: int n>;

        if i19 >= $i12 goto label03;

        $r24 = virtualinvoke r4.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i19);

        r27 = (h.ST_Agnode_s) $r24;

        $i16 = i19 + i1;

        $i17 = $i16 - 1;

        staticinvoke <smetana.core.Macro: void ND_order(h.ST_Agnode_s,int)>(r27, $i17);

        $i18 = staticinvoke <smetana.core.Macro: int ND_order(h.ST_Agnode_s)>(r27);

        virtualinvoke r4.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>($i18, r27);

        i19 = i19 + 1;

        goto label02;

     label03:
        $r18 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r19 = virtualinvoke $r18.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        $r20 = (h.ST_rank_t) $r19;

        $i13 = $r20.<h.ST_rank_t: int n>;

        $i14 = $i13 + i1;

        i20 = $i14 - 1;

     label04:
        $r21 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r22 = virtualinvoke $r21.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        $r23 = (h.ST_rank_t) $r22;

        $i15 = $r23.<h.ST_rank_t: int n>;

        if i20 >= $i15 goto label09;

        virtualinvoke r4.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>(i20, null);

        i20 = i20 + 1;

        goto label04;

     label05:
        $r5 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r6 = virtualinvoke $r5.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        $r7 = (h.ST_rank_t) $r6;

        $i2 = $r7.<h.ST_rank_t: int n>;

        i21 = $i2 - 1;

     label06:
        if i21 <= i3 goto label07;

        $r14 = virtualinvoke r4.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i21);

        r28 = (h.ST_Agnode_s) $r14;

        $i8 = i21 + i1;

        $i9 = $i8 - 1;

        staticinvoke <smetana.core.Macro: void ND_order(h.ST_Agnode_s,int)>(r28, $i9);

        $i10 = staticinvoke <smetana.core.Macro: int ND_order(h.ST_Agnode_s)>(r28);

        virtualinvoke r4.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>($i10, r28);

        i21 = i21 + -1;

        goto label06;

     label07:
        i22 = i3 + 1;

     label08:
        $i4 = i3 + i1;

        if i22 >= $i4 goto label09;

        virtualinvoke r4.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>(i22, null);

        i22 = i22 + 1;

        goto label08;

     label09:
        $r8 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r9 = virtualinvoke $r8.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        $r10 = (h.ST_rank_t) $r9;

        $r11 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r12 = virtualinvoke $r11.<smetana.core.CArray: java.lang.Object get__(int)>(i0);

        $r13 = (h.ST_rank_t) $r12;

        $i5 = $r13.<h.ST_rank_t: int n>;

        $i6 = $i5 + i1;

        $i7 = $i6 - 1;

        $r10.<h.ST_rank_t: int n> = $i7;

     label10:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("5ib4nnt2ah5fdd22zs0xds29r", "make_slots");

        goto label13;

     label11:
        $r25 := @caughtexception;

     label12:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("5ib4nnt2ah5fdd22zs0xds29r", "make_slots");

        throw $r25;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static h.ST_Agnode_s clone_vn(h.ST_Agraph_s, h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, r2;
        int i0, $i1, $i2;
        h.ST_Agraph_s r1;
        double $d0, $d1;
        java.lang.UnsupportedOperationException $r6;
        java.lang.Throwable $r7;

        r1 := @parameter0: h.ST_Agraph_s;

        r0 := @parameter1: h.ST_Agnode_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("d4mwxesl56uh9dyttg9cjlq70", "clone_vn");

     label1:
        i0 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r0);

        $i1 = staticinvoke <smetana.core.Macro: int ND_order(h.ST_Agnode_s)>(r0);

        staticinvoke <gen.lib.dotgen.cluster__c: void make_slots(h.ST_Agraph_s,int,int,int)>(r1, i0, $i1, 2);

        r2 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agnode_s virtual_node(h.ST_Agraph_s)>(r1);

        $d0 = staticinvoke <smetana.core.Macro: double ND_lw(h.ST_Agnode_s)>(r0);

        staticinvoke <smetana.core.Macro: void ND_lw(h.ST_Agnode_s,double)>(r2, $d0);

        $d1 = staticinvoke <smetana.core.Macro: double ND_rw(h.ST_Agnode_s)>(r0);

        staticinvoke <smetana.core.Macro: void ND_rw(h.ST_Agnode_s,double)>(r2, $d1);

        $i2 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r0);

        staticinvoke <smetana.core.Macro: void ND_rank(h.ST_Agnode_s,int)>(r2, $i2);

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("adc0qfdhup29vh8qu1cwl5jgj");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("v7vqc9l7ge2bfdwnw11z7rzi");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("c24nfmv9i7o5eoqaymbibp7m7");

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;

     label2:
        $r7 := @caughtexception;

     label3:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("d4mwxesl56uh9dyttg9cjlq70", "clone_vn");

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label2;
    }

    public static void map_path(h.ST_Agnode_s, h.ST_Agnode_s, h.ST_Agedge_s, h.ST_Agedge_s, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        h.ST_Agnode_s $r0, r1, r2, $r3, $r4, $r5, $r7, $r11, $r13, $r18, $r20, r26, r27, $r31;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i26;
        h.ST_Agedge_s r6, $r12, $r19, r24, r28, r30, r33;
        h.ST_elist $r8, $r14;
        smetana.core.CArrayOfStar $r9, $r15;
        java.lang.Object $r10, $r16;
        h.ST_Agraph_s $r17;
        java.lang.AssertionError $r21;
        java.lang.Throwable $r22;

        r1 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_Agnode_s;

        r6 := @parameter2: h.ST_Agedge_s;

        r24 := @parameter3: h.ST_Agedge_s;

        i4 := @parameter4: int;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("6o86r59v2ujlxqcw7761y6o5b", "map_path");

     label01:
        $z0 = <gen.lib.dotgen.cluster__c: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i18 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r1);

        $i19 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r2);

        if $i18 < $i19 goto label02;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label02:
        $r0 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r24);

        $z1 = staticinvoke <smetana.core.JUtils: boolean EQ(java.lang.Object,java.lang.Object)>($r0, r1);

        if $z1 == 0 goto label04;

        $r20 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r24);

        $z6 = staticinvoke <smetana.core.JUtils: boolean EQ(java.lang.Object,java.lang.Object)>($r20, r2);

        if $z6 == 0 goto label04;

     label03:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6o86r59v2ujlxqcw7761y6o5b", "map_path");

        return;

     label04:
        $i0 = staticinvoke <smetana.core.Macro: int ED_count(h.ST_Agedge_s)>(r24);

        if $i0 <= 1 goto label10;

        staticinvoke <smetana.core.Macro: void ED_to_virt(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, null);

        $i9 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r2);

        $i10 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r1);

        $i11 = $i9 - $i10;

        if $i11 != 1 goto label06;

        $r19 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s find_fast_edge(h.ST_Agnode_s,h.ST_Agnode_s)>(r1, r2);

        if $r19 == null goto label06;

        $z5 = staticinvoke <gen.lib.dotgen.position__c: boolean ports_eq(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, $r19);

        if $z5 == 0 goto label06;

        staticinvoke <gen.lib.dotgen.fastgr__c: void merge_oneway(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, $r19);

        $i16 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>(r1);

        if $i16 != 0 goto label05;

        $i17 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>(r2);

        if $i17 != 0 goto label05;

        staticinvoke <gen.lib.dotgen.fastgr__c: void other_edge(h.ST_Agedge_s)>(r6);

     label05:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6o86r59v2ujlxqcw7761y6o5b", "map_path");

        return;

     label06:
        r26 = r1;

        i20 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r1);

     label07:
        $i21 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r2);

        if i20 >= $i21 goto label16;

        $i12 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r2);

        $i13 = $i12 - 1;

        if i20 >= $i13 goto label08;

        $r17 = staticinvoke <gen.lib.dotgen.dotinit__c: h.ST_Agraph_s dot_root(h.ST_Agobj_s)>(r1);

        $r18 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r24);

        r27 = staticinvoke <gen.lib.dotgen.cluster__c: h.ST_Agnode_s clone_vn(h.ST_Agraph_s,h.ST_Agnode_s)>($r17, $r18);

        goto label09;

     label08:
        r27 = r2;

     label09:
        r28 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s virtual_edge(h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s)>(r26, r27, r6);

        staticinvoke <smetana.core.Macro: void ED_edge_type(h.ST_Agedge_s,int)>(r28, i4);

        r26 = r27;

        $i14 = staticinvoke <smetana.core.Macro: int ED_count(h.ST_Agedge_s)>(r24);

        $i15 = $i14 - 1;

        staticinvoke <smetana.core.Macro: void ED_count(h.ST_Agedge_s,int)>(r24, $i15);

        $r13 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r24);

        $r14 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>($r13);

        $r15 = $r14.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r16 = virtualinvoke $r15.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        r24 = (h.ST_Agedge_s) $r16;

        i20 = i20 + 1;

        goto label07;

     label10:
        $i1 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r2);

        $i2 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r1);

        $i3 = $i1 - $i2;

        if $i3 != 1 goto label12;

        $r12 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s find_fast_edge(h.ST_Agnode_s,h.ST_Agnode_s)>(r1, r2);

        r24 = $r12;

        if $r12 == null goto label11;

        $z4 = staticinvoke <gen.lib.dotgen.position__c: boolean ports_eq(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, $r12);

        if $z4 == 0 goto label11;

        staticinvoke <smetana.core.Macro: void ED_to_virt(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, $r12);

        staticinvoke <smetana.core.Macro: void ED_edge_type(h.ST_Agedge_s,int)>($r12, i4);

        $i5 = staticinvoke <smetana.core.Macro: int ED_count(h.ST_Agedge_s)>($r12);

        $i6 = $i5 + 1;

        staticinvoke <smetana.core.Macro: void ED_count(h.ST_Agedge_s,int)>($r12, $i6);

        $i7 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>(r1);

        if $i7 != 0 goto label12;

        $i8 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>(r2);

        if $i8 != 0 goto label12;

        staticinvoke <gen.lib.dotgen.fastgr__c: void other_edge(h.ST_Agedge_s)>(r6);

        goto label12;

     label11:
        staticinvoke <smetana.core.Macro: void ED_to_virt(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, null);

        r24 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s virtual_edge(h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s)>(r1, r2, r6);

        staticinvoke <smetana.core.Macro: void ED_edge_type(h.ST_Agedge_s,int)>(r24, i4);

     label12:
        $i22 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r2);

        $i23 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r1);

        $i24 = $i22 - $i23;

        if $i24 <= 1 goto label16;

        $r3 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r24);

        $z2 = staticinvoke <smetana.core.JUtils: boolean NEQ(java.lang.Object,java.lang.Object)>($r3, r1);

        if $z2 == 0 goto label13;

        staticinvoke <smetana.core.Macro: void ED_to_virt(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, null);

        $r11 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r24);

        r30 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s virtual_edge(h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s)>(r1, $r11, r6);

        staticinvoke <smetana.core.Macro: void ED_to_virt(h.ST_Agedge_s,h.ST_Agedge_s)>(r6, r30);

        staticinvoke <gen.lib.dotgen.fastgr__c: void delete_fast_edge(h.ST_Agedge_s)>(r24);

        goto label14;

     label13:
        r30 = r24;

     label14:
        $r31 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r30);

        $i25 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r31);

        $i26 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r2);

        if $i25 == $i26 goto label15;

        $r7 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r30);

        $r8 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>($r7);

        $r9 = $r8.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r10 = virtualinvoke $r9.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        r30 = (h.ST_Agedge_s) $r10;

        goto label14;

     label15:
        $r4 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r30);

        $z3 = staticinvoke <smetana.core.JUtils: boolean NEQ(java.lang.Object,java.lang.Object)>($r4, r2);

        if $z3 == 0 goto label16;

        $r5 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r30);

        r33 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s virtual_edge(h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s)>($r5, r2, r6);

        staticinvoke <smetana.core.Macro: void ED_edge_type(h.ST_Agedge_s,int)>(r33, i4);

        staticinvoke <gen.lib.dotgen.fastgr__c: void delete_fast_edge(h.ST_Agedge_s)>(r30);

     label16:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6o86r59v2ujlxqcw7761y6o5b", "map_path");

        goto label19;

     label17:
        $r22 := @caughtexception;

     label18:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6o86r59v2ujlxqcw7761y6o5b", "map_path");

        throw $r22;

     label19:
        return;

        catch java.lang.Throwable from label01 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public static void make_interclust_chain(h.ST_Agraph_s, h.ST_Agnode_s, h.ST_Agnode_s, h.ST_Agedge_s)
    {
        h.ST_Agnode_s r0, r1, r2, r3;
        boolean $z0, $z1;
        h.ST_Agedge_s r4, $r8;
        java.lang.Throwable $r5;
        h.ST_Agraph_s r7;
        byte b0;

        r7 := @parameter0: h.ST_Agraph_s;

        r0 := @parameter1: h.ST_Agnode_s;

        r2 := @parameter2: h.ST_Agnode_s;

        r4 := @parameter3: h.ST_Agedge_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("69xbflgja0gvrsl5xcv7o7dia", "make_interclust_chain");

     label1:
        r1 = staticinvoke <gen.lib.dotgen.cluster__c: h.ST_Agnode_s map_interclust_node(h.ST_Agnode_s)>(r0);

        r3 = staticinvoke <gen.lib.dotgen.cluster__c: h.ST_Agnode_s map_interclust_node(h.ST_Agnode_s)>(r2);

        $z0 = staticinvoke <smetana.core.JUtils: boolean EQ(java.lang.Object,java.lang.Object)>(r1, r0);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <smetana.core.JUtils: boolean EQ(java.lang.Object,java.lang.Object)>(r3, r2);

        if $z1 == 0 goto label2;

        b0 = 1;

        goto label3;

     label2:
        b0 = 5;

     label3:
        $r8 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s ED_to_virt(h.ST_Agedge_s)>(r4);

        staticinvoke <gen.lib.dotgen.cluster__c: void map_path(h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s,h.ST_Agedge_s,int)>(r1, r3, r4, $r8, b0);

     label4:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("69xbflgja0gvrsl5xcv7o7dia", "make_interclust_chain");

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("69xbflgja0gvrsl5xcv7o7dia", "make_interclust_chain");

        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void interclexp(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, r1;
        h.ST_Agedge_s r2, $r13, $r19, $r20, r24, r25, r26;
        boolean $z0, $z1, $z2;
        h.ST_Agnode_s $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r17, $r18, r23;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Throwable $r21;

        r0 := @parameter0: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("6g2m2y44x66lajznvnon2gubv", "interclexp");

     label01:
        r1 = staticinvoke <gen.lib.dotgen.dotinit__c: h.ST_Agraph_s dot_root(h.ST_Agobj_s)>(r0);

        r23 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agfstnode(h.ST_Agraph_s)>(r0);

     label02:
        if r23 == null goto label14;

        r24 = null;

        r25 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agfstedge(h.ST_Agraph_s,h.ST_Agnode_s)>(r1, r23);

     label03:
        if r25 == null goto label13;

        r2 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agnxtedge(h.ST_Agraph_s,h.ST_Agedge_s,h.ST_Agnode_s)>(r1, r25, r23);

        $z0 = staticinvoke <gen.lib.cgraph.obj__c: boolean agcontains(h.ST_Agraph_s,h.ST_Agobj_s)>(r0, r25);

        if $z0 == 0 goto label04;

        goto label12;

     label04:
        r26 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGMKOUT(h.ST_Agedge_s)>(r25);

        $z1 = staticinvoke <gen.lib.dotgen.class2__c: boolean mergeable(h.ST_Agedge_s,h.ST_Agedge_s)>(r24, r26);

        if $z1 == 0 goto label08;

        $r17 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r26);

        $i4 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r17);

        $r18 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r26);

        $i5 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r18);

        if $i4 != $i5 goto label05;

        staticinvoke <smetana.core.Macro: void ED_to_virt(h.ST_Agedge_s,h.ST_Agedge_s)>(r26, r24);

        goto label06;

     label05:
        staticinvoke <smetana.core.Macro: void ED_to_virt(h.ST_Agedge_s,h.ST_Agedge_s)>(r26, null);

     label06:
        $r19 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s ED_to_virt(h.ST_Agedge_s)>(r24);

        if $r19 != null goto label07;

        goto label12;

     label07:
        $r20 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s ED_to_virt(h.ST_Agedge_s)>(r24);

        staticinvoke <gen.lib.dotgen.class2__c: void merge_chain(h.ST_Agraph_s,h.ST_Agedge_s,h.ST_Agedge_s,boolean)>(r0, r26, $r20, 0);

        staticinvoke <gen.lib.dotgen.fastgr__c: void safe_other_edge(h.ST_Agedge_s)>(r26);

        goto label12;

     label08:
        $r3 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r26);

        $i0 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r3);

        $r4 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r26);

        $i1 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r4);

        if $i0 != $i1 goto label10;

        $r11 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r26);

        $r12 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r26);

        $r13 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s find_flat_edge(h.ST_Agnode_s,h.ST_Agnode_s)>($r11, $r12);

        if $r13 != null goto label09;

        staticinvoke <gen.lib.dotgen.fastgr__c: void flat_edge(h.ST_Agraph_s,h.ST_Agedge_s)>(r1, r26);

        r24 = r26;

        goto label12;

     label09:
        $z2 = staticinvoke <smetana.core.JUtils: boolean NEQ(java.lang.Object,java.lang.Object)>(r26, $r13);

        if $z2 == 0 goto label12;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("ckfinb4h4twp1ry02y9peyhz");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("dg3e0udctqa7xtfynplc7wdpj");

        goto label12;

     label10:
        $r5 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r26);

        $i2 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r5);

        $r6 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r26);

        $i3 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r6);

        if $i2 <= $i3 goto label11;

        $r9 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r26);

        $r10 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r26);

        staticinvoke <gen.lib.dotgen.cluster__c: void make_interclust_chain(h.ST_Agraph_s,h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s)>(r1, $r9, $r10, r26);

        r24 = r26;

        goto label12;

     label11:
        $r7 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r26);

        $r8 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r26);

        staticinvoke <gen.lib.dotgen.cluster__c: void make_interclust_chain(h.ST_Agraph_s,h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s)>(r1, $r7, $r8, r26);

        r24 = r26;

     label12:
        r25 = r2;

        goto label03;

     label13:
        r23 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agnxtnode(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r23);

        goto label02;

     label14:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6g2m2y44x66lajznvnon2gubv", "interclexp");

        goto label17;

     label15:
        $r21 := @caughtexception;

     label16:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6g2m2y44x66lajznvnon2gubv", "interclexp");

        throw $r21;

     label17:
        return;

        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public static void merge_ranks(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, r1, $r35;
        int $i0, $i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, i15;
        smetana.core.CArray $r2, $r5, $r11, $r14, $r17, $r22, $r25, $r31, $r36;
        java.lang.Object $r3, $r6, $r9, $r12, $r15, $r18, $r23, $r26, $r29, $r32, $r37;
        h.ST_rank_t $r4, $r7, $r13, $r16, $r19, $r24, $r27, $r33, $r38;
        smetana.core.CArrayOfStar $r8, $r20, $r21, $r28, $r34;
        h.ST_Agnode_s $r10, r30;
        java.lang.Throwable $r39;

        r0 := @parameter0: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("85nhs7tnmwunw0fsjj1kxao7l", "merge_ranks");

     label01:
        r1 = staticinvoke <gen.lib.dotgen.dotinit__c: h.ST_Agraph_s dot_root(h.ST_Agobj_s)>(r0);

        $i0 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r0);

        if $i0 <= 0 goto label02;

        $r36 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r1);

        $i10 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r0);

        $i11 = $i10 - 1;

        $r37 = virtualinvoke $r36.<smetana.core.CArray: java.lang.Object get__(int)>($i11);

        $r38 = (h.ST_rank_t) $r37;

        $r38.<h.ST_rank_t: int valid> = 0;

     label02:
        i12 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r0);

     label03:
        $i13 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r0);

        if i12 > $i13 goto label07;

        $r5 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r6 = virtualinvoke $r5.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r7 = (h.ST_rank_t) $r6;

        i2 = $r7.<h.ST_rank_t: int n>;

        $r8 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r0);

        $r9 = virtualinvoke $r8.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i12);

        $r10 = (h.ST_Agnode_s) $r9;

        $i3 = staticinvoke <smetana.core.Macro: int ND_order(h.ST_Agnode_s)>($r10);

        i14 = $i3;

        staticinvoke <gen.lib.dotgen.cluster__c: void make_slots(h.ST_Agraph_s,int,int,int)>(r1, i12, $i3, i2);

        i15 = 0;

     label04:
        $r11 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r12 = virtualinvoke $r11.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r13 = (h.ST_rank_t) $r12;

        $i5 = $r13.<h.ST_rank_t: int n>;

        if i15 >= $i5 goto label06;

        $r25 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r26 = virtualinvoke $r25.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r27 = (h.ST_rank_t) $r26;

        $r28 = $r27.<h.ST_rank_t: smetana.core.CArrayOfStar v>;

        $r29 = virtualinvoke $r28.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i15);

        r30 = (h.ST_Agnode_s) $r29;

        $r31 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r1);

        $r32 = virtualinvoke $r31.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r33 = (h.ST_rank_t) $r32;

        $r34 = $r33.<h.ST_rank_t: smetana.core.CArrayOfStar v>;

        virtualinvoke $r34.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>(i14, r30);

        $i6 = i14;

        i14 = i14 + 1;

        staticinvoke <smetana.core.Macro: void ND_order(h.ST_Agnode_s,int)>(r30, $i6);

        $i7 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>(r30);

        if $i7 != 1 goto label05;

        $r35 = staticinvoke <gen.lib.cgraph.obj__c: h.ST_Agraph_s agroot(h.ST_Agobj_s)>(r1);

        r30.<h.ST_Agnode_s: h.ST_Agraph_s root> = $r35;

     label05:
        staticinvoke <gen.lib.dotgen.fastgr__c: void delete_fast_node(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r30);

        staticinvoke <gen.lib.dotgen.fastgr__c: void fast_node(h.ST_Agraph_s,h.ST_Agnode_s)>(r1, r30);

        $i8 = staticinvoke <smetana.core.Macro: int GD_n_nodes(h.ST_Agraph_s)>(r1);

        $i9 = $i8 + 1;

        staticinvoke <smetana.core.Macro: void GD_n_nodes(h.ST_Agraph_s,int)>(r1, $i9);

        i15 = i15 + 1;

        goto label04;

     label06:
        $r14 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r0);

        $r15 = virtualinvoke $r14.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r16 = (h.ST_rank_t) $r15;

        $r17 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r1);

        $r18 = virtualinvoke $r17.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r19 = (h.ST_rank_t) $r18;

        $r20 = $r19.<h.ST_rank_t: smetana.core.CArrayOfStar v>;

        $r21 = virtualinvoke $r20.<smetana.core.CArrayOfStar: smetana.core.CArrayOfStar plus_(int)>($i3);

        $r16.<h.ST_rank_t: smetana.core.CArrayOfStar v> = $r21;

        $r22 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r1);

        $r23 = virtualinvoke $r22.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r24 = (h.ST_rank_t) $r23;

        $r24.<h.ST_rank_t: int valid> = 0;

        i12 = i12 + 1;

        goto label03;

     label07:
        $i1 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r1);

        if i12 >= $i1 goto label08;

        $r2 = staticinvoke <smetana.core.Macro: smetana.core.CArray GD_rank(h.ST_Agraph_s)>(r1);

        $r3 = virtualinvoke $r2.<smetana.core.CArray: java.lang.Object get__(int)>(i12);

        $r4 = (h.ST_rank_t) $r3;

        $r4.<h.ST_rank_t: int valid> = 0;

     label08:
        staticinvoke <smetana.core.Macro: void GD_expanded(h.ST_Agraph_s,boolean)>(r0, 1);

     label09:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("85nhs7tnmwunw0fsjj1kxao7l", "merge_ranks");

        goto label12;

     label10:
        $r39 := @caughtexception;

     label11:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("85nhs7tnmwunw0fsjj1kxao7l", "merge_ranks");

        throw $r39;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static void remove_rankleaders(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, $r12;
        int $i0, i1;
        smetana.core.CArrayOfStar $r1, $r5, $r9, $r13;
        java.lang.Object $r2, $r6, $r10;
        h.ST_Agnode_s r3;
        h.ST_elist $r4, $r8;
        h.ST_Agedge_s $r7, $r11;
        java.lang.Throwable $r14;

        r0 := @parameter0: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("c9p7dm16i13qktnh95os0sv58", "remove_rankleaders");

     label1:
        i1 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r0);

     label2:
        $i0 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r0);

        if i1 > $i0 goto label6;

        $r1 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r0);

        $r2 = virtualinvoke $r1.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i1);

        r3 = (h.ST_Agnode_s) $r2;

     label3:
        $r4 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>(r3);

        $r5 = $r4.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r6 = virtualinvoke $r5.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        $r7 = (h.ST_Agedge_s) $r6;

        if $r7 == null goto label4;

        staticinvoke <gen.lib.dotgen.fastgr__c: void delete_fast_edge(h.ST_Agedge_s)>($r7);

        goto label3;

     label4:
        $r8 = staticinvoke <smetana.core.Macro: h.ST_elist ND_in(h.ST_Agnode_s)>(r3);

        $r9 = $r8.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r10 = virtualinvoke $r9.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        $r11 = (h.ST_Agedge_s) $r10;

        if $r11 == null goto label5;

        staticinvoke <gen.lib.dotgen.fastgr__c: void delete_fast_edge(h.ST_Agedge_s)>($r11);

        goto label4;

     label5:
        $r12 = staticinvoke <gen.lib.dotgen.dotinit__c: h.ST_Agraph_s dot_root(h.ST_Agobj_s)>(r0);

        staticinvoke <gen.lib.dotgen.fastgr__c: void delete_fast_node(h.ST_Agraph_s,h.ST_Agnode_s)>($r12, r3);

        $r13 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r0);

        virtualinvoke $r13.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>(i1, null);

        i1 = i1 + 1;

        goto label2;

     label6:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("c9p7dm16i13qktnh95os0sv58", "remove_rankleaders");

        goto label9;

     label7:
        $r14 := @caughtexception;

     label8:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("c9p7dm16i13qktnh95os0sv58", "remove_rankleaders");

        throw $r14;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static void expand_cluster(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_nlist_t $r1, $r2;
        smetana.core.CArrayOfStar $r3;
        h.ST_Agnode_s $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("ecrplg8hsyl484f9kxc5xp0go", "expand_cluster");

     label1:
        staticinvoke <gen.lib.dotgen.class2__c: void class2(h.ST_Agraph_s)>(r0);

        $r1 = staticinvoke <smetana.core.Macro: h.ST_nlist_t GD_comp(h.ST_Agraph_s)>(r0);

        $r1.<h.ST_nlist_t: int size> = 1;

        $r2 = staticinvoke <smetana.core.Macro: h.ST_nlist_t GD_comp(h.ST_Agraph_s)>(r0);

        $r3 = $r2.<h.ST_nlist_t: smetana.core.CArrayOfStar list>;

        $r4 = staticinvoke <smetana.core.Macro: h.ST_Agnode_s GD_nlist(h.ST_Agraph_s)>(r0);

        virtualinvoke $r3.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>(0, $r4);

        staticinvoke <gen.lib.dotgen.mincross__c: void allocate_ranks(h.ST_Agraph_s)>(r0);

        staticinvoke <gen.lib.dotgen.mincross__c: void build_ranks(h.ST_Agraph_s,int)>(r0, 0);

        staticinvoke <gen.lib.dotgen.cluster__c: void merge_ranks(h.ST_Agraph_s)>(r0);

        staticinvoke <gen.lib.dotgen.cluster__c: void interclexp(h.ST_Agraph_s)>(r0);

        staticinvoke <gen.lib.dotgen.cluster__c: void remove_rankleaders(h.ST_Agraph_s)>(r0);

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("ecrplg8hsyl484f9kxc5xp0go", "expand_cluster");

        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("ecrplg8hsyl484f9kxc5xp0go", "expand_cluster");

        throw $r5;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void mark_clusters(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, r3;
        int $i0, $i1, $i2, $i3, i4;
        smetana.core.CArrayOfStar $r1, $r10;
        java.lang.Object $r2, $r11;
        h.ST_Agnode_s $r4, $r6, $r8, r14, r15, r16;
        h.ST_Agedge_s $r5, r17, r18;
        h.ST_elist $r9;
        java.lang.Throwable $r12;

        r0 := @parameter0: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("cxuirggihlap2iv2khmb1w5l5", "mark_clusters");

     label01:
        r14 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agfstnode(h.ST_Agraph_s)>(r0);

     label02:
        if r14 == null goto label04;

        $i3 = staticinvoke <smetana.core.Macro: int ND_ranktype(h.ST_Agnode_s)>(r14);

        if $i3 != 7 goto label03;

        staticinvoke <gen.lib.common.utils__c: void UF_singleton(h.ST_Agnode_s)>(r14);

     label03:
        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>(r14, null);

        r14 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agnxtnode(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r14);

        goto label02;

     label04:
        i4 = 1;

     label05:
        $i0 = staticinvoke <smetana.core.Macro: int GD_n_cluster(h.ST_Agraph_s)>(r0);

        if i4 > $i0 goto label13;

        $r1 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_clust(h.ST_Agraph_s)>(r0);

        $r2 = virtualinvoke $r1.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i4);

        r3 = (h.ST_Agraph_s) $r2;

        r15 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agfstnode(h.ST_Agraph_s)>(r3);

     label06:
        if r15 == null goto label12;

        r16 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agnxtnode(h.ST_Agraph_s,h.ST_Agnode_s)>(r3, r15);

        $i1 = staticinvoke <smetana.core.Macro: int ND_ranktype(h.ST_Agnode_s)>(r15);

        if $i1 == 0 goto label07;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("5l8jenkv77ax02t47zzxyv1k0");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("2ipl4umxgijawr7756ysp9hhd");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("7r0ulsiau9cygesawzzjnpt5j");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("4zqc8357rwnd9xe7zaoqooqv3");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("6hyelvzskqfqa07xtgjtvg2is");

     label07:
        $r4 = staticinvoke <smetana.core.Macro: h.ST_Agnode_s GD_leader(h.ST_Agraph_s)>(r3);

        staticinvoke <gen.lib.common.utils__c: void UF_setname(h.ST_Agnode_s,h.ST_Agnode_s)>(r15, $r4);

        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>(r15, r3);

        staticinvoke <smetana.core.Macro: void ND_ranktype(h.ST_Agnode_s,int)>(r15, 7);

        r17 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agfstout(h.ST_Agraph_s,h.ST_Agnode_s)>(r3, r15);

     label08:
        if r17 == null goto label11;

        $r5 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s ED_to_virt(h.ST_Agedge_s)>(r17);

        r18 = $r5;

        if $r5 == null goto label10;

     label09:
        if r18 == null goto label10;

        $r6 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r18);

        $i2 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>($r6);

        if $i2 != 1 goto label10;

        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>($r6, r3);

        $r8 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r18);

        $r9 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>($r8);

        $r10 = $r9.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r11 = virtualinvoke $r10.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        r18 = (h.ST_Agedge_s) $r11;

        goto label09;

     label10:
        r17 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agnxtout(h.ST_Agraph_s,h.ST_Agedge_s)>(r3, r17);

        goto label08;

     label11:
        r15 = r16;

        goto label06;

     label12:
        i4 = i4 + 1;

        goto label05;

     label13:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("cxuirggihlap2iv2khmb1w5l5", "mark_clusters");

        goto label16;

     label14:
        $r12 := @caughtexception;

     label15:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("cxuirggihlap2iv2khmb1w5l5", "mark_clusters");

        throw $r12;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public static void build_skeleton(h.ST_Agraph_s, h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17;
        smetana.core.CArrayOfStar $r1, $r2, $r4, $r9, $r13, $r17;
        java.lang.Object $r3, $r5, $r10, $r14;
        h.ST_Agnode_s $r6, $r7, r20, r21, r23, r24, r26;
        h.ST_elist $r8, $r12;
        h.ST_Agedge_s $r11, $r15, r22, r25;
        java.lang.Throwable $r18;

        r16 := @parameter0: h.ST_Agraph_s;

        r0 := @parameter1: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("bwrw5u0gi2rgah1cn9h0glpse", "build_skeleton");

     label01:
        r20 = null;

        $i0 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r0);

        $i1 = $i0 + 2;

        $r1 = staticinvoke <smetana.core.CArrayOfStar: smetana.core.CArrayOfStar ALLOC(int,java.lang.Class)>($i1, class "Lh/ST_Agnode_s;");

        staticinvoke <smetana.core.Macro: void GD_rankleader(h.ST_Agraph_s,smetana.core.CArrayOfStar)>(r0, $r1);

        i15 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r0);

     label02:
        $i2 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r0);

        if i15 > $i2 goto label04;

        r21 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agnode_s virtual_node(h.ST_Agraph_s)>(r16);

        $r17 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r0);

        virtualinvoke $r17.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>(i15, r21);

        staticinvoke <smetana.core.Macro: void ND_rank(h.ST_Agnode_s,int)>(r21, i15);

        staticinvoke <smetana.core.Macro: void ND_ranktype(h.ST_Agnode_s,int)>(r21, 7);

        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>(r21, r0);

        if r20 == null goto label03;

        r22 = staticinvoke <gen.lib.dotgen.fastgr__c: h.ST_Agedge_s virtual_edge(h.ST_Agnode_s,h.ST_Agnode_s,h.ST_Agedge_s)>(r20, r21, null);

        $i13 = staticinvoke <smetana.core.Macro: int ED_xpenalty(h.ST_Agedge_s)>(r22);

        $i14 = $i13 * 1000;

        staticinvoke <smetana.core.Macro: void ED_xpenalty(h.ST_Agedge_s,int)>(r22, $i14);

     label03:
        r20 = r21;

        i15 = i15 + 1;

        goto label02;

     label04:
        r23 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agfstnode(h.ST_Agraph_s)>(r0);

     label05:
        if r23 == null goto label10;

        $r4 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r0);

        $i7 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>(r23);

        $r5 = virtualinvoke $r4.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>($i7);

        r24 = (h.ST_Agnode_s) $r5;

        $i8 = staticinvoke <smetana.core.Macro: int ND_UF_size(h.ST_Agnode_s)>(r24);

        $i9 = $i8 + 1;

        staticinvoke <smetana.core.Macro: void ND_UF_size(h.ST_Agnode_s,int)>(r24, $i9);

        r25 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agfstout(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r23);

     label06:
        if r25 == null goto label09;

        $r6 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s agtail(h.ST_Agedge_s)>(r25);

        i16 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r6);

     label07:
        $r7 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r25);

        $i10 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r7);

        if i16 >= $i10 goto label08;

        $r8 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>(r24);

        $r9 = $r8.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r10 = virtualinvoke $r9.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        $r11 = (h.ST_Agedge_s) $r10;

        $r12 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>(r24);

        $r13 = $r12.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r14 = virtualinvoke $r13.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        $r15 = (h.ST_Agedge_s) $r14;

        $i11 = staticinvoke <smetana.core.Macro: int ED_count(h.ST_Agedge_s)>($r15);

        $i12 = $i11 + 1;

        staticinvoke <smetana.core.Macro: void ED_count(h.ST_Agedge_s,int)>($r11, $i12);

        i16 = i16 + 1;

        goto label07;

     label08:
        r25 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agnxtout(h.ST_Agraph_s,h.ST_Agedge_s)>(r0, r25);

        goto label06;

     label09:
        r23 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agnxtnode(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r23);

        goto label05;

     label10:
        i17 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r0);

     label11:
        $i3 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r0);

        if i17 > $i3 goto label13;

        $r2 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r0);

        $r3 = virtualinvoke $r2.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i17);

        r26 = (h.ST_Agnode_s) $r3;

        $i4 = staticinvoke <smetana.core.Macro: int ND_UF_size(h.ST_Agnode_s)>(r26);

        if $i4 <= 1 goto label12;

        $i5 = staticinvoke <smetana.core.Macro: int ND_UF_size(h.ST_Agnode_s)>(r26);

        $i6 = $i5 - 1;

        staticinvoke <smetana.core.Macro: void ND_UF_size(h.ST_Agnode_s,int)>(r26, $i6);

     label12:
        i17 = i17 + 1;

        goto label11;

     label13:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("bwrw5u0gi2rgah1cn9h0glpse", "build_skeleton");

        goto label16;

     label14:
        $r18 := @caughtexception;

     label15:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("bwrw5u0gi2rgah1cn9h0glpse", "build_skeleton");

        throw $r18;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public static void install_cluster(h.ST_Agraph_s, h.ST_Agnode_s, int, h.ST_nodequeue)
    {
        h.ST_Agnode_s r0, $r5, $r9;
        h.ST_Agraph_s r1, r6;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        h.ST_nodequeue r2;
        smetana.core.CArrayOfStar $r3, $r7;
        java.lang.Object $r4, $r8;
        java.lang.Throwable $r10;

        r6 := @parameter0: h.ST_Agraph_s;

        r0 := @parameter1: h.ST_Agnode_s;

        i1 := @parameter2: int;

        r2 := @parameter3: h.ST_nodequeue;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("75yt3xwcwnxipi827t1r8zcmn", "install_cluster");

     label1:
        r1 = staticinvoke <smetana.core.Macro: h.ST_Agraph_s ND_clust(h.ST_Agnode_s)>(r0);

        $i0 = staticinvoke <smetana.core.Macro: int GD_installed(h.ST_Agraph_s)>(r1);

        $i2 = i1 + 1;

        if $i0 == $i2 goto label6;

        i6 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r1);

     label2:
        $i3 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r1);

        if i6 > $i3 goto label3;

        $r7 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r1);

        $r8 = virtualinvoke $r7.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i6);

        $r9 = (h.ST_Agnode_s) $r8;

        staticinvoke <gen.lib.dotgen.mincross__c: void install_in_rank(h.ST_Agraph_s,h.ST_Agnode_s)>(r6, $r9);

        i6 = i6 + 1;

        goto label2;

     label3:
        i7 = staticinvoke <smetana.core.Macro: int GD_minrank(h.ST_Agraph_s)>(r1);

     label4:
        $i4 = staticinvoke <smetana.core.Macro: int GD_maxrank(h.ST_Agraph_s)>(r1);

        if i7 > $i4 goto label5;

        $r3 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)>(r1);

        $r4 = virtualinvoke $r3.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i7);

        $r5 = (h.ST_Agnode_s) $r4;

        staticinvoke <gen.lib.dotgen.mincross__c: void enqueue_neighbors(h.ST_nodequeue,h.ST_Agnode_s,int)>(r2, $r5, i1);

        i7 = i7 + 1;

        goto label4;

     label5:
        $i5 = i1 + 1;

        staticinvoke <smetana.core.Macro: void GD_installed(h.ST_Agraph_s,int)>(r1, $i5);

     label6:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("75yt3xwcwnxipi827t1r8zcmn", "install_cluster");

        goto label9;

     label7:
        $r10 := @caughtexception;

     label8:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("75yt3xwcwnxipi827t1r8zcmn", "install_cluster");

        throw $r10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static void mark_lowclusters(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agedge_s $r1, r11, r12;
        h.ST_Agnode_s $r2, $r4, r10;
        int $i0;
        h.ST_elist $r5;
        smetana.core.CArrayOfStar $r6;
        java.lang.Object $r7;
        java.lang.Throwable $r8;

        r0 := @parameter0: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("4muksvb3ec03mt6cvaqpb5c7a", "mark_lowclusters");

     label01:
        r10 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agfstnode(h.ST_Agraph_s)>(r0);

     label02:
        if r10 == null goto label07;

        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>(r10, null);

        r11 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agfstout(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r10);

     label03:
        if r11 == null goto label06;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s ED_to_virt(h.ST_Agedge_s)>(r11);

        r12 = $r1;

        if $r1 == null goto label05;

     label04:
        if r12 == null goto label05;

        $r2 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r12);

        $i0 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>($r2);

        if $i0 != 1 goto label05;

        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>($r2, null);

        $r4 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r12);

        $r5 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>($r4);

        $r6 = $r5.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r7 = virtualinvoke $r6.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        r12 = (h.ST_Agedge_s) $r7;

        goto label04;

     label05:
        r11 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agnxtout(h.ST_Agraph_s,h.ST_Agedge_s)>(r0, r11);

        goto label03;

     label06:
        r10 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agnxtnode(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r10);

        goto label02;

     label07:
        staticinvoke <gen.lib.dotgen.cluster__c: void mark_lowcluster_basic(h.ST_Agraph_s)>(r0);

     label08:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("4muksvb3ec03mt6cvaqpb5c7a", "mark_lowclusters");

        goto label11;

     label09:
        $r8 := @caughtexception;

     label10:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("4muksvb3ec03mt6cvaqpb5c7a", "mark_lowclusters");

        throw $r8;

     label11:
        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static void mark_lowcluster_basic(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, $r1, $r5, r12;
        int $i0, $i1, i2;
        h.ST_Agedge_s $r2, r16, r17;
        h.ST_Agnode_s $r3, $r6, r15;
        h.ST_elist $r7;
        smetana.core.CArrayOfStar $r8, $r10;
        java.lang.Object $r9, $r11;
        java.lang.Throwable $r13;

        r0 := @parameter0: h.ST_Agraph_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("48j6fdymvkcgeh4wde060ctac", "mark_lowcluster_basic");

     label01:
        i2 = 1;

     label02:
        $i0 = staticinvoke <smetana.core.Macro: int GD_n_cluster(h.ST_Agraph_s)>(r0);

        if i2 > $i0 goto label03;

        $r10 = staticinvoke <smetana.core.Macro: smetana.core.CArrayOfStar GD_clust(h.ST_Agraph_s)>(r0);

        $r11 = virtualinvoke $r10.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(i2);

        r12 = (h.ST_Agraph_s) $r11;

        staticinvoke <gen.lib.dotgen.cluster__c: void mark_lowcluster_basic(h.ST_Agraph_s)>(r12);

        i2 = i2 + 1;

        goto label02;

     label03:
        r15 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agfstnode(h.ST_Agraph_s)>(r0);

     label04:
        if r15 == null goto label11;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agraph_s ND_clust(h.ST_Agnode_s)>(r15);

        if $r1 != null goto label05;

        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>(r15, r0);

     label05:
        r16 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agfstout(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r15);

     label06:
        if r16 == null goto label10;

        $r2 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s ED_to_virt(h.ST_Agedge_s)>(r16);

        r17 = $r2;

        if $r2 == null goto label09;

     label07:
        if r17 == null goto label09;

        $r3 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r17);

        $i1 = staticinvoke <smetana.core.Macro: int ND_node_type(h.ST_Agnode_s)>($r3);

        if $i1 != 1 goto label09;

        $r5 = staticinvoke <smetana.core.Macro: h.ST_Agraph_s ND_clust(h.ST_Agnode_s)>($r3);

        if $r5 != null goto label08;

        staticinvoke <smetana.core.Macro: void ND_clust(h.ST_Agnode_s,h.ST_Agraph_s)>($r3, r0);

     label08:
        $r6 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agnode_s aghead(smetana.core.__ptr__)>(r17);

        $r7 = staticinvoke <smetana.core.Macro: h.ST_elist ND_out(h.ST_Agnode_s)>($r6);

        $r8 = $r7.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r9 = virtualinvoke $r8.<smetana.core.CArrayOfStar: java.lang.Object get_(int)>(0);

        r17 = (h.ST_Agedge_s) $r9;

        goto label07;

     label09:
        r16 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agnxtout(h.ST_Agraph_s,h.ST_Agedge_s)>(r0, r16);

        goto label06;

     label10:
        r15 = staticinvoke <gen.lib.cgraph.node__c: h.ST_Agnode_s agnxtnode(h.ST_Agraph_s,h.ST_Agnode_s)>(r0, r15);

        goto label04;

     label11:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("48j6fdymvkcgeh4wde060ctac", "mark_lowcluster_basic");

        goto label14;

     label12:
        $r13 := @caughtexception;

     label13:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("48j6fdymvkcgeh4wde060ctac", "mark_lowcluster_basic");

        throw $r13;

     label14:
        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lgen/lib/dotgen/cluster__c;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <gen.lib.dotgen.cluster__c: boolean $assertionsDisabled> = $z1;

        return;
    }
}
