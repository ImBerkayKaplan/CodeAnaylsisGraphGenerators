public class net.sourceforge.plantuml.AFileZipEntry extends java.lang.Object implements net.sourceforge.plantuml.AFile
{
    private final net.sourceforge.plantuml.security.SFile zipFile;
    private final java.lang.String entry;

    public void <init>(net.sourceforge.plantuml.security.SFile, java.lang.String)
    {
        net.sourceforge.plantuml.AFileZipEntry r0;
        net.sourceforge.plantuml.security.SFile r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.AFileZipEntry;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile> = r1;

        r0.<net.sourceforge.plantuml.AFileZipEntry: java.lang.String entry> = r2;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r8;
        net.sourceforge.plantuml.AFileZipEntry r2;
        net.sourceforge.plantuml.security.SFile $r3;
        java.lang.String $r4, $r7, $r9;

        r2 := @this: net.sourceforge.plantuml.AFileZipEntry;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AFileZipEntry::");

        $r3 = r2.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.security.SFile: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = r2.<net.sourceforge.plantuml.AFileZipEntry: java.lang.String entry>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.io.InputStream openFile()
    {
        net.sourceforge.plantuml.AFileZipEntry r0;
        net.sourceforge.plantuml.security.SFile $r1;
        java.io.InputStream r2;
        java.util.zip.ZipInputStream $r3;
        java.lang.String r4, $r5, $r6, $r7;
        boolean $z0, $z1;
        java.io.IOException $r8;
        java.util.zip.ZipEntry r10;

        r0 := @this: net.sourceforge.plantuml.AFileZipEntry;

        $r1 = r0.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: java.io.InputStream openFile()>();

        if r2 == null goto label9;

     label1:
        $r3 = new java.util.zip.ZipInputStream;

        specialinvoke $r3.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>(r2);

        r10 = virtualinvoke $r3.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

     label2:
        if r10 == null goto label6;

        r4 = virtualinvoke r10.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke r10.<java.util.zip.ZipEntry: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        goto label5;

     label3:
        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $r6 = r0.<net.sourceforge.plantuml.AFileZipEntry: java.lang.String entry>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        if $z1 == 0 goto label5;

     label4:
        return $r3;

     label5:
        r10 = virtualinvoke $r3.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        goto label2;

     label6:
        virtualinvoke $r3.<java.util.zip.ZipInputStream: void closeEntry()>();

        virtualinvoke $r3.<java.util.zip.ZipInputStream: void close()>();

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.io.IOException: void printStackTrace()>();

     label9:
        return null;

        catch java.io.IOException from label1 to label4 with label8;
        catch java.io.IOException from label5 to label7 with label8;
    }

    public boolean isOk()
    {
        net.sourceforge.plantuml.AFileZipEntry r0;
        net.sourceforge.plantuml.security.SFile $r1, $r2;
        boolean $z0, $z1;
        java.io.InputStream r3;
        java.io.IOException $r4;

        r0 := @this: net.sourceforge.plantuml.AFileZipEntry;

        $r1 = r0.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z0 == 0 goto label4;

        $r2 = r0.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $z1 = virtualinvoke $r2.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z1 != 0 goto label4;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.AFileZipEntry: java.io.InputStream openFile()>();

        if r3 == null goto label4;

     label1:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

     label4:
        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.AFileZipEntry r0;
        net.sourceforge.plantuml.security.SFile $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.AFileZipEntry;

        $r1 = r0.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: int hashCode()>();

        $r2 = r0.<net.sourceforge.plantuml.AFileZipEntry: java.lang.String entry>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.AFileZipEntry r1, r2;
        net.sourceforge.plantuml.security.SFile $r3, $r4;
        java.lang.String $r5, $r6;

        r2 := @this: net.sourceforge.plantuml.AFileZipEntry;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof net.sourceforge.plantuml.AFileZipEntry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (net.sourceforge.plantuml.AFileZipEntry) r0;

        $r4 = r2.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $r3 = r1.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $z1 = virtualinvoke $r4.<net.sourceforge.plantuml.security.SFile: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r2.<net.sourceforge.plantuml.AFileZipEntry: java.lang.String entry>;

        $r5 = r1.<net.sourceforge.plantuml.AFileZipEntry: java.lang.String entry>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public net.sourceforge.plantuml.AParentFolder getParentFile()
    {
        net.sourceforge.plantuml.AParentFolderZip $r0;
        net.sourceforge.plantuml.AFileZipEntry r1;
        java.lang.String $r2;
        net.sourceforge.plantuml.security.SFile $r3;

        r1 := @this: net.sourceforge.plantuml.AFileZipEntry;

        $r0 = new net.sourceforge.plantuml.AParentFolderZip;

        $r3 = r1.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $r2 = r1.<net.sourceforge.plantuml.AFileZipEntry: java.lang.String entry>;

        specialinvoke $r0.<net.sourceforge.plantuml.AParentFolderZip: void <init>(net.sourceforge.plantuml.security.SFile,java.lang.String)>($r3, $r2);

        return $r0;
    }

    public net.sourceforge.plantuml.security.SFile getUnderlyingFile()
    {
        net.sourceforge.plantuml.AFileZipEntry r0;
        net.sourceforge.plantuml.security.SFile $r1;

        r0 := @this: net.sourceforge.plantuml.AFileZipEntry;

        $r1 = r0.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        return $r1;
    }

    public net.sourceforge.plantuml.security.SFile getSystemFolder() throws java.io.IOException
    {
        net.sourceforge.plantuml.AFileZipEntry r0;
        net.sourceforge.plantuml.security.SFile $r1, $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.AFileZipEntry;

        $r1 = r0.<net.sourceforge.plantuml.AFileZipEntry: net.sourceforge.plantuml.security.SFile zipFile>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getCanonicalFile()>();

        return $r3;
    }
}
