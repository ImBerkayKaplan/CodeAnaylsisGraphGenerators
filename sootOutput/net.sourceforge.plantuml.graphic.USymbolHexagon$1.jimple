class net.sourceforge.plantuml.graphic.USymbolHexagon$1 extends net.sourceforge.plantuml.graphic.AbstractTextBlock
{
    final net.sourceforge.plantuml.graphic.TextBlock val$stereotype;
    final net.sourceforge.plantuml.graphic.TextBlock val$label;
    final net.sourceforge.plantuml.graphic.HorizontalAlignment val$stereoAlignment;
    final net.sourceforge.plantuml.graphic.USymbolHexagon this$0;

    void <init>(net.sourceforge.plantuml.graphic.USymbolHexagon, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.USymbolHexagon$1 r0;
        net.sourceforge.plantuml.graphic.USymbolHexagon r1;
        net.sourceforge.plantuml.graphic.TextBlock r2, r3;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r4;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolHexagon$1;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.USymbolHexagon;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        r4 := @parameter3: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.USymbolHexagon this$0> = r1;

        r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.TextBlock val$stereotype> = r2;

        r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.TextBlock val$label> = r3;

        r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.HorizontalAlignment val$stereoAlignment> = r4;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.USymbolHexagon$1 r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r9;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r4;
        net.sourceforge.plantuml.graphic.TextBlock $r5, $r6, r7;
        double $d0, d1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolHexagon$1;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $r6 = r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.TextBlock val$stereotype>;

        $r5 = r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.TextBlock val$label>;

        $r4 = r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.HorizontalAlignment val$stereoAlignment>;

        r7 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock mergeTB(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r6, $r5, $r4);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = $d0 / 4.0;

        $r8 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d1, 5.0);

        $r9 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        interfaceinvoke r7.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r9);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.USymbolHexagon$1 r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r5, r6;
        net.sourceforge.plantuml.Dimension2DDouble $r7;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolHexagon$1;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.TextBlock val$label>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.graphic.USymbolHexagon$1: net.sourceforge.plantuml.graphic.TextBlock val$stereotype>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r6 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r5, r3);

        $r7 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 * 2.0;

        $d2 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 + 10.0;

        specialinvoke $r7.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d3);

        return $r7;
    }
}
