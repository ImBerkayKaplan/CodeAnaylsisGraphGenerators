public class net.sourceforge.plantuml.utils.UniqueSequence extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicInteger cpt;

    public void <init>()
    {
        net.sourceforge.plantuml.utils.UniqueSequence r0;

        r0 := @this: net.sourceforge.plantuml.utils.UniqueSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getValue()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0;

        $r0 = <net.sourceforge.plantuml.utils.UniqueSequence: java.util.concurrent.atomic.AtomicInteger cpt>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(1);

        return $i0;
    }

    public static java.lang.String getString(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String r1, $r4;
        int $i0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i0 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        <net.sourceforge.plantuml.utils.UniqueSequence: java.util.concurrent.atomic.AtomicInteger cpt> = $r0;

        return;
    }
}
