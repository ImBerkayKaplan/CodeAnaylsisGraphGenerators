public class net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
{
    private final net.sourceforge.plantuml.sequencediagram.LifeEvent lifeEvent;
    private final net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;

    protected final void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r1;
        net.sourceforge.plantuml.sequencediagram.Event $r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event,double)>($r2, d0);

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;
        net.sourceforge.plantuml.sequencediagram.LifeEvent $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.LifeEvent lifeEvent>;

        return $r1;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        return 0.0;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.LifeEvent, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r4;
        net.sourceforge.plantuml.skin.rose.Rose r5;
        net.sourceforge.plantuml.ISkinParam r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.LifeEvent;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        r4 := @parameter2: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r5 := @parameter3: net.sourceforge.plantuml.skin.rose.Rose;

        r6 := @parameter4: net.sourceforge.plantuml.ISkinParam;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.LifeEvent lifeEvent> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments tileArguments> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.skin.rose.Rose skin> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        return;
    }

    private net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.skin.ComponentType $r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r2;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        $r0 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DESTROY>;

        $r1 = virtualinvoke $r0.<net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        return $r1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;
        boolean $z0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.ISkinParam $r2, $r6;
        net.sourceforge.plantuml.style.StyleBuilder $r3;
        net.sourceforge.plantuml.style.Style r4;
        net.sourceforge.plantuml.style.Style[] $r5;
        net.sourceforge.plantuml.skin.ComponentType $r7;
        net.sourceforge.plantuml.skin.rose.Rose $r8;
        net.sourceforge.plantuml.skin.Component r9;
        net.sourceforge.plantuml.ugraphic.UGraphic r10, $r17;
        net.sourceforge.plantuml.graphic.StringBounder $r11, $r14;
        net.sourceforge.plantuml.awt.geom.Dimension2D r12;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r13;
        net.sourceforge.plantuml.real.Real $r15;
        double d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r16;
        net.sourceforge.plantuml.skin.Context2D $r18;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        r10 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: boolean isDestroyWithoutMessage()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r4 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r3);

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r5 = newarray (net.sourceforge.plantuml.style.Style)[1];

        $r5[0] = r4;

        $r7 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DESTROY>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r5, $r7, null, $r6, null);

        $r11 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r12 = interfaceinvoke r9.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r11);

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r14 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r15 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>($r14);

        d0 = interfaceinvoke $r15.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d1 = virtualinvoke r12.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d1 / 2.0;

        $d3 = d0 - $d2;

        $r16 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d3);

        $r17 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        $r18 = (net.sourceforge.plantuml.skin.Context2D) r10;

        interfaceinvoke r9.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r17, null, $r18);

     label1:
        return;
    }

    public boolean isDestroyWithoutMessage()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;
        net.sourceforge.plantuml.sequencediagram.LifeEvent $r1, $r3;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r2;
        net.sourceforge.plantuml.sequencediagram.LifeEventType $r4, $r5;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.LifeEvent lifeEvent>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.AbstractMessage getMessage()>();

        if $r2 != null goto label1;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.LifeEvent lifeEvent>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.LifeEventType getType()>();

        $r5 = <net.sourceforge.plantuml.sequencediagram.LifeEventType: net.sourceforge.plantuml.sequencediagram.LifeEventType DESTROY>;

        if $r4 != $r5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;
        boolean $z0;
        net.sourceforge.plantuml.ISkinParam $r1;
        net.sourceforge.plantuml.skin.ComponentType $r2;
        net.sourceforge.plantuml.skin.rose.Rose $r3;
        net.sourceforge.plantuml.skin.Component r4;
        net.sourceforge.plantuml.graphic.StringBounder $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: boolean isDestroyWithoutMessage()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r2 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DESTROY>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>(null, $r2, null, $r1, null);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r6 = interfaceinvoke r4.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        return $d0;

     label1:
        return 0.0;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.real.Real $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        return $r3;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.real.Real[] $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r2, $r5;
        net.sourceforge.plantuml.graphic.StringBounder $r3, $r6;
        net.sourceforge.plantuml.real.Real $r4, $r7, $r8;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        $r0 = newarray (net.sourceforge.plantuml.real.Real)[2];

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r0[0] = $r4;

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC2(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $r0[1] = $r7;

        $r8 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real max(net.sourceforge.plantuml.real.Real[])>($r0);

        return $r8;
    }
}
