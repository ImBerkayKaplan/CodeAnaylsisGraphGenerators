public class net.sourceforge.plantuml.preproc.Variables extends java.lang.Object
{
    private final java.util.List all;
    private final java.lang.String fonctionName;
    private final java.lang.String definitionQuoted;
    private java.lang.String newValue;
    private java.util.regex.Pattern regex2;

    public void <init>(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.preproc.Variables r0;
        java.util.ArrayList $r1;
        java.lang.String r2, r3;

        r0 := @this: net.sourceforge.plantuml.preproc.Variables;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.preproc.Variables: java.util.List all> = $r1;

        r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String fonctionName> = r2;

        r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String definitionQuoted> = r3;

        return;
    }

    public void add(net.sourceforge.plantuml.preproc.DefineVariable)
    {
        net.sourceforge.plantuml.preproc.Variables r0;
        net.sourceforge.plantuml.preproc.DefineVariable r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.preproc.Variables;

        r1 := @parameter0: net.sourceforge.plantuml.preproc.DefineVariable;

        $r2 = r0.<net.sourceforge.plantuml.preproc.Variables: java.util.List all>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public int countDefaultValue()
    {
        net.sourceforge.plantuml.preproc.Variables r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.preproc.DefineVariable r4;
        java.lang.String $r5;
        int i0;

        r0 := @this: net.sourceforge.plantuml.preproc.Variables;

        i0 = 0;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Variables: java.util.List all>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.preproc.DefineVariable) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.preproc.DefineVariable: java.lang.String getDefaultValue()>();

        if $r5 == null goto label2;

        i0 = i0 + 1;

     label2:
        goto label1;

     label3:
        return i0;
    }

    public net.sourceforge.plantuml.preproc.Variables removeSomeDefaultValues(int)
    {
        net.sourceforge.plantuml.preproc.Variables $r0, r1;
        java.lang.String $r2, $r3, $r10;
        java.util.List $r5;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.Object $r8;
        net.sourceforge.plantuml.preproc.DefineVariable r9, $r11;
        int i0;

        r1 := @this: net.sourceforge.plantuml.preproc.Variables;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r1;

     label1:
        $r0 = new net.sourceforge.plantuml.preproc.Variables;

        $r3 = r1.<net.sourceforge.plantuml.preproc.Variables: java.lang.String fonctionName>;

        $r2 = r1.<net.sourceforge.plantuml.preproc.Variables: java.lang.String definitionQuoted>;

        specialinvoke $r0.<net.sourceforge.plantuml.preproc.Variables: void <init>(java.lang.String,java.lang.String)>($r3, $r2);

        $r5 = r1.<net.sourceforge.plantuml.preproc.Variables: java.util.List all>;

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (net.sourceforge.plantuml.preproc.DefineVariable) $r8;

        $r10 = virtualinvoke r9.<net.sourceforge.plantuml.preproc.DefineVariable: java.lang.String getDefaultValue()>();

        if $r10 == null goto label3;

        if i0 <= 0 goto label3;

        $r11 = virtualinvoke r9.<net.sourceforge.plantuml.preproc.DefineVariable: net.sourceforge.plantuml.preproc.DefineVariable removeDefault()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.preproc.Variables: void add(net.sourceforge.plantuml.preproc.DefineVariable)>($r11);

        i0 = i0 + -1;

        goto label4;

     label3:
        virtualinvoke $r0.<net.sourceforge.plantuml.preproc.Variables: void add(net.sourceforge.plantuml.preproc.DefineVariable)>(r9);

     label4:
        goto label2;

     label5:
        if i0 == 0 goto label6;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label6:
        return $r0;
    }

    public java.lang.String applyOn(java.lang.String)
    {
        net.sourceforge.plantuml.preproc.Variables r0;
        java.lang.String $r1, $r2, $r6, $r9, $r13, r17, r28, $r29, $r30, $r31, $r32, $r33, $r36, $r43, $r44, r46, $r49, r50;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r35, $r37, $r38, $r39, $r40, $r41, $r42;
        java.util.List r11;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7;
        java.util.regex.Pattern $r14, $r47;
        java.lang.Object $r15;
        net.sourceforge.plantuml.preproc.DefineVariable r16;
        boolean z0;
        java.util.regex.Matcher $r48;

        r0 := @this: net.sourceforge.plantuml.preproc.Variables;

        r46 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String newValue>;

        if $r1 != null goto label6;

        $r2 = r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String definitionQuoted>;

        r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String newValue> = $r2;

        $r3 = new java.lang.StringBuilder;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\b");

        $r6 = r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String fonctionName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        r11 = r0.<net.sourceforge.plantuml.preproc.Variables: java.util.List all>;

        z0 = 0;

        i7 = 0;

     label1:
        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        if i7 >= $i0 goto label4;

        $r15 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i7);

        r16 = (net.sourceforge.plantuml.preproc.DefineVariable) $r15;

        r17 = virtualinvoke r16.<net.sourceforge.plantuml.preproc.DefineVariable: java.lang.String getName()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(##");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("##)|(##");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\b)|(\\b");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("##)|(\\b");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\b)");

        r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = virtualinvoke r16.<net.sourceforge.plantuml.preproc.DefineVariable: java.lang.String getDefaultValue()>();

        if $r29 != null goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:(?:\\s*\"([^\"]*)\"\\s*)|(?:\\s*\'([^\']*)\'\\s*)|\\s*((?:\\([^()]*\\)|[^,\'\"])*?))");

        $i3 = 3 * i7;

        i4 = 1 + $i3;

        $r36 = r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String newValue>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\$");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\$");

        $i5 = i4 + 1;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\$");

        $i6 = i4 + 2;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = virtualinvoke $r36.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(r28, $r43);

        r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String newValue> = $r44;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        z0 = 1;

        goto label3;

     label2:
        $r30 = r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String newValue>;

        $r31 = virtualinvoke r16.<net.sourceforge.plantuml.preproc.DefineVariable: java.lang.String getDefaultValue()>();

        $r32 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r31);

        $r33 = virtualinvoke $r30.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(r28, $r32);

        r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String newValue> = $r33;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        if z0 != 1 goto label5;

        $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>($i2);

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\)");

        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r13);

        r0.<net.sourceforge.plantuml.preproc.Variables: java.util.regex.Pattern regex2> = $r14;

     label6:
        $r47 = r0.<net.sourceforge.plantuml.preproc.Variables: java.util.regex.Pattern regex2>;

        $r48 = virtualinvoke $r47.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r46);

        $r49 = r0.<net.sourceforge.plantuml.preproc.Variables: java.lang.String newValue>;

        r50 = virtualinvoke $r48.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r49);

        return r50;
    }
}
