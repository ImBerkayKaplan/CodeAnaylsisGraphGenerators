public class net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines extends net.sourceforge.plantuml.command.CommandMultilines2
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;
        net.sourceforge.plantuml.command.MultilinesStrategy $r2;

        r0 := @this: net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines;

        $r1 = staticinvoke <net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        $r2 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy REMOVE_STARTING_QUOTE>;

        specialinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: void <init>(net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>($r1, $r2);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r13, $r16;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r17, $r18, $r19, $r20, $r21;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;
        net.sourceforge.plantuml.command.regex.RegexConcat $r22;

        $r0 = class "Lnet/sourceforge/plantuml/objectdiagram/command/CommandCreateEntityObjectMultilines;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[13];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TYPE", "object");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("NAME", "(?:[%g]([^%g]+)[%g][%s]+as[%s]+)?([%pLN_.]+)");

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[4] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<\\<.+\\>\\>)?");

        $r2[5] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r13 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r16);

        $r2[7] = $r10;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r2[9] = $r18;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[10] = $r19;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\{");

        $r2[11] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[12] = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r22;
    }

    public java.lang.String getPatternEnd()
    {
        net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines r0;

        r0 := @this: net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines;

        return "^[%s]*\\}[%s]*$";
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.BlocLines $r0, r19, r20, r21;
        net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;
        net.sourceforge.plantuml.StringLocated $r3, $r4, r12;
        java.lang.String $r5, $r13, $r15, $r16;
        net.sourceforge.plantuml.command.regex.RegexResult r6;
        net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram r7;
        net.sourceforge.plantuml.cucadiagram.IEntity r8;
        java.util.Iterator r9;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.command.CommandExecutionResult $r10, $r18;
        java.lang.Object $r11;
        net.sourceforge.plantuml.cucadiagram.Bodier $r14;
        int $i0;
        java.lang.AssertionError $r17;

        r1 := @this: net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines;

        r7 := @parameter0: net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram;

        r19 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r0 = virtualinvoke r19.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines trim()>();

        r20 = virtualinvoke $r0.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines removeEmptyLines()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines: net.sourceforge.plantuml.command.regex.IRegex getStartingPattern()>();

        $r3 = virtualinvoke r20.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r6 = interfaceinvoke $r2.<net.sourceforge.plantuml.command.regex.IRegex: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>($r5);

        r8 = specialinvoke r1.<net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines: net.sourceforge.plantuml.cucadiagram.IEntity executeArg0(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram,net.sourceforge.plantuml.command.regex.RegexResult)>(r7, r6);

        if r8 != null goto label1;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("No such entity");

        return $r18;

     label1:
        r21 = virtualinvoke r20.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines subExtract(int,int)>(1, 1);

        r9 = virtualinvoke r21.<net.sourceforge.plantuml.command.BlocLines: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r12 = (net.sourceforge.plantuml.StringLocated) $r11;

        $z1 = <net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r16 = virtualinvoke r12.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $i0 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i0 > 0 goto label3;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label3:
        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z2 = staticinvoke <net.sourceforge.plantuml.skin.VisibilityModifier: boolean isVisibilityCharacter(java.lang.CharSequence)>($r13);

        if $z2 == 0 goto label4;

        virtualinvoke r7.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: void setVisibilityModifierPresent(boolean)>(1);

     label4:
        $r14 = interfaceinvoke r8.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r15 = virtualinvoke r12.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        interfaceinvoke $r14.<net.sourceforge.plantuml.cucadiagram.Bodier: void addFieldOrMethod(java.lang.String)>($r15);

        goto label2;

     label5:
        $r10 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r10;
    }

    private net.sourceforge.plantuml.cucadiagram.IEntity executeArg0(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r5, r6, r10;
        net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram r2;
        net.sourceforge.plantuml.cucadiagram.Ident r3, $r25;
        boolean $z0, $z1, $z3;
        net.sourceforge.plantuml.cucadiagram.Code r4, $r29;
        net.sourceforge.plantuml.cucadiagram.Display $r7;
        net.sourceforge.plantuml.cucadiagram.LeafType $r8, $r26;
        net.sourceforge.plantuml.cucadiagram.ILeaf r9;
        net.sourceforge.plantuml.graphic.color.ColorType $r11;
        net.sourceforge.plantuml.ISkinParam $r12, $r14, $r17, $r18, $r22;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r13, $r23;
        net.sourceforge.plantuml.api.ThemeStyle $r15;
        int $i0;
        double $d0;
        net.sourceforge.plantuml.FontParam[] $r19;
        net.sourceforge.plantuml.FontParam $r20;
        net.sourceforge.plantuml.ugraphic.UFont $r21;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r24;
        net.sourceforge.plantuml.cucadiagram.IEntity $r27;
        net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines r28;
        net.sourceforge.plantuml.ugraphic.color.HColor $r30;

        r28 := @this: net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines;

        r2 := @parameter0: net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("NAME", 1);

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: boolean V1972()>();

        if $z0 == 0 goto label1;

        $r29 = r3;

        goto label2;

     label1:
        $r29 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r1);

     label2:
        r4 = $r29;

        r5 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("NAME", 0);

        r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEREO", 0);

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: boolean V1972()>();

        if $z1 == 0 goto label3;

        $z3 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: boolean leafExistSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r3);

        goto label4;

     label3:
        $z3 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: boolean leafExist(net.sourceforge.plantuml.cucadiagram.Code)>($r29);

     label4:
        if $z3 == 0 goto label5;

        $r25 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        $r26 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType OBJECT>;

        $r27 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.IEntity getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>($r25, r4, $r26, null);

        return $r27;

     label5:
        $r7 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r5);

        $r8 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType OBJECT>;

        r9 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, r4, $r7, $r8, null);

        if r6 == null goto label6;

        $r17 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i0 = interfaceinvoke $r17.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i0;

        $r18 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r20 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r19[0] = $r20;

        $r21 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r19);

        $r22 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r23 = interfaceinvoke $r22.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r24 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r6, $d0, $r21, $r23);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r24);

     label6:
        r10 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COLOR", 0);

        $r11 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        if r10 != null goto label7;

        $r30 = null;

        goto label8;

     label7:
        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r14 = virtualinvoke r2.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r30 = virtualinvoke $r13.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r15, r10);

     label8:
        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setSpecificColorTOBEREMOVED(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r11, $r30);

        return r9;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.command.BlocLines r2;
        net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram $r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @this: net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r3 = (net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram) r1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines: net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram,net.sourceforge.plantuml.command.BlocLines)>($r3, r2);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/objectdiagram/command/CommandCreateEntityObjectMultilines;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines: boolean $assertionsDisabled> = $z1;

        return;
    }
}
