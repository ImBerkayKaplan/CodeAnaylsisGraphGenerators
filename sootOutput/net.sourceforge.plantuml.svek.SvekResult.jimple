public final class net.sourceforge.plantuml.svek.SvekResult extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final net.sourceforge.plantuml.skin.rose.Rose rose;
    private final net.sourceforge.plantuml.cucadiagram.dot.DotData dotData;
    private final net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory;
    private net.sourceforge.plantuml.ugraphic.MinMax minMax;

    public void <init>(net.sourceforge.plantuml.cucadiagram.dot.DotData, net.sourceforge.plantuml.svek.DotStringFactory)
    {
        net.sourceforge.plantuml.svek.SvekResult r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1;
        net.sourceforge.plantuml.cucadiagram.dot.DotData r2;
        net.sourceforge.plantuml.svek.DotStringFactory r3;

        r0 := @this: net.sourceforge.plantuml.svek.SvekResult;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.dot.DotData;

        r3 := @parameter1: net.sourceforge.plantuml.svek.DotStringFactory;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r1 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r1.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.skin.rose.Rose rose> = $r1;

        r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData> = r2;

        r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory> = r3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.SvekResult r0;
        net.sourceforge.plantuml.svek.DotStringFactory $r1, $r9, $r13;
        net.sourceforge.plantuml.svek.Bibliotekon $r2, $r10, $r14;
        java.util.List $r3, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r4, $r24, $r27, $r40, $r45, $r48, $r52, $r54;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r25, $r28, $r41, $r46, $r49, $r55;
        net.sourceforge.plantuml.ColorParam[] $r7;
        net.sourceforge.plantuml.ColorParam $r8;
        java.util.Collection $r11;
        java.util.HashSet $r12;
        java.lang.Object $r16, $r31, $r51;
        net.sourceforge.plantuml.ugraphic.UGraphic r17, r18, $r35, $r37, $r64, $r68;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r19;
        net.sourceforge.plantuml.style.StyleSignature $r20, $r39;
        net.sourceforge.plantuml.style.Style r21, r59;
        net.sourceforge.plantuml.style.PName $r22, $r43;
        net.sourceforge.plantuml.style.Value $r23, $r44;
        net.sourceforge.plantuml.api.ThemeStyle $r26, $r47;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r29, $r50;
        net.sourceforge.plantuml.ugraphic.UHidden $r30, $r38;
        net.sourceforge.plantuml.svek.IEntityImage r33;
        net.sourceforge.plantuml.ugraphic.UTranslate $r34;
        net.sourceforge.plantuml.svek.Untranslated $r36;
        net.sourceforge.plantuml.style.StyleBuilder $r42, r69;
        net.sourceforge.plantuml.UmlDiagramType $r53;
        java.util.Iterator r56, r62, r66;
        net.sourceforge.plantuml.svek.Cluster r57;
        net.sourceforge.plantuml.ugraphic.color.HColor r58, r60, r70;
        net.sourceforge.plantuml.ugraphic.UStroke r61;
        net.sourceforge.plantuml.svek.SvekNode r63;
        double d0, d1;
        net.sourceforge.plantuml.svek.SvekLine r67;

        r0 := @this: net.sourceforge.plantuml.svek.SvekResult;

        r17 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allCluster()>();

        r56 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r51 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (net.sourceforge.plantuml.svek.Cluster) $r51;

        $r52 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r53 = virtualinvoke $r52.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r54 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r55 = virtualinvoke $r54.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        virtualinvoke r57.<net.sourceforge.plantuml.svek.Cluster: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.UmlDiagramType,net.sourceforge.plantuml.ISkinParam)>(r17, $r53, $r55);

        goto label01;

     label02:
        $r5 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.skin.rose.Rose rose>;

        $r4 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r6 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.ColorParam getArrowColorParam()>();

        $r7[0] = $r8;

        r58 = virtualinvoke $r5.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r6, null, $r7);

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label03;

        $r39 = specialinvoke r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.cucadiagram.Stereotype)>(null);

        $r40 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r41 = virtualinvoke $r40.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r42 = interfaceinvoke $r41.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r59 = virtualinvoke $r39.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r42);

        $r43 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r44 = virtualinvoke r59.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r43);

        $r45 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r46 = virtualinvoke $r45.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r47 = interfaceinvoke $r46.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r48 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r49 = virtualinvoke $r48.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r50 = interfaceinvoke $r49.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r58 = interfaceinvoke $r44.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r47, $r50);

     label03:
        r60 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor noGradient(net.sourceforge.plantuml.ugraphic.color.HColor)>(r58);

        r61 = null;

        $r9 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.Collection allNodes()>();

        r62 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z7 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r31 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (net.sourceforge.plantuml.svek.SvekNode) $r31;

        d0 = virtualinvoke r63.<net.sourceforge.plantuml.svek.SvekNode: double getMinX()>();

        d1 = virtualinvoke r63.<net.sourceforge.plantuml.svek.SvekNode: double getMinY()>();

        $z5 = virtualinvoke r63.<net.sourceforge.plantuml.svek.SvekNode: boolean isHidden()>();

        if $z5 == 0 goto label05;

        $r38 = <net.sourceforge.plantuml.ugraphic.UHidden: net.sourceforge.plantuml.ugraphic.UHidden HIDDEN>;

        $r64 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r38);

        goto label06;

     label05:
        $r64 = r17;

     label06:
        r33 = virtualinvoke r63.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage getImage()>();

        $r34 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r34.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d1);

        $r35 = interfaceinvoke $r64.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r34);

        interfaceinvoke r33.<net.sourceforge.plantuml.svek.IEntityImage: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r35);

        $z6 = r33 instanceof net.sourceforge.plantuml.svek.Untranslated;

        if $z6 == 0 goto label07;

        $r36 = (net.sourceforge.plantuml.svek.Untranslated) r33;

        $r37 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r60);

        interfaceinvoke $r36.<net.sourceforge.plantuml.svek.Untranslated: void drawUntranslated(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r37, d0, d1);

     label07:
        goto label04;

     label08:
        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        $r13 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.svek.Bibliotekon: java.util.List allLines()>();

        r66 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r16 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        r67 = (net.sourceforge.plantuml.svek.SvekLine) $r16;

        $z3 = virtualinvoke r67.<net.sourceforge.plantuml.svek.SvekLine: boolean isHidden()>();

        if $z3 == 0 goto label10;

        $r30 = <net.sourceforge.plantuml.ugraphic.UHidden: net.sourceforge.plantuml.ugraphic.UHidden HIDDEN>;

        $r68 = interfaceinvoke r17.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r30);

        goto label11;

     label10:
        $r68 = r17;

     label11:
        r18 = $r68;

        $z4 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z4 == 0 goto label12;

        r69 = virtualinvoke r67.<net.sourceforge.plantuml.svek.SvekLine: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r19 = virtualinvoke r67.<net.sourceforge.plantuml.svek.SvekLine: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $r20 = specialinvoke r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r19);

        r21 = virtualinvoke $r20.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>(r69);

        $r22 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r23 = virtualinvoke r21.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r22);

        $r24 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r25 = virtualinvoke $r24.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r26 = interfaceinvoke $r25.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r27 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r28 = virtualinvoke $r27.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r29 = interfaceinvoke $r28.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r70 = interfaceinvoke $r23.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r26, $r29);

        r61 = virtualinvoke r21.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        r60 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor noGradient(net.sourceforge.plantuml.ugraphic.color.HColor)>(r70);

     label12:
        virtualinvoke r67.<net.sourceforge.plantuml.svek.SvekLine: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.UStroke,net.sourceforge.plantuml.ugraphic.color.HColor,java.util.Set)>(r18, r61, r60, $r12);

        goto label09;

     label13:
        return;
    }

    private net.sourceforge.plantuml.ColorParam getArrowColorParam()
    {
        net.sourceforge.plantuml.svek.SvekResult r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r1, $r4, $r7, $r10, $r13;
        net.sourceforge.plantuml.UmlDiagramType $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.IllegalStateException $r16;
        net.sourceforge.plantuml.ColorParam $r17, $r18, $r19, $r20, $r21;

        r0 := @this: net.sourceforge.plantuml.svek.SvekResult;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r3 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType CLASS>;

        if $r2 != $r3 goto label1;

        $r21 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r21;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r6 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType OBJECT>;

        if $r5 != $r6 goto label2;

        $r20 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r20;

     label2:
        $r7 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r9 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType DESCRIPTION>;

        if $r8 != $r9 goto label3;

        $r19 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r19;

     label3:
        $r10 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r12 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType ACTIVITY>;

        if $r11 != $r12 goto label4;

        $r18 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r18;

     label4:
        $r13 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r15 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType STATE>;

        if $r14 != $r15 goto label5;

        $r17 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam arrow>;

        return $r17;

     label5:
        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>()>();

        throw $r16;
    }

    private net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition(net.sourceforge.plantuml.cucadiagram.Stereotype)
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r6, $r7;
        net.sourceforge.plantuml.svek.SvekResult r3;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r4;
        net.sourceforge.plantuml.UmlDiagramType $r5;
        net.sourceforge.plantuml.cucadiagram.Stereotype r8;
        net.sourceforge.plantuml.style.StyleSignature r9;

        r3 := @this: net.sourceforge.plantuml.svek.SvekResult;

        r8 := @parameter0: net.sourceforge.plantuml.cucadiagram.Stereotype;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r4 = r3.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.style.SName getStyleName()>();

        $r0[2] = $r6;

        $r7 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName arrow>;

        $r0[3] = $r7;

        r9 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        if r8 == null goto label1;

        r9 = virtualinvoke r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature 'with'(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r8);

     label1:
        return r9;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        boolean $z0;
        net.sourceforge.plantuml.svek.SvekResult r0;
        net.sourceforge.plantuml.cucadiagram.dot.DotData $r1, $r8, $r14, $r17;
        net.sourceforge.plantuml.ISkinParam $r2, $r9, $r15, $r18;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3, $r20;
        net.sourceforge.plantuml.style.SName[] $r4;
        net.sourceforge.plantuml.style.SName $r5, $r6;
        net.sourceforge.plantuml.style.StyleSignature $r7;
        net.sourceforge.plantuml.style.StyleBuilder $r10;
        net.sourceforge.plantuml.style.Style r11;
        net.sourceforge.plantuml.style.PName $r12;
        net.sourceforge.plantuml.style.Value $r13;
        net.sourceforge.plantuml.api.ThemeStyle $r16;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r19;

        r0 := @this: net.sourceforge.plantuml.svek.SvekResult;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r4 = newarray (net.sourceforge.plantuml.style.SName)[2];

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r4[0] = $r5;

        $r6 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName document>;

        $r4[1] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r4);

        $r8 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r11 = virtualinvoke $r7.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r10);

        $r12 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r13 = virtualinvoke r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r12);

        $r14 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r17 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r20 = interfaceinvoke $r13.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r16, $r19);

        return $r20;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.cucadiagram.dot.DotData dotData>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.dot.DotData: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()>();

        return $r3;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekResult r0;
        net.sourceforge.plantuml.ugraphic.MinMax $r1, $r2, $r6, $r7, $r9;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.svek.DotStringFactory $r8;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.svek.SvekResult;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        if $r1 != null goto label1;

        $r6 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.UDrawable,net.sourceforge.plantuml.graphic.StringBounder,boolean)>(r0, r5, 0);

        r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.ugraphic.MinMax minMax> = $r6;

        $r8 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory>;

        $r7 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d0 = virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $d1 = 6.0 - $d0;

        $r9 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $d2 = virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $d3 = 6.0 - $d2;

        virtualinvoke $r8.<net.sourceforge.plantuml.svek.DotStringFactory: void moveSvek(double,double)>($d1, $d3);

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.SvekResult: net.sourceforge.plantuml.ugraphic.MinMax minMax>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()>();

        $r4 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>($r3, 0.0, 12.0);

        return $r4;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.SvekResult r1;

        r1 := @this: net.sourceforge.plantuml.svek.SvekResult;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Margins $r0;
        net.sourceforge.plantuml.svek.SvekResult r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.SvekResult;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r0;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.SvekResult r0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekResult;

        return 0;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekResult r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekResult;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }
}
