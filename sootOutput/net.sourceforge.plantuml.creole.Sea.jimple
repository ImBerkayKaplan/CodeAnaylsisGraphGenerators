public class net.sourceforge.plantuml.creole.Sea extends java.lang.Object
{
    private double currentX;
    private final java.util.Map positions;
    private final net.sourceforge.plantuml.graphic.StringBounder stringBounder;

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.Sea r0;
        java.util.HashMap $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2, $r4;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions> = $r1;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = (net.sourceforge.plantuml.graphic.StringBounder) $r3;

        r0.<net.sourceforge.plantuml.creole.Sea: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = $r4;

        return;
    }

    public void add(net.sourceforge.plantuml.creole.atom.Atom)
    {
        net.sourceforge.plantuml.creole.atom.Atom r0;
        net.sourceforge.plantuml.creole.Sea r1;
        net.sourceforge.plantuml.graphic.StringBounder $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.creole.Position $r4;
        double $d1, $d2, $d3, $d4;
        java.util.Map $r6;

        r1 := @this: net.sourceforge.plantuml.creole.Sea;

        r0 := @parameter0: net.sourceforge.plantuml.creole.atom.Atom;

        $r2 = r1.<net.sourceforge.plantuml.creole.Sea: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r3 = interfaceinvoke r0.<net.sourceforge.plantuml.creole.atom.Atom: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $r4 = new net.sourceforge.plantuml.creole.Position;

        $d1 = r1.<net.sourceforge.plantuml.creole.Sea: double currentX>;

        specialinvoke $r4.<net.sourceforge.plantuml.creole.Position: void <init>(double,double,net.sourceforge.plantuml.awt.geom.Dimension2D)>($d1, 0.0, r3);

        $r6 = r1.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

        $d2 = r1.<net.sourceforge.plantuml.creole.Sea: double currentX>;

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = $d2 + $d3;

        r1.<net.sourceforge.plantuml.creole.Sea: double currentX> = $d4;

        return;
    }

    public net.sourceforge.plantuml.creole.Position getPosition(net.sourceforge.plantuml.creole.atom.Atom)
    {
        net.sourceforge.plantuml.creole.Sea r0;
        net.sourceforge.plantuml.creole.atom.Atom r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.creole.Position $r4;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        r1 := @parameter0: net.sourceforge.plantuml.creole.atom.Atom;

        $r2 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.creole.Position) $r3;

        return $r4;
    }

    public void doAlign()
    {
        java.util.HashMap $r0;
        net.sourceforge.plantuml.creole.Sea r1;
        java.util.Map $r2, $r15;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5, $r7, $r9;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.creole.Position r8, r14;
        net.sourceforge.plantuml.creole.atom.Atom r10;
        net.sourceforge.plantuml.graphic.StringBounder $r11, $r13;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r12;
        double d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.creole.Sea;

        $r0 = new java.util.HashMap;

        $r2 = r1.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        $r3 = virtualinvoke $r0.<java.util.HashMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (net.sourceforge.plantuml.creole.Position) $r7;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (net.sourceforge.plantuml.creole.atom.Atom) $r9;

        $r11 = r1.<net.sourceforge.plantuml.creole.Sea: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $r12 = interfaceinvoke r10.<net.sourceforge.plantuml.creole.atom.Atom: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r11);

        d0 = virtualinvoke $r12.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = neg d0;

        $r13 = r1.<net.sourceforge.plantuml.creole.Sea: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $d2 = interfaceinvoke r10.<net.sourceforge.plantuml.creole.atom.Atom: double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)>($r13);

        $d3 = $d1 + $d2;

        r14 = virtualinvoke r8.<net.sourceforge.plantuml.creole.Position: net.sourceforge.plantuml.creole.Position translateY(double)>($d3);

        $r15 = r1.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r14);

        goto label1;

     label2:
        return;
    }

    public void translateMinYto(double)
    {
        double d0, $d1, d2;
        net.sourceforge.plantuml.creole.Sea r0;
        java.util.HashMap $r1;
        java.util.Map $r2, $r11;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5, $r7, $r9;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.creole.Position r8, $r12;
        net.sourceforge.plantuml.creole.atom.Atom r10;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.creole.Sea: double getMinY()>();

        d2 = d0 - $d1;

        $r1 = new java.util.HashMap;

        $r2 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (net.sourceforge.plantuml.creole.Position) $r7;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (net.sourceforge.plantuml.creole.atom.Atom) $r9;

        $r11 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        $r12 = virtualinvoke r8.<net.sourceforge.plantuml.creole.Position: net.sourceforge.plantuml.creole.Position translateY(double)>(d2);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r12);

        goto label1;

     label2:
        return;
    }

    public void exportAllPositions(java.util.Map)
    {
        java.util.Map r0, $r2;
        net.sourceforge.plantuml.creole.Sea r1;

        r1 := @this: net.sourceforge.plantuml.creole.Sea;

        r0 := @parameter0: java.util.Map;

        $r2 = r1.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        interfaceinvoke r0.<java.util.Map: void putAll(java.util.Map)>($r2);

        return;
    }

    public double getMinY()
    {
        net.sourceforge.plantuml.creole.Sea r0;
        java.util.Map $r1, $r2;
        int $i0;
        java.util.Collection $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.creole.Position r6;
        double $d0, d1;
        byte $b1;
        java.lang.IllegalStateException $r7;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        $r1 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label1:
        d1 = 1.7976931348623157E308;

        $r2 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.creole.Position) $r5;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.creole.Position: double getMinY()>();

        $b1 = d1 cmpl $d0;

        if $b1 <= 0 goto label3;

        d1 = virtualinvoke r6.<net.sourceforge.plantuml.creole.Position: double getMinY()>();

     label3:
        goto label2;

     label4:
        return d1;
    }

    public double getMaxY()
    {
        net.sourceforge.plantuml.creole.Sea r0;
        java.util.Map $r1, $r2;
        int $i0;
        java.util.Collection $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        net.sourceforge.plantuml.creole.Position r6;
        double $d0, d1;
        byte $b1;
        java.lang.IllegalStateException $r7;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        $r1 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label1:
        d1 = -1.7976931348623157E308;

        $r2 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.creole.Position) $r5;

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.creole.Position: double getMaxY()>();

        $b1 = d1 cmpg $d0;

        if $b1 >= 0 goto label3;

        d1 = virtualinvoke r6.<net.sourceforge.plantuml.creole.Position: double getMaxY()>();

     label3:
        goto label2;

     label4:
        return d1;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.creole.Sea r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.creole.Sea: double getMaxY()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.creole.Sea: double getMinY()>();

        $d2 = $d0 - $d1;

        return $d2;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax update(net.sourceforge.plantuml.ugraphic.MinMax)
    {
        net.sourceforge.plantuml.creole.Sea r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.creole.Position r5;
        net.sourceforge.plantuml.ugraphic.MinMax r6;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        r6 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMax;

        $r1 = r0.<net.sourceforge.plantuml.creole.Sea: java.util.Map positions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.creole.Position) $r4;

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.creole.Position: net.sourceforge.plantuml.ugraphic.MinMax update(net.sourceforge.plantuml.ugraphic.MinMax)>(r6);

        goto label1;

     label2:
        return r6;
    }

    public final double getWidth()
    {
        net.sourceforge.plantuml.creole.Sea r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.creole.Sea;

        $d0 = r0.<net.sourceforge.plantuml.creole.Sea: double currentX>;

        return $d0;
    }
}
