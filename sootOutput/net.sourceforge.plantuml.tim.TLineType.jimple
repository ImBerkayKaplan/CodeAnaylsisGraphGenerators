public final enum class net.sourceforge.plantuml.tim.TLineType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.tim.TLineType PLAIN;
    public static final enum net.sourceforge.plantuml.tim.TLineType AFFECTATION_DEFINE;
    public static final enum net.sourceforge.plantuml.tim.TLineType AFFECTATION;
    public static final enum net.sourceforge.plantuml.tim.TLineType ASSERT;
    public static final enum net.sourceforge.plantuml.tim.TLineType IF;
    public static final enum net.sourceforge.plantuml.tim.TLineType IFDEF;
    public static final enum net.sourceforge.plantuml.tim.TLineType UNDEF;
    public static final enum net.sourceforge.plantuml.tim.TLineType IFNDEF;
    public static final enum net.sourceforge.plantuml.tim.TLineType ELSE;
    public static final enum net.sourceforge.plantuml.tim.TLineType ELSEIF;
    public static final enum net.sourceforge.plantuml.tim.TLineType ENDIF;
    public static final enum net.sourceforge.plantuml.tim.TLineType WHILE;
    public static final enum net.sourceforge.plantuml.tim.TLineType ENDWHILE;
    public static final enum net.sourceforge.plantuml.tim.TLineType FOREACH;
    public static final enum net.sourceforge.plantuml.tim.TLineType ENDFOREACH;
    public static final enum net.sourceforge.plantuml.tim.TLineType DECLARE_RETURN_FUNCTION;
    public static final enum net.sourceforge.plantuml.tim.TLineType DECLARE_PROCEDURE;
    public static final enum net.sourceforge.plantuml.tim.TLineType END_FUNCTION;
    public static final enum net.sourceforge.plantuml.tim.TLineType RETURN;
    public static final enum net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINE;
    public static final enum net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINELONG;
    public static final enum net.sourceforge.plantuml.tim.TLineType THEME;
    public static final enum net.sourceforge.plantuml.tim.TLineType INCLUDE;
    public static final enum net.sourceforge.plantuml.tim.TLineType INCLUDE_DEF;
    public static final enum net.sourceforge.plantuml.tim.TLineType IMPORT;
    public static final enum net.sourceforge.plantuml.tim.TLineType STARTSUB;
    public static final enum net.sourceforge.plantuml.tim.TLineType ENDSUB;
    public static final enum net.sourceforge.plantuml.tim.TLineType INCLUDESUB;
    public static final enum net.sourceforge.plantuml.tim.TLineType LOG;
    public static final enum net.sourceforge.plantuml.tim.TLineType DUMP_MEMORY;
    public static final enum net.sourceforge.plantuml.tim.TLineType COMMENT_SIMPLE;
    public static final enum net.sourceforge.plantuml.tim.TLineType COMMENT_LONG_START;
    private static final net.sourceforge.plantuml.tim.TLineType[] $VALUES;

    public static net.sourceforge.plantuml.tim.TLineType[] values()
    {
        net.sourceforge.plantuml.tim.TLineType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.tim.TLineType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.tim.TLineType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.tim.TLineType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/tim/TLineType;", r0);

        $r2 = (net.sourceforge.plantuml.tim.TLineType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.tim.TLineType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.tim.TLineType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.tim.TLineType getFromLineInternal(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32;
        net.sourceforge.plantuml.tim.TLineType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!define\\s+[\\p{L}_][\\p{L}_0-9]*\\(.*");

        if $z0 == 0 goto label01;

        $r33 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINE>;

        return $r33;

     label01:
        $z1 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!definelong\\s+[\\p{L}_][\\p{L}_0-9]*\\b.*");

        if $z1 == 0 goto label02;

        $r32 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINELONG>;

        return $r32;

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!define\\s+[\\p{L}_][\\p{L}_0-9]*\\b.*");

        if $z2 == 0 goto label03;

        $r31 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType AFFECTATION_DEFINE>;

        return $r31;

     label03:
        $z3 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!\\s*(local|global)?\\s*\\$?[\\p{L}_][\\p{L}_0-9]*\\s*\\??=.*");

        if $z3 == 0 goto label04;

        $r30 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType AFFECTATION>;

        return $r30;

     label04:
        $z4 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*\'.*");

        if $z4 == 0 goto label05;

        $r29 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_SIMPLE>;

        return $r29;

     label05:
        $z5 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*/\'.*\'/\\s*$");

        if $z5 == 0 goto label06;

        $r28 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_SIMPLE>;

        return $r28;

     label06:
        $z6 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*/\'.*");

        if $z6 == 0 goto label07;

        $z32 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'/");

        if $z32 != 0 goto label07;

        $r27 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_LONG_START>;

        return $r27;

     label07:
        $z7 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!ifdef\\s+.*");

        if $z7 == 0 goto label08;

        $r26 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IFDEF>;

        return $r26;

     label08:
        $z8 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!undef\\s+.*");

        if $z8 == 0 goto label09;

        $r25 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType UNDEF>;

        return $r25;

     label09:
        $z9 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!ifndef\\s+.*");

        if $z9 == 0 goto label10;

        $r24 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IFNDEF>;

        return $r24;

     label10:
        $z10 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!assert\\s+.*");

        if $z10 == 0 goto label11;

        $r23 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ASSERT>;

        return $r23;

     label11:
        $z11 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!if\\s+.*");

        if $z11 == 0 goto label12;

        $r22 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IF>;

        return $r22;

     label12:
        $z12 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(unquoted\\s|final\\s)*(function)\\s+\\$?[\\p{L}_][\\p{L}_0-9]*.*");

        if $z12 == 0 goto label13;

        $r21 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DECLARE_RETURN_FUNCTION>;

        return $r21;

     label13:
        $z13 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(unquoted\\s|final\\s)*(procedure)\\s+\\$?[\\p{L}_][\\p{L}_0-9]*.*");

        if $z13 == 0 goto label14;

        $r20 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DECLARE_PROCEDURE>;

        return $r20;

     label14:
        $z14 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!else\\b.*");

        if $z14 == 0 goto label15;

        $r19 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ELSE>;

        return $r19;

     label15:
        $z15 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!elseif\\b.*");

        if $z15 == 0 goto label16;

        $r18 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ELSEIF>;

        return $r18;

     label16:
        $z16 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!endif\\b.*");

        if $z16 == 0 goto label17;

        $r17 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDIF>;

        return $r17;

     label17:
        $z17 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!while\\s+.*");

        if $z17 == 0 goto label18;

        $r16 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType WHILE>;

        return $r16;

     label18:
        $z18 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!endwhile\\b.*");

        if $z18 == 0 goto label19;

        $r15 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDWHILE>;

        return $r15;

     label19:
        $z19 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!foreach\\s+.*");

        if $z19 == 0 goto label20;

        $r14 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType FOREACH>;

        return $r14;

     label20:
        $z20 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!endfor\\b.*");

        if $z20 == 0 goto label21;

        $r13 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDFOREACH>;

        return $r13;

     label21:
        $z21 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(end\\s*function|end\\s*definelong|end\\s*procedure)\\b.*");

        if $z21 == 0 goto label22;

        $r12 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType END_FUNCTION>;

        return $r12;

     label22:
        $z22 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!return\\b.*");

        if $z22 == 0 goto label23;

        $r11 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType RETURN>;

        return $r11;

     label23:
        $z23 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!theme\\b.*");

        if $z23 == 0 goto label24;

        $r10 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType THEME>;

        return $r10;

     label24:
        $z24 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(include|includeurl|include_many|include_once)\\b.*");

        if $z24 == 0 goto label25;

        $r9 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE>;

        return $r9;

     label25:
        $z25 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(includedef)\\b.*");

        if $z25 == 0 goto label26;

        $r8 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE_DEF>;

        return $r8;

     label26:
        $z26 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(import)\\b.*");

        if $z26 == 0 goto label27;

        $r7 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IMPORT>;

        return $r7;

     label27:
        $z27 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!startsub\\s+.*");

        if $z27 == 0 goto label28;

        $r6 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType STARTSUB>;

        return $r6;

     label28:
        $z28 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!endsub\\b.*");

        if $z28 == 0 goto label29;

        $r5 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDSUB>;

        return $r5;

     label29:
        $z29 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!includesub\\b.*");

        if $z29 == 0 goto label30;

        $r4 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDESUB>;

        return $r4;

     label30:
        $z30 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(log)\\b.*");

        if $z30 == 0 goto label31;

        $r3 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LOG>;

        return $r3;

     label31:
        $z31 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^\\s*!(dump_memory)\\b.*");

        if $z31 == 0 goto label32;

        $r2 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DUMP_MEMORY>;

        return $r2;

     label32:
        $r1 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType PLAIN>;

        return $r1;
    }

    public static boolean isQuote(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 == 34 goto label1;

        if c0 != 39 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isLetterOrUnderscoreOrDigit(char)
    {
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscore(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLatinDigit(char)>(c0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isLetterOrUnderscore(char)
    {
        char c0;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetter(char)>(c0);

        if $z0 != 0 goto label1;

        if c0 != 95 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isLetterOrUnderscoreOrDollar(char)
    {
        char c0;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscore(char)>(c0);

        if $z0 != 0 goto label1;

        if c0 != 36 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isLetterOrDigit(char)
    {
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetter(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLatinDigit(char)>(c0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isLetter(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        return $z0;
    }

    public static boolean isSpaceChar(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>(c0);

        return $z0;
    }

    public static boolean isLatinDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 < 48 goto label1;

        if c0 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static net.sourceforge.plantuml.tim.TLineType[] $values()
    {
        net.sourceforge.plantuml.tim.TLineType[] $r0;
        net.sourceforge.plantuml.tim.TLineType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;

        $r0 = newarray (net.sourceforge.plantuml.tim.TLineType)[32];

        $r1 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType PLAIN>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType AFFECTATION_DEFINE>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType AFFECTATION>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ASSERT>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IF>;

        $r0[4] = $r5;

        $r6 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IFDEF>;

        $r0[5] = $r6;

        $r7 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType UNDEF>;

        $r0[6] = $r7;

        $r8 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IFNDEF>;

        $r0[7] = $r8;

        $r9 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ELSE>;

        $r0[8] = $r9;

        $r10 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ELSEIF>;

        $r0[9] = $r10;

        $r11 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDIF>;

        $r0[10] = $r11;

        $r12 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType WHILE>;

        $r0[11] = $r12;

        $r13 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDWHILE>;

        $r0[12] = $r13;

        $r14 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType FOREACH>;

        $r0[13] = $r14;

        $r15 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDFOREACH>;

        $r0[14] = $r15;

        $r16 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DECLARE_RETURN_FUNCTION>;

        $r0[15] = $r16;

        $r17 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DECLARE_PROCEDURE>;

        $r0[16] = $r17;

        $r18 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType END_FUNCTION>;

        $r0[17] = $r18;

        $r19 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType RETURN>;

        $r0[18] = $r19;

        $r20 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINE>;

        $r0[19] = $r20;

        $r21 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINELONG>;

        $r0[20] = $r21;

        $r22 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType THEME>;

        $r0[21] = $r22;

        $r23 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE>;

        $r0[22] = $r23;

        $r24 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE_DEF>;

        $r0[23] = $r24;

        $r25 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IMPORT>;

        $r0[24] = $r25;

        $r26 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType STARTSUB>;

        $r0[25] = $r26;

        $r27 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDSUB>;

        $r0[26] = $r27;

        $r28 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDESUB>;

        $r0[27] = $r28;

        $r29 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LOG>;

        $r0[28] = $r29;

        $r30 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DUMP_MEMORY>;

        $r0[29] = $r30;

        $r31 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_SIMPLE>;

        $r0[30] = $r31;

        $r32 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_LONG_START>;

        $r0[31] = $r32;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.tim.TLineType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        net.sourceforge.plantuml.tim.TLineType[] $r32;

        $r0 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("PLAIN", 0);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType PLAIN> = $r0;

        $r1 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r1.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("AFFECTATION_DEFINE", 1);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType AFFECTATION_DEFINE> = $r1;

        $r2 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("AFFECTATION", 2);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType AFFECTATION> = $r2;

        $r3 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("ASSERT", 3);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ASSERT> = $r3;

        $r4 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r4.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("IF", 4);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IF> = $r4;

        $r5 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r5.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("IFDEF", 5);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IFDEF> = $r5;

        $r6 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r6.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("UNDEF", 6);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType UNDEF> = $r6;

        $r7 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r7.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("IFNDEF", 7);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IFNDEF> = $r7;

        $r8 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r8.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("ELSE", 8);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ELSE> = $r8;

        $r9 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r9.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("ELSEIF", 9);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ELSEIF> = $r9;

        $r10 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r10.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("ENDIF", 10);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDIF> = $r10;

        $r11 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r11.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("WHILE", 11);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType WHILE> = $r11;

        $r12 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r12.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("ENDWHILE", 12);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDWHILE> = $r12;

        $r13 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r13.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("FOREACH", 13);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType FOREACH> = $r13;

        $r14 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r14.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("ENDFOREACH", 14);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDFOREACH> = $r14;

        $r15 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r15.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("DECLARE_RETURN_FUNCTION", 15);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DECLARE_RETURN_FUNCTION> = $r15;

        $r16 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r16.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("DECLARE_PROCEDURE", 16);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DECLARE_PROCEDURE> = $r16;

        $r17 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r17.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("END_FUNCTION", 17);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType END_FUNCTION> = $r17;

        $r18 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r18.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("RETURN", 18);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType RETURN> = $r18;

        $r19 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r19.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("LEGACY_DEFINE", 19);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINE> = $r19;

        $r20 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r20.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("LEGACY_DEFINELONG", 20);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LEGACY_DEFINELONG> = $r20;

        $r21 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r21.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("THEME", 21);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType THEME> = $r21;

        $r22 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r22.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("INCLUDE", 22);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE> = $r22;

        $r23 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r23.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("INCLUDE_DEF", 23);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE_DEF> = $r23;

        $r24 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r24.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("IMPORT", 24);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IMPORT> = $r24;

        $r25 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r25.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("STARTSUB", 25);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType STARTSUB> = $r25;

        $r26 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r26.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("ENDSUB", 26);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ENDSUB> = $r26;

        $r27 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r27.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("INCLUDESUB", 27);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDESUB> = $r27;

        $r28 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r28.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("LOG", 28);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LOG> = $r28;

        $r29 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r29.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("DUMP_MEMORY", 29);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DUMP_MEMORY> = $r29;

        $r30 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r30.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("COMMENT_SIMPLE", 30);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_SIMPLE> = $r30;

        $r31 = new net.sourceforge.plantuml.tim.TLineType;

        specialinvoke $r31.<net.sourceforge.plantuml.tim.TLineType: void <init>(java.lang.String,int)>("COMMENT_LONG_START", 31);

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType COMMENT_LONG_START> = $r31;

        $r32 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType[] $values()>();

        <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType[] $VALUES> = $r32;

        return;
    }
}
