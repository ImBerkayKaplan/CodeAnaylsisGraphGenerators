public abstract class net.sourceforge.plantuml.skin.AbstractComponent extends java.lang.Object implements net.sourceforge.plantuml.skin.Component
{
    private final net.sourceforge.plantuml.style.Style style;

    public final net.sourceforge.plantuml.style.Style[] getUsedStyles()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.skin.AbstractComponent r1;

        r1 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.skin.AbstractComponent r1;

        r1 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void <init>(net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.skin.AbstractComponent r0;
        net.sourceforge.plantuml.style.Style r1;

        r0 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        r1 := @parameter0: net.sourceforge.plantuml.style.Style;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.skin.AbstractComponent: net.sourceforge.plantuml.style.Style style> = r1;

        return;
    }

    protected final net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.skin.AbstractComponent r0;
        net.sourceforge.plantuml.style.Style $r1;

        r0 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        $r1 = r0.<net.sourceforge.plantuml.skin.AbstractComponent: net.sourceforge.plantuml.style.Style style>;

        return $r1;
    }

    protected abstract void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area);

    protected void drawBackgroundInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area)
    {
        net.sourceforge.plantuml.skin.AbstractComponent r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.skin.Area r2;

        r0 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r2 := @parameter1: net.sourceforge.plantuml.skin.Area;

        return;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate $r0;
        net.sourceforge.plantuml.skin.AbstractComponent r1;
        double $d0, $d1;
        net.sourceforge.plantuml.skin.Context2D r2;
        boolean $z0;
        net.sourceforge.plantuml.skin.Area r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, r5;

        r1 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r3 := @parameter1: net.sourceforge.plantuml.skin.Area;

        r2 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.skin.AbstractComponent: double getPaddingX()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.skin.AbstractComponent: double getPaddingY()>();

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d0, $d1);

        r5 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $z0 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Context2D: boolean isBackground()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<net.sourceforge.plantuml.skin.AbstractComponent: void drawBackgroundInternalU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area)>(r5, r3);

        goto label2;

     label1:
        virtualinvoke r1.<net.sourceforge.plantuml.skin.AbstractComponent: void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area)>(r5, r3);

     label2:
        return;
    }

    public double getPaddingX()
    {
        net.sourceforge.plantuml.skin.AbstractComponent r0;

        r0 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        return 0.0;
    }

    public double getPaddingY()
    {
        net.sourceforge.plantuml.skin.AbstractComponent r0;

        r0 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        return 0.0;
    }

    public abstract double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder);

    public abstract double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder);

    public final net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.skin.AbstractComponent r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, d1;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @this: net.sourceforge.plantuml.skin.AbstractComponent;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.skin.AbstractComponent: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.AbstractComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d0, d1);

        return $r2;
    }
}
