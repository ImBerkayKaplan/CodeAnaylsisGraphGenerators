public class net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes extends java.lang.Object
{
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final java.util.Map delays;
    private final net.sourceforge.plantuml.sequencediagram.Participant p;
    private final java.util.List events;
    private final java.util.Map eventsStep;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.sequencediagram.Participant, java.util.List, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        java.util.TreeMap $r1;
        java.util.HashMap $r2;
        net.sourceforge.plantuml.sequencediagram.Participant r3;
        java.util.List r4;
        net.sourceforge.plantuml.skin.rose.Rose r5;
        net.sourceforge.plantuml.ISkinParam r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r3 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r4 := @parameter1: java.util.List;

        r5 := @parameter2: net.sourceforge.plantuml.skin.rose.Rose;

        r6 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map delays> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map eventsStep> = $r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.List events> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.skin.rose.Rose skin> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        return;
    }

    public void addStep(net.sourceforge.plantuml.sequencediagram.Event, double)
    {
        net.sourceforge.plantuml.sequencediagram.Event r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.sequencediagram.LifeEvent $r4;
        java.util.Map $r5, $r7;
        java.lang.Double $r6, $r8;
        double d0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        d0 := @parameter1: double;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.sequencediagram.Event: boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)>($r2);

        if $z0 == 0 goto label2;

        $z1 = r0 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z1 == 0 goto label1;

        $r4 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r0;

        $z2 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isDeactivate()>();

        if $z2 == 0 goto label1;

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map eventsStep>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $z3 = interfaceinvoke $r5.<java.util.Map: boolean containsValue(java.lang.Object)>($r6);

        if $z3 == 0 goto label1;

        d0 = d0 + 5.0;

     label1:
        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map eventsStep>;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r8);

     label2:
        return;
    }

    public net.sourceforge.plantuml.sequencediagram.Participant getParticipant()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        net.sourceforge.plantuml.sequencediagram.Participant $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        return $r1;
    }

    public int getLevelAt(net.sourceforge.plantuml.sequencediagram.Event, net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        net.sourceforge.plantuml.sequencediagram.Event r1;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode r2;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode;

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: int getLevelAtInternal(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r1, r2);

        return $i0;
    }

    private int getLevelAtInternal(net.sourceforge.plantuml.sequencediagram.Event, net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.Event r5, r6, r22;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r7, r19;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r8;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode r9, $r10, $r23;
        net.sourceforge.plantuml.sequencediagram.Participant $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r6 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        r9 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode;

        i0 = 0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.List events>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.Event) $r4;

        $z1 = r5 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z1 == 0 goto label3;

        r19 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r5;

        $r17 = virtualinvoke r19.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r17 != $r18 goto label2;

        $z9 = virtualinvoke r19.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isActivate()>();

        if $z9 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        $r20 = virtualinvoke r19.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r21 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r20 != $r21 goto label3;

        $z8 = virtualinvoke r19.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isDeactivateOrDestroy()>();

        if $z8 == 0 goto label3;

        i0 = i0 + -1;

     label3:
        if r6 != r5 goto label7;

        $z2 = r5 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z2 == 0 goto label5;

        r22 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Event nextButSkippingNotes(java.util.Iterator)>(r2);

        $z3 = r22 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z3 == 0 goto label5;

        r7 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r22;

        r8 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) r5;

        $r10 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode IGNORE_FUTURE_ACTIVATE>;

        if r9 == $r10 goto label4;

        $z6 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isActivate()>();

        if $z6 == 0 goto label4;

        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $z7 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)>($r14);

        if $z7 == 0 goto label4;

        $r15 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r15 != $r16 goto label4;

        i0 = i0 + 1;

     label4:
        $r23 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode CONSIDERE_FUTURE_DEACTIVATE>;

        if r9 != $r23 goto label5;

        $z4 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isDeactivateOrDestroy()>();

        if $z4 == 0 goto label5;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $z5 = virtualinvoke r8.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean dealWith(net.sourceforge.plantuml.sequencediagram.Participant)>($r11);

        if $z5 == 0 goto label5;

        $r12 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r12 != $r13 goto label5;

        i0 = i0 + -1;

     label5:
        if i0 >= 0 goto label6;

        return 0;

     label6:
        return i0;

     label7:
        goto label1;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    private boolean isNextEventADestroy(net.sourceforge.plantuml.sequencediagram.Event)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Event r4, r5, r6;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r7;
        net.sourceforge.plantuml.sequencediagram.Participant $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r5 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.List events>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.Event) $r3;

        if r5 == r4 goto label2;

        goto label1;

     label2:
        $z1 = r4 instanceof net.sourceforge.plantuml.sequencediagram.Message;

        if $z1 == 0 goto label3;

        r6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Event nextButSkippingNotes(java.util.Iterator)>(r2);

        $z2 = r6 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z2 == 0 goto label3;

        r7 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r6;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $z3 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isDestroy(net.sourceforge.plantuml.sequencediagram.Participant)>($r8);

        return $z3;

     label3:
        return 0;

     label4:
        return 0;
    }

    private net.sourceforge.plantuml.graphic.SymbolContext getActivateColor(net.sourceforge.plantuml.sequencediagram.Event)
    {
        net.sourceforge.plantuml.sequencediagram.Event r0, r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r1;
        java.util.List $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r6, r9;
        net.sourceforge.plantuml.graphic.SymbolContext $r7, $r8;
        java.util.Iterator r10;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        $z0 = r0 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z0 == 0 goto label1;

        r9 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r0;

        $z5 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isActivate()>();

        if $z5 == 0 goto label1;

        $r8 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.graphic.SymbolContext getSpecificColors()>();

        return $r8;

     label1:
        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.List events>;

        r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label7;

        $r3 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.Event) $r3;

        if r0 == r4 goto label3;

        goto label2;

     label3:
        $z1 = r4 instanceof net.sourceforge.plantuml.sequencediagram.Message;

        if $z1 != 0 goto label4;

        $z4 = r4 instanceof net.sourceforge.plantuml.sequencediagram.MessageExo;

        if $z4 == 0 goto label6;

     label4:
        r5 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Event nextButSkippingNotes(java.util.Iterator)>(r10);

        $z2 = r5 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z2 == 0 goto label6;

        r6 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r5;

        $z3 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isActivate()>();

        if $z3 == 0 goto label5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.graphic.SymbolContext getSpecificColors()>();

        return $r7;

     label5:
        return null;

     label6:
        return null;

     label7:
        return null;
    }

    private net.sourceforge.plantuml.sequencediagram.Event nextButSkippingNotes(java.util.Iterator)
    {
        java.util.Iterator r0;
        boolean $z0, $z1;
        java.lang.Object $r1;
        net.sourceforge.plantuml.sequencediagram.Event r2;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r3;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r0 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (net.sourceforge.plantuml.sequencediagram.Event) $r1;

        $z1 = r2 instanceof net.sourceforge.plantuml.sequencediagram.Note;

        if $z1 == 0 goto label3;

        goto label1;

     label3:
        return r2;
    }

    public net.sourceforge.plantuml.sequencediagram.teoz.Stairs getStairs(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.sequencediagram.teoz.Step $r5, $r13;
        double d0, d1, $d2, $d3, $d4;
        java.lang.Object $r6, $r9;
        net.sourceforge.plantuml.sequencediagram.Event r7;
        java.util.Map $r8;
        java.lang.Double r10;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode $r11;
        net.sourceforge.plantuml.graphic.SymbolContext r12;
        byte $b0;
        java.lang.AssertionError $r15;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20;
        java.lang.String $r21;
        int i1;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.Stairs;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: void <init>()>();

        i1 = 0;

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.List events>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Event) $r6;

        $r8 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map eventsStep>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r10 = (java.lang.Double) $r9;

        if r10 == null goto label3;

        $z1 = <net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $d4 = virtualinvoke r10.<java.lang.Double: double doubleValue()>();

        $b0 = $d4 cmpg d0;

        if $b0 <= 0 goto label2;

        $r15 = new java.lang.AssertionError;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" totalHeight=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>($r21);

        throw $r15;

     label2:
        $r11 = <net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode CONSIDERE_FUTURE_DEACTIVATE>;

        i1 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: int getLevelAt(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>(r7, $r11);

        r12 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.graphic.SymbolContext getActivateColor(net.sourceforge.plantuml.sequencediagram.Event)>(r7);

        $r13 = new net.sourceforge.plantuml.sequencediagram.teoz.Step;

        $d2 = virtualinvoke r10.<java.lang.Double: double doubleValue()>();

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d2);

        $z2 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: boolean isNextEventADestroy(net.sourceforge.plantuml.sequencediagram.Event)>(r7);

        specialinvoke $r13.<net.sourceforge.plantuml.sequencediagram.teoz.Step: void <init>(double,boolean,int,net.sourceforge.plantuml.graphic.SymbolContext)>($d3, $z2, i1, r12);

        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: void addStep(net.sourceforge.plantuml.sequencediagram.teoz.Step)>($r13);

     label3:
        goto label1;

     label4:
        $r5 = new net.sourceforge.plantuml.sequencediagram.teoz.Step;

        specialinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.Step: void <init>(double,boolean,int,net.sourceforge.plantuml.graphic.SymbolContext)>(d0, 0, i1, null);

        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: void addStep(net.sourceforge.plantuml.sequencediagram.teoz.Step)>($r5);

        return $r0;
    }

    private boolean isActivateAnDeactivate(net.sourceforge.plantuml.sequencediagram.Event)
    {
        net.sourceforge.plantuml.sequencediagram.Event r0;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r2;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        $z0 = r0 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z0 == 0 goto label3;

        r1 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) r0;

        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean isActivate()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: boolean isDeactivate()>();

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int getMaxValue()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.Event r4;
        net.sourceforge.plantuml.sequencediagram.LifeEvent r5;
        net.sourceforge.plantuml.sequencediagram.Participant $r6, $r7, $r8, $r9;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        i0 = 0;

        i1 = 0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.List events>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.Event) $r3;

        $z1 = r4 instanceof net.sourceforge.plantuml.sequencediagram.LifeEvent;

        if $z1 == 0 goto label4;

        r5 = (net.sourceforge.plantuml.sequencediagram.LifeEvent) r4;

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r6 != $r7 goto label2;

        $z3 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isActivate()>();

        if $z3 == 0 goto label2;

        i1 = i1 + 1;

     label2:
        if i1 <= i0 goto label3;

        i0 = i1;

     label3:
        $r8 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.LifeEvent: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.Participant p>;

        if $r8 != $r9 goto label4;

        $z2 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.LifeEvent: boolean isDeactivateOrDestroy()>();

        if $z2 == 0 goto label4;

        i1 = i1 + -1;

     label4:
        goto label1;

     label5:
        return i0;
    }

    public double getMaxPosition(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        int i0;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer $r1;
        net.sourceforge.plantuml.skin.SimpleContext2D $r2;
        java.util.Map $r3;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: int getMaxValue()>();

        $r1 = new net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        $r2 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r2.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(1);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map delays>;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void <init>(net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam,java.util.Map)>($r2, $r5, $r4, $r3);

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $d2 = $d0 / 2.0;

        $d1 = (double) i0;

        $d3 = $d2 * $d1;

        return $d3;
    }

    public void drawBoxes(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Context2D, double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        double d0, d1;
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs r1;
        int i0, i1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.skin.Context2D r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r3 := @parameter1: net.sourceforge.plantuml.skin.Context2D;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.sequencediagram.teoz.Stairs getStairs(double,double)>(d0, d1);

        i0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: int getMaxIndent()>();

        if i0 != 0 goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: void drawDestroys(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.sequencediagram.teoz.Stairs,net.sourceforge.plantuml.skin.Context2D)>(r2, r1, r3);

     label1:
        i1 = 1;

     label2:
        if i1 > i0 goto label3;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: void drawOneLevel(net.sourceforge.plantuml.ugraphic.UGraphic,int,net.sourceforge.plantuml.sequencediagram.teoz.Stairs,net.sourceforge.plantuml.skin.Context2D)>(r2, i1, r1, r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void drawDestroys(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.sequencediagram.teoz.Stairs, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer $r0;
        net.sourceforge.plantuml.skin.Context2D r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r2;
        java.util.Map $r3;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs r7;
        java.util.Collection $r8;
        java.util.Iterator r9;
        boolean $z0;
        java.lang.Object $r10;
        net.sourceforge.plantuml.sequencediagram.teoz.Step r11;
        net.sourceforge.plantuml.ugraphic.UGraphic r12;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r7 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.Stairs;

        r1 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        $r5 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r4 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map delays>;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void <init>(net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam,java.util.Map)>(r1, $r5, $r4, $r3);

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.Collection getSteps()>();

        r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (net.sourceforge.plantuml.sequencediagram.teoz.Step) $r10;

        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void drawDestroyIfNeeded(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.sequencediagram.teoz.Step)>(r12, r11);

        goto label1;

     label2:
        return;
    }

    private void drawOneLevel(net.sourceforge.plantuml.ugraphic.UGraphic, int, net.sourceforge.plantuml.sequencediagram.teoz.Stairs, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer $r0;
        net.sourceforge.plantuml.skin.Context2D r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r2;
        java.util.Map $r3;
        net.sourceforge.plantuml.ISkinParam $r4;
        net.sourceforge.plantuml.skin.rose.Rose $r5;
        int i0, $i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.graphic.StringBounder $r7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8;
        net.sourceforge.plantuml.sequencediagram.teoz.Stairs r9;
        java.util.Collection $r10;
        java.util.Iterator r11;
        boolean $z0, $z1, z2;
        java.lang.Object $r12;
        net.sourceforge.plantuml.sequencediagram.teoz.Step r13;
        net.sourceforge.plantuml.graphic.SymbolContext $r14;
        net.sourceforge.plantuml.ugraphic.UGraphic r15, r16;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        r15 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        i0 := @parameter1: int;

        r9 := @parameter2: net.sourceforge.plantuml.sequencediagram.teoz.Stairs;

        r1 := @parameter3: net.sourceforge.plantuml.skin.Context2D;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer;

        $r5 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r4 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map delays>;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void <init>(net.sourceforge.plantuml.skin.Context2D,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam,java.util.Map)>(r1, $r5, $r4, $r3);

        $i1 = i0 - 1;

        $d0 = (double) $i1;

        $r7 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d1 = virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: double getWidth(net.sourceforge.plantuml.graphic.StringBounder)>($r7);

        $d2 = $d0 * $d1;

        $d3 = $d2 / 2.0;

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d3);

        r16 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        z2 = 1;

        $r10 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.teoz.Stairs: java.util.Collection getSteps()>();

        r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (net.sourceforge.plantuml.sequencediagram.teoz.Step) $r12;

        i2 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.teoz.Step: int getIndent()>();

        if z2 == 0 goto label2;

        if i2 != i0 goto label2;

        $d5 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.teoz.Step: double getValue()>();

        $r14 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.teoz.Step: net.sourceforge.plantuml.graphic.SymbolContext getColors()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void addStart(double,net.sourceforge.plantuml.graphic.SymbolContext)>($d5, $r14);

        z2 = 0;

        goto label4;

     label2:
        if z2 != 0 goto label4;

        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        if i2 >= i0 goto label4;

     label3:
        $d4 = virtualinvoke r13.<net.sourceforge.plantuml.sequencediagram.teoz.Step: double getValue()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void doDrawing(net.sourceforge.plantuml.ugraphic.UGraphic,double)>(r16, $d4);

        virtualinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer: void drawDestroyIfNeeded(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.sequencediagram.teoz.Step)>(r16, r13);

        z2 = 1;

     label4:
        goto label1;

     label5:
        return;
    }

    public void delayOn(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes r0;
        double d0, d1;
        java.util.Map $r1;
        java.lang.Double $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: java.util.Map delays>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/teoz/LiveBoxes;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: boolean $assertionsDisabled> = $z1;

        return;
    }
}
