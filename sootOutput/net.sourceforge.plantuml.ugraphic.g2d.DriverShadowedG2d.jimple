public class net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d extends java.lang.Object
{
    private final java.awt.Color color;
    private final java.awt.Color colorLine;

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d r0;
        java.awt.Color $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(int,int,int)>(170, 170, 170);

        r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: java.awt.Color color> = $r1;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,int,int)>(30, 30, 30);

        r0.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: java.awt.Color colorLine> = $r2;

        return;
    }

    private java.awt.image.ConvolveOp getConvolveOp(int, double)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        float[] r0;
        java.awt.image.Kernel $r1;
        java.awt.image.ConvolveOp $r2;
        float $f0;
        net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d r3;

        r3 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $i1 = i0 * i0;

        $d1 = (double) $i1;

        $d2 = $d1 * d0;

        $i2 = (int) $d2;

        r0 = newarray (float)[$i2];

        i7 = 0;

     label1:
        $i3 = lengthof r0;

        if i7 >= $i3 goto label2;

        $i6 = lengthof r0;

        $d9 = (double) $i6;

        $d10 = 1.0 / $d9;

        $f0 = (float) $d10;

        r0[i7] = $f0;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r1 = new java.awt.image.Kernel;

        $d3 = (double) i0;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d5 = $d3 * $d4;

        $i4 = (int) $d5;

        $d6 = (double) i0;

        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d8 = $d6 * $d7;

        $i5 = (int) $d8;

        specialinvoke $r1.<java.awt.image.Kernel: void <init>(int,int,float[])>($i4, $i5, r0);

        $r2 = new java.awt.image.ConvolveOp;

        specialinvoke $r2.<java.awt.image.ConvolveOp: void <init>(java.awt.image.Kernel,int,java.awt.RenderingHints)>($r1, 1, null);

        return $r2;
    }

    protected void drawShadow(java.awt.Graphics2D, java.awt.Shape, double, double)
    {
        byte $b0;
        java.awt.Shape r0;
        java.awt.geom.Rectangle2D r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, $d8, $d9, d10, $d11, $d12, $d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25;
        java.awt.image.BufferedImage $r2, r14;
        int $i1, $i2, $i3, $i4;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d r3;
        java.awt.Color $r4, $r7;
        java.awt.image.ConvolveOp r5;
        java.awt.Graphics2D r6, r15;
        java.lang.Exception $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.lang.OutOfMemoryError $r13;
        java.awt.geom.AffineTransform r18;

        r3 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d;

        r6 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.awt.Shape;

        d6 := @parameter2: double;

        d25 := @parameter3: double;

        $b0 = d25 cmpg 1.0;

        if $b0 >= 0 goto label1;

        d25 = 1.0;

     label1:
        r1 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        d5 = $d3 - $d4;

        $d7 = d6 * 2.0;

        $d8 = d2 + $d7;

        $d9 = $d8 + 6.0;

        d10 = $d9 * d25;

        $d11 = d6 * 2.0;

        $d12 = d5 + $d11;

        $d13 = $d12 + 6.0;

        d14 = $d13 * d25;

        r14 = null;

     label2:
        $r2 = new java.awt.image.BufferedImage;

        $i2 = (int) d10;

        $i1 = (int) d14;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i1, 2);

        r14 = $r2;

        r15 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke r15.<java.awt.Graphics2D: void scale(double,double)>(d25, d25);

        $d15 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d16 = d6 - $d15;

        $d17 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d18 = d6 - $d17;

        virtualinvoke r15.<java.awt.Graphics2D: void translate(double,double)>($d16, $d18);

        z0 = r0 instanceof java.awt.geom.Line2D$Double;

        if z0 == 0 goto label3;

        $r7 = r3.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: java.awt.Color colorLine>;

        virtualinvoke r15.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r7);

        virtualinvoke r15.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r0);

        goto label4;

     label3:
        $r4 = r3.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: java.awt.Color color>;

        virtualinvoke r15.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r4);

        virtualinvoke r15.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r0);

     label4:
        virtualinvoke r15.<java.awt.Graphics2D: void dispose()>();

        r5 = specialinvoke r3.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: java.awt.image.ConvolveOp getConvolveOp(int,double)>(6, d25);

        r14 = virtualinvoke r5.<java.awt.image.ConvolveOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r2, null);

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("Warning: Cannot draw shadow, image too big.");

        goto label8;

     label7:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Cannot draw shadow: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r12);

     label8:
        if r14 == null goto label9;

        r18 = virtualinvoke r6.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $d20 = 1.0 / d25;

        $d19 = 1.0 / d25;

        virtualinvoke r6.<java.awt.Graphics2D: void scale(double,double)>($d20, $d19);

        $d21 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d22 = $d21 * d25;

        $i3 = (int) $d22;

        $d23 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d24 = $d23 * d25;

        $i4 = (int) $d24;

        virtualinvoke r6.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r14, $i3, $i4, null);

        virtualinvoke r6.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>(r18);

     label9:
        return;

        catch java.lang.OutOfMemoryError from label2 to label5 with label6;
        catch java.lang.Exception from label2 to label5 with label7;
    }

    protected void drawOnlyLineShadow(java.awt.Graphics2D, java.awt.Shape, double, double)
    {
        byte $b0;
        java.awt.Shape r0;
        java.awt.geom.Rectangle2D r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, $d8, $d9, d10, $d11, $d12, $d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25;
        java.awt.image.BufferedImage $r2, r12;
        int $i1, $i2, $i3, $i4;
        net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d r3;
        java.awt.image.ConvolveOp r4;
        java.awt.Graphics2D r5, r13;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.OutOfMemoryError $r11;
        java.awt.geom.AffineTransform r16;

        r3 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d;

        r5 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.awt.Shape;

        d6 := @parameter2: double;

        d25 := @parameter3: double;

        $b0 = d25 cmpg 1.0;

        if $b0 >= 0 goto label1;

        d25 = 1.0;

     label1:
        r1 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        d5 = $d3 - $d4;

        $d7 = d6 * 2.0;

        $d8 = d2 + $d7;

        $d9 = $d8 + 6.0;

        d10 = $d9 * d25;

        $d11 = d6 * 2.0;

        $d12 = d5 + $d11;

        $d13 = $d12 + 6.0;

        d14 = $d13 * d25;

        r12 = null;

     label2:
        $r2 = new java.awt.image.BufferedImage;

        $i2 = (int) d10;

        $i1 = (int) d14;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i1, 2);

        r12 = $r2;

        r13 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke r13.<java.awt.Graphics2D: void scale(double,double)>(d25, d25);

        $d15 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d16 = d6 - $d15;

        $d17 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d18 = d6 - $d17;

        virtualinvoke r13.<java.awt.Graphics2D: void translate(double,double)>($d16, $d18);

        virtualinvoke r13.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r0);

        virtualinvoke r13.<java.awt.Graphics2D: void dispose()>();

        r4 = specialinvoke r3.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: java.awt.image.ConvolveOp getConvolveOp(int,double)>(6, d25);

        r12 = virtualinvoke r4.<java.awt.image.ConvolveOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r2, null);

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("Warning: Cannot draw shadow, image too big.");

        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Cannot draw shadow: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r10);

     label6:
        if r12 == null goto label7;

        r16 = virtualinvoke r5.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $d20 = 1.0 / d25;

        $d19 = 1.0 / d25;

        virtualinvoke r5.<java.awt.Graphics2D: void scale(double,double)>($d20, $d19);

        $d21 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d22 = $d21 * d25;

        $i3 = (int) $d22;

        $d23 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d24 = $d23 * d25;

        $i4 = (int) $d24;

        virtualinvoke r5.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r12, $i3, $i4, null);

        virtualinvoke r5.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>(r16);

     label7:
        return;

        catch java.lang.OutOfMemoryError from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    protected void drawOnlyLineShadowSpecial(java.awt.Graphics2D, java.awt.Shape, double, double)
    {
        byte $b0, $b3;
        java.awt.Shape r0, r24;
        java.awt.geom.Rectangle2D r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, $d8, $d9, d10, $d11, $d12, $d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, d35;
        java.awt.image.BufferedImage $r2, r18;
        int $i1, $i2, $i4, $i5;
        net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d r3;
        java.awt.Graphics2D r4, r19;
        java.awt.geom.Area $r5, $r8, $r10, $r11;
        java.awt.geom.Rectangle2D$Double $r6;
        java.awt.geom.AffineTransform $r9, r23;
        java.lang.Exception $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16;
        java.lang.OutOfMemoryError $r17;
        java.awt.image.ConvolveOp r20;

        r3 := @this: net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d;

        r4 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.awt.Shape;

        d6 := @parameter2: double;

        d35 := @parameter3: double;

        $b0 = d35 cmpg 1.0;

        if $b0 >= 0 goto label1;

        d35 = 1.0;

     label1:
        r1 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        d5 = $d3 - $d4;

        $d7 = d6 * 2.0;

        $d8 = d2 + $d7;

        $d9 = $d8 + 6.0;

        d10 = $d9 * d35;

        $d11 = d6 * 2.0;

        $d12 = d5 + $d11;

        $d13 = $d12 + 6.0;

        d14 = $d13 * d35;

        r18 = null;

     label2:
        $r2 = new java.awt.image.BufferedImage;

        $i2 = (int) d10;

        $i1 = (int) d14;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i1, 2);

        r18 = $r2;

        r19 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke r19.<java.awt.Graphics2D: void scale(double,double)>(d35, d35);

        $d15 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d16 = d6 - $d15;

        $d17 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d18 = d6 - $d17;

        virtualinvoke r19.<java.awt.Graphics2D: void translate(double,double)>($d16, $d18);

        virtualinvoke r19.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r0);

        virtualinvoke r19.<java.awt.Graphics2D: void dispose()>();

        r20 = specialinvoke r3.<net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d: java.awt.image.ConvolveOp getConvolveOp(int,double)>(6, d35);

        r18 = virtualinvoke r20.<java.awt.image.ConvolveOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r2, null);

     label3:
        goto label6;

     label4:
        $r17 := @caughtexception;

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>("Warning: Cannot draw shadow, image too big.");

        goto label6;

     label5:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Cannot draw shadow: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r16);

     label6:
        if r18 == null goto label9;

        r23 = virtualinvoke r4.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $d20 = 1.0 / d35;

        $d19 = 1.0 / d35;

        virtualinvoke r4.<java.awt.Graphics2D: void scale(double,double)>($d20, $d19);

        r24 = virtualinvoke r4.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        $r5 = new java.awt.geom.Area;

        $r6 = new java.awt.geom.Rectangle2D$Double;

        $d21 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $d22 = d6 * 2.0;

        $d23 = $d21 + $d22;

        $d24 = $d23 + 6.0;

        $d25 = $d24 * d35;

        $d26 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $d27 = d6 * 2.0;

        $d28 = $d26 + $d27;

        $d29 = $d28 + 6.0;

        $d30 = $d29 * d35;

        specialinvoke $r6.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d25, $d30);

        specialinvoke $r5.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r6);

        $b3 = d35 cmpl 1.0;

        if $b3 != 0 goto label7;

        $r11 = new java.awt.geom.Area;

        specialinvoke $r11.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r0);

        virtualinvoke $r5.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($r11);

        goto label8;

     label7:
        $r8 = new java.awt.geom.Area;

        specialinvoke $r8.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r0);

        $r9 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(d35, d35);

        $r10 = virtualinvoke $r8.<java.awt.geom.Area: java.awt.geom.Area createTransformedArea(java.awt.geom.AffineTransform)>($r9);

        virtualinvoke $r5.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($r10);

     label8:
        virtualinvoke r4.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r5);

        $d31 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d32 = $d31 * d35;

        $i4 = (int) $d32;

        $d33 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d34 = $d33 * d35;

        $i5 = (int) $d34;

        virtualinvoke r4.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r18, $i4, $i5, null);

        virtualinvoke r4.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(r24);

        virtualinvoke r4.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>(r23);

     label9:
        return;

        catch java.lang.OutOfMemoryError from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }
}
