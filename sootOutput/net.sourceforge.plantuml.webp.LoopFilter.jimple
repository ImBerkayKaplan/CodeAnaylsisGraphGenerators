public class net.sourceforge.plantuml.webp.LoopFilter extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.webp.LoopFilter r0;

        r0 := @this: net.sourceforge.plantuml.webp.LoopFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int abs(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = neg i0;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    private static int c(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = i0;

        if i0 >= -128 goto label1;

        i1 = -128;

     label1:
        if i0 <= 127 goto label2;

        i1 = 127;

     label2:
        return i1;
    }

    private static int common_adjust(boolean, net.sourceforge.plantuml.webp.Segment)
    {
        net.sourceforge.plantuml.webp.Segment r0;
        int $i0, i1, $i2, i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23;
        boolean z0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: net.sourceforge.plantuml.webp.Segment;

        $i0 = r0.<net.sourceforge.plantuml.webp.Segment: int P1>;

        i1 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i0);

        $i2 = r0.<net.sourceforge.plantuml.webp.Segment: int P0>;

        i3 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i2);

        $i4 = r0.<net.sourceforge.plantuml.webp.Segment: int Q0>;

        i5 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i4);

        $i6 = r0.<net.sourceforge.plantuml.webp.Segment: int Q1>;

        i7 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i6);

        if z0 == 0 goto label1;

        $i20 = i1 - i7;

        $i21 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int c(int)>($i20);

        goto label2;

     label1:
        $i21 = 0;

     label2:
        $i8 = i5 - i3;

        $i9 = 3 * $i8;

        $i10 = $i21 + $i9;

        i22 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int c(int)>($i10);

        $i11 = i22 + 3;

        $i12 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int c(int)>($i11);

        i13 = $i12 >> 3;

        $i14 = i22 + 4;

        $i15 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int c(int)>($i14);

        i23 = $i15 >> 3;

        $i16 = i5 - i23;

        $i17 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i16);

        r0.<net.sourceforge.plantuml.webp.Segment: int Q0> = $i17;

        $i18 = i3 + i13;

        $i19 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i18);

        r0.<net.sourceforge.plantuml.webp.Segment: int P0> = $i19;

        return i23;
    }

    public static boolean filter_yes(int, int, int, int, int, int, int, int, int, int)
    {
        int i0, i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, i21, i22, $i23, $i24, $i25, $i26, $i27, $i28;
        boolean $z0;

        i16 := @parameter0: int;

        i10 := @parameter1: int;

        i12 := @parameter2: int;

        i13 := @parameter3: int;

        i4 := @parameter4: int;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        i5 := @parameter7: int;

        i22 := @parameter8: int;

        i21 := @parameter9: int;

        $i2 = i0 - i1;

        $i3 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i2);

        $i7 = $i3 * 2;

        $i6 = i4 - i5;

        $i8 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i6);

        $i9 = $i8 / 2;

        $i11 = $i7 + $i9;

        if $i11 > i10 goto label1;

        $i14 = i12 - i13;

        $i15 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i14);

        if $i15 > i16 goto label1;

        $i17 = i13 - i4;

        $i18 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i17);

        if $i18 > i16 goto label1;

        $i19 = i4 - i0;

        $i20 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i19);

        if $i20 > i16 goto label1;

        $i23 = i21 - i22;

        $i24 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i23);

        if $i24 > i16 goto label1;

        $i25 = i22 - i5;

        $i26 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i25);

        if $i26 > i16 goto label1;

        $i27 = i5 - i1;

        $i28 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i27);

        if $i28 > i16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock, net.sourceforge.plantuml.webp.SubBlock, int)
    {
        net.sourceforge.plantuml.webp.Segment $r0;
        net.sourceforge.plantuml.webp.SubBlock r2, r4;
        int[][] r3, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r2 := @parameter0: net.sourceforge.plantuml.webp.SubBlock;

        r4 := @parameter1: net.sourceforge.plantuml.webp.SubBlock;

        i0 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.webp.Segment;

        specialinvoke $r0.<net.sourceforge.plantuml.webp.Segment: void <init>()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r6 = r5[3];

        $i1 = $r6[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P0> = $i1;

        $r7 = r5[2];

        $i2 = $r7[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P1> = $i2;

        $r8 = r5[1];

        $i3 = $r8[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P2> = $i3;

        $r9 = r5[0];

        $i4 = $r9[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P3> = $i4;

        $r10 = r3[0];

        $i5 = $r10[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q0> = $i5;

        $r11 = r3[1];

        $i6 = $r11[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q1> = $i6;

        $r12 = r3[2];

        $i7 = $r12[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q2> = $i7;

        $r13 = r3[3];

        $i8 = $r13[i0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q3> = $i8;

        return $r0;
    }

    private static net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock, net.sourceforge.plantuml.webp.SubBlock, int)
    {
        net.sourceforge.plantuml.webp.Segment $r0;
        net.sourceforge.plantuml.webp.SubBlock r2, r4;
        int[][] r3, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r2 := @parameter0: net.sourceforge.plantuml.webp.SubBlock;

        r4 := @parameter1: net.sourceforge.plantuml.webp.SubBlock;

        i0 := @parameter2: int;

        $r0 = new net.sourceforge.plantuml.webp.Segment;

        specialinvoke $r0.<net.sourceforge.plantuml.webp.Segment: void <init>()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r6 = r5[i0];

        $i1 = $r6[3];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P0> = $i1;

        $r7 = r5[i0];

        $i2 = $r7[2];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P1> = $i2;

        $r8 = r5[i0];

        $i3 = $r8[1];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P2> = $i3;

        $r9 = r5[i0];

        $i4 = $r9[0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int P3> = $i4;

        $r10 = r3[i0];

        $i5 = $r10[0];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q0> = $i5;

        $r11 = r3[i0];

        $i6 = $r11[1];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q1> = $i6;

        $r12 = r3[i0];

        $i7 = $r12[2];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q2> = $i7;

        $r13 = r3[i0];

        $i8 = $r13[3];

        $r0.<net.sourceforge.plantuml.webp.Segment: int Q3> = $i8;

        return $r0;
    }

    public static boolean hev(int, int, int, int, int)
    {
        int i0, i1, $i2, $i3, i4, i5, i6, $i7, $i8;
        boolean $z0;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i6 := @parameter3: int;

        i5 := @parameter4: int;

        $i2 = i0 - i1;

        $i3 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i2);

        if $i3 > i4 goto label1;

        $i7 = i5 - i6;

        $i8 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i7);

        if $i8 <= i4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void loopFilter(net.sourceforge.plantuml.webp.VP8Frame)
    {
        net.sourceforge.plantuml.webp.VP8Frame r0;
        int $i0, $i1;

        r0 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: void fireLFProgressUpdate(float)>(0.0F);

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getFilterType()>();

        if $i0 != 2 goto label1;

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void loopFilterUV(net.sourceforge.plantuml.webp.VP8Frame)>(r0);

        virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: void fireLFProgressUpdate(float)>(50.0F);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void loopFilterY(net.sourceforge.plantuml.webp.VP8Frame)>(r0);

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getFilterType()>();

        if $i1 != 1 goto label2;

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void loopFilterSimple(net.sourceforge.plantuml.webp.VP8Frame)>(r0);

     label2:
        virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: void fireLFProgressUpdate(float)>(100.0F);

        return;
    }

    public static void loopFilterSimple(net.sourceforge.plantuml.webp.VP8Frame)
    {
        net.sourceforge.plantuml.webp.VP8Frame r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28;
        float $f0, $f1, $f2, $f3;
        net.sourceforge.plantuml.webp.MacroBlock r1, r2, r11, r18;
        boolean $z0, $z1;
        net.sourceforge.plantuml.webp.SubBlock$PLANE $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        byte $b17;
        net.sourceforge.plantuml.webp.SubBlock r12, r13, r15, r16, r19, r20, r22, r23;
        net.sourceforge.plantuml.webp.Segment r14, r17, r21, r24;

        r0 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        i14 = 0;

     label01:
        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockRows()>();

        if i14 >= $i0 goto label29;

        $i1 = i14 + 1;

        $f0 = (float) $i1;

        $i2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockRows()>();

        $f1 = (float) $i2;

        $f2 = $f0 / $f1;

        $f3 = 100.0F * $f2;

        virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: void fireLFProgressUpdate(float)>($f3);

        i15 = 0;

     label02:
        $i3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockCols()>();

        if i15 >= $i3 goto label28;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i15, i14);

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i15, i14);

        i4 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: int getFilterLevel()>();

        if i4 == 0 goto label27;

        i16 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: int getFilterLevel()>();

        i5 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getSharpnessLevel()>();

        if i5 <= 0 goto label05;

        $i13 = i16;

        if i5 <= 4 goto label03;

        $b17 = 2;

        goto label04;

     label03:
        $b17 = 1;

     label04:
        i16 = $i13 >> $b17;

        $i12 = 9 - i5;

        if i16 <= $i12 goto label05;

        i16 = 9 - i5;

     label05:
        if i16 != 0 goto label06;

        i16 = 1;

     label06:
        $i6 = i4 * 2;

        i18 = $i6 + i16;

        if i18 >= 1 goto label07;

        i18 = 1;

     label07:
        i7 = i18 + 4;

        if i15 <= 0 goto label11;

        $i11 = i15 - 1;

        r11 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i11, i14);

        i19 = 0;

     label08:
        if i19 >= 4 goto label11;

        $r9 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r12 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r9, 0, i19);

        $r10 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r13 = virtualinvoke r11.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r10, 3, i19);

        i20 = 0;

     label09:
        if i20 >= 4 goto label10;

        r14 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r12, r13, i20);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void simple_segment(int,net.sourceforge.plantuml.webp.Segment)>(i7, r14);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r12, r13, r14, i20);

        i20 = i20 + 1;

        goto label09;

     label10:
        i19 = i19 + 1;

        goto label08;

     label11:
        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: boolean isSkip_inner_lf()>();

        if $z0 != 0 goto label17;

        i21 = 1;

     label12:
        if i21 >= 4 goto label17;

        i22 = 0;

     label13:
        if i22 >= 4 goto label16;

        $r7 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        $i10 = i21 - 1;

        r15 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r7, $i10, i22);

        $r8 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r16 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r8, i21, i22);

        i23 = 0;

     label14:
        if i23 >= 4 goto label15;

        r17 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r16, r15, i23);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void simple_segment(int,net.sourceforge.plantuml.webp.Segment)>(i18, r17);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r16, r15, r17, i23);

        i23 = i23 + 1;

        goto label14;

     label15:
        i22 = i22 + 1;

        goto label13;

     label16:
        i21 = i21 + 1;

        goto label12;

     label17:
        if i14 <= 0 goto label21;

        $i9 = i14 - 1;

        r18 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i15, $i9);

        i24 = 0;

     label18:
        if i24 >= 4 goto label21;

        $r5 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r19 = virtualinvoke r18.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r5, i24, 3);

        $r6 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r20 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r6, i24, 0);

        i25 = 0;

     label19:
        if i25 >= 4 goto label20;

        r21 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r20, r19, i25);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void simple_segment(int,net.sourceforge.plantuml.webp.Segment)>(i7, r21);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r20, r19, r21, i25);

        i25 = i25 + 1;

        goto label19;

     label20:
        i24 = i24 + 1;

        goto label18;

     label21:
        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: boolean isSkip_inner_lf()>();

        if $z1 != 0 goto label27;

        i26 = 1;

     label22:
        if i26 >= 4 goto label27;

        i27 = 0;

     label23:
        if i27 >= 4 goto label26;

        $r3 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        $i8 = i26 - 1;

        r22 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r3, i27, $i8);

        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r23 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r4, i27, i26);

        i28 = 0;

     label24:
        if i28 >= 4 goto label25;

        r24 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r23, r22, i28);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void simple_segment(int,net.sourceforge.plantuml.webp.Segment)>(i18, r24);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r23, r22, r24, i28);

        i28 = i28 + 1;

        goto label24;

     label25:
        i27 = i27 + 1;

        goto label23;

     label26:
        i26 = i26 + 1;

        goto label22;

     label27:
        i15 = i15 + 1;

        goto label02;

     label28:
        i14 = i14 + 1;

        goto label01;

     label29:
        return;
    }

    public static void loopFilterUV(net.sourceforge.plantuml.webp.VP8Frame)
    {
        net.sourceforge.plantuml.webp.VP8Frame r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, $i22, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34;
        float $f0, $f1, $f2, $f3, $f4;
        net.sourceforge.plantuml.webp.MacroBlock r1, r2, r19, r32;
        boolean $z0, $z1;
        net.sourceforge.plantuml.webp.SubBlock$PLANE $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        byte $b20, b21;
        net.sourceforge.plantuml.webp.SubBlock r20, r21, r22, r23, r26, r27, r28, r29, r33, r34, r35, r36, r39, r40, r41, r42;
        net.sourceforge.plantuml.webp.Segment r24, r25, r30, r31, r37, r38, r43, r44;

        r0 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        i17 = 0;

     label01:
        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockRows()>();

        if i17 >= $i0 goto label33;

        $i1 = i17 + 1;

        $f0 = (float) $i1;

        $i2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockRows()>();

        $f1 = (float) $i2;

        $f2 = $f0 / $f1;

        $f3 = 100.0F * $f2;

        $f4 = $f3 / 2.0F;

        virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: void fireLFProgressUpdate(float)>($f4);

        i18 = 0;

     label02:
        $i3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockCols()>();

        if i18 >= $i3 goto label32;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i18, i17);

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i18, i17);

        i4 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getSharpnessLevel()>();

        i5 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: int getFilterLevel()>();

        if i5 == 0 goto label31;

        i19 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: int getFilterLevel()>();

        if i4 <= 0 goto label05;

        $i16 = i19;

        if i4 <= 4 goto label03;

        $b20 = 2;

        goto label04;

     label03:
        $b20 = 1;

     label04:
        i19 = $i16 >> $b20;

        $i15 = 9 - i4;

        if i19 <= $i15 goto label05;

        i19 = 9 - i4;

     label05:
        if i19 != 0 goto label06;

        i19 = 1;

     label06:
        b21 = 0;

        $i6 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getFrameType()>();

        if $i6 != 0 goto label08;

        if i5 < 40 goto label07;

        b21 = 2;

        goto label11;

     label07:
        if i5 < 15 goto label11;

        b21 = 1;

        goto label11;

     label08:
        if i5 < 40 goto label09;

        b21 = 3;

        goto label11;

     label09:
        if i5 < 20 goto label10;

        b21 = 2;

        goto label11;

     label10:
        if i5 < 15 goto label11;

        b21 = 1;

     label11:
        $i22 = i5 + 2;

        $i23 = $i22 * 2;

        i7 = $i23 + i19;

        $i24 = i5 * 2;

        i8 = $i24 + i19;

        if i18 <= 0 goto label15;

        $i14 = i18 - 1;

        r19 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i14, i17);

        i25 = 0;

     label12:
        if i25 >= 2 goto label15;

        $r15 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        r20 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r15, 0, i25);

        $r16 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        r21 = virtualinvoke r19.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r16, 1, i25);

        $r17 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        r22 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r17, 0, i25);

        $r18 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        r23 = virtualinvoke r19.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r18, 1, i25);

        i26 = 0;

     label13:
        if i26 >= 4 goto label14;

        r24 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r20, r21, i26);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void MBfilter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i7, r24);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r20, r21, r24, i26);

        r25 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r22, r23, i26);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void MBfilter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i7, r25);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r22, r23, r25, i26);

        i26 = i26 + 1;

        goto label13;

     label14:
        i25 = i25 + 1;

        goto label12;

     label15:
        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: boolean isSkip_inner_lf()>();

        if $z0 != 0 goto label21;

        i27 = 1;

     label16:
        if i27 >= 2 goto label21;

        i28 = 0;

     label17:
        if i28 >= 2 goto label20;

        $r11 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        $i12 = i27 - 1;

        r26 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r11, $i12, i28);

        $r12 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        r27 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r12, i27, i28);

        $r13 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        $i13 = i27 - 1;

        r28 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r13, $i13, i28);

        $r14 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        r29 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r14, i27, i28);

        i29 = 0;

     label18:
        if i29 >= 4 goto label19;

        r30 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r27, r26, i29);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void subblock_filter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i8, r30);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r27, r26, r30, i29);

        r31 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r29, r28, i29);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void subblock_filter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i8, r31);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r29, r28, r31, i29);

        i29 = i29 + 1;

        goto label18;

     label19:
        i28 = i28 + 1;

        goto label17;

     label20:
        i27 = i27 + 1;

        goto label16;

     label21:
        if i17 <= 0 goto label25;

        $i11 = i17 - 1;

        r32 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i18, $i11);

        i30 = 0;

     label22:
        if i30 >= 2 goto label25;

        $r7 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        r33 = virtualinvoke r32.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r7, i30, 1);

        $r8 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        r34 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r8, i30, 0);

        $r9 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        r35 = virtualinvoke r32.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r9, i30, 1);

        $r10 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        r36 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r10, i30, 0);

        i31 = 0;

     label23:
        if i31 >= 4 goto label24;

        r37 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r34, r33, i31);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void MBfilter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i7, r37);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r34, r33, r37, i31);

        r38 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r36, r35, i31);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void MBfilter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i7, r38);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r36, r35, r38, i31);

        i31 = i31 + 1;

        goto label23;

     label24:
        i30 = i30 + 1;

        goto label22;

     label25:
        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: boolean isSkip_inner_lf()>();

        if $z1 != 0 goto label31;

        i32 = 1;

     label26:
        if i32 >= 2 goto label31;

        i33 = 0;

     label27:
        if i33 >= 2 goto label30;

        $r3 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        $i9 = i32 - 1;

        r39 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r3, i33, $i9);

        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        r40 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r4, i33, i32);

        $r5 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        $i10 = i32 - 1;

        r41 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r5, i33, $i10);

        $r6 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        r42 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r6, i33, i32);

        i34 = 0;

     label28:
        if i34 >= 4 goto label29;

        r43 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r40, r39, i34);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void subblock_filter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i8, r43);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r40, r39, r43, i34);

        r44 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r42, r41, i34);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void subblock_filter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b21, i19, i8, r44);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r42, r41, r44, i34);

        i34 = i34 + 1;

        goto label28;

     label29:
        i33 = i33 + 1;

        goto label27;

     label30:
        i32 = i32 + 1;

        goto label26;

     label31:
        i18 = i18 + 1;

        goto label02;

     label32:
        i17 = i17 + 1;

        goto label01;

     label33:
        return;
    }

    public static void loopFilterY(net.sourceforge.plantuml.webp.VP8Frame)
    {
        net.sourceforge.plantuml.webp.VP8Frame r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, $i20, $i21, $i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        net.sourceforge.plantuml.webp.MacroBlock r1, r2, r11, r18;
        boolean $z0, $z1;
        net.sourceforge.plantuml.webp.SubBlock$PLANE $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        byte $b18, b19;
        net.sourceforge.plantuml.webp.SubBlock r12, r13, r15, r16, r19, r20, r22, r23;
        net.sourceforge.plantuml.webp.Segment r14, r17, r21, r24;

        r0 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        i15 = 0;

     label01:
        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockRows()>();

        if i15 >= $i0 goto label33;

        $i1 = i15 + 1;

        $f0 = (float) $i1;

        $i2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockRows()>();

        $f1 = (float) $i2;

        $f2 = $f0 / $f1;

        $f3 = 100.0F * $f2;

        $f4 = $f3 / 2.0F;

        $f5 = 50.0F + $f4;

        virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: void fireLFProgressUpdate(float)>($f5);

        i16 = 0;

     label02:
        $i3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getMacroBlockCols()>();

        if i16 >= $i3 goto label32;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i16, i15);

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i16, i15);

        i4 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getSharpnessLevel()>();

        i5 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: int getFilterLevel()>();

        if i5 == 0 goto label31;

        i17 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: int getFilterLevel()>();

        if i4 <= 0 goto label05;

        $i14 = i17;

        if i4 <= 4 goto label03;

        $b18 = 2;

        goto label04;

     label03:
        $b18 = 1;

     label04:
        i17 = $i14 >> $b18;

        $i13 = 9 - i4;

        if i17 <= $i13 goto label05;

        i17 = 9 - i4;

     label05:
        if i17 != 0 goto label06;

        i17 = 1;

     label06:
        b19 = 0;

        $i6 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: int getFrameType()>();

        if $i6 != 0 goto label08;

        if i5 < 40 goto label07;

        b19 = 2;

        goto label11;

     label07:
        if i5 < 15 goto label11;

        b19 = 1;

        goto label11;

     label08:
        if i5 < 40 goto label09;

        b19 = 3;

        goto label11;

     label09:
        if i5 < 20 goto label10;

        b19 = 2;

        goto label11;

     label10:
        if i5 < 15 goto label11;

        b19 = 1;

     label11:
        $i20 = i5 + 2;

        $i21 = $i20 * 2;

        i7 = $i21 + i17;

        $i22 = i5 * 2;

        i8 = $i22 + i17;

        if i16 <= 0 goto label15;

        $i12 = i16 - 1;

        r11 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i12, i15);

        i23 = 0;

     label12:
        if i23 >= 4 goto label15;

        $r9 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r12 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r9, 0, i23);

        $r10 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r13 = virtualinvoke r11.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r10, 3, i23);

        i24 = 0;

     label13:
        if i24 >= 4 goto label14;

        r14 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r12, r13, i24);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void MBfilter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b19, i17, i7, r14);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r12, r13, r14, i24);

        i24 = i24 + 1;

        goto label13;

     label14:
        i23 = i23 + 1;

        goto label12;

     label15:
        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: boolean isSkip_inner_lf()>();

        if $z0 != 0 goto label21;

        i25 = 1;

     label16:
        if i25 >= 4 goto label21;

        i26 = 0;

     label17:
        if i26 >= 4 goto label20;

        $r7 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        $i11 = i25 - 1;

        r15 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r7, $i11, i26);

        $r8 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r16 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r8, i25, i26);

        i27 = 0;

     label18:
        if i27 >= 4 goto label19;

        r17 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r16, r15, i27);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void subblock_filter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b19, i17, i8, r17);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegH(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r16, r15, r17, i27);

        i27 = i27 + 1;

        goto label18;

     label19:
        i26 = i26 + 1;

        goto label17;

     label20:
        i25 = i25 + 1;

        goto label16;

     label21:
        if i15 <= 0 goto label25;

        $i10 = i15 - 1;

        r18 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>(i16, $i10);

        i28 = 0;

     label22:
        if i28 >= 4 goto label25;

        $r5 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r19 = virtualinvoke r18.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r5, i28, 3);

        $r6 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r20 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r6, i28, 0);

        i29 = 0;

     label23:
        if i29 >= 4 goto label24;

        r21 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r20, r19, i29);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void MBfilter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b19, i17, i7, r21);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r20, r19, r21, i29);

        i29 = i29 + 1;

        goto label23;

     label24:
        i28 = i28 + 1;

        goto label22;

     label25:
        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.webp.MacroBlock: boolean isSkip_inner_lf()>();

        if $z1 != 0 goto label31;

        i30 = 1;

     label26:
        if i30 >= 4 goto label31;

        i31 = 0;

     label27:
        if i31 >= 4 goto label30;

        $r3 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        $i9 = i30 - 1;

        r22 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r3, i31, $i9);

        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        r23 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>($r4, i31, i30);

        i32 = 0;

     label28:
        if i32 >= 4 goto label29;

        r24 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: net.sourceforge.plantuml.webp.Segment getSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,int)>(r23, r22, i32);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void subblock_filter(int,int,int,net.sourceforge.plantuml.webp.Segment)>(b19, i17, i8, r24);

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: void setSegV(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.Segment,int)>(r23, r22, r24, i32);

        i32 = i32 + 1;

        goto label28;

     label29:
        i31 = i31 + 1;

        goto label27;

     label30:
        i30 = i30 + 1;

        goto label26;

     label31:
        i16 = i16 + 1;

        goto label02;

     label32:
        i15 = i15 + 1;

        goto label01;

     label33:
        return;
    }

    static void MBfilter(int, int, int, net.sourceforge.plantuml.webp.Segment)
    {
        net.sourceforge.plantuml.webp.Segment r0;
        int $i0, i1, $i2, i3, $i4, i5, $i6, i7, $i8, i9, $i10, i11, $i12, i13, $i14, i15, i16, i17, i18, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, i44, i45, i46;
        boolean $z0, $z1;

        i18 := @parameter0: int;

        i16 := @parameter1: int;

        i17 := @parameter2: int;

        r0 := @parameter3: net.sourceforge.plantuml.webp.Segment;

        $i0 = r0.<net.sourceforge.plantuml.webp.Segment: int P3>;

        i1 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i0);

        $i2 = r0.<net.sourceforge.plantuml.webp.Segment: int P2>;

        i3 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i2);

        $i4 = r0.<net.sourceforge.plantuml.webp.Segment: int P1>;

        i5 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i4);

        $i6 = r0.<net.sourceforge.plantuml.webp.Segment: int P0>;

        i7 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i6);

        $i8 = r0.<net.sourceforge.plantuml.webp.Segment: int Q0>;

        i9 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i8);

        $i10 = r0.<net.sourceforge.plantuml.webp.Segment: int Q1>;

        i11 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i10);

        $i12 = r0.<net.sourceforge.plantuml.webp.Segment: int Q2>;

        i13 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i12);

        $i14 = r0.<net.sourceforge.plantuml.webp.Segment: int Q3>;

        i15 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i14);

        $z0 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: boolean filter_yes(int,int,int,int,int,int,int,int,int,int)>(i16, i17, i15, i13, i11, i9, i7, i5, i3, i1);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: boolean hev(int,int,int,int,int)>(i18, i5, i7, i9, i11);

        if $z1 != 0 goto label1;

        $i20 = i5 - i11;

        $i21 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int c(int)>($i20);

        $i22 = i9 - i7;

        $i23 = 3 * $i22;

        $i24 = $i21 + $i23;

        i25 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int c(int)>($i24);

        $i26 = 27 * i25;

        $i27 = $i26 + 63;

        i44 = $i27 >> 7;

        $i28 = i9 - i44;

        $i29 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i28);

        r0.<net.sourceforge.plantuml.webp.Segment: int Q0> = $i29;

        $i30 = i7 + i44;

        $i31 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i30);

        r0.<net.sourceforge.plantuml.webp.Segment: int P0> = $i31;

        $i32 = 18 * i25;

        $i33 = $i32 + 63;

        i45 = $i33 >> 7;

        $i34 = i11 - i45;

        $i35 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i34);

        r0.<net.sourceforge.plantuml.webp.Segment: int Q1> = $i35;

        $i36 = i5 + i45;

        $i37 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i36);

        r0.<net.sourceforge.plantuml.webp.Segment: int P1> = $i37;

        $i38 = 9 * i25;

        $i39 = $i38 + 63;

        i46 = $i39 >> 7;

        $i40 = i13 - i46;

        $i41 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i40);

        r0.<net.sourceforge.plantuml.webp.Segment: int Q2> = $i41;

        $i42 = i3 + i46;

        $i43 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i42);

        r0.<net.sourceforge.plantuml.webp.Segment: int P2> = $i43;

        goto label2;

     label1:
        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int common_adjust(boolean,net.sourceforge.plantuml.webp.Segment)>(1, r0);

     label2:
        return;
    }

    private static int s2u(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int c(int)>(i0);

        $i2 = $i1 + 128;

        return $i2;
    }

    private static void setSegH(net.sourceforge.plantuml.webp.SubBlock, net.sourceforge.plantuml.webp.SubBlock, net.sourceforge.plantuml.webp.Segment, int)
    {
        net.sourceforge.plantuml.webp.SubBlock r0, r2;
        int[][] r1, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        net.sourceforge.plantuml.webp.Segment r4;
        int[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: net.sourceforge.plantuml.webp.SubBlock;

        r2 := @parameter1: net.sourceforge.plantuml.webp.SubBlock;

        r4 := @parameter2: net.sourceforge.plantuml.webp.Segment;

        i0 := @parameter3: int;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r5 = r3[3];

        $i1 = r4.<net.sourceforge.plantuml.webp.Segment: int P0>;

        $r5[i0] = $i1;

        $r6 = r3[2];

        $i2 = r4.<net.sourceforge.plantuml.webp.Segment: int P1>;

        $r6[i0] = $i2;

        $r7 = r3[1];

        $i3 = r4.<net.sourceforge.plantuml.webp.Segment: int P2>;

        $r7[i0] = $i3;

        $r8 = r3[0];

        $i4 = r4.<net.sourceforge.plantuml.webp.Segment: int P3>;

        $r8[i0] = $i4;

        $r9 = r1[0];

        $i5 = r4.<net.sourceforge.plantuml.webp.Segment: int Q0>;

        $r9[i0] = $i5;

        $r10 = r1[1];

        $i6 = r4.<net.sourceforge.plantuml.webp.Segment: int Q1>;

        $r10[i0] = $i6;

        $r11 = r1[2];

        $i7 = r4.<net.sourceforge.plantuml.webp.Segment: int Q2>;

        $r11[i0] = $i7;

        $r12 = r1[3];

        $i8 = r4.<net.sourceforge.plantuml.webp.Segment: int Q3>;

        $r12[i0] = $i8;

        return;
    }

    private static void setSegV(net.sourceforge.plantuml.webp.SubBlock, net.sourceforge.plantuml.webp.SubBlock, net.sourceforge.plantuml.webp.Segment, int)
    {
        net.sourceforge.plantuml.webp.SubBlock r0, r2;
        int[][] r1, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        net.sourceforge.plantuml.webp.Segment r4;
        int[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: net.sourceforge.plantuml.webp.SubBlock;

        r2 := @parameter1: net.sourceforge.plantuml.webp.SubBlock;

        r4 := @parameter2: net.sourceforge.plantuml.webp.Segment;

        i0 := @parameter3: int;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r5 = r3[i0];

        $i1 = r4.<net.sourceforge.plantuml.webp.Segment: int P0>;

        $r5[3] = $i1;

        $r6 = r3[i0];

        $i2 = r4.<net.sourceforge.plantuml.webp.Segment: int P1>;

        $r6[2] = $i2;

        $r7 = r3[i0];

        $i3 = r4.<net.sourceforge.plantuml.webp.Segment: int P2>;

        $r7[1] = $i3;

        $r8 = r3[i0];

        $i4 = r4.<net.sourceforge.plantuml.webp.Segment: int P3>;

        $r8[0] = $i4;

        $r9 = r1[i0];

        $i5 = r4.<net.sourceforge.plantuml.webp.Segment: int Q0>;

        $r9[0] = $i5;

        $r10 = r1[i0];

        $i6 = r4.<net.sourceforge.plantuml.webp.Segment: int Q1>;

        $r10[1] = $i6;

        $r11 = r1[i0];

        $i7 = r4.<net.sourceforge.plantuml.webp.Segment: int Q2>;

        $r11[2] = $i7;

        $r12 = r1[i0];

        $i8 = r4.<net.sourceforge.plantuml.webp.Segment: int Q3>;

        $r12[3] = $i8;

        return;
    }

    private static void simple_segment(int, net.sourceforge.plantuml.webp.Segment)
    {
        net.sourceforge.plantuml.webp.Segment r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;

        i10 := @parameter0: int;

        r0 := @parameter1: net.sourceforge.plantuml.webp.Segment;

        $i1 = r0.<net.sourceforge.plantuml.webp.Segment: int P0>;

        $i0 = r0.<net.sourceforge.plantuml.webp.Segment: int Q0>;

        $i2 = $i1 - $i0;

        $i3 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i2);

        $i7 = $i3 * 2;

        $i5 = r0.<net.sourceforge.plantuml.webp.Segment: int P1>;

        $i4 = r0.<net.sourceforge.plantuml.webp.Segment: int Q1>;

        $i6 = $i5 - $i4;

        $i8 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int abs(int)>($i6);

        $i9 = $i8 / 2;

        $i11 = $i7 + $i9;

        if $i11 > i10 goto label1;

        staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int common_adjust(boolean,net.sourceforge.plantuml.webp.Segment)>(1, r0);

     label1:
        return;
    }

    public static void subblock_filter(int, int, int, net.sourceforge.plantuml.webp.Segment)
    {
        net.sourceforge.plantuml.webp.Segment r0;
        int $i0, i1, $i2, i3, $i4, i5, $i6, i7, $i8, i9, $i10, i11, $i12, i13, $i14, i15, i16, i17, i18, $i19, $i20, i21, $i22, $i23, $i24, $i25;
        boolean $z0, z1;

        i18 := @parameter0: int;

        i16 := @parameter1: int;

        i17 := @parameter2: int;

        r0 := @parameter3: net.sourceforge.plantuml.webp.Segment;

        $i0 = r0.<net.sourceforge.plantuml.webp.Segment: int P3>;

        i1 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i0);

        $i2 = r0.<net.sourceforge.plantuml.webp.Segment: int P2>;

        i3 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i2);

        $i4 = r0.<net.sourceforge.plantuml.webp.Segment: int P1>;

        i5 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i4);

        $i6 = r0.<net.sourceforge.plantuml.webp.Segment: int P0>;

        i7 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i6);

        $i8 = r0.<net.sourceforge.plantuml.webp.Segment: int Q0>;

        i9 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i8);

        $i10 = r0.<net.sourceforge.plantuml.webp.Segment: int Q1>;

        i11 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i10);

        $i12 = r0.<net.sourceforge.plantuml.webp.Segment: int Q2>;

        i13 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i12);

        $i14 = r0.<net.sourceforge.plantuml.webp.Segment: int Q3>;

        i15 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int u2s(int)>($i14);

        $z0 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: boolean filter_yes(int,int,int,int,int,int,int,int,int,int)>(i16, i17, i15, i13, i11, i9, i7, i5, i3, i1);

        if $z0 == 0 goto label1;

        z1 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: boolean hev(int,int,int,int,int)>(i18, i5, i7, i9, i11);

        $i19 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int common_adjust(boolean,net.sourceforge.plantuml.webp.Segment)>(z1, r0);

        $i20 = $i19 + 1;

        i21 = $i20 >> 1;

        if z1 != 0 goto label1;

        $i22 = i11 - i21;

        $i23 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i22);

        r0.<net.sourceforge.plantuml.webp.Segment: int Q1> = $i23;

        $i24 = i5 + i21;

        $i25 = staticinvoke <net.sourceforge.plantuml.webp.LoopFilter: int s2u(int)>($i24);

        r0.<net.sourceforge.plantuml.webp.Segment: int P1> = $i25;

     label1:
        return;
    }

    private static int u2s(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 - 128;

        return $i1;
    }
}
