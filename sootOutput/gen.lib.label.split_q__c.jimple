public class gen.lib.label.split_q__c extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        gen.lib.label.split_q__c r0;

        r0 := @this: gen.lib.label.split_q__c;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void SplitNode(h.ST_RTree, h.ST_Node_t___, h.ST_Branch_t, h.ST_Node_t___[])
    {
        h.ST_RTree r0;
        int $i0, i1, $i2, $i3, i4, $i5, $i6;
        h.ST_Node_t___ r1, $r18, $r19, $r20;
        h.ST_Branch_t r2;
        h.ST_SplitQ_t $r3;
        h.ST_PartitionVars[] $r4;
        h.ST_PartitionVars r5;
        h.ST_Rect_t[] $r6, $r8;
        h.ST_Rect_t $r7, $r9;
        h.ST_Node_t___[] r10;
        boolean $z0;
        java.lang.Throwable $r16;

        r0 := @parameter0: h.ST_RTree;

        r1 := @parameter1: h.ST_Node_t___;

        r2 := @parameter2: h.ST_Branch_t;

        r10 := @parameter3: h.ST_Node_t___[];

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("6vl3snxd6k95gamfkwfsfdguc", "SplitNode");

     label1:
        $i0 = r0.<h.ST_RTree: int StatFlag>;

        if $i0 == 0 goto label2;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("akhni40ndam0u9c6i7raxw4mp");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("4g80zdlbvunm838x8g3ic9tex");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("9352ql3e58qs4fzapgjfrms2s");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("2cjo6wz1rmxfm5k7u7rw5dqpj");

     label2:
        i1 = r1.<h.ST_Node_t___: int level>;

        staticinvoke <gen.lib.label.split_q__c: void GetBranches(h.ST_RTree,h.ST_Node_t___,h.ST_Branch_t)>(r0, r1, r2);

        $r3 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r4 = $r3.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        r5 = $r4[0];

        staticinvoke <gen.lib.label.split_q__c: void MethodZero(h.ST_RTree)>(r0);

        $r6 = r5.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r7 = $r6[0];

        $i2 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r7);

        $r8 = r5.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r9 = $r8[1];

        $i3 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r9);

        i4 = $i2 + $i3;

        $i5 = r0.<h.ST_RTree: int StatFlag>;

        if $i5 == 0 goto label3;

        $i6 = r0.<h.ST_RTree: int Deleting>;

        $z0 = staticinvoke <smetana.core.Macro: boolean N(int)>($i6);

        if $z0 == 0 goto label3;

        if i4 == 0 goto label3;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("z7xk6s3hzi3qcoiq2exj9hpv");

     label3:
        $r18 = staticinvoke <gen.lib.label.node__c: h.ST_Node_t___ RTreeNewNode(h.ST_RTree)>(r0);

        r10[0] = $r18;

        r1.<h.ST_Node_t___: int level> = i1;

        $r19 = r10[0];

        $r19.<h.ST_Node_t___: int level> = i1;

        $r20 = r10[0];

        staticinvoke <gen.lib.label.split_q__c: void LoadNodes(h.ST_RTree,h.ST_Node_t___,h.ST_Node_t___,h.ST_PartitionVars)>(r0, r1, $r20, r5);

     label4:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6vl3snxd6k95gamfkwfsfdguc", "SplitNode");

        goto label7;

     label5:
        $r16 := @caughtexception;

     label6:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6vl3snxd6k95gamfkwfsfdguc", "SplitNode");

        throw $r16;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void GetBranches(h.ST_RTree, h.ST_Node_t___, h.ST_Branch_t)
    {
        h.ST_RTree r0;
        h.ST_SplitQ_t $r1, $r5, $r6, $r11, $r13, $r15, $r16, $r17, $r24;
        h.ST_Branch_t[] $r2, $r7, $r18, $r25, $r26;
        h.ST_Branch_t r3, $r4, $r8, $r19, $r27, $r28;
        h.ST_Rect_t $r9, $r10, $r12, $r20, $r21, $r22, $r23;
        int $i0, i1, i2;
        h.ST_Node_t___ r14;
        java.lang.Throwable $r29;

        r0 := @parameter0: h.ST_RTree;

        r14 := @parameter1: h.ST_Node_t___;

        r3 := @parameter2: h.ST_Branch_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("al7lyin008m7kvrvuxhcuvn61", "GetBranches");

     label1:
        i1 = 0;

     label2:
        if i1 >= 64 goto label3;

        $r24 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r25 = $r24.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r28 = $r25[i1];

        $r26 = r14.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r27 = $r26[i1];

        virtualinvoke $r28.<h.ST_Branch_t: void ___(smetana.core.__struct__)>($r27);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r1 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r2 = $r1.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r4 = $r2[64];

        virtualinvoke $r4.<h.ST_Branch_t: void ___(smetana.core.__struct__)>(r3);

        $r5 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r10 = $r5.<h.ST_SplitQ_t: h.ST_Rect_t CoverSplit>;

        $r6 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r7 = $r6.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r8 = $r7[0];

        $r9 = $r8.<h.ST_Branch_t: h.ST_Rect_t rect>;

        virtualinvoke $r10.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r9);

        i2 = 1;

     label4:
        if i2 >= 65 goto label5;

        $r15 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r22 = $r15.<h.ST_SplitQ_t: h.ST_Rect_t CoverSplit>;

        $r16 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r21 = $r16.<h.ST_SplitQ_t: h.ST_Rect_t CoverSplit>;

        $r17 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r18 = $r17.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r19 = $r18[i2];

        $r20 = $r19.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r23 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t CombineRect(h.ST_Rect_t,h.ST_Rect_t)>($r21, $r20);

        virtualinvoke $r22.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r23);

        i2 = i2 + 1;

        goto label4;

     label5:
        $r13 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r11 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r12 = $r11.<h.ST_SplitQ_t: h.ST_Rect_t CoverSplit>;

        $i0 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r12);

        $r13.<h.ST_SplitQ_t: int CoverSplitArea> = $i0;

        staticinvoke <gen.lib.label.node__c: void InitNode(h.ST_Node_t___)>(r14);

     label6:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("al7lyin008m7kvrvuxhcuvn61", "GetBranches");

        goto label9;

     label7:
        $r29 := @caughtexception;

     label8:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("al7lyin008m7kvrvuxhcuvn61", "GetBranches");

        throw $r29;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static void MethodZero(h.ST_RTree)
    {
        h.ST_RTree r0;
        h.ST_SplitQ_t $r1, $r5, $r16, $r20, $r24, $r30, $r34, $r40, $r44, $r50, $r54, $r58, $r64, $r68;
        h.ST_PartitionVars[] $r2, $r6, $r17, $r21, $r25, $r35, $r41, $r45, $r51, $r55, $r59, $r65, $r69;
        h.ST_PartitionVars $r3, $r7, $r18, $r22, $r26, $r36, $r42, $r46, $r52, $r56, $r60, $r66, $r70;
        int[] $r4, $r8, $r19, $r23, $r27, $r43, $r53, $r57, $r61, $r67, $r71;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, i15, $i16, $i17, i18, i20, i21, i22, $i24, $i25, $i26;
        boolean $z0;
        h.ST_Rect_t $r28, r33, $r38, $r39, $r48, $r49;
        h.ST_Branch_t[] $r31;
        h.ST_Branch_t $r32;
        h.ST_Rect_t[] $r37, $r47;
        java.lang.Throwable $r62;
        byte b19, b23;

        r0 := @parameter0: h.ST_RTree;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("4woz5xy4gjlahoj7no3ljxmex", "MethodZero");

     label01:
        i18 = 0;

        b19 = 0;

        staticinvoke <gen.lib.label.split_q__c: void InitPVars(h.ST_RTree)>(r0);

        staticinvoke <gen.lib.label.split_q__c: void PickSeeds(h.ST_RTree)>(r0);

     label02:
        $r1 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r2 = $r1.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r3 = $r2[0];

        $r4 = $r3.<h.ST_PartitionVars: int[] count>;

        $i1 = $r4[0];

        $r5 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r6 = $r5.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r7 = $r6[0];

        $r8 = $r7.<h.ST_PartitionVars: int[] count>;

        $i0 = $r8[1];

        $i2 = $i1 + $i0;

        if $i2 >= 65 goto label09;

        $r16 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r17 = $r16.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r18 = $r17[0];

        $r19 = $r18.<h.ST_PartitionVars: int[] count>;

        $i5 = $r19[0];

        $i3 = r0.<h.ST_RTree: int MinFill>;

        $i4 = 65 - $i3;

        if $i5 >= $i4 goto label09;

        $r20 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r21 = $r20.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r22 = $r21[0];

        $r23 = $r22.<h.ST_PartitionVars: int[] count>;

        $i8 = $r23[1];

        $i6 = r0.<h.ST_RTree: int MinFill>;

        $i7 = 65 - $i6;

        if $i8 >= $i7 goto label09;

        i20 = -1;

        i21 = 0;

     label03:
        if i21 >= 65 goto label08;

        $r24 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r25 = $r24.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r26 = $r25[0];

        $r27 = $r26.<h.ST_PartitionVars: int[] taken>;

        $i9 = $r27[i21];

        $z0 = staticinvoke <smetana.core.Macro: boolean N(int)>($i9);

        if $z0 == 0 goto label07;

        $r28 = new h.ST_Rect_t;

        specialinvoke $r28.<h.ST_Rect_t: void <init>()>();

        $r30 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r31 = $r30.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r32 = $r31[i21];

        r33 = $r32.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r34 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r35 = $r34.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r36 = $r35[0];

        $r37 = $r36.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r38 = $r37[0];

        $r39 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t CombineRect(h.ST_Rect_t,h.ST_Rect_t)>(r33, $r38);

        virtualinvoke $r28.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r39);

        $i10 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r28);

        $r40 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r41 = $r40.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r42 = $r41[0];

        $r43 = $r42.<h.ST_PartitionVars: int[] area>;

        $i11 = $r43[0];

        i12 = $i10 - $i11;

        $r44 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r45 = $r44.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r46 = $r45[0];

        $r47 = $r46.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r48 = $r47[1];

        $r49 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t CombineRect(h.ST_Rect_t,h.ST_Rect_t)>(r33, $r48);

        virtualinvoke $r28.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r49);

        $i13 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r28);

        $r50 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r51 = $r50.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r52 = $r51[0];

        $r53 = $r52.<h.ST_PartitionVars: int[] area>;

        $i14 = $r53[1];

        i15 = $i13 - $i14;

        i22 = i15 - i12;

        if i22 < 0 goto label04;

        b23 = 0;

        goto label05;

     label04:
        b23 = 1;

        i22 = neg i22;

     label05:
        if i22 <= i20 goto label06;

        i20 = i22;

        i18 = i21;

        b19 = b23;

        goto label07;

     label06:
        if i22 != i20 goto label07;

        $r54 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r55 = $r54.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r56 = $r55[0];

        $r57 = $r56.<h.ST_PartitionVars: int[] count>;

        $i17 = $r57[b23];

        $r58 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r59 = $r58.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r60 = $r59[0];

        $r61 = $r60.<h.ST_PartitionVars: int[] count>;

        $i16 = $r61[b19];

        if $i17 >= $i16 goto label07;

        i18 = i21;

        b19 = b23;

     label07:
        i21 = i21 + 1;

        goto label03;

     label08:
        staticinvoke <gen.lib.label.split_q__c: void Classify(h.ST_RTree,int,int)>(r0, i18, b19);

        goto label02;

     label09:
        $r64 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r65 = $r64.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r66 = $r65[0];

        $r67 = $r66.<h.ST_PartitionVars: int[] count>;

        $i24 = $r67[0];

        $r68 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r69 = $r68.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r70 = $r69[0];

        $r71 = $r70.<h.ST_PartitionVars: int[] count>;

        $i25 = $r71[1];

        $i26 = $i24 + $i25;

        if $i26 >= 65 goto label10;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("4edp65b21liyii0fj1ikco7o0");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("20lpsuiyepr2ujozaf6gp4cc");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("9qtt6i40h8vtjp2cvqyb8ycaz");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("2x1nx9nsne4x3ygmcywl1m3og");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("jdepsnmrs3ghh78ql301sfvu");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("gqfhorilvtlogp6f2ozx5akf");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("flupwh3kosf3fkhkxllllt1");

     label10:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("4woz5xy4gjlahoj7no3ljxmex", "MethodZero");

        goto label13;

     label11:
        $r62 := @caughtexception;

     label12:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("4woz5xy4gjlahoj7no3ljxmex", "MethodZero");

        throw $r62;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static void PickSeeds(h.ST_RTree)
    {
        int[] r0;
        h.ST_RTree r1;
        h.ST_Rect_t $r2, $r10, $r11, $r12, $r16;
        h.ST_SplitQ_t $r4, $r7, $r13;
        h.ST_Branch_t[] $r5, $r8, $r14;
        h.ST_Branch_t $r6, $r9, $r15;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, i7, i8, i9, i10, i11;
        java.lang.Throwable $r17;

        r1 := @parameter0: h.ST_RTree;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("8rui4cun4tvq5xy6ke6r3p55e", "PickSeeds");

     label01:
        i6 = 0;

        i7 = 0;

        r0 = newarray (int)[65];

        i8 = 0;

     label02:
        if i8 >= 65 goto label03;

        $r13 = r1.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r14 = $r13.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r15 = $r14[i8];

        $r16 = $r15.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $i5 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r16);

        r0[i8] = $i5;

        i8 = i8 + 1;

        goto label02;

     label03:
        i9 = 0;

        i10 = 0;

     label04:
        if i10 >= 64 goto label08;

        i11 = i10 + 1;

     label05:
        if i11 >= 65 goto label07;

        $r2 = new h.ST_Rect_t;

        specialinvoke $r2.<h.ST_Rect_t: void <init>()>();

        $r4 = r1.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r5 = $r4.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r6 = $r5[i10];

        $r11 = $r6.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r7 = r1.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r8 = $r7.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r9 = $r8[i11];

        $r10 = $r9.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r12 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t CombineRect(h.ST_Rect_t,h.ST_Rect_t)>($r11, $r10);

        virtualinvoke $r2.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r12);

        $i0 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r2);

        $i1 = r0[i10];

        $i3 = $i0 - $i1;

        $i2 = r0[i11];

        i4 = $i3 - $i2;

        if i4 <= i9 goto label06;

        i9 = i4;

        i6 = i10;

        i7 = i11;

     label06:
        i11 = i11 + 1;

        goto label05;

     label07:
        i10 = i10 + 1;

        goto label04;

     label08:
        staticinvoke <gen.lib.label.split_q__c: void Classify(h.ST_RTree,int,int)>(r1, i6, 0);

        staticinvoke <gen.lib.label.split_q__c: void Classify(h.ST_RTree,int,int)>(r1, i7, 1);

     label09:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("8rui4cun4tvq5xy6ke6r3p55e", "PickSeeds");

        goto label12;

     label10:
        $r17 := @caughtexception;

     label11:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("8rui4cun4tvq5xy6ke6r3p55e", "PickSeeds");

        throw $r17;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static void Classify(h.ST_RTree, int, int)
    {
        h.ST_RTree r0;
        h.ST_SplitQ_t $r1, $r5, $r9, $r13, $r17, $r20, $r28, $r31, $r37, $r40, $r45, $r49;
        h.ST_PartitionVars[] $r2, $r6, $r10, $r14, $r21, $r29, $r32, $r38, $r41, $r46;
        h.ST_PartitionVars $r3, $r7, $r11, $r15, $r22, $r30, $r33, $r39, $r42, $r47;
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] $r4, $r8, $r12, $r36, $r43, $r44;
        h.ST_Rect_t[] $r16, $r23, $r34, $r48;
        h.ST_Branch_t[] $r18, $r50;
        h.ST_Branch_t $r19, $r51;
        h.ST_Rect_t $r24, $r25, $r26, $r27, $r35, $r52, $r53;
        java.lang.Throwable $r54;

        r0 := @parameter0: h.ST_RTree;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("4qyy2dpbkziuubssvfwb8u1sh", "Classify");

     label1:
        $r1 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r2 = $r1.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r3 = $r2[0];

        $r4 = $r3.<h.ST_PartitionVars: int[] partition>;

        $r4[i0] = i1;

        $r5 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r6 = $r5.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r7 = $r6[0];

        $r8 = $r7.<h.ST_PartitionVars: int[] taken>;

        $r8[i0] = 1;

        $r9 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r10 = $r9.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r11 = $r10[0];

        $r12 = $r11.<h.ST_PartitionVars: int[] count>;

        $i2 = $r12[i1];

        if $i2 != 0 goto label2;

        $r45 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r46 = $r45.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r47 = $r46[0];

        $r48 = $r47.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r53 = $r48[i1];

        $r49 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r50 = $r49.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r51 = $r50[i0];

        $r52 = $r51.<h.ST_Branch_t: h.ST_Rect_t rect>;

        virtualinvoke $r53.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r52);

        goto label3;

     label2:
        $r13 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r14 = $r13.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r15 = $r14[0];

        $r16 = $r15.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r26 = $r16[i1];

        $r17 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r18 = $r17.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r19 = $r18[i0];

        $r25 = $r19.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r20 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r21 = $r20.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r22 = $r21[0];

        $r23 = $r22.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r24 = $r23[i1];

        $r27 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t CombineRect(h.ST_Rect_t,h.ST_Rect_t)>($r25, $r24);

        virtualinvoke $r26.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r27);

     label3:
        $r28 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r29 = $r28.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r30 = $r29[0];

        $r36 = $r30.<h.ST_PartitionVars: int[] area>;

        $r31 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r32 = $r31.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r33 = $r32[0];

        $r34 = $r33.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r35 = $r34[i1];

        $i3 = staticinvoke <gen.lib.label.rectangle__c: int RectArea(h.ST_Rect_t)>($r35);

        $r36[i1] = $i3;

        $r37 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r38 = $r37.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r39 = $r38[0];

        $r44 = $r39.<h.ST_PartitionVars: int[] count>;

        $r40 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r41 = $r40.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r42 = $r41[0];

        $r43 = $r42.<h.ST_PartitionVars: int[] count>;

        $i4 = $r43[i1];

        $i5 = $i4 + 1;

        $r44[i1] = $i5;

     label4:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("4qyy2dpbkziuubssvfwb8u1sh", "Classify");

        goto label6;

     label5:
        $r54 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("4qyy2dpbkziuubssvfwb8u1sh", "Classify");

        throw $r54;

     label6:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public static void LoadNodes(h.ST_RTree, h.ST_Node_t___, h.ST_Node_t___, h.ST_PartitionVars)
    {
        boolean $z0, $z1, $z2, $z3;
        h.ST_RTree r0;
        h.ST_SplitQ_t $r1, $r5, $r9, $r13, $r17, $r28;
        h.ST_PartitionVars[] $r2, $r14, $r18, $r29;
        h.ST_PartitionVars $r3, $r15, $r19, r22, $r30;
        int[] $r4, $r16, $r20, $r31;
        int $i0, $i3, $i4, i5, $i6;
        h.ST_Branch_t[] $r6, $r10;
        h.ST_Node_t___ r7, r11;
        h.ST_Branch_t $r8, $r12;
        java.lang.AssertionError $r21, $r23, $r24, $r25;
        java.lang.Throwable $r26;

        r0 := @parameter0: h.ST_RTree;

        r11 := @parameter1: h.ST_Node_t___;

        r7 := @parameter2: h.ST_Node_t___;

        r22 := @parameter3: h.ST_PartitionVars;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("ay7l4setwyl3hbx4o2jpa7vyz", "LoadNodes");

     label01:
        $z0 = <gen.lib.label.split_q__c: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if r11 != null goto label02;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();

        throw $r25;

     label02:
        $z1 = <gen.lib.label.split_q__c: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        if r7 != null goto label03;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label03:
        $z2 = <gen.lib.label.split_q__c: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        if r22 != null goto label04;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label04:
        i5 = 0;

     label05:
        if i5 >= 65 goto label09;

        $z3 = <gen.lib.label.split_q__c: boolean $assertionsDisabled>;

        if $z3 != 0 goto label06;

        $r13 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r14 = $r13.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r15 = $r14[0];

        $r16 = $r15.<h.ST_PartitionVars: int[] partition>;

        $i3 = $r16[i5];

        if $i3 == 0 goto label06;

        $r17 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r18 = $r17.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r19 = $r18[0];

        $r20 = $r19.<h.ST_PartitionVars: int[] partition>;

        $i4 = $r20[i5];

        if $i4 == 1 goto label06;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label06:
        $r28 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r29 = $r28.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r30 = $r29[0];

        $r31 = $r30.<h.ST_PartitionVars: int[] partition>;

        $i6 = $r31[i5];

        if $i6 != 0 goto label07;

        $r9 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r10 = $r9.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r12 = $r10[i5];

        staticinvoke <gen.lib.label.node__c: int AddBranch(h.ST_RTree,h.ST_Branch_t,h.ST_Node_t___,h.ST_Node_t___[])>(r0, $r12, r11, null);

        goto label08;

     label07:
        $r1 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r2 = $r1.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r3 = $r2[0];

        $r4 = $r3.<h.ST_PartitionVars: int[] partition>;

        $i0 = $r4[i5];

        if $i0 != 1 goto label08;

        $r5 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r6 = $r5.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf>;

        $r8 = $r6[i5];

        staticinvoke <gen.lib.label.node__c: int AddBranch(h.ST_RTree,h.ST_Branch_t,h.ST_Node_t___,h.ST_Node_t___[])>(r0, $r8, r7, null);

     label08:
        i5 = i5 + 1;

        goto label05;

     label09:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("ay7l4setwyl3hbx4o2jpa7vyz", "LoadNodes");

        goto label12;

     label10:
        $r26 := @caughtexception;

     label11:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("ay7l4setwyl3hbx4o2jpa7vyz", "LoadNodes");

        throw $r26;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static void InitPVars(h.ST_RTree)
    {
        h.ST_RTree r0;
        h.ST_SplitQ_t $r1, $r5, $r9, $r15, $r21, $r25, $r29, $r33;
        h.ST_PartitionVars[] $r2, $r6, $r10, $r16, $r22, $r26, $r30, $r34;
        h.ST_PartitionVars $r3, $r7, $r11, $r17, $r23, $r27, $r31, $r35;
        int[] $r4, $r8, $r24, $r28, $r32, $r36;
        h.ST_Rect_t[] $r12, $r18;
        h.ST_Rect_t $r13, $r14, $r19, $r20;
        int i0;

        r0 := @parameter0: h.ST_RTree;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("dvgjc83sogjhzf5kxpir405rh", "InitPVars");

        $r1 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r2 = $r1.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r3 = $r2[0];

        $r4 = $r3.<h.ST_PartitionVars: int[] count>;

        $r4[0] = 0;

        $r5 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r6 = $r5.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r7 = $r6[0];

        $r8 = $r7.<h.ST_PartitionVars: int[] count>;

        $r8[1] = 0;

        $r9 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r10 = $r9.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r11 = $r10[0];

        $r12 = $r11.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r13 = $r12[0];

        $r14 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t NullRect()>();

        virtualinvoke $r13.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r14);

        $r15 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r16 = $r15.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r17 = $r16[0];

        $r18 = $r17.<h.ST_PartitionVars: h.ST_Rect_t[] cover>;

        $r19 = $r18[1];

        $r20 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t NullRect()>();

        virtualinvoke $r19.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r20);

        $r21 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r22 = $r21.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r23 = $r22[0];

        $r24 = $r23.<h.ST_PartitionVars: int[] area>;

        $r24[0] = 0;

        $r25 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r26 = $r25.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r27 = $r26[0];

        $r28 = $r27.<h.ST_PartitionVars: int[] area>;

        $r28[1] = 0;

        i0 = 0;

     label1:
        if i0 >= 65 goto label2;

        $r29 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r30 = $r29.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r31 = $r30[0];

        $r32 = $r31.<h.ST_PartitionVars: int[] taken>;

        $r32[i0] = 0;

        $r33 = r0.<h.ST_RTree: h.ST_SplitQ_t split>;

        $r34 = $r33.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions>;

        $r35 = $r34[0];

        $r36 = $r35.<h.ST_PartitionVars: int[] partition>;

        $r36[i0] = -1;

        i0 = i0 + 1;

        goto label1;

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("dvgjc83sogjhzf5kxpir405rh", "InitPVars");

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lgen/lib/label/split_q__c;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <gen.lib.label.split_q__c: boolean $assertionsDisabled> = $z1;

        return;
    }
}
