public class net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk extends java.lang.Object implements net.sourceforge.plantuml.svek.CucaDiagramFileMaker
{
    private final net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram;
    private final net.sourceforge.plantuml.graphic.StringBounder stringBounder;
    private final net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory;
    private final java.util.Map nodes;
    private final java.util.Map clusters;
    private final java.util.Map edges;

    public void <init>(net.sourceforge.plantuml.cucadiagram.CucaDiagram, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        java.util.LinkedHashMap $r1, $r2, $r3;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.svek.DotStringFactory $r6;

        r0 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r4 := @parameter0: net.sourceforge.plantuml.cucadiagram.CucaDiagram;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map nodes> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map clusters> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map edges> = $r3;

        r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram> = r4;

        r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder> = r5;

        $r6 = new net.sourceforge.plantuml.svek.DotStringFactory;

        specialinvoke $r6.<net.sourceforge.plantuml.svek.DotStringFactory: void <init>(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.cucadiagram.CucaDiagram)>(r5, r4);

        r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory> = $r6;

        return;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getLabel(net.sourceforge.plantuml.cucadiagram.Link)
    {
        net.sourceforge.plantuml.cucadiagram.Link r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1, $r8;
        boolean $z0, $z1;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r2;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r3;
        net.sourceforge.plantuml.ISkinParam r4;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5;
        net.sourceforge.plantuml.FontParam $r6;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r9, $r10;
        net.sourceforge.plantuml.graphic.TextBlock r11;
        net.sourceforge.plantuml.graphic.StringBounder $r12;

        r2 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Link;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: boolean isNull(net.sourceforge.plantuml.cucadiagram.Display)>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam ARROW>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r4, $r6, null);

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.Display getLabel()>();

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r10 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r9);

        r11 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r5, $r10, r4);

        $r12 = r2.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $z1 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: boolean isEmpty(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>(r11, $r12);

        if $z1 == 0 goto label2;

        return null;

     label2:
        return r11;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getQualifier(net.sourceforge.plantuml.cucadiagram.Link, int)
    {
        int i0;
        net.sourceforge.plantuml.cucadiagram.Link r0;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r2;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r3;
        net.sourceforge.plantuml.ISkinParam r4;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5;
        net.sourceforge.plantuml.FontParam $r6;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r9, $r10;
        net.sourceforge.plantuml.graphic.TextBlock r11;
        net.sourceforge.plantuml.graphic.StringBounder $r12;
        boolean $z0;
        java.lang.String $r13;

        r2 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.Link;

        i0 := @parameter1: int;

        if i0 != 1 goto label1;

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier1()>();

        goto label2;

     label1:
        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier2()>();

     label2:
        if $r13 != null goto label3;

        return null;

     label3:
        $r3 = r2.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam ARROW>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r4, $r6, null);

        $r8 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r13);

        $r9 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r10 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r9);

        r11 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>($r5, $r10, r4);

        $r12 = r2.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        $z0 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: boolean isEmpty(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.StringBounder)>(r11, $r12);

        if $z0 == 0 goto label4;

        return null;

     label4:
        return r11;
    }

    private java.awt.geom.Point2D getPosition(net.sourceforge.plantuml.elk.proxy.graph.ElkNode)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r0, r1;
        double d0, d1, $d2, $d3, $d4, $d5;
        java.awt.geom.Point2D$Double $r2, $r6;
        java.util.Collection $r3;
        int $i0;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r4;
        java.awt.geom.Point2D r5;

        r4 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r0 := @parameter0: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: net.sourceforge.plantuml.elk.proxy.graph.ElkNode getParent()>();

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: double getX()>();

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: double getY()>();

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: java.util.Collection getLabels()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.awt.geom.Point2D$Double;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d1);

        return $r2;

     label2:
        r5 = specialinvoke r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.awt.geom.Point2D getPosition(net.sourceforge.plantuml.elk.proxy.graph.ElkNode)>(r1);

        $r6 = new java.awt.geom.Point2D$Double;

        $d2 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d3 = $d2 + d0;

        $d4 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d4 + d1;

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d5);

        return $r6;
    }

    private java.util.Collection getUnpackagedEntities()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r2;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r3, $r8;
        java.util.Collection $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.cucadiagram.ILeaf r7;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory $r9;
        net.sourceforge.plantuml.cucadiagram.IGroup $r10, $r11;

        r2 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: java.util.Collection getLeafsvalues()>();

        r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r6;

        $r8 = r2.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory getEntityFactory()>();

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: net.sourceforge.plantuml.cucadiagram.IGroup getRootGroup()>();

        $r11 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.IGroup getParentContainer()>();

        if $r10 != $r11 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private net.sourceforge.plantuml.elk.proxy.graph.ElkNode getElkNode(net.sourceforge.plantuml.cucadiagram.IEntity)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.IEntity r1;
        java.util.Map $r2, $r4;
        java.lang.Object $r3, $r5;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r6;

        r0 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        $r2 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map nodes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (net.sourceforge.plantuml.elk.proxy.graph.ElkNode) $r3;

        if r6 != null goto label1;

        $r4 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map clusters>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (net.sourceforge.plantuml.elk.proxy.graph.ElkNode) $r5;

     label1:
        return r6;
    }

    public net.sourceforge.plantuml.core.ImageData createFile(java.io.OutputStream, java.util.List, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        java.lang.Object $r0, $r1, $r2, $r3;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r4;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r5, $r16, $r22, $r23, $r25;
        net.sourceforge.plantuml.cucadiagram.IGroup $r6;
        java.util.Collection $r7;
        net.sourceforge.plantuml.elk.proxy.core.RecursiveGraphLayoutEngine $r8;
        net.sourceforge.plantuml.elk.proxy.core.util.NullElkProgressMonitor $r9;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk$Drawing $r10, $r13;
        net.sourceforge.plantuml.graphic.StringBounder $r11;
        net.sourceforge.plantuml.ugraphic.MinMax r12;
        net.sourceforge.plantuml.FileFormatOption r15;
        net.sourceforge.plantuml.ugraphic.ImageBuilder $r17, $r18;
        java.io.OutputStream r19;
        net.sourceforge.plantuml.core.ImageData $r20, $r28;
        java.lang.Throwable $r21;
        long $l0;
        java.lang.String $r24, $r26;
        java.util.List $r27, r29;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r30;

        r4 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r19 := @parameter0: java.io.OutputStream;

        r29 := @parameter1: java.util.List;

        r15 := @parameter2: net.sourceforge.plantuml.FileFormatOption;

     label1:
        r30 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkNode createGraph()>();

        $r1 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object DIRECTION>;

        $r0 = <net.sourceforge.plantuml.elk.proxy.core.options.Direction: java.lang.Object DOWN>;

        virtualinvoke r30.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: void setProperty(java.lang.Object,java.lang.Object)>($r1, $r0);

        $r3 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object HIERARCHY_HANDLING>;

        $r2 = <net.sourceforge.plantuml.elk.proxy.core.options.HierarchyHandling: java.lang.Object INCLUDE_CHILDREN>;

        virtualinvoke r30.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: void setProperty(java.lang.Object,java.lang.Object)>($r3, $r2);

        $r5 = r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.cucadiagram.IGroup getRootGroup()>();

        specialinvoke r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void printAllSubgroups(net.sourceforge.plantuml.elk.proxy.graph.ElkNode,net.sourceforge.plantuml.cucadiagram.IGroup)>(r30, $r6);

        $r7 = specialinvoke r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Collection getUnpackagedEntities()>();

        specialinvoke r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void printEntities(net.sourceforge.plantuml.elk.proxy.graph.ElkNode,java.util.Collection)>(r30, $r7);

        specialinvoke r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void manageAllEdges()>();

        $r8 = new net.sourceforge.plantuml.elk.proxy.core.RecursiveGraphLayoutEngine;

        specialinvoke $r8.<net.sourceforge.plantuml.elk.proxy.core.RecursiveGraphLayoutEngine: void <init>()>();

        $r9 = new net.sourceforge.plantuml.elk.proxy.core.util.NullElkProgressMonitor;

        specialinvoke $r9.<net.sourceforge.plantuml.elk.proxy.core.util.NullElkProgressMonitor: void <init>()>();

        virtualinvoke $r8.<net.sourceforge.plantuml.elk.proxy.core.RecursiveGraphLayoutEngine: void layout(net.sourceforge.plantuml.elk.proxy.graph.ElkNode,net.sourceforge.plantuml.elk.proxy.core.util.NullElkProgressMonitor)>(r30, $r9);

        $r10 = new net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk$Drawing;

        specialinvoke $r10.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk$Drawing: void <init>(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk,net.sourceforge.plantuml.ugraphic.MinMax)>(r4, null);

        $r11 = r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r12 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.UDrawable,net.sourceforge.plantuml.graphic.StringBounder,boolean)>($r10, $r11, 0);

        $r13 = new net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk$Drawing;

        specialinvoke $r13.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk$Drawing: void <init>(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk,net.sourceforge.plantuml.ugraphic.MinMax)>(r4, r12);

        $r16 = r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.ugraphic.ImageBuilder createImageBuilder(net.sourceforge.plantuml.FileFormatOption)>(r15);

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.ugraphic.ImageBuilder drawable(net.sourceforge.plantuml.graphic.UDrawable)>($r13);

        $r20 = virtualinvoke $r18.<net.sourceforge.plantuml.ugraphic.ImageBuilder: net.sourceforge.plantuml.core.ImageData write(java.io.OutputStream)>(r19);

     label2:
        return $r20;

     label3:
        $r21 := @caughtexception;

        $r22 = r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $l0 = virtualinvoke $r22.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: long seed()>();

        $r23 = r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r24 = virtualinvoke $r23.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: java.lang.String getMetadata()>();

        $r25 = r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r26 = virtualinvoke $r25.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: java.lang.String getFlashData()>();

        $r27 = staticinvoke <net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.List getFailureText3(java.lang.Throwable)>($r21);

        staticinvoke <net.sourceforge.plantuml.UmlDiagram: void exportDiagramError(java.io.OutputStream,java.lang.Throwable,net.sourceforge.plantuml.FileFormatOption,long,java.lang.String,java.lang.String,java.util.List)>(r19, $r21, r15, $l0, $r24, $r26, $r27);

        $r28 = staticinvoke <net.sourceforge.plantuml.api.ImageDataSimple: net.sourceforge.plantuml.core.ImageData error()>();

        return $r28;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void printAllSubgroups(net.sourceforge.plantuml.elk.proxy.graph.ElkNode, net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.IGroup r1, r6;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r2, $r7, $r17, $r18;
        java.util.Collection $r3;
        java.util.Iterator r4;
        java.lang.Object $r5, $r9, $r10, $r12;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r8, r23;
        net.sourceforge.plantuml.elk.proxy.core.math.ElkPadding $r11;
        java.util.Map $r13;
        net.sourceforge.plantuml.cucadiagram.GroupType $r15, $r16;
        java.io.PrintStream $r20;
        net.sourceforge.plantuml.ISkinParam r21;
        net.sourceforge.plantuml.cucadiagram.entity.EntityFactory r22;
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r24;

        r0 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r8 := @parameter0: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.IGroup;

        $r2 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: java.util.Collection getChildrenGroups(net.sourceforge.plantuml.cucadiagram.IGroup)>(r1);

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.cucadiagram.IGroup) $r5;

        $z0 = interfaceinvoke r6.<net.sourceforge.plantuml.cucadiagram.IGroup: boolean isRemoved()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r7 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $z1 = virtualinvoke $r7.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: boolean isEmpty(net.sourceforge.plantuml.cucadiagram.IGroup)>(r6);

        if $z1 == 0 goto label3;

        $r15 = interfaceinvoke r6.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.GroupType getGroupType()>();

        $r16 = <net.sourceforge.plantuml.cucadiagram.GroupType: net.sourceforge.plantuml.cucadiagram.GroupType PACKAGE>;

        if $r15 != $r16 goto label3;

        $r17 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        r21 = virtualinvoke $r17.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r18 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        r22 = virtualinvoke $r18.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.cucadiagram.entity.EntityFactory getEntityFactory()>();

        virtualinvoke r22.<net.sourceforge.plantuml.cucadiagram.entity.EntityFactory: net.sourceforge.plantuml.cucadiagram.ILeaf createLeafForEmptyGroup(net.sourceforge.plantuml.cucadiagram.IGroup,net.sourceforge.plantuml.ISkinParam)>(r6, r21);

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("STILL IN PROGRESS");

        goto label4;

     label3:
        r23 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkNode createNode(net.sourceforge.plantuml.elk.proxy.graph.ElkNode)>(r8);

        $r10 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object DIRECTION>;

        $r9 = <net.sourceforge.plantuml.elk.proxy.core.options.Direction: java.lang.Object DOWN>;

        virtualinvoke r23.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: void setProperty(java.lang.Object,java.lang.Object)>($r10, $r9);

        $r12 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object PADDING>;

        $r11 = new net.sourceforge.plantuml.elk.proxy.core.math.ElkPadding;

        specialinvoke $r11.<net.sourceforge.plantuml.elk.proxy.core.math.ElkPadding: void <init>(double,double,double,double)>(40.0, 15.0, 15.0, 15.0);

        virtualinvoke r23.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: void setProperty(java.lang.Object,java.lang.Object)>($r12, $r11);

        r24 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel createLabel(net.sourceforge.plantuml.elk.proxy.graph.ElkNode)>(r23);

        virtualinvoke r24.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setText(java.lang.String)>("C");

        $r13 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map clusters>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r23);

        specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void printSingleGroup(net.sourceforge.plantuml.cucadiagram.IGroup)>(r6);

     label4:
        goto label1;

     label5:
        return;
    }

    private void printSingleGroup(net.sourceforge.plantuml.cucadiagram.IGroup)
    {
        net.sourceforge.plantuml.cucadiagram.IGroup r0;
        net.sourceforge.plantuml.cucadiagram.GroupType $r1, $r2;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r3;
        java.util.Map $r4, $r8;
        java.lang.Object $r5, $r9;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode $r6, $r10;
        java.util.Collection $r7;

        r3 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.IGroup;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: net.sourceforge.plantuml.cucadiagram.GroupType getGroupType()>();

        $r2 = <net.sourceforge.plantuml.cucadiagram.GroupType: net.sourceforge.plantuml.cucadiagram.GroupType CONCURRENT_STATE>;

        if $r1 != $r2 goto label1;

        return;

     label1:
        $r4 = r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map clusters>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (net.sourceforge.plantuml.elk.proxy.graph.ElkNode) $r5;

        $r7 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.IGroup: java.util.Collection getLeafsDirect()>();

        specialinvoke r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void printEntities(net.sourceforge.plantuml.elk.proxy.graph.ElkNode,java.util.Collection)>($r6, $r7);

        $r8 = r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map clusters>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r10 = (net.sourceforge.plantuml.elk.proxy.graph.ElkNode) $r9;

        specialinvoke r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void printAllSubgroups(net.sourceforge.plantuml.elk.proxy.graph.ElkNode,net.sourceforge.plantuml.cucadiagram.IGroup)>($r10, r0);

        return;
    }

    private void printEntities(net.sourceforge.plantuml.elk.proxy.graph.ElkNode, java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.cucadiagram.ILeaf r3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r4;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r5;

        r4 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r5 := @parameter0: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        r0 := @parameter1: java.util.Collection;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.cucadiagram.ILeaf) $r2;

        $z0 = interfaceinvoke r3.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isRemoved()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        specialinvoke r4.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void manageSingleNode(net.sourceforge.plantuml.elk.proxy.graph.ElkNode,net.sourceforge.plantuml.cucadiagram.ILeaf)>(r5, r3);

        goto label1;

     label3:
        return;
    }

    private void manageAllEdges()
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.cucadiagram.Link r5;

        r0 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        $r1 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: java.util.List getLinks()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.cucadiagram.Link) $r4;

        specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: void manageSingleEdge(net.sourceforge.plantuml.cucadiagram.Link)>(r5);

        goto label1;

     label2:
        return;
    }

    private void manageSingleNode(net.sourceforge.plantuml.elk.proxy.graph.ElkNode, net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.svek.IEntityImage r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r5, r6;
        double $d0, $d1, $d3, $d4, $d5;
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r7;
        net.sourceforge.plantuml.elk.proxy.core.options.NodeLabelPlacement $r8, $r9, $r10;
        java.lang.Object $r11;
        java.util.EnumSet $r12;
        java.util.Map $r13;

        r0 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r5 := @parameter0: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.svek.IEntityImage printEntityInternal(net.sourceforge.plantuml.cucadiagram.ILeaf)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        r6 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkNode createNode(net.sourceforge.plantuml.elk.proxy.graph.ElkNode)>(r5);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r6.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: void setDimensions(double,double)>($d0, $d1);

        r7 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel createLabel(net.sourceforge.plantuml.elk.proxy.graph.ElkNode)>(r6);

        virtualinvoke r7.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setText(java.lang.String)>("X");

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = $d4 - 10.0;

        virtualinvoke r7.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setDimensions(double,double)>($d3, $d5);

        $r11 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object NODE_LABELS_PLACEMENT>;

        $r10 = <net.sourceforge.plantuml.elk.proxy.core.options.NodeLabelPlacement: net.sourceforge.plantuml.elk.proxy.core.options.NodeLabelPlacement INSIDE>;

        $r9 = <net.sourceforge.plantuml.elk.proxy.core.options.NodeLabelPlacement: net.sourceforge.plantuml.elk.proxy.core.options.NodeLabelPlacement H_CENTER>;

        $r8 = <net.sourceforge.plantuml.elk.proxy.core.options.NodeLabelPlacement: net.sourceforge.plantuml.elk.proxy.core.options.NodeLabelPlacement V_CENTER>;

        $r12 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>($r10, $r9, $r8);

        virtualinvoke r7.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setProperty(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map nodes>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        return;
    }

    private void manageSingleEdge(net.sourceforge.plantuml.cucadiagram.Link)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.Link r1;
        net.sourceforge.plantuml.cucadiagram.IEntity $r2, $r4;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r3, r5;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge r6;
        net.sourceforge.plantuml.graphic.TextBlock r7, $r12, $r18;
        java.lang.String $r8, $r9;
        java.util.Map $r10;
        net.sourceforge.plantuml.graphic.StringBounder $r13, $r19, $r24;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.elk.proxy.core.options.EdgeLabelPlacement $r14, $r20;
        java.lang.Object $r15, $r16, $r21, $r22, $r25;
        java.lang.Boolean $r17, $r23, $r26;
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r27, r29, r31;
        net.sourceforge.plantuml.awt.geom.Dimension2D r28, r30, r32;

        r0 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.Link;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity1()>();

        r3 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.elk.proxy.graph.ElkNode getElkNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r2);

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Link: net.sourceforge.plantuml.cucadiagram.IEntity getEntity2()>();

        r5 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.elk.proxy.graph.ElkNode getElkNode(net.sourceforge.plantuml.cucadiagram.IEntity)>($r4);

        r6 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge createSimpleEdge(net.sourceforge.plantuml.elk.proxy.graph.ElkNode,net.sourceforge.plantuml.elk.proxy.graph.ElkNode)>(r3, r5);

        r7 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.TextBlock getLabel(net.sourceforge.plantuml.cucadiagram.Link)>(r1);

        if r7 == null goto label1;

        r27 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel createLabel(net.sourceforge.plantuml.elk.proxy.graph.ElkEdge)>(r6);

        $r24 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r28 = interfaceinvoke r7.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r24);

        virtualinvoke r27.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setText(java.lang.String)>("X");

        $d4 = virtualinvoke r28.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = virtualinvoke r28.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r27.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setDimensions(double,double)>($d4, $d5);

        $r25 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object EDGE_LABELS_INLINE>;

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r6.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: void setProperty(java.lang.Object,java.lang.Object)>($r25, $r26);

     label1:
        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier1()>();

        if $r8 == null goto label2;

        r29 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel createLabel(net.sourceforge.plantuml.elk.proxy.graph.ElkEdge)>(r6);

        $r18 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.TextBlock getQualifier(net.sourceforge.plantuml.cucadiagram.Link,int)>(r1, 1);

        $r19 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r30 = interfaceinvoke $r18.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r19);

        virtualinvoke r29.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setText(java.lang.String)>("1");

        $d2 = virtualinvoke r30.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = virtualinvoke r30.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r29.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setDimensions(double,double)>($d2, $d3);

        $r21 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object EDGE_LABELS_PLACEMENT>;

        $r20 = <net.sourceforge.plantuml.elk.proxy.core.options.EdgeLabelPlacement: net.sourceforge.plantuml.elk.proxy.core.options.EdgeLabelPlacement TAIL>;

        virtualinvoke r29.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setProperty(java.lang.Object,java.lang.Object)>($r21, $r20);

        $r22 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object EDGE_LABELS_INLINE>;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r6.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: void setProperty(java.lang.Object,java.lang.Object)>($r22, $r23);

     label2:
        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Link: java.lang.String getQualifier2()>();

        if $r9 == null goto label3;

        r31 = staticinvoke <net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel createLabel(net.sourceforge.plantuml.elk.proxy.graph.ElkEdge)>(r6);

        $r12 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.TextBlock getQualifier(net.sourceforge.plantuml.cucadiagram.Link,int)>(r1, 2);

        $r13 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.StringBounder stringBounder>;

        r32 = interfaceinvoke $r12.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r13);

        virtualinvoke r31.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setText(java.lang.String)>("2");

        $d0 = virtualinvoke r32.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r32.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r31.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setDimensions(double,double)>($d0, $d1);

        $r15 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object EDGE_LABELS_PLACEMENT>;

        $r14 = <net.sourceforge.plantuml.elk.proxy.core.options.EdgeLabelPlacement: net.sourceforge.plantuml.elk.proxy.core.options.EdgeLabelPlacement HEAD>;

        virtualinvoke r31.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void setProperty(java.lang.Object,java.lang.Object)>($r15, $r14);

        $r16 = <net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions: java.lang.Object EDGE_LABELS_INLINE>;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r6.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: void setProperty(java.lang.Object,java.lang.Object)>($r16, $r17);

     label3:
        $r10 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map edges>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        return;
    }

    private static java.util.List getFailureText3(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.util.ArrayList $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r9, $r10, $r11;
        java.lang.String $r6, $r7, r8, $r12;

        r0 := @parameter0: java.lang.Throwable;

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error has occured : ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = staticinvoke <net.sourceforge.plantuml.graphic.QuoteUtils: java.lang.String getSomeQuote()>();

        r8 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String rot(java.lang.String)>($r7);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<i>");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(" ");

        staticinvoke <net.sourceforge.plantuml.svek.GraphvizCrash: void addProperties(java.util.List)>($r1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("Sorry, ELK intregration is really alpha feature...");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(" ");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("You should send this diagram and this image to <b>plantuml@gmail.com</b> or");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("post to <b>http://plantuml.com/qa</b> to solve this issue.");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(" ");

        return $r1;
    }

    private net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.svek.DotStringFactory $r1;
        net.sourceforge.plantuml.svek.Bibliotekon $r2;

        r0 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        $r1 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.svek.DotStringFactory dotStringFactory>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.DotStringFactory: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        return $r2;
    }

    private net.sourceforge.plantuml.svek.IEntityImage printEntityInternal(net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.cucadiagram.ILeaf r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.svek.IEntityImage $r1, $r2, $r13;
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r3;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r4, $r6, $r7, $r9, $r11;
        net.sourceforge.plantuml.ISkinParam r5;
        net.sourceforge.plantuml.svek.Bibliotekon $r8;
        net.sourceforge.plantuml.UmlDiagramType $r10;
        java.util.List $r12;
        java.io.PrintStream $r14;
        java.lang.IllegalStateException $r15;

        r3 := @this: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r0 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isRemoved()>();

        if $z0 == 0 goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>()>();

        throw $r15;

     label1:
        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.svek.IEntityImage getSvekImage()>();

        if $r1 != null goto label3;

        $r4 = r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $z1 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: boolean sameClassWidth()>();

        if $z1 == 0 goto label2;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("NOT YET IMPLEMENED");

     label2:
        $r6 = r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $z2 = virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: boolean isHideEmptyDescriptionForState()>();

        $r7 = r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r8 = specialinvoke r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.svek.Bibliotekon getBibliotekon()>();

        $r9 = r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: net.sourceforge.plantuml.UmlDiagramType getUmlDiagramType()>();

        $r11 = r3.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.cucadiagram.CucaDiagram: java.util.List getLinks()>();

        $r13 = staticinvoke <net.sourceforge.plantuml.svek.GeneralImageBuilder: net.sourceforge.plantuml.svek.IEntityImage createEntityImageBlock(net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.ISkinParam,boolean,net.sourceforge.plantuml.cucadiagram.PortionShower,net.sourceforge.plantuml.svek.Bibliotekon,net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion,net.sourceforge.plantuml.UmlDiagramType,java.util.Collection)>(r0, r5, $z2, $r7, $r8, null, $r10, $r12);

        return $r13;

     label3:
        $r2 = interfaceinvoke r0.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.svek.IEntityImage getSvekImage()>();

        return $r2;
    }

    static java.util.Map access$000(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        java.util.Map $r1;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        $r1 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map clusters>;

        return $r1;
    }

    static java.util.Map access$100(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        java.util.Map $r1;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        $r1 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map nodes>;

        return $r1;
    }

    static java.util.Map access$200(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        java.util.Map $r1;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        $r1 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.util.Map edges>;

        return $r1;
    }

    static java.awt.geom.Point2D access$300(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk, net.sourceforge.plantuml.elk.proxy.graph.ElkNode)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode r1;
        java.awt.geom.Point2D $r2;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r1 := @parameter1: net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: java.awt.geom.Point2D getPosition(net.sourceforge.plantuml.elk.proxy.graph.ElkNode)>(r1);

        return $r2;
    }

    static net.sourceforge.plantuml.cucadiagram.CucaDiagram access$400(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.CucaDiagram $r1;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        $r1 = r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.cucadiagram.CucaDiagram diagram>;

        return $r1;
    }

    static net.sourceforge.plantuml.svek.IEntityImage access$500(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk, net.sourceforge.plantuml.cucadiagram.ILeaf)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.ILeaf;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.svek.IEntityImage printEntityInternal(net.sourceforge.plantuml.cucadiagram.ILeaf)>(r1);

        return $r2;
    }

    static net.sourceforge.plantuml.graphic.TextBlock access$600(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk, net.sourceforge.plantuml.cucadiagram.Link)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.Link r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.Link;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.TextBlock getLabel(net.sourceforge.plantuml.cucadiagram.Link)>(r1);

        return $r2;
    }

    static net.sourceforge.plantuml.graphic.TextBlock access$700(net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk, net.sourceforge.plantuml.cucadiagram.Link, int)
    {
        net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk r0;
        net.sourceforge.plantuml.cucadiagram.Link r1;
        int i0;
        net.sourceforge.plantuml.graphic.TextBlock $r2;

        r0 := @parameter0: net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.Link;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk: net.sourceforge.plantuml.graphic.TextBlock getQualifier(net.sourceforge.plantuml.cucadiagram.Link,int)>(r1, i0);

        return $r2;
    }
}
