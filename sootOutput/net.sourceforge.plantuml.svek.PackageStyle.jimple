public final enum class net.sourceforge.plantuml.svek.PackageStyle extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.svek.PackageStyle FOLDER;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle RECTANGLE;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle NODE;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle FRAME;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle CLOUD;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle DATABASE;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle AGENT;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle STORAGE;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle COMPONENT1;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle COMPONENT2;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle ARTIFACT;
    public static final enum net.sourceforge.plantuml.svek.PackageStyle CARD;
    private static final net.sourceforge.plantuml.svek.PackageStyle[] $VALUES;

    public static net.sourceforge.plantuml.svek.PackageStyle[] values()
    {
        net.sourceforge.plantuml.svek.PackageStyle[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.svek.PackageStyle[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.svek.PackageStyle valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.svek.PackageStyle $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/svek/PackageStyle;", r0);

        $r2 = (net.sourceforge.plantuml.svek.PackageStyle) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.svek.PackageStyle r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.svek.PackageStyle fromString(java.lang.String)
    {
        java.util.EnumSet $r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        java.lang.String r2, $r3, $r7;
        net.sourceforge.plantuml.svek.PackageStyle $r4, r6;
        java.lang.Object $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lnet/sourceforge/plantuml/svek/PackageStyle;");

        r1 = virtualinvoke $r0.<java.util.EnumSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.svek.PackageStyle) $r5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.svek.PackageStyle: java.lang.String toString()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label2;

        return r6;

     label2:
        goto label1;

     label3:
        $r3 = "rect";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label4;

        $r4 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle RECTANGLE>;

        return $r4;

     label4:
        return null;
    }

    public net.sourceforge.plantuml.graphic.USymbol toUSymbol()
    {
        net.sourceforge.plantuml.svek.PackageStyle r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        net.sourceforge.plantuml.graphic.USymbol $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        $r1 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle NODE>;

        if r0 != $r1 goto label1;

        $r14 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol NODE>;

        return $r14;

     label1:
        $r2 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle CARD>;

        if r0 != $r2 goto label2;

        $r13 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol CARD>;

        return $r13;

     label2:
        $r3 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle DATABASE>;

        if r0 != $r3 goto label3;

        $r12 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol DATABASE>;

        return $r12;

     label3:
        $r4 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle CLOUD>;

        if r0 != $r4 goto label4;

        $r11 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol CLOUD>;

        return $r11;

     label4:
        $r5 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FRAME>;

        if r0 != $r5 goto label5;

        $r10 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol FRAME>;

        return $r10;

     label5:
        $r6 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle RECTANGLE>;

        if r0 != $r6 goto label6;

        $r9 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol RECTANGLE>;

        return $r9;

     label6:
        $r7 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FOLDER>;

        if r0 != $r7 goto label7;

        $r8 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol PACKAGE>;

        return $r8;

     label7:
        return null;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D, boolean)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, r15;
        double d0, d1;
        net.sourceforge.plantuml.svek.PackageStyle r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.UnsupportedOperationException $r12;
        net.sourceforge.plantuml.ugraphic.UGraphic r13;
        boolean z0;
        net.sourceforge.plantuml.Dimension2DDouble $r14;

        r1 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r13 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r15 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        z0 := @parameter3: boolean;

        if r15 != null goto label01;

        $r14 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r14.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        r15 = $r14;

     label01:
        d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r2 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle DATABASE>;

        if r1 != $r2 goto label02;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawDatabase(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label02:
        $r3 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FOLDER>;

        if r1 != $r3 goto label03;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawFolder(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label03:
        $r4 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FRAME>;

        if r1 != $r4 goto label04;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawFrame(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.awt.geom.Dimension2D,boolean)>(r13, d0, d1, r15, z0);

        goto label12;

     label04:
        $r5 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle CLOUD>;

        if r1 != $r5 goto label05;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawCloud(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label05:
        $r6 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle RECTANGLE>;

        if r1 != $r6 goto label06;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawRect(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label06:
        $r7 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle COMPONENT1>;

        if r1 != $r7 goto label07;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawComponent1(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label07:
        $r8 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle COMPONENT2>;

        if r1 != $r8 goto label08;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawComponent2(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label08:
        $r9 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle STORAGE>;

        if r1 != $r9 goto label09;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawStorage(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label09:
        $r10 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle AGENT>;

        if r1 != $r10 goto label10;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawRect(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label10:
        $r11 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle ARTIFACT>;

        if r1 != $r11 goto label11;

        specialinvoke r1.<net.sourceforge.plantuml.svek.PackageStyle: void drawArtifact(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,boolean)>(r13, d0, d1, z0);

        goto label12;

     label11:
        $r12 = new java.lang.UnsupportedOperationException;

        specialinvoke $r12.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r12;

     label12:
        return;
    }

    private void drawArtifact(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        net.sourceforge.plantuml.ugraphic.UPolygon $r0;
        double d0, d1, $d2, $d3;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4, $r7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3, $r6;
        net.sourceforge.plantuml.ugraphic.ULine $r5, $r8;
        net.sourceforge.plantuml.svek.PackageStyle r9;

        r9 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        d0 := @parameter2: double;

        z0 := @parameter3: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, d0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d1, d0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d1, 10.0);

        $d2 = d1 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d2, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void setDeltaShadow(double)>(3.0);

     label1:
        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $d3 = d1 - 10.0;

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d3);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>(10.0);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        $r6 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d1, 10.0);

        $r7 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(-10.0);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        return;
    }

    private void drawStorage(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        net.sourceforge.plantuml.ugraphic.URectangle $r0, r1;
        double d0, d1;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.svek.PackageStyle r3;

        r3 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        z0 := @parameter3: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        r1 = virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>(70.0);

        if z0 == 0 goto label1;

        virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(3.0);

     label1:
        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r1);

        return;
    }

    private void drawComponent1(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        net.sourceforge.plantuml.ugraphic.URectangle $r0, $r2;
        double d0, d1, $d2;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r4, $r6, $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5, $r7;
        net.sourceforge.plantuml.svek.PackageStyle r9;

        r9 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        z0 := @parameter3: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(4.0);

     label1:
        $r2 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(10.0, 5.0);

        interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(-5.0, 5.0);

        $r6 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d2 = d1 - 10.0;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(-5.0, $d2);

        $r8 = interfaceinvoke r4.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

        return;
    }

    private void drawComponent2(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        net.sourceforge.plantuml.ugraphic.URectangle $r0, $r2, $r4;
        double d0, d1, $d2, $d3, $d4;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r6, $r8, $r10, $r12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7, $r9, $r11;
        net.sourceforge.plantuml.svek.PackageStyle r13;

        r13 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r6 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        z0 := @parameter3: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(4.0);

     label1:
        $r2 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(15.0, 10.0);

        $r4 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(4.0, 2.0);

        interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d2 = d0 - 20.0;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d2, 5.0);

        $r8 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r2);

        $r9 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d3 = d0 - 22.0;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d3, 7.0);

        $r10 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        $r11 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = d0 - 22.0;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d4, 11.0);

        $r12 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        interfaceinvoke $r12.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        return;
    }

    private void drawRect(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        net.sourceforge.plantuml.ugraphic.URectangle $r0;
        double d0, d1;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.svek.PackageStyle r3;

        r3 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        z0 := @parameter3: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(3.0);

     label1:
        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        return;
    }

    private void drawCloud(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        net.sourceforge.plantuml.svek.PackageStyle r0;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.UPath r1;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;

        r0 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        z0 := @parameter3: boolean;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.ugraphic.UPath getSpecificFrontierForCloud(double,double)>(d0, d1);

        if z0 == 0 goto label1;

        virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>(3.0);

     label1:
        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(3.0, -3.0);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r1);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getSpecificFrontierForCloud(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, d67, d68;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19;
        net.sourceforge.plantuml.svek.PackageStyle r2;

        r2 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 10.0);

        d67 = 0.0;

        i16 = 0;

     label1:
        $d2 = (double) i16;

        $d1 = d0 - 9.0;

        $b0 = $d2 cmpg $d1;

        if $b0 >= 0 goto label2;

        $d63 = (double) i16;

        $i10 = 2 + i16;

        $d62 = (double) $i10;

        $i11 = 5 + i16;

        $d61 = (double) $i11;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d63, 7.0, $d62, 5.0, $d61, 5.0);

        $i12 = 8 + i16;

        $d66 = (double) $i12;

        $i13 = 10 + i16;

        $d65 = (double) $i13;

        $i14 = 10 + i16;

        $d64 = (double) $i14;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d66, 5.0, $d65, 7.0, $d64, 10.0);

        $i15 = i16 + 10;

        d67 = (double) $i15;

        i16 = i16 + 10;

        goto label1;

     label2:
        d68 = 0.0;

        i17 = 10;

     label3:
        $d5 = (double) i17;

        $d4 = d3 - 9.0;

        $b1 = $d5 cmpg $d4;

        if $b1 >= 0 goto label4;

        $d55 = d67 + 3.0;

        $d54 = (double) i17;

        $d53 = d67 + 5.0;

        $i4 = 2 + i17;

        $d52 = (double) $i4;

        $d51 = d67 + 5.0;

        $i5 = 5 + i17;

        $d50 = (double) $i5;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d55, $d54, $d53, $d52, $d51, $d50);

        $d60 = d67 + 5.0;

        $i6 = 8 + i17;

        $d59 = (double) $i6;

        $d58 = d67 + 3.0;

        $i7 = 10 + i17;

        $d57 = (double) $i7;

        $i8 = 10 + i17;

        $d56 = (double) $i8;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d60, $d59, $d58, $d57, d67, $d56);

        $i9 = i17 + 10;

        d68 = (double) $i9;

        i17 = i17 + 10;

        goto label3;

     label4:
        i18 = 0;

     label5:
        $d7 = (double) i18;

        $d6 = d0 - 9.0;

        $b2 = $d7 cmpg $d6;

        if $b2 >= 0 goto label6;

        $d28 = (double) i18;

        $d38 = d67 - $d28;

        $d37 = d68 + 3.0;

        $d30 = d67 - 3.0;

        $d29 = (double) i18;

        $d36 = $d30 - $d29;

        $d35 = d68 + 5.0;

        $d32 = d67 - 5.0;

        $d31 = (double) i18;

        $d34 = $d32 - $d31;

        $d33 = d68 + 5.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d38, $d37, $d36, $d35, $d34, $d33);

        $d40 = d67 - 8.0;

        $d39 = (double) i18;

        $d49 = $d40 - $d39;

        $d48 = d68 + 5.0;

        $d42 = d67 - 10.0;

        $d41 = (double) i18;

        $d47 = $d42 - $d41;

        $d46 = d68 + 3.0;

        $d44 = d67 - 10.0;

        $d43 = (double) i18;

        $d45 = $d44 - $d43;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d49, $d48, $d47, $d46, $d45, d68);

        i18 = i18 + 10;

        goto label5;

     label6:
        i19 = 0;

     label7:
        $d10 = (double) i19;

        $d8 = d3 - 9.0;

        $d9 = $d8 - 10.0;

        $b3 = $d10 cmpg $d9;

        if $b3 >= 0 goto label8;

        $d11 = (double) i19;

        $d18 = d68 - $d11;

        $d13 = d68 - 2.0;

        $d12 = (double) i19;

        $d17 = $d13 - $d12;

        $d15 = d68 - 5.0;

        $d14 = (double) i19;

        $d16 = $d15 - $d14;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(-3.0, $d18, -5.0, $d17, -5.0, $d16);

        $d20 = d68 - 8.0;

        $d19 = (double) i19;

        $d27 = $d20 - $d19;

        $d22 = d68 - 10.0;

        $d21 = (double) i19;

        $d26 = $d22 - $d21;

        $d24 = d68 - 10.0;

        $d23 = (double) i19;

        $d25 = $d24 - $d23;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(-5.0, $d27, -3.0, $d26, 0.0, $d25);

        i19 = i19 + 10;

        goto label7;

     label8:
        return $r0;
    }

    private void drawFrame(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, net.sourceforge.plantuml.awt.geom.Dimension2D, boolean)
    {
        net.sourceforge.plantuml.ugraphic.URectangle $r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        byte $b0, b1;
        net.sourceforge.plantuml.ugraphic.UPath $r4;
        net.sourceforge.plantuml.svek.PackageStyle r6;

        r6 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r3 := @parameter3: net.sourceforge.plantuml.awt.geom.Dimension2D;

        z0 := @parameter4: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d0, d1);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.URectangle: void setDeltaShadow(double)>(3.0);

     label1:
        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label2;

        d9 = d0 / 3.0;

        d10 = 12.0;

        b1 = 7;

        goto label3;

     label2:
        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d9 = $d3 + 10.0;

        $d4 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d10 = $d4 + 3.0;

        b1 = 10;

     label3:
        $r4 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(d9, 1.0);

        $d5 = (double) b1;

        $d6 = d10 - $d5;

        virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d9, $d6);

        $d7 = (double) b1;

        $d8 = d9 - $d7;

        virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d8, d10);

        virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, d10);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        return;
    }

    private void drawFolder(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        double d0, $d1, d2, $d5, d6, $d7;
        net.sourceforge.plantuml.ugraphic.UPolygon $r0;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.ULine $r5;
        net.sourceforge.plantuml.svek.PackageStyle r6;

        r6 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d6 := @parameter2: double;

        z0 := @parameter3: boolean;

        $d1 = d0 / 4.0;

        d2 = staticinvoke <java.lang.Math: double max(double,double)>(30.0, $d1);

        $r0 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d2, 0.0);

        $d5 = d2 + 7.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d5, 10.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d0, 10.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d0, d6);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, d6);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void setDeltaShadow(double)>(3.0);

     label1:
        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(10.0);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $d7 = d2 + 7.0;

        $r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d7);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        return;
    }

    private void drawDatabase(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, boolean)
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0, $r3;
        boolean z0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.svek.PackageStyle r5;

        r5 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d7 := @parameter2: double;

        z0 := @parameter3: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>(3.0);

     label1:
        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 10.0);

        $d1 = d0 / 2.0;

        $d3 = $d1 - 10.0;

        $d2 = d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(10.0, 0.0, $d3, 0.0, $d2, 0.0);

        $d4 = d0 / 2.0;

        $d6 = $d4 + 10.0;

        $d5 = d0 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d6, 0.0, $d5, 0.0, d0, 10.0);

        $d8 = d7 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(d0, $d8);

        $d12 = d0 - 10.0;

        $d9 = d0 / 2.0;

        $d11 = $d9 - 10.0;

        $d10 = d0 / 2.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d12, d7, $d11, d7, $d10, d7);

        $d13 = d0 / 2.0;

        $d15 = $d13 + 10.0;

        $d14 = d7 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d15, d7, 10.0, d7, 0.0, $d14);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>(0.0, 10.0);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r3 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 10.0);

        $d16 = d0 / 2.0;

        $d18 = $d16 - 10.0;

        $d17 = d0 / 2.0;

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>(10.0, 20.0, $d18, 20.0, $d17, 20.0);

        $d19 = d0 / 2.0;

        $d21 = $d19 + 10.0;

        $d20 = d0 - 10.0;

        virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(double,double,double,double,double,double)>($d21, 20.0, $d20, 20.0, d0, 10.0);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r3);

        return;
    }

    private void drawNode(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double, double, boolean)
    {
        net.sourceforge.plantuml.ugraphic.UPolygon $r0;
        double d0, d1, $d2, $d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        boolean z0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4, $r6, $r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3, $r5, $r10;
        net.sourceforge.plantuml.ugraphic.ULine $r7;
        net.sourceforge.plantuml.ugraphic.UPath $r8;
        net.sourceforge.plantuml.svek.PackageStyle r12;

        r12 := @this: net.sourceforge.plantuml.svek.PackageStyle;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d4 := @parameter1: double;

        d5 := @parameter2: double;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        z0 := @parameter5: boolean;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 10.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(10.0, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d0, 0.0);

        $d2 = d1 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(d0, $d2);

        $d3 = d0 - 10.0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d3, d1);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, d1);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 10.0);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void setDeltaShadow(double)>(2.0);

     label1:
        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d4, d5);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d6 = d4 + d0;

        $d8 = $d6 - 10.0;

        $d7 = d5 + 10.0;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d8, $d7);

        $r6 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r7 = new net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(9.0, -9.0);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r7);

        $r8 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(0.0, 0.0);

        $d9 = d0 - 10.0;

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d9, 0.0);

        $d11 = d0 - 10.0;

        $d10 = d1 - 10.0;

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d11, $d10);

        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d12 = d5 + 10.0;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d4, $d12);

        $r11 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        interfaceinvoke $r11.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        return;
    }

    private static net.sourceforge.plantuml.svek.PackageStyle[] $values()
    {
        net.sourceforge.plantuml.svek.PackageStyle[] $r0;
        net.sourceforge.plantuml.svek.PackageStyle $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = newarray (net.sourceforge.plantuml.svek.PackageStyle)[12];

        $r1 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FOLDER>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle RECTANGLE>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle NODE>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FRAME>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle CLOUD>;

        $r0[4] = $r5;

        $r6 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle DATABASE>;

        $r0[5] = $r6;

        $r7 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle AGENT>;

        $r0[6] = $r7;

        $r8 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle STORAGE>;

        $r0[7] = $r8;

        $r9 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle COMPONENT1>;

        $r0[8] = $r9;

        $r10 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle COMPONENT2>;

        $r0[9] = $r10;

        $r11 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle ARTIFACT>;

        $r0[10] = $r11;

        $r12 = <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle CARD>;

        $r0[11] = $r12;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.svek.PackageStyle $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        net.sourceforge.plantuml.svek.PackageStyle[] $r12;

        $r0 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("FOLDER", 0);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FOLDER> = $r0;

        $r1 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r1.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("RECTANGLE", 1);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle RECTANGLE> = $r1;

        $r2 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r2.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("NODE", 2);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle NODE> = $r2;

        $r3 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r3.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("FRAME", 3);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle FRAME> = $r3;

        $r4 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r4.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("CLOUD", 4);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle CLOUD> = $r4;

        $r5 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r5.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("DATABASE", 5);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle DATABASE> = $r5;

        $r6 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r6.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("AGENT", 6);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle AGENT> = $r6;

        $r7 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r7.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("STORAGE", 7);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle STORAGE> = $r7;

        $r8 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r8.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("COMPONENT1", 8);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle COMPONENT1> = $r8;

        $r9 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r9.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("COMPONENT2", 9);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle COMPONENT2> = $r9;

        $r10 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r10.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("ARTIFACT", 10);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle ARTIFACT> = $r10;

        $r11 = new net.sourceforge.plantuml.svek.PackageStyle;

        specialinvoke $r11.<net.sourceforge.plantuml.svek.PackageStyle: void <init>(java.lang.String,int)>("CARD", 11);

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle CARD> = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle[] $values()>();

        <net.sourceforge.plantuml.svek.PackageStyle: net.sourceforge.plantuml.svek.PackageStyle[] $VALUES> = $r12;

        return;
    }
}
