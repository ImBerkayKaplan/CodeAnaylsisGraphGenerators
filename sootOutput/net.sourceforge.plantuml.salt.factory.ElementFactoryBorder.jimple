public class net.sourceforge.plantuml.salt.factory.ElementFactoryBorder extends net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex
{
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.salt.DataSource, net.sourceforge.plantuml.salt.Dictionary)
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryBorder r0;
        net.sourceforge.plantuml.salt.DataSource r1;
        net.sourceforge.plantuml.salt.Dictionary r2;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryBorder;

        r1 := @parameter0: net.sourceforge.plantuml.salt.DataSource;

        r2 := @parameter1: net.sourceforge.plantuml.salt.Dictionary;

        specialinvoke r0.<net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex: void <init>(net.sourceforge.plantuml.salt.DataSource,net.sourceforge.plantuml.salt.Dictionary)>(r1, r2);

        return;
    }

    public net.sourceforge.plantuml.salt.Terminated create()
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryBorder r0;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.salt.DataSource $r1, $r8, $r12, $r34;
        java.lang.Object $r2, $r4, $r9, $r13, $r15, $r17, $r20, $r23, $r26, $r29, $r36;
        net.sourceforge.plantuml.salt.Terminated $r3, $r10, $r14, $r16, $r19, $r22, $r25, $r28, $r35, r39;
        java.lang.String r5, $r37, r38;
        net.sourceforge.plantuml.salt.element.ElementBorder $r6;
        net.sourceforge.plantuml.salt.Terminator $r11;
        char $c0;
        net.sourceforge.plantuml.salt.element.Element $r18, $r21, $r24, $r27, $r30;
        java.lang.IllegalStateException $r31, $r33;
        java.lang.AssertionError $r32;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryBorder;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: boolean ready()>();

        if $z0 != 0 goto label01;

        $r33 = new java.lang.IllegalStateException;

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>()>();

        throw $r33;

     label01:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.salt.DataSource: java.lang.Object next()>();

        $r3 = (net.sourceforge.plantuml.salt.Terminated) $r2;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r5 = (java.lang.String) $r4;

        $z1 = <net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("{");

        if $z2 != 0 goto label02;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label02:
        $r6 = new net.sourceforge.plantuml.salt.element.ElementBorder;

        specialinvoke $r6.<net.sourceforge.plantuml.salt.element.ElementBorder: void <init>()>();

     label03:
        $r34 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r35 = interfaceinvoke $r34.<net.sourceforge.plantuml.salt.DataSource: net.sourceforge.plantuml.salt.Terminated peek(int)>(0);

        $r36 = virtualinvoke $r35.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r37 = (java.lang.String) $r36;

        $z3 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>("}");

        if $z3 != 0 goto label11;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.salt.DataSource: java.lang.Object next()>();

        $r14 = (net.sourceforge.plantuml.salt.Terminated) $r13;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r38 = (java.lang.String) $r15;

        $c0 = virtualinvoke r38.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c0)
        {
            case 67: goto label08;
            case 69: goto label06;
            case 78: goto label04;
            case 83: goto label05;
            case 87: goto label07;
            default: goto label09;
        };

     label04:
        $r22 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.Terminated getNextElement()>();

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r24 = (net.sourceforge.plantuml.salt.element.Element) $r23;

        virtualinvoke $r6.<net.sourceforge.plantuml.salt.element.ElementBorder: void setNorth(net.sourceforge.plantuml.salt.element.Element)>($r24);

        goto label10;

     label05:
        $r19 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.Terminated getNextElement()>();

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r21 = (net.sourceforge.plantuml.salt.element.Element) $r20;

        virtualinvoke $r6.<net.sourceforge.plantuml.salt.element.ElementBorder: void setSouth(net.sourceforge.plantuml.salt.element.Element)>($r21);

        goto label10;

     label06:
        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.Terminated getNextElement()>();

        $r26 = virtualinvoke $r25.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r27 = (net.sourceforge.plantuml.salt.element.Element) $r26;

        virtualinvoke $r6.<net.sourceforge.plantuml.salt.element.ElementBorder: void setEast(net.sourceforge.plantuml.salt.element.Element)>($r27);

        goto label10;

     label07:
        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.Terminated getNextElement()>();

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r18 = (net.sourceforge.plantuml.salt.element.Element) $r17;

        virtualinvoke $r6.<net.sourceforge.plantuml.salt.element.ElementBorder: void setWest(net.sourceforge.plantuml.salt.element.Element)>($r18);

        goto label10;

     label08:
        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.Terminated getNextElement()>();

        $r29 = virtualinvoke $r28.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        $r30 = (net.sourceforge.plantuml.salt.element.Element) $r29;

        virtualinvoke $r6.<net.sourceforge.plantuml.salt.element.ElementBorder: void setCenter(net.sourceforge.plantuml.salt.element.Element)>($r30);

        goto label10;

     label09:
        $r31 = new java.lang.IllegalStateException;

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>()>();

        throw $r31;

     label10:
        goto label03;

     label11:
        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.salt.DataSource: java.lang.Object next()>();

        r39 = (net.sourceforge.plantuml.salt.Terminated) $r9;

        $r10 = new net.sourceforge.plantuml.salt.Terminated;

        $r11 = virtualinvoke r39.<net.sourceforge.plantuml.salt.Terminated: net.sourceforge.plantuml.salt.Terminator getTerminator()>();

        specialinvoke $r10.<net.sourceforge.plantuml.salt.Terminated: void <init>(java.lang.Object,net.sourceforge.plantuml.salt.Terminator)>($r6, $r11);

        return $r10;
    }

    public boolean ready()
    {
        net.sourceforge.plantuml.salt.factory.ElementFactoryBorder r0;
        net.sourceforge.plantuml.salt.DataSource $r1, $r6;
        net.sourceforge.plantuml.salt.Terminated $r2, $r7;
        java.lang.Object $r3, $r8;
        java.lang.String r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: net.sourceforge.plantuml.salt.factory.ElementFactoryBorder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.salt.DataSource: net.sourceforge.plantuml.salt.Terminated peek(int)>(0);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{+");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{#");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{!");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("{-");

        if $z4 == 0 goto label3;

     label1:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: net.sourceforge.plantuml.salt.DataSource getDataSource()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.salt.DataSource: net.sourceforge.plantuml.salt.Terminated peek(int)>(1);

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.salt.Terminated: java.lang.Object getElement()>();

        r5 = (java.lang.String) $r8;

        $z5 = virtualinvoke r5.<java.lang.String: boolean matches(java.lang.String)>("[NSEW]=");

        if $z5 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/salt/factory/ElementFactoryBorder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.salt.factory.ElementFactoryBorder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
