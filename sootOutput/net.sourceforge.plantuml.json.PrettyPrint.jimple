public class net.sourceforge.plantuml.json.PrettyPrint extends net.sourceforge.plantuml.json.WriterConfig
{
    private final char[] indentChars;

    protected void <init>(char[])
    {
        net.sourceforge.plantuml.json.PrettyPrint r0;
        char[] r1;

        r0 := @this: net.sourceforge.plantuml.json.PrettyPrint;

        r1 := @parameter0: char[];

        specialinvoke r0.<net.sourceforge.plantuml.json.WriterConfig: void <init>()>();

        r0.<net.sourceforge.plantuml.json.PrettyPrint: char[] indentChars> = r1;

        return;
    }

    public static net.sourceforge.plantuml.json.PrettyPrint singleLine()
    {
        net.sourceforge.plantuml.json.PrettyPrint $r0;

        $r0 = new net.sourceforge.plantuml.json.PrettyPrint;

        specialinvoke $r0.<net.sourceforge.plantuml.json.PrettyPrint: void <init>(char[])>(null);

        return $r0;
    }

    public static net.sourceforge.plantuml.json.PrettyPrint indentWithSpaces(int)
    {
        int i0;
        char[] r0;
        net.sourceforge.plantuml.json.PrettyPrint $r1;
        java.lang.IllegalArgumentException $r2;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("number is negative");

        throw $r2;

     label1:
        r0 = newarray (char)[i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r0, 32);

        $r1 = new net.sourceforge.plantuml.json.PrettyPrint;

        specialinvoke $r1.<net.sourceforge.plantuml.json.PrettyPrint: void <init>(char[])>(r0);

        return $r1;
    }

    public static net.sourceforge.plantuml.json.PrettyPrint indentWithTabs()
    {
        net.sourceforge.plantuml.json.PrettyPrint $r0;
        char[] $r1;

        $r0 = new net.sourceforge.plantuml.json.PrettyPrint;

        $r1 = newarray (char)[1];

        $r1[0] = 9;

        specialinvoke $r0.<net.sourceforge.plantuml.json.PrettyPrint: void <init>(char[])>($r1);

        return $r0;
    }

    protected net.sourceforge.plantuml.json.JsonWriter createWriter(java.io.Writer)
    {
        net.sourceforge.plantuml.json.PrettyPrint$PrettyPrintWriter $r0;
        java.io.Writer r1;
        net.sourceforge.plantuml.json.PrettyPrint r2;
        char[] $r3;

        r2 := @this: net.sourceforge.plantuml.json.PrettyPrint;

        r1 := @parameter0: java.io.Writer;

        $r0 = new net.sourceforge.plantuml.json.PrettyPrint$PrettyPrintWriter;

        $r3 = r2.<net.sourceforge.plantuml.json.PrettyPrint: char[] indentChars>;

        specialinvoke $r0.<net.sourceforge.plantuml.json.PrettyPrint$PrettyPrintWriter: void <init>(java.io.Writer,char[],net.sourceforge.plantuml.json.PrettyPrint$1)>(r1, $r3, null);

        return $r0;
    }
}
