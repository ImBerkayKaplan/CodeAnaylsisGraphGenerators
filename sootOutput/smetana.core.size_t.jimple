public class smetana.core.size_t extends java.lang.Object
{
    public final java.lang.Class tobeAllocated;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        smetana.core.size_t r1;
        java.lang.String $r2, $r7;
        java.lang.Class $r5;

        r1 := @this: smetana.core.size_t;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<smetana.core.size_t: java.lang.Class tobeAllocated>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public void <init>(java.lang.Class)
    {
        smetana.core.size_t r0;
        java.lang.Class r1;

        r0 := @this: smetana.core.size_t;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<smetana.core.size_t: java.lang.Class tobeAllocated> = r1;

        return;
    }

    public smetana.core.size_t negate()
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.size_t r1;

        r1 := @this: smetana.core.size_t;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public smetana.core.size_t multiply(int)
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.size_t r1;
        int i0;

        r1 := @this: smetana.core.size_t;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean isStrictPositive()
    {
        smetana.core.size_t r0;

        r0 := @this: smetana.core.size_t;

        return 1;
    }

    public boolean isStrictNegative()
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.size_t r1;

        r1 := @this: smetana.core.size_t;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final java.lang.Class getTobeAllocated()
    {
        smetana.core.size_t r0;
        java.lang.Class $r1;

        r0 := @this: smetana.core.size_t;

        $r1 = r0.<smetana.core.size_t: java.lang.Class tobeAllocated>;

        return $r1;
    }

    public smetana.core.__ptr__ malloc()
    {
        smetana.core.size_t r0;
        java.lang.Class $r1, $r3;
        java.lang.UnsupportedOperationException $r2;
        smetana.core.__ptr__ $r4;

        r0 := @this: smetana.core.size_t;

        $r1 = r0.<smetana.core.size_t: java.lang.Class tobeAllocated>;

        if $r1 == null goto label1;

        $r3 = r0.<smetana.core.size_t: java.lang.Class tobeAllocated>;

        $r4 = staticinvoke <smetana.core.Memory: smetana.core.__ptr__ malloc(java.lang.Class)>($r3);

        return $r4;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public smetana.core.size_t plus(int)
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.size_t r1;
        int i0;

        r1 := @this: smetana.core.size_t;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean isZero()
    {
        smetana.core.size_t r0;

        r0 := @this: smetana.core.size_t;

        return 0;
    }

    public smetana.core.__ptr__ realloc(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.size_t r1;
        java.lang.Object r2;

        r1 := @this: smetana.core.size_t;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int getInternalNb()
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.size_t r1;

        r1 := @this: smetana.core.size_t;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
