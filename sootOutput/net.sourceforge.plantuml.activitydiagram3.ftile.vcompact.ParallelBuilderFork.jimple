public class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork extends net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder
{
    private final java.lang.String label;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane in;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane out;

    public void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.graphic.StringBounder, java.lang.String, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, java.util.List)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        java.util.List r3;
        java.lang.String r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r5, r6;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r6 := @parameter4: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r3 := @parameter5: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.StringBounder,java.util.List)>(r1, r2, r3);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: java.lang.String label> = r4;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane in> = r5;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane out> = r6;

        return;
    }

    protected java.util.List getFoo2(java.util.List)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        java.util.List r1;
        double d0, d1, d2;
        net.sourceforge.plantuml.graphic.StringBounder $r2, $r3;
        java.util.ArrayList $r4;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.Object $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r8, r9;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r1 := @parameter0: java.util.List;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double computeMaxHeight(java.util.List)>(r1);

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d1 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double getSuppSpace1(java.util.List,net.sourceforge.plantuml.graphic.StringBounder)>(r1, $r2);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double getSuppSpace2(java.util.List,net.sourceforge.plantuml.graphic.StringBounder)>(r1, $r3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r7;

        r9 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile computeNewFtile(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double,double,double)>(r8, d0, d1, d2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label1;

     label2:
        return $r4;
    }

    private net.sourceforge.plantuml.activitydiagram3.ftile.Ftile computeNewFtile(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, double, double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0, r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r1;
        double $d2, $d3, d4, $d5, d6, d7;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedCentered $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedMarged $r3;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        d4 := @parameter1: double;

        d6 := @parameter2: double;

        d7 := @parameter3: double;

        $d2 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double getSuppForIncomingArrow(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r0);

        $d3 = 14.0 + $d2;

        r4 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.FtileUtils: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile addHorizontalMargin(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double,double)>(r0, 14.0, $d3);

        $r2 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedCentered;

        $d5 = d4 + 40.0;

        specialinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedCentered: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double)>(r4, $d5);

        $r3 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedMarged;

        specialinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedMarged: void <init>(double,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double)>(d6, $r2, d7);

        return $r3;
    }

    private double getSuppForIncomingArrow(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering $r2, $r4;
        net.sourceforge.plantuml.cucadiagram.Display $r3, $r5;
        double d0, d1, $d2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getInLinkRendering()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        d0 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double getXSuppForDisplay(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.cucadiagram.Display)>(r1, $r3);

        $r4 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getOutLinkRendering()>();

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        d1 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double getXSuppForDisplay(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.cucadiagram.Display)>(r1, $r5);

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        return $d2;
    }

    private double getXSuppForDisplay(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        net.sourceforge.plantuml.cucadiagram.Display r1;
        net.sourceforge.plantuml.graphic.TextBlock r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3, $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r4;
        double d0, $d1, d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r7;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r5 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.Display;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.cucadiagram.Display)>(r1);

        if r2 != null goto label1;

        return 0.0;

     label1:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        d0 = virtualinvoke $r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r7 = interfaceinvoke r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d2 = $d1 + d0;

        $d3 = virtualinvoke r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $b0 = d2 cmpl $d3;

        if $b0 <= 0 goto label2;

        $d4 = virtualinvoke r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        $d5 = d2 - $d4;

        return $d5;

     label2:
        return 0.0;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlaneOutForStep2()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane out>;

        return $r1;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.Ftile doStep1(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0, r20, r33;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r10, $r23, $r27, $r29;
        net.sourceforge.plantuml.style.StyleBuilder $r7;
        net.sourceforge.plantuml.style.Style r8;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock $r9, $r15;
        net.sourceforge.plantuml.ugraphic.color.HColor $r11;
        java.util.List $r13;
        java.util.Iterator r14;
        boolean $z0, $z1;
        net.sourceforge.plantuml.graphic.StringBounder $r16, $r21;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r17, r22;
        double $d0, $d1, d2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple $r18;
        java.lang.Object $r19;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering $r24;
        net.sourceforge.plantuml.graphic.Rainbow r25, r32;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork$ConnectionIn $r26;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r28;
        net.sourceforge.plantuml.api.ThemeStyle $r30;

        r3 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r4 = r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane in>;

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r6 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r8 = virtualinvoke $r5.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r7);

        $r9 = new net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock;

        $r10 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r11 = specialinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ugraphic.color.HColor barColor()>();

        specialinvoke $r9.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>($r10, $r11, r4);

        d2 = 0.0;

        $r13 = r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: java.util.List list99>;

        r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r19 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r20 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r19;

        $r21 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r22 = interfaceinvoke r20.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r21);

        $z1 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z1 == 0 goto label2;

        $r27 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r28 = interfaceinvoke $r27.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r29 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r30 = interfaceinvoke $r29.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r32 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r8, $r28, $r30);

        goto label3;

     label2:
        $r23 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        r32 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.ISkinParam)>($r23);

     label3:
        $r24 = interfaceinvoke r20.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getInLinkRendering()>();

        r25 = virtualinvoke $r24.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>(r32);

        $r26 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork$ConnectionIn;

        specialinvoke $r26.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork$ConnectionIn: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double,net.sourceforge.plantuml.graphic.Rainbow)>(r3, $r9, r20, d2, r25);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r26);

        $d1 = virtualinvoke r22.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d2 = d2 + $d1;

        goto label1;

     label4:
        r33 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.FtileUtils: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile addConnection(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,java.util.Collection)>(r0, $r1);

        $r15 = (net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock) $r9;

        $r16 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r17 = interfaceinvoke r33.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r16);

        $d0 = virtualinvoke $r17.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        virtualinvoke $r15.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock: void setBlackBlockDimension(double,double)>($d0, 6.0);

        $r18 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple;

        specialinvoke $r18.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>($r9, r33);

        return $r18;
    }

    private double getSuppSpace1(java.util.List, net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.util.List r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r4;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering $r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6;
        net.sourceforge.plantuml.graphic.TextBlock r7;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        net.sourceforge.plantuml.awt.geom.Dimension2D r9;
        double $d0, d1;
        boolean $z0;

        r4 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r0 := @parameter0: java.util.List;

        r8 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r2;

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getInLinkRendering()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        r7 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.cucadiagram.Display)>($r6);

        if r7 != null goto label2;

        goto label1;

     label2:
        r9 = interfaceinvoke r7.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r8);

        $d0 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label3:
        return d1;
    }

    private double getSuppSpace2(java.util.List, net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.util.List r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r4;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering $r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6;
        net.sourceforge.plantuml.graphic.TextBlock r7;
        net.sourceforge.plantuml.graphic.StringBounder r8;
        net.sourceforge.plantuml.awt.geom.Dimension2D r9;
        double $d0, d1;
        boolean $z0;

        r4 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r0 := @parameter0: java.util.List;

        r8 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r2;

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getOutLinkRendering()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        r7 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.cucadiagram.Display)>($r6);

        if r7 != null goto label2;

        goto label1;

     label2:
        r9 = interfaceinvoke r7.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r8);

        $d0 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label3:
        return d1;
    }

    private double getJustBeforeBar2(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double getHeightOfMiddle(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r1);

        $d1 = 6.0 + $d0;

        return $d1;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.Ftile doStep2(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock $r2, $r6, $r36;
        net.sourceforge.plantuml.ISkinParam $r3, $r14, $r23, $r31, $r33;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;
        net.sourceforge.plantuml.graphic.StringBounder $r7, $r21, $r26, $r30;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r8, r22, $r27;
        double $d0, $d1, $d2, d3;
        java.lang.String $r9, $r35;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple $r10;
        java.util.ArrayList $r11;
        net.sourceforge.plantuml.style.StyleSignature $r13;
        net.sourceforge.plantuml.style.StyleBuilder $r15;
        net.sourceforge.plantuml.style.Style r16;
        java.util.List $r17;
        java.util.Iterator r18;
        java.lang.Object $r19;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r20, r29, r39, r42;
        boolean $z0, $z1, $z3;
        net.sourceforge.plantuml.activitydiagram3.LinkRendering $r24;
        net.sourceforge.plantuml.graphic.Rainbow r25, r41;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork$ConnectionOut $r28;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r32;
        net.sourceforge.plantuml.api.ThemeStyle $r34;
        net.sourceforge.plantuml.cucadiagram.Display $r37;
        net.sourceforge.plantuml.graphic.TextBlock $r38;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        r29 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r39 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane out>;

        $r2 = new net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ugraphic.color.HColor barColor()>();

        specialinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>($r3, $r4, r1);

        $r6 = (net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock) $r2;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r8 = interfaceinvoke r39.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r7);

        $d0 = virtualinvoke $r8.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getWidth()>();

        virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock: void setBlackBlockDimension(double,double)>($d0, 6.0);

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: java.lang.String label>;

        if $r9 == null goto label1;

        $r36 = (net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock) $r2;

        $r35 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: java.lang.String label>;

        $r37 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>($r35);

        $r38 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.cucadiagram.Display)>($r37);

        virtualinvoke $r36.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock: void setLabel(net.sourceforge.plantuml.graphic.TextBlock)>($r38);

     label1:
        $r10 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple;

        specialinvoke $r10.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r39, $r2);

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.style.StyleSignature getStyleSignatureArrow()>();

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r16 = virtualinvoke $r13.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r15);

        d3 = 0.0;

        $r17 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: java.util.List list99>;

        r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r19 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r20 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r19;

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r22 = interfaceinvoke r20.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r21);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label3;

        $r31 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r32 = interfaceinvoke $r31.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r33 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r34 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r41 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.style.Style,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r16, $r32, $r34);

        goto label4;

     label3:
        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        r41 = staticinvoke <net.sourceforge.plantuml.graphic.Rainbow: net.sourceforge.plantuml.graphic.Rainbow build(net.sourceforge.plantuml.ISkinParam)>($r23);

     label4:
        $r24 = interfaceinvoke r20.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.LinkRendering getOutLinkRendering()>();

        r25 = virtualinvoke $r24.<net.sourceforge.plantuml.activitydiagram3.LinkRendering: net.sourceforge.plantuml.graphic.Rainbow getRainbow(net.sourceforge.plantuml.graphic.Rainbow)>(r41);

        $r26 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r27 = interfaceinvoke r20.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r26);

        $z1 = virtualinvoke $r27.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z1 == 0 goto label5;

        $r28 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork$ConnectionOut;

        $r30 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: double getJustBeforeBar2(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.graphic.StringBounder)>(r29, $r30);

        specialinvoke $r28.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork$ConnectionOut: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,double,net.sourceforge.plantuml.graphic.Rainbow,double)>(r0, r20, $r2, d3, r25, $d2);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r28);

     label5:
        $d1 = virtualinvoke r22.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d3 = d3 + $d1;

        goto label2;

     label6:
        r42 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.FtileUtils: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile addConnection(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,java.util.Collection)>($r10, $r11);

        return r42;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor barColor()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.ColorParam $r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.skin.rose.Rose getRose()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r3 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam activityBar>;

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>($r2, $r3);

        return $r4;
    }
}
