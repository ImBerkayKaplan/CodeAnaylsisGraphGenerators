public class net.sourceforge.plantuml.graphic.CircledCharacter extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private final java.lang.String c;
    private final net.sourceforge.plantuml.ugraphic.UFont font;
    private final net.sourceforge.plantuml.ugraphic.color.HColor spotBackColor;
    private final net.sourceforge.plantuml.ugraphic.color.HColor spotBorder;
    private final net.sourceforge.plantuml.ugraphic.color.HColor fontColor;
    private final double radius;

    public void <init>(char, double, net.sourceforge.plantuml.ugraphic.UFont, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.graphic.CircledCharacter r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        char c0;
        java.lang.String $r4;
        double d0;
        net.sourceforge.plantuml.ugraphic.UFont r5;
        net.sourceforge.plantuml.ugraphic.color.HColor r6, r7, r8, $r10;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.color.HColorAutomatic $r9;

        r0 := @this: net.sourceforge.plantuml.graphic.CircledCharacter;

        c0 := @parameter0: char;

        d0 := @parameter1: double;

        r5 := @parameter2: net.sourceforge.plantuml.ugraphic.UFont;

        r6 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        r7 := @parameter4: net.sourceforge.plantuml.ugraphic.color.HColor;

        r8 := @parameter5: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<net.sourceforge.plantuml.graphic.CircledCharacter: java.lang.String c> = $r4;

        r0.<net.sourceforge.plantuml.graphic.CircledCharacter: double radius> = d0;

        r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.UFont font> = r5;

        r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor spotBackColor> = r6;

        r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor spotBorder> = r7;

        $z0 = r8 instanceof net.sourceforge.plantuml.ugraphic.color.HColorAutomatic;

        if $z0 == 0 goto label1;

        $r9 = (net.sourceforge.plantuml.ugraphic.color.HColorAutomatic) r8;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.color.HColorAutomatic: net.sourceforge.plantuml.ugraphic.color.HColor getAppropriateColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r6);

        r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor fontColor> = $r10;

        goto label2;

     label1:
        r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor fontColor> = r8;

     label2:
        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.CircledCharacter r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, $r2, $r5, $r10;
        net.sourceforge.plantuml.ugraphic.UBackground $r3;
        net.sourceforge.plantuml.ugraphic.UEllipse $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;
        net.sourceforge.plantuml.ugraphic.UCenteredCharacter $r7;
        java.lang.String $r8;
        char $c0;
        net.sourceforge.plantuml.ugraphic.UFont $r9;
        net.sourceforge.plantuml.ugraphic.UGraphic r11, r12, r13, r14;

        r0 := @this: net.sourceforge.plantuml.graphic.CircledCharacter;

        r11 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor spotBorder>;

        if $r1 == null goto label1;

        $r10 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor spotBorder>;

        r11 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

     label1:
        $r2 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor spotBackColor>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r12 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r4 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: double radius>;

        $d3 = $d0 * 2.0;

        $d1 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: double radius>;

        $d2 = $d1 * 2.0;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d3, $d2);

        interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r4);

        $r5 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.color.HColor fontColor>;

        r13 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r6 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d5 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: double radius>;

        $d4 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: double radius>;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d5, $d4);

        r14 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r7 = new net.sourceforge.plantuml.ugraphic.UCenteredCharacter;

        $r8 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: java.lang.String c>;

        $c0 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(0);

        $r9 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: net.sourceforge.plantuml.ugraphic.UFont font>;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UCenteredCharacter: void <init>(char,net.sourceforge.plantuml.ugraphic.UFont)>($c0, $r9);

        interfaceinvoke r14.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r7);

        return;
    }

    public final double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.CircledCharacter r0;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.graphic.CircledCharacter;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: double radius>;

        $d1 = 2.0 * $d0;

        return $d1;
    }

    public final double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.CircledCharacter r0;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.graphic.CircledCharacter;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = r0.<net.sourceforge.plantuml.graphic.CircledCharacter: double radius>;

        $d1 = 2.0 * $d0;

        return $d1;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.graphic.CircledCharacter r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.graphic.CircledCharacter;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.CircledCharacter: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.CircledCharacter: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d1);

        return $r0;
    }
}
