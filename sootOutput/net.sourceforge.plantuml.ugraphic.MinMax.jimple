public class net.sourceforge.plantuml.ugraphic.MinMax extends java.lang.Object
{
    private final double maxX;
    private final double maxY;
    private final double minX;
    private final double minY;

    public boolean doesHorizontalCross(java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        java.awt.geom.Point2D$Double r0, r1;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        net.sourceforge.plantuml.ugraphic.MinMax r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r2 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        r0 := @parameter0: java.awt.geom.Point2D$Double;

        r1 := @parameter1: java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D$Double: double getY()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D$Double: double getY()>();

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $d2 = virtualinvoke r0.<java.awt.geom.Point2D$Double: double getX()>();

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D$Double: double getX()>();

        $b1 = $d2 cmpl $d3;

        if $b1 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        d4 = virtualinvoke r0.<java.awt.geom.Point2D$Double: double getY()>();

        $d5 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $b2 = d4 cmpg $d5;

        if $b2 < 0 goto label3;

        $d6 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $b3 = d4 cmpl $d6;

        if $b3 <= 0 goto label4;

     label3:
        return 0;

     label4:
        $d7 = virtualinvoke r0.<java.awt.geom.Point2D$Double: double getX()>();

        $d8 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $b4 = $d7 cmpg $d8;

        if $b4 >= 0 goto label5;

        $d13 = virtualinvoke r1.<java.awt.geom.Point2D$Double: double getX()>();

        $d14 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $b7 = $d13 cmpl $d14;

        if $b7 <= 0 goto label5;

        return 1;

     label5:
        $d9 = virtualinvoke r1.<java.awt.geom.Point2D$Double: double getX()>();

        $d10 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $b5 = $d9 cmpg $d10;

        if $b5 >= 0 goto label6;

        $d11 = virtualinvoke r0.<java.awt.geom.Point2D$Double: double getX()>();

        $d12 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $b6 = $d11 cmpl $d12;

        if $b6 <= 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    public static net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)
    {
        boolean z0;
        net.sourceforge.plantuml.ugraphic.MinMax $r0, $r1;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = new net.sourceforge.plantuml.ugraphic.MinMax;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 0.0);

        return $r1;

     label1:
        $r0 = new net.sourceforge.plantuml.ugraphic.MinMax;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.MinMax: void <init>(double,double,double,double)>(1.7976931348623157E308, 1.7976931348623157E308, -1.7976931348623157E308, -1.7976931348623157E308);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.ugraphic.MinMax r2;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r11;

        r2 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")->(");

        $d2 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d3 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public static net.sourceforge.plantuml.ugraphic.MinMax fromMutable(net.sourceforge.plantuml.ugraphic.MinMaxMutable)
    {
        net.sourceforge.plantuml.ugraphic.MinMax $r0;
        net.sourceforge.plantuml.ugraphic.MinMaxMutable r1;
        double $d0, $d1, $d2, $d3;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMaxMutable;

        $r0 = new net.sourceforge.plantuml.ugraphic.MinMax;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMinX()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMinY()>();

        $d2 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMaxX()>();

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.MinMaxMutable: double getMaxY()>();

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.MinMax: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r0;
    }

    private void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        double d0, d1, d2, d3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.MinMax: double minX> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.MinMax: double minY> = d1;

        r0.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX> = d2;

        r0.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY> = d3;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z1 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z2 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label3:
        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3);

        if $z3 == 0 goto label4;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label4:
        return;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax addPoint(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0, $r2;
        java.awt.geom.Point2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d0, $d1);

        return $r2;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax addPoint(double, double)
    {
        net.sourceforge.plantuml.ugraphic.MinMax $r0, r1;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r1 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.MinMax;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, $d1);

        $d4 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $d5 = staticinvoke <java.lang.Math: double min(double,double)>(d3, $d4);

        $d6 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $d7 = staticinvoke <java.lang.Math: double max(double,double)>(d0, $d6);

        $d8 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $d9 = staticinvoke <java.lang.Math: double max(double,double)>(d3, $d8);

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.MinMax: void <init>(double,double,double,double)>($d2, $d5, $d7, $d9);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax addMinMax(net.sourceforge.plantuml.ugraphic.MinMax)
    {
        net.sourceforge.plantuml.ugraphic.MinMax $r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r2 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMax;

        $r0 = new net.sourceforge.plantuml.ugraphic.MinMax;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d0);

        $d4 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $d3 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $d5 = staticinvoke <java.lang.Math: double min(double,double)>($d4, $d3);

        $d7 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $d6 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $d8 = staticinvoke <java.lang.Math: double max(double,double)>($d7, $d6);

        $d10 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $d9 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $d11 = staticinvoke <java.lang.Math: double max(double,double)>($d10, $d9);

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.MinMax: void <init>(double,double,double,double)>($d2, $d5, $d8, $d11);

        return $r0;
    }

    public static net.sourceforge.plantuml.ugraphic.MinMax fromMax(double, double)
    {
        net.sourceforge.plantuml.ugraphic.MinMax $r0, $r1;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(1);

        $r1 = virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>(d0, d1);

        return $r1;
    }

    public static net.sourceforge.plantuml.ugraphic.MinMax fromDim(net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0;
        double $d0, $d1;
        net.sourceforge.plantuml.ugraphic.MinMax $r1;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax fromMax(double,double)>($d0, $d1);

        return $r1;
    }

    public final double getMaxX()
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        return $d0;
    }

    public final double getMaxY()
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        return $d0;
    }

    public final double getMinX()
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        return $d0;
    }

    public final double getMinY()
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        return $d0;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.ugraphic.MinMax r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $d0 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $d5 = $d1 - $d0;

        $d3 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $d2 = r1.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $d4 = $d3 - $d2;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d5, $d4);

        return $r0;
    }

    public void drawGray(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.MinMax r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor GRAY>;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.MinMax: void draw(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.color.HColor)>(r1, $r2);

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.ugraphic.color.HColor r0;
        net.sourceforge.plantuml.ugraphic.UGraphic $r1, r6, r7, r8;
        net.sourceforge.plantuml.ugraphic.UBackground $r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.MinMax r4;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.ugraphic.URectangle $r5;

        r4 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        r6 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r1 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r0);

        $r2 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r7 = interfaceinvoke $r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d1 = r4.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $d0 = r4.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, $d0);

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.MinMax: double getWidth()>();

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.MinMax: double getHeight()>();

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d2, $d3);

        interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax translate(net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        net.sourceforge.plantuml.ugraphic.MinMax $r1, r2;

        r2 := @this: net.sourceforge.plantuml.ugraphic.MinMax;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UTranslate;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $r1 = new net.sourceforge.plantuml.ugraphic.MinMax;

        $d2 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minX>;

        $d9 = $d2 + d0;

        $d3 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double minY>;

        $d8 = $d3 + d1;

        $d4 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxX>;

        $d7 = $d4 + d0;

        $d5 = r2.<net.sourceforge.plantuml.ugraphic.MinMax: double maxY>;

        $d6 = $d5 + d1;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.MinMax: void <init>(double,double,double,double)>($d9, $d8, $d7, $d6);

        return $r1;
    }
}
