public class net.sourceforge.plantuml.tim.ExecutionContextWhile extends java.lang.Object
{
    private final net.sourceforge.plantuml.tim.expression.TokenStack whileExpression;
    private final net.sourceforge.plantuml.tim.iterator.CodePosition codePosition;
    private boolean skipMe;

    private void <init>(net.sourceforge.plantuml.tim.expression.TokenStack, net.sourceforge.plantuml.tim.iterator.CodePosition)
    {
        net.sourceforge.plantuml.tim.ExecutionContextWhile r0;
        net.sourceforge.plantuml.tim.expression.TokenStack r1;
        net.sourceforge.plantuml.tim.iterator.CodePosition r2;

        r0 := @this: net.sourceforge.plantuml.tim.ExecutionContextWhile;

        r1 := @parameter0: net.sourceforge.plantuml.tim.expression.TokenStack;

        r2 := @parameter1: net.sourceforge.plantuml.tim.iterator.CodePosition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.expression.TokenStack whileExpression> = r1;

        r0.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.iterator.CodePosition codePosition> = r2;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r7;
        net.sourceforge.plantuml.tim.ExecutionContextWhile r1;
        net.sourceforge.plantuml.tim.expression.TokenStack $r2;
        java.lang.String $r3, $r8;
        net.sourceforge.plantuml.tim.iterator.CodePosition $r6;

        r1 := @this: net.sourceforge.plantuml.tim.ExecutionContextWhile;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.expression.TokenStack whileExpression>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TokenStack: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r1.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.iterator.CodePosition codePosition>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static net.sourceforge.plantuml.tim.ExecutionContextWhile fromValue(net.sourceforge.plantuml.tim.expression.TokenStack, net.sourceforge.plantuml.tim.iterator.CodePosition)
    {
        net.sourceforge.plantuml.tim.ExecutionContextWhile $r0;
        net.sourceforge.plantuml.tim.expression.TokenStack r1;
        net.sourceforge.plantuml.tim.iterator.CodePosition r2;

        r1 := @parameter0: net.sourceforge.plantuml.tim.expression.TokenStack;

        r2 := @parameter1: net.sourceforge.plantuml.tim.iterator.CodePosition;

        $r0 = new net.sourceforge.plantuml.tim.ExecutionContextWhile;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.ExecutionContextWhile: void <init>(net.sourceforge.plantuml.tim.expression.TokenStack,net.sourceforge.plantuml.tim.iterator.CodePosition)>(r1, r2);

        return $r0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue conditionValue(net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.ExecutionContextWhile r0;
        net.sourceforge.plantuml.LineLocation r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        net.sourceforge.plantuml.tim.expression.TokenStack $r4;
        net.sourceforge.plantuml.tim.expression.TValue $r5;

        r0 := @this: net.sourceforge.plantuml.tim.ExecutionContextWhile;

        r1 := @parameter0: net.sourceforge.plantuml.LineLocation;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter2: net.sourceforge.plantuml.tim.TMemory;

        $r4 = r0.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.expression.TokenStack whileExpression>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TValue getResult(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r1, r2, r3);

        return $r5;
    }

    public void skipMe()
    {
        net.sourceforge.plantuml.tim.ExecutionContextWhile r0;

        r0 := @this: net.sourceforge.plantuml.tim.ExecutionContextWhile;

        r0.<net.sourceforge.plantuml.tim.ExecutionContextWhile: boolean skipMe> = 1;

        return;
    }

    public final boolean isSkipMe()
    {
        net.sourceforge.plantuml.tim.ExecutionContextWhile r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.ExecutionContextWhile;

        $z0 = r0.<net.sourceforge.plantuml.tim.ExecutionContextWhile: boolean skipMe>;

        return $z0;
    }

    public net.sourceforge.plantuml.tim.iterator.CodePosition getStartWhile()
    {
        net.sourceforge.plantuml.tim.ExecutionContextWhile r0;
        net.sourceforge.plantuml.tim.iterator.CodePosition $r1;

        r0 := @this: net.sourceforge.plantuml.tim.ExecutionContextWhile;

        $r1 = r0.<net.sourceforge.plantuml.tim.ExecutionContextWhile: net.sourceforge.plantuml.tim.iterator.CodePosition codePosition>;

        return $r1;
    }
}
