public class smetana.core.Macro extends java.lang.Object
{
    public static final int AGRAPH;
    public static final int AGNODE;
    public static final int AGOUTEDGE;
    public static final int AGINEDGE;
    public static final int AGEDGE;
    public static final int MAXSHORT;
    public static final int INT_MAX;
    public static final int INT_MIN;
    public static final double HUGE_VAL;
    public static double MILLIPOINT;
    public static double MICROPOINT;
    public static final double M_PI;
    public static final double SQRT2;
    public static final int LEFT;
    public static final int RIGHT;
    public static final int BOTTOM;
    public static final int TOP;
    public static final int LT_NONE;
    public static final int LT_HTML;
    public static final int LT_RECD;
    public static final int EDGE_LABEL;
    public static final int HEAD_LABEL;
    public static final int TAIL_LABEL;
    public static final int GRAPH_LABEL;
    public static final int NODE_XLABEL;
    public static final int EDGE_XLABEL;
    public static final int ET_NONE;
    public static final int ET_LINE;
    public static final int ET_CURVED;
    public static final int ET_PLINE;
    public static final int ET_ORTHO;
    public static final int ET_SPLINE;
    public static final int ET_COMPOUND;
    public static final int NEW_RANK;
    public static final int NORMAL;
    public static final int VIRTUAL;
    public static final int SLACKNODE;
    public static final int REVERSED;
    public static final int FLATORDER;
    public static final int CLUSTER_EDGE;
    public static final int IGNORED;
    public static final int NOCMD;
    public static final int SAMERANK;
    public static final int MINRANK;
    public static final int SOURCERANK;
    public static final int MAXRANK;
    public static final int SINKRANK;
    public static final int LEAFSET;
    public static final int CLUSTER;
    public static final int LABEL_AT_BOTTOM;
    public static final int LABEL_AT_TOP;
    public static final int LABEL_AT_LEFT;
    public static final int LABEL_AT_RIGHT;
    public static final int RANKDIR_TB;
    public static final int RANKDIR_LR;
    public static final int RANKDIR_BT;
    public static final int RANKDIR_RL;
    public static final int REGULAREDGE;
    public static final int FLATEDGE;
    public static final int SELFWPEDGE;
    public static final int SELFNPEDGE;
    public static final int SELFEDGE;
    public static final int EDGETYPEMASK;
    public static final int LAYOUT_USES_RANKDIR;
    public static final int DT_FOUND;
    public static final int DT_SET;
    public static final int DT_BAG;
    public static final int DT_OSET;
    public static final int DT_OBAG;
    public static final int DT_LIST;
    public static final int DT_STACK;
    public static final int DT_QUEUE;
    public static final int DT_DEQUE;
    public static final int DT_METHODS;
    public static final int DT_SAMECMP;
    public static final int DT_SAMEHASH;
    public static final int DT_INSERT;
    public static final int DT_DELETE;
    public static final int DT_SEARCH;
    public static final int DT_NEXT;
    public static final int DT_PREV;
    public static final int DT_RENEW;
    public static final int DT_CLEAR;
    public static final int DT_FIRST;
    public static final int DT_LAST;
    public static final int DT_MATCH;
    public static final int DT_VSEARCH;
    public static final int DT_ATTACH;
    public static final int DT_DETACH;
    public static final int DT_APPEND;
    public static final int DT_OPEN;
    public static final int DT_CLOSE;
    public static final int DT_DISC;
    public static final int DT_METH;
    public static final int DT_ENDOPEN;
    public static final int DT_ENDCLOSE;
    public static final int DT_HASHSIZE;
    public static final int DT_FLATTEN;
    public static final int DT_WALK;
    public static final int DT_MALLOC;
    public static final int DT_MEMORYF;
    public static final int GVRENDER_PLUGIN;
    public static final int NO_SUPPORT;
    public static final int LOCAL;
    public static final int GLOBAL;
    public static final int NOCLUST;
    public static final double DEFAULT_NODESEP;
    public static final double MIN_NODESEP;
    public static final double DEFAULT_RANKSEP;
    public static final double MIN_RANKSEP;
    public static final int POINTS_PER_INCH;
    public static final int GVBEGIN;
    public static final int GVSPLINES;
    public static final double Spring_coeff;
    public static final double MYHUGE;
    public static final int MAXDIM;
    public static final java.lang.String NODENAME_ESC;
    public static final java.lang.String DEFAULT_NODESHAPE;
    public static final double DEFAULT_NODEHEIGHT;
    public static final double MIN_NODEHEIGHT;
    public static final double DEFAULT_NODEWIDTH;
    public static final double MIN_NODEWIDTH;
    public static final int BOTTOM_IX;
    public static final int RIGHT_IX;
    public static final int TOP_IX;
    public static final int LEFT_IX;
    public static final int GAP;
    public static final int CB_INITIALIZE;
    public static final int CB_UPDATE;
    public static final int CB_DELETION;
    public static final int CL_BACK;
    public static final int CL_OFFSET;
    public static final int CL_CROSS;
    public static final double DEFAULT_FONTSIZE;
    public static final double DEFAULT_LABEL_FONTSIZE;
    public static final double MIN_FONTSIZE;
    public static final int FILLED;
    public static final int RADIAL;
    public static final int ROUNDED;
    public static final int DIAGONALS;
    public static final int AUXLABELS;
    public static final int INVISIBLE;
    public static final int STRIPED;
    public static final int DOTTED;
    public static final int DASHED;
    public static final int WEDGED;
    public static final int UNDERLINE;
    public static final int FIXEDSHAPE;
    public static final int SHAPE_MASK;
    public static final smetana.core.CString HEAD_ID;
    public static final smetana.core.CString TAIL_ID;
    public static final int SEARCHSIZE;
    public static final int NODECARD;
    public static final int SMALLBUF;
    public static final int ARR_NONE;
    public static final int ARR_TYPE_NONE;
    public static final int ARR_TYPE_NORM;
    public static final int ARR_TYPE_CROW;
    public static final int ARR_TYPE_TEE;
    public static final int ARR_TYPE_BOX;
    public static final int ARR_TYPE_DIAMOND;
    public static final int ARR_TYPE_DOT;
    public static final int ARR_TYPE_CURVE;
    public static final int ARR_TYPE_GAP;
    public static final double ARROW_LENGTH;
    public static final int NUMB_OF_ARROW_HEADS;
    public static final int BITS_PER_ARROW;
    public static final int BITS_PER_ARROW_TYPE;

    public void <init>()
    {
        smetana.core.Macro r0;

        r0 := @this: smetana.core.Macro;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.lang.Object F(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.Object[] r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        return r0;
    }

    public static int ASINT(boolean)
    {
        boolean z0;
        byte $b0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        return $b0;
    }

    public static boolean N(boolean)
    {
        boolean z0, $z1;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean N(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean N(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean N(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0 instanceof java.lang.Integer;

        if $z1 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        if r0 != null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public static boolean NOT(boolean)
    {
        boolean z0, $z1;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static int NOTI(boolean)
    {
        boolean z0;
        byte $b0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 0;

        goto label2;

     label1:
        $b0 = 1;

     label2:
        return $b0;
    }

    public static boolean NOT(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean NOT(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean NOT(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void UNSURE_ABOUT(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r4;
        java.io.PrintStream $r1;
        java.lang.String r3, $r5;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNSURE_ABOUT: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public static smetana.core.__ptr__ UNSUPPORTED(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    public static int UNSUPPORTED_INT(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    public static h.ST_Agtag_s AGTAG(h.ST_Agobj_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agtag_s $r1;

        r0 := @parameter0: h.ST_Agobj_s;

        $r1 = r0.<h.ST_Agobj_s: h.ST_Agtag_s tag>;

        return $r1;
    }

    public static int AGTYPE(h.ST_Agobj_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agtag_s $r1;
        int $i0;

        r0 := @parameter0: h.ST_Agobj_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agtag_s AGTAG(h.ST_Agobj_s)>(r0);

        $i0 = $r1.<h.ST_Agtag_s: int objtype>;

        return $i0;
    }

    public static void AGTYPE(h.ST_Agobj_s, int)
    {
        h.ST_Agobj_s r0;
        h.ST_Agtag_s $r1;
        int i0;

        r0 := @parameter0: h.ST_Agobj_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agtag_s AGTAG(h.ST_Agobj_s)>(r0);

        $r1.<h.ST_Agtag_s: int objtype> = i0;

        return;
    }

    public static int AGID(h.ST_Agobj_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agtag_s $r1;
        int $i0;

        r0 := @parameter0: h.ST_Agobj_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agtag_s AGTAG(h.ST_Agobj_s)>(r0);

        $i0 = $r1.<h.ST_Agtag_s: int id>;

        return $i0;
    }

    public static void AGID(h.ST_Agobj_s, int)
    {
        h.ST_Agobj_s r0;
        h.ST_Agtag_s $r1;
        int i0;

        r0 := @parameter0: h.ST_Agobj_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agtag_s AGTAG(h.ST_Agobj_s)>(r0);

        $r1.<h.ST_Agtag_s: int id> = i0;

        return;
    }

    public static int AGSEQ(h.ST_Agobj_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agtag_s $r1;
        int $i0;

        r0 := @parameter0: h.ST_Agobj_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agtag_s AGTAG(h.ST_Agobj_s)>(r0);

        $i0 = $r1.<h.ST_Agtag_s: int seq>;

        return $i0;
    }

    public static void AGSEQ(h.ST_Agobj_s, int)
    {
        h.ST_Agobj_s r0;
        h.ST_Agtag_s $r1;
        int i0;

        r0 := @parameter0: h.ST_Agobj_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agtag_s AGTAG(h.ST_Agobj_s)>(r0);

        $r1.<h.ST_Agtag_s: int seq> = i0;

        return;
    }

    public static h.ST_Agrec_s AGDATA(h.ST_Agobj_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agrec_s $r1;

        r0 := @parameter0: h.ST_Agobj_s;

        $r1 = r0.<h.ST_Agobj_s: h.ST_Agrec_s data>;

        return $r1;
    }

    public static void AGDATA(h.ST_Agobj_s, h.ST_Agrec_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agrec_s r1;

        r0 := @parameter0: h.ST_Agobj_s;

        r1 := @parameter1: h.ST_Agrec_s;

        r0.<h.ST_Agobj_s: h.ST_Agrec_s data> = r1;

        return;
    }

    public static h.ST_Agedge_s AGIN2OUT(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = virtualinvoke r0.<h.ST_Agedge_s: h.ST_Agedge_s plus_(int)>(-1);

        return $r1;
    }

    public static h.ST_Agedge_s AGOUT2IN(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = virtualinvoke r0.<h.ST_Agedge_s: h.ST_Agedge_s plus_(int)>(1);

        return $r1;
    }

    public static h.ST_Agedge_s AGOPP(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $i0 = staticinvoke <smetana.core.Macro: int AGTYPE(h.ST_Agobj_s)>(r0);

        if $i0 != 3 goto label1;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGIN2OUT(h.ST_Agedge_s)>(r0);

        goto label2;

     label1:
        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGOUT2IN(h.ST_Agedge_s)>(r0);

     label2:
        return $r1;
    }

    public static h.ST_Agedge_s AGMKOUT(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $i0 = staticinvoke <smetana.core.Macro: int AGTYPE(h.ST_Agobj_s)>(r0);

        if $i0 != 2 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGIN2OUT(h.ST_Agedge_s)>(r0);

     label2:
        return $r1;
    }

    public static h.ST_Agedge_s AGMKIN(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $i0 = staticinvoke <smetana.core.Macro: int AGTYPE(h.ST_Agobj_s)>(r0);

        if $i0 != 3 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGOUT2IN(h.ST_Agedge_s)>(r0);

     label2:
        return $r1;
    }

    public static h.ST_Agnode_s AGTAIL(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;
        h.ST_Agnode_s $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGMKIN(h.ST_Agedge_s)>(r0);

        $r2 = $r1.<h.ST_Agedge_s: h.ST_Agnode_s node>;

        return $r2;
    }

    public static h.ST_Agnode_s M_agtail(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;
        h.ST_Agnode_s $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGMKIN(h.ST_Agedge_s)>(r0);

        $r2 = $r1.<h.ST_Agedge_s: h.ST_Agnode_s node>;

        return $r2;
    }

    public static void M_agtail(h.ST_Agedge_s, h.ST_Agnode_s)
    {
        h.ST_Agedge_s r0, $r1;
        h.ST_Agnode_s r2;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGMKIN(h.ST_Agedge_s)>(r0);

        $r1.<h.ST_Agedge_s: h.ST_Agnode_s node> = r2;

        return;
    }

    public static h.ST_Agnode_s AGHEAD(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;
        h.ST_Agnode_s $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGMKOUT(h.ST_Agedge_s)>(r0);

        $r2 = $r1.<h.ST_Agedge_s: h.ST_Agnode_s node>;

        return $r2;
    }

    private static h.ST_Agnode_s M_aghead(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r1;
        h.ST_Agnode_s $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGMKOUT(h.ST_Agedge_s)>(r0);

        $r2 = $r1.<h.ST_Agedge_s: h.ST_Agnode_s node>;

        return $r2;
    }

    public static void M_aghead(h.ST_Agedge_s, h.ST_Agnode_s)
    {
        h.ST_Agedge_s r0, $r1;
        h.ST_Agnode_s r2;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agedge_s AGMKOUT(h.ST_Agedge_s)>(r0);

        $r1.<h.ST_Agedge_s: h.ST_Agnode_s node> = r2;

        return;
    }

    public static int LENGTH(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agnode_s $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agnode_s M_aghead(h.ST_Agedge_s)>(r0);

        $i0 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r1);

        $r2 = staticinvoke <smetana.core.Macro: h.ST_Agnode_s M_agtail(h.ST_Agedge_s)>(r0);

        $i1 = staticinvoke <smetana.core.Macro: int ND_rank(h.ST_Agnode_s)>($r2);

        $i2 = $i0 - $i1;

        return $i2;
    }

    public static int SLACK(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        int $i0, $i1, $i2;

        r0 := @parameter0: h.ST_Agedge_s;

        $i0 = staticinvoke <smetana.core.Macro: int LENGTH(h.ST_Agedge_s)>(r0);

        $i1 = staticinvoke <smetana.core.Macro: int ED_minlen(h.ST_Agedge_s)>(r0);

        $i2 = $i0 - $i1;

        return $i2;
    }

    public static boolean SEQ(int, int, int)
    {
        int i0, i1, i2;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 > i1 goto label1;

        if i1 > i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean TREE_EDGE(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: h.ST_Agedge_s;

        $i0 = staticinvoke <smetana.core.Macro: int ED_tree_index(h.ST_Agedge_s)>(r0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static smetana.core.__ptr__ GD_parent(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agraph_s parent>;

        return $r3;
    }

    public static void GD_parent(h.ST_Agraph_s, h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, r2;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_Agraph_s parent> = r2;

        return;
    }

    public static h.ST_layout_t GD_drawing(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_layout_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_layout_t drawing>;

        return $r3;
    }

    public static void GD_drawing(h.ST_Agraph_s, h.ST_layout_t)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_layout_t r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_layout_t;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_layout_t drawing> = r2;

        return;
    }

    public static h.ST_boxf GD_bb(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_boxf $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_boxf bb>;

        return $r3;
    }

    public static h.ST_GVC_s GD_gvc(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_GVC_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_GVC_s gvc>;

        return $r3;
    }

    public static void GD_gvc(h.ST_Agraph_s, h.ST_GVC_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_GVC_s r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_GVC_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_GVC_s gvc> = r2;

        return;
    }

    public static smetana.core.__ptr__ GD_cleanup(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        smetana.core.CFunction $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: smetana.core.CFunction cleanup>;

        return $r3;
    }

    public static void GD_cleanup(h.ST_Agraph_s, smetana.core.CFunction)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        smetana.core.CFunction r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: smetana.core.CFunction;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: smetana.core.CFunction cleanup> = r2;

        return;
    }

    public static h.ST_pointf[] GD_border(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_pointf[] $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_pointf[] border>;

        return $r3;
    }

    public static smetana.core.CArrayOfStar GD_clust(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        smetana.core.CArrayOfStar $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: smetana.core.CArrayOfStar clust>;

        return $r3;
    }

    public static void GD_clust(h.ST_Agraph_s, smetana.core.CArrayOfStar)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        smetana.core.CArrayOfStar r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: smetana.core.CArrayOfStar;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: smetana.core.CArrayOfStar clust> = r2;

        return;
    }

    public static h.ST_Agraph_s GD_dotroot(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agraph_s dotroot>;

        return $r3;
    }

    public static void GD_dotroot(h.ST_Agraph_s, h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0, r2;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_Agraph_s dotroot> = r2;

        return;
    }

    public static h.ST_nlist_t GD_comp(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_nlist_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_nlist_t comp>;

        return $r3;
    }

    public static int GD_exact_ranksep(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int exact_ranksep>;

        return $i0;
    }

    public static void GD_exact_ranksep(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int exact_ranksep> = i0;

        return;
    }

    public static boolean GD_expanded(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        boolean $z0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $z0 = $r2.<h.ST_Agraphinfo_t: boolean expanded>;

        return $z0;
    }

    public static void GD_expanded(h.ST_Agraph_s, boolean)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        boolean z0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: boolean expanded> = z0;

        return;
    }

    public static int GD_flags(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int flags>;

        return $i0;
    }

    public static void GD_flags(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int flags> = i0;

        return;
    }

    public static int GD_charset(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int charset>;

        return $i0;
    }

    public static void GD_charset(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int charset> = i0;

        return;
    }

    public static int GD_has_labels(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int has_labels>;

        return $i0;
    }

    public static void GD_has_labels(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int has_labels> = i0;

        return;
    }

    public static int GD_has_flat_edges(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int has_flat_edges>;

        return $i0;
    }

    public static void GD_has_flat_edges(h.ST_Agraph_s, boolean)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        boolean z0;
        h.ST_Agraphinfo_t $r2;
        byte $b0;

        r0 := @parameter0: h.ST_Agraph_s;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $r2.<h.ST_Agraphinfo_t: int has_flat_edges> = $b0;

        return;
    }

    public static double GD_ht1(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $d0 = $r2.<h.ST_Agraphinfo_t: double ht1>;

        return $d0;
    }

    public static void GD_ht1(h.ST_Agraph_s, double)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: double ht1> = d0;

        return;
    }

    public static double GD_ht2(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $d0 = $r2.<h.ST_Agraphinfo_t: double ht2>;

        return $d0;
    }

    public static void GD_ht2(h.ST_Agraph_s, double)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: double ht2> = d0;

        return;
    }

    public static int GD_installed(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int installed>;

        return $i0;
    }

    public static void GD_installed(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int installed> = i0;

        return;
    }

    public static h.ST_textlabel_t GD_label(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_textlabel_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_textlabel_t label>;

        return $r3;
    }

    public static void GD_label(h.ST_Agraph_s, h.ST_textlabel_t)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_textlabel_t r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_textlabel_t;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_textlabel_t label> = r2;

        return;
    }

    public static h.ST_Agnode_s GD_leader(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_Agnode_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agnode_s leader>;

        return $r3;
    }

    public static void GD_leader(h.ST_Agraph_s, h.ST_Agnode_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnode_s r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_Agnode_s leader> = r2;

        return;
    }

    public static int GD_rankdir2(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int rankdir>;

        return $i0;
    }

    public static void GD_rankdir2(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int rankdir> = i0;

        return;
    }

    public static int GD_rankdir(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0, $i1;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int rankdir>;

        $i1 = $i0 & 3;

        return $i1;
    }

    public static boolean GD_flip(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: h.ST_Agraph_s;

        $i0 = staticinvoke <smetana.core.Macro: int GD_rankdir(h.ST_Agraph_s)>(r0);

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int GD_realrankdir(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0, $i1;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int rankdir>;

        $i1 = $i0 >> 2;

        return $i1;
    }

    public static int GD_realflip(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        int $i0, $i1;

        r0 := @parameter0: h.ST_Agraph_s;

        $i0 = staticinvoke <smetana.core.Macro: int GD_realrankdir(h.ST_Agraph_s)>(r0);

        $i1 = $i0 & 1;

        return $i1;
    }

    public static h.ST_Agnode_s GD_ln(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_Agnode_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agnode_s ln>;

        return $r3;
    }

    public static void GD_ln(h.ST_Agraph_s, h.ST_Agnode_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnode_s r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_Agnode_s ln> = r2;

        return;
    }

    public static int GD_maxrank(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int maxrank>;

        return $i0;
    }

    public static void GD_maxrank(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int maxrank> = i0;

        return;
    }

    public static smetana.core.__ptr__ GD_maxset(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_Agnode_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agnode_s maxset>;

        return $r3;
    }

    public static int GD_minrank(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int minrank>;

        return $i0;
    }

    public static void GD_minrank(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int minrank> = i0;

        return;
    }

    public static smetana.core.__ptr__ GD_minset(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_Agnode_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agnode_s minset>;

        return $r3;
    }

    public static int GD_n_cluster(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int n_cluster>;

        return $i0;
    }

    public static void GD_n_cluster(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int n_cluster> = i0;

        return;
    }

    public static int GD_n_nodes(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int n_nodes>;

        return $i0;
    }

    public static void GD_n_nodes(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int n_nodes> = i0;

        return;
    }

    public static h.ST_Agnode_s GD_nlist(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_Agnode_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agnode_s nlist>;

        return $r3;
    }

    public static void GD_nlist(h.ST_Agraph_s, h.ST_Agnode_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnode_s r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_Agnode_s nlist> = r2;

        return;
    }

    public static int GD_nodesep(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int nodesep>;

        return $i0;
    }

    public static void GD_nodesep(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int nodesep> = i0;

        return;
    }

    public static smetana.core.CArray GD_rank(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        smetana.core.CArray $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: smetana.core.CArray rank>;

        return $r3;
    }

    public static void GD_rank(h.ST_Agraph_s, smetana.core.CArray)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        smetana.core.CArray r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: smetana.core.CArray;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: smetana.core.CArray rank> = r2;

        return;
    }

    public static smetana.core.CArrayOfStar GD_rankleader(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        smetana.core.CArrayOfStar $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: smetana.core.CArrayOfStar rankleader>;

        return $r3;
    }

    public static void GD_rankleader(h.ST_Agraph_s, smetana.core.CArrayOfStar)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        smetana.core.CArrayOfStar r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: smetana.core.CArrayOfStar;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: smetana.core.CArrayOfStar rankleader> = r2;

        return;
    }

    public static int GD_ranksep(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int ranksep>;

        return $i0;
    }

    public static void GD_ranksep(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int ranksep> = i0;

        return;
    }

    public static h.ST_Agnode_s GD_rn(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        h.ST_Agnode_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r3 = $r2.<h.ST_Agraphinfo_t: h.ST_Agnode_s rn>;

        return $r3;
    }

    public static void GD_rn(h.ST_Agraph_s, h.ST_Agnode_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnode_s r2;
        h.ST_Agraphinfo_t $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agraphinfo_t) $r1;

        $r3.<h.ST_Agraphinfo_t: h.ST_Agnode_s rn> = r2;

        return;
    }

    public static int GD_set_type(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int set_type>;

        return $i0;
    }

    public static void GD_set_type(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int set_type> = i0;

        return;
    }

    public static int GD_label_pos(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int label_pos>;

        return $i0;
    }

    public static void GD_label_pos(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int label_pos> = i0;

        return;
    }

    public static int GD_showboxes(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int showboxes>;

        return $i0;
    }

    public static void GD_showboxes(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int showboxes> = i0;

        return;
    }

    public static int GD_fontnames(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraphinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $i0 = $r2.<h.ST_Agraphinfo_t: int fontnames>;

        return $i0;
    }

    public static void GD_fontnames(h.ST_Agraph_s, int)
    {
        h.ST_Agraph_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agraphinfo_t $r2;

        r0 := @parameter0: h.ST_Agraph_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agraphinfo_t) $r1;

        $r2.<h.ST_Agraphinfo_t: int fontnames> = i0;

        return;
    }

    public static int ND_id(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int id>;

        return $i0;
    }

    public static smetana.core.__ptr__ ND_alg(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_Agedge_s $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agedge_s alg>;

        return $r3;
    }

    public static void ND_alg(h.ST_Agnode_s, h.ST_Agedge_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedge_s r2;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_Agedge_s alg> = r2;

        return;
    }

    public static h.ST_Agnode_s ND_UF_parent(h.ST_Agobj_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_Agnode_s $r3;

        r0 := @parameter0: h.ST_Agobj_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agnode_s UF_parent>;

        return $r3;
    }

    public static void ND_UF_parent(h.ST_Agobj_s, h.ST_Agnode_s)
    {
        h.ST_Agobj_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnode_s r2;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agobj_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_Agnode_s UF_parent> = r2;

        return;
    }

    public static int ND_UF_size(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int UF_size>;

        return $i0;
    }

    public static void ND_UF_size(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int UF_size> = i0;

        return;
    }

    public static h.ST_Agraph_s ND_clust(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_Agraph_s $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agraph_s clust>;

        return $r3;
    }

    public static void ND_clust(h.ST_Agnode_s, h.ST_Agraph_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agraph_s r2;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_Agraph_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_Agraph_s clust> = r2;

        return;
    }

    public static h.ST_pointf ND_coord(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_pointf $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_pointf coord>;

        return $r3;
    }

    public static h.ST_elist ND_flat_in(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist flat_in>;

        return $r3;
    }

    public static h.ST_elist ND_flat_out(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist flat_out>;

        return $r3;
    }

    public static boolean ND_has_port(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        boolean $z0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $z0 = $r2.<h.ST_Agnodeinfo_t: boolean has_port>;

        return $z0;
    }

    public static void ND_has_port(h.ST_Agnode_s, boolean)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        boolean z0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: boolean has_port> = z0;

        return;
    }

    public static double ND_height(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = $r2.<h.ST_Agnodeinfo_t: double height>;

        return $d0;
    }

    public static void ND_height(h.ST_Agnode_s, double)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: double height> = d0;

        return;
    }

    public static double ND_ht(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = $r2.<h.ST_Agnodeinfo_t: double ht>;

        return $d0;
    }

    public static void ND_ht(h.ST_Agnode_s, double)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: double ht> = d0;

        return;
    }

    public static h.ST_elist ND_in(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist in>;

        return $r3;
    }

    public static void ND_in(h.ST_Agnode_s, smetana.core.__struct__)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        smetana.core.__struct__ r3;
        h.ST_elist $r4;

        r0 := @parameter0: h.ST_Agnode_s;

        r3 := @parameter1: smetana.core.__struct__;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r4 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist in>;

        virtualinvoke $r4.<h.ST_elist: void ___(smetana.core.__struct__)>(r3);

        return;
    }

    public static smetana.core.__ptr__ ND_inleaf(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agnode_s inleaf>;

        return $r3;
    }

    public static h.ST_textlabel_t ND_label(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_textlabel_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_textlabel_t label>;

        return $r3;
    }

    public static void ND_label(h.ST_Agnode_s, h.ST_textlabel_t)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_textlabel_t r2;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_textlabel_t;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_textlabel_t label> = r2;

        return;
    }

    public static h.ST_textlabel_t ND_xlabel(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_textlabel_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_textlabel_t xlabel>;

        return $r3;
    }

    public static int ND_lim(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int lim>;

        return $i0;
    }

    public static void ND_lim(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int lim> = i0;

        return;
    }

    public static int ND_low(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int low>;

        return $i0;
    }

    public static void ND_low(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int low> = i0;

        return;
    }

    public static double ND_lw(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = $r2.<h.ST_Agnodeinfo_t: double lw>;

        return $d0;
    }

    public static void ND_lw(h.ST_Agnode_s, double)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: double lw> = d0;

        return;
    }

    public static int ND_mark(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int mark>;

        return $i0;
    }

    public static void ND_mark(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int mark> = i0;

        return;
    }

    public static void ND_mark(h.ST_Agnode_s, boolean)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        boolean z0;
        h.ST_Agnodeinfo_t $r2;
        byte $b0;

        r0 := @parameter0: h.ST_Agnode_s;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $r2.<h.ST_Agnodeinfo_t: int mark> = $b0;

        return;
    }

    public static double ND_mval(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = $r2.<h.ST_Agnodeinfo_t: double mval>;

        return $d0;
    }

    public static void ND_mval(h.ST_Agnode_s, double)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: double mval> = d0;

        return;
    }

    public static h.ST_Agnode_s ND_next(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agnode_s next>;

        return $r3;
    }

    public static void ND_next(h.ST_Agnode_s, h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, r2;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_Agnode_s next> = r2;

        return;
    }

    public static int ND_node_type(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int node_type>;

        return $i0;
    }

    public static void ND_node_type(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int node_type> = i0;

        return;
    }

    public static boolean ND_onstack(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;
        boolean $z0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int onstack>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void ND_onstack(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int onstack> = i0;

        return;
    }

    public static void ND_onstack(h.ST_Agnode_s, boolean)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        boolean z0;
        h.ST_Agnodeinfo_t $r2;
        byte $b0;

        r0 := @parameter0: h.ST_Agnode_s;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $r2.<h.ST_Agnodeinfo_t: int onstack> = $b0;

        return;
    }

    public static int ND_order(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int order>;

        return $i0;
    }

    public static void ND_order(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int order> = i0;

        return;
    }

    public static h.ST_elist ND_other(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist other>;

        return $r3;
    }

    public static h.ST_elist ND_out(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist out>;

        return $r3;
    }

    public static void ND_out(h.ST_Agnode_s, smetana.core.__struct__)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        smetana.core.__struct__ r3;
        h.ST_elist $r4;

        r0 := @parameter0: h.ST_Agnode_s;

        r3 := @parameter1: smetana.core.__struct__;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r4 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist out>;

        virtualinvoke $r4.<h.ST_elist: void ___(smetana.core.__struct__)>(r3);

        return;
    }

    public static smetana.core.__ptr__ ND_outleaf(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agnode_s outleaf>;

        return $r3;
    }

    public static h.ST_Agedge_s ND_par(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_Agedge_s $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agedge_s par>;

        return $r3;
    }

    public static void ND_par(h.ST_Agnode_s, h.ST_Agedge_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedge_s r2;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_Agedge_s par> = r2;

        return;
    }

    public static h.ST_Agnode_s ND_prev(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_Agnode_s prev>;

        return $r3;
    }

    public static void ND_prev(h.ST_Agnode_s, h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0, r2;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_Agnode_s prev> = r2;

        return;
    }

    public static int ND_priority(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int priority>;

        return $i0;
    }

    public static void ND_priority(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int priority> = i0;

        return;
    }

    public static int ND_rank(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        i0 = $r2.<h.ST_Agnodeinfo_t: int rank>;

        return i0;
    }

    public static void ND_rank(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int rank> = i0;

        return;
    }

    public static int ND_ranktype(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int ranktype>;

        return $i0;
    }

    public static void ND_ranktype(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int ranktype> = i0;

        return;
    }

    public static double ND_rw(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = $r2.<h.ST_Agnodeinfo_t: double rw>;

        return $d0;
    }

    public static void ND_rw(h.ST_Agnode_s, double)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: double rw> = d0;

        return;
    }

    public static h.ST_elist ND_save_in(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist save_in>;

        return $r3;
    }

    public static void ND_save_in(h.ST_Agnode_s, smetana.core.__struct__)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        smetana.core.__struct__ r3;
        h.ST_elist $r4;

        r0 := @parameter0: h.ST_Agnode_s;

        r3 := @parameter1: smetana.core.__struct__;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r4 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist save_in>;

        virtualinvoke $r4.<h.ST_elist: void ___(smetana.core.__struct__)>(r3);

        return;
    }

    public static h.ST_elist ND_save_out(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist save_out>;

        return $r3;
    }

    public static void ND_save_out(h.ST_Agnode_s, smetana.core.__struct__)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        smetana.core.__struct__ r3;
        h.ST_elist $r4;

        r0 := @parameter0: h.ST_Agnode_s;

        r3 := @parameter1: smetana.core.__struct__;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r4 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist save_out>;

        virtualinvoke $r4.<h.ST_elist: void ___(smetana.core.__struct__)>(r3);

        return;
    }

    public static h.ST_shape_desc ND_shape(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_shape_desc $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_shape_desc shape>;

        return $r3;
    }

    public static void ND_shape(h.ST_Agnode_s, h.ST_shape_desc)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_shape_desc r2;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_shape_desc;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.ST_shape_desc shape> = r2;

        return;
    }

    public static h.SHAPE_INFO ND_shape_info(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.SHAPE_INFO $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.SHAPE_INFO shape_info>;

        return $r3;
    }

    public static void ND_shape_info(h.ST_Agnode_s, h.SHAPE_INFO)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.SHAPE_INFO r2;
        h.ST_Agnodeinfo_t $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.SHAPE_INFO;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agnodeinfo_t) $r1;

        $r3.<h.ST_Agnodeinfo_t: h.SHAPE_INFO shape_info> = r2;

        return;
    }

    public static int ND_showboxes(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int showboxes>;

        return $i0;
    }

    public static void ND_showboxes(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int showboxes> = i0;

        return;
    }

    public static h.ST_elist ND_tree_in(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist tree_in>;

        return $r3;
    }

    public static h.ST_elist ND_tree_out(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        h.ST_elist $r3;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agnodeinfo_t: h.ST_elist tree_out>;

        return $r3;
    }

    public static int ND_weight_class(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agnodeinfo_t: int weight_class>;

        return $i0;
    }

    public static void ND_weight_class(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: int weight_class> = i0;

        return;
    }

    public static double ND_width(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agnodeinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agnode_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $d0 = $r2.<h.ST_Agnodeinfo_t: double width>;

        return $d0;
    }

    public static void ND_width(h.ST_Agnode_s, double)
    {
        h.ST_Agnode_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agnodeinfo_t $r2;

        r0 := @parameter0: h.ST_Agnode_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agnodeinfo_t) $r1;

        $r2.<h.ST_Agnodeinfo_t: double width> = d0;

        return;
    }

    public static boolean ED_conc_opp_flag(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        boolean $z0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $z0 = $r2.<h.ST_Agedgeinfo_t: boolean conc_opp_flag>;

        return $z0;
    }

    public static void ED_conc_opp_flag(h.ST_Agedge_s, boolean)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        boolean z0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: boolean conc_opp_flag> = z0;

        return;
    }

    public static int ED_count(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int count>;

        return $i0;
    }

    public static void ED_count(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int count> = i0;

        return;
    }

    public static int ED_cutvalue(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int cutvalue>;

        return $i0;
    }

    public static void ED_cutvalue(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int cutvalue> = i0;

        return;
    }

    public static int ED_adjacent(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int adjacent>;

        return $i0;
    }

    public static void ED_adjacent(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int adjacent> = i0;

        return;
    }

    public static h.ST_textlabel_t ED_head_label(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_textlabel_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_textlabel_t head_label>;

        return $r3;
    }

    public static void ED_head_label(h.ST_Agedge_s, h.ST_textlabel_t)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_textlabel_t r2;
        h.ST_Agedgeinfo_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_textlabel_t;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agedgeinfo_t) $r1;

        $r3.<h.ST_Agedgeinfo_t: h.ST_textlabel_t head_label> = r2;

        return;
    }

    public static h.ST_port ED_head_port(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_port $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_port head_port>;

        return $r3;
    }

    public static void ED_head_port(h.ST_Agedge_s, h.ST_port)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_port r3, $r4;

        r0 := @parameter0: h.ST_Agedge_s;

        r3 := @parameter1: h.ST_port;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r4 = $r2.<h.ST_Agedgeinfo_t: h.ST_port head_port>;

        virtualinvoke $r4.<h.ST_port: void ___(smetana.core.__struct__)>(r3);

        return;
    }

    public static h.ST_textlabel_t ED_label(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_textlabel_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_textlabel_t label>;

        return $r3;
    }

    public static void ED_label(h.ST_Agedge_s, h.ST_textlabel_t)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_textlabel_t r2;
        h.ST_Agedgeinfo_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_textlabel_t;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agedgeinfo_t) $r1;

        $r3.<h.ST_Agedgeinfo_t: h.ST_textlabel_t label> = r2;

        return;
    }

    public static h.ST_textlabel_t ED_xlabel(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_textlabel_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_textlabel_t xlabel>;

        return $r3;
    }

    public static boolean ED_label_ontop(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        boolean $z0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $z0 = $r2.<h.ST_Agedgeinfo_t: boolean label_ontop>;

        return $z0;
    }

    public static void ED_label_ontop(h.ST_Agedge_s, boolean)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        boolean z0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: boolean label_ontop> = z0;

        return;
    }

    public static int ED_minlen(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int minlen>;

        return $i0;
    }

    public static void ED_minlen(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int minlen> = i0;

        return;
    }

    public static int ED_showboxes(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int showboxes>;

        return $i0;
    }

    public static void ED_showboxes(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int showboxes> = i0;

        return;
    }

    public static h.ST_splines ED_spl(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_splines $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_splines spl>;

        return $r3;
    }

    public static void ED_spl(h.ST_Agedge_s, h.ST_splines)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_splines r2;
        h.ST_Agedgeinfo_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_splines;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agedgeinfo_t) $r1;

        $r3.<h.ST_Agedgeinfo_t: h.ST_splines spl> = r2;

        return;
    }

    public static h.ST_textlabel_t ED_tail_label(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_textlabel_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_textlabel_t tail_label>;

        return $r3;
    }

    public static void ED_tail_label(h.ST_Agedge_s, h.ST_textlabel_t)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_textlabel_t r2;
        h.ST_Agedgeinfo_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_textlabel_t;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agedgeinfo_t) $r1;

        $r3.<h.ST_Agedgeinfo_t: h.ST_textlabel_t tail_label> = r2;

        return;
    }

    public static h.ST_port ED_tail_port(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_port $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_port tail_port>;

        return $r3;
    }

    public static void ED_tail_port(h.ST_Agedge_s, h.ST_port)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        h.ST_port r3, $r4;

        r0 := @parameter0: h.ST_Agedge_s;

        r3 := @parameter1: h.ST_port;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r4 = $r2.<h.ST_Agedgeinfo_t: h.ST_port tail_port>;

        virtualinvoke $r4.<h.ST_port: void ___(smetana.core.__struct__)>(r3);

        return;
    }

    public static h.ST_Agedge_s ED_to_orig(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_Agedge_s to_orig>;

        return $r3;
    }

    public static void ED_to_orig(h.ST_Agedge_s, h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, r2;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agedgeinfo_t) $r1;

        $r3.<h.ST_Agedgeinfo_t: h.ST_Agedge_s to_orig> = r2;

        return;
    }

    public static h.ST_Agedge_s ED_to_virt(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, $r3;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r3 = $r2.<h.ST_Agedgeinfo_t: h.ST_Agedge_s to_virt>;

        return $r3;
    }

    public static void ED_to_virt(h.ST_Agedge_s, h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, r2;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r3;

        r0 := @parameter0: h.ST_Agedge_s;

        r2 := @parameter1: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r3 = (h.ST_Agedgeinfo_t) $r1;

        $r3.<h.ST_Agedgeinfo_t: h.ST_Agedge_s to_virt> = r2;

        return;
    }

    public static int ED_tree_index(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int tree_index>;

        return $i0;
    }

    public static void ED_tree_index(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int tree_index> = i0;

        return;
    }

    public static int ED_xpenalty(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int xpenalty>;

        return $i0;
    }

    public static void ED_xpenalty(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int xpenalty> = i0;

        return;
    }

    public static double ED_dist(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        double $d0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $d0 = $r2.<h.ST_Agedgeinfo_t: double dist>;

        return $d0;
    }

    public static void ED_dist(h.ST_Agedge_s, double)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        double d0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        d0 := @parameter1: double;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: double dist> = d0;

        return;
    }

    public static int ED_weight(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int weight>;

        return $i0;
    }

    public static void ED_weight(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int weight> = i0;

        return;
    }

    public static int ED_edge_type(h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        h.ST_Agedgeinfo_t $r2;
        int $i0;

        r0 := @parameter0: h.ST_Agedge_s;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $i0 = $r2.<h.ST_Agedgeinfo_t: int edge_type>;

        return $i0;
    }

    public static void ED_edge_type(h.ST_Agedge_s, int)
    {
        h.ST_Agedge_s r0;
        h.ST_Agrec_s $r1;
        int i0;
        h.ST_Agedgeinfo_t $r2;

        r0 := @parameter0: h.ST_Agedge_s;

        i0 := @parameter1: int;

        $r1 = staticinvoke <smetana.core.Macro: h.ST_Agrec_s AGDATA(h.ST_Agobj_s)>(r0);

        $r2 = (h.ST_Agedgeinfo_t) $r1;

        $r2.<h.ST_Agedgeinfo_t: int edge_type> = i0;

        return;
    }

    public static int[] ALLOC_INT(int, int[])
    {
        int[] r0, r1, $r2;
        int i0, $i1, $i2, $i3, i4;

        i0 := @parameter0: int;

        r0 := @parameter1: int[];

        if r0 != null goto label1;

        $r2 = newarray (int)[i0];

        return $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 <= i0 goto label2;

        return r0;

     label2:
        r1 = newarray (int)[i0];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $i3 = r0[i4];

        r1[i4] = $i3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static smetana.core.__ptr__ RALLOC(int, smetana.core.__ptr__, java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0;
        smetana.core.__ptr__ r1;
        java.lang.Class r2;

        i0 := @parameter0: int;

        r1 := @parameter1: smetana.core.__ptr__;

        r2 := @parameter2: java.lang.Class;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static void elist_append(h.ST_Agedge_s, h.ST_elist)
    {
        h.ST_elist r0;
        int $i0, $i1, $i2, $i3, $i4;
        smetana.core.CArrayOfStar $r1, $r2, $r3, $r5;
        h.ST_Agedge_s r4;

        r4 := @parameter0: h.ST_Agedge_s;

        r0 := @parameter1: h.ST_elist;

        $i0 = r0.<h.ST_elist: int size>;

        $i1 = $i0 + 2;

        $r1 = r0.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $r2 = staticinvoke <smetana.core.CArrayOfStar: smetana.core.CArrayOfStar REALLOC(int,smetana.core.CArrayOfStar,java.lang.Class)>($i1, $r1, class "Lh/ST_Agedge_s;");

        r0.<h.ST_elist: smetana.core.CArrayOfStar list> = $r2;

        $r3 = r0.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $i2 = r0.<h.ST_elist: int size>;

        $i3 = $i2 + 1;

        r0.<h.ST_elist: int size> = $i3;

        virtualinvoke $r3.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>($i2, r4);

        $r5 = r0.<h.ST_elist: smetana.core.CArrayOfStar list>;

        $i4 = r0.<h.ST_elist: int size>;

        virtualinvoke $r5.<smetana.core.CArrayOfStar: void set_(int,java.lang.Object)>($i4, null);

        return;
    }

    public static void alloc_elist(int, h.ST_elist)
    {
        h.ST_elist r0;
        int i0, $i1;
        smetana.core.CArrayOfStar $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: h.ST_elist;

        r0.<h.ST_elist: int size> = 0;

        $i1 = i0 + 1;

        $r1 = staticinvoke <smetana.core.CArrayOfStar: smetana.core.CArrayOfStar ALLOC(int,java.lang.Class)>($i1, class "Lh/ST_Agedge_s;");

        r0.<h.ST_elist: smetana.core.CArrayOfStar list> = $r1;

        return;
    }

    public static void free_list(h.ST_elist)
    {
        h.ST_elist r0;
        smetana.core.CArrayOfStar $r1, $r2;

        r0 := @parameter0: h.ST_elist;

        $r1 = r0.<h.ST_elist: smetana.core.CArrayOfStar list>;

        if $r1 == null goto label1;

        $r2 = r0.<h.ST_elist: smetana.core.CArrayOfStar list>;

        staticinvoke <smetana.core.Memory: void free(java.lang.Object)>($r2);

     label1:
        return;
    }

    public static double ABS(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        return $d1;
    }

    public static int ABS(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        return $i1;
    }

    public static double MAX(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        return $d2;
    }

    public static int MAX(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        return $i2;
    }

    public static double MIN(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1);

        return $d2;
    }

    public static int MIN(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        return $i2;
    }

    public static boolean BETWEEN(double, double, double)
    {
        double d0, d1, d2;
        byte $b0, $b1;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d0 cmpg d1;

        if $b0 > 0 goto label1;

        $b1 = d1 cmpg d2;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean BETWEEN(int, int, int)
    {
        int i0, i1, i2;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 > i1 goto label1;

        if i1 > i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int ROUND(double)
    {
        double d0, $d1, $d2;
        byte $b0;
        int $i1;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $d2 = d0 + 0.5;

        $i1 = (int) $d2;

        goto label2;

     label1:
        $d1 = d0 - 0.5;

        $i1 = (int) $d1;

     label2:
        return $i1;
    }

    public static void MAKEFWDEDGE(h.ST_Agedge_s, h.ST_Agedge_s)
    {
        h.ST_Agedge_s r0, r5;
        h.ST_Agobj_s $r2, $r6, $r9;
        h.ST_Agrec_s $r3, $r7;
        h.ST_Agedgeinfo_t r4, $r8;
        h.ST_Agnode_s $r10, $r11;
        h.ST_port $r12, $r13;

        r0 := @parameter0: h.ST_Agedge_s;

        r5 := @parameter1: h.ST_Agedge_s;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LOG(java.lang.String)>("MAKEFWDEDGE");

        $r2 = r0.<h.ST_Agedge_s: h.ST_Agobj_s base>;

        $r3 = $r2.<h.ST_Agobj_s: h.ST_Agrec_s data>;

        r4 = (h.ST_Agedgeinfo_t) $r3;

        $r6 = r5.<h.ST_Agedge_s: h.ST_Agobj_s base>;

        $r7 = $r6.<h.ST_Agobj_s: h.ST_Agrec_s data>;

        $r8 = (h.ST_Agedgeinfo_t) $r7;

        virtualinvoke r4.<h.ST_Agedgeinfo_t: void ___(smetana.core.__struct__)>($r8);

        virtualinvoke r0.<h.ST_Agedge_s: void ___(smetana.core.__struct__)>(r5);

        $r9 = r0.<h.ST_Agedge_s: h.ST_Agobj_s base>;

        $r9.<h.ST_Agobj_s: h.ST_Agrec_s data> = r4;

        $r10 = staticinvoke <smetana.core.Macro: h.ST_Agnode_s AGHEAD(h.ST_Agedge_s)>(r5);

        staticinvoke <smetana.core.Macro: void M_agtail(h.ST_Agedge_s,h.ST_Agnode_s)>(r0, $r10);

        $r11 = staticinvoke <smetana.core.Macro: h.ST_Agnode_s AGTAIL(h.ST_Agedge_s)>(r5);

        staticinvoke <smetana.core.Macro: void M_aghead(h.ST_Agedge_s,h.ST_Agnode_s)>(r0, $r11);

        $r12 = staticinvoke <smetana.core.Macro: h.ST_port ED_head_port(h.ST_Agedge_s)>(r5);

        staticinvoke <smetana.core.Macro: void ED_tail_port(h.ST_Agedge_s,h.ST_port)>(r0, $r12);

        $r13 = staticinvoke <smetana.core.Macro: h.ST_port ED_tail_port(h.ST_Agedge_s)>(r5);

        staticinvoke <smetana.core.Macro: void ED_head_port(h.ST_Agedge_s,h.ST_port)>(r0, $r13);

        staticinvoke <smetana.core.Macro: void ED_edge_type(h.ST_Agedge_s,int)>(r0, 1);

        staticinvoke <smetana.core.Macro: void ED_to_orig(h.ST_Agedge_s,h.ST_Agedge_s)>(r0, r5);

        return;
    }

    public static double fabs(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        return $d1;
    }

    public static double hypot(double, double)
    {
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7, d8, d9, d10;

        d4 := @parameter0: double;

        d5 := @parameter1: double;

        d6 = staticinvoke <java.lang.Math: double abs(double)>(d4);

        d7 = staticinvoke <java.lang.Math: double abs(double)>(d5);

        d8 = staticinvoke <java.lang.Math: double min(double,double)>(d6, d7);

        d9 = staticinvoke <java.lang.Math: double max(double,double)>(d6, d7);

        d10 = d8 / d9;

        $d0 = d10 * d10;

        $d1 = 1.0 + $d0;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        $d3 = d9 * $d2;

        return $d3;
    }

    public static double SQR(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 * d0;

        return $d1;
    }

    public static boolean APPROXEQPT(h.ST_pointf, h.ST_pointf, double)
    {
        h.ST_pointf r0, r1;
        double $d0, d1, $d2;
        byte $b0;
        boolean $z0;

        r0 := @parameter0: h.ST_pointf;

        r1 := @parameter1: h.ST_pointf;

        d1 := @parameter2: double;

        $d0 = staticinvoke <smetana.core.Macro: double DIST2(h.ST_pointf,h.ST_pointf)>(r0, r1);

        $d2 = staticinvoke <smetana.core.Macro: double SQR(double)>(d1);

        $b0 = $d0 cmpg $d2;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static double LEN2(double, double)
    {
        double d0, $d1, d2, $d3, $d4;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $d1 = staticinvoke <smetana.core.Macro: double SQR(double)>(d0);

        $d3 = staticinvoke <smetana.core.Macro: double SQR(double)>(d2);

        $d4 = $d1 + $d3;

        return $d4;
    }

    public static double LEN(double, double)
    {
        double d0, d1, $d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <smetana.core.Macro: double LEN2(double,double)>(d0, d1);

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        return $d3;
    }

    public static double DIST2(h.ST_pointf, h.ST_pointf)
    {
        h.ST_pointf r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: h.ST_pointf;

        r1 := @parameter1: h.ST_pointf;

        $d1 = r0.<h.ST_pointf: double x>;

        $d0 = r1.<h.ST_pointf: double x>;

        $d5 = $d1 - $d0;

        $d3 = r0.<h.ST_pointf: double y>;

        $d2 = r1.<h.ST_pointf: double y>;

        $d4 = $d3 - $d2;

        $d6 = staticinvoke <smetana.core.Macro: double LEN2(double,double)>($d5, $d4);

        return $d6;
    }

    public static double DIST2(h.ST_point, h.ST_point)
    {
        h.ST_point r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2;

        r0 := @parameter0: h.ST_point;

        r1 := @parameter1: h.ST_point;

        $i1 = r0.<h.ST_point: int x>;

        $i0 = r1.<h.ST_point: int x>;

        $i2 = $i1 - $i0;

        $d1 = (double) $i2;

        $i4 = r0.<h.ST_point: int y>;

        $i3 = r1.<h.ST_point: int y>;

        $i5 = $i4 - $i3;

        $d0 = (double) $i5;

        $d2 = staticinvoke <smetana.core.Macro: double LEN2(double,double)>($d1, $d0);

        return $d2;
    }

    public static boolean INSIDE(h.ST_pointf, h.ST_boxf)
    {
        h.ST_boxf r0;
        h.ST_pointf $r1, r2, $r3, $r4, $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: h.ST_pointf;

        r0 := @parameter1: h.ST_boxf;

        $r1 = r0.<h.ST_boxf: h.ST_pointf LL>;

        $d2 = $r1.<h.ST_pointf: double x>;

        $d1 = r2.<h.ST_pointf: double x>;

        $r3 = r0.<h.ST_boxf: h.ST_pointf UR>;

        $d0 = $r3.<h.ST_pointf: double x>;

        $z0 = staticinvoke <smetana.core.Macro: boolean BETWEEN(double,double,double)>($d2, $d1, $d0);

        if $z0 == 0 goto label1;

        $r4 = r0.<h.ST_boxf: h.ST_pointf LL>;

        $d5 = $r4.<h.ST_pointf: double y>;

        $d4 = r2.<h.ST_pointf: double y>;

        $r5 = r0.<h.ST_boxf: h.ST_pointf UR>;

        $d3 = $r5.<h.ST_pointf: double y>;

        $z1 = staticinvoke <smetana.core.Macro: boolean BETWEEN(double,double,double)>($d5, $d4, $d3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static double RADIANS(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;

        $d1 = d0 / 180.0;

        $d2 = $d1 * 3.141592653589793;

        return $d2;
    }

    public static double DISTSQ(h.ST_pointf, h.ST_pointf)
    {
        h.ST_pointf r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @parameter0: h.ST_pointf;

        r1 := @parameter1: h.ST_pointf;

        $d1 = r0.<h.ST_pointf: double x>;

        $d0 = r1.<h.ST_pointf: double x>;

        $d5 = $d1 - $d0;

        $d3 = r0.<h.ST_pointf: double x>;

        $d2 = r1.<h.ST_pointf: double x>;

        $d4 = $d3 - $d2;

        $d13 = $d5 * $d4;

        $d7 = r0.<h.ST_pointf: double y>;

        $d6 = r1.<h.ST_pointf: double y>;

        $d11 = $d7 - $d6;

        $d9 = r0.<h.ST_pointf: double y>;

        $d8 = r1.<h.ST_pointf: double y>;

        $d10 = $d9 - $d8;

        $d12 = $d11 * $d10;

        $d14 = $d13 + $d12;

        return $d14;
    }

    public static void hackInitDimensionFromLabel(h.ST_pointf, java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r11;
        boolean $z0, $z1;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher r2;
        int i0, i1;
        h.ST_pointf r5;
        double $d0, $d1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalStateException $r12;

        r5 := @parameter0: h.ST_pointf;

        r0 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("_dim_\\d+_\\d+_");

        if $z0 == 0 goto label2;

        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("_dim_(\\d+)_(\\d+)_");

        r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z1 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z1 != 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label1:
        $r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $d0 = (double) i0;

        r5.<h.ST_pointf: double x> = $d0;

        $d1 = (double) i1;

        r5.<h.ST_pointf: double y> = $d1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hacking dimension to width=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" height=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <smetana.core.JUtils: void LOG2(java.lang.String)>($r11);

     label2:
        return;
    }

    public static smetana.core.CString createHackInitDimensionFromLabel(int, int)
    {
        smetana.core.CString $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        int i0, i1;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new smetana.core.CString;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_dim_");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<smetana.core.CString: void <init>(java.lang.String)>($r7);

        return $r0;
    }

    public static void PF2P(h.ST_pointf, h.ST_pointf)
    {
        h.ST_pointf r0, r1;
        double $d0, $d1, $d2, $d3;
        int $i0, $i1;

        r1 := @parameter0: h.ST_pointf;

        r0 := @parameter1: h.ST_pointf;

        $d0 = r1.<h.ST_pointf: double x>;

        $i0 = staticinvoke <smetana.core.Macro: int ROUND(double)>($d0);

        $d1 = (double) $i0;

        r0.<h.ST_pointf: double x> = $d1;

        $d2 = r1.<h.ST_pointf: double y>;

        $i1 = staticinvoke <smetana.core.Macro: int ROUND(double)>($d2);

        $d3 = (double) $i1;

        r0.<h.ST_pointf: double y> = $d3;

        return;
    }

    public static void PF2P(h.ST_pointf, h.ST_point)
    {
        h.ST_point r0;
        h.ST_pointf r1;
        double $d0, $d1;
        int $i0, $i1;

        r1 := @parameter0: h.ST_pointf;

        r0 := @parameter1: h.ST_point;

        $d0 = r1.<h.ST_pointf: double x>;

        $i0 = staticinvoke <smetana.core.Macro: int ROUND(double)>($d0);

        r0.<h.ST_point: int x> = $i0;

        $d1 = r1.<h.ST_pointf: double y>;

        $i1 = staticinvoke <smetana.core.Macro: int ROUND(double)>($d1);

        r0.<h.ST_point: int y> = $i1;

        return;
    }

    public static void dtinsert(h.ST_dt_s, java.lang.Object)
    {
        h.ST_dt_s r0;
        java.lang.Object[] $r1;
        java.lang.Object r2;
        smetana.core.CFunction $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: h.ST_dt_s;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<h.ST_dt_s: smetana.core.CFunction searchf>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r1[1] = r2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[2] = $r4;

        interfaceinvoke $r3.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r1);

        return;
    }

    public static java.lang.Object dtsearch(h.ST_dt_s, java.lang.Object)
    {
        h.ST_dt_s r0;
        java.lang.Object[] $r1;
        java.lang.Object r2, $r5;
        smetana.core.CFunction $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: h.ST_dt_s;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<h.ST_dt_s: smetana.core.CFunction searchf>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r1[1] = r2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r1[2] = $r4;

        $r5 = interfaceinvoke $r3.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r1);

        return $r5;
    }

    public static java.lang.Object dtfirst(h.ST_dt_s)
    {
        h.ST_dt_s r0;
        java.lang.Object[] $r1;
        smetana.core.CFunction $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;

        r0 := @parameter0: h.ST_dt_s;

        $r2 = r0.<h.ST_dt_s: smetana.core.CFunction searchf>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r1[1] = null;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        $r1[2] = $r3;

        $r4 = interfaceinvoke $r2.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r1);

        return $r4;
    }

    public static java.lang.Object dtnext(h.ST_dt_s, java.lang.Object)
    {
        h.ST_dt_s r0;
        java.lang.Object[] $r1;
        java.lang.Object r2, $r5;
        smetana.core.CFunction $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: h.ST_dt_s;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<h.ST_dt_s: smetana.core.CFunction searchf>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r1[1] = r2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r1[2] = $r4;

        $r5 = interfaceinvoke $r3.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r1);

        return $r5;
    }

    public static java.lang.Object dtdelete(h.ST_dt_s, java.lang.Object)
    {
        h.ST_dt_s r0;
        java.lang.Object[] $r1;
        java.lang.Object r2, $r5;
        smetana.core.CFunction $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: h.ST_dt_s;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<h.ST_dt_s: smetana.core.CFunction searchf>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r1[1] = r2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[2] = $r4;

        $r5 = interfaceinvoke $r3.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r1);

        return $r5;
    }

    public static void rrotate(h.ST_dtlink_s, h.ST_dtlink_s)
    {
        h.ST_dtlink_s r0, r1, $r2;

        r0 := @parameter0: h.ST_dtlink_s;

        r1 := @parameter1: h.ST_dtlink_s;

        $r2 = r1.<h.ST_dtlink_s: h.ST_dtlink_s right>;

        r0.<h.ST_dtlink_s: h.ST_dtlink_s _left> = $r2;

        r1.<h.ST_dtlink_s: h.ST_dtlink_s right> = r0;

        return;
    }

    public static void lrotate(h.ST_dtlink_s, h.ST_dtlink_s)
    {
        h.ST_dtlink_s r0, r1, $r2;

        r0 := @parameter0: h.ST_dtlink_s;

        r1 := @parameter1: h.ST_dtlink_s;

        $r2 = r1.<h.ST_dtlink_s: h.ST_dtlink_s _left>;

        r0.<h.ST_dtlink_s: h.ST_dtlink_s right> = $r2;

        r1.<h.ST_dtlink_s: h.ST_dtlink_s _left> = r0;

        return;
    }

    public static h.ST_dtlink_s rlink____warning(h.ST_dtlink_s, h.ST_dtlink_s)
    {
        h.ST_dtlink_s r0, r1;

        r0 := @parameter0: h.ST_dtlink_s;

        r1 := @parameter1: h.ST_dtlink_s;

        r0.<h.ST_dtlink_s: h.ST_dtlink_s _left> = r1;

        return r1;
    }

    public static h.ST_dtlink_s llink____warning(h.ST_dtlink_s, h.ST_dtlink_s)
    {
        h.ST_dtlink_s r0, r1;

        r0 := @parameter0: h.ST_dtlink_s;

        r1 := @parameter1: h.ST_dtlink_s;

        r0.<h.ST_dtlink_s: h.ST_dtlink_s right> = r1;

        return r1;
    }

    public static h.ST_Agsym_s agfindgraphattr(h.ST_Agraph_s, java.lang.String)
    {
        h.ST_Agraph_s r0;
        smetana.core.CString $r1;
        java.lang.String r2;
        h.ST_Agsym_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: java.lang.String;

        $r1 = new smetana.core.CString;

        specialinvoke $r1.<smetana.core.CString: void <init>(java.lang.String)>(r2);

        $r3 = staticinvoke <gen.lib.cgraph.attr__c: h.ST_Agsym_s agattr(h.ST_Agraph_s,int,smetana.core.CString,smetana.core.CString)>(r0, 0, $r1, null);

        return $r3;
    }

    public static h.ST_Agsym_s agfindnodeattr(h.ST_Agraph_s, java.lang.String)
    {
        h.ST_Agraph_s r0;
        smetana.core.CString $r1;
        java.lang.String r2;
        h.ST_Agsym_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: java.lang.String;

        $r1 = new smetana.core.CString;

        specialinvoke $r1.<smetana.core.CString: void <init>(java.lang.String)>(r2);

        $r3 = staticinvoke <gen.lib.cgraph.attr__c: h.ST_Agsym_s agattr(h.ST_Agraph_s,int,smetana.core.CString,smetana.core.CString)>(r0, 1, $r1, null);

        return $r3;
    }

    public static h.ST_Agsym_s agfindedgeattr(h.ST_Agraph_s, java.lang.String)
    {
        h.ST_Agraph_s r0;
        smetana.core.CString $r1;
        java.lang.String r2;
        h.ST_Agsym_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r2 := @parameter1: java.lang.String;

        $r1 = new smetana.core.CString;

        specialinvoke $r1.<smetana.core.CString: void <init>(java.lang.String)>(r2);

        $r3 = staticinvoke <gen.lib.cgraph.attr__c: h.ST_Agsym_s agattr(h.ST_Agraph_s,int,smetana.core.CString,smetana.core.CString)>(r0, 2, $r1, null);

        return $r3;
    }

    public static int POINTS(double)
    {
        double d0, $d1;
        int $i0;

        d0 := @parameter0: double;

        $d1 = d0 * 72.0;

        $i0 = staticinvoke <smetana.core.Macro: int ROUND(double)>($d1);

        return $i0;
    }

    public static double INCH2PS(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 * 72.0;

        return $d1;
    }

    public static double PS2INCH(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 / 72.0;

        return $d1;
    }

    public static void PAD(h.ST_pointf)
    {
        h.ST_pointf r0;

        r0 := @parameter0: h.ST_pointf;

        staticinvoke <smetana.core.Macro: void XPAD(h.ST_pointf)>(r0);

        staticinvoke <smetana.core.Macro: void YPAD(h.ST_pointf)>(r0);

        return;
    }

    public static void YPAD(h.ST_pointf)
    {
        h.ST_pointf r0;
        double $d0, $d1;

        r0 := @parameter0: h.ST_pointf;

        $d0 = r0.<h.ST_pointf: double y>;

        $d1 = $d0 + 8.0;

        r0.<h.ST_pointf: double y> = $d1;

        return;
    }

    public static void XPAD(h.ST_pointf)
    {
        h.ST_pointf r0;
        double $d0, $d1;

        r0 := @parameter0: h.ST_pointf;

        $d0 = r0.<h.ST_pointf: double x>;

        $d1 = $d0 + 16.0;

        r0.<h.ST_pointf: double x> = $d1;

        return;
    }

    public static void UNFLATTEN(h.ST_dt_s)
    {
        h.ST_dt_s r0;
        h.ST_dtdata_s $r1;
        int $i0, $i1;

        r0 := @parameter0: h.ST_dt_s;

        $r1 = r0.<h.ST_dt_s: h.ST_dtdata_s data>;

        $i0 = $r1.<h.ST_dtdata_s: int type>;

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        staticinvoke <gen.lib.cdt.dtrestore__c: int dtrestore(h.ST_dt_s,h.ST_dtlink_s)>(r0, null);

     label1:
        return;
    }

    public static smetana.core.__ptr__ AGCLOS_id(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agclos_s $r1;
        h.ST_Agdstate_s $r2;
        smetana.core.__ptr__ $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = r0.<h.ST_Agraph_s: h.ST_Agclos_s clos>;

        $r2 = $r1.<h.ST_Agclos_s: h.ST_Agdstate_s state>;

        $r3 = $r2.<h.ST_Agdstate_s: smetana.core.__ptr__ id>;

        return $r3;
    }

    public static h.ST_Agiddisc_s AGDISC_id(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agclos_s $r1;
        h.ST_Agdisc_s $r2;
        h.ST_Agiddisc_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = r0.<h.ST_Agraph_s: h.ST_Agclos_s clos>;

        $r2 = $r1.<h.ST_Agclos_s: h.ST_Agdisc_s disc>;

        $r3 = $r2.<h.ST_Agdisc_s: h.ST_Agiddisc_s id>;

        return $r3;
    }

    public static smetana.core.__ptr__ AGCLOS_mem(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agclos_s $r1;
        h.ST_Agdstate_s $r2;
        smetana.core.__ptr__ $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = r0.<h.ST_Agraph_s: h.ST_Agclos_s clos>;

        $r2 = $r1.<h.ST_Agclos_s: h.ST_Agdstate_s state>;

        $r3 = $r2.<h.ST_Agdstate_s: smetana.core.__ptr__ mem>;

        return $r3;
    }

    public static h.ST_Agmemdisc_s AGDISC_mem(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agclos_s $r1;
        h.ST_Agdisc_s $r2;
        h.ST_Agmemdisc_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = r0.<h.ST_Agraph_s: h.ST_Agclos_s clos>;

        $r2 = $r1.<h.ST_Agclos_s: h.ST_Agdisc_s disc>;

        $r3 = $r2.<h.ST_Agdisc_s: h.ST_Agmemdisc_s mem>;

        return $r3;
    }

    public static h.ST_Agiodisc_s AGDISC_io(h.ST_Agraph_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agclos_s $r1;
        h.ST_Agdisc_s $r2;
        h.ST_Agiodisc_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        $r1 = r0.<h.ST_Agraph_s: h.ST_Agclos_s clos>;

        $r2 = $r1.<h.ST_Agclos_s: h.ST_Agdisc_s disc>;

        $r3 = $r2.<h.ST_Agdisc_s: h.ST_Agiodisc_s io>;

        return $r3;
    }

    public static smetana.core.__ptr__ _DTKEY(smetana.core.__ptr__, smetana.core.OFFSET, int)
    {
        smetana.core.__ptr__ r0, $r3;
        smetana.core.OFFSET r1;
        java.lang.Object $r2;
        int i0;

        r0 := @parameter0: smetana.core.__ptr__;

        r1 := @parameter1: smetana.core.OFFSET;

        i0 := @parameter2: int;

        $r2 = interfaceinvoke r0.<smetana.core.__ptr__: java.lang.Object getTheField(smetana.core.OFFSET)>(r1);

        $r3 = (smetana.core.__ptr__) $r2;

        return $r3;
    }

    public static int _DTCMP(h.ST_dt_s, smetana.core.__ptr__, smetana.core.__ptr__, h.ST_dtdisc_s, smetana.core.CFunction, int)
    {
        smetana.core.CFunction r0;
        int i0, $i1;
        smetana.core.__ptr__ r1, r2;
        smetana.core.CString $r3, $r4;
        java.lang.Object[] $r5;
        h.ST_dt_s r6;
        h.ST_dtdisc_s r7;
        java.lang.Object $r8;
        java.lang.Integer $r9;

        r6 := @parameter0: h.ST_dt_s;

        r1 := @parameter1: smetana.core.__ptr__;

        r2 := @parameter2: smetana.core.__ptr__;

        r7 := @parameter3: h.ST_dtdisc_s;

        r0 := @parameter4: smetana.core.CFunction;

        i0 := @parameter5: int;

        if r0 == null goto label1;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = r6;

        $r5[1] = r1;

        $r5[2] = r2;

        $r5[3] = r7;

        $r8 = interfaceinvoke r0.<smetana.core.CFunction: java.lang.Object exe(java.lang.Object[])>($r5);

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        goto label3;

     label1:
        if i0 > 0 goto label2;

        $r4 = (smetana.core.CString) r1;

        $r3 = (smetana.core.CString) r2;

        $i1 = staticinvoke <smetana.core.JUtils: int strcmp(smetana.core.CString,smetana.core.CString)>($r4, $r3);

        goto label3;

     label2:
        $i1 = staticinvoke <smetana.core.Macro: int UNSUPPORTED_INT(java.lang.String)>("memcmp(ok,nk,sz)");

     label3:
        return $i1;
    }

    public static h.ST_Agedge_s agfindedge(h.ST_Agraph_s, h.ST_Agnode_s, h.ST_Agnode_s)
    {
        h.ST_Agraph_s r0;
        h.ST_Agnode_s r1, r2;
        h.ST_Agedge_s $r3;

        r0 := @parameter0: h.ST_Agraph_s;

        r1 := @parameter1: h.ST_Agnode_s;

        r2 := @parameter2: h.ST_Agnode_s;

        $r3 = staticinvoke <gen.lib.cgraph.edge__c: h.ST_Agedge_s agedge(h.ST_Agraph_s,h.ST_Agnode_s,h.ST_Agnode_s,smetana.core.CString,boolean)>(r0, r1, r2, null, 0);

        return $r3;
    }

    public static int flatindex(h.ST_Agnode_s)
    {
        h.ST_Agnode_s r0;
        int $i0;

        r0 := @parameter0: h.ST_Agnode_s;

        $i0 = staticinvoke <smetana.core.Macro: int ND_low(h.ST_Agnode_s)>(r0);

        return $i0;
    }

    public static void flatindex(h.ST_Agnode_s, int)
    {
        h.ST_Agnode_s r0;
        int i0;

        r0 := @parameter0: h.ST_Agnode_s;

        i0 := @parameter1: int;

        staticinvoke <smetana.core.Macro: void ND_low(h.ST_Agnode_s,int)>(r0, i0);

        return;
    }

    public static h.ST_subtree_t ND_subtree(h.ST_Agnode_s)
    {
        java.lang.UnsupportedOperationException $r0;
        h.ST_Agnode_s r1;

        r1 := @parameter0: h.ST_Agnode_s;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static void ND_subtree_set(h.ST_Agnode_s, h.ST_subtree_t)
    {
        java.lang.UnsupportedOperationException $r0;
        h.ST_Agnode_s r1;
        h.ST_subtree_t r2;

        r1 := @parameter0: h.ST_Agnode_s;

        r2 := @parameter1: h.ST_subtree_t;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static boolean streq(smetana.core.CString, smetana.core.CString)
    {
        smetana.core.CString r0, r1;
        char $c0, $c1;
        int $i2;
        boolean $z0, $z1;

        r0 := @parameter0: smetana.core.CString;

        r1 := @parameter1: smetana.core.CString;

        $c0 = virtualinvoke r0.<smetana.core.CString: char charAt(int)>(0);

        $c1 = virtualinvoke r1.<smetana.core.CString: char charAt(int)>(0);

        if $c0 != $c1 goto label1;

        $i2 = staticinvoke <smetana.core.JUtils: int strcmp(smetana.core.CString,smetana.core.CString)>(r0, r1);

        $z0 = staticinvoke <smetana.core.Macro: boolean N(int)>($i2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean streq(smetana.core.CString, java.lang.String)
    {
        smetana.core.CString r0, $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @parameter0: smetana.core.CString;

        r2 := @parameter1: java.lang.String;

        $r1 = new smetana.core.CString;

        specialinvoke $r1.<smetana.core.CString: void <init>(java.lang.String)>(r2);

        $z0 = staticinvoke <smetana.core.Macro: boolean streq(smetana.core.CString,smetana.core.CString)>(r0, $r1);

        return $z0;
    }

    static void <clinit>()
    {
        double $d0;
        smetana.core.CString $r0, $r1;

        <smetana.core.Macro: int BITS_PER_ARROW_TYPE> = 4;

        <smetana.core.Macro: int BITS_PER_ARROW> = 8;

        <smetana.core.Macro: int NUMB_OF_ARROW_HEADS> = 4;

        <smetana.core.Macro: double ARROW_LENGTH> = 10.0;

        <smetana.core.Macro: int ARR_TYPE_GAP> = 8;

        <smetana.core.Macro: int ARR_TYPE_CURVE> = 7;

        <smetana.core.Macro: int ARR_TYPE_DOT> = 6;

        <smetana.core.Macro: int ARR_TYPE_DIAMOND> = 5;

        <smetana.core.Macro: int ARR_TYPE_BOX> = 4;

        <smetana.core.Macro: int ARR_TYPE_TEE> = 3;

        <smetana.core.Macro: int ARR_TYPE_CROW> = 2;

        <smetana.core.Macro: int ARR_TYPE_NORM> = 1;

        <smetana.core.Macro: int ARR_TYPE_NONE> = 0;

        <smetana.core.Macro: int ARR_NONE> = 0;

        <smetana.core.Macro: int SMALLBUF> = 128;

        <smetana.core.Macro: int NODECARD> = 64;

        <smetana.core.Macro: int SEARCHSIZE> = 30;

        <smetana.core.Macro: int SHAPE_MASK> = 2130706432;

        <smetana.core.Macro: int FIXEDSHAPE> = 2048;

        <smetana.core.Macro: int UNDERLINE> = 1024;

        <smetana.core.Macro: int WEDGED> = 512;

        <smetana.core.Macro: int DASHED> = 256;

        <smetana.core.Macro: int DOTTED> = 128;

        <smetana.core.Macro: int STRIPED> = 64;

        <smetana.core.Macro: int INVISIBLE> = 32;

        <smetana.core.Macro: int AUXLABELS> = 16;

        <smetana.core.Macro: int DIAGONALS> = 8;

        <smetana.core.Macro: int ROUNDED> = 4;

        <smetana.core.Macro: int RADIAL> = 2;

        <smetana.core.Macro: int FILLED> = 1;

        <smetana.core.Macro: double MIN_FONTSIZE> = 1.0;

        <smetana.core.Macro: double DEFAULT_LABEL_FONTSIZE> = 11.0;

        <smetana.core.Macro: double DEFAULT_FONTSIZE> = 14.0;

        <smetana.core.Macro: int CL_CROSS> = 1000;

        <smetana.core.Macro: int CL_OFFSET> = 8;

        <smetana.core.Macro: int CL_BACK> = 10;

        <smetana.core.Macro: int CB_DELETION> = 102;

        <smetana.core.Macro: int CB_UPDATE> = 101;

        <smetana.core.Macro: int CB_INITIALIZE> = 100;

        <smetana.core.Macro: int GAP> = 4;

        <smetana.core.Macro: int LEFT_IX> = 3;

        <smetana.core.Macro: int TOP_IX> = 2;

        <smetana.core.Macro: int RIGHT_IX> = 1;

        <smetana.core.Macro: int BOTTOM_IX> = 0;

        <smetana.core.Macro: double MIN_NODEWIDTH> = 0.01;

        <smetana.core.Macro: double DEFAULT_NODEWIDTH> = 0.75;

        <smetana.core.Macro: double MIN_NODEHEIGHT> = 0.02;

        <smetana.core.Macro: double DEFAULT_NODEHEIGHT> = 0.5;

        <smetana.core.Macro: java.lang.String DEFAULT_NODESHAPE> = "ellipse";

        <smetana.core.Macro: java.lang.String NODENAME_ESC> = "\\N";

        <smetana.core.Macro: int MAXDIM> = 10;

        <smetana.core.Macro: double MYHUGE> = 1.0E37;

        <smetana.core.Macro: double Spring_coeff> = 1.0;

        <smetana.core.Macro: int GVSPLINES> = 1;

        <smetana.core.Macro: int GVBEGIN> = 0;

        <smetana.core.Macro: int POINTS_PER_INCH> = 72;

        <smetana.core.Macro: double MIN_RANKSEP> = 0.02;

        <smetana.core.Macro: double DEFAULT_RANKSEP> = 0.5;

        <smetana.core.Macro: double MIN_NODESEP> = 0.02;

        <smetana.core.Macro: double DEFAULT_NODESEP> = 0.25;

        <smetana.core.Macro: int NOCLUST> = 102;

        <smetana.core.Macro: int GLOBAL> = 101;

        <smetana.core.Macro: int LOCAL> = 100;

        <smetana.core.Macro: int NO_SUPPORT> = 999;

        <smetana.core.Macro: int GVRENDER_PLUGIN> = 300;

        <smetana.core.Macro: int DT_MEMORYF> = 1;

        <smetana.core.Macro: int DT_MALLOC> = 0;

        <smetana.core.Macro: int DT_WALK> = 8192;

        <smetana.core.Macro: int DT_FLATTEN> = 4096;

        <smetana.core.Macro: int DT_HASHSIZE> = 7;

        <smetana.core.Macro: int DT_ENDCLOSE> = 6;

        <smetana.core.Macro: int DT_ENDOPEN> = 5;

        <smetana.core.Macro: int DT_METH> = 4;

        <smetana.core.Macro: int DT_DISC> = 3;

        <smetana.core.Macro: int DT_CLOSE> = 2;

        <smetana.core.Macro: int DT_OPEN> = 1;

        <smetana.core.Macro: int DT_APPEND> = 8192;

        <smetana.core.Macro: int DT_DETACH> = 4096;

        <smetana.core.Macro: int DT_ATTACH> = 2048;

        <smetana.core.Macro: int DT_VSEARCH> = 1024;

        <smetana.core.Macro: int DT_MATCH> = 512;

        <smetana.core.Macro: int DT_LAST> = 256;

        <smetana.core.Macro: int DT_FIRST> = 128;

        <smetana.core.Macro: int DT_CLEAR> = 64;

        <smetana.core.Macro: int DT_RENEW> = 32;

        <smetana.core.Macro: int DT_PREV> = 16;

        <smetana.core.Macro: int DT_NEXT> = 8;

        <smetana.core.Macro: int DT_SEARCH> = 4;

        <smetana.core.Macro: int DT_DELETE> = 2;

        <smetana.core.Macro: int DT_INSERT> = 1;

        <smetana.core.Macro: int DT_SAMEHASH> = 2;

        <smetana.core.Macro: int DT_SAMECMP> = 1;

        <smetana.core.Macro: int DT_METHODS> = 255;

        <smetana.core.Macro: int DT_DEQUE> = 128;

        <smetana.core.Macro: int DT_QUEUE> = 64;

        <smetana.core.Macro: int DT_STACK> = 32;

        <smetana.core.Macro: int DT_LIST> = 16;

        <smetana.core.Macro: int DT_OBAG> = 8;

        <smetana.core.Macro: int DT_OSET> = 4;

        <smetana.core.Macro: int DT_BAG> = 2;

        <smetana.core.Macro: int DT_SET> = 1;

        <smetana.core.Macro: int DT_FOUND> = 32768;

        <smetana.core.Macro: int LAYOUT_USES_RANKDIR> = 1;

        <smetana.core.Macro: int EDGETYPEMASK> = 15;

        <smetana.core.Macro: int SELFEDGE> = 8;

        <smetana.core.Macro: int SELFNPEDGE> = 8;

        <smetana.core.Macro: int SELFWPEDGE> = 4;

        <smetana.core.Macro: int FLATEDGE> = 2;

        <smetana.core.Macro: int REGULAREDGE> = 1;

        <smetana.core.Macro: int RANKDIR_RL> = 3;

        <smetana.core.Macro: int RANKDIR_BT> = 2;

        <smetana.core.Macro: int RANKDIR_LR> = 1;

        <smetana.core.Macro: int RANKDIR_TB> = 0;

        <smetana.core.Macro: int LABEL_AT_RIGHT> = 4;

        <smetana.core.Macro: int LABEL_AT_LEFT> = 2;

        <smetana.core.Macro: int LABEL_AT_TOP> = 1;

        <smetana.core.Macro: int LABEL_AT_BOTTOM> = 0;

        <smetana.core.Macro: int CLUSTER> = 7;

        <smetana.core.Macro: int LEAFSET> = 6;

        <smetana.core.Macro: int SINKRANK> = 5;

        <smetana.core.Macro: int MAXRANK> = 4;

        <smetana.core.Macro: int SOURCERANK> = 3;

        <smetana.core.Macro: int MINRANK> = 2;

        <smetana.core.Macro: int SAMERANK> = 1;

        <smetana.core.Macro: int NOCMD> = 0;

        <smetana.core.Macro: int IGNORED> = 6;

        <smetana.core.Macro: int CLUSTER_EDGE> = 5;

        <smetana.core.Macro: int FLATORDER> = 4;

        <smetana.core.Macro: int REVERSED> = 3;

        <smetana.core.Macro: int SLACKNODE> = 2;

        <smetana.core.Macro: int VIRTUAL> = 1;

        <smetana.core.Macro: int NORMAL> = 0;

        <smetana.core.Macro: int NEW_RANK> = 16;

        <smetana.core.Macro: int ET_COMPOUND> = 12;

        <smetana.core.Macro: int ET_SPLINE> = 10;

        <smetana.core.Macro: int ET_ORTHO> = 8;

        <smetana.core.Macro: int ET_PLINE> = 6;

        <smetana.core.Macro: int ET_CURVED> = 4;

        <smetana.core.Macro: int ET_LINE> = 2;

        <smetana.core.Macro: int ET_NONE> = 0;

        <smetana.core.Macro: int EDGE_XLABEL> = 32;

        <smetana.core.Macro: int NODE_XLABEL> = 16;

        <smetana.core.Macro: int GRAPH_LABEL> = 8;

        <smetana.core.Macro: int TAIL_LABEL> = 4;

        <smetana.core.Macro: int HEAD_LABEL> = 2;

        <smetana.core.Macro: int EDGE_LABEL> = 1;

        <smetana.core.Macro: int LT_RECD> = 4;

        <smetana.core.Macro: int LT_HTML> = 2;

        <smetana.core.Macro: int LT_NONE> = 0;

        <smetana.core.Macro: int TOP> = 4;

        <smetana.core.Macro: int BOTTOM> = 1;

        <smetana.core.Macro: int RIGHT> = 2;

        <smetana.core.Macro: int LEFT> = 8;

        <smetana.core.Macro: double M_PI> = 3.141592653589793;

        <smetana.core.Macro: double HUGE_VAL> = #Infinity;

        <smetana.core.Macro: int INT_MIN> = -2147483648;

        <smetana.core.Macro: int INT_MAX> = 2147483647;

        <smetana.core.Macro: int MAXSHORT> = 32767;

        <smetana.core.Macro: int AGEDGE> = 2;

        <smetana.core.Macro: int AGINEDGE> = 3;

        <smetana.core.Macro: int AGOUTEDGE> = 2;

        <smetana.core.Macro: int AGNODE> = 1;

        <smetana.core.Macro: int AGRAPH> = 0;

        <smetana.core.Macro: double MILLIPOINT> = 0.001;

        <smetana.core.Macro: double MICROPOINT> = 1.0E-6;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        <smetana.core.Macro: double SQRT2> = $d0;

        $r0 = new smetana.core.CString;

        specialinvoke $r0.<smetana.core.CString: void <init>(java.lang.String)>("headport");

        <smetana.core.Macro: smetana.core.CString HEAD_ID> = $r0;

        $r1 = new smetana.core.CString;

        specialinvoke $r1.<smetana.core.CString: void <init>(java.lang.String)>("tailport");

        <smetana.core.Macro: smetana.core.CString TAIL_ID> = $r1;

        return;
    }
}
