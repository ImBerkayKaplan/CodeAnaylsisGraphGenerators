public class net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry extends net.sourceforge.plantuml.awt.geom.Dimension2D
{
    private final double width;
    private final double height;
    private final double left;
    private final double inY;
    private final double outY;

    public java.awt.geom.Point2D getPointA()
    {
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r1;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d0 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    public java.awt.geom.Point2D getPointIn()
    {
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r1;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d0 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    public java.awt.geom.Point2D getPointB()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0;
        java.awt.geom.Point2D$Double $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $b0 = $d0 cmpl 2.2250738585072014E-308;

        if $b0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.awt.geom.Point2D$Double;

        $d5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $d3 = $d2 + $d1;

        $d4 = $d3 / 2.0;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        return $r1;
    }

    public java.awt.geom.Point2D getPointC()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0, $d1, $d2;
        byte $b0;
        java.awt.geom.Point2D$Double $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $b0 = $d0 cmpl 2.2250738585072014E-308;

        if $b0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.awt.geom.Point2D$Double;

        $d2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d1);

        return $r1;
    }

    public java.awt.geom.Point2D getPointD()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0;
        java.awt.geom.Point2D$Double $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $b0 = $d0 cmpl 2.2250738585072014E-308;

        if $b0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.awt.geom.Point2D$Double;

        $d2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $d3 = $d2 + $d1;

        $d4 = $d3 / 2.0;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, $d4);

        return $r1;
    }

    public java.awt.geom.Point2D getPointOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0, $d1, $d2;
        byte $b0;
        java.awt.geom.Point2D$Double $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $b0 = $d0 cmpl 2.2250738585072014E-308;

        if $b0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.awt.geom.Point2D$Double;

        $d2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d1);

        return $r1;
    }

    public void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D, double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1;
        double $d0, $d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        r1 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double)>($d0, $d1, d2, d3);

        return;
    }

    public void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>(d0, d1, d2, d3, 2.2250738585072014E-308);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r2;
        double $d0, $d1, $d2;
        java.lang.String $r9;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $d1 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" left=");

        $d2 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void setSize(double, double)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r1;
        double d0, d1;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void <init>(double, double, double, double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double d0, d1, d2, d3, d4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d3 := @parameter0: double;

        d4 := @parameter1: double;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        specialinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: void <init>()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left> = d0;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY> = d1;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY> = d2;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width> = d3;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height> = d4;

        return;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry incHeight(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d5 = $d1 + d0;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d6, $d5, $d4, $d3, $d2);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addTop(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0, $r1, $r2;
        boolean $z0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 == 0 goto label1;

        $r2 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d14 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d7 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d13 = $d7 + d0;

        $d12 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d8 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d11 = $d8 + d0;

        $d9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $d10 = $d9 + d0;

        specialinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d14, $d13, $d12, $d11, $d10);

        return $r2;

     label1:
        $r1 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d6 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d5 = $d1 + d0;

        $d4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d3 = $d2 + d0;

        specialinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d6, $d5, $d4, $d3, 2.2250738585072014E-308);

        return $r1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addBottom(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0, $r1, $r2;
        boolean $z0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 == 0 goto label1;

        $r2 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d11 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d6 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d10 = $d6 + d0;

        $d9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d8 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d7 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d11, $d10, $d9, $d8, $d7);

        return $r2;

     label1:
        $r1 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d4 = $d1 + d0;

        $d3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        specialinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d5, $d4, $d3, $d2, 2.2250738585072014E-308);

        return $r1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry incRight(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d6 = $d1 + d0;

        $d5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d6, $d5, $d4, $d3, $d2);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry incLeft(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d7 = $d1 + d0;

        $d6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d5 = $d2 + d0;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d7, $d6, $d5, $d4, $d3);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry incVertically(double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        boolean $z0;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d3 = $d1 + d0;

        $d6 = $d3 + d2;

        $d7 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d8 = $d4 + d0;

        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 == 0 goto label1;

        $d9 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $d10 = $d9 + d0;

        goto label2;

     label1:
        $d10 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

     label2:
        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d5, $d6, $d7, $d8, $d10);

        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D, double, double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1;
        double $d0, $d1, d2, d3, d4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        r1 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        d4 := @parameter3: double;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d0, $d1, d2, d3, d4);

        return;
    }

    public boolean hasPointOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $b0 = $d0 cmpl 2.2250738585072014E-308;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry withoutPointOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double $d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d0 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double)>($d3, $d2, $d1, $d0);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry translate(net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r1, $r2, $r3;
        byte $b0;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UTranslate;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $d2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $b0 = $d2 cmpl 2.2250738585072014E-308;

        if $b0 != 0 goto label1;

        $r3 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d16 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d15 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d11 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d14 = $d11 + d0;

        $d12 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d13 = $d12 + d1;

        specialinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double)>($d16, $d15, $d14, $d13);

        return $r3;

     label1:
        $r2 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d10 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d9 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d8 = $d3 + d0;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d7 = $d4 + d1;

        $d5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $d6 = $d5 + d1;

        specialinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d10, $d9, $d8, $d7, $d6);

        return $r2;
    }

    public final double getInY()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        return $d0;
    }

    public final double getLeft()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        return $d0;
    }

    public final double getRight()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public double getOutY()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        return $d0;
    }

    public final double getWidth()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        return $d0;
    }

    public final double getHeight()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        return $d0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addDim(double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d9 = $d1 + d0;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d8 = $d3 + d2;

        $d7 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        $d5 = $d4 + d2;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d9, $d8, $d7, $d6, $d5);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addMarginX(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d1 = 2.0 * d0;

        $d8 = $d2 + $d1;

        $d7 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d6 = $d3 + d0;

        $d5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d8, $d7, $d6, $d5, $d4);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addMarginX(double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d3 = $d1 + d0;

        $d9 = $d3 + d2;

        $d8 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d7 = $d4 + d0;

        $d6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d9, $d8, $d7, $d6, $d5);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry fixedHeight(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0, r1;
        double d0, $d1, $d2, $d3, $d4;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $d4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        $d2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double inY>;

        $d1 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double outY>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double,double)>($d4, d0, $d3, $d2, $d1);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry appendBottom(net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometryMerger $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r1, r2, $r3;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        r2 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometryMerger;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometryMerger: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry,net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry)>(r1, r2);

        $r3 = virtualinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometryMerger: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry getResult()>();

        return $r3;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry ensureHeight(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0, $r1;
        double d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double height>;

        $b0 = $d1 cmpl d0;

        if $b0 <= 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry fixedHeight(double)>(d0);

        return $r1;
    }

    private net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry ensureRightStrange(double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r0, $r1;
        double $d0, $d1, d2, d3;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        d3 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double width>;

        $d0 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double left>;

        d2 = $d1 - $d0;

        $b0 = d2 cmpl d3;

        if $b0 <= 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addMarginX(double,double)>(0.0, d3);

        return $r1;
    }
}
