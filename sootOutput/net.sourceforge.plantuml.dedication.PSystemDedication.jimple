public class net.sourceforge.plantuml.dedication.PSystemDedication extends net.sourceforge.plantuml.PlainDiagram
{
    private final java.awt.image.BufferedImage img;

    public void <init>(net.sourceforge.plantuml.core.UmlSource, java.awt.image.BufferedImage)
    {
        net.sourceforge.plantuml.dedication.PSystemDedication r0;
        net.sourceforge.plantuml.core.UmlSource r1;
        java.awt.image.BufferedImage r2, $r4;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.dedication.PSystemDedication;

        r1 := @parameter0: net.sourceforge.plantuml.core.UmlSource;

        r2 := @parameter1: java.awt.image.BufferedImage;

        specialinvoke r0.<net.sourceforge.plantuml.PlainDiagram: void <init>(net.sourceforge.plantuml.core.UmlSource)>(r1);

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = (java.awt.image.BufferedImage) $r3;

        r0.<net.sourceforge.plantuml.dedication.PSystemDedication: java.awt.image.BufferedImage img> = $r4;

        return;
    }

    protected net.sourceforge.plantuml.graphic.UDrawable getRootDrawable(net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.dedication.PSystemDedication$1 $r0;
        net.sourceforge.plantuml.dedication.PSystemDedication r1;
        net.sourceforge.plantuml.FileFormatOption r2;

        r1 := @this: net.sourceforge.plantuml.dedication.PSystemDedication;

        r2 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        $r0 = new net.sourceforge.plantuml.dedication.PSystemDedication$1;

        specialinvoke $r0.<net.sourceforge.plantuml.dedication.PSystemDedication$1: void <init>(net.sourceforge.plantuml.dedication.PSystemDedication)>(r1);

        return $r0;
    }

    public static java.awt.image.BufferedImage getBufferedImage(java.io.InputStream)
    {
        java.lang.Object r0, r10, $r15;
        java.lang.Class[] $r1, $r7, $r12;
        java.lang.reflect.Method r2, $r8, $r13;
        java.io.InputStream r3;
        javax.imageio.stream.ImageInputStream r4;
        java.lang.Object[] $r5, $r9, $r14;
        java.lang.Class $r11, r18;
        java.awt.image.BufferedImage $r16;
        java.lang.Exception $r17;

        r3 := @parameter0: java.io.InputStream;

     label1:
        r18 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("net.sourceforge.plantuml.webp.VP8Decoder");

        r0 = virtualinvoke r18.<java.lang.Class: java.lang.Object newInstance()>();

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljavax/imageio/stream/ImageInputStream;";

        r2 = virtualinvoke r18.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("decodeFrame", $r1);

        r4 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.io.InputStream)>(r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r4;

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

        interfaceinvoke r4.<javax.imageio.stream.ImageInputStream: void close()>();

        $r7 = newarray (java.lang.Class)[0];

        $r8 = virtualinvoke r18.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getFrame", $r7);

        $r9 = newarray (java.lang.Object)[0];

        r10 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r9);

        $r11 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = newarray (java.lang.Class)[0];

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getBufferedImage", $r12);

        $r14 = newarray (java.lang.Object)[0];

        $r15 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r10, $r14);

        $r16 = (java.awt.image.BufferedImage) $r15;

     label2:
        return $r16;

     label3:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public net.sourceforge.plantuml.core.DiagramDescription getDescription()
    {
        net.sourceforge.plantuml.core.DiagramDescription $r0;
        net.sourceforge.plantuml.dedication.PSystemDedication r1;

        r1 := @this: net.sourceforge.plantuml.dedication.PSystemDedication;

        $r0 = new net.sourceforge.plantuml.core.DiagramDescription;

        specialinvoke $r0.<net.sourceforge.plantuml.core.DiagramDescription: void <init>(java.lang.String)>("(Dedication)");

        return $r0;
    }

    static java.awt.image.BufferedImage access$000(net.sourceforge.plantuml.dedication.PSystemDedication)
    {
        net.sourceforge.plantuml.dedication.PSystemDedication r0;
        java.awt.image.BufferedImage $r1;

        r0 := @parameter0: net.sourceforge.plantuml.dedication.PSystemDedication;

        $r1 = r0.<net.sourceforge.plantuml.dedication.PSystemDedication: java.awt.image.BufferedImage img>;

        return $r1;
    }
}
