public class gen.lib.label.index__c extends java.lang.Object
{

    public void <init>()
    {
        gen.lib.label.index__c r0;

        r0 := @this: gen.lib.label.index__c;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static h.ST_LeafList_t RTreeNewLeafList(h.ST_Branch_t)
    {
        h.ST_LeafList_t $r0;
        h.ST_Branch_t r2;
        java.lang.Throwable $r4;

        r2 := @parameter0: h.ST_Branch_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("1rfaqe5urty5uyp5xb2r0idce", "RTreeNewLeafList");

     label1:
        $r0 = new h.ST_LeafList_t;

        specialinvoke $r0.<h.ST_LeafList_t: void <init>()>();

        $r0.<h.ST_LeafList_t: h.ST_Branch_t leaf> = r2;

        $r0.<h.ST_LeafList_t: h.ST_LeafList_t next> = null;

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("1rfaqe5urty5uyp5xb2r0idce", "RTreeNewLeafList");

        return $r0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("1rfaqe5urty5uyp5xb2r0idce", "RTreeNewLeafList");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static h.ST_LeafList_t RTreeLeafListAdd(h.ST_LeafList_t, h.ST_Branch_t)
    {
        h.ST_Branch_t r0;
        boolean $z0;
        h.ST_LeafList_t r1, r2;
        java.lang.Throwable $r3;

        r2 := @parameter0: h.ST_LeafList_t;

        r0 := @parameter1: h.ST_Branch_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("6pvstz7axi8a7saeqe3nrrmg5", "RTreeLeafListAdd");

     label1:
        $z0 = staticinvoke <smetana.core.Macro: boolean N(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6pvstz7axi8a7saeqe3nrrmg5", "RTreeLeafListAdd");

        return r2;

     label3:
        r1 = staticinvoke <gen.lib.label.index__c: h.ST_LeafList_t RTreeNewLeafList(h.ST_Branch_t)>(r0);

        r1.<h.ST_LeafList_t: h.ST_LeafList_t next> = r2;

     label4:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6pvstz7axi8a7saeqe3nrrmg5", "RTreeLeafListAdd");

        return r1;

     label5:
        $r3 := @caughtexception;

     label6:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6pvstz7axi8a7saeqe3nrrmg5", "RTreeLeafListAdd");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void RTreeLeafListFree(h.ST_LeafList_t)
    {
        h.ST_LeafList_t $r0, r1, r4;
        java.lang.Throwable $r2;

        r4 := @parameter0: h.ST_LeafList_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("6zraor7x44vrnm19d2igkvow2", "RTreeLeafListFree");

     label1:
        $r0 = r4.<h.ST_LeafList_t: h.ST_LeafList_t next>;

        if $r0 == null goto label2;

        r1 = r4.<h.ST_LeafList_t: h.ST_LeafList_t next>;

        staticinvoke <smetana.core.Memory: void free(java.lang.Object)>(r4);

        r4 = r1;

        goto label1;

     label2:
        staticinvoke <smetana.core.Memory: void free(java.lang.Object)>(r4);

     label3:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6zraor7x44vrnm19d2igkvow2", "RTreeLeafListFree");

        goto label5;

     label4:
        $r2 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("6zraor7x44vrnm19d2igkvow2", "RTreeLeafListFree");

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public static h.ST_RTree RTreeOpen()
    {
        h.ST_RTree $r0;
        h.ST_Node_t___ $r3;
        java.lang.Throwable $r4;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("aa29m7d7qc06m8id896e60lkg", "RTreeOpen");

     label1:
        $r0 = new h.ST_RTree;

        specialinvoke $r0.<h.ST_RTree: void <init>()>();

        if $r0 == null goto label2;

        $r3 = staticinvoke <gen.lib.label.index__c: h.ST_Node_t___ RTreeNewIndex(h.ST_RTree)>($r0);

        $r0.<h.ST_RTree: h.ST_Node_t___ root> = $r3;

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa29m7d7qc06m8id896e60lkg", "RTreeOpen");

        return $r0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa29m7d7qc06m8id896e60lkg", "RTreeOpen");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static h.ST_Node_t___ RTreeNewIndex(h.ST_RTree)
    {
        h.ST_RTree r0;
        h.ST_Node_t___ r1;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @parameter0: h.ST_RTree;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("aa39m7d7qc06m8id896e60lkg", "RTreeNewIndex");

     label1:
        r1 = staticinvoke <gen.lib.label.node__c: h.ST_Node_t___ RTreeNewNode(h.ST_RTree)>(r0);

        r1.<h.ST_Node_t___: int level> = 0;

        $i0 = r0.<h.ST_RTree: int LeafCount>;

        $i1 = $i0 + 1;

        r0.<h.ST_RTree: int LeafCount> = $i1;

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa39m7d7qc06m8id896e60lkg", "RTreeNewIndex");

        return r1;

     label3:
        $r3 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa39m7d7qc06m8id896e60lkg", "RTreeNewIndex");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static int RTreeClose2(h.ST_RTree, h.ST_Node_t___)
    {
        h.ST_Node_t___ r0, $r11;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        h.ST_Branch_t[] $r1, $r5, $r8, $r12;
        h.ST_Branch_t $r2, $r6, $r9, $r13;
        h.ST_Node_t___or_object_t $r3, $r7, $r10, $r14;
        boolean $z0, $z1, $z2;
        h.ST_RTree r4;
        java.lang.Throwable $r15;

        r4 := @parameter0: h.ST_RTree;

        r0 := @parameter1: h.ST_Node_t___;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("aa49m7d7qc06m8id896e60lkg", "RTreeClose2");

     label01:
        $i0 = r0.<h.ST_Node_t___: int level>;

        if $i0 <= 0 goto label05;

        i13 = 0;

     label02:
        if i13 >= 64 goto label09;

        $r5 = r0.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r6 = $r5[i13];

        $r7 = $r6.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        $z1 = staticinvoke <smetana.core.Macro: boolean N(java.lang.Object)>($r7);

        if $z1 == 0 goto label03;

        goto label04;

     label03:
        $r8 = r0.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r9 = $r8[i13];

        $r10 = $r9.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        $r11 = (h.ST_Node_t___) $r10;

        $i7 = staticinvoke <gen.lib.label.index__c: int RTreeClose2(h.ST_RTree,h.ST_Node_t___)>(r4, $r11);

        $z2 = staticinvoke <smetana.core.Macro: boolean N(int)>($i7);

        if $z2 == 0 goto label04;

        $r12 = r0.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r13 = $r12[i13];

        $r14 = $r13.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        staticinvoke <smetana.core.Memory: void free(java.lang.Object)>($r14);

        staticinvoke <gen.lib.label.node__c: void DisconBranch(h.ST_Node_t___,int)>(r0, i13);

        $i8 = r4.<h.ST_RTree: int EntryCount>;

        $i9 = $i8 - 1;

        r4.<h.ST_RTree: int EntryCount> = $i9;

        $i10 = r4.<h.ST_RTree: int StatFlag>;

        if $i10 == 0 goto label04;

        $i11 = r4.<h.ST_RTree: int ElimCount>;

        $i12 = $i11 + 1;

        r4.<h.ST_RTree: int ElimCount> = $i12;

     label04:
        i13 = i13 + 1;

        goto label02;

     label05:
        i14 = 0;

     label06:
        if i14 >= 64 goto label09;

        $r1 = r0.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r2 = $r1[i14];

        $r3 = $r2.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        $z0 = staticinvoke <smetana.core.Macro: boolean N(java.lang.Object)>($r3);

        if $z0 == 0 goto label07;

        goto label08;

     label07:
        staticinvoke <gen.lib.label.node__c: void DisconBranch(h.ST_Node_t___,int)>(r0, i14);

        $i2 = r4.<h.ST_RTree: int EntryCount>;

        $i3 = $i2 - 1;

        r4.<h.ST_RTree: int EntryCount> = $i3;

        $i4 = r4.<h.ST_RTree: int StatFlag>;

        if $i4 == 0 goto label08;

        $i5 = r4.<h.ST_RTree: int ElimCount>;

        $i6 = $i5 + 1;

        r4.<h.ST_RTree: int ElimCount> = $i6;

     label08:
        i14 = i14 + 1;

        goto label06;

     label09:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa49m7d7qc06m8id896e60lkg", "RTreeClose2");

        return 0;

     label10:
        $r15 := @caughtexception;

     label11:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa49m7d7qc06m8id896e60lkg", "RTreeClose2");

        throw $r15;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static int RTreeClose(h.ST_RTree)
    {
        h.ST_RTree r0;
        h.ST_Node_t___ $r1, $r2;
        java.lang.Throwable $r3;

        r0 := @parameter0: h.ST_RTree;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("aa59m7d7qc06m8id896e60lkg", "RTreeClose");

     label1:
        $r1 = r0.<h.ST_RTree: h.ST_Node_t___ root>;

        staticinvoke <gen.lib.label.index__c: int RTreeClose2(h.ST_RTree,h.ST_Node_t___)>(r0, $r1);

        $r2 = r0.<h.ST_RTree: h.ST_Node_t___ root>;

        staticinvoke <smetana.core.Memory: void free(java.lang.Object)>($r2);

        staticinvoke <smetana.core.Memory: void free(java.lang.Object)>(r0);

     label2:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa59m7d7qc06m8id896e60lkg", "RTreeClose");

        return 0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa59m7d7qc06m8id896e60lkg", "RTreeClose");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static h.ST_LeafList_t RTreeSearch(h.ST_RTree, h.ST_Node_t___, h.ST_Rect_t)
    {
        h.ST_RTree r0;
        int $i0, $i1, $i2, i3, i4;
        h.ST_Node_t___ r1, $r20;
        h.ST_Branch_t[] $r2, $r6, $r9, $r11, $r14, $r17;
        h.ST_Branch_t $r3, $r7, $r10, $r12, $r15, $r18;
        h.ST_Node_t___or_object_t $r4, $r13, $r19;
        h.ST_Rect_t r5, $r8, $r16;
        boolean $z0, $z1;
        h.ST_LeafList_t $r21, r24, r25, r26;
        java.lang.Throwable $r22;

        r0 := @parameter0: h.ST_RTree;

        r1 := @parameter1: h.ST_Node_t___;

        r5 := @parameter2: h.ST_Rect_t;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("aa69m7d7qc06m8id896e60lkg", "RTreeSearch");

     label01:
        r24 = null;

        $i0 = r0.<h.ST_RTree: int SeTouchCount>;

        $i1 = $i0 + 1;

        r0.<h.ST_RTree: int SeTouchCount> = $i1;

        $i2 = r1.<h.ST_Node_t___: int level>;

        if $i2 <= 0 goto label07;

        i3 = 0;

     label02:
        if i3 >= 64 goto label10;

        $r11 = r1.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r12 = $r11[i3];

        $r13 = $r12.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        if $r13 == null goto label06;

        $r14 = r1.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r15 = $r14[i3];

        $r16 = $r15.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $z1 = staticinvoke <gen.lib.label.rectangle__c: boolean Overlap(h.ST_Rect_t,h.ST_Rect_t)>(r5, $r16);

        if $z1 == 0 goto label06;

        $r17 = r1.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r18 = $r17[i3];

        $r19 = $r18.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        $r20 = (h.ST_Node_t___) $r19;

        r25 = staticinvoke <gen.lib.label.index__c: h.ST_LeafList_t RTreeSearch(h.ST_RTree,h.ST_Node_t___,h.ST_Rect_t)>(r0, $r20, r5);

        if r24 == null goto label05;

        r26 = r24;

     label03:
        $r21 = r26.<h.ST_LeafList_t: h.ST_LeafList_t next>;

        if $r21 == null goto label04;

        r26 = r26.<h.ST_LeafList_t: h.ST_LeafList_t next>;

        goto label03;

     label04:
        r26.<h.ST_LeafList_t: h.ST_LeafList_t next> = r25;

        goto label06;

     label05:
        r24 = r25;

     label06:
        i3 = i3 + 1;

        goto label02;

     label07:
        i4 = 0;

     label08:
        if i4 >= 64 goto label10;

        $r2 = r1.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r3 = $r2[i4];

        $r4 = $r3.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        if $r4 == null goto label09;

        $r6 = r1.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r7 = $r6[i4];

        $r8 = $r7.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $z0 = staticinvoke <gen.lib.label.rectangle__c: boolean Overlap(h.ST_Rect_t,h.ST_Rect_t)>(r5, $r8);

        if $z0 == 0 goto label09;

        $r9 = r1.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r10 = $r9[i4];

        r24 = staticinvoke <gen.lib.label.index__c: h.ST_LeafList_t RTreeLeafListAdd(h.ST_LeafList_t,h.ST_Branch_t)>(r24, $r10);

     label09:
        i4 = i4 + 1;

        goto label08;

     label10:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa69m7d7qc06m8id896e60lkg", "RTreeSearch");

        return r24;

     label11:
        $r22 := @caughtexception;

     label12:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("aa69m7d7qc06m8id896e60lkg", "RTreeSearch");

        throw $r22;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static int RTreeInsert(h.ST_RTree, h.ST_Rect_t, smetana.core.__ptr__, h.ST_Node_t___[], int)
    {
        h.ST_Node_t___[] r0, r6;
        h.ST_Branch_t $r1;
        h.ST_RTree r3;
        int $i0, $i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15;
        boolean $z0;
        h.ST_Rect_t r4, $r11, $r12, $r15, $r16;
        smetana.core.__ptr__ r5;
        h.ST_Node_t___ $r7, r8, $r9, $r10, $r13, $r14, $r17;
        java.lang.Throwable $r26;
        byte b16;

        r3 := @parameter0: h.ST_RTree;

        r4 := @parameter1: h.ST_Rect_t;

        r5 := @parameter2: smetana.core.__ptr__;

        r6 := @parameter3: h.ST_Node_t___[];

        i2 := @parameter4: int;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("3wss9r0zgt5k06j8ovjv7hq0d", "RTreeInsert");

     label1:
        r0 = newarray (h.ST_Node_t___)[1];

        $r1 = new h.ST_Branch_t;

        specialinvoke $r1.<h.ST_Branch_t: void <init>()>();

        b16 = 0;

        $i0 = r3.<h.ST_RTree: int StatFlag>;

        if $i0 == 0 goto label2;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("akhni40ndam0u9c6i7raxw4mp");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("bzb1oqc35evr96528iv16glb0");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("9352ql3e58qs4fzapgjfrms2s");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("3kxquse3qg2crme5dzybg9jxe");

     label2:
        $i1 = r3.<h.ST_RTree: int Deleting>;

        $z0 = staticinvoke <smetana.core.Macro: boolean N(int)>($i1);

        if $z0 == 0 goto label3;

        $i14 = r3.<h.ST_RTree: int RectCount>;

        $i15 = $i14 + 1;

        r3.<h.ST_RTree: int RectCount> = $i15;

     label3:
        $r7 = r6[0];

        $i3 = staticinvoke <gen.lib.label.index__c: int RTreeInsert2(h.ST_RTree,h.ST_Rect_t,smetana.core.__ptr__,h.ST_Node_t___,h.ST_Node_t___[],int)>(r3, r4, r5, $r7, r0, i2);

        if $i3 == 0 goto label5;

        $i5 = r3.<h.ST_RTree: int StatFlag>;

        if $i5 == 0 goto label4;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("2y8kv6b3ysrr61q7tqn76rhhc");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("dn4oynmx9ugizzs5pkxiyptbi");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("5c97f6vfxny0zz35l2bu4maox");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("2u8wpa4w1q7rg14t07bny6p8i");

     label4:
        r8 = staticinvoke <gen.lib.label.node__c: h.ST_Node_t___ RTreeNewNode(h.ST_RTree)>(r3);

        $i6 = r3.<h.ST_RTree: int NonLeafCount>;

        $i7 = $i6 + 1;

        r3.<h.ST_RTree: int NonLeafCount> = $i7;

        $r9 = r6[0];

        $i8 = $r9.<h.ST_Node_t___: int level>;

        $i9 = $i8 + 1;

        r8.<h.ST_Node_t___: int level> = $i9;

        $r11 = $r1.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r10 = r6[0];

        $r12 = staticinvoke <gen.lib.label.node__c: h.ST_Rect_t NodeCover(h.ST_Node_t___)>($r10);

        virtualinvoke $r11.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r12);

        $r13 = r6[0];

        $r1.<h.ST_Branch_t: h.ST_Node_t___or_object_t child> = $r13;

        staticinvoke <gen.lib.label.node__c: int AddBranch(h.ST_RTree,h.ST_Branch_t,h.ST_Node_t___,h.ST_Node_t___[])>(r3, $r1, r8, null);

        $r15 = $r1.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r14 = r0[0];

        $r16 = staticinvoke <gen.lib.label.node__c: h.ST_Rect_t NodeCover(h.ST_Node_t___)>($r14);

        virtualinvoke $r15.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r16);

        $r17 = r0[0];

        $r1.<h.ST_Branch_t: h.ST_Node_t___or_object_t child> = $r17;

        staticinvoke <gen.lib.label.node__c: int AddBranch(h.ST_RTree,h.ST_Branch_t,h.ST_Node_t___,h.ST_Node_t___[])>(r3, $r1, r8, null);

        r6[0] = r8;

        $i12 = r3.<h.ST_RTree: int EntryCount>;

        $i13 = $i12 + 2;

        r3.<h.ST_RTree: int EntryCount> = $i13;

        b16 = 1;

     label5:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("3wss9r0zgt5k06j8ovjv7hq0d", "RTreeInsert");

        return b16;

     label6:
        $r26 := @caughtexception;

     label7:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("3wss9r0zgt5k06j8ovjv7hq0d", "RTreeInsert");

        throw $r26;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static int RTreeInsert2(h.ST_RTree, h.ST_Rect_t, smetana.core.__ptr__, h.ST_Node_t___, h.ST_Node_t___[], int)
    {
        h.ST_Branch_t $r0, $r14, $r18, $r20, $r30, $r32;
        h.ST_Node_t___[] r2, r12;
        h.ST_RTree r3;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i11, i12;
        h.ST_Node_t___ r4, $r16, $r22, $r25, $r26;
        java.lang.UnsupportedOperationException $r7;
        h.ST_Rect_t r8, $r9, $r23, $r24, $r27, $r28, $r33, $r34, $r35;
        smetana.core.__ptr__ r10;
        h.ST_Node_t___or_object_t $r11, $r15, $r21;
        h.ST_Branch_t[] $r13, $r17, $r19, $r29, $r31;
        boolean $z0;
        java.lang.Throwable $r40;

        r3 := @parameter0: h.ST_RTree;

        r8 := @parameter1: h.ST_Rect_t;

        r10 := @parameter2: smetana.core.__ptr__;

        r4 := @parameter3: h.ST_Node_t___;

        r12 := @parameter4: h.ST_Node_t___[];

        i1 := @parameter5: int;

        staticinvoke <smetana.core.debug.SmetanaDebug: void ENTERING(java.lang.String,java.lang.String)>("bsc9m7d7qc06m8id896e60lkg", "RTreeInsert2");

     label01:
        $r0 = new h.ST_Branch_t;

        specialinvoke $r0.<h.ST_Branch_t: void <init>()>();

        r2 = newarray (h.ST_Node_t___)[1];

        $i0 = r3.<h.ST_RTree: int StatFlag>;

        if $i0 == 0 goto label02;

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("akhni40ndam0u9c6i7raxw4mp");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("8k1kgaoa4b2mcye1xthc3f1kf");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("9352ql3e58qs4fzapgjfrms2s");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("1um729vqiy3529kbsrzyl9u3y");

     label02:
        $i2 = r4.<h.ST_Node_t___: int level>;

        if $i2 <= i1 goto label06;

        i9 = staticinvoke <gen.lib.label.node__c: int PickBranch(h.ST_Rect_t,h.ST_Node_t___)>(r8, r4);

        $r13 = r4.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r14 = $r13[i9];

        $r15 = $r14.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        $r16 = (h.ST_Node_t___) $r15;

        $i6 = staticinvoke <gen.lib.label.index__c: int RTreeInsert2(h.ST_RTree,h.ST_Rect_t,smetana.core.__ptr__,h.ST_Node_t___,h.ST_Node_t___[],int)>(r3, r8, r10, $r16, r2, i1);

        $z0 = staticinvoke <smetana.core.Macro: boolean N(int)>($i6);

        if $z0 == 0 goto label04;

        $r29 = r4.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r30 = $r29[i9];

        $r34 = $r30.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r31 = r4.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r32 = $r31[i9];

        $r33 = $r32.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r35 = staticinvoke <gen.lib.label.rectangle__c: h.ST_Rect_t CombineRect(h.ST_Rect_t,h.ST_Rect_t)>(r8, $r33);

        virtualinvoke $r34.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r35);

     label03:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("bsc9m7d7qc06m8id896e60lkg", "RTreeInsert2");

        return 0;

     label04:
        $r17 = r4.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r18 = $r17[i9];

        $r23 = $r18.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r19 = r4.<h.ST_Node_t___: h.ST_Branch_t[] branch>;

        $r20 = $r19[i9];

        $r21 = $r20.<h.ST_Branch_t: h.ST_Node_t___or_object_t child>;

        $r22 = (h.ST_Node_t___) $r21;

        $r24 = staticinvoke <gen.lib.label.node__c: h.ST_Rect_t NodeCover(h.ST_Node_t___)>($r22);

        virtualinvoke $r23.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r24);

        $r25 = r2[0];

        $r0.<h.ST_Branch_t: h.ST_Node_t___or_object_t child> = $r25;

        $r27 = $r0.<h.ST_Branch_t: h.ST_Rect_t rect>;

        $r26 = r2[0];

        $r28 = staticinvoke <gen.lib.label.node__c: h.ST_Rect_t NodeCover(h.ST_Node_t___)>($r26);

        virtualinvoke $r27.<h.ST_Rect_t: void ___(smetana.core.__struct__)>($r28);

        $i7 = r3.<h.ST_RTree: int EntryCount>;

        $i8 = $i7 + 1;

        r3.<h.ST_RTree: int EntryCount> = $i8;

        i11 = staticinvoke <gen.lib.label.node__c: int AddBranch(h.ST_RTree,h.ST_Branch_t,h.ST_Node_t___,h.ST_Node_t___[])>(r3, $r0, r4, r12);

     label05:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("bsc9m7d7qc06m8id896e60lkg", "RTreeInsert2");

        return i11;

     label06:
        $i3 = r4.<h.ST_Node_t___: int level>;

        if $i3 != i1 goto label08;

        $r9 = $r0.<h.ST_Branch_t: h.ST_Rect_t rect>;

        virtualinvoke $r9.<h.ST_Rect_t: void ___(smetana.core.__struct__)>(r8);

        $r11 = (h.ST_Node_t___or_object_t) r10;

        $r0.<h.ST_Branch_t: h.ST_Node_t___or_object_t child> = $r11;

        $i4 = r3.<h.ST_RTree: int EntryCount>;

        $i5 = $i4 + 1;

        r3.<h.ST_RTree: int EntryCount> = $i5;

        i12 = staticinvoke <gen.lib.label.node__c: int AddBranch(h.ST_RTree,h.ST_Branch_t,h.ST_Node_t___,h.ST_Node_t___[])>(r3, $r0, r4, r12);

     label07:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("bsc9m7d7qc06m8id896e60lkg", "RTreeInsert2");

        return i12;

     label08:
        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("22oqraxnqrjall7fj6pooexmi");

        staticinvoke <smetana.core.Macro: smetana.core.__ptr__ UNSUPPORTED(java.lang.String)>("c9ckhc8veujmwcw0ar3u3zld4");

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;

     label09:
        $r40 := @caughtexception;

     label10:
        staticinvoke <smetana.core.debug.SmetanaDebug: void LEAVING(java.lang.String,java.lang.String)>("bsc9m7d7qc06m8id896e60lkg", "RTreeInsert2");

        throw $r40;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }
}
