class net.sourceforge.plantuml.wbs.Fork extends net.sourceforge.plantuml.wbs.WBSTextBlock
{
    private final net.sourceforge.plantuml.graphic.TextBlock main;
    private final java.util.List right;
    private final double delta1x;
    private final double deltay;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.wbs.WElement)
    {
        net.sourceforge.plantuml.wbs.Fork r0;
        net.sourceforge.plantuml.wbs.WElement r1, r11;
        net.sourceforge.plantuml.ISkinParam r2, $r3;
        net.sourceforge.plantuml.style.StyleBuilder $r4;
        int $i0, $i1;
        java.util.ArrayList $r5;
        net.sourceforge.plantuml.graphic.TextBlock $r6;
        net.sourceforge.plantuml.Direction $r7;
        java.util.Collection $r8;
        java.util.Iterator r9;
        boolean $z0;
        java.lang.Object $r10;
        java.util.List $r12;
        net.sourceforge.plantuml.wbs.ITF $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: net.sourceforge.plantuml.wbs.Fork;

        r2 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r1 := @parameter1: net.sourceforge.plantuml.wbs.WElement;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.wbs.WElement: net.sourceforge.plantuml.ISkinParam withBackColor(net.sourceforge.plantuml.ISkinParam)>(r2);

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.wbs.WElement: net.sourceforge.plantuml.style.StyleBuilder getStyleBuilder()>();

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.wbs.WElement: int getLevel()>();

        specialinvoke r0.<net.sourceforge.plantuml.wbs.WBSTextBlock: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.StyleBuilder,int)>($r3, $r4, $i0);

        r0.<net.sourceforge.plantuml.wbs.Fork: double deltay> = 40.0;

        r0.<net.sourceforge.plantuml.wbs.Fork: double delta1x> = 20.0;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.wbs.Fork: java.util.List right> = $r5;

        r0.<net.sourceforge.plantuml.wbs.Fork: double delta1x> = 20.0;

        r0.<net.sourceforge.plantuml.wbs.Fork: double deltay> = 40.0;

        $i1 = virtualinvoke r1.<net.sourceforge.plantuml.wbs.WElement: int getLevel()>();

        if $i1 == 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label1:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.wbs.Fork: net.sourceforge.plantuml.graphic.TextBlock buildMain(net.sourceforge.plantuml.wbs.WElement)>(r1);

        r0.<net.sourceforge.plantuml.wbs.Fork: net.sourceforge.plantuml.graphic.TextBlock main> = $r6;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        $r8 = virtualinvoke r1.<net.sourceforge.plantuml.wbs.WElement: java.util.Collection getChildren(net.sourceforge.plantuml.Direction)>($r7);

        r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (net.sourceforge.plantuml.wbs.WElement) $r10;

        $r12 = r0.<net.sourceforge.plantuml.wbs.Fork: java.util.List right>;

        $r13 = staticinvoke <net.sourceforge.plantuml.wbs.ITFComposed: net.sourceforge.plantuml.wbs.ITF build2(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.wbs.WElement)>(r2, r11);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label2;

     label3:
        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r17, $r23;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.wbs.Fork r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r19, $r21;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4, r11, $r18;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18, d19, $d20, $d21, $d22, $d23;
        java.util.List $r5, $r6, $r10;
        int $i0;
        java.lang.Object $r7, $r13;
        net.sourceforge.plantuml.wbs.ITF $r8, r14;
        java.awt.geom.Point2D $r9, $r15;
        boolean $z0, $z1;
        byte $b1, $b2;
        java.lang.AssertionError $r12;
        net.sourceforge.plantuml.ugraphic.UTranslate $r16, $r22;
        java.util.Iterator r20;

        r2 := @this: net.sourceforge.plantuml.wbs.Fork;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.wbs.Fork: net.sourceforge.plantuml.graphic.TextBlock main>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d1 = d0 + 20.0;

        d2 = d0 + 40.0;

        d3 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r5 = r2.<net.sourceforge.plantuml.wbs.Fork: java.util.List right>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r19 = r2.<net.sourceforge.plantuml.wbs.Fork: net.sourceforge.plantuml.graphic.TextBlock main>;

        interfaceinvoke $r19.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        $d16 = d3 / 2.0;

        $d15 = d3 / 2.0;

        virtualinvoke r2.<net.sourceforge.plantuml.wbs.Fork: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r0, $d16, d0, $d15, d1);

        return;

     label1:
        d17 = 0.0;

        $r6 = r2.<net.sourceforge.plantuml.wbs.Fork: java.util.List right>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (net.sourceforge.plantuml.wbs.ITF) $r7;

        $r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.wbs.ITF: java.awt.geom.Point2D getT1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d4 = virtualinvoke $r9.<java.awt.geom.Point2D: double getX()>();

        d18 = d4;

        $r10 = r2.<net.sourceforge.plantuml.wbs.Fork: java.util.List right>;

        r20 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.wbs.ITF) $r13;

        $r15 = interfaceinvoke r14.<net.sourceforge.plantuml.wbs.ITF: java.awt.geom.Point2D getT1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d12 = virtualinvoke $r15.<java.awt.geom.Point2D: double getX()>();

        d18 = d17 + $d12;

        virtualinvoke r2.<net.sourceforge.plantuml.wbs.Fork: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r0, d18, d1, d18, d2);

        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d17, d2);

        $r17 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        interfaceinvoke r14.<net.sourceforge.plantuml.wbs.ITF: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r17);

        $r18 = interfaceinvoke r14.<net.sourceforge.plantuml.wbs.ITF: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d13 = virtualinvoke $r18.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d14 = $d13 + 20.0;

        d17 = d17 + $d14;

        goto label2;

     label3:
        $b1 = d18 cmpl d4;

        if $b1 <= 0 goto label4;

        virtualinvoke r2.<net.sourceforge.plantuml.wbs.Fork: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r0, d4, d1, d18, d1);

        $d9 = d18 - d4;

        $d10 = $d9 - d3;

        $d11 = $d10 / 2.0;

        d19 = d4 + $d11;

        goto label6;

     label4:
        $z1 = <net.sourceforge.plantuml.wbs.Fork: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $b2 = d18 cmpl d4;

        if $b2 == 0 goto label5;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label5:
        r11 = virtualinvoke r2.<net.sourceforge.plantuml.wbs.Fork: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d5 = virtualinvoke r11.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = $d5 - d3;

        d19 = $d6 / 2.0;

        $d7 = d3 / 2.0;

        $d8 = d19 + $d7;

        virtualinvoke r2.<net.sourceforge.plantuml.wbs.Fork: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r0, d4, d1, $d8, d1);

     label6:
        $r21 = r2.<net.sourceforge.plantuml.wbs.Fork: net.sourceforge.plantuml.graphic.TextBlock main>;

        $r22 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d19);

        $r23 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r22);

        interfaceinvoke $r21.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r23);

        $d20 = d3 / 2.0;

        $d21 = d19 + $d20;

        $d22 = d3 / 2.0;

        $d23 = d19 + $d22;

        virtualinvoke r2.<net.sourceforge.plantuml.wbs.Fork: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double,double)>(r0, $d21, d0, $d23, d1);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.wbs.Fork r0;
        java.util.List $r1;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3;
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7, d8;
        net.sourceforge.plantuml.Dimension2DDouble $r4;
        java.lang.Object $r5;
        net.sourceforge.plantuml.wbs.ITF r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7, r9;
        java.util.Iterator r8;

        r0 := @this: net.sourceforge.plantuml.wbs.Fork;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d4 = 0.0;

        d5 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.wbs.Fork: java.util.List right>;

        r8 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.wbs.ITF) $r5;

        r7 = interfaceinvoke r6.<net.sourceforge.plantuml.wbs.ITF: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d2 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d5 = staticinvoke <java.lang.Math: double max(double,double)>(d5, $d2);

        $d3 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d4 = d4 + $d3;

        goto label1;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.wbs.Fork: net.sourceforge.plantuml.graphic.TextBlock main>;

        r9 = interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d6 = d5 + $d0;

        d7 = d6 + 40.0;

        $d1 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d8 = staticinvoke <java.lang.Math: double max(double,double)>(d4, $d1);

        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d8, d7);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/wbs/Fork;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.wbs.Fork: boolean $assertionsDisabled> = $z1;

        return;
    }
}
