class net.sourceforge.plantuml.svek.extremity.ExtremityDiamond extends net.sourceforge.plantuml.svek.extremity.Extremity
{
    private net.sourceforge.plantuml.ugraphic.UPolygon polygon;
    private final boolean fill;
    private final java.awt.geom.Point2D contact;

    public java.awt.geom.Point2D somePoint()
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityDiamond r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityDiamond;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: java.awt.geom.Point2D contact>;

        return $r1;
    }

    public void <init>(java.awt.geom.Point2D, double, boolean)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityDiamond r0;
        net.sourceforge.plantuml.ugraphic.UPolygon $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean z0;
        java.awt.geom.Point2D$Double $r2;
        java.awt.geom.Point2D r3;
        double $d0, $d1, $d2, $d3, $d4, d5, d6;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityDiamond;

        r3 := @parameter0: java.awt.geom.Point2D;

        d5 := @parameter1: double;

        z0 := @parameter2: boolean;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.Extremity: void <init>()>();

        $r1 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon> = $r1;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: boolean fill> = z0;

        $r2 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: java.awt.geom.Point2D contact> = $r2;

        d6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: double manageround(double)>(d5);

        $r4 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        $r5 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(-6.0, -4.0);

        $r6 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(-12.0, 0.0);

        $r7 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(-6.0, 4.0);

        $r8 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        $r9 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        $d2 = d6 + 1.5707963267948966;

        virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.UPolygon: void rotate(double)>($d2);

        $r10 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        $d3 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d4 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.ugraphic.UPolygon: net.sourceforge.plantuml.ugraphic.UPolygon translate(double,double)>($d3, $d4);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon> = $r11;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityDiamond r0;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r1;
        net.sourceforge.plantuml.ugraphic.UBackground $r2;
        net.sourceforge.plantuml.ugraphic.UPolygon $r3;
        net.sourceforge.plantuml.ugraphic.UChange $r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, r6;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityDiamond;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $z0 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: boolean fill>;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.UChange changeBack(net.sourceforge.plantuml.ugraphic.UGraphic)>(r5);

        r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        goto label2;

     label1:
        $r1 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

     label2:
        $r3 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r3);

        return;
    }

    public java.awt.geom.Point2D isTooSmallSoGiveThePointCloserToThisOne(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityDiamond r0;
        net.sourceforge.plantuml.ugraphic.UPolygon $r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        java.awt.geom.Point2D r5, r6, r7;
        double $d0, $d1;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityDiamond;

        r6 := @parameter0: java.awt.geom.Point2D;

        r7 = null;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityDiamond: net.sourceforge.plantuml.ugraphic.UPolygon polygon>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: java.util.List getPoints()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.awt.geom.Point2D) $r4;

        if r7 == null goto label2;

        $d0 = virtualinvoke r5.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>(r6);

        $d1 = virtualinvoke r7.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>(r6);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label3;

     label2:
        r7 = r5;

     label3:
        goto label1;

     label4:
        return r7;
    }
}
