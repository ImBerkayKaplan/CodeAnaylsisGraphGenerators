public class net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull extends net.sourceforge.plantuml.command.SingleLineCommand2
{
    public static final java.lang.String ALL_TYPES;
    private static final java.lang.String CODE_CORE;
    public static final java.lang.String CODE;
    public static final java.lang.String CODE_WITH_QUOTE;
    private static final java.lang.String DISPLAY_CORE;
    public static final java.lang.String DISPLAY;
    public static final java.lang.String DISPLAY_WITHOUT_QUOTE;

    public void <init>()
    {
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull;

        $r1 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r55, $r58, $r63, $r66;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r9, $r12, $r16, $r24, $r28, $r36, $r40, $r49;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r6, $r7, $r10, $r13, $r17, $r18, $r19, $r20, $r21, $r22, $r25, $r29, $r30, $r31, $r32, $r33, $r34, $r37, $r41, $r42, $r43, $r44, $r45, $r46, $r50, $r51, $r52, $r53, $r59, $r60, $r67, $r69, $r70;
        net.sourceforge.plantuml.graphic.color.ColorParser $r5, $r68;
        net.sourceforge.plantuml.command.regex.RegexOr $r8;
        net.sourceforge.plantuml.command.regex.RegexConcat $r11, $r15, $r23, $r27, $r35, $r39, $r48, $r71;
        net.sourceforge.plantuml.command.regex.RegexOptional $r14, $r26, $r38, $r47;
        java.lang.StringBuilder $r54, $r56, $r57, $r61, $r62, $r64, $r65;

        $r0 = class "Lnet/sourceforge/plantuml/descdiagram/command/CommandCreateElementFull;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[13];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SYMBOL", "(?:(person|artifact|actor/|actor|folder|card|file|package|rectangle|hexagon|label|node|frame|cloud|database|queue|stack|storage|agent|usecase/|usecase|component|boundary|control|entity|interface|circle|collections|port|portin|portout|\\(\\))[%s]+)?");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: net.sourceforge.plantuml.graphic.color.ColorParser color2()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[2] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[3] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%g].+?[%g])");

        $r9[0] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r12 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r12[0] = $r13;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r16 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r16[0] = $r17;

        $r18 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r18.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE2", "(\\<\\<.+\\>\\>)");

        $r16[1] = $r18;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r16);

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r15);

        $r12[1] = $r14;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r12[2] = $r19;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r12[3] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r12[4] = $r21;

        $r22 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r12[5] = $r22;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r12);

        $r9[1] = $r11;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r24 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE3", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r24[0] = $r25;

        $r26 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r28 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r29 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r28[0] = $r29;

        $r30 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r30.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE3", "(\\<\\<.+\\>\\>)");

        $r28[1] = $r30;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r28);

        specialinvoke $r26.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r27);

        $r24[1] = $r26;

        $r31 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r24[2] = $r31;

        $r32 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r32.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r24[3] = $r32;

        $r33 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r24[4] = $r33;

        $r34 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r34.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY3", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r24[5] = $r34;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r24);

        $r9[2] = $r23;

        $r35 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r36 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r37 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r37.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY4", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%pLN_.]+)");

        $r36[0] = $r37;

        $r38 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r39 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r40 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r41 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r40[0] = $r41;

        $r42 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r42.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE4", "(\\<\\<.+\\>\\>)");

        $r40[1] = $r42;

        specialinvoke $r39.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r40);

        specialinvoke $r38.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r39);

        $r36[1] = $r38;

        $r43 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r36[2] = $r43;

        $r44 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r44.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r36[3] = $r44;

        $r45 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r36[4] = $r45;

        $r46 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r46.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE4", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r36[5] = $r46;

        specialinvoke $r35.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r36);

        $r9[3] = $r35;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r9);

        $r2[4] = $r8;

        $r47 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r48 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r49 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r50 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r49[0] = $r50;

        $r51 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r51.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE", "(\\<\\<.+\\>\\>)");

        $r49[1] = $r51;

        specialinvoke $r48.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r49);

        specialinvoke $r47.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r48);

        $r2[5] = $r47;

        $r52 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r52;

        $r53 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r58);

        $r2[7] = $r53;

        $r59 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r59;

        $r60 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r63 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r66);

        $r2[9] = $r60;

        $r67 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[10] = $r67;

        $r68 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r69 = virtualinvoke $r68.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[11] = $r69;

        $r70 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[12] = $r70;

        $r71 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r71;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color2()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType,java.lang.String)>($r0, "COLOR2");

        return $r1;
    }

    protected final boolean isForbidden(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String $r1;
        boolean $z0;
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull r2;

        r2 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean matches(java.lang.String)>("^[\\p{L}0-9_.]+$");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.descdiagram.DescriptionDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull r1;
        char c0, c1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.String $r2, r5, r8, $r11, r12, $r27, $r39, $r42, $r46, $r49, $r53, $r56, $r61, $r62, $r63, $r64, $r65, r67, r68, r69, r73, r74, r78;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r14, $r16, $r18, $r20, $r26, $r29, $r30, $r34, $r59;
        net.sourceforge.plantuml.cucadiagram.Ident r6;
        net.sourceforge.plantuml.cucadiagram.Code r7, $r72;
        net.sourceforge.plantuml.cucadiagram.ILeaf r9;
        net.sourceforge.plantuml.cucadiagram.Display $r10;
        net.sourceforge.plantuml.graphic.color.ColorParser $r13;
        net.sourceforge.plantuml.api.ThemeStyle $r15, $r21;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r17, $r19, $r35;
        net.sourceforge.plantuml.command.CommandExecutionResult $r23, $r43, $r50, $r57;
        net.sourceforge.plantuml.graphic.color.ColorType $r24;
        net.sourceforge.plantuml.UrlBuilder $r25;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r28;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        double $d0;
        net.sourceforge.plantuml.FontParam[] $r31;
        net.sourceforge.plantuml.FontParam $r32;
        net.sourceforge.plantuml.ugraphic.UFont $r33;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r36;
        java.lang.StringBuilder $r37, $r38, $r40, $r41, $r44, $r45, $r47, $r48, $r51, $r52, $r54, $r55;
        java.lang.IllegalStateException $r58;
        net.sourceforge.plantuml.skin.ActorStyle $r60;
        net.sourceforge.plantuml.LineLocation r66;
        net.sourceforge.plantuml.cucadiagram.LeafType r70;
        net.sourceforge.plantuml.graphic.USymbol r71;
        net.sourceforge.plantuml.Url r76;
        net.sourceforge.plantuml.graphic.color.Colors r77;
        net.sourceforge.plantuml.ugraphic.color.HColor $r79;

        r1 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull;

        r3 := @parameter0: net.sourceforge.plantuml.descdiagram.DescriptionDiagram;

        r66 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r67 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r68 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        c0 = specialinvoke r1.<net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: char getCharEncoding(java.lang.String)>(r67);

        c1 = specialinvoke r1.<net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: char getCharEncoding(java.lang.String)>(r68);

        $z0 = virtualinvoke r67.<java.lang.String: boolean startsWith(java.lang.String)>("()");

        if $z0 == 0 goto label01;

        r69 = "interface";

        $r64 = virtualinvoke r67.<java.lang.String: java.lang.String substring(int)>(2);

        $r65 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r64);

        r67 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r65);

        goto label14;

     label01:
        if c0 == 40 goto label02;

        if c1 != 40 goto label06;

     label02:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SYMBOL", 0);

        if $r2 == null goto label03;

        $r61 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SYMBOL", 0);

        $z14 = virtualinvoke $r61.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z14 == 0 goto label03;

        r69 = "usecase/";

        goto label14;

     label03:
        if r68 == null goto label04;

        $z13 = virtualinvoke r68.<java.lang.String: boolean endsWith(java.lang.String)>(")/");

        if $z13 == 0 goto label04;

        $i5 = virtualinvoke r68.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        r68 = virtualinvoke r68.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        r69 = "usecase/";

        goto label14;

     label04:
        $z1 = virtualinvoke r67.<java.lang.String: boolean endsWith(java.lang.String)>(")/");

        if $z1 == 0 goto label05;

        $i3 = virtualinvoke r67.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        r67 = virtualinvoke r67.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        r69 = "usecase/";

        goto label14;

     label05:
        r69 = "usecase";

        goto label14;

     label06:
        if c0 == 58 goto label07;

        if c1 != 58 goto label11;

     label07:
        $r62 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SYMBOL", 0);

        if $r62 == null goto label08;

        $r63 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SYMBOL", 0);

        $z17 = virtualinvoke $r63.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z17 == 0 goto label08;

        r69 = "actor/";

        goto label14;

     label08:
        if r68 == null goto label09;

        $z16 = virtualinvoke r68.<java.lang.String: boolean endsWith(java.lang.String)>(":/");

        if $z16 == 0 goto label09;

        $i9 = virtualinvoke r68.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        r68 = virtualinvoke r68.<java.lang.String: java.lang.String substring(int,int)>(0, $i10);

        r69 = "actor/";

        goto label14;

     label09:
        $z15 = virtualinvoke r67.<java.lang.String: boolean endsWith(java.lang.String)>(":/");

        if $z15 == 0 goto label10;

        $i7 = virtualinvoke r67.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        r67 = virtualinvoke r67.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        r69 = "actor/";

        goto label14;

     label10:
        r69 = "actor";

        goto label14;

     label11:
        if c0 == 91 goto label12;

        if c1 != 91 goto label13;

     label12:
        r69 = "component";

        goto label14;

     label13:
        r69 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SYMBOL", 0);

     label14:
        if r69 != null goto label15;

        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DESCRIPTION>;

        $r59 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r60 = interfaceinvoke $r59.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.skin.ActorStyle actorStyle()>();

        r71 = virtualinvoke $r60.<net.sourceforge.plantuml.skin.ActorStyle: net.sourceforge.plantuml.graphic.USymbol toUSymbol()>();

        goto label22;

     label15:
        $z2 = virtualinvoke r69.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("portin");

        if $z2 == 0 goto label16;

        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PORTIN>;

        r71 = null;

        goto label22;

     label16:
        $z3 = virtualinvoke r69.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("portout");

        if $z3 == 0 goto label17;

        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PORTOUT>;

        r71 = null;

        goto label22;

     label17:
        $z4 = virtualinvoke r69.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("port");

        if $z4 == 0 goto label18;

        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PORT>;

        r71 = null;

        goto label22;

     label18:
        $z5 = virtualinvoke r69.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("usecase");

        if $z5 == 0 goto label19;

        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType USECASE>;

        r71 = null;

        goto label22;

     label19:
        $z6 = virtualinvoke r69.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("usecase/");

        if $z6 == 0 goto label20;

        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType USECASE_BUSINESS>;

        r71 = null;

        goto label22;

     label20:
        $z7 = virtualinvoke r69.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("circle");

        if $z7 == 0 goto label21;

        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CIRCLE>;

        r71 = null;

        goto label22;

     label21:
        r70 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DESCRIPTION>;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r71 = staticinvoke <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol fromString(java.lang.String,net.sourceforge.plantuml.ISkinParam)>(r69, $r4);

        if r71 != null goto label22;

        $r58 = new java.lang.IllegalStateException;

        specialinvoke $r58.<java.lang.IllegalStateException: void <init>()>();

        throw $r58;

     label22:
        r5 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r67);

        r6 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r5);

        $z18 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: boolean V1972()>();

        if $z18 == 0 goto label23;

        $r72 = r6;

        goto label24;

     label23:
        $r72 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r5);

     label24:
        r7 = $r72;

        $z8 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: boolean V1972()>();

        if $z8 != 0 goto label25;

        $z12 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: boolean isGroup(net.sourceforge.plantuml.cucadiagram.Code)>($r72);

        if $z12 == 0 goto label25;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This element (");

        $r53 = interfaceinvoke $r72.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already defined");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r57 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r56);

        return $r57;

     label25:
        $z9 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: boolean V1972()>();

        if $z9 == 0 goto label26;

        $z11 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: boolean isGroupStrict(net.sourceforge.plantuml.cucadiagram.Ident)>(r6);

        if $z11 == 0 goto label26;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This element (");

        $r46 = virtualinvoke r6.<net.sourceforge.plantuml.cucadiagram.Ident: java.lang.String getName()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already defined");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r50 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r49);

        return $r50;

     label26:
        r73 = r68;

        if r68 != null goto label27;

        r73 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

     label27:
        r74 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r73);

        r8 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("STEREOTYPE", 0);

        $z10 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: boolean existsWithBadType3(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r3, r7, r6, r70, r71);

        if $z10 == 0 goto label28;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This element (");

        $r39 = interfaceinvoke r7.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already defined");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r42);

        return $r43;

     label28:
        r9 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r6, r7, r70, r71);

        $r10 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r74);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setDisplay(net.sourceforge.plantuml.cucadiagram.Display)>($r10);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setUSymbol(net.sourceforge.plantuml.graphic.USymbol)>(r71);

        if r8 == null goto label29;

        $r29 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i2 = interfaceinvoke $r29.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i2;

        $r30 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r31 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r32 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r31[0] = $r32;

        $r33 = interfaceinvoke $r30.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r31);

        $r34 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r35 = interfaceinvoke $r34.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r36 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r8, $d0, $r33, $r35);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r36);

     label29:
        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TAGS", 0);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void addTags(net.sourceforge.plantuml.cucadiagram.IEntity,java.lang.String)>(r9, $r11);

        r12 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r12 == null goto label30;

        $r25 = new net.sourceforge.plantuml.UrlBuilder;

        $r26 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r27 = interfaceinvoke $r26.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r28 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r25.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r27, $r28);

        r76 = virtualinvoke $r25.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r12);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void addUrl(net.sourceforge.plantuml.Url)>(r76);

     label30:
        $r13 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r14 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r16 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r77 = virtualinvoke $r13.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r15, r0, $r17);

        r78 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 1);

        if r78 != null goto label31;

        $r79 = null;

        goto label32;

     label31:
        $r18 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r20 = virtualinvoke r3.<net.sourceforge.plantuml.descdiagram.DescriptionDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r79 = virtualinvoke $r19.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r21, r78);

     label32:
        if $r79 == null goto label33;

        $r24 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r77 = virtualinvoke r77.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors add(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r24, $r79);

     label33:
        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r77);

        $r23 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r23;
    }

    public static boolean existsWithBadType3(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram, net.sourceforge.plantuml.cucadiagram.Code, net.sourceforge.plantuml.cucadiagram.Ident, net.sourceforge.plantuml.cucadiagram.LeafType, net.sourceforge.plantuml.graphic.USymbol)
    {
        net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.cucadiagram.Code r1;
        net.sourceforge.plantuml.cucadiagram.LeafType $r2, r3, $r7;
        net.sourceforge.plantuml.graphic.USymbol r4, $r5, $r8;
        net.sourceforge.plantuml.cucadiagram.Ident r6;
        net.sourceforge.plantuml.cucadiagram.ILeaf r9, r10;

        r0 := @parameter0: net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.Code;

        r6 := @parameter2: net.sourceforge.plantuml.cucadiagram.Ident;

        r3 := @parameter3: net.sourceforge.plantuml.cucadiagram.LeafType;

        r4 := @parameter4: net.sourceforge.plantuml.graphic.USymbol;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean V1972()>();

        if $z0 == 0 goto label4;

        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean leafExistSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r6);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        r9 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getLeafSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r6);

        $r7 = interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        if $r7 == r3 goto label2;

        return 1;

     label2:
        if r4 == null goto label3;

        $r8 = interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r8 == r4 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean leafExist(net.sourceforge.plantuml.cucadiagram.Code)>(r1);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        r10 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getLeaf(net.sourceforge.plantuml.cucadiagram.Code)>(r1);

        $r2 = interfaceinvoke r10.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        if $r2 == r3 goto label6;

        return 1;

     label6:
        if r4 == null goto label7;

        $r5 = interfaceinvoke r10.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r5 == r4 goto label7;

        return 1;

     label7:
        return 0;
    }

    private char getCharEncoding(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull r1;
        char $c1;

        r1 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 2 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        goto label2;

     label1:
        $c1 = 0;

     label2:
        return $c1;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.descdiagram.DescriptionDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.descdiagram.DescriptionDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.descdiagram.DescriptionDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: java.lang.String DISPLAY_WITHOUT_QUOTE> = "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%pLN_.]+)";

        <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: java.lang.String DISPLAY> = "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])";

        <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: java.lang.String DISPLAY_CORE> = "[%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]";

        <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: java.lang.String CODE_WITH_QUOTE> = "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%g].+?[%g])";

        <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: java.lang.String CODE> = "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])";

        <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: java.lang.String CODE_CORE> = "[%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]";

        <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull: java.lang.String ALL_TYPES> = "person|artifact|actor/|actor|folder|card|file|package|rectangle|hexagon|label|node|frame|cloud|database|queue|stack|storage|agent|usecase/|usecase|component|boundary|control|entity|interface|circle|collections|port|portin|portout";

        return;
    }
}
