public class net.sourceforge.plantuml.posimo.EntityImageNote2 extends net.sourceforge.plantuml.posimo.AbstractEntityImage2
{
    private final net.sourceforge.plantuml.skin.Component comp;

    public void <init>(net.sourceforge.plantuml.cucadiagram.IEntity, net.sourceforge.plantuml.ISkinParam, java.util.Collection)
    {
        net.sourceforge.plantuml.posimo.EntityImageNote2 r0;
        net.sourceforge.plantuml.cucadiagram.IEntity r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.skin.rose.Rose $r3;
        net.sourceforge.plantuml.skin.ComponentType $r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6;
        net.sourceforge.plantuml.skin.Component $r7;
        java.util.Collection r8;

        r0 := @this: net.sourceforge.plantuml.posimo.EntityImageNote2;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r8 := @parameter2: java.util.Collection;

        specialinvoke r0.<net.sourceforge.plantuml.posimo.AbstractEntityImage2: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        $r3 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r3.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r5 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r7 = virtualinvoke $r3.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>(null, $r5, null, r2, $r6);

        r0.<net.sourceforge.plantuml.posimo.EntityImageNote2: net.sourceforge.plantuml.skin.Component comp> = $r7;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.posimo.EntityImageNote2 r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2, $r3;
        double d0, d1;
        net.sourceforge.plantuml.Dimension2DDouble $r4;

        r0 := @this: net.sourceforge.plantuml.posimo.EntityImageNote2;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.posimo.EntityImageNote2: net.sourceforge.plantuml.skin.Component comp>;

        d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.posimo.EntityImageNote2: net.sourceforge.plantuml.skin.Component comp>;

        d1 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d1, d0);

        return $r4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UTranslate $r0;
        double d0, d1, d2, d3;
        net.sourceforge.plantuml.posimo.EntityImageNote2 r1;
        net.sourceforge.plantuml.skin.Area $r2;
        net.sourceforge.plantuml.skin.Component $r3;
        net.sourceforge.plantuml.graphic.StringBounder $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r5;
        net.sourceforge.plantuml.skin.SimpleContext2D $r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r7, r8;

        r1 := @this: net.sourceforge.plantuml.posimo.EntityImageNote2;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d1);

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r0);

        $r3 = r1.<net.sourceforge.plantuml.posimo.EntityImageNote2: net.sourceforge.plantuml.skin.Component comp>;

        $r2 = new net.sourceforge.plantuml.skin.Area;

        $r4 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.posimo.EntityImageNote2: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        specialinvoke $r2.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5);

        $r6 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r6.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r8, $r2, $r6);

        return;
    }
}
