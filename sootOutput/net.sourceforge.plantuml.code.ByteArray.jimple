public class net.sourceforge.plantuml.code.ByteArray extends java.lang.Object
{
    private final byte[] data;
    private final int length;

    private void <init>(byte[], int)
    {
        net.sourceforge.plantuml.code.ByteArray r0;
        byte[] r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.code.ByteArray;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.code.ByteArray: byte[] data> = r1;

        r0.<net.sourceforge.plantuml.code.ByteArray: int length> = i0;

        return;
    }

    public static net.sourceforge.plantuml.code.ByteArray 'from'(byte[])
    {
        net.sourceforge.plantuml.code.ByteArray $r0;
        byte[] r1;
        int $i0;

        r1 := @parameter0: byte[];

        $r0 = new net.sourceforge.plantuml.code.ByteArray;

        $i0 = lengthof r1;

        specialinvoke $r0.<net.sourceforge.plantuml.code.ByteArray: void <init>(byte[],int)>(r1, $i0);

        return $r0;
    }

    public java.lang.String toUFT8String() throws java.io.UnsupportedEncodingException
    {
        java.lang.String $r0;
        net.sourceforge.plantuml.code.ByteArray r1;
        java.nio.charset.Charset $r2;
        int $i0;
        byte[] $r3;

        r1 := @this: net.sourceforge.plantuml.code.ByteArray;

        $r0 = new java.lang.String;

        $r3 = r1.<net.sourceforge.plantuml.code.ByteArray: byte[] data>;

        $i0 = r1.<net.sourceforge.plantuml.code.ByteArray: int length>;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>($r3, 0, $i0, $r2);

        return $r0;
    }

    public java.lang.String toUPF9String() throws java.io.IOException
    {
        net.sourceforge.plantuml.code.ByteArray r0;
        int $i0;
        byte[] $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.code.ByteArray;

        $r1 = r0.<net.sourceforge.plantuml.code.ByteArray: byte[] data>;

        $i0 = r0.<net.sourceforge.plantuml.code.ByteArray: int length>;

        $r2 = staticinvoke <net.sourceforge.plantuml.code.Upf9Decoder: java.lang.String decodeString(byte[],int)>($r1, $i0);

        return $r2;
    }

    public int getByteAt(int)
    {
        net.sourceforge.plantuml.code.ByteArray r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: net.sourceforge.plantuml.code.ByteArray;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.code.ByteArray: byte[] data>;

        $b1 = $r1[i0];

        return $b1;
    }

    public int length()
    {
        net.sourceforge.plantuml.code.ByteArray r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.code.ByteArray;

        $i0 = r0.<net.sourceforge.plantuml.code.ByteArray: int length>;

        return $i0;
    }
}
