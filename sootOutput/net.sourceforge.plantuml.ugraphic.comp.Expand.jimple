public class net.sourceforge.plantuml.ugraphic.comp.Expand extends java.lang.Object implements java.lang.Comparable
{
    private final double position;
    private final double extend;
    private final net.sourceforge.plantuml.ugraphic.comp.ExpandType type;

    public void <init>(net.sourceforge.plantuml.ugraphic.comp.ExpandType, double, double)
    {
        net.sourceforge.plantuml.ugraphic.comp.Expand r0;
        double d0, d1;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.comp.ExpandType r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Expand;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.ExpandType;

        d1 := @parameter1: double;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: net.sourceforge.plantuml.ugraphic.comp.ExpandType type> = r1;

        r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: double position> = d1;

        r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: double extend> = d0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r9;
        net.sourceforge.plantuml.ugraphic.comp.Expand r2;
        double $d0, $d1;
        net.sourceforge.plantuml.ugraphic.comp.ExpandType $r7;
        java.lang.String $r10;

        r2 := @this: net.sourceforge.plantuml.ugraphic.comp.Expand;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.comp.Expand: double position>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("==>+");

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.comp.Expand: double extend>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = r2.<net.sourceforge.plantuml.ugraphic.comp.Expand: net.sourceforge.plantuml.ugraphic.comp.ExpandType type>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public int compareTo(net.sourceforge.plantuml.ugraphic.comp.Expand)
    {
        net.sourceforge.plantuml.ugraphic.comp.Expand r0, r1;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Expand;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.Expand;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: double position>;

        $d0 = r1.<net.sourceforge.plantuml.ugraphic.comp.Expand: double position>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        $d3 = r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: double position>;

        $d2 = r1.<net.sourceforge.plantuml.ugraphic.comp.Expand: double position>;

        $b1 = $d3 cmpl $d2;

        if $b1 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public final double getPosition()
    {
        net.sourceforge.plantuml.ugraphic.comp.Expand r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Expand;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: double position>;

        return $d0;
    }

    public final double getExtend()
    {
        net.sourceforge.plantuml.ugraphic.comp.Expand r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Expand;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: double extend>;

        return $d0;
    }

    public final net.sourceforge.plantuml.ugraphic.comp.ExpandType getType()
    {
        net.sourceforge.plantuml.ugraphic.comp.Expand r0;
        net.sourceforge.plantuml.ugraphic.comp.ExpandType $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Expand;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: net.sourceforge.plantuml.ugraphic.comp.ExpandType type>;

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.comp.Expand r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.comp.Expand;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.ugraphic.comp.Expand) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.comp.Expand: int compareTo(net.sourceforge.plantuml.ugraphic.comp.Expand)>($r2);

        return $i0;
    }
}
