public class net.sourceforge.plantuml.activitydiagram3.ftile.Snake extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UShape
{
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm;
    private final net.sourceforge.plantuml.ugraphic.UPolygon startDecoration;
    private final net.sourceforge.plantuml.ugraphic.UPolygon endDecoration;
    private final net.sourceforge.plantuml.graphic.Rainbow color;
    private final java.util.List texts;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable;
    private final net.sourceforge.plantuml.Direction emphasizeDirection;
    private final net.sourceforge.plantuml.ISkinParam skinParam;

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake transformX(net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0, r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        java.awt.geom.Point2D$Double r5;
        net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform r6;
        double $d0, d1, d2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r6 := @parameter0: net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake cloneEmpty()>();

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.awt.geom.Point2D$Double) $r4;

        $d0 = r5.<java.awt.geom.Point2D$Double: double x>;

        d1 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform: double transform(double)>($d0);

        d2 = r5.<java.awt.geom.Point2D$Double: double y>;

        virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d1, d2);

        goto label1;

     label2:
        return r1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake move(double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0, r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        java.awt.geom.Point2D r5;
        double $d0, d1, $d2, $d3, d4, $d5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        d1 := @parameter0: double;

        d4 := @parameter1: double;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake cloneEmpty()>();

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.awt.geom.Point2D) $r4;

        $d0 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + d1;

        $d3 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + d4;

        virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>($d2, $d5);

        goto label1;

     label2:
        return r1;
    }

    private net.sourceforge.plantuml.activitydiagram3.ftile.Snake cloneEmpty()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r0, r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r2, $r7;
        net.sourceforge.plantuml.ISkinParam $r3;
        net.sourceforge.plantuml.ugraphic.UPolygon $r4, $r6;
        net.sourceforge.plantuml.graphic.Rainbow $r5;
        java.util.List $r8;
        net.sourceforge.plantuml.Direction $r9;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r10;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        $r5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        $r6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r7 = virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.activitydiagram3.ftile.Worm cloneEmpty()>();

        $r10 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable>;

        $r9 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

        $r8 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>($r3, $r4, $r5, $r6, $r7, $r10, $r9, $r8);

        return $r0;
    }

    public final net.sourceforge.plantuml.activitydiagram3.ftile.Snake ignoreForCompression()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void setIgnoreForCompression()>();

        return r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake emphasizeDirection(net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r0, r1;
        net.sourceforge.plantuml.Direction r2;
        java.util.List $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r5;
        net.sourceforge.plantuml.ugraphic.UPolygon $r6, $r8;
        net.sourceforge.plantuml.graphic.Rainbow $r7;
        net.sourceforge.plantuml.ISkinParam $r9;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r2 := @parameter0: net.sourceforge.plantuml.Direction;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r9 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r8 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        $r7 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        $r6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

        $r5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable>;

        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>($r9, $r8, $r7, $r6, $r5, $r4, r2, $r3);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake withoutEndDecoration()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r0, r1;
        java.util.List $r2;
        net.sourceforge.plantuml.Direction $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r5;
        net.sourceforge.plantuml.graphic.Rainbow $r6;
        net.sourceforge.plantuml.ugraphic.UPolygon $r7;
        net.sourceforge.plantuml.ISkinParam $r8;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r8 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        $r6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        $r5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable>;

        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>($r8, $r7, $r6, null, $r5, $r4, $r3, $r2);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake withMerge(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r0, r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy r2;
        java.util.List $r3;
        net.sourceforge.plantuml.Direction $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r5;
        net.sourceforge.plantuml.ugraphic.UPolygon $r6, $r8;
        net.sourceforge.plantuml.graphic.Rainbow $r7;
        net.sourceforge.plantuml.ISkinParam $r9;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r2 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r9 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r8 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        $r7 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        $r6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

        $r5 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>($r9, $r8, $r7, $r6, $r5, r2, $r4, $r3);

        return $r0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake withLabel(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.TextBlock r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text $r2;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r3;
        java.util.List $r4;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter1: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        if r0 == null goto label1;

        $r4 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        $r2 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text;

        specialinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.VerticalAlignment,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r0, null, r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return r1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake withLabel(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.VerticalAlignment)
    {
        net.sourceforge.plantuml.graphic.TextBlock r0, $r4;
        net.sourceforge.plantuml.graphic.VerticalAlignment r1, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r2;
        java.lang.UnsupportedOperationException $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text $r5;
        java.util.List $r6;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.VerticalAlignment;

        if r0 == null goto label1;

        $r4 = <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock EMPTY_TEXT_BLOCK>;

        if r0 == $r4 goto label1;

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        $r5 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text;

        specialinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.VerticalAlignment,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r0, r1, null);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

     label1:
        $r7 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment CENTER>;

        if r1 == $r7 goto label2;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;

     label2:
        return r2;
    }

    public static net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.graphic.Rainbow)
    {
        net.sourceforge.plantuml.style.StyleSignature $r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r4;
        net.sourceforge.plantuml.graphic.Rainbow r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r6;
        java.util.ArrayList $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r8;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.Rainbow;

        $r0 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature activityArrow()>();

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r3 = virtualinvoke $r0.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        $r4 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r6 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        specialinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>(r3);

        $r8 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy FULL>;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        specialinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>(r1, null, r5, null, $r6, $r8, null, $r7);

        return $r4;
    }

    public static net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.graphic.Rainbow, net.sourceforge.plantuml.ugraphic.UPolygon)
    {
        net.sourceforge.plantuml.style.StyleSignature $r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r4;
        net.sourceforge.plantuml.graphic.Rainbow r5;
        net.sourceforge.plantuml.ugraphic.UPolygon r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r7;
        java.util.ArrayList $r8;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r9;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.Rainbow;

        r6 := @parameter2: net.sourceforge.plantuml.ugraphic.UPolygon;

        $r0 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature activityArrow()>();

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r3 = virtualinvoke $r0.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        $r4 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r7 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        specialinvoke $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>(r3);

        $r9 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy FULL>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        specialinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>(r1, null, r5, r6, $r7, $r9, null, $r8);

        return $r4;
    }

    public static net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ugraphic.UPolygon, net.sourceforge.plantuml.graphic.Rainbow, net.sourceforge.plantuml.ugraphic.UPolygon)
    {
        net.sourceforge.plantuml.style.StyleSignature $r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.style.StyleBuilder $r2;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r4;
        net.sourceforge.plantuml.ugraphic.UPolygon r5, r7;
        net.sourceforge.plantuml.graphic.Rainbow r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r8;
        java.util.ArrayList $r9;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r10;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r5 := @parameter1: net.sourceforge.plantuml.ugraphic.UPolygon;

        r6 := @parameter2: net.sourceforge.plantuml.graphic.Rainbow;

        r7 := @parameter3: net.sourceforge.plantuml.ugraphic.UPolygon;

        $r0 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature activityArrow()>();

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r3 = virtualinvoke $r0.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r2);

        $r4 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r8 = new net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        specialinvoke $r8.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void <init>(net.sourceforge.plantuml.style.Style)>(r3);

        $r10 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy FULL>;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        specialinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>(r1, r5, r6, r7, $r8, $r10, null, $r9);

        return $r4;
    }

    private void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ugraphic.UPolygon, net.sourceforge.plantuml.graphic.Rainbow, net.sourceforge.plantuml.ugraphic.UPolygon, net.sourceforge.plantuml.activitydiagram3.ftile.Worm, net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy, net.sourceforge.plantuml.Direction, java.util.List)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.graphic.Rainbow r1, $r3;
        java.lang.Object $r2, $r7;
        int $i0;
        net.sourceforge.plantuml.ISkinParam r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm r5;
        java.util.List r6, $r8;
        net.sourceforge.plantuml.Direction r9;
        net.sourceforge.plantuml.ugraphic.UPolygon r10, r11;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r4 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r10 := @parameter1: net.sourceforge.plantuml.ugraphic.UPolygon;

        r1 := @parameter2: net.sourceforge.plantuml.graphic.Rainbow;

        r11 := @parameter3: net.sourceforge.plantuml.ugraphic.UPolygon;

        r5 := @parameter4: net.sourceforge.plantuml.activitydiagram3.ftile.Worm;

        r12 := @parameter5: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy;

        r9 := @parameter6: net.sourceforge.plantuml.Direction;

        r6 := @parameter7: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.graphic.Rainbow) $r2;

        $i0 = virtualinvoke $r3.<net.sourceforge.plantuml.graphic.Rainbow: int size()>();

        if $i0 != 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label1:
        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ISkinParam skinParam> = r4;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm> = r5;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $r8 = (java.util.List) $r7;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts> = $r8;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection> = r9;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration> = r10;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration> = r11;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color> = r1;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable> = r12;

        return;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake translate(net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0, $r2;
        net.sourceforge.plantuml.ugraphic.UTranslate r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake move(double,double)>($d0, $d1);

        return $r2;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.lang.String toString()>();

        return $r2;
    }

    public void addPoint(double, double)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        double d0, d1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void addPoint(double,double)>(d0, d1);

        return;
    }

    public void addPoint(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>($d0, $d1);

        return;
    }

    public void drawInternal(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.graphic.Rainbow $r1, $r3;
        int $i0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r4;
        net.sourceforge.plantuml.ugraphic.UPolygon $r5, $r8;
        java.util.List $r6;
        java.lang.Object $r7;
        net.sourceforge.plantuml.Direction $r9;
        net.sourceforge.plantuml.graphic.HtmlColorAndStyle $r10;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.graphic.Rainbow: int size()>();

        if $i0 <= 1 goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void drawRainbow(net.sourceforge.plantuml.ugraphic.UGraphic)>(r2);

        goto label2;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        $r6 = virtualinvoke $r3.<net.sourceforge.plantuml.graphic.Rainbow: java.util.List getColors()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (net.sourceforge.plantuml.graphic.HtmlColorAndStyle) $r7;

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

        $r8 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

        virtualinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void drawInternalOneColor(net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.graphic.HtmlColorAndStyle,double,net.sourceforge.plantuml.Direction,net.sourceforge.plantuml.ugraphic.UPolygon)>($r5, r2, $r10, 1.5, $r9, $r8);

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void drawInternalLabel(net.sourceforge.plantuml.ugraphic.UGraphic)>(r2);

     label2:
        return;
    }

    private void drawRainbow(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.graphic.Rainbow $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        double d0, $d1, $d2, d3, d4, $d5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r3, $r5, r14;
        net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation r4;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6, $r7, $r10, $r11, r20;
        net.sourceforge.plantuml.ugraphic.UGraphic r8, $r9;
        java.util.ArrayList $r12;
        java.util.List r13;
        net.sourceforge.plantuml.ugraphic.UPolygon $r15, $r19;
        java.lang.Object $r16;
        net.sourceforge.plantuml.graphic.HtmlColorAndStyle $r17;
        net.sourceforge.plantuml.Direction $r18;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        r13 = virtualinvoke $r1.<net.sourceforge.plantuml.graphic.Rainbow: java.util.List getColors()>();

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        i0 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.Rainbow: int getColorArrowSeparationSpace()>();

        $i1 = 2 + i0;

        d0 = (double) $i1;

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r4 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation: net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation create(net.sourceforge.plantuml.activitydiagram3.ftile.Worm,double)>($r3, d0);

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation: boolean isDxNegative()>();

        if $z0 == 0 goto label1;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(java.util.Collection)>(r13);

        r13 = $r12;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r12);

     label1:
        $i2 = interfaceinvoke r13.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $d1 = (double) $i3;

        $d2 = -1.0 * $d1;

        d3 = $d2 / 2.0;

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation: net.sourceforge.plantuml.ugraphic.UTranslate getFirst()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate multiplyBy(double)>(d3);

        r14 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.activitydiagram3.ftile.Worm moveFirstPoint(net.sourceforge.plantuml.ugraphic.UTranslate)>($r7);

        $i4 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation: int size()>();

        if $i4 <= 2 goto label2;

        $r10 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation: net.sourceforge.plantuml.ugraphic.UTranslate getLast()>();

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate multiplyBy(double)>(d3);

        r14 = virtualinvoke r14.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.activitydiagram3.ftile.Worm moveLastPoint(net.sourceforge.plantuml.ugraphic.UTranslate)>($r11);

     label2:
        i8 = 0;

     label3:
        $i9 = interfaceinvoke r13.<java.util.List: int size()>();

        if i8 >= $i9 goto label7;

        d4 = 1.5;

        if i0 != 0 goto label6;

        $i6 = interfaceinvoke r13.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        if i8 != $i7 goto label4;

        $d5 = 2.0;

        goto label5;

     label4:
        $d5 = 3.0;

     label5:
        d4 = $d5;

     label6:
        $r15 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        $r16 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i8);

        $r17 = (net.sourceforge.plantuml.graphic.HtmlColorAndStyle) $r16;

        $r18 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

        virtualinvoke r14.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: void drawInternalOneColor(net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.graphic.HtmlColorAndStyle,double,net.sourceforge.plantuml.Direction,net.sourceforge.plantuml.ugraphic.UPolygon)>($r15, r8, $r17, d4, $r18, $r19);

        r14 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation: net.sourceforge.plantuml.activitydiagram3.ftile.Worm mute(net.sourceforge.plantuml.activitydiagram3.ftile.Worm)>(r14);

        i8 = i8 + 1;

        goto label3;

     label7:
        $i5 = interfaceinvoke r13.<java.util.List: int size()>();

        r20 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation: net.sourceforge.plantuml.ugraphic.UTranslate getTextTranslate(int)>($i5);

        $r9 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r20);

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void drawInternalLabel(net.sourceforge.plantuml.ugraphic.UGraphic)>($r9);

        return;
    }

    private void drawInternalLabel(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, $r11;
        net.sourceforge.plantuml.graphic.StringBounder $r6, $r7;
        java.awt.geom.Point2D r8;
        net.sourceforge.plantuml.graphic.TextBlock $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text) $r3;

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: boolean access$000(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text,net.sourceforge.plantuml.graphic.StringBounder)>(r4, $r6);

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r8 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getTextBlockPosition(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>($r7, r4);

        $r9 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: net.sourceforge.plantuml.graphic.TextBlock access$100(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r4);

        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(java.awt.geom.Point2D)>(r8);

        $r11 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        interfaceinvoke $r9.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r11);

     label2:
        goto label1;

     label3:
        return;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1;
        boolean $z0, $z1;
        java.util.List $r2;
        java.lang.Object $r3, $r8;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        java.awt.geom.Point2D r5, r10;
        net.sourceforge.plantuml.graphic.TextBlock $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7;
        double $d0, $d1, $d2, $d3, d4;
        java.util.Iterator r9, r11;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text r12;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d4 = -1.7976931348623157E308;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r9 = virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.awt.geom.Point2D) $r8;

        $d3 = virtualinvoke r10.<java.awt.geom.Point2D: double getX()>();

        d4 = staticinvoke <java.lang.Math: double max(double,double)>(d4, $d3);

        goto label1;

     label2:
        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        r11 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text) $r3;

        r5 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getTextBlockPosition(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r4, r12);

        $r6 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: net.sourceforge.plantuml.graphic.TextBlock access$100(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r12);

        r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $d0 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d0 + $d1;

        d4 = staticinvoke <java.lang.Math: double max(double,double)>(d4, $d2);

        goto label3;

     label4:
        return d4;
    }

    private java.awt.geom.Point2D getTextBlockPosition(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1, $r3, $r9, $r19, $r21, $r23, $r25, $r27, $r29, $r30, $r32, $r34, $r37;
        java.awt.geom.Point2D$Double r2, r4, $r24, $r26, r28, $r39;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text r5;
        net.sourceforge.plantuml.graphic.TextBlock $r6;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        net.sourceforge.plantuml.awt.geom.Dimension2D r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, d43, d44;
        java.lang.String $r10, $r20, $r22, $r38;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.graphic.VerticalAlignment $r11, $r12, $r13, $r14;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r15, $r16, $r17, $r18;
        java.awt.geom.Point2D $r31, $r33, $r35;
        java.lang.AssertionError $r36;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r7 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r2 = virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(0);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(1);

        $r6 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: net.sourceforge.plantuml.graphic.TextBlock access$100(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r5);

        r8 = interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        d43 = $d2 + 4.0;

        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.lang.String getDirectionsCode()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>("DLD");

        if $z0 != 0 goto label1;

        $r37 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r38 = virtualinvoke $r37.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.lang.String getDirectionsCode()>();

        $z4 = virtualinvoke $r38.<java.lang.String: boolean startsWith(java.lang.String)>("DRD");

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        z1 = $z5;

        $d3 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r4.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        $d6 = $d5 / 2.0;

        $d7 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d8 = $d7 / 2.0;

        d44 = $d6 - $d8;

        $r11 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: net.sourceforge.plantuml.graphic.VerticalAlignment access$200(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r5);

        $r12 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment BOTTOM>;

        if $r11 != $r12 goto label4;

        $r34 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r35 = virtualinvoke $r34.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D getLast()>();

        virtualinvoke $r35.<java.awt.geom.Point2D: double getX()>();

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label4:
        $r13 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: net.sourceforge.plantuml.graphic.VerticalAlignment access$200(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r5);

        $r14 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment CENTER>;

        if $r13 != $r14 goto label5;

        $r29 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        d43 = virtualinvoke $r29.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: double getMinX()>();

        $r30 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r31 = virtualinvoke $r30.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D getFirst()>();

        $d36 = virtualinvoke $r31.<java.awt.geom.Point2D: double getY()>();

        $r32 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r33 = virtualinvoke $r32.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D getLast()>();

        $d37 = virtualinvoke $r33.<java.awt.geom.Point2D: double getY()>();

        $d38 = $d36 + $d37;

        $d39 = $d38 - 10.0;

        $d40 = $d39 / 2.0;

        $d41 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d42 = $d41 / 2.0;

        d44 = $d40 - $d42;

        goto label9;

     label5:
        $r15 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: net.sourceforge.plantuml.graphic.HorizontalAlignment access$300(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r5);

        $r16 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        if $r15 != $r16 goto label6;

        if $z5 == 0 goto label6;

        $r27 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r28 = virtualinvoke $r27.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(2);

        $d30 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        $d31 = virtualinvoke r28.<java.awt.geom.Point2D: double getX()>();

        $d32 = $d30 + $d31;

        $d33 = $d32 / 2.0;

        $d34 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d35 = $d34 / 2.0;

        d43 = $d33 - $d35;

        goto label9;

     label6:
        $r17 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: net.sourceforge.plantuml.graphic.HorizontalAlignment access$300(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text)>(r5);

        $r18 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        if $r17 != $r18 goto label7;

        if z1 == 0 goto label7;

        $d25 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d26 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        $d27 = staticinvoke <java.lang.Math: double max(double,double)>($d25, $d26);

        $d28 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d29 = $d27 - $d28;

        d43 = $d29 - 4.0;

        goto label9;

     label7:
        $r19 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.lang.String getDirectionsCode()>();

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("RD");

        if $z2 == 0 goto label8;

        $d17 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d18 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        d43 = staticinvoke <java.lang.Math: double max(double,double)>($d17, $d18);

        $d19 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $r25 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r26 = virtualinvoke $r25.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(2);

        $d20 = virtualinvoke $r26.<java.awt.geom.Point2D$Double: double getY()>();

        $d21 = $d19 + $d20;

        $d22 = $d21 / 2.0;

        $d23 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d24 = $d23 / 2.0;

        d44 = $d22 - $d24;

        goto label9;

     label8:
        $r21 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.lang.String getDirectionsCode()>();

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("LD");

        if $z3 == 0 goto label9;

        $d9 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d10 = virtualinvoke r4.<java.awt.geom.Point2D: double getX()>();

        d43 = staticinvoke <java.lang.Math: double min(double,double)>($d9, $d10);

        $d11 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r24 = virtualinvoke $r23.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(2);

        $d12 = virtualinvoke $r24.<java.awt.geom.Point2D$Double: double getY()>();

        $d13 = $d11 + $d12;

        $d14 = $d13 / 2.0;

        $d15 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d16 = $d15 / 2.0;

        d44 = $d14 - $d16;

     label9:
        $r39 = new java.awt.geom.Point2D$Double;

        specialinvoke $r39.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d43, d44);

        return $r39;
    }

    public java.util.List getHorizontalLines()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r3, $r4, $r6;
        int $i0, $i1, $i2, i4;
        java.awt.geom.Point2D$Double r5, r7;
        double $d0, $d1;
        byte $b3;
        java.awt.geom.Line2D$Double $r8;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $i0 = virtualinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: int size()>();

        $i1 = $i0 - 1;

        if i4 >= $i1 goto label3;

        $r4 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(i4);

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $i2 = i4 + 1;

        r7 = virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>($i2);

        $d0 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        $d1 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        $b3 = $d0 cmpl $d1;

        if $b3 != 0 goto label2;

        $r8 = new java.awt.geom.Line2D$Double;

        specialinvoke $r8.<java.awt.geom.Line2D$Double: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r5, r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private java.awt.geom.Point2D getFirst()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1;
        java.awt.geom.Point2D$Double $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>(0);

        return $r2;
    }

    public java.awt.geom.Point2D getLast()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r1, $r2;
        int $i0, $i1;
        java.awt.geom.Point2D$Double $r3;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: java.awt.geom.Point2D$Double get(int)>($i1);

        return $r3;
    }

    static boolean same(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @parameter0: java.awt.geom.Point2D;

        r1 := @parameter1: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>(r1);

        $b0 = $d0 cmpg 0.001;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Snake merge(net.sourceforge.plantuml.activitydiagram3.ftile.Snake, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0, r1, $r12, $r20;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r2, $r3, r4, $r5;
        java.util.List $r6, $r18, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.awt.geom.Point2D $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;
        net.sourceforge.plantuml.ugraphic.UPolygon $r13, $r14, $r16, $r33, r34;
        java.lang.UnsupportedOperationException $r15;
        java.util.ArrayList $r17;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r21, $r22, $r25;
        net.sourceforge.plantuml.ISkinParam $r23;
        net.sourceforge.plantuml.graphic.Rainbow $r24;
        net.sourceforge.plantuml.Direction $r26, $r36;
        java.lang.Object $r30;
        java.util.Iterator r31;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text r32;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r11 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable>;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy max(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r2);

        $r5 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy NONE>;

        if r4 != $r5 goto label01;

        return null;

     label01:
        $r6 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        r31 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r30 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text) $r30;

        $z3 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text: boolean access$000(net.sourceforge.plantuml.activitydiagram3.ftile.Snake$Text,net.sourceforge.plantuml.graphic.StringBounder)>(r32, r11);

        if $z3 == 0 goto label03;

        return null;

     label03:
        goto label02;

     label04:
        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getLast()>();

        $r8 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getFirst()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: boolean same(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r7, $r8);

        if $z1 == 0 goto label11;

        $r13 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

        if $r13 != null goto label05;

        $r33 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

        goto label06;

     label05:
        $r33 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon endDecoration>;

     label06:
        r34 = $r33;

        $r14 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        if $r14 != null goto label07;

        $r16 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ugraphic.UPolygon startDecoration>;

        if $r16 == null goto label08;

     label07:
        $r15 = new java.lang.UnsupportedOperationException;

        specialinvoke $r15.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not yet coded: to be done");

        throw $r15;

     label08:
        $r17 = new java.util.ArrayList;

        $r18 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        specialinvoke $r17.<java.util.ArrayList: void <init>(java.util.Collection)>($r18);

        $r19 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.util.List texts>;

        virtualinvoke $r17.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r19);

        $r20 = new net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r23 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r24 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.graphic.Rainbow color>;

        $r22 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r21 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $r25 = virtualinvoke $r22.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: net.sourceforge.plantuml.activitydiagram3.ftile.Worm merge(net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r21, r4);

        $r26 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

        if $r26 != null goto label09;

        $r36 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

        goto label10;

     label09:
        $r36 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.Direction emphasizeDirection>;

     label10:
        specialinvoke $r20.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.ugraphic.UPolygon,net.sourceforge.plantuml.activitydiagram3.ftile.Worm,net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy,net.sourceforge.plantuml.Direction,java.util.List)>($r23, null, $r24, r34, $r25, r4, $r36, $r17);

        return $r20;

     label11:
        $r9 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getFirst()>();

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getLast()>();

        $z2 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: boolean same(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r9, $r10);

        if $z2 == 0 goto label12;

        $r12 = virtualinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake merge(net.sourceforge.plantuml.activitydiagram3.ftile.Snake,net.sourceforge.plantuml.graphic.StringBounder)>(r0, r11);

        return $r12;

     label12:
        return null;
    }

    public boolean touches(net.sourceforge.plantuml.activitydiagram3.ftile.Snake)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0, r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r1, $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r3;
        boolean $z0, $z1;
        java.awt.geom.Point2D $r5, $r6;

        r4 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy mergeable>;

        $r1 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy FULL>;

        if $r2 == $r1 goto label1;

        return 0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $z0 = virtualinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean isPureHorizontal()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getLast()>();

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: java.awt.geom.Point2D getFirst()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: boolean same(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r5, $r6);

        return $z1;
    }

    public boolean doesHorizontalCross(net.sourceforge.plantuml.ugraphic.MinMax)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake r0;
        net.sourceforge.plantuml.ugraphic.MinMax r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Worm $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.Snake;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.MinMax;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Worm worm>;

        $z0 = virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Worm: boolean doesHorizontalCross(net.sourceforge.plantuml.ugraphic.MinMax)>(r1);

        return $z0;
    }
}
