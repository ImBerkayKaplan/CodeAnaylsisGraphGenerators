public class net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis;

        $r1 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r56, $r59;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r9, $r12, $r16, $r24, $r28, $r36, $r40, $r49;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r6, $r7, $r10, $r13, $r17, $r18, $r19, $r20, $r21, $r22, $r25, $r29, $r30, $r31, $r32, $r33, $r34, $r37, $r41, $r42, $r43, $r44, $r45, $r46, $r50, $r51, $r52, $r53, $r60, $r62, $r63;
        net.sourceforge.plantuml.graphic.color.ColorParser $r5, $r61;
        net.sourceforge.plantuml.command.regex.RegexOr $r8;
        net.sourceforge.plantuml.command.regex.RegexConcat $r11, $r15, $r23, $r27, $r35, $r39, $r48, $r64;
        net.sourceforge.plantuml.command.regex.RegexOptional $r14, $r26, $r38, $r47;
        java.lang.StringBuilder $r54, $r55, $r57, $r58;

        $r0 = class "Lnet/sourceforge/plantuml/descdiagram/command/CommandCreateElementParenthesis;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[11];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\(\\)[%s]+");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis: net.sourceforge.plantuml.graphic.color.ColorParser color2()>();

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[2] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[3] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%g].+?[%g])");

        $r9[0] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r12 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r12[0] = $r13;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r16 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r16[0] = $r17;

        $r18 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r18.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE2", "(\\<\\<.+\\>\\>)");

        $r16[1] = $r18;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r16);

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r15);

        $r12[1] = $r14;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r12[2] = $r19;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r12[3] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r12[4] = $r21;

        $r22 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r12[5] = $r22;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r12);

        $r9[1] = $r11;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r24 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE3", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r24[0] = $r25;

        $r26 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r28 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r29 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r28[0] = $r29;

        $r30 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r30.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE3", "(\\<\\<.+\\>\\>)");

        $r28[1] = $r30;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r28);

        specialinvoke $r26.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r27);

        $r24[1] = $r26;

        $r31 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r24[2] = $r31;

        $r32 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r32.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r24[3] = $r32;

        $r33 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r24[4] = $r33;

        $r34 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r34.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY3", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r24[5] = $r34;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r24);

        $r9[2] = $r23;

        $r35 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r36 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r37 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r37.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY4", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%pLN_.]+)");

        $r36[0] = $r37;

        $r38 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r39 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r40 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r41 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r40[0] = $r41;

        $r42 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r42.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE4", "(\\<\\<.+\\>\\>)");

        $r40[1] = $r42;

        specialinvoke $r39.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r40);

        specialinvoke $r38.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r39);

        $r36[1] = $r38;

        $r43 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r36[2] = $r43;

        $r44 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r44.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r36[3] = $r44;

        $r45 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r36[4] = $r45;

        $r46 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r46.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE4", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r36[5] = $r46;

        specialinvoke $r35.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r36);

        $r9[3] = $r35;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r9);

        $r2[4] = $r8;

        $r47 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r48 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r49 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r50 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r49[0] = $r50;

        $r51 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r51.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE", "(\\<\\<.+\\>\\>)");

        $r49[1] = $r51;

        specialinvoke $r48.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r49);

        specialinvoke $r47.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r48);

        $r2[5] = $r47;

        $r52 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r52;

        $r53 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r56 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r59);

        $r2[7] = $r53;

        $r60 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r60;

        $r61 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r62 = virtualinvoke $r61.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[9] = $r62;

        $r63 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[10] = $r63;

        $r64 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r64;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color2()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType,java.lang.String)>($r0, "COLOR2");

        return $r1;
    }

    protected final boolean isForbidden(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String $r1;
        boolean $z0;
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis r2;

        r2 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean matches(java.lang.String)>("^[\\p{L}0-9_.]+$");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r2, r8, r11, r14, $r29, $r41, $r44, $r48, $r51, $r55, $r58, r63, r64, r68;
        net.sourceforge.plantuml.cucadiagram.LeafType r4;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r16, $r18, $r20, $r22, $r28, $r31, $r32, $r36;
        net.sourceforge.plantuml.graphic.USymbol r7;
        net.sourceforge.plantuml.cucadiagram.Ident r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.cucadiagram.Code r10, $r62;
        net.sourceforge.plantuml.cucadiagram.ILeaf r12;
        net.sourceforge.plantuml.cucadiagram.Display $r13;
        net.sourceforge.plantuml.graphic.color.ColorParser $r15;
        net.sourceforge.plantuml.api.ThemeStyle $r17, $r23;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r19, $r21, $r37;
        net.sourceforge.plantuml.command.CommandExecutionResult $r25, $r45, $r52, $r59;
        net.sourceforge.plantuml.graphic.color.ColorType $r26;
        net.sourceforge.plantuml.UrlBuilder $r27;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r30;
        int $i0;
        double $d0;
        net.sourceforge.plantuml.FontParam[] $r33;
        net.sourceforge.plantuml.FontParam $r34;
        net.sourceforge.plantuml.ugraphic.UFont $r35;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r38;
        java.lang.StringBuilder $r39, $r40, $r42, $r43, $r46, $r47, $r49, $r50, $r53, $r54, $r56, $r57;
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis r60;
        net.sourceforge.plantuml.LineLocation r61;
        net.sourceforge.plantuml.Url r66;
        net.sourceforge.plantuml.graphic.color.Colors r67;
        net.sourceforge.plantuml.ugraphic.color.HColor $r69;

        r60 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis;

        r5 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        r61 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        r4 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DESCRIPTION>;

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r7 = staticinvoke <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol fromString(java.lang.String,net.sourceforge.plantuml.ISkinParam)>("interface", $r6);

        r8 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r1);

        r9 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r8);

        $z0 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z0 == 0 goto label01;

        $r62 = r9;

        goto label02;

     label01:
        $r62 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r8);

     label02:
        r10 = $r62;

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z1 != 0 goto label03;

        $z5 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean isGroup(net.sourceforge.plantuml.cucadiagram.Code)>($r62);

        if $z5 == 0 goto label03;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This element (");

        $r55 = interfaceinvoke $r62.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already defined");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $r59 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r58);

        return $r59;

     label03:
        $z2 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z2 == 0 goto label04;

        $z4 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean isGroupStrict(net.sourceforge.plantuml.cucadiagram.Ident)>(r9);

        if $z4 == 0 goto label04;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This element (");

        $r48 = virtualinvoke r9.<net.sourceforge.plantuml.cucadiagram.Ident: java.lang.String getName()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already defined");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r51);

        return $r52;

     label04:
        r63 = r2;

        if r2 != null goto label05;

        r63 = interfaceinvoke r10.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

     label05:
        r64 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r63);

        r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("STEREOTYPE", 0);

        $z3 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis: boolean existsWithBadType3(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r5, r10, r9, r4, r7);

        if $z3 == 0 goto label06;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This element (");

        $r41 = interfaceinvoke r10.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already defined");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r44);

        return $r45;

     label06:
        r12 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r9, r10, r4, r7);

        $r13 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r64);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setDisplay(net.sourceforge.plantuml.cucadiagram.Display)>($r13);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setUSymbol(net.sourceforge.plantuml.graphic.USymbol)>(r7);

        if r11 == null goto label07;

        $r31 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i0 = interfaceinvoke $r31.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i0;

        $r32 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r33 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r34 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r33[0] = $r34;

        $r35 = interfaceinvoke $r32.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r33);

        $r36 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r37 = interfaceinvoke $r36.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r38 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r11, $d0, $r35, $r37);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r38);

     label07:
        r14 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r14 == null goto label08;

        $r27 = new net.sourceforge.plantuml.UrlBuilder;

        $r28 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r29 = interfaceinvoke $r28.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r30 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r27.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r29, $r30);

        r66 = virtualinvoke $r27.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r14);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void addUrl(net.sourceforge.plantuml.Url)>(r66);

     label08:
        $r15 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r16 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r18 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r67 = virtualinvoke $r15.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r17, r0, $r19);

        r68 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 1);

        if r68 != null goto label09;

        $r69 = null;

        goto label10;

     label09:
        $r20 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r22 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r23 = interfaceinvoke $r22.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r69 = virtualinvoke $r21.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r23, r68);

     label10:
        if $r69 == null goto label11;

        $r26 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r67 = virtualinvoke r67.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors add(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r26, $r69);

     label11:
        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r67);

        $r25 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r25;
    }

    public static boolean existsWithBadType3(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram, net.sourceforge.plantuml.cucadiagram.Code, net.sourceforge.plantuml.cucadiagram.Ident, net.sourceforge.plantuml.cucadiagram.LeafType, net.sourceforge.plantuml.graphic.USymbol)
    {
        net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.cucadiagram.Code r1;
        net.sourceforge.plantuml.cucadiagram.LeafType $r2, r3, $r7;
        net.sourceforge.plantuml.graphic.USymbol r4, $r5, $r8;
        net.sourceforge.plantuml.cucadiagram.Ident r6;
        net.sourceforge.plantuml.cucadiagram.ILeaf r9, r10;

        r0 := @parameter0: net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.Code;

        r6 := @parameter2: net.sourceforge.plantuml.cucadiagram.Ident;

        r3 := @parameter3: net.sourceforge.plantuml.cucadiagram.LeafType;

        r4 := @parameter4: net.sourceforge.plantuml.graphic.USymbol;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean V1972()>();

        if $z0 == 0 goto label4;

        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean leafExistSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r6);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        r9 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getLeafSmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r6);

        $r7 = interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        if $r7 == r3 goto label2;

        return 1;

     label2:
        if r4 == null goto label3;

        $r8 = interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r8 == r4 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean leafExist(net.sourceforge.plantuml.cucadiagram.Code)>(r1);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        r10 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getLeaf(net.sourceforge.plantuml.cucadiagram.Code)>(r1);

        $r2 = interfaceinvoke r10.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.LeafType getLeafType()>();

        if $r2 == r3 goto label6;

        return 1;

     label6:
        if r4 == null goto label7;

        $r5 = interfaceinvoke r10.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.graphic.USymbol getUSymbol()>();

        if $r5 == r4 goto label7;

        return 1;

     label7:
        return 0;
    }

    private char getCharEncoding(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis r1;
        char $c1;

        r1 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 2 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        goto label2;

     label1:
        $c1 = 0;

     label2:
        return $c1;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.classdiagram.ClassDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.classdiagram.ClassDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
