public class net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines extends net.sourceforge.plantuml.command.CommandMultilines2
{

    public void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines r0;
        net.sourceforge.plantuml.command.regex.RegexConcat $r1;
        net.sourceforge.plantuml.command.MultilinesStrategy $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines;

        $r1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines: net.sourceforge.plantuml.command.regex.RegexConcat getRegexConcat()>();

        $r2 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy REMOVE_STARTING_QUOTE>;

        specialinvoke r0.<net.sourceforge.plantuml.command.CommandMultilines2: void <init>(net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>($r1, $r2);

        return;
    }

    public java.lang.String getPatternEnd()
    {
        net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines;

        return "^([^\\[\\]]*)\\]$";
    }

    private static net.sourceforge.plantuml.command.regex.RegexConcat getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r13, $r16;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r17, $r18, $r19, $r20, $r21;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;
        net.sourceforge.plantuml.command.regex.RegexConcat $r22;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/command/CommandParticipantMultilines;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[13];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TYPE", "(participant)");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE", "([%pLN_.@]+)");

        $r2[3] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[4] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<\\<.+\\>\\>)?");

        $r2[5] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r13 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r16);

        $r2[7] = $r10;

        $r17 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r2[9] = $r18;

        $r19 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[10] = $r19;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\[");

        $r2[11] = $r20;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[12] = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r22;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.sequencediagram.SequenceDiagram, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;
        net.sourceforge.plantuml.StringLocated $r2, $r3;
        java.lang.String $r4, r6, r11, $r15, r28;
        net.sourceforge.plantuml.command.regex.RegexResult r5;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r7;
        boolean $z0, z3;
        net.sourceforge.plantuml.cucadiagram.Display r8;
        net.sourceforge.plantuml.sequencediagram.ParticipantType r9;
        net.sourceforge.plantuml.sequencediagram.Participant r10;
        net.sourceforge.plantuml.command.CommandExecutionResult $r12, $r22;
        net.sourceforge.plantuml.UrlBuilder $r13;
        net.sourceforge.plantuml.ISkinParam $r14, $r19, r26;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r16;
        net.sourceforge.plantuml.FontParam[] $r17;
        net.sourceforge.plantuml.FontParam $r18;
        int $i0;
        double $d0;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r20;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r21;
        net.sourceforge.plantuml.command.BlocLines r23, r24, r25;
        net.sourceforge.plantuml.ugraphic.UFont r27;
        net.sourceforge.plantuml.Url r30;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines;

        r7 := @parameter0: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r23 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines: net.sourceforge.plantuml.command.regex.IRegex getStartingPattern()>();

        $r2 = virtualinvoke r23.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.StringLocated getFirst()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r5 = interfaceinvoke $r1.<net.sourceforge.plantuml.command.regex.IRegex: net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)>($r4);

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("CODE", 0);

        $z0 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: boolean participantsContainsKey(java.lang.String)>(r6);

        if $z0 == 0 goto label1;

        virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void putParticipantInLast(java.lang.String)>(r6);

        $r22 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r22;

     label1:
        r24 = virtualinvoke r23.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines subExtract(int,int)>(1, 1);

        r25 = virtualinvoke r24.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.command.BlocLines removeEmptyColumns()>();

        r8 = virtualinvoke r25.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.cucadiagram.Display toDisplay()>();

        r9 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType PARTICIPANT>;

        r10 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant createNewParticipant(net.sourceforge.plantuml.sequencediagram.ParticipantType,java.lang.String,net.sourceforge.plantuml.cucadiagram.Display,int)>(r9, r6, r8, 0);

        r11 = virtualinvoke r5.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEREO", 0);

        if r11 == null goto label2;

        r26 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        z3 = interfaceinvoke r26.<net.sourceforge.plantuml.ISkinParam: boolean stereotypePositionTop()>();

        $r17 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r18 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r17[0] = $r18;

        r27 = interfaceinvoke r26.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r17);

        $i0 = interfaceinvoke r26.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i0;

        $r19 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r21 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r11, $d0, r27, $r20);

        virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.Participant: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean)>($r21, z3);

     label2:
        r28 = virtualinvoke r5.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r28 == null goto label3;

        $r13 = new net.sourceforge.plantuml.UrlBuilder;

        $r14 = virtualinvoke r7.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r16 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r13.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r15, $r16);

        r30 = virtualinvoke $r13.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r28);

        virtualinvoke r10.<net.sourceforge.plantuml.sequencediagram.Participant: void setUrl(net.sourceforge.plantuml.Url)>(r30);

     label3:
        $r12 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r12;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.command.BlocLines r2;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram $r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.command.BlocLines;

        $r3 = (net.sourceforge.plantuml.sequencediagram.SequenceDiagram) r1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.command.CommandParticipantMultilines: net.sourceforge.plantuml.command.CommandExecutionResult executeNow(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.command.BlocLines)>($r3, r2);

        return $r4;
    }
}
