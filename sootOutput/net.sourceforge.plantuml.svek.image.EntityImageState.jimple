public class net.sourceforge.plantuml.svek.image.EntityImageState extends net.sourceforge.plantuml.svek.image.EntityImageStateCommon
{
    private final net.sourceforge.plantuml.graphic.TextBlock fields;
    private static final int MIN_WIDTH;
    private static final int MIN_HEIGHT;
    private final boolean withSymbol;
    private static final double smallRadius;
    private static final double smallLine;
    private static final double smallMarginX;
    private static final double smallMarginY;

    public void <init>(net.sourceforge.plantuml.cucadiagram.IEntity, net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.svek.image.EntityImageState r0;
        net.sourceforge.plantuml.cucadiagram.IEntity r1;
        net.sourceforge.plantuml.ISkinParam r2, $r6, $r13, $r15;
        net.sourceforge.plantuml.cucadiagram.Stereotype r3;
        net.sourceforge.plantuml.cucadiagram.Display r4;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5, r20;
        net.sourceforge.plantuml.FontParam $r7;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r8;
        net.sourceforge.plantuml.creole.CreoleMode $r9;
        net.sourceforge.plantuml.LineBreakStrategy $r10;
        net.sourceforge.plantuml.graphic.TextBlock $r11;
        net.sourceforge.plantuml.style.Style $r12;
        net.sourceforge.plantuml.api.ThemeStyle $r14;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r16;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.cucadiagram.Bodier $r18;
        java.util.List $r19;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageState;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.IEntity;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageStateCommon: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r3 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.cucadiagram.Stereotype: boolean isWithOOSymbol()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<net.sourceforge.plantuml.svek.image.EntityImageState: boolean withSymbol> = $z1;

        $r18 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.cucadiagram.Bodier: java.util.List getRawBody()>();

        r4 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.util.Collection)>($r19);

        $z2 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z2 == 0 goto label3;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.style.Style getStyleState()>();

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r20 = virtualinvoke $r12.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r14, $r16);

        goto label4;

     label3:
        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r7 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam STATE_ATTRIBUTE>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>($r6, $r7, r3);

        r20 = $r5;

     label4:
        $r8 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r9 = <net.sourceforge.plantuml.creole.CreoleMode: net.sourceforge.plantuml.creole.CreoleMode FULL>;

        $r10 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        $r11 = virtualinvoke r4.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create8(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.creole.CreoleMode,net.sourceforge.plantuml.LineBreakStrategy)>(r20, $r8, r2, $r9, $r10);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.graphic.TextBlock fields> = $r11;

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageState r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3, $r5, r6, r7, $r8;
        boolean $z0;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageState;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.graphic.TextBlock fields>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r6 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r3, $r5);

        d1 = 0.0;

        $z0 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: boolean withSymbol>;

        if $z0 == 0 goto label1;

        d1 = 0.0 + 10.0;

     label1:
        $d0 = 20.0 + d1;

        r7 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double)>(r6, $d0);

        $r8 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D atLeast(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r7, 50.0, 50.0);

        return $r8;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageState r0;
        net.sourceforge.plantuml.ugraphic.UGroupType $r1;
        net.sourceforge.plantuml.cucadiagram.IEntity $r2;
        net.sourceforge.plantuml.cucadiagram.Ident $r3;
        java.lang.String $r4;
        java.util.Map $r5;
        net.sourceforge.plantuml.Url $r6, $r22, $r24;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        net.sourceforge.plantuml.awt.geom.Dimension2D r8, r10;
        net.sourceforge.plantuml.graphic.TextBlock $r9, $r17, $r20;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.UStroke $r11, r26;
        net.sourceforge.plantuml.ugraphic.URectangle $r12;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, d8, d9, d10, d11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r13, $r16, $r19;
        net.sourceforge.plantuml.ugraphic.UGraphic $r14, $r18, $r21, r25, r27, r28;
        net.sourceforge.plantuml.ugraphic.ULine $r15;
        net.sourceforge.plantuml.style.Style $r23;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageState;

        r25 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = <net.sourceforge.plantuml.ugraphic.UGroupType: net.sourceforge.plantuml.ugraphic.UGroupType ID>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Ident getIdent()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.cucadiagram.Ident: java.lang.String toString(java.lang.String)>(".");

        $r5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r1, $r4);

        interfaceinvoke r25.<net.sourceforge.plantuml.ugraphic.UGraphic: void startGroup(java.util.Map)>($r5);

        $r6 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.Url url>;

        if $r6 == null goto label1;

        $r24 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r25.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r24);

     label1:
        r7 = interfaceinvoke r25.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r8 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $r9 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.graphic.TextBlock desc>;

        r10 = interfaceinvoke $r9.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label2;

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.style.Style getStyleState()>();

        r26 = virtualinvoke $r23.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        goto label3;

     label2:
        $r11 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>()>();

        r26 = $r11;

     label3:
        r27 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.ugraphic.UGraphic applyColorAndStroke(net.sourceforge.plantuml.ugraphic.UGraphic)>(r25);

        r28 = interfaceinvoke r27.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r26);

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.ugraphic.URectangle getShape(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r8);

        interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r12);

        $d0 = virtualinvoke r10.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = 5.0 + $d0;

        d2 = $d1 + 5.0;

        $r13 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d2);

        $r14 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r13);

        $d3 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r15 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>($d3);

        interfaceinvoke $r14.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r15);

        $z1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: boolean withSymbol>;

        if $z1 == 0 goto label4;

        d9 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d10 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageState: void drawSymbol(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>(r28, d9, d10);

     label4:
        $d4 = virtualinvoke r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d5 = virtualinvoke r10.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = $d4 - $d5;

        d11 = $d6 / 2.0;

        $r17 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.graphic.TextBlock desc>;

        $r16 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r16.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d11, 5.0);

        $r18 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r16);

        interfaceinvoke $r17.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r18);

        d8 = d2 + 5.0;

        $r20 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.graphic.TextBlock fields>;

        $r19 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r19.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(5.0, d8);

        $r21 = interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r19);

        interfaceinvoke $r20.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r21);

        $r22 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState: net.sourceforge.plantuml.Url url>;

        if $r22 == null goto label5;

        interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label5:
        interfaceinvoke r28.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeGroup()>();

        return;
    }

    public static void drawSymbol(net.sourceforge.plantuml.ugraphic.UGraphic, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4, $r6, $r8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3, $r5, $r7;
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7;
        net.sourceforge.plantuml.ugraphic.ULine $r9;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d4 := @parameter1: double;

        d5 := @parameter2: double;

        d6 = d4 - 22.0;

        d7 = d5 - 10.0;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(6.0, 6.0);

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d6, d7);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = d6 + 3.0;

        $d1 = $d0 + 6.0;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, d7);

        $r6 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d3 = d6 + 6.0;

        $d2 = d7 + 3.0;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d3, $d2);

        $r8 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(3.0);

        interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r9);

        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.image.EntityImageState: double smallMarginY> = 4.0;

        <net.sourceforge.plantuml.svek.image.EntityImageState: double smallMarginX> = 7.0;

        <net.sourceforge.plantuml.svek.image.EntityImageState: double smallLine> = 3.0;

        <net.sourceforge.plantuml.svek.image.EntityImageState: double smallRadius> = 3.0;

        <net.sourceforge.plantuml.svek.image.EntityImageState: int MIN_HEIGHT> = 50;

        <net.sourceforge.plantuml.svek.image.EntityImageState: int MIN_WIDTH> = 50;

        return;
    }
}
