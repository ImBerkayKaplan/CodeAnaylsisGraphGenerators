public class net.sourceforge.plantuml.svek.SvgResult extends java.lang.Object
{
    public static final java.lang.String D_EQUALS;
    public static final java.lang.String POINTS_EQUALS;
    private final java.lang.String svg;
    private final net.sourceforge.plantuml.svek.Point2DFunction function;

    public void <init>(java.lang.String, net.sourceforge.plantuml.svek.Point2DFunction)
    {
        net.sourceforge.plantuml.svek.SvgResult r0;
        java.lang.String r1;
        net.sourceforge.plantuml.svek.Point2DFunction r2;

        r0 := @this: net.sourceforge.plantuml.svek.SvgResult;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.svek.Point2DFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg> = r1;

        r0.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.Point2DFunction function> = r2;

        return;
    }

    public net.sourceforge.plantuml.svek.PointListIterator getPointsWithThisColor(int)
    {
        net.sourceforge.plantuml.svek.SvgResult r0;
        int i0;
        net.sourceforge.plantuml.svek.PointListIterator $r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvgResult;

        i0 := @parameter0: int;

        $r1 = staticinvoke <net.sourceforge.plantuml.svek.PointListIteratorImpl: net.sourceforge.plantuml.svek.PointListIterator create(net.sourceforge.plantuml.svek.SvgResult,int)>(r0, i0);

        return $r1;
    }

    public java.util.List extractList(java.lang.String)
    {
        net.sourceforge.plantuml.svek.SvgResult r0, $r2;
        java.lang.String r1;
        int i0, $i1, $i2, i3, $i4, $i5;
        java.util.List $r3, $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.svek.SvgResult;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvgResult: int indexOf(java.lang.String,int)>(r1, 0);

        if i0 != -1 goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        i3 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvgResult: int indexOf(java.lang.String,int)>("\"", $i2);

        if i3 != -1 goto label2;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label2:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = i0 + $i4;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int,int)>($i5, i3);

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.svek.SvgResult: java.util.List getPoints(java.lang.String)>(" MC");

        return $r3;
    }

    public int getIndexFromColor(int)
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r8, $r9, $r12, $r13, $r15, $r16, $r19, $r20;
        int i0, i1, i2, i3;
        java.lang.String $r2, $r3, $r7, $r10, $r11, $r14, $r17, $r18, $r21, r22, r23, r24;
        net.sourceforge.plantuml.svek.SvgResult r6;

        r6 := @this: net.sourceforge.plantuml.svek.SvgResult;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stroke=\"");

        $r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>(i0);

        $r3 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>($r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r22 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r6.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        i1 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String)>(r22);

        if i1 == -1 goto label1;

        return i1;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";stroke:");

        $r10 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>(i0);

        $r11 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        r23 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r6.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        i2 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String)>(r23);

        if i2 == -1 goto label2;

        return i2;

     label2:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fill=\"");

        $r17 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>(i0);

        $r18 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goLowerCase(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = r6.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        i3 = virtualinvoke $r21.<java.lang.String: int indexOf(java.lang.String)>(r24);

        if i3 == -1 goto label3;

        return i3;

     label3:
        return -1;
    }

    public java.util.List getPoints(java.lang.String)
    {
        java.util.StringTokenizer $r0;
        net.sourceforge.plantuml.svek.SvgResult r1;
        java.lang.String r2, $r3, $r6;
        java.util.ArrayList $r4;
        boolean $z0;
        java.awt.geom.Point2D$Double $r7;
        java.lang.NumberFormatException $r8;
        java.util.List $r9;

        r1 := @this: net.sourceforge.plantuml.svek.SvgResult;

        r2 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.util.StringTokenizer;

        $r3 = r1.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r3, r2);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label2:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = specialinvoke r1.<net.sourceforge.plantuml.svek.SvgResult: java.awt.geom.Point2D$Double getFirstPoint(java.lang.String)>($r6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        return $r4;

     label4:
        $r8 := @caughtexception;

        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r9;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }

    public java.awt.geom.Point2D$Double getNextPoint()
    {
        net.sourceforge.plantuml.svek.SvgResult r0;
        java.lang.String $r1;
        java.awt.geom.Point2D$Double $r2;

        r0 := @this: net.sourceforge.plantuml.svek.SvgResult;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.svek.SvgResult: java.awt.geom.Point2D$Double getFirstPoint(java.lang.String)>($r1);

        return $r2;
    }

    private java.awt.geom.Point2D$Double getFirstPoint(java.lang.String)
    {
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r3, $r4;
        double d0, d1;
        net.sourceforge.plantuml.svek.SvgResult r5;
        java.awt.geom.Point2D$Double $r6, $r8;
        net.sourceforge.plantuml.svek.Point2DFunction $r7;

        r5 := @this: net.sourceforge.plantuml.svek.SvgResult;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ",");

        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r4);

        $r7 = r5.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.Point2DFunction function>;

        $r6 = new java.awt.geom.Point2D$Double;

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d0, d1);

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.svek.Point2DFunction: java.awt.geom.Point2D$Double apply(java.awt.geom.Point2D)>($r6);

        return $r8;
    }

    public int indexOf(java.lang.String, int)
    {
        net.sourceforge.plantuml.svek.SvgResult r0;
        java.lang.String r1, $r2;
        int i0, $i1;

        r0 := @this: net.sourceforge.plantuml.svek.SvgResult;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i0);

        return $i1;
    }

    public net.sourceforge.plantuml.svek.SvgResult substring(int)
    {
        net.sourceforge.plantuml.svek.SvgResult $r0, r1;
        int i0;
        java.lang.String $r2, $r3;
        net.sourceforge.plantuml.svek.Point2DFunction $r4;

        r1 := @this: net.sourceforge.plantuml.svek.SvgResult;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.svek.SvgResult;

        $r2 = r1.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i0);

        $r4 = r1.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.Point2DFunction function>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.SvgResult: void <init>(java.lang.String,net.sourceforge.plantuml.svek.Point2DFunction)>($r3, $r4);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.SvgResult substring(int, int)
    {
        net.sourceforge.plantuml.svek.SvgResult $r0, r1;
        int i0, i1;
        java.lang.String $r2, $r3;
        net.sourceforge.plantuml.svek.Point2DFunction $r4;

        r1 := @this: net.sourceforge.plantuml.svek.SvgResult;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new net.sourceforge.plantuml.svek.SvgResult;

        $r2 = r1.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $r4 = r1.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.Point2DFunction function>;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.SvgResult: void <init>(java.lang.String,net.sourceforge.plantuml.svek.Point2DFunction)>($r3, $r4);

        return $r0;
    }

    public final java.lang.String getSvg()
    {
        net.sourceforge.plantuml.svek.SvgResult r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvgResult;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String svg>;

        return $r1;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.svek.SvgResult: java.lang.String POINTS_EQUALS> = "points=\"";

        <net.sourceforge.plantuml.svek.SvgResult: java.lang.String D_EQUALS> = "d=\"";

        return;
    }
}
