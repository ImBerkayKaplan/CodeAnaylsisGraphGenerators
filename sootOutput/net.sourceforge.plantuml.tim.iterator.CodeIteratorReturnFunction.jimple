public class net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction extends net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator
{
    private final net.sourceforge.plantuml.tim.FunctionsSet functionsSet;
    private final net.sourceforge.plantuml.tim.TContext context;
    private final net.sourceforge.plantuml.tim.TMemory memory;
    private final java.util.List logs;

    public void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator, net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.tim.FunctionsSet, java.util.List)
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction r0;
        net.sourceforge.plantuml.tim.iterator.CodeIterator r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.FunctionsSet r3;
        java.util.List r4;
        net.sourceforge.plantuml.tim.TMemory r5;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction;

        r1 := @parameter0: net.sourceforge.plantuml.tim.iterator.CodeIterator;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter2: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter3: net.sourceforge.plantuml.tim.FunctionsSet;

        r4 := @parameter4: java.util.List;

        specialinvoke r0.<net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator)>(r1);

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.TContext context> = r2;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.FunctionsSet functionsSet> = r3;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: java.util.List logs> = r4;

        r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.TMemory memory> = r5;

        return;
    }

    public net.sourceforge.plantuml.StringLocated peek() throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction r0;
        net.sourceforge.plantuml.StringLocated r1;
        net.sourceforge.plantuml.tim.FunctionsSet $r2, $r9, $r10, $r17, $r19, $r21;
        net.sourceforge.plantuml.tim.TFunctionImpl $r3, $r11, $r18, $r20;
        net.sourceforge.plantuml.tim.TLineType $r4, $r5, $r15, $r16;
        java.util.List $r6, $r14;
        net.sourceforge.plantuml.tim.TMemory $r7;
        net.sourceforge.plantuml.tim.TContext $r8;
        net.sourceforge.plantuml.tim.TFunctionType $r12, $r13;
        boolean $z2;
        net.sourceforge.plantuml.tim.EaterExceptionLocated $r22;
        net.sourceforge.plantuml.tim.iterator.CodeIterator $r23;

        r0 := @this: net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction;

     label1:
        $r23 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.iterator.CodeIterator source>;

        r1 = interfaceinvoke $r23.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if r1 != null goto label2;

        return null;

     label2:
        $r2 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction()>();

        if $r3 == null goto label6;

        $r10 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r11 = virtualinvoke $r10.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction()>();

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType getFunctionType()>();

        $r13 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        if $r12 != $r13 goto label6;

        $r14 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: java.util.List logs>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r15 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r16 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType END_FUNCTION>;

        if $r15 != $r16 goto label4;

        $r19 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction()>();

        $z2 = virtualinvoke $r20.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean doesContainReturn()>();

        if $z2 != 0 goto label3;

        $r22 = staticinvoke <net.sourceforge.plantuml.tim.EaterExceptionLocated: net.sourceforge.plantuml.tim.EaterExceptionLocated located(java.lang.String,net.sourceforge.plantuml.StringLocated)>("This function does not have any !return directive. Declare it as a procedure instead ?", r1);

        throw $r22;

     label3:
        $r21 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        virtualinvoke $r21.<net.sourceforge.plantuml.tim.FunctionsSet: void executeEndfunction()>();

        goto label5;

     label4:
        $r17 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunctionImpl pendingFunction()>();

        virtualinvoke $r18.<net.sourceforge.plantuml.tim.TFunctionImpl: void addBody(net.sourceforge.plantuml.StringLocated)>(r1);

     label5:
        virtualinvoke r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: void next()>();

        goto label1;

     label6:
        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r5 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DECLARE_RETURN_FUNCTION>;

        if $r4 != $r5 goto label7;

        $r6 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: java.util.List logs>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r9 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r8 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.TContext context>;

        $r7 = r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: net.sourceforge.plantuml.tim.TMemory memory>;

        virtualinvoke $r9.<net.sourceforge.plantuml.tim.FunctionsSet: void executeDeclareReturnFunction(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>($r8, $r7, r1);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: void next()>();

        goto label1;

     label7:
        return r1;
    }
}
