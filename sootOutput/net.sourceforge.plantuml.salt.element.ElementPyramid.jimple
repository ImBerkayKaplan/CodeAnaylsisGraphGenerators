public class net.sourceforge.plantuml.salt.element.ElementPyramid extends net.sourceforge.plantuml.salt.element.AbstractElement
{
    private int rows;
    private int cols;
    private final net.sourceforge.plantuml.graphic.TextBlock title;
    private final net.sourceforge.plantuml.salt.element.TableStrategy tableStrategy;
    private final java.util.Map positions1;
    private final java.util.Map positions2;
    private double[] rowsStart;
    private double[] colsStart;

    public void <init>(net.sourceforge.plantuml.salt.Positionner2, net.sourceforge.plantuml.salt.element.TableStrategy, java.lang.String, net.sourceforge.plantuml.ISkinSimple)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        java.util.HashMap $r1;
        net.sourceforge.plantuml.salt.Positionner2 r2;
        java.util.Map $r3, $r4, $r9, $r18;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.String r6;
        net.sourceforge.plantuml.graphic.TextBlock $r7, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        net.sourceforge.plantuml.salt.element.TableStrategy r8;
        java.util.Collection $r10;
        java.lang.Object $r11, $r17, $r19, $r21;
        net.sourceforge.plantuml.ugraphic.UFont $r12;
        net.sourceforge.plantuml.cucadiagram.Display $r13;
        net.sourceforge.plantuml.ISkinSimple r14;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r15;
        net.sourceforge.plantuml.salt.Cell $r20, r28;
        net.sourceforge.plantuml.salt.element.Element $r22;
        java.util.Iterator r24, r27;
        java.util.Map$Entry r25;
        net.sourceforge.plantuml.graphic.FontConfiguration r26;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        r2 := @parameter0: net.sourceforge.plantuml.salt.Positionner2;

        r8 := @parameter1: net.sourceforge.plantuml.salt.element.TableStrategy;

        r6 := @parameter2: java.lang.String;

        r14 := @parameter3: net.sourceforge.plantuml.ISkinSimple;

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.AbstractElement: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions2> = $r1;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.salt.Positionner2: java.util.Map getAll()>();

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions1> = $r3;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions1>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r24 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r17;

        $r18 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions2>;

        $r19 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (net.sourceforge.plantuml.salt.Cell) $r19;

        $r21 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (net.sourceforge.plantuml.salt.element.Element) $r21;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r22);

        goto label1;

     label2:
        if r6 == null goto label3;

        $r12 = staticinvoke <net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont byDefault(int)>(10);

        r26 = staticinvoke <net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.graphic.FontConfiguration blackBlueTrue(net.sourceforge.plantuml.ugraphic.UFont)>($r12);

        $r13 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r6);

        $r15 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r16 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r26, $r15, r14);

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.graphic.TextBlock title> = $r16;

        goto label4;

     label3:
        $r7 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.graphic.TextBlock title> = $r7;

     label4:
        $i0 = virtualinvoke r2.<net.sourceforge.plantuml.salt.Positionner2: int getNbRows()>();

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int rows> = $i0;

        $i1 = virtualinvoke r2.<net.sourceforge.plantuml.salt.Positionner2: int getNbCols()>();

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int cols> = $i1;

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.salt.element.TableStrategy tableStrategy> = r8;

        $r9 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions1>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        r27 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r11 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (net.sourceforge.plantuml.salt.Cell) $r11;

        $i2 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int rows>;

        $i3 = virtualinvoke r28.<net.sourceforge.plantuml.salt.Cell: int getMaxRow()>();

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int rows> = $i4;

        $i5 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int cols>;

        $i6 = virtualinvoke r28.<net.sourceforge.plantuml.salt.Cell: int getMaxCol()>();

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i6);

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int cols> = $i7;

        goto label5;

     label6:
        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder, double, double)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.Dimension2DDouble $r2;
        double[] $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.graphic.TextBlock $r7;
        double $d0, $d1, $d2, $d3, d4, d5;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r8;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d4 := @parameter1: double;

        d5 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: void init(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $r3 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $i0 = lengthof $r3;

        $i1 = $i0 - 1;

        $d0 = $r4[$i1];

        $r6 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $r5 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $i2 = lengthof $r5;

        $i3 = $i2 - 1;

        $d1 = $r6[$i3];

        $r7 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = virtualinvoke $r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d1 + $d2;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d3);

        return $r2;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, int, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, $r15;
        net.sourceforge.plantuml.graphic.StringBounder $r2, $r4;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r7;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r5, r31;
        double d0, d1, $d3, d4, $d5, $d6, $d7, d8, $d9, $d10, $d11, d12, $d13, $d14, $d15;
        net.sourceforge.plantuml.salt.element.Grid $r6;
        net.sourceforge.plantuml.salt.element.TableStrategy $r8;
        double[] $r9, $r10, $r22, $r23, $r24, $r25, $r26, $r27;
        java.util.Map $r12;
        java.util.Set $r13;
        java.util.Iterator r14;
        boolean $z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object $r16, $r18, $r20;
        java.util.Map$Entry r17;
        net.sourceforge.plantuml.salt.element.Element r19;
        net.sourceforge.plantuml.salt.Cell r21;
        net.sourceforge.plantuml.ugraphic.UTranslate $r28;
        net.sourceforge.plantuml.ugraphic.UGraphic $r29, r32, r33;
        net.sourceforge.plantuml.Dimension2DDouble $r30;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        r32 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        i0 := @parameter1: int;

        r31 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.ugraphic.color.HColor getBlack()>();

        r33 = interfaceinvoke r32.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        $r2 = interfaceinvoke r33.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: void init(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $r3 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r4 = interfaceinvoke r33.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r5 = interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        d0 = virtualinvoke $r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r6 = new net.sourceforge.plantuml.salt.element.Grid;

        $r10 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $r9 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $r8 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.salt.element.TableStrategy tableStrategy>;

        $r7 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.graphic.TextBlock title>;

        specialinvoke $r6.<net.sourceforge.plantuml.salt.element.Grid: void <init>(double[],double[],net.sourceforge.plantuml.salt.element.TableStrategy,net.sourceforge.plantuml.graphic.TextBlock)>($r10, $r9, $r8, $r7);

        $r12 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions1>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r16 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r18 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        r19 = (net.sourceforge.plantuml.salt.element.Element) $r18;

        $r20 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        r21 = (net.sourceforge.plantuml.salt.Cell) $r20;

        $r22 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $i1 = virtualinvoke r21.<net.sourceforge.plantuml.salt.Cell: int getMinCol()>();

        d1 = $r22[$i1];

        $i2 = virtualinvoke r21.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        if $i2 != 0 goto label2;

        $d15 = d0 / 2.0;

        goto label3;

     label2:
        $d15 = 0.0;

     label3:
        $r23 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $i3 = virtualinvoke r21.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        $d3 = $r23[$i3];

        d4 = $d3 + $d15;

        $r24 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $i4 = virtualinvoke r21.<net.sourceforge.plantuml.salt.Cell: int getMaxCol()>();

        $i5 = $i4 + 1;

        $d5 = $r24[$i5];

        $r25 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $i6 = virtualinvoke r21.<net.sourceforge.plantuml.salt.Cell: int getMinCol()>();

        $d6 = $r25[$i6];

        $d7 = $d5 - $d6;

        d8 = $d7 - 1.0;

        $r26 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $i7 = virtualinvoke r21.<net.sourceforge.plantuml.salt.Cell: int getMaxRow()>();

        $i8 = $i7 + 1;

        $d9 = $r26[$i8];

        $r27 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $i9 = virtualinvoke r21.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        $d10 = $r27[$i9];

        $d11 = $d9 - $d10;

        d12 = $d11 - 1.0;

        virtualinvoke $r6.<net.sourceforge.plantuml.salt.element.Grid: void addCell(net.sourceforge.plantuml.salt.Cell)>(r21);

        $r28 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d14 = d1 + 1.0;

        $d13 = d4 + 1.0;

        specialinvoke $r28.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d14, $d13);

        $r29 = interfaceinvoke r33.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r28);

        $r30 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r30.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d8, d12);

        interfaceinvoke r19.<net.sourceforge.plantuml.salt.element.Element: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,int,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r29, i0, $r30);

        goto label1;

     label4:
        if i0 != 0 goto label5;

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.ugraphic.color.HColor getWhite()>();

        virtualinvoke $r6.<net.sourceforge.plantuml.salt.element.Grid: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,net.sourceforge.plantuml.ugraphic.color.HColor)>(r33, 0.0, 0.0, $r15);

     label5:
        return;
    }

    private void init(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        double[] $r1, $r5, $r6, $r7, $r20;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r4, r16, r25;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.util.ArrayList $r8;
        java.util.Map $r9, $r14, $r18;
        java.util.Collection $r10;
        net.sourceforge.plantuml.salt.element.LeftFirst $r11;
        boolean $z0, $z1;
        net.sourceforge.plantuml.salt.element.TopFirst $r12;
        java.lang.Object $r13, $r15, $r17, $r19;
        java.util.Iterator r22, r26;
        net.sourceforge.plantuml.salt.Cell r23, r27;
        net.sourceforge.plantuml.salt.element.Element r24, r28;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        if $r1 == null goto label1;

        return;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        d0 = virtualinvoke $r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $i0 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int rows>;

        $i1 = $i0 + 1;

        $r5 = newarray (double)[$i1];

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart> = $r5;

        $r6 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $d1 = d0 / 2.0;

        $r6[0] = $d1;

        i13 = 1;

     label2:
        $i2 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int rows>;

        $i3 = $i2 + 1;

        if i13 >= $i3 goto label3;

        $r20 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $d7 = d0 / 2.0;

        $r20[i13] = $d7;

        i13 = i13 + 1;

        goto label2;

     label3:
        $i4 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int cols>;

        $i5 = $i4 + 1;

        $r7 = newarray (double)[$i5];

        r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart> = $r7;

        $r8 = new java.util.ArrayList;

        $r9 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions1>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        $r11 = new net.sourceforge.plantuml.salt.element.LeftFirst;

        specialinvoke $r11.<net.sourceforge.plantuml.salt.element.LeftFirst: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r8, $r11);

        r22 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r17 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (net.sourceforge.plantuml.salt.Cell) $r17;

        $r18 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions2>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r23);

        r24 = (net.sourceforge.plantuml.salt.element.Element) $r19;

        r25 = interfaceinvoke r24.<net.sourceforge.plantuml.salt.element.Element: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder,double,double)>(r2, 0.0, 0.0);

        $i10 = virtualinvoke r23.<net.sourceforge.plantuml.salt.Cell: int getMinCol()>();

        $i11 = virtualinvoke r23.<net.sourceforge.plantuml.salt.Cell: int getMaxCol()>();

        $i12 = $i11 + 1;

        $d5 = virtualinvoke r25.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = $d5 + 2.0;

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: void ensureColWidth(int,int,double)>($i10, $i12, $d6);

        goto label4;

     label5:
        $r12 = new net.sourceforge.plantuml.salt.element.TopFirst;

        specialinvoke $r12.<net.sourceforge.plantuml.salt.element.TopFirst: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r8, $r12);

        r26 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r13 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (net.sourceforge.plantuml.salt.Cell) $r13;

        $r14 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: java.util.Map positions2>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        r28 = (net.sourceforge.plantuml.salt.element.Element) $r15;

        $i6 = virtualinvoke r27.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        if $i6 != 0 goto label7;

        $d8 = d0 / 2.0;

        goto label8;

     label7:
        $d8 = 0.0;

     label8:
        r16 = interfaceinvoke r28.<net.sourceforge.plantuml.salt.element.Element: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder,double,double)>(r2, 0.0, 0.0);

        $i7 = virtualinvoke r27.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        $i8 = virtualinvoke r27.<net.sourceforge.plantuml.salt.Cell: int getMaxRow()>();

        $i9 = $i8 + 1;

        $d2 = virtualinvoke r16.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = $d2 + $d8;

        $d4 = $d3 + 2.0;

        specialinvoke r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: void ensureRowHeight(int,int,double)>($i7, $i9, $d4);

        goto label6;

     label9:
        return;
    }

    private void ensureColWidth(int, int, double)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        int i0, i1, $i3, i4;
        double[] $r1, $r2, $r3, $r4;
        double $d0, $d1, d2, d3, d4, $d5, $d6;
        byte $b2;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        d3 := @parameter2: double;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $d1 = $r1[i0];

        $r2 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $d0 = $r2[i1];

        d2 = $d1 - $d0;

        d4 = d3 - d2;

        $b2 = d4 cmpl 0.0;

        if $b2 <= 0 goto label2;

        i4 = i0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $i3 = lengthof $r3;

        if i4 >= $i3 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] colsStart>;

        $d5 = $r4[i4];

        $d6 = $d5 + d4;

        $r4[i4] = $d6;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private void ensureRowHeight(int, int, double)
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        int i0, i1, $i3, i4;
        double[] $r1, $r2, $r3, $r4;
        double $d0, $d1, d2, d3, d4, $d5, $d6;
        byte $b2;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        d3 := @parameter2: double;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $d1 = $r1[i0];

        $r2 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $d0 = $r2[i1];

        d2 = $d1 - $d0;

        d4 = d3 - d2;

        $b2 = d4 cmpl 0.0;

        if $b2 <= 0 goto label2;

        i4 = i0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $i3 = lengthof $r3;

        if i4 >= $i3 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: double[] rowsStart>;

        $d5 = $r4[i4];

        $d6 = $d5 + d4;

        $r4[i4] = $d6;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public final int getNbRows()
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        $i0 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int rows>;

        $i1 = $i0 + 1;

        return $i1;
    }

    public final int getNbCols()
    {
        net.sourceforge.plantuml.salt.element.ElementPyramid r0;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.salt.element.ElementPyramid;

        $i0 = r0.<net.sourceforge.plantuml.salt.element.ElementPyramid: int cols>;

        $i1 = $i0 + 1;

        return $i1;
    }
}
