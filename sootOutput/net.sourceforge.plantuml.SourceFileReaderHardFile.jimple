public class net.sourceforge.plantuml.SourceFileReaderHardFile extends net.sourceforge.plantuml.SourceFileReaderAbstract implements net.sourceforge.plantuml.ISourceFileReader
{

    public void <init>(net.sourceforge.plantuml.preproc.Defines, java.io.File, java.io.File, java.util.List, java.lang.String, net.sourceforge.plantuml.FileFormatOption) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceFileReaderHardFile r0;
        java.io.File r1, r6, $r8, $r9;
        net.sourceforge.plantuml.FileFormatOption r2;
        net.sourceforge.plantuml.preproc.Defines r3;
        java.util.List r4;
        java.lang.String r5;
        net.sourceforge.plantuml.FileSystem $r7;
        net.sourceforge.plantuml.security.SFile $r10;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderHardFile;

        r3 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        r1 := @parameter1: java.io.File;

        r6 := @parameter2: java.io.File;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.lang.String;

        r2 := @parameter5: net.sourceforge.plantuml.FileFormatOption;

        specialinvoke r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: void <init>(java.io.File,net.sourceforge.plantuml.FileFormatOption,net.sourceforge.plantuml.preproc.Defines,java.util.List,java.lang.String)>(r1, r2, r3, r4, r5);

        r0.<net.sourceforge.plantuml.SourceFileReaderHardFile: java.io.File outputFile> = r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        $r8 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r9 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile fromFile(java.io.File)>($r9);

        virtualinvoke $r7.<net.sourceforge.plantuml.FileSystem: void setCurrentDir(net.sourceforge.plantuml.security.SFile)>($r10);

        return;
    }

    protected net.sourceforge.plantuml.SuggestedFile getSuggestedFile(net.sourceforge.plantuml.BlockUml)
    {
        net.sourceforge.plantuml.SourceFileReaderHardFile r0;
        net.sourceforge.plantuml.FileFormatOption $r1;
        java.io.File $r2;
        net.sourceforge.plantuml.FileFormat $r3;
        net.sourceforge.plantuml.SuggestedFile r4;
        net.sourceforge.plantuml.BlockUml r5;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderHardFile;

        r5 := @parameter0: net.sourceforge.plantuml.BlockUml;

        $r2 = r0.<net.sourceforge.plantuml.SourceFileReaderHardFile: java.io.File outputFile>;

        $r1 = r0.<net.sourceforge.plantuml.SourceFileReaderHardFile: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.FileFormat getFileFormat()>();

        r4 = staticinvoke <net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.SuggestedFile fromOutputFile(java.io.File,net.sourceforge.plantuml.FileFormat)>($r2, $r3);

        return r4;
    }
}
