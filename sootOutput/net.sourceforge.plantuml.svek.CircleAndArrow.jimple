class net.sourceforge.plantuml.svek.CircleAndArrow extends java.lang.Object implements net.sourceforge.plantuml.graphic.UDrawable
{
    private final java.awt.geom.AffineTransform at;
    private final java.awt.geom.AffineTransform at2;
    private int radius;
    private final java.awt.geom.Point2D center;
    private final java.awt.geom.Point2D p1;
    private final java.awt.geom.Point2D p2;
    private java.awt.geom.Point2D p3;
    private java.awt.geom.Point2D p4;

    public void <init>(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.CircleAndArrow r0;
        java.awt.geom.Point2D$Double $r1, $r15, $r24;
        java.awt.geom.Point2D r2, r3, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r20, $r21, $r23, $r25, $r26, $r27, $r29;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;
        java.awt.geom.AffineTransform $r6, $r9, $r13, $r19, $r22, $r28;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: net.sourceforge.plantuml.svek.CircleAndArrow;

        r2 := @parameter0: java.awt.geom.Point2D;

        r3 := @parameter1: java.awt.geom.Point2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + $d1;

        $d3 = $d2 / 2.0;

        $d4 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d5 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d6 = $d4 + $d5;

        $d7 = $d6 / 2.0;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d7);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D center> = $r1;

        $r4 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D center>;

        $d8 = virtualinvoke $r4.<java.awt.geom.Point2D: double getX()>();

        $d9 = neg $d8;

        $r5 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D center>;

        $d10 = virtualinvoke $r5.<java.awt.geom.Point2D: double getY()>();

        $d11 = neg $d10;

        $r6 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d9, $d11);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at> = $r6;

        $r7 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D center>;

        $d12 = virtualinvoke $r7.<java.awt.geom.Point2D: double getX()>();

        $r8 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D center>;

        $d13 = virtualinvoke $r8.<java.awt.geom.Point2D: double getY()>();

        $r9 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d12, $d13);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at2> = $r9;

        $d14 = virtualinvoke r2.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>(r3);

        $d15 = $d14 / 2.0;

        $i0 = (int) $d15;

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius> = $i0;

        $i1 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius>;

        $i2 = $i1 % 2;

        if $i2 != 0 goto label1;

        $i3 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius>;

        $i4 = $i3 - 1;

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius> = $i4;

     label1:
        $r10 = specialinvoke r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D putOnCircle(java.awt.geom.Point2D)>(r2);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p1> = $r10;

        $r11 = specialinvoke r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D putOnCircle(java.awt.geom.Point2D)>(r3);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p2> = $r11;

        $r13 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at>;

        $r12 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p1>;

        $r14 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r12, null);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p3> = $r14;

        $r15 = new java.awt.geom.Point2D$Double;

        $r16 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p3>;

        $d16 = virtualinvoke $r16.<java.awt.geom.Point2D: double getY()>();

        $r17 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p3>;

        $d17 = virtualinvoke $r17.<java.awt.geom.Point2D: double getX()>();

        $d18 = neg $d17;

        specialinvoke $r15.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d16, $d18);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p3> = $r15;

        $r19 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at2>;

        $r18 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p3>;

        $r20 = virtualinvoke $r19.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r18, null);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p3> = $r20;

        $r22 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at>;

        $r21 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p2>;

        $r23 = virtualinvoke $r22.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r21, null);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p4> = $r23;

        $r24 = new java.awt.geom.Point2D$Double;

        $r25 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p4>;

        $d19 = virtualinvoke $r25.<java.awt.geom.Point2D: double getY()>();

        $r26 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p4>;

        $d20 = virtualinvoke $r26.<java.awt.geom.Point2D: double getX()>();

        $d21 = neg $d20;

        specialinvoke $r24.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d19, $d21);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p4> = $r24;

        $r28 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at2>;

        $r27 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p4>;

        $r29 = virtualinvoke $r28.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r27, null);

        r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D p4> = $r29;

        return;
    }

    private java.awt.geom.Point2D putOnCircle(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.CircleAndArrow r0;
        java.awt.geom.AffineTransform $r1, $r4;
        java.awt.geom.Point2D$Double $r2, $r3;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6;
        int $i0;
        java.awt.geom.Point2D $r5, r6, r7;

        r0 := @this: net.sourceforge.plantuml.svek.CircleAndArrow;

        r6 := @parameter0: java.awt.geom.Point2D;

        $r1 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at>;

        r7 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r6, null);

        $r2 = new java.awt.geom.Point2D$Double;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>()>();

        $d0 = virtualinvoke r7.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r2);

        $i0 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius>;

        $d1 = (double) $i0;

        d2 = $d0 / $d1;

        $r3 = new java.awt.geom.Point2D$Double;

        $d3 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        $d4 = $d3 / d2;

        $d5 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        $d6 = $d5 / d2;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d4, $d6);

        $r4 = r0.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.AffineTransform at2>;

        $r5 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r3, null);

        return $r5;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0;
        net.sourceforge.plantuml.svek.CircleAndArrow r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.UGraphic r3, $r7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4;
        java.awt.geom.Point2D $r5, $r6;

        r1 := @this: net.sourceforge.plantuml.svek.CircleAndArrow;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $i0 = r1.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius>;

        $i1 = $i0 * 2;

        $d1 = (double) $i1;

        $i2 = r1.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius>;

        $i3 = $i2 * 2;

        $d0 = (double) $i3;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d1, $d0);

        $r4 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $r5 = r1.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D center>;

        $d2 = virtualinvoke $r5.<java.awt.geom.Point2D: double getX()>();

        $i4 = r1.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius>;

        $d3 = (double) $i4;

        $d4 = $d2 - $d3;

        $r6 = r1.<net.sourceforge.plantuml.svek.CircleAndArrow: java.awt.geom.Point2D center>;

        $d5 = virtualinvoke $r6.<java.awt.geom.Point2D: double getY()>();

        $i5 = r1.<net.sourceforge.plantuml.svek.CircleAndArrow: int radius>;

        $d6 = (double) $i5;

        $d7 = $d5 - $d6;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d4, $d7);

        $r7 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        return;
    }

    private static void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, d8, $d9, $d10, $d11;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        net.sourceforge.plantuml.ugraphic.ULine $r5;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d6 := @parameter1: double;

        d8 := @parameter2: double;

        r1 := @parameter3: java.awt.geom.Point2D;

        r0 := @parameter4: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d5 = $d3 - $d4;

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d7 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d9 = d6 + $d7;

        $d10 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d11 = d8 + $d10;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d9, $d11);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = new net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(d2, d5);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        return;
    }
}
