public class net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol;

        $r1 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r51, $r54, $r59, $r62;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r7, $r9, $r13, $r21, $r25, $r33, $r37;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r10, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r26, $r27, $r28, $r29, $r30, $r31, $r34, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r55, $r56, $r63, $r65, $r66, $r67, $r68;
        net.sourceforge.plantuml.command.regex.RegexOr $r6;
        net.sourceforge.plantuml.command.regex.RegexConcat $r8, $r12, $r20, $r24, $r32, $r36, $r69;
        net.sourceforge.plantuml.command.regex.RegexOptional $r11, $r23, $r35;
        java.lang.StringBuilder $r50, $r52, $r53, $r57, $r58, $r60, $r61;
        net.sourceforge.plantuml.graphic.color.ColorParser $r64;

        $r0 = class "Lnet/sourceforge/plantuml/descdiagram/command/CommandPackageWithUSymbol;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[15];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SYMBOL", "(package|rectangle|hexagon|node|artifact|folder|file|frame|cloud|database|storage|component|card|together|queue|stack)");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r7 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r8 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY1", "([%g].+?[%g])");

        $r9[0] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r13 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r13[0] = $r14;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE1", "(\\<\\<.+\\>\\>)");

        $r13[1] = $r15;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r13);

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r12);

        $r9[1] = $r11;

        $r16 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r9[2] = $r16;

        $r17 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r17.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r9[3] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r9[4] = $r18;

        $r19 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r19.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([^#%s{}]+)");

        $r9[5] = $r19;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r9);

        $r7[0] = $r8;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r21 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r22 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([^#%s{}%g]+)");

        $r21[0] = $r22;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r24 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r25 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r25[0] = $r26;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE2", "(\\<\\<.+\\>\\>)");

        $r25[1] = $r27;

        specialinvoke $r24.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r25);

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r24);

        $r21[1] = $r23;

        $r28 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r21[2] = $r28;

        $r29 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r29.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r21[3] = $r29;

        $r30 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r21[4] = $r30;

        $r31 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r31.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", "([%g].+?[%g])");

        $r21[5] = $r31;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r21);

        $r7[1] = $r20;

        $r32 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r33 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r34 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r34.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY3", "([^#%s{}%g]+)");

        $r33[0] = $r34;

        $r35 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r36 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r37 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r38 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r37[0] = $r38;

        $r39 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r39.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE3", "(\\<\\<.+\\>\\>)");

        $r37[1] = $r39;

        specialinvoke $r36.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r37);

        specialinvoke $r35.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r36);

        $r33[1] = $r35;

        $r40 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r33[2] = $r40;

        $r41 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r41.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r33[3] = $r41;

        $r42 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r33[4] = $r42;

        $r43 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r43.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE3", "([^#%s{}%g]+)");

        $r33[5] = $r43;

        specialinvoke $r32.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r33);

        $r7[2] = $r32;

        $r44 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r44.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE8", "([%g][^%g]+[%g])");

        $r7[3] = $r44;

        $r45 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r45.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE9", "([^#%s{}%g]*)");

        $r7[4] = $r45;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r7);

        $r2[3] = $r6;

        $r46 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[4] = $r46;

        $r47 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r47.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE", "(\\<\\<.*\\>\\>)?");

        $r2[5] = $r47;

        $r48 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r48;

        $r49 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r54);

        $r2[7] = $r49;

        $r55 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r55;

        $r56 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r59 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r62);

        $r2[9] = $r56;

        $r63 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[10] = $r63;

        $r64 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r65 = virtualinvoke $r64.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[11] = $r65;

        $r66 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[12] = $r66;

        $r67 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r67.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\{");

        $r2[13] = $r67;

        $r68 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[14] = $r68;

        $r69 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r69;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, r2, $r3, r4, r13, $r14, r22, r23, $r24, $r33, r39, r40;
        int $i0;
        net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram r5;
        net.sourceforge.plantuml.cucadiagram.Ident r6;
        net.sourceforge.plantuml.cucadiagram.IGroup r8, r12;
        net.sourceforge.plantuml.cucadiagram.Display $r9;
        net.sourceforge.plantuml.cucadiagram.NamespaceStrategy $r10;
        net.sourceforge.plantuml.cucadiagram.GroupType $r11;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ISkinParam $r15, $r17, $r19, $r26, $r28, $r32;
        net.sourceforge.plantuml.skin.ActorStyle $r16;
        net.sourceforge.plantuml.ComponentStyle $r18;
        net.sourceforge.plantuml.svek.PackageStyle $r20;
        net.sourceforge.plantuml.graphic.USymbol $r21;
        net.sourceforge.plantuml.graphic.color.ColorParser $r25;
        net.sourceforge.plantuml.api.ThemeStyle $r27;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r29;
        net.sourceforge.plantuml.command.CommandExecutionResult $r30;
        net.sourceforge.plantuml.UrlBuilder $r31;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r34;
        net.sourceforge.plantuml.Url r35;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r36;
        net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol r37;
        net.sourceforge.plantuml.LineLocation r38;
        net.sourceforge.plantuml.cucadiagram.Code $r41;
        net.sourceforge.plantuml.graphic.color.Colors r43;

        r37 := @this: net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol;

        r5 := @parameter0: net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram;

        r38 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r2 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        r4 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r3);

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r39 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: java.lang.String getString(java.lang.String)>("##");

        r40 = null;

        goto label3;

     label1:
        r39 = r2;

        if r4 != null goto label2;

        r40 = r2;

        goto label3;

     label2:
        r40 = r4;

     label3:
        r6 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r39);

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: boolean V1972()>();

        if $z1 == 0 goto label4;

        $r41 = r6;

        goto label5;

     label4:
        $r41 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r39);

     label5:
        r8 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.IGroup getCurrentGroup()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r40);

        $r11 = <net.sourceforge.plantuml.cucadiagram.GroupType: net.sourceforge.plantuml.cucadiagram.GroupType PACKAGE>;

        $r10 = <net.sourceforge.plantuml.cucadiagram.NamespaceStrategy: net.sourceforge.plantuml.cucadiagram.NamespaceStrategy SINGLE>;

        virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: void gotoGroup(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.GroupType,net.sourceforge.plantuml.cucadiagram.IGroup,net.sourceforge.plantuml.cucadiagram.NamespaceStrategy)>(r6, $r41, $r9, $r11, r8, $r10);

        r12 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.cucadiagram.IGroup getCurrentGroup()>();

        r13 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SYMBOL", 0);

        $r14 = "together";

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r13);

        if $z0 == 0 goto label6;

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setThisIsTogether()>();

     label6:
        $r15 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.skin.ActorStyle actorStyle()>();

        $r17 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ComponentStyle componentStyle()>();

        $r19 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.svek.PackageStyle packageStyle()>();

        $r21 = staticinvoke <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol fromString(java.lang.String,net.sourceforge.plantuml.skin.ActorStyle,net.sourceforge.plantuml.ComponentStyle,net.sourceforge.plantuml.svek.PackageStyle)>(r13, $r16, $r18, $r20);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setUSymbol(net.sourceforge.plantuml.graphic.USymbol)>($r21);

        r22 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("STEREOTYPE", 0);

        if r22 == null goto label7;

        $r36 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,boolean)>(r22, 0);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r36);

     label7:
        r23 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r23 == null goto label8;

        $r31 = new net.sourceforge.plantuml.UrlBuilder;

        $r32 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r33 = interfaceinvoke $r32.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r34 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r31.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r33, $r34);

        r35 = virtualinvoke $r31.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r23);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void addUrl(net.sourceforge.plantuml.Url)>(r35);

     label8:
        $r24 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TAGS", 0);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void addTags(net.sourceforge.plantuml.cucadiagram.IEntity,java.lang.String)>(r12, $r24);

        $r25 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r26 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r27 = interfaceinvoke $r26.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r28 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r29 = interfaceinvoke $r28.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r43 = virtualinvoke $r25.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r27, r0, $r29);

        interfaceinvoke r12.<net.sourceforge.plantuml.cucadiagram.IEntity: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r43);

        $r30 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r30;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
