public class jcckit.transformation.CartesianTransformation extends java.lang.Object implements jcckit.transformation.Transformation
{
    private final boolean _xLogScale;
    private final double _xOffset;
    private final double _xScale;
    private final boolean _yLogScale;
    private final double _yOffset;
    private final double _yScale;

    public void <init>(boolean, boolean, jcckit.data.DataPoint, jcckit.graphic.GraphPoint, jcckit.data.DataPoint, jcckit.graphic.GraphPoint)
    {
        jcckit.transformation.CartesianTransformation r0;
        boolean z0, z1;
        jcckit.data.DataPoint r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27, d28, d29;
        jcckit.graphic.GraphPoint r3, r4;

        r0 := @this: jcckit.transformation.CartesianTransformation;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: jcckit.data.DataPoint;

        r4 := @parameter3: jcckit.graphic.GraphPoint;

        r2 := @parameter4: jcckit.data.DataPoint;

        r3 := @parameter5: jcckit.graphic.GraphPoint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jcckit.transformation.CartesianTransformation: boolean _xLogScale> = z0;

        $d0 = virtualinvoke r1.<jcckit.data.DataPoint: double getX()>();

        d26 = staticinvoke <jcckit.util.Util: double log(double,boolean)>($d0, z0);

        $d1 = virtualinvoke r2.<jcckit.data.DataPoint: double getX()>();

        $d2 = staticinvoke <jcckit.util.Util: double log(double,boolean)>($d1, z0);

        d27 = $d2 - d26;

        specialinvoke r0.<jcckit.transformation.CartesianTransformation: void check(double,java.lang.String,java.lang.String,double)>(d27, "data", "x", d26);

        $d3 = virtualinvoke r3.<jcckit.graphic.GraphPoint: double getX()>();

        $d4 = virtualinvoke r4.<jcckit.graphic.GraphPoint: double getX()>();

        $d5 = $d3 - $d4;

        $d6 = $d5 / d27;

        r0.<jcckit.transformation.CartesianTransformation: double _xScale> = $d6;

        $d7 = r0.<jcckit.transformation.CartesianTransformation: double _xScale>;

        $d8 = virtualinvoke r4.<jcckit.graphic.GraphPoint: double getX()>();

        specialinvoke r0.<jcckit.transformation.CartesianTransformation: void check(double,java.lang.String,java.lang.String,double)>($d7, "graphical", "x", $d8);

        $d9 = virtualinvoke r4.<jcckit.graphic.GraphPoint: double getX()>();

        $d10 = r0.<jcckit.transformation.CartesianTransformation: double _xScale>;

        $d11 = d26 * $d10;

        $d12 = $d9 - $d11;

        r0.<jcckit.transformation.CartesianTransformation: double _xOffset> = $d12;

        r0.<jcckit.transformation.CartesianTransformation: boolean _yLogScale> = z1;

        $d13 = virtualinvoke r1.<jcckit.data.DataPoint: double getY()>();

        d28 = staticinvoke <jcckit.util.Util: double log(double,boolean)>($d13, z1);

        $d14 = virtualinvoke r2.<jcckit.data.DataPoint: double getY()>();

        $d15 = staticinvoke <jcckit.util.Util: double log(double,boolean)>($d14, z1);

        d29 = $d15 - d28;

        specialinvoke r0.<jcckit.transformation.CartesianTransformation: void check(double,java.lang.String,java.lang.String,double)>(d29, "data", "y", d28);

        $d16 = virtualinvoke r3.<jcckit.graphic.GraphPoint: double getY()>();

        $d17 = virtualinvoke r4.<jcckit.graphic.GraphPoint: double getY()>();

        $d18 = $d16 - $d17;

        $d19 = $d18 / d29;

        r0.<jcckit.transformation.CartesianTransformation: double _yScale> = $d19;

        $d20 = r0.<jcckit.transformation.CartesianTransformation: double _yScale>;

        $d21 = virtualinvoke r4.<jcckit.graphic.GraphPoint: double getY()>();

        specialinvoke r0.<jcckit.transformation.CartesianTransformation: void check(double,java.lang.String,java.lang.String,double)>($d20, "graphical", "y", $d21);

        $d22 = virtualinvoke r4.<jcckit.graphic.GraphPoint: double getY()>();

        $d23 = r0.<jcckit.transformation.CartesianTransformation: double _yScale>;

        $d24 = d28 * $d23;

        $d25 = $d22 - $d24;

        r0.<jcckit.transformation.CartesianTransformation: double _yOffset> = $d25;

        return;
    }

    private void check(double, java.lang.String, java.lang.String, double)
    {
        double d0, d1;
        byte $b0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9;
        java.lang.String r3, r6, $r10;
        jcckit.transformation.CartesianTransformation r11;

        r11 := @this: jcckit.transformation.CartesianTransformation;

        d0 := @parameter0: double;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        d1 := @parameter3: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reference points in ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be different; both are ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r0;

     label1:
        return;
    }

    public jcckit.graphic.GraphPoint transformToGraph(jcckit.data.DataPoint)
    {
        jcckit.graphic.GraphPoint $r0;
        jcckit.transformation.CartesianTransformation r1;
        jcckit.data.DataPoint r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        boolean $z0, $z1;

        r1 := @this: jcckit.transformation.CartesianTransformation;

        r2 := @parameter0: jcckit.data.DataPoint;

        $r0 = new jcckit.graphic.GraphPoint;

        $d0 = r1.<jcckit.transformation.CartesianTransformation: double _xOffset>;

        $d1 = virtualinvoke r2.<jcckit.data.DataPoint: double getX()>();

        $z0 = r1.<jcckit.transformation.CartesianTransformation: boolean _xLogScale>;

        $d2 = staticinvoke <jcckit.util.Util: double log(double,boolean)>($d1, $z0);

        $d3 = r1.<jcckit.transformation.CartesianTransformation: double _xScale>;

        $d4 = $d2 * $d3;

        $d5 = $d0 + $d4;

        $d6 = r1.<jcckit.transformation.CartesianTransformation: double _yOffset>;

        $d7 = virtualinvoke r2.<jcckit.data.DataPoint: double getY()>();

        $z1 = r1.<jcckit.transformation.CartesianTransformation: boolean _yLogScale>;

        $d8 = staticinvoke <jcckit.util.Util: double log(double,boolean)>($d7, $z1);

        $d9 = r1.<jcckit.transformation.CartesianTransformation: double _yScale>;

        $d10 = $d8 * $d9;

        $d11 = $d6 + $d10;

        specialinvoke $r0.<jcckit.graphic.GraphPoint: void <init>(double,double)>($d5, $d11);

        return $r0;
    }

    public jcckit.data.DataPoint transformToData(jcckit.graphic.GraphPoint)
    {
        jcckit.data.DataPoint $r0;
        jcckit.graphic.GraphPoint r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        jcckit.transformation.CartesianTransformation r2;
        boolean $z0, $z1;

        r2 := @this: jcckit.transformation.CartesianTransformation;

        r1 := @parameter0: jcckit.graphic.GraphPoint;

        $r0 = new jcckit.data.DataPoint;

        $d0 = virtualinvoke r1.<jcckit.graphic.GraphPoint: double getX()>();

        $d1 = r2.<jcckit.transformation.CartesianTransformation: double _xOffset>;

        $d3 = $d0 - $d1;

        $d2 = r2.<jcckit.transformation.CartesianTransformation: double _xScale>;

        $d4 = $d3 / $d2;

        $z0 = r2.<jcckit.transformation.CartesianTransformation: boolean _xLogScale>;

        $d5 = staticinvoke <jcckit.util.Util: double exp(double,boolean)>($d4, $z0);

        $d6 = virtualinvoke r1.<jcckit.graphic.GraphPoint: double getY()>();

        $d7 = r2.<jcckit.transformation.CartesianTransformation: double _yOffset>;

        $d9 = $d6 - $d7;

        $d8 = r2.<jcckit.transformation.CartesianTransformation: double _yScale>;

        $d10 = $d9 / $d8;

        $z1 = r2.<jcckit.transformation.CartesianTransformation: boolean _yLogScale>;

        $d11 = staticinvoke <jcckit.util.Util: double exp(double,boolean)>($d10, $z1);

        specialinvoke $r0.<jcckit.data.DataPoint: void <init>(double,double)>($d5, $d11);

        return $r0;
    }
}
