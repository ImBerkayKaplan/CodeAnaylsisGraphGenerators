public final enum class net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection VERTICAL_THEN_HORIZONTAL;
    public static final enum net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection HORIZONTAL_THEN_VERTICAL;
    private static final net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $VALUES;

    public static net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] values()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/activitydiagram3/ftile/SnakeDirection;", r0);

        $r2 = (net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection getDirection(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection $r3, $r4;

        r0 := @parameter0: java.awt.geom.Point2D;

        r1 := @parameter1: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label1;

        $r4 = <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection VERTICAL_THEN_HORIZONTAL>;

        return $r4;

     label1:
        $d2 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $b1 = $d2 cmpl $d3;

        if $b1 != 0 goto label2;

        $r3 = <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection HORIZONTAL_THEN_VERTICAL>;

        return $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    private static net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $values()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection $r1, $r2;

        $r0 = newarray (net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection)[2];

        $r1 = <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection VERTICAL_THEN_HORIZONTAL>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection HORIZONTAL_THEN_VERTICAL>;

        $r0[1] = $r2;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection $r0, $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $r2;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: void <init>(java.lang.String,int)>("VERTICAL_THEN_HORIZONTAL", 0);

        <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection VERTICAL_THEN_HORIZONTAL> = $r0;

        $r1 = new net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection;

        specialinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: void <init>(java.lang.String,int)>("HORIZONTAL_THEN_VERTICAL", 1);

        <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection HORIZONTAL_THEN_VERTICAL> = $r1;

        $r2 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $values()>();

        <net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection: net.sourceforge.plantuml.activitydiagram3.ftile.SnakeDirection[] $VALUES> = $r2;

        return;
    }
}
