public class net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UDriver
{
    private final net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer;

    public void <init>(net.sourceforge.plantuml.ugraphic.ClipContainer)
    {
        net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps r0;
        net.sourceforge.plantuml.ugraphic.ClipContainer r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.ClipContainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps: net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer> = r1;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UEllipse, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, net.sourceforge.plantuml.eps.EpsGraphics)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32;
        net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps r1;
        net.sourceforge.plantuml.ugraphic.ClipContainer $r2;
        net.sourceforge.plantuml.ugraphic.UClip r3;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.eps.EpsGraphics r4;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r5;
        net.sourceforge.plantuml.ugraphic.UParam r6;
        net.sourceforge.plantuml.ugraphic.color.HColor $r7, $r9;
        java.awt.Color $r8, $r10;
        net.sourceforge.plantuml.ugraphic.UStroke $r11, $r12, $r13;
        boolean $z0, $z1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UEllipse;

        d7 := @parameter1: double;

        d9 := @parameter2: double;

        r5 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r6 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getWidth()>();

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getHeight()>();

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps: net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.ClipContainer: net.sourceforge.plantuml.ugraphic.UClip getClip()>();

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>(d7, d9);

        if $z0 != 0 goto label1;

        return;

     label1:
        $d32 = d7 + d0;

        $d31 = d9 + d1;

        $z1 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d32, $d31);

        if $z1 != 0 goto label2;

        return;

     label2:
        $d2 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getDeltaShadow()>();

        $b0 = $d2 cmpl 0.0;

        if $b0 == 0 goto label3;

        $d24 = d0 / 2.0;

        $d26 = d7 + $d24;

        $d25 = d1 / 2.0;

        $d27 = d9 + $d25;

        $d28 = d0 / 2.0;

        $d29 = d1 / 2.0;

        $d30 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getDeltaShadow()>();

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void epsEllipseShadow(double,double,double,double,double)>($d26, $d27, $d28, $d29, $d30);

     label3:
        $r7 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $r8 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r7);

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void setFillColor(java.awt.Color)>($r8);

        $r9 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r10 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r9);

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>($r10);

        $r11 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d3 = virtualinvoke $r11.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        $r12 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d4 = virtualinvoke $r12.<net.sourceforge.plantuml.ugraphic.UStroke: double getDashVisible()>();

        $r13 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d5 = virtualinvoke $r13.<net.sourceforge.plantuml.ugraphic.UStroke: double getDashSpace()>();

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>($d3, $d4, $d5);

        $d6 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getStart()>();

        $b1 = $d6 cmpl 0.0;

        if $b1 != 0 goto label4;

        $d17 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getExtend()>();

        $b2 = $d17 cmpl 0.0;

        if $b2 != 0 goto label4;

        $d18 = d0 / 2.0;

        $d23 = d7 + $d18;

        $d19 = d1 / 2.0;

        $d22 = d9 + $d19;

        $d21 = d0 / 2.0;

        $d20 = d1 / 2.0;

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void epsEllipse(double,double,double,double)>($d23, $d22, $d21, $d20);

        goto label5;

     label4:
        $d8 = d0 / 2.0;

        $d11 = d7 + $d8;

        $d10 = d1 / 2.0;

        $d12 = d9 + $d10;

        $d13 = d0 / 2.0;

        $d14 = d1 / 2.0;

        $d15 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getStart()>();

        $d16 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double getExtend()>();

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void epsEllipse(double,double,double,double,double,double)>($d11, $d12, $d13, $d14, $d15, $d16);

     label5:
        return;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        net.sourceforge.plantuml.eps.EpsGraphics $r5;
        net.sourceforge.plantuml.ugraphic.UEllipse $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.UEllipse) r1;

        $r5 = (net.sourceforge.plantuml.eps.EpsGraphics) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps: void draw(net.sourceforge.plantuml.ugraphic.UEllipse,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.eps.EpsGraphics)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
