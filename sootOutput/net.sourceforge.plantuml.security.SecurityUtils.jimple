public class net.sourceforge.plantuml.security.SecurityUtils extends java.lang.Object
{
    public static final java.lang.String NO_CREDENTIALS;
    public static final java.lang.String PATHS_CLASSES;
    public static final java.lang.String PATHS_INCLUDES;
    public static final java.lang.String PATHS_ALLOWED;
    public static final java.lang.String PATHS_SECURITY;
    public static final java.lang.String SECURITY_ALLOW_NONSSL_AUTH;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager PUBLIC_AUTH_MANAGER;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor PUBLIC_ACCESS_INTERCEPTOR;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager TOKEN_AUTH_MANAGER;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor TOKEN_ACCESS_INTERCEPTOR;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager BASICAUTH_AUTH_MANAGER;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor BASICAUTH_ACCESS_INTERCEPTOR;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager OAUTH2_CLIENT_AUTH_MANAGER;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager OAUTH2_RESOURCEOWNER_AUTH_MANAGER;
    private static final net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor OAUTH2_ACCESS_INTERCEPTOR;
    private static final java.util.regex.Pattern SECURE_CHARS;
    private static net.sourceforge.plantuml.security.SecurityProfile current;

    public void <init>()
    {
        net.sourceforge.plantuml.security.SecurityUtils r0;

        r0 := @this: net.sourceforge.plantuml.security.SecurityUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()
    {
        net.sourceforge.plantuml.security.SecurityProfile $r0, $r1, $r2;

        $r0 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile current>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile init()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile current> = $r2;

     label1:
        $r1 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile current>;

        return $r1;
    }

    public static boolean ignoreThisLink(java.lang.String)
    {
        boolean $z0, $z1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: boolean allowJavascriptInLink()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: boolean isJavascriptLink(java.lang.String)>(r0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean isJavascriptLink(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[^a-z]", "");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("javascript");

        return $z0;
    }

    private static boolean allowJavascriptInLink()
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String getenv(java.lang.String)>("PLANTUML_ALLOW_JAVASCRIPT_IN_LINK");

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    public static java.lang.String getenv(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        $z0 = staticinvoke <net.sourceforge.plantuml.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r0);

        return $r2;
    }

    public static boolean isSecurityEnv(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("plantuml.security.");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isNonSSLAuthenticationAllowed()
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String getenv(java.lang.String)>("plantuml.security.allowNonSSLAuth");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0);

        return $z0;
    }

    public static java.util.List getPath(java.lang.String)
    {
        java.util.ArrayList $r0;
        java.lang.String r2, $r4, $r8, r11, r12;
        java.util.StringTokenizer $r3;
        java.util.List $r6, $r9;
        net.sourceforge.plantuml.security.SFile $r7, r13;
        boolean $z0, $z2;
        java.io.IOException $r10;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r11 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String getenv(java.lang.String)>(r2);

        if r11 != null goto label1;

        $r9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r9;

     label1:
        r12 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r11);

        $r3 = new java.util.StringTokenizer;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("path.separator");

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r12, $r4);

     label2:
        $z2 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label6;

     label3:
        $r7 = new net.sourceforge.plantuml.security.SFile;

        $r8 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke $r7.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>($r8);

        r13 = virtualinvoke $r7.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getCanonicalFile()>();

        $z0 = virtualinvoke r13.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z0 == 0 goto label4;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r13);

     label4:
        goto label2;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.io.IOException: void printStackTrace()>();

        goto label2;

     label6:
        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r6;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public static boolean allowSvgText()
    {
        return 1;
    }

    public static java.io.PrintWriter createPrintWriter(java.io.OutputStream)
    {
        java.io.PrintWriter $r0;
        java.io.OutputStream r1;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.PrintWriter;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r1);

        return $r0;
    }

    public static java.io.PrintWriter createPrintWriter(java.io.OutputStream, boolean)
    {
        java.io.PrintWriter $r0;
        java.io.OutputStream r1;
        boolean z0;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r0 = new java.io.PrintWriter;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>(r1, z0);

        return $r0;
    }

    public static java.io.PrintStream createPrintStream(java.io.OutputStream)
    {
        java.io.PrintStream $r0;
        java.io.OutputStream r1;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.PrintStream;

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r1);

        return $r0;
    }

    public static java.io.PrintStream createPrintStream(java.io.OutputStream, boolean, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.PrintStream $r0;
        java.io.OutputStream r1;
        boolean z0;
        java.lang.String r2;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        $r0 = new java.io.PrintStream;

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>(r1, z0, r2);

        return $r0;
    }

    public static java.io.PrintStream createPrintStream(java.io.OutputStream, boolean, java.nio.charset.Charset) throws java.io.UnsupportedEncodingException
    {
        java.io.PrintStream $r0;
        java.io.OutputStream r1;
        boolean z0;
        java.nio.charset.Charset r2;
        java.lang.String $r3;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.nio.charset.Charset;

        $r0 = new java.io.PrintStream;

        $r3 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>(r1, z0, $r3);

        return $r0;
    }

    public static synchronized java.awt.image.BufferedImage readRasterImage(javax.swing.ImageIcon)
    {
        javax.swing.ImageIcon r0;
        java.awt.Image r1;
        int $i0, $i1, $i2;
        java.awt.image.BufferedImage $r2;
        java.awt.Graphics $r4;

        r0 := @parameter0: javax.swing.ImageIcon;

        r1 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i0 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconWidth()>();

        if $i0 != -1 goto label1;

        return null;

     label1:
        $r2 = new java.awt.image.BufferedImage;

        $i1 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconWidth()>();

        $i2 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconHeight()>();

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i1, $i2, 2);

        $r4 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        virtualinvoke $r4.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r1, 0, 0, null);

        virtualinvoke r1.<java.awt.Image: void flush()>();

        return $r2;
    }

    public static java.io.FileReader createFileReader(java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.FileReader $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.FileReader;

        specialinvoke $r0.<java.io.FileReader: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static java.io.PrintWriter createPrintWriter(java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.PrintWriter $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.PrintWriter;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static java.io.FileOutputStream createFileOutputStream(java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager getAuthenticationManager(net.sourceforge.plantuml.security.authentication.SecurityCredentials)
    {
        net.sourceforge.plantuml.security.authentication.SecurityCredentials r0, $r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager $r8, $r12, $r13, $r14, $r15, $r16;

        r0 := @parameter0: net.sourceforge.plantuml.security.authentication.SecurityCredentials;

        $r1 = <net.sourceforge.plantuml.security.authentication.SecurityCredentials: net.sourceforge.plantuml.security.authentication.SecurityCredentials NONE>;

        if r0 != $r1 goto label1;

        $r16 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager PUBLIC_AUTH_MANAGER>;

        return $r16;

     label1:
        $r2 = "tokenauth";

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.security.authentication.SecurityCredentials: java.lang.String getType()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        $r15 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager TOKEN_AUTH_MANAGER>;

        return $r15;

     label2:
        $r4 = "basicauth";

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.security.authentication.SecurityCredentials: java.lang.String getType()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z1 == 0 goto label3;

        $r14 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager BASICAUTH_AUTH_MANAGER>;

        return $r14;

     label3:
        $r6 = "oauth2";

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.security.authentication.SecurityCredentials: java.lang.String getType()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        if $z2 == 0 goto label5;

        r9 = virtualinvoke r0.<net.sourceforge.plantuml.security.authentication.SecurityCredentials: java.lang.String getPropertyStr(java.lang.String)>("grantType");

        $r10 = "client_credentials";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r9);

        if $z3 == 0 goto label4;

        $r13 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager OAUTH2_CLIENT_AUTH_MANAGER>;

        return $r13;

     label4:
        $r11 = "password";

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r9);

        if $z4 == 0 goto label5;

        $r12 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager OAUTH2_RESOURCEOWNER_AUTH_MANAGER>;

        return $r12;

     label5:
        $r8 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager PUBLIC_AUTH_MANAGER>;

        return $r8;
    }

    public static net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor getAccessInterceptor(net.sourceforge.plantuml.security.authentication.SecurityAuthentication)
    {
        net.sourceforge.plantuml.security.authentication.SecurityAuthentication r0;
        net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor $r1, $r7, $r8, $r9, $r10;
        java.lang.String r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: net.sourceforge.plantuml.security.authentication.SecurityAuthentication;

        if r0 == null goto label4;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.security.authentication.SecurityAuthentication: java.lang.String getType()>();

        $r3 = "public";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r10 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor PUBLIC_ACCESS_INTERCEPTOR>;

        return $r10;

     label1:
        $r4 = "tokenauth";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        $r9 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor TOKEN_ACCESS_INTERCEPTOR>;

        return $r9;

     label2:
        $r5 = "basicauth";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label3;

        $r8 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor BASICAUTH_ACCESS_INTERCEPTOR>;

        return $r8;

     label3:
        $r6 = "oauth2";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z3 == 0 goto label4;

        $r7 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor OAUTH2_ACCESS_INTERCEPTOR>;

        return $r7;

     label4:
        $r1 = <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor PUBLIC_ACCESS_INTERCEPTOR>;

        return $r1;
    }

    public static boolean existsSecurityCredentials(java.lang.String)
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.File r1, $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String r4, $r7;
        boolean $z0, $z1, $z2, $z3;
        long $l0;
        byte $b1;

        r4 := @parameter0: java.lang.String;

        r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SFile getSecurityPath()>();

        if r0 == null goto label3;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".credential");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r7);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r2.<java.io.File: boolean canRead()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label1;

        $l0 = virtualinvoke $r2.<java.io.File: long length()>();

        $b1 = $l0 cmp 2L;

        if $b1 <= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public static net.sourceforge.plantuml.security.authentication.SecurityCredentials loadSecurityCredentials(java.lang.String)
    {
        java.lang.String r0, $r1, $r8;
        boolean $z0, $z1;
        net.sourceforge.plantuml.security.SFile r2;
        java.io.File r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        net.sourceforge.plantuml.json.JsonValue r10;
        net.sourceforge.plantuml.security.authentication.SecurityCredentials $r11, $r12;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: boolean checkFileSystemSaveCharactersStrict(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r1 = "<none>";

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        r2 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SFile getSecurityPath()>();

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".credential");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, $r8);

        r10 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.json.JsonValue loadJson(java.io.File)>($r4);

        $r11 = staticinvoke <net.sourceforge.plantuml.security.authentication.SecurityCredentials: net.sourceforge.plantuml.security.authentication.SecurityCredentials fromJson(net.sourceforge.plantuml.json.JsonValue)>(r10);

        return $r11;

     label1:
        $r12 = <net.sourceforge.plantuml.security.authentication.SecurityCredentials: net.sourceforge.plantuml.security.authentication.SecurityCredentials NONE>;

        return $r12;
    }

    private static boolean checkFileSystemSaveCharactersStrict(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <net.sourceforge.plantuml.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        $r1 = <net.sourceforge.plantuml.security.SecurityUtils: java.util.regex.Pattern SECURE_CHARS>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z1 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 > 64 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static net.sourceforge.plantuml.security.SFile getSecurityPath()
    {
        java.util.List r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        net.sourceforge.plantuml.security.SFile r2;
        java.io.File r3;

        r0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.util.List getPath(java.lang.String)>("plantuml.security.credentials.path");

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (net.sourceforge.plantuml.security.SFile) $r1;

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.security.SFile: java.io.File conv()>();

        $z1 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label1;

        return r2;

     label1:
        return null;
    }

    private static net.sourceforge.plantuml.json.JsonValue loadJson(java.io.File)
    {
        java.io.File r0;
        boolean $z0, $z1;
        long $l0;
        byte $b1;
        java.io.BufferedReader $r1;
        java.io.FileReader $r2;
        java.io.IOException $r3;
        java.lang.Throwable $r4, $r6;
        net.sourceforge.plantuml.json.JsonValue r8;
        net.sourceforge.plantuml.json.JsonObject $r11;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label11;

        $z1 = virtualinvoke r0.<java.io.File: boolean canRead()>();

        if $z1 == 0 goto label11;

        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $b1 = $l0 cmp 2L;

        if $b1 <= 0 goto label11;

     label01:
        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.FileReader;

        specialinvoke $r2.<java.io.FileReader: void <init>(java.io.File)>(r0);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

     label02:
        r8 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue parse(java.io.Reader)>($r1);

     label03:
        virtualinvoke $r1.<java.io.Reader: void close()>();

     label04:
        return r8;

     label05:
        $r6 := @caughtexception;

     label06:
        virtualinvoke $r1.<java.io.Reader: void close()>();

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label09:
        throw $r6;

     label10:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

     label11:
        $r11 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonObject object()>();

        return $r11;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label01 to label04 with label10;
        catch java.io.IOException from label05 to label10 with label10;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.security.authentication.SecurityDefaultNoopAuthorizeManager $r0;
        net.sourceforge.plantuml.security.authentication.SecurityDefaultNoopAccessInterceptor $r1;
        net.sourceforge.plantuml.security.authentication.token.TokenAuthAuthorizeManager $r2;
        net.sourceforge.plantuml.security.authentication.token.TokenAuthAccessInterceptor $r3;
        net.sourceforge.plantuml.security.authentication.basicauth.BasicAuthAuthorizeManager $r4;
        net.sourceforge.plantuml.security.authentication.basicauth.BasicAuthAccessInterceptor $r5;
        net.sourceforge.plantuml.security.authentication.oauth.OAuth2ClientAccessAuthorizeManager $r6;
        net.sourceforge.plantuml.security.authentication.oauth.OAuth2ResourceOwnerAccessAuthorizeManager $r7;
        net.sourceforge.plantuml.security.authentication.oauth.OAuth2AccessInterceptor $r8;
        java.util.regex.Pattern $r9;

        <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String SECURITY_ALLOW_NONSSL_AUTH> = "plantuml.security.allowNonSSLAuth";

        <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String PATHS_SECURITY> = "plantuml.security.credentials.path";

        <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String PATHS_ALLOWED> = "plantuml.allowlist.path";

        <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String PATHS_INCLUDES> = "plantuml.include.path";

        <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String PATHS_CLASSES> = "java.class.path";

        <net.sourceforge.plantuml.security.SecurityUtils: java.lang.String NO_CREDENTIALS> = "<none>";

        $r0 = new net.sourceforge.plantuml.security.authentication.SecurityDefaultNoopAuthorizeManager;

        specialinvoke $r0.<net.sourceforge.plantuml.security.authentication.SecurityDefaultNoopAuthorizeManager: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager PUBLIC_AUTH_MANAGER> = $r0;

        $r1 = new net.sourceforge.plantuml.security.authentication.SecurityDefaultNoopAccessInterceptor;

        specialinvoke $r1.<net.sourceforge.plantuml.security.authentication.SecurityDefaultNoopAccessInterceptor: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor PUBLIC_ACCESS_INTERCEPTOR> = $r1;

        $r2 = new net.sourceforge.plantuml.security.authentication.token.TokenAuthAuthorizeManager;

        specialinvoke $r2.<net.sourceforge.plantuml.security.authentication.token.TokenAuthAuthorizeManager: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager TOKEN_AUTH_MANAGER> = $r2;

        $r3 = new net.sourceforge.plantuml.security.authentication.token.TokenAuthAccessInterceptor;

        specialinvoke $r3.<net.sourceforge.plantuml.security.authentication.token.TokenAuthAccessInterceptor: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor TOKEN_ACCESS_INTERCEPTOR> = $r3;

        $r4 = new net.sourceforge.plantuml.security.authentication.basicauth.BasicAuthAuthorizeManager;

        specialinvoke $r4.<net.sourceforge.plantuml.security.authentication.basicauth.BasicAuthAuthorizeManager: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager BASICAUTH_AUTH_MANAGER> = $r4;

        $r5 = new net.sourceforge.plantuml.security.authentication.basicauth.BasicAuthAccessInterceptor;

        specialinvoke $r5.<net.sourceforge.plantuml.security.authentication.basicauth.BasicAuthAccessInterceptor: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor BASICAUTH_ACCESS_INTERCEPTOR> = $r5;

        $r6 = new net.sourceforge.plantuml.security.authentication.oauth.OAuth2ClientAccessAuthorizeManager;

        specialinvoke $r6.<net.sourceforge.plantuml.security.authentication.oauth.OAuth2ClientAccessAuthorizeManager: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager OAUTH2_CLIENT_AUTH_MANAGER> = $r6;

        $r7 = new net.sourceforge.plantuml.security.authentication.oauth.OAuth2ResourceOwnerAccessAuthorizeManager;

        specialinvoke $r7.<net.sourceforge.plantuml.security.authentication.oauth.OAuth2ResourceOwnerAccessAuthorizeManager: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAuthorizeManager OAUTH2_RESOURCEOWNER_AUTH_MANAGER> = $r7;

        $r8 = new net.sourceforge.plantuml.security.authentication.oauth.OAuth2AccessInterceptor;

        specialinvoke $r8.<net.sourceforge.plantuml.security.authentication.oauth.OAuth2AccessInterceptor: void <init>()>();

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.authentication.SecurityAccessInterceptor OAUTH2_ACCESS_INTERCEPTOR> = $r8;

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9\\-]+$");

        <net.sourceforge.plantuml.security.SecurityUtils: java.util.regex.Pattern SECURE_CHARS> = $r9;

        <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile current> = null;

        return;
    }
}
