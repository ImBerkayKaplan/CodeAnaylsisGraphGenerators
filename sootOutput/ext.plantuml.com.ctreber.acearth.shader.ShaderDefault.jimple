public class ext.plantuml.com.ctreber.acearth.shader.ShaderDefault extends ext.plantuml.com.ctreber.acearth.shader.Shader
{

    public void <init>()
    {
        ext.plantuml.com.ctreber.acearth.shader.ShaderDefault r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.shader.ShaderDefault;

        specialinvoke r0.<ext.plantuml.com.ctreber.acearth.shader.Shader: void <init>()>();

        return;
    }

    public java.awt.Color[] getShadedColors(int, int[])
    {
        ext.plantuml.com.ctreber.acearth.shader.ShaderDefault r0;
        int i0, $i1, $i2, $i3, i4;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, $d12, d13, $d14, $d15, $d16, $d17, $d18, d19, $d20, $d21, $d22, $d23, d24, d25, d26, d27, d28;
        ext.plantuml.com.ctreber.acearth.projection.Projection $r1, $r2, $r3, $r4, $r5;
        ext.plantuml.com.ctreber.acearth.util.Point3D $r6, $r9, $r10;
        int[] r7;
        java.awt.Color[] r8;
        java.awt.Color $r11;

        r0 := @this: ext.plantuml.com.ctreber.acearth.shader.ShaderDefault;

        i0 := @parameter0: int;

        r7 := @parameter1: int[];

        $r2 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $r1 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d0 = (double) i0;

        $d1 = virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double inverseFinalizeY(double)>($d0);

        d2 = virtualinvoke $r2.<ext.plantuml.com.ctreber.acearth.projection.Projection: double inverseProjectY(double)>($d1);

        $d3 = d2 * d2;

        $d4 = 1.0 - $d3;

        d24 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $r3 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d5 = virtualinvoke $r3.<ext.plantuml.com.ctreber.acearth.projection.Projection: double inverseFinalizeX(double)>(0.0);

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        d25 = $d6 * d24;

        $r4 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d7 = virtualinvoke $r4.<ext.plantuml.com.ctreber.acearth.projection.Projection: double inverseFinalizeX(double)>(0.0);

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d7);

        d26 = $d8 * d24;

        $r5 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.projection.Projection fProjection>;

        $d9 = virtualinvoke $r5.<ext.plantuml.com.ctreber.acearth.projection.Projection: double getScale()>();

        d27 = 1.0 / $d9;

        d10 = staticinvoke <java.lang.Math: double sin(double)>(d27);

        d11 = staticinvoke <java.lang.Math: double cos(double)>(d27);

        $r6 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.util.Point3D fLightVector>;

        $d12 = virtualinvoke $r6.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        d13 = d2 * $d12;

        $i1 = lengthof r7;

        r8 = newarray (java.awt.Color)[$i1];

        i4 = 0;

     label1:
        $i2 = lengthof r7;

        if i4 >= $i2 goto label2;

        $r9 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.util.Point3D fLightVector>;

        $d14 = virtualinvoke $r9.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d15 = d25 * $d14;

        $d16 = $d15 + d13;

        $r10 = r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: ext.plantuml.com.ctreber.acearth.util.Point3D fLightVector>;

        $d17 = virtualinvoke $r10.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d18 = d26 * $d17;

        d19 = $d16 + $d18;

        $i3 = r7[i4];

        $r11 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.shader.ShaderDefault: java.awt.Color getShadedColorForType(int,double)>($i3, d19);

        r8[i4] = $r11;

        $d21 = d11 * d26;

        $d20 = d10 * d25;

        d28 = $d21 - $d20;

        $d23 = d10 * d26;

        $d22 = d11 * d25;

        d25 = $d23 + $d22;

        d26 = d28;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r8;
    }
}
