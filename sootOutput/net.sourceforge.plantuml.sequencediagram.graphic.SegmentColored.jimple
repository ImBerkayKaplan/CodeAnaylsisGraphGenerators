class net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored extends java.lang.Object
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.Segment segment;
    private final net.sourceforge.plantuml.graphic.SymbolContext colors;
    private final boolean shadowing;
    private final double pos1Initial;

    void <init>(double, double, net.sourceforge.plantuml.graphic.SymbolContext, boolean)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r1;
        double d0, d1;
        net.sourceforge.plantuml.graphic.SymbolContext r2;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.graphic.SymbolContext;

        z0 := @parameter3: boolean;

        $r1 = new net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: void <init>(double,double)>(d0, d1);

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Segment,net.sourceforge.plantuml.graphic.SymbolContext,boolean,double)>($r1, r2, z0, d0);

        return;
    }

    private void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Segment, net.sourceforge.plantuml.graphic.SymbolContext, boolean, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r1;
        net.sourceforge.plantuml.graphic.SymbolContext r2;
        boolean z0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.SymbolContext;

        z0 := @parameter2: boolean;

        d0 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext colors> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: boolean shadowing> = z0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: double pos1Initial> = d0;

        return;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getSpecificBackColor()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.graphic.SymbolContext $r1, $r2;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext colors>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext colors>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

        return $r3;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getSpecificLineColor()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.graphic.SymbolContext $r1, $r2;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext colors>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext colors>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.color.HColor getForeColor()>();

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r1, r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r3, $r4;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        r0 := @parameter0: java.lang.Object;

        r1 = (net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored) r0;

        $r4 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $z0 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: java.lang.String toString()>();

        return $r2;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Component, int)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r1;
        int i0, $i1;
        net.sourceforge.plantuml.skin.Component r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r3;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r4, $r6, $r7;
        net.sourceforge.plantuml.Dimension2DDouble $r5;
        net.sourceforge.plantuml.skin.Area $r9;
        net.sourceforge.plantuml.skin.SimpleContext2D $r10;
        net.sourceforge.plantuml.ugraphic.UGraphic r11, r12;

        r3 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        r11 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r2 := @parameter1: net.sourceforge.plantuml.skin.Component;

        i0 := @parameter2: int;

        r0 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r1 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $i1 = i0 - 1;

        $d0 = (double) $i1;

        $d1 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d2 = $d0 * $d1;

        $d3 = $d2 / 2.0;

        $r4 = r3.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $d4 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d3, $d4);

        r12 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r1);

        $r5 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d5 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r6 = r3.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $d6 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos2()>();

        $r7 = r3.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $d7 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        $d8 = $d6 - $d7;

        specialinvoke $r5.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d5, $d8);

        $r9 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5);

        $r10 = new net.sourceforge.plantuml.skin.SimpleContext2D;

        specialinvoke $r10.<net.sourceforge.plantuml.skin.SimpleContext2D: void <init>(boolean)>(0);

        interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r12, $r9, $r10);

        return;
    }

    public java.util.Collection cutSegmentIfNeed(java.util.Collection)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Coll2 $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r1;
        java.util.Collection r2, $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r3, $r5;
        double $d0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        r2 := @parameter0: java.util.Collection;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Coll2;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: java.util.Collection cutSegmentIfNeed(java.util.Collection)>(r2);

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $d0 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$Coll2: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored,java.util.Collection,double)>(r1, $r4, $d0);

        return $r0;
    }

    public double getPos1Initial()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: double pos1Initial>;

        return $d0;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored merge(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0, r1, $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r2, $r3, r4;
        net.sourceforge.plantuml.graphic.SymbolContext $r6;
        boolean $z0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: net.sourceforge.plantuml.sequencediagram.graphic.Segment merge(net.sourceforge.plantuml.sequencediagram.graphic.Segment)>($r2);

        $r5 = new net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext colors>;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: boolean shadowing>;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        specialinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Segment,net.sourceforge.plantuml.graphic.SymbolContext,boolean,double)>(r4, $r6, $z0, $d0);

        return $r5;
    }

    public final net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment segment>;

        return $r1;
    }

    static net.sourceforge.plantuml.graphic.SymbolContext access$000(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.graphic.SymbolContext $r1;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.graphic.SymbolContext colors>;

        return $r1;
    }

    static boolean access$100(net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        boolean $z0;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: boolean shadowing>;

        return $z0;
    }

    void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Segment, net.sourceforge.plantuml.graphic.SymbolContext, boolean, double, net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$1)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment r1;
        net.sourceforge.plantuml.graphic.SymbolContext r2;
        boolean z0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$1 r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.Segment;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.SymbolContext;

        z0 := @parameter2: boolean;

        d0 := @parameter3: double;

        r3 := @parameter4: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored$1;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: void <init>(net.sourceforge.plantuml.sequencediagram.graphic.Segment,net.sourceforge.plantuml.graphic.SymbolContext,boolean,double)>(r1, r2, z0, d0);

        return;
    }
}
