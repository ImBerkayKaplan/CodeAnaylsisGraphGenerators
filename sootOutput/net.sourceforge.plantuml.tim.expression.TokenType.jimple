public final enum class net.sourceforge.plantuml.tim.expression.TokenType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType QUOTED_STRING;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType JSON_DATA;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType OPERATOR;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType COMMA;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType NUMBER;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType PLAIN_TEXT;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType SPACES;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType FUNCTION_NAME;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_FUNC;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC;
    private static final net.sourceforge.plantuml.tim.expression.TokenType[] $VALUES;

    public static net.sourceforge.plantuml.tim.expression.TokenType[] values()
    {
        net.sourceforge.plantuml.tim.expression.TokenType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.tim.expression.TokenType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.tim.expression.TokenType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.tim.expression.TokenType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/tim/expression/TokenType;", r0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TokenType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.tim.expression.TokenType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private boolean isSingleChar1()
    {
        net.sourceforge.plantuml.tim.expression.TokenType r0, $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenType;

        $r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        if r0 == $r1 goto label1;

        $r2 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType COMMA>;

        if r0 == $r2 goto label1;

        $r3 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        if r0 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean isPlainTextBreak(char, char)
    {
        char c0, c1;
        net.sourceforge.plantuml.tim.expression.TokenType r0, $r1, $r2;
        boolean $z0;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        r0 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType fromChar(char,char)>(c0, c1);

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenType: boolean isSingleChar1()>();

        if $z0 != 0 goto label1;

        $r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPERATOR>;

        if r0 == $r1 goto label1;

        $r2 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType SPACES>;

        if r0 != $r2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static net.sourceforge.plantuml.tim.expression.TokenType fromChar(char, char)
    {
        char c0, c1;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.tim.expression.TokenOperator $r0;
        net.sourceforge.plantuml.tim.expression.TokenType r1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType PLAIN_TEXT>;

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isQuote(char)>(c0);

        if $z0 == 0 goto label1;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType QUOTED_STRING>;

        goto label7;

     label1:
        $r0 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator getTokenOperator(char,char)>(c0, c1);

        if $r0 == null goto label2;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPERATOR>;

        goto label7;

     label2:
        if c0 != 40 goto label3;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        goto label7;

     label3:
        if c0 != 41 goto label4;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        goto label7;

     label4:
        if c0 != 44 goto label5;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType COMMA>;

        goto label7;

     label5:
        $z1 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLatinDigit(char)>(c0);

        if $z1 == 0 goto label6;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType NUMBER>;

        goto label7;

     label6:
        $z2 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isSpaceChar(char)>(c0);

        if $z2 == 0 goto label7;

        r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType SPACES>;

     label7:
        return r1;
    }

    public static final net.sourceforge.plantuml.tim.expression.Token eatOneToken(net.sourceforge.plantuml.tim.Eater, boolean) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        char c0, $c1, $c2, $c3, $c4, $c6, $c7, $c8;
        boolean z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.tim.expression.TokenOperator r1;
        net.sourceforge.plantuml.tim.expression.Token $r2, $r5, $r8, $r11, $r13, $r15, $r18, $r25, $r27;
        java.lang.String $r3, $r6, $r9, $r17, $r23, $r28;
        net.sourceforge.plantuml.tim.expression.TokenType $r4, $r7, $r10, $r12, $r14, $r16, $r24, $r26, $r29;
        int $i5;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;

        r0 := @parameter0: net.sourceforge.plantuml.tim.Eater;

        z0 := @parameter1: boolean;

        c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if c0 != 0 goto label01;

        return null;

     label01:
        if z0 == 0 goto label02;

        if c0 != 58 goto label02;

        return null;

     label02:
        $c1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekCharN2()>();

        r1 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator getTokenOperator(char,char)>(c0, $c1);

        $z1 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isQuote(char)>(c0);

        if $z1 == 0 goto label03;

        $r27 = new net.sourceforge.plantuml.tim.expression.Token;

        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAndGetQuotedString()>();

        $r29 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType QUOTED_STRING>;

        specialinvoke $r27.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r28, $r29, null);

        return $r27;

     label03:
        if r1 == null goto label05;

        $r17 = virtualinvoke r1.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String getDisplay()>();

        $i5 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i5 != 1 goto label04;

        $r25 = new net.sourceforge.plantuml.tim.expression.Token;

        $c8 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r26 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPERATOR>;

        specialinvoke $r25.<net.sourceforge.plantuml.tim.expression.Token: void <init>(char,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($c8, $r26, null);

        return $r25;

     label04:
        $r18 = new net.sourceforge.plantuml.tim.expression.Token;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $c6 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $c7 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPERATOR>;

        specialinvoke $r18.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r23, $r24, null);

        return $r18;

     label05:
        if c0 != 40 goto label06;

        $r15 = new net.sourceforge.plantuml.tim.expression.Token;

        $c4 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r16 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        specialinvoke $r15.<net.sourceforge.plantuml.tim.expression.Token: void <init>(char,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($c4, $r16, null);

        return $r15;

     label06:
        if c0 != 41 goto label07;

        $r13 = new net.sourceforge.plantuml.tim.expression.Token;

        $c3 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r14 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        specialinvoke $r13.<net.sourceforge.plantuml.tim.expression.Token: void <init>(char,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($c3, $r14, null);

        return $r13;

     label07:
        if c0 != 44 goto label08;

        $r11 = new net.sourceforge.plantuml.tim.expression.Token;

        $c2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r12 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType COMMA>;

        specialinvoke $r11.<net.sourceforge.plantuml.tim.expression.Token: void <init>(char,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($c2, $r12, null);

        return $r11;

     label08:
        $z2 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLatinDigit(char)>(c0);

        if $z2 == 0 goto label09;

        $r8 = new net.sourceforge.plantuml.tim.expression.Token;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAndGetNumber()>();

        $r10 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType NUMBER>;

        specialinvoke $r8.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r9, $r10, null);

        return $r8;

     label09:
        $z3 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isSpaceChar(char)>(c0);

        if $z3 == 0 goto label10;

        $r5 = new net.sourceforge.plantuml.tim.expression.Token;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAndGetSpaces()>();

        $r7 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType SPACES>;

        specialinvoke $r5.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r6, $r7, null);

        return $r5;

     label10:
        $r2 = new net.sourceforge.plantuml.tim.expression.Token;

        $r3 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenType: java.lang.String eatAndGetTokenPlainText(net.sourceforge.plantuml.tim.Eater)>(r0);

        $r4 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType PLAIN_TEXT>;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.expression.Token: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TokenType,net.sourceforge.plantuml.json.JsonValue)>($r3, $r4, null);

        return $r2;
    }

    private static java.lang.String eatAndGetTokenPlainText(net.sourceforge.plantuml.tim.Eater) throws net.sourceforge.plantuml.tim.EaterException
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.tim.Eater r2;
        char c0, $c1, $c2;
        java.lang.String $r3;
        boolean $z0;

        r2 := @parameter0: net.sourceforge.plantuml.tim.Eater;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        c0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if c0 == 0 goto label2;

        $c1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char peekCharN2()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenType: boolean isPlainTextBreak(char,char)>(c0, $c1);

        if $z0 == 0 goto label3;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        $c2 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label1;
    }

    private static net.sourceforge.plantuml.tim.expression.TokenType[] $values()
    {
        net.sourceforge.plantuml.tim.expression.TokenType[] $r0;
        net.sourceforge.plantuml.tim.expression.TokenType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = newarray (net.sourceforge.plantuml.tim.expression.TokenType)[12];

        $r1 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType QUOTED_STRING>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType JSON_DATA>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPERATOR>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType COMMA>;

        $r0[4] = $r5;

        $r6 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH>;

        $r0[5] = $r6;

        $r7 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType NUMBER>;

        $r0[6] = $r7;

        $r8 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType PLAIN_TEXT>;

        $r0[7] = $r8;

        $r9 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType SPACES>;

        $r0[8] = $r9;

        $r10 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType FUNCTION_NAME>;

        $r0[9] = $r10;

        $r11 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_FUNC>;

        $r0[10] = $r11;

        $r12 = <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC>;

        $r0[11] = $r12;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.tim.expression.TokenType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        net.sourceforge.plantuml.tim.expression.TokenType[] $r12;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("QUOTED_STRING", 0);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType QUOTED_STRING> = $r0;

        $r1 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r1.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("JSON_DATA", 1);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType JSON_DATA> = $r1;

        $r2 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("OPERATOR", 2);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPERATOR> = $r2;

        $r3 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("OPEN_PAREN_MATH", 3);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_MATH> = $r3;

        $r4 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r4.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("COMMA", 4);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType COMMA> = $r4;

        $r5 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r5.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("CLOSE_PAREN_MATH", 5);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_MATH> = $r5;

        $r6 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r6.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("NUMBER", 6);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType NUMBER> = $r6;

        $r7 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r7.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("PLAIN_TEXT", 7);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType PLAIN_TEXT> = $r7;

        $r8 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r8.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("SPACES", 8);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType SPACES> = $r8;

        $r9 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r9.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("FUNCTION_NAME", 9);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType FUNCTION_NAME> = $r9;

        $r10 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r10.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("OPEN_PAREN_FUNC", 10);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType OPEN_PAREN_FUNC> = $r10;

        $r11 = new net.sourceforge.plantuml.tim.expression.TokenType;

        specialinvoke $r11.<net.sourceforge.plantuml.tim.expression.TokenType: void <init>(java.lang.String,int)>("CLOSE_PAREN_FUNC", 11);

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType CLOSE_PAREN_FUNC> = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType[] $values()>();

        <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.TokenType[] $VALUES> = $r12;

        return;
    }
}
