public class net.sourceforge.plantuml.salt.Dictionary extends java.lang.Object implements net.sourceforge.plantuml.SpriteContainer, net.sourceforge.plantuml.ISkinSimple
{
    private final java.util.Map data;
    private final java.util.Map sprites;

    public void <init>()
    {
        net.sourceforge.plantuml.salt.Dictionary r0;
        java.util.HashMap $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.Dictionary: java.util.Map data> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.Dictionary: java.util.Map sprites> = $r2;

        return;
    }

    public void put(java.lang.String, net.sourceforge.plantuml.salt.element.Element)
    {
        net.sourceforge.plantuml.salt.Dictionary r0;
        java.lang.String r1;
        net.sourceforge.plantuml.salt.element.Element r2;
        java.util.Map $r3;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.salt.element.Element;

        $r3 = r0.<net.sourceforge.plantuml.salt.Dictionary: java.util.Map data>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public net.sourceforge.plantuml.salt.element.Element get(java.lang.String)
    {
        net.sourceforge.plantuml.salt.Dictionary r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3, $r4, $r6;
        net.sourceforge.plantuml.salt.element.Element $r5, r7;
        net.sourceforge.plantuml.salt.element.WrappedElement $r8;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.salt.Dictionary: java.util.Map data>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (net.sourceforge.plantuml.salt.element.Element) $r4;

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        r7 = (net.sourceforge.plantuml.salt.element.Element) $r6;

        $r8 = new net.sourceforge.plantuml.salt.element.WrappedElement;

        specialinvoke $r8.<net.sourceforge.plantuml.salt.element.WrappedElement: void <init>(net.sourceforge.plantuml.salt.element.Element)>(r7);

        return $r8;
    }

    public net.sourceforge.plantuml.sprite.Sprite getSprite(java.lang.String)
    {
        net.sourceforge.plantuml.salt.Dictionary r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sprite.Sprite $r4;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.salt.Dictionary: java.util.Map sprites>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (net.sourceforge.plantuml.sprite.Sprite) $r3;

        return $r4;
    }

    public java.lang.String getValue(java.lang.String)
    {
        net.sourceforge.plantuml.salt.Dictionary r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public double getPadding()
    {
        net.sourceforge.plantuml.salt.Dictionary r0;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        return 0.0;
    }

    public net.sourceforge.plantuml.Guillemet guillemet()
    {
        net.sourceforge.plantuml.Guillemet $r0;
        net.sourceforge.plantuml.salt.Dictionary r1;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        $r0 = <net.sourceforge.plantuml.Guillemet: net.sourceforge.plantuml.Guillemet GUILLEMET>;

        return $r0;
    }

    public java.lang.String getMonospacedFamily()
    {
        net.sourceforge.plantuml.salt.Dictionary r0;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        return "monospaced";
    }

    public int getTabSize()
    {
        net.sourceforge.plantuml.salt.Dictionary r0;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        return 8;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r0;
        net.sourceforge.plantuml.salt.Dictionary r1;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        $r0 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        return $r0;
    }

    public int getDpi()
    {
        net.sourceforge.plantuml.salt.Dictionary r0;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        return 96;
    }

    public void addSprite(java.lang.String, net.sourceforge.plantuml.sprite.Sprite)
    {
        net.sourceforge.plantuml.salt.Dictionary r0;
        java.lang.String r1;
        net.sourceforge.plantuml.sprite.Sprite r2;
        java.util.Map $r3;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.sprite.Sprite;

        $r3 = r0.<net.sourceforge.plantuml.salt.Dictionary: java.util.Map sprites>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public net.sourceforge.plantuml.LineBreakStrategy wrapWidth()
    {
        net.sourceforge.plantuml.LineBreakStrategy $r0;
        net.sourceforge.plantuml.salt.Dictionary r1;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        $r0 = <net.sourceforge.plantuml.LineBreakStrategy: net.sourceforge.plantuml.LineBreakStrategy NONE>;

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.color.ColorMapper getColorMapper()
    {
        net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity $r0;
        net.sourceforge.plantuml.salt.Dictionary r1;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        $r0 = new net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity: void <init>()>();

        return $r0;
    }

    public void copyAllFrom(net.sourceforge.plantuml.ISkinSimple)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.salt.Dictionary r1;
        net.sourceforge.plantuml.ISkinSimple r2;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        r2 := @parameter0: net.sourceforge.plantuml.ISkinSimple;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.Map values()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.salt.Dictionary r1;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public double minClassWidth()
    {
        net.sourceforge.plantuml.salt.Dictionary r0;

        r0 := @this: net.sourceforge.plantuml.salt.Dictionary;

        return 0.0;
    }

    public java.lang.String transformStringForSizeHack(java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.salt.Dictionary r1;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()
    {
        net.sourceforge.plantuml.api.ThemeStyle $r0;
        net.sourceforge.plantuml.salt.Dictionary r1;

        r1 := @this: net.sourceforge.plantuml.salt.Dictionary;

        $r0 = <net.sourceforge.plantuml.api.ThemeStyle: net.sourceforge.plantuml.api.ThemeStyle LIGHT_REGULAR>;

        return $r0;
    }
}
