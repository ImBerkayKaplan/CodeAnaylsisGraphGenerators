public class net.sourceforge.plantuml.descdiagram.command.CommandNewpage extends net.sourceforge.plantuml.command.SingleLineCommand2
{
    private final net.sourceforge.plantuml.command.PSystemCommandFactory factory;

    public void <init>(net.sourceforge.plantuml.command.PSystemCommandFactory)
    {
        net.sourceforge.plantuml.descdiagram.command.CommandNewpage r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;
        net.sourceforge.plantuml.command.PSystemCommandFactory r2;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandNewpage;

        r2 := @parameter0: net.sourceforge.plantuml.command.PSystemCommandFactory;

        $r1 = staticinvoke <net.sourceforge.plantuml.descdiagram.command.CommandNewpage: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        r0.<net.sourceforge.plantuml.descdiagram.command.CommandNewpage: net.sourceforge.plantuml.command.PSystemCommandFactory factory> = r2;

        return;
    }

    static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5;
        net.sourceforge.plantuml.command.regex.RegexConcat $r6;

        $r0 = class "Lnet/sourceforge/plantuml/descdiagram/command/CommandNewpage;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[3];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("newpage");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[2] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r6;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.UmlDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.UmlDiagram r0, r9;
        net.sourceforge.plantuml.ISkinParam $r1, $r4, $r7;
        int i0;
        net.sourceforge.plantuml.descdiagram.command.CommandNewpage r2;
        net.sourceforge.plantuml.command.PSystemCommandFactory $r3;
        net.sourceforge.plantuml.api.ThemeStyle $r5;
        net.sourceforge.plantuml.core.UmlSource $r6, $r11;
        net.sourceforge.plantuml.AbstractPSystem $r8;
        net.sourceforge.plantuml.NewpagedDiagram $r10;
        net.sourceforge.plantuml.command.CommandExecutionResult $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17;
        net.sourceforge.plantuml.LineLocation r18;
        net.sourceforge.plantuml.command.regex.RegexResult r19;

        r2 := @this: net.sourceforge.plantuml.descdiagram.command.CommandNewpage;

        r0 := @parameter0: net.sourceforge.plantuml.UmlDiagram;

        r18 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r19 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        i0 = interfaceinvoke $r1.<net.sourceforge.plantuml.ISkinParam: int getDpi()>();

        $r3 = r2.<net.sourceforge.plantuml.descdiagram.command.CommandNewpage: net.sourceforge.plantuml.command.PSystemCommandFactory factory>;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.core.UmlSource getSource()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r8 = virtualinvoke $r3.<net.sourceforge.plantuml.command.PSystemCommandFactory: net.sourceforge.plantuml.AbstractPSystem createEmptyDiagram(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.ISkinSimple)>($r5, $r6, $r7);

        r9 = (net.sourceforge.plantuml.UmlDiagram) $r8;

        if i0 == 96 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<net.sourceforge.plantuml.UmlDiagram: void setParam(java.lang.String,java.lang.String)>("dpi", $r17);

     label1:
        $r10 = new net.sourceforge.plantuml.NewpagedDiagram;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.UmlDiagram: net.sourceforge.plantuml.core.UmlSource getSource()>();

        specialinvoke $r10.<net.sourceforge.plantuml.NewpagedDiagram: void <init>(net.sourceforge.plantuml.core.UmlSource,net.sourceforge.plantuml.AbstractPSystem,net.sourceforge.plantuml.AbstractPSystem)>($r11, r0, r9);

        $r13 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult newDiagram(net.sourceforge.plantuml.AbstractPSystem)>($r10);

        return $r13;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.descdiagram.command.CommandNewpage r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.UmlDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.descdiagram.command.CommandNewpage;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.UmlDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.descdiagram.command.CommandNewpage: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.UmlDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
