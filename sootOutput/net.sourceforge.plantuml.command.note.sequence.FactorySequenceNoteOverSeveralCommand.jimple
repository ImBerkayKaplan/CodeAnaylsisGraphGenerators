public final class net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand extends java.lang.Object implements net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand
{

    public void <init>()
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand r0;

        r0 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r27, $r28, $r30, $r31;
        java.lang.Class $r1;
        java.lang.String $r2, $r5, $r29, $r32;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r33;
        net.sourceforge.plantuml.graphic.color.ColorParser $r23;
        net.sourceforge.plantuml.command.regex.RegexConcat $r34;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand r35;

        r35 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/note/sequence/FactorySequenceNoteOverSeveralCommand;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("multi");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[20];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("PARALLEL", "(&[%s]*)?");

        $r6[1] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("VMERGE", "(/)?");

        $r6[2] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STYLE", "(note|hnote|rnote)");

        $r6[4] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[5] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<{2}.*\\>{2})?");

        $r6[6] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[7] = $r14;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("over");

        $r6[8] = $r15;

        $r16 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[9] = $r16;

        $r17 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r17.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("P1", "([%pLN_.@]+|[%g][^%g]+[%g])");

        $r6[10] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[11] = $r18;

        $r19 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r19.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(",");

        $r6[12] = $r19;

        $r20 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[13] = $r20;

        $r21 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r21.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("P2", "([%pLN_.@]+|[%g][^%g]+[%g])");

        $r6[14] = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[15] = $r22;

        $r23 = staticinvoke <net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r24 = virtualinvoke $r23.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r6[16] = $r24;

        $r25 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[17] = $r25;

        $r26 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r29 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r32);

        $r6[18] = $r26;

        $r33 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[19] = $r33;

        $r34 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r34;
    }

    private net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r27, $r28, $r30, $r31;
        java.lang.Class $r1;
        java.lang.String $r2, $r5, $r29, $r32;
        net.sourceforge.plantuml.command.regex.IRegex[] $r6;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r33, $r34, $r35, $r36, $r37;
        net.sourceforge.plantuml.graphic.color.ColorParser $r23;
        net.sourceforge.plantuml.command.regex.RegexConcat $r38;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand r39;

        r39 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/command/note/sequence/FactorySequenceNoteOverSeveralCommand;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("single");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[24];

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r6[0] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("PARALLEL", "(&[%s]*)?");

        $r6[1] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("VMERGE", "(/)?");

        $r6[2] = $r9;

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[3] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STYLE", "(note|hnote|rnote)");

        $r6[4] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[5] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREO", "(\\<{2}.*\\>{2})?");

        $r6[6] = $r13;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[7] = $r14;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("over");

        $r6[8] = $r15;

        $r16 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r6[9] = $r16;

        $r17 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r17.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("P1", "([%pLN_.@]+|[%g][^%g]+[%g])");

        $r6[10] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[11] = $r18;

        $r19 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r19.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(",");

        $r6[12] = $r19;

        $r20 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[13] = $r20;

        $r21 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r21.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("P2", "([%pLN_.@]+|[%g][^%g]+[%g])");

        $r6[14] = $r21;

        $r22 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[15] = $r22;

        $r23 = staticinvoke <net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r24 = virtualinvoke $r23.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r6[16] = $r24;

        $r25 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[17] = $r25;

        $r26 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r29 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r32);

        $r6[18] = $r26;

        $r33 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[19] = $r33;

        $r34 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r34.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(":");

        $r6[20] = $r34;

        $r35 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r6[21] = $r35;

        $r36 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r36.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("NOTE", "(.*)");

        $r6[22] = $r36;

        $r37 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r6[23] = $r37;

        $r38 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r5, $r6);

        return $r38;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    public net.sourceforge.plantuml.command.Command createSingleLine()
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand$1 $r0;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;

        r1 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand;

        $r0 = new net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand$1;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatSingleLine()>();

        specialinvoke $r0.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand$1: void <init>(net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand,net.sourceforge.plantuml.command.regex.IRegex)>(r1, $r2);

        return $r0;
    }

    public net.sourceforge.plantuml.command.Command createMultiLine(boolean)
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand$2 $r0;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand r1;
        net.sourceforge.plantuml.command.regex.IRegex $r2;
        net.sourceforge.plantuml.command.MultilinesStrategy $r3;
        boolean z0;

        r1 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand;

        z0 := @parameter0: boolean;

        $r0 = new net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand$2;

        $r2 = specialinvoke r1.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand: net.sourceforge.plantuml.command.regex.IRegex getRegexConcatMultiLine()>();

        $r3 = <net.sourceforge.plantuml.command.MultilinesStrategy: net.sourceforge.plantuml.command.MultilinesStrategy KEEP_STARTING_QUOTE>;

        specialinvoke $r0.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand$2: void <init>(net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand,net.sourceforge.plantuml.command.regex.IRegex,net.sourceforge.plantuml.command.MultilinesStrategy)>(r1, $r2, $r3);

        return $r0;
    }

    private net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.sequencediagram.SequenceDiagram, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r0;
        net.sourceforge.plantuml.command.regex.RegexResult r1;
        java.lang.String $r2, $r3, $r5, $r6, $r9, $r10, r22, $r23, $r25, $r28, $r30;
        net.sourceforge.plantuml.sequencediagram.Participant r4, r7;
        net.sourceforge.plantuml.command.BlocLines r8;
        int $i0;
        boolean z0, z1, $z2, $z3;
        net.sourceforge.plantuml.cucadiagram.Display $r11, r12;
        net.sourceforge.plantuml.sequencediagram.Note $r13;
        net.sourceforge.plantuml.ISkinParam $r14, $r18, $r20, $r27, $r32;
        net.sourceforge.plantuml.style.StyleBuilder $r15;
        net.sourceforge.plantuml.graphic.color.ColorParser $r17;
        net.sourceforge.plantuml.api.ThemeStyle $r19;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r21;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r24;
        net.sourceforge.plantuml.UrlBuilder $r26;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r29;
        net.sourceforge.plantuml.Url r31;
        net.sourceforge.plantuml.ColorParam[] $r33;
        net.sourceforge.plantuml.ColorParam $r34, $r35;
        net.sourceforge.plantuml.FontParam $r36;
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand r37;
        net.sourceforge.plantuml.graphic.color.Colors r38;
        net.sourceforge.plantuml.cucadiagram.Stereotype r39;
        net.sourceforge.plantuml.command.CommandExecutionResult $r41;

        r37 := @this: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r1 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r8 := @parameter2: net.sourceforge.plantuml.command.BlocLines;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("P1", 0);

        $r3 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r2);

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant getOrCreateParticipant(java.lang.String)>($r3);

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("P2", 0);

        $r6 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r5);

        r7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.sequencediagram.Participant getOrCreateParticipant(java.lang.String)>($r6);

        $i0 = virtualinvoke r8.<net.sourceforge.plantuml.command.BlocLines: int size()>();

        if $i0 <= 0 goto label8;

        $r9 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("VMERGE", 0);

        if $r9 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("PARALLEL", 0);

        if $r10 == null goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z1 = $z3;

        $r11 = virtualinvoke r8.<net.sourceforge.plantuml.command.BlocLines: net.sourceforge.plantuml.cucadiagram.Display toDisplay()>();

        r12 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.cucadiagram.Display manageVariable(net.sourceforge.plantuml.cucadiagram.Display)>($r11);

        $r13 = new net.sourceforge.plantuml.sequencediagram.Note;

        $r14 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r15 = interfaceinvoke $r14.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r13.<net.sourceforge.plantuml.sequencediagram.Note: void <init>(net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.sequencediagram.Participant,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.style.StyleBuilder)>(r4, r7, r12, $r15);

        $r17 = staticinvoke <net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r18 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r38 = virtualinvoke $r17.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r19, r1, $r21);

        r22 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEREO", 0);

        if r22 == null goto label5;

        r39 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String)>(r22);

        $r32 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r36 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam NOTE>;

        $r33 = newarray (net.sourceforge.plantuml.ColorParam)[2];

        $r34 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBackground>;

        $r33[0] = $r34;

        $r35 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam noteBorder>;

        $r33[1] = $r35;

        r38 = virtualinvoke r38.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors applyStereotypeForNote(net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ColorParam[])>(r39, $r32, $r36, $r33);

        virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.Note: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>(r39);

     label5:
        virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.Note: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r38);

        $r23 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STYLE", 0);

        $r24 = staticinvoke <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle getNoteStyle(java.lang.String)>($r23);

        virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.Note: void setNoteStyle(net.sourceforge.plantuml.sequencediagram.NoteStyle)>($r24);

        $r25 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if $r25 == null goto label6;

        $r26 = new net.sourceforge.plantuml.UrlBuilder;

        $r27 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r28 = interfaceinvoke $r27.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r29 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r26.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r28, $r29);

        $r30 = virtualinvoke r1.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        r31 = virtualinvoke $r26.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>($r30);

        virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.Note: void setUrl(net.sourceforge.plantuml.Url)>(r31);

     label6:
        if z1 == 0 goto label7;

        virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.Note: void goParallel()>();

     label7:
        virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.SequenceDiagram: void addNote(net.sourceforge.plantuml.sequencediagram.Note,boolean)>($r13, z0);

     label8:
        $r41 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r41;
    }

    static net.sourceforge.plantuml.command.CommandExecutionResult access$000(net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand, net.sourceforge.plantuml.sequencediagram.SequenceDiagram, net.sourceforge.plantuml.command.regex.RegexResult, net.sourceforge.plantuml.command.BlocLines) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand r0;
        net.sourceforge.plantuml.sequencediagram.SequenceDiagram r1;
        net.sourceforge.plantuml.command.regex.RegexResult r2;
        net.sourceforge.plantuml.command.BlocLines r3;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4;

        r0 := @parameter0: net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.SequenceDiagram;

        r2 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter3: net.sourceforge.plantuml.command.BlocLines;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand: net.sourceforge.plantuml.command.CommandExecutionResult executeInternal(net.sourceforge.plantuml.sequencediagram.SequenceDiagram,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.command.BlocLines)>(r1, r2, r3);

        return $r4;
    }
}
