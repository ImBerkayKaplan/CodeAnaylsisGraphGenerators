public class net.sourceforge.plantuml.command.CommandScale extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.command.CommandScale r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.command.CommandScale;

        $r1 = staticinvoke <net.sourceforge.plantuml.command.CommandScale: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r9;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r14;
        net.sourceforge.plantuml.command.regex.RegexOptional $r7;
        net.sourceforge.plantuml.command.regex.RegexConcat $r8, $r15;

        $r0 = class "Lnet/sourceforge/plantuml/command/CommandScale;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("scale");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SCALE", "([0-9.]+)");

        $r2[3] = $r6;

        $r7 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r9[0] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("/");

        $r9[1] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r9[2] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DIV", "([0-9.]+)");

        $r9[3] = $r13;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r9);

        specialinvoke $r7.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r8);

        $r2[4] = $r7;

        $r14 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[5] = $r14;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r15;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.AbstractPSystem, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, $r2, $r6;
        byte $b0, $b1;
        net.sourceforge.plantuml.AbstractPSystem r3;
        net.sourceforge.plantuml.ScaleSimple $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5, $r7, $r8;
        double d0, d1;
        net.sourceforge.plantuml.command.CommandScale r9;
        net.sourceforge.plantuml.LineLocation r10;

        r9 := @this: net.sourceforge.plantuml.command.CommandScale;

        r3 := @parameter0: net.sourceforge.plantuml.AbstractPSystem;

        r10 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SCALE", 0);

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        $b0 = d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r8 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Scale cannot be zero");

        return $r8;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIV", 0);

        if $r2 == null goto label3;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("DIV", 0);

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r6);

        $b1 = d0 cmpl 0.0;

        if $b1 != 0 goto label2;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Scale cannot be zero");

        return $r7;

     label2:
        d1 = d1 / d0;

     label3:
        $r4 = new net.sourceforge.plantuml.ScaleSimple;

        specialinvoke $r4.<net.sourceforge.plantuml.ScaleSimple: void <init>(double)>(d1);

        virtualinvoke r3.<net.sourceforge.plantuml.AbstractPSystem: void setScale(net.sourceforge.plantuml.Scale)>($r4);

        $r5 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r5;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.CommandScale r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.AbstractPSystem $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.command.CommandScale;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.AbstractPSystem) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.command.CommandScale: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.AbstractPSystem,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
