public class net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText extends net.sourceforge.plantuml.eps.EpsGraphicsMacro
{

    public void <init>()
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText r0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacro: void <init>()>();

        return;
    }

    public void drawText(java.lang.String, net.sourceforge.plantuml.graphic.FontConfiguration, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r24, $r25;
        double d0, d1;
        java.lang.String $r2, $r5, $r8, $r14, $r19, r22, $r23, $r26;
        java.awt.Color $r9;
        net.sourceforge.plantuml.graphic.FontConfiguration r10;
        net.sourceforge.plantuml.ugraphic.UFont r11;
        int i0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText;

        r22 := @parameter0: java.lang.String;

        r10 := @parameter1: net.sourceforge.plantuml.graphic.FontConfiguration;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: void append(java.lang.String,boolean)>($r8, 1);

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: java.awt.Color getColor()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: void appendColor(java.awt.Color)>($r9);

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.UFont getFont()>();

        i0 = virtualinvoke r11.<net.sourceforge.plantuml.ugraphic.UFont: int getSize()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r14 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: java.lang.String getPSName(net.sourceforge.plantuml.graphic.FontConfiguration)>(r10);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" findfont ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scalefont setfont");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: void append(java.lang.String,boolean)>($r19, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: void append(java.lang.String,boolean)>("100 -100 scale", 1);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r23 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: java.lang.String getTextAsEps(java.lang.String)>(r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") show");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: void append(java.lang.String,boolean)>($r26, 0);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: void append(java.lang.String,boolean)>(".01 -.01 scale", 1);

        return;
    }

    private java.lang.String getPSName(net.sourceforge.plantuml.graphic.FontConfiguration)
    {
        net.sourceforge.plantuml.graphic.FontConfiguration r0;
        net.sourceforge.plantuml.ugraphic.UFont r1;
        java.lang.StringBuilder $r2;
        net.sourceforge.plantuml.ugraphic.UFontContext $r3;
        java.lang.String $r4, $r6;
        net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText r7;

        r7 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.FontConfiguration;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.UFont getFont()>();

        $r2 = new java.lang.StringBuilder;

        $r3 = <net.sourceforge.plantuml.ugraphic.UFontContext: net.sourceforge.plantuml.ugraphic.UFontContext EPS>;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String getFamily(net.sourceforge.plantuml.ugraphic.UFontContext)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String getTextAsEps(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r9, $r10, $r12;
        java.lang.String r2, $r3, r7, $r11, $r13;
        int $i0, $i2, i4, i5;
        char c1;
        byte $b3;
        java.io.UnsupportedEncodingException $r20;
        net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText r22;
        byte[] r23;

        r22 := @this: net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i5 = 0;

     label01:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i5 >= $i0 goto label12;

        c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        if c1 != 92 goto label02;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\\\");

        goto label11;

     label02:
        if c1 != 40 goto label03;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\(");

        goto label11;

     label03:
        if c1 != 41 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\)");

        goto label11;

     label04:
        if c1 >= 32 goto label05;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        goto label11;

     label05:
        if c1 < 32 goto label06;

        if c1 > 127 goto label06;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        goto label11;

     label06:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        r23 = virtualinvoke r7.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $i2 = lengthof r23;

        if $i2 != 1 goto label08;

        $b3 = r23[0];

        i4 = $b3 & 255;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toOctalString(int)>(i4);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label09;

     label08:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

     label09:
        goto label11;

     label10:
        $r20 := @caughtexception;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

     label11:
        i5 = i5 + 1;

        goto label01;

     label12:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

        catch java.io.UnsupportedEncodingException from label07 to label09 with label10;
    }
}
