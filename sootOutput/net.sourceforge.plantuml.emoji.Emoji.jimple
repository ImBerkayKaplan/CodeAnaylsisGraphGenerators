public class net.sourceforge.plantuml.emoji.Emoji extends java.lang.Object
{
    private static final java.util.Map ALL;
    private final java.util.List data;
    private int minGray;
    private int maxGray;
    private final java.lang.String unicode;
    private final java.lang.String shortcut;

    public static java.util.Map getAll()
    {
        java.util.TreeMap $r0;
        java.util.Map $r1, $r2;

        $r0 = new java.util.TreeMap;

        $r1 = <net.sourceforge.plantuml.emoji.Emoji: java.util.Map ALL>;

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Map)>($r1);

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r2;
    }

    private void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.util.ArrayList $r1;
        int i0, $i1;
        java.lang.String $r2, $r3, r8;
        java.util.Map $r4, $r6;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r8 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.emoji.Emoji: java.util.List data> = $r1;

        r0.<net.sourceforge.plantuml.emoji.Emoji: int minGray> = 999;

        r0.<net.sourceforge.plantuml.emoji.Emoji: int maxGray> = -1;

        i0 = virtualinvoke r8.<java.lang.String: int indexOf(int)>(59);

        if i0 != -1 goto label1;

        r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String shortcut> = null;

        goto label2;

     label1:
        $i1 = i0 + 1;

        $r2 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i1);

        r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String shortcut> = $r2;

        $r4 = <net.sourceforge.plantuml.emoji.Emoji: java.util.Map ALL>;

        $r3 = r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String shortcut>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r0);

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String unicode> = r8;

        $r6 = <net.sourceforge.plantuml.emoji.Emoji: java.util.Map ALL>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r0);

        return;
    }

    public static java.lang.String pattern()
    {
        java.lang.StringBuilder $r0;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0, $z1;
        java.lang.String $r6, r8, $r9;
        java.lang.Object $r7;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("\\<(#\\w+)?:(");

        $r2 = <net.sourceforge.plantuml.emoji.Emoji: java.util.Map ALL>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("(");

        if $z1 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):\\>");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static net.sourceforge.plantuml.emoji.Emoji retrieve(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Map $r1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.emoji.Emoji $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = <net.sourceforge.plantuml.emoji.Emoji: java.util.Map ALL>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (net.sourceforge.plantuml.emoji.Emoji) $r3;

        return $r4;
    }

    private java.lang.String extractData(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String r1, $r4, r6, $r8;
        java.util.regex.Pattern r5;
        java.util.regex.Matcher r7;
        boolean $z0;
        net.sourceforge.plantuml.emoji.Emoji r9;

        r9 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"([^\"]+)\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r4);

        r7 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z0 = virtualinvoke r7.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r7.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        return $r8;

     label1:
        return null;
    }

    private synchronized void loadIfNeed() throws java.io.IOException
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.util.List $r1, $r23;
        int $i0;
        java.io.BufferedReader $r2;
        java.io.InputStreamReader $r3;
        java.lang.StringBuilder $r4, $r7, $r8, $r14, $r16, $r17;
        java.lang.Class $r5;
        java.lang.String $r6, $r9, r13, $r18, r21;
        java.io.InputStream $r10;
        java.util.regex.Matcher r12;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7;
        java.io.PrintStream $r15;
        java.lang.Throwable $r19, $r20;
        java.util.regex.Pattern r22;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        $r1 = r0.<net.sourceforge.plantuml.emoji.Emoji: java.util.List data>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label01;

        return;

     label01:
        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r5 = class "Lnet/sourceforge/plantuml/emoji/data/Dummy;";

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String unicode>;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".svg");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r9);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r10);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

     label02:
        r21 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        r22 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\<[^<>]+\\>");

        r12 = virtualinvoke r22.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r21);

     label03:
        $z0 = virtualinvoke r12.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label07;

        r13 = virtualinvoke r12.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $z1 = virtualinvoke r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("<path");

        if $z1 != 0 goto label04;

        $z3 = virtualinvoke r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("<g ");

        if $z3 != 0 goto label04;

        $z4 = virtualinvoke r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("<g>");

        if $z4 != 0 goto label04;

        $z5 = virtualinvoke r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("</g>");

        if $z5 != 0 goto label04;

        $z6 = virtualinvoke r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("<circle ");

        if $z6 != 0 goto label04;

        $z7 = virtualinvoke r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("<ellipse ");

        if $z7 == 0 goto label05;

     label04:
        $r23 = r0.<net.sourceforge.plantuml.emoji.Emoji: java.util.List data>;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(r13);

        goto label06;

     label05:
        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("???=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label06:
        goto label03;

     label07:
        virtualinvoke $r2.<java.io.BufferedReader: void close()>();

        goto label13;

     label08:
        $r20 := @caughtexception;

     label09:
        virtualinvoke $r2.<java.io.BufferedReader: void close()>();

     label10:
        goto label12;

     label11:
        $r19 := @caughtexception;

        virtualinvoke $r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

     label12:
        throw $r20;

     label13:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        net.sourceforge.plantuml.emoji.UGraphicWithScale $r1, r18, r23;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        double d0;
        net.sourceforge.plantuml.ugraphic.color.HColor r4;
        java.util.ArrayList $r5;
        java.util.List $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object $r7, $r14;
        java.lang.String r8, $r13;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.io.PrintStream $r10;
        int $i0;
        java.lang.Throwable $r15;
        java.io.IOException $r16;
        java.util.Iterator r22;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        r4 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

     label01:
        specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: void loadIfNeed()>();

     label02:
        goto label04;

     label03:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.io.IOException: void printStackTrace()>();

     label04:
        $r1 = new net.sourceforge.plantuml.emoji.UGraphicWithScale;

        specialinvoke $r1.<net.sourceforge.plantuml.emoji.UGraphicWithScale: void <init>(net.sourceforge.plantuml.ugraphic.UGraphic,double)>(r2, d0);

        r18 = $r1;

        entermonitor r0;

     label05:
        if r4 == null goto label06;

        $i0 = r0.<net.sourceforge.plantuml.emoji.Emoji: int maxGray>;

        if $i0 != -1 goto label06;

        specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: void computeMinMaxGray()>();

     label06:
        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r15 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r15;

     label10:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<net.sourceforge.plantuml.emoji.Emoji: java.util.List data>;

        r22 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label19;

        $r7 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $z1 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("<path ");

        if $z1 == 0 goto label12;

        specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: void drawPath(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r18, r8, r4);

        goto label18;

     label12:
        $z2 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("</g>");

        if $z2 == 0 goto label13;

        $r14 = interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>(0);

        r18 = (net.sourceforge.plantuml.emoji.UGraphicWithScale) $r14;

        goto label18;

     label13:
        $z3 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("<g>");

        if $z3 == 0 goto label14;

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(0, r18);

        goto label18;

     label14:
        $z4 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("<g ");

        if $z4 == 0 goto label15;

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(0, r18);

        r23 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyFill(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r18, r8, r4);

        r18 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyTransform(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String)>(r23, r8);

        goto label18;

     label15:
        $z5 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("<circle ");

        if $z5 == 0 goto label16;

        specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: void drawCircle(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r18, r8, r4);

        goto label18;

     label16:
        $z6 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("<ellipse ");

        if $z6 == 0 goto label17;

        specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: void drawEllipse(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r18, r8, r4);

        goto label18;

     label17:
        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**?=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label18:
        goto label11;

     label19:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void computeMinMaxGray()
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r3;
        java.lang.String r4;
        net.sourceforge.plantuml.ugraphic.color.HColor r5;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        $r1 = r0.<net.sourceforge.plantuml.emoji.Emoji: java.util.List data>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("<path ");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("<g ");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("<circle ");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("<ellipse ");

        if $z4 == 0 goto label3;

     label2:
        r5 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.ugraphic.color.HColor justExtractColor(java.lang.String)>(r4);

        if r5 == null goto label3;

        i0 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: int getGray(net.sourceforge.plantuml.ugraphic.color.HColor)>(r5);

        $i1 = r0.<net.sourceforge.plantuml.emoji.Emoji: int minGray>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        r0.<net.sourceforge.plantuml.emoji.Emoji: int minGray> = $i2;

        $i3 = r0.<net.sourceforge.plantuml.emoji.Emoji: int maxGray>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, i0);

        r0.<net.sourceforge.plantuml.emoji.Emoji: int maxGray> = $i4;

     label3:
        goto label1;

     label4:
        return;
    }

    private int getGray(net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.ugraphic.color.ColorChangerMonochrome $r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1;
        java.awt.Color r2;
        int $i0;
        net.sourceforge.plantuml.emoji.Emoji r3;

        r3 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r0 = new net.sourceforge.plantuml.ugraphic.color.ColorChangerMonochrome;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.color.ColorChangerMonochrome: void <init>()>();

        r2 = virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.color.ColorChangerMonochrome: java.awt.Color getChangedColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r1);

        $i0 = virtualinvoke r2.<java.awt.Color: int getGreen()>();

        return $i0;
    }

    private net.sourceforge.plantuml.emoji.UGraphicWithScale applyFill(net.sourceforge.plantuml.emoji.UGraphicWithScale, java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.lang.String r1, r2, r9, r12;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r8, r15;
        net.sourceforge.plantuml.emoji.UGraphicWithScale $r4, r11, r13, r14;
        net.sourceforge.plantuml.ugraphic.UBackground $r5, $r7;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r6;
        net.sourceforge.plantuml.ugraphic.UStroke $r10;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r11 := @parameter0: net.sourceforge.plantuml.emoji.UGraphicWithScale;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("fill", r1);

        if r2 != null goto label1;

        return r11;

     label1:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z0 == 0 goto label4;

        r12 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("stroke", r1);

        if r12 != null goto label2;

        return r11;

     label2:
        $r6 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.color.HColorNone: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r13 = virtualinvoke r11.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        r8 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.ugraphic.color.HColor getTrueColor(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r12, r3);

        r14 = virtualinvoke r13.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale apply(net.sourceforge.plantuml.ugraphic.UChange)>(r8);

        r9 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("stroke-width", r1);

        if r9 == null goto label3;

        $r10 = new net.sourceforge.plantuml.ugraphic.UStroke;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r9);

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>($d0);

        r14 = virtualinvoke r14.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

     label3:
        goto label5;

     label4:
        r15 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.ugraphic.color.HColor getTrueColor(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r2, r3);

        $r4 = virtualinvoke r11.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale apply(net.sourceforge.plantuml.ugraphic.UChange)>(r15);

        $r5 = interfaceinvoke r15.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r14 = virtualinvoke $r4.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

     label5:
        return r14;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor justExtractColor(java.lang.String)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.lang.String r1, r2, r4;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r5;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("fill", r1);

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z0 == 0 goto label3;

        r4 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("stroke", r1);

        if r4 != null goto label2;

        return null;

     label2:
        r3 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.ugraphic.color.HColor getTrueColor(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r4, null);

        return r3;

     label3:
        r5 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.ugraphic.color.HColor getTrueColor(java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r2, null);

        return r5;
    }

    private net.sourceforge.plantuml.ugraphic.color.HColor getTrueColor(java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r0;
        java.lang.String r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2, r4, $r7;
        net.sourceforge.plantuml.ugraphic.color.HColorSimple r3, r5, $r8;
        boolean $z0;
        net.sourceforge.plantuml.emoji.Emoji r6;
        int $i0, $i1;
        double $d0, $d1;

        r6 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        $r0 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        $r2 = virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(java.lang.String)>(r1);

        r3 = (net.sourceforge.plantuml.ugraphic.color.HColorSimple) $r2;

        if r4 != null goto label1;

        return r3;

     label1:
        r5 = (net.sourceforge.plantuml.ugraphic.color.HColorSimple) r4;

        $z0 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: boolean isGray()>();

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: net.sourceforge.plantuml.ugraphic.color.HColorSimple asMonochrome()>();

        return $r8;

     label2:
        $i0 = r6.<net.sourceforge.plantuml.emoji.Emoji: int minGray>;

        $d1 = (double) $i0;

        $i1 = r6.<net.sourceforge.plantuml.emoji.Emoji: int maxGray>;

        $d0 = (double) $i1;

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.color.HColorSimple: net.sourceforge.plantuml.ugraphic.color.HColor asMonochrome(net.sourceforge.plantuml.ugraphic.color.HColorSimple,double,double)>(r5, $d1, $d0);

        return $r7;
    }

    private void drawCircle(net.sourceforge.plantuml.emoji.UGraphicWithScale, java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.lang.String r1, $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        java.awt.geom.AffineTransform $r3, $r4, $r5, $r6;
        double d0, d1, d2, d3, $d4, d5, $d6, d7, $d8, d9, $d10, d11, $d12, $d13, $d14, $d15, $d16, $d17;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11;
        net.sourceforge.plantuml.emoji.UGraphicWithScale $r13, r15, r16, r17;
        net.sourceforge.plantuml.ugraphic.UEllipse $r14;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r15 := @parameter0: net.sourceforge.plantuml.emoji.UGraphicWithScale;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r16 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyFill(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r15, r1, r2);

        r17 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyTransform(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String)>(r16, r1);

        $r3 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getScaleX()>();

        $r4 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d1 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getScaleY()>();

        $r5 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d2 = virtualinvoke $r5.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $r6 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d3 = virtualinvoke $r6.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("cx", r1);

        $d4 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r7);

        d5 = $d4 * d0;

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("cy", r1);

        $d6 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

        d7 = $d6 * d1;

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("r", r1);

        $d8 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        d9 = $d8 * d0;

        $r10 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("r", r1);

        $d10 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r10);

        d11 = $d10 * d1;

        $r11 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d12 = d2 + d5;

        $d15 = $d12 - d9;

        $d13 = d3 + d7;

        $d14 = $d13 - d11;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d15, $d14);

        $r13 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        $r14 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d17 = d9 * 2.0;

        $d16 = d11 * 2.0;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d17, $d16);

        virtualinvoke $r13.<net.sourceforge.plantuml.emoji.UGraphicWithScale: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r14);

        return;
    }

    private void drawEllipse(net.sourceforge.plantuml.emoji.UGraphicWithScale, java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.lang.String r1, $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        java.awt.geom.AffineTransform $r3, $r4, $r5, $r6;
        double d0, d1, d2, d3, $d4, d5, $d6, d7, $d8, d9, $d10, d11, $d12, $d13, $d14, $d15, $d16, $d17;
        net.sourceforge.plantuml.ugraphic.UTranslate $r11;
        net.sourceforge.plantuml.emoji.UGraphicWithScale $r13, r15, r16, r17;
        net.sourceforge.plantuml.ugraphic.UEllipse $r14;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r15 := @parameter0: net.sourceforge.plantuml.emoji.UGraphicWithScale;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r16 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyFill(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r15, r1, r2);

        r17 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyTransform(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String)>(r16, r1);

        $r3 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getScaleX()>();

        $r4 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d1 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getScaleY()>();

        $r5 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d2 = virtualinvoke $r5.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $r6 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        d3 = virtualinvoke $r6.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("cx", r1);

        $d4 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r7);

        d5 = $d4 * d0;

        $r8 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("cy", r1);

        $d6 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

        d7 = $d6 * d1;

        $r9 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("rx", r1);

        $d8 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        d9 = $d8 * d0;

        $r10 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("ry", r1);

        $d10 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r10);

        d11 = $d10 * d1;

        $r11 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d12 = d2 + d5;

        $d15 = $d12 - d9;

        $d13 = d3 + d7;

        $d14 = $d13 - d11;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d15, $d14);

        $r13 = virtualinvoke r17.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        $r14 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d17 = d9 * 2.0;

        $d16 = d11 * 2.0;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d17, $d16);

        virtualinvoke $r13.<net.sourceforge.plantuml.emoji.UGraphicWithScale: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r14);

        return;
    }

    private void drawPath(net.sourceforge.plantuml.emoji.UGraphicWithScale, java.lang.String, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1;
        int i0, $i1, i2, $i3;
        java.lang.String r2, r8, r9;
        net.sourceforge.plantuml.openiconic.SvgPath $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic $r5;
        java.awt.geom.AffineTransform $r6;
        net.sourceforge.plantuml.emoji.UGraphicWithScale r7, r10, r11;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r7 := @parameter0: net.sourceforge.plantuml.emoji.UGraphicWithScale;

        r8 := @parameter1: java.lang.String;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("id=\"", "ID=\"");

        r10 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyFill(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String,net.sourceforge.plantuml.ugraphic.color.HColor)>(r7, r9, r1);

        r11 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyTransform(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String)>(r10, r9);

        i0 = virtualinvoke r9.<java.lang.String: int indexOf(java.lang.String)>("d=\"");

        $i1 = i0 + 3;

        i2 = virtualinvoke r9.<java.lang.String: int indexOf(int,int)>(34, $i1);

        $i3 = i0 + 3;

        r2 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>($i3, i2);

        $r3 = new net.sourceforge.plantuml.openiconic.SvgPath;

        specialinvoke $r3.<net.sourceforge.plantuml.openiconic.SvgPath: void <init>(java.lang.String)>(r2);

        $r5 = virtualinvoke r11.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.ugraphic.UGraphic getUg()>();

        $r6 = virtualinvoke r11.<net.sourceforge.plantuml.emoji.UGraphicWithScale: java.awt.geom.AffineTransform getAffineTransform()>();

        virtualinvoke $r3.<net.sourceforge.plantuml.openiconic.SvgPath: void drawMe(net.sourceforge.plantuml.ugraphic.UGraphic,java.awt.geom.AffineTransform)>($r5, $r6);

        return;
    }

    private net.sourceforge.plantuml.emoji.UGraphicWithScale applyTransform(net.sourceforge.plantuml.emoji.UGraphicWithScale, java.lang.String)
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.lang.String r1, r2;
        boolean $z0, $z1;
        double[] r3;
        net.sourceforge.plantuml.ugraphic.UTranslate r4;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.emoji.UGraphicWithScale $r5, $r6, $r7, r8, r9;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r8 := @parameter0: net.sourceforge.plantuml.emoji.UGraphicWithScale;

        r1 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String extractData(java.lang.String,java.lang.String)>("transform", r1);

        if r2 != null goto label1;

        return r8;

     label1:
        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("rotate(");

        if $z0 == 0 goto label2;

        $r7 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyRotate(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String)>(r8, r2);

        return $r7;

     label2:
        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("matrix(");

        if $z1 == 0 goto label3;

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.emoji.UGraphicWithScale applyMatrix(net.sourceforge.plantuml.emoji.UGraphicWithScale,java.lang.String)>(r8, r2);

        return $r6;

     label3:
        r3 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: double[] getScale(java.lang.String)>(r2);

        r4 = specialinvoke r0.<net.sourceforge.plantuml.emoji.Emoji: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate(java.lang.String)>(r2);

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        r9 = virtualinvoke r8.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale applyTranslate(double,double)>($d0, $d1);

        $d3 = r3[0];

        $d2 = r3[1];

        $r5 = virtualinvoke r9.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale applyScale(double,double)>($d3, $d2);

        return $r5;
    }

    private net.sourceforge.plantuml.emoji.UGraphicWithScale applyMatrix(net.sourceforge.plantuml.emoji.UGraphicWithScale, java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.util.regex.Matcher r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.io.PrintStream $r4;
        double d0, d1, d2, d3, d4, d5;
        net.sourceforge.plantuml.emoji.Emoji r14;
        net.sourceforge.plantuml.emoji.UGraphicWithScale r15;

        r14 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r15 := @parameter0: net.sourceforge.plantuml.emoji.UGraphicWithScale;

        r1 := @parameter1: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("matrix\\(([-.0-9]+)[ ,]+([-.0-9]+)[ ,]+([-.0-9]+)[ ,]+([-.0-9]+)[ ,]+([-.0-9]+)[ ,]+([-.0-9]+)\\)");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

        $r9 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        $r10 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r10);

        $r11 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r11);

        $r12 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        d4 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r12);

        $r13 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(6);

        d5 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);

        r15 = virtualinvoke r15.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale applyMatrix(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5);

        goto label2;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label2:
        return r15;
    }

    private net.sourceforge.plantuml.emoji.UGraphicWithScale applyRotate(net.sourceforge.plantuml.emoji.UGraphicWithScale, java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, $r7, $r8, $r9, $r10;
        java.util.regex.Matcher r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.io.PrintStream $r4;
        double d0, d1, d2;
        net.sourceforge.plantuml.emoji.Emoji r11;
        net.sourceforge.plantuml.emoji.UGraphicWithScale r12;

        r11 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r12 := @parameter0: net.sourceforge.plantuml.emoji.UGraphicWithScale;

        r1 := @parameter1: java.lang.String;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("rotate\\(([-.0-9]+)[ ,]+([-.0-9]+)[ ,]+([-.0-9]+)\\)");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

        $r9 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        $r10 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r10);

        r12 = virtualinvoke r12.<net.sourceforge.plantuml.emoji.UGraphicWithScale: net.sourceforge.plantuml.emoji.UGraphicWithScale applyRotate(double,double,double)>(d0, d1, d2);

        goto label2;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label2:
        return r12;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getTranslate(java.lang.String)
    {
        java.util.regex.Pattern r0, r3;
        java.lang.String r1, $r5, $r6, $r7, $r8;
        java.util.regex.Matcher r2, r4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.emoji.Emoji r9;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;

        r9 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r1 := @parameter0: java.lang.String;

        d0 = 0.0;

        d1 = 0.0;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("translate\\(([-.0-9]+)[ ,]+([-.0-9]+)\\)");

        r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r7);

        $r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

        goto label2;

     label1:
        r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("translate\\(([-.0-9]+)\\)");

        r4 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        $r6 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r6);

     label2:
        $r10 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, d1);

        return $r10;
    }

    private double[] getScale(java.lang.String)
    {
        double[] $r0;
        java.util.regex.Pattern r2, r5;
        java.lang.String r3, $r7, $r8, $r9;
        java.util.regex.Matcher r4, r6;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.emoji.Emoji r10;

        r10 := @this: net.sourceforge.plantuml.emoji.Emoji;

        r3 := @parameter0: java.lang.String;

        $r0 = newarray (double)[2];

        $r0[0] = 1.0;

        $r0[1] = 1.0;

        r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("scale\\(([-.0-9]+)\\)");

        r4 = virtualinvoke r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        $r0[0] = $d2;

        $d3 = $r0[0];

        $r0[1] = $d3;

        goto label2;

     label1:
        r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("scale\\(([-.0-9]+)[ ,]+([-.0-9]+)\\)");

        r6 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z1 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r7);

        $r0[0] = $d0;

        $r8 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

        $r0[1] = $d1;

     label2:
        return $r0;
    }

    public java.lang.String getShortcut()
    {
        net.sourceforge.plantuml.emoji.Emoji r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.emoji.Emoji;

        $r1 = r0.<net.sourceforge.plantuml.emoji.Emoji: java.lang.String shortcut>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Class $r1;
        java.io.InputStream r2;
        java.io.BufferedReader $r3;
        java.io.InputStreamReader $r4;
        java.lang.String $r5;
        net.sourceforge.plantuml.emoji.Emoji $r6;
        java.io.IOException $r7;
        java.lang.Throwable $r8, $r10;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <net.sourceforge.plantuml.emoji.Emoji: java.util.Map ALL> = $r0;

        $r1 = class "Lnet/sourceforge/plantuml/emoji/data/Dummy;";

        r2 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("emoji.txt");

     label01:
        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

     label02:
        $r5 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r5 == null goto label03;

        $r6 = new net.sourceforge.plantuml.emoji.Emoji;

        specialinvoke $r6.<net.sourceforge.plantuml.emoji.Emoji: void <init>(java.lang.String)>($r5);

        goto label02;

     label03:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

        goto label09;

     label04:
        $r10 := @caughtexception;

     label05:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label08:
        throw $r10;

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.io.IOException from label01 to label09 with label10;
    }
}
