public class net.sourceforge.plantuml.version.LicenseInfo extends java.lang.Object
{
    private static final java.util.prefs.Preferences prefs;
    public static final net.sourceforge.plantuml.version.LicenseInfo NONE;
    private final net.sourceforge.plantuml.version.LicenseType type;
    private final long generationDate;
    private final long expirationDate;
    private final java.lang.String owner;
    private final java.lang.String context;
    private final byte[] sha;
    private static net.sourceforge.plantuml.version.LicenseInfo cache;

    public void <init>(net.sourceforge.plantuml.version.LicenseType, long, long, java.lang.String, java.lang.String, byte[])
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        net.sourceforge.plantuml.version.LicenseType r1;
        long l0, l1;
        java.lang.String r2, r3;
        byte[] r4;

        r0 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        r1 := @parameter0: net.sourceforge.plantuml.version.LicenseType;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseType type> = r1;

        r0.<net.sourceforge.plantuml.version.LicenseInfo: long generationDate> = l0;

        r0.<net.sourceforge.plantuml.version.LicenseInfo: long expirationDate> = l1;

        r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String owner> = r2;

        r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String context> = r3;

        r0.<net.sourceforge.plantuml.version.LicenseInfo: byte[] sha> = r4;

        return;
    }

    public static void persistMe(java.lang.String) throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.Preferences $r0, $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = <net.sourceforge.plantuml.version.LicenseInfo: java.util.prefs.Preferences prefs>;

        virtualinvoke $r0.<java.util.prefs.Preferences: void sync()>();

        $r2 = <net.sourceforge.plantuml.version.LicenseInfo: java.util.prefs.Preferences prefs>;

        virtualinvoke $r2.<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>("license", r1);

        return;
    }

    public static synchronized net.sourceforge.plantuml.version.LicenseInfo retrieveQuick()
    {
        net.sourceforge.plantuml.version.LicenseInfo $r0, $r1, $r2, $r3, $r4;

        $r0 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveDistributor()>();

        <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache> = $r4;

     label1:
        $r1 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        if $r1 != null goto label2;

        $r3 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveNamedSlow()>();

        <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache> = $r3;

     label2:
        $r2 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        return $r2;
    }

    public static boolean retrieveNamedOrDistributorQuickIsValid()
    {
        net.sourceforge.plantuml.version.LicenseInfo $r0;
        boolean $z0;

        $r0 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveQuick()>();

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.version.LicenseInfo: boolean isValid()>();

        return $z0;
    }

    public static synchronized net.sourceforge.plantuml.version.LicenseInfo retrieveNamedSlow()
    {
        net.sourceforge.plantuml.version.LicenseInfo $r0, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.prefs.Preferences $r1;
        java.lang.String r2, $r22;
        int $i0;
        java.util.Collection $r3;
        java.util.Iterator r4;
        java.lang.Object $r6;
        net.sourceforge.plantuml.security.SFile r7;
        java.io.IOException $r18;
        java.lang.StringBuilder $r19, $r20, $r21;

        $r0 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo NONE>;

        <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache> = $r0;

        $z0 = <net.sourceforge.plantuml.OptionFlags: boolean ALLOW_INCLUDE>;

        if $z0 != 0 goto label01;

        $r17 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        return $r17;

     label01:
        $r1 = <net.sourceforge.plantuml.version.LicenseInfo: java.util.prefs.Preferences prefs>;

        r2 = virtualinvoke $r1.<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>("license", "");

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label02;

        $r12 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveNamed(java.lang.String)>(r2);

        $r13 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        $r14 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo setIfValid(net.sourceforge.plantuml.version.LicenseInfo,net.sourceforge.plantuml.version.LicenseInfo)>($r12, $r13);

        <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache> = $r14;

        $r15 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        $z4 = virtualinvoke $r15.<net.sourceforge.plantuml.version.LicenseInfo: boolean isValid()>();

        if $z4 == 0 goto label02;

        $r16 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        return $r16;

     label02:
        $r3 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: java.util.Collection fileCandidates()>();

        r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.security.SFile) $r6;

     label04:
        $z1 = virtualinvoke r7.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z1 == 0 goto label08;

        $z2 = virtualinvoke r7.<net.sourceforge.plantuml.security.SFile: boolean canRead()>();

        if $z2 == 0 goto label08;

        r23 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieve(net.sourceforge.plantuml.security.SFile)>(r7);

        if r23 != null goto label06;

     label05:
        return null;

     label06:
        $r8 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        $r9 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo setIfValid(net.sourceforge.plantuml.version.LicenseInfo,net.sourceforge.plantuml.version.LicenseInfo)>(r23, $r8);

        <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache> = $r9;

        $r10 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        $z3 = virtualinvoke $r10.<net.sourceforge.plantuml.version.LicenseInfo: boolean isValid()>();

        if $z3 == 0 goto label08;

        $r11 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

     label07:
        return $r11;

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r22);

     label10:
        goto label03;

     label11:
        $r5 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo cache>;

        return $r5;

        catch java.io.IOException from label04 to label05 with label09;
        catch java.io.IOException from label06 to label07 with label09;
    }

    public static net.sourceforge.plantuml.version.LicenseInfo retrieveNamed(java.lang.String)
    {
        java.lang.String r0, $r7, r8;
        int $i0;
        boolean $z0;
        byte[] $r1;
        net.sourceforge.plantuml.version.LicenseInfo $r2, $r10;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 99 goto label4;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^[0-9a-z]+$");

        if $z0 == 0 goto label4;

     label1:
        $r1 = staticinvoke <net.sourceforge.plantuml.version.PLSSignature: byte[] signature()>();

        r8 = staticinvoke <net.sourceforge.plantuml.SignatureUtils: java.lang.String toHexString(byte[])>($r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.version.PLSSignature: net.sourceforge.plantuml.version.LicenseInfo retrieveNamed(java.lang.String,java.lang.String,boolean)>(r8, r0, 1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error retrieving license info");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r7);

     label4:
        $r10 = <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo NONE>;

        return $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.awt.image.BufferedImage retrieveDistributorImage(net.sourceforge.plantuml.version.LicenseInfo)
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        net.sourceforge.plantuml.version.LicenseType $r1, $r2;
        java.lang.String $r3, $r5;
        byte[] $r4, r13;
        boolean $z0;
        java.lang.Class $r6;
        java.io.InputStream r7;
        java.awt.image.BufferedImage r8;
        java.lang.Exception $r10;
        java.lang.Throwable $r11;

        r0 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseType getLicenseType()>();

        $r2 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType DISTRIBUTOR>;

        if $r1 == $r2 goto label01;

        return null;

     label01:
        r13 = staticinvoke <net.sourceforge.plantuml.version.PLSSignature: byte[] retrieveDistributorImageSignature()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.SignatureUtils: java.lang.String toHexString(byte[])>(r13);

        $r4 = r0.<net.sourceforge.plantuml.version.LicenseInfo: byte[] sha>;

        $r5 = staticinvoke <net.sourceforge.plantuml.SignatureUtils: java.lang.String toHexString(byte[])>($r4);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label03;

     label02:
        return null;

     label03:
        $r6 = class "Lnet/sourceforge/plantuml/version/PSystemVersion;";

        r7 = virtualinvoke $r6.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/distributor.png");

        if r7 != null goto label05;

     label04:
        return null;

     label05:
        r8 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r7);

     label06:
        virtualinvoke r7.<java.io.InputStream: void close()>();

     label07:
        return r8;

     label08:
        $r11 := @caughtexception;

     label09:
        virtualinvoke r7.<java.io.InputStream: void close()>();

        throw $r11;

     label10:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label07 with label10;
        catch java.lang.Exception from label08 to label10 with label10;
    }

    public static net.sourceforge.plantuml.version.LicenseInfo retrieveDistributor()
    {
        java.lang.Class $r0;
        java.io.InputStream r1;
        java.io.BufferedReader $r2;
        java.io.InputStreamReader $r3;
        java.lang.String r4, $r11, $r12;
        net.sourceforge.plantuml.version.LicenseInfo r5;
        java.lang.Throwable $r6;
        java.lang.StackTraceElement[] r9;
        int i0, i1;
        java.lang.StackTraceElement r10;
        boolean $z0;
        java.lang.Exception $r13;

        $r0 = class "Lnet/sourceforge/plantuml/version/PSystemVersion;";

        r1 = virtualinvoke $r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/distributor.txt");

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        r4 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        virtualinvoke $r2.<java.io.BufferedReader: void close()>();

        r5 = staticinvoke <net.sourceforge.plantuml.version.PLSSignature: net.sourceforge.plantuml.version.LicenseInfo retrieveDistributor(java.lang.String)>(r4);

        $r6 = new java.lang.Throwable;

        specialinvoke $r6.<java.lang.Throwable: void <init>()>();

        virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        r9 = virtualinvoke $r6.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r10 = r9[i1];

        $r11 = virtualinvoke r10.<java.lang.StackTraceElement: java.lang.String toString()>();

        $r12 = r5.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String context>;

        $z0 = virtualinvoke $r11.<java.lang.String: boolean contains(java.lang.CharSequence)>($r12);

        if $z0 == 0 goto label4;

     label3:
        return r5;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return null;

     label6:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static java.util.Collection fileCandidates()
    {
        java.util.TreeSet $r0;
        java.lang.String r2, $r3, r6;
        java.lang.String[] r4;
        int i0, i1;
        net.sourceforge.plantuml.security.SFile $r7, $r8, r9;
        boolean $z0, $z1;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r3 = <net.sourceforge.plantuml.security.SFile: java.lang.String pathSeparator>;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>($r3);

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r6 = r4[i1];

        if r6 != null goto label2;

        goto label4;

     label2:
        $r7 = new net.sourceforge.plantuml.security.SFile;

        specialinvoke $r7.<net.sourceforge.plantuml.security.SFile: void <init>(java.lang.String)>(r6);

        r9 = $r7;

        $z0 = virtualinvoke $r7.<net.sourceforge.plantuml.security.SFile: boolean isFile()>();

        if $z0 == 0 goto label3;

        r9 = virtualinvoke $r7.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

     label3:
        if r9 == null goto label4;

        $z1 = virtualinvoke r9.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z1 == 0 goto label4;

        $r8 = virtualinvoke r9.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile file(java.lang.String)>("license.txt");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return $r0;
    }

    private static net.sourceforge.plantuml.version.LicenseInfo setIfValid(net.sourceforge.plantuml.version.LicenseInfo, net.sourceforge.plantuml.version.LicenseInfo)
    {
        net.sourceforge.plantuml.version.LicenseInfo r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: net.sourceforge.plantuml.version.LicenseInfo;

        r1 := @parameter1: net.sourceforge.plantuml.version.LicenseInfo;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: boolean isValid()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<net.sourceforge.plantuml.version.LicenseInfo: boolean isNone()>();

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        return r1;
    }

    private static net.sourceforge.plantuml.version.LicenseInfo retrieve(net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SFile r0;
        java.io.BufferedReader r1;
        java.lang.String r2, $r7, $r9;
        net.sourceforge.plantuml.version.LicenseInfo r3;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Throwable $r10;

        r0 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.io.BufferedReader openBufferedReader()>();

        if r1 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        r3 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveNamed(java.lang.String)>(r2);

        if r3 == null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reading license from ");

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.security.SFile: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r9);

     label2:
        virtualinvoke r1.<java.io.BufferedReader: void close()>();

        return r3;

     label3:
        $r10 := @caughtexception;

     label4:
        virtualinvoke r1.<java.io.BufferedReader: void close()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void main(java.lang.String[])
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r8, $r10;
        java.io.PrintStream $r2, $r7;
        boolean $z0;
        java.lang.String $r5, $r9, $r11;
        java.lang.String[] r12;

        r12 := @parameter0: java.lang.String[];

        r0 = staticinvoke <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo retrieveNamedSlow()>();

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("valid=");

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.version.LicenseInfo: boolean isValid()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("info=");

        $r9 = r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String owner>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r11);

        return;
    }

    public final java.util.Date getGenerationDate()
    {
        java.util.Date $r0;
        net.sourceforge.plantuml.version.LicenseInfo r1;
        long $l0;

        r1 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r0 = new java.util.Date;

        $l0 = r1.<net.sourceforge.plantuml.version.LicenseInfo: long generationDate>;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l0);

        return $r0;
    }

    public final java.util.Date getExpirationDate()
    {
        java.util.Date $r0;
        net.sourceforge.plantuml.version.LicenseInfo r1;
        long $l0;

        r1 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r0 = new java.util.Date;

        $l0 = r1.<net.sourceforge.plantuml.version.LicenseInfo: long expirationDate>;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l0);

        return $r0;
    }

    public final java.lang.String getOwner()
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String owner>;

        return $r1;
    }

    public boolean isNone()
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String owner>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isValid()
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.lang.String $r1;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String owner>;

        if $r1 == null goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: long expirationDate>;

        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasExpired()
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.lang.String $r1;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String owner>;

        if $r1 == null goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: long expirationDate>;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final net.sourceforge.plantuml.version.LicenseType getLicenseType()
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        net.sourceforge.plantuml.version.LicenseType $r1;

        r0 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseType type>;

        return $r1;
    }

    public final java.lang.String getContext()
    {
        net.sourceforge.plantuml.version.LicenseInfo r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.version.LicenseInfo;

        $r1 = r0.<net.sourceforge.plantuml.version.LicenseInfo: java.lang.String context>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.prefs.Preferences $r0;
        net.sourceforge.plantuml.version.LicenseInfo $r1;
        net.sourceforge.plantuml.version.LicenseType $r2;

        $r0 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences userNodeForPackage(java.lang.Class)>(class "Lnet/sourceforge/plantuml/version/LicenseInfo;");

        <net.sourceforge.plantuml.version.LicenseInfo: java.util.prefs.Preferences prefs> = $r0;

        $r1 = new net.sourceforge.plantuml.version.LicenseInfo;

        $r2 = <net.sourceforge.plantuml.version.LicenseType: net.sourceforge.plantuml.version.LicenseType NONE>;

        specialinvoke $r1.<net.sourceforge.plantuml.version.LicenseInfo: void <init>(net.sourceforge.plantuml.version.LicenseType,long,long,java.lang.String,java.lang.String,byte[])>($r2, 0L, 0L, null, null, null);

        <net.sourceforge.plantuml.version.LicenseInfo: net.sourceforge.plantuml.version.LicenseInfo NONE> = $r1;

        return;
    }
}
