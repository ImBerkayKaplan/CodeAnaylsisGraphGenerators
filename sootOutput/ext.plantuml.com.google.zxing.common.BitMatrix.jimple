public final class ext.plantuml.com.google.zxing.common.BitMatrix extends java.lang.Object
{
    public final int width;
    public final int height;
    public final int rowSize;
    public final int[] bits;

    public void <init>(int)
    {
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int i0;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i0 := @parameter0: int;

        specialinvoke r0.<ext.plantuml.com.google.zxing.common.BitMatrix: void <init>(int,int)>(i0, i0);

        return;
    }

    public void <init>(int, int)
    {
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 1 goto label1;

        if i1 >= 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both dimensions must be greater than 0");

        throw $r1;

     label2:
        r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int width> = i0;

        r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int height> = i1;

        $i2 = i0 + 31;

        $i3 = $i2 >> 5;

        r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize> = $i3;

        $i4 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        $i5 = $i4 * i1;

        $r2 = newarray (int)[$i5];

        r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits> = $r2;

        return;
    }

    public boolean get(int, int)
    {
        int i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int[] $r1;
        boolean $z0;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        $i4 = i0 * $i1;

        $i3 = i2 >> 5;

        i5 = $i4 + $i3;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i7 = $r1[i5];

        $i6 = i2 & 31;

        $i8 = $i7 >>> $i6;

        $i9 = $i8 & 1;

        if $i9 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void set(int, int)
    {
        int i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        $i4 = i0 * $i1;

        $i3 = i2 >> 5;

        i5 = $i4 + $i3;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i8 = $r1[i5];

        $i6 = i2 & 31;

        $i7 = 1 << $i6;

        $i9 = $i8 | $i7;

        $r1[i5] = $i9;

        return;
    }

    public void flip(int, int)
    {
        int i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int[] $r1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        $i4 = i0 * $i1;

        $i3 = i2 >> 5;

        i5 = $i4 + $i3;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i8 = $r1[i5];

        $i6 = i2 & 31;

        $i7 = 1 << $i6;

        $i9 = $i8 ^ $i7;

        $r1[i5] = $i9;

        return;
    }

    public void clear()
    {
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int[] $r1, $r2;
        int i0, i1;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setRegion(int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17;
        java.lang.IllegalArgumentException $r0, $r1, $r3;
        ext.plantuml.com.google.zxing.common.BitMatrix r2;
        int[] $r4;

        r2 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 < 0 goto label01;

        if i1 >= 0 goto label02;

     label01:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Left and top must be nonnegative");

        throw $r0;

     label02:
        if i2 < 1 goto label03;

        if i3 >= 1 goto label04;

     label03:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Height and width must be at least 1");

        throw $r1;

     label04:
        i4 = i1 + i3;

        i5 = i0 + i2;

        $i6 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int height>;

        if i5 > $i6 goto label05;

        $i7 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        if i4 <= $i7 goto label06;

     label05:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The region must fit inside the matrix");

        throw $r3;

     label06:
        i16 = i0;

     label07:
        if i16 >= i5 goto label10;

        $i8 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        i9 = i16 * $i8;

        i17 = i1;

     label08:
        if i17 >= i4 goto label09;

        $r4 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i10 = i17 >> 5;

        $i11 = i9 + $i10;

        $i14 = $r4[$i11];

        $i12 = i17 & 31;

        $i13 = 1 << $i12;

        $i15 = $i14 | $i13;

        $r4[$i11] = $i15;

        i17 = i17 + 1;

        goto label08;

     label09:
        i16 = i16 + 1;

        goto label07;

     label10:
        return;
    }

    public ext.plantuml.com.google.zxing.common.BitArray getRow(int, ext.plantuml.com.google.zxing.common.BitArray)
    {
        ext.plantuml.com.google.zxing.common.BitArray $r0, r3;
        ext.plantuml.com.google.zxing.common.BitMatrix r1;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10;
        int[] $r2;

        r1 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i1 := @parameter0: int;

        r3 := @parameter1: ext.plantuml.com.google.zxing.common.BitArray;

        if r3 == null goto label1;

        $i6 = virtualinvoke r3.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        $i7 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        if $i6 >= $i7 goto label2;

     label1:
        $r0 = new ext.plantuml.com.google.zxing.common.BitArray;

        $i0 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        specialinvoke $r0.<ext.plantuml.com.google.zxing.common.BitArray: void <init>(int)>($i0);

        r3 = $r0;

     label2:
        $i8 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        i2 = i1 * $i8;

        i9 = 0;

     label3:
        $i10 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        if i9 >= $i10 goto label4;

        $i5 = i9 << 5;

        $r2 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i3 = i2 + i9;

        $i4 = $r2[$i3];

        virtualinvoke r3.<ext.plantuml.com.google.zxing.common.BitArray: void setBulk(int,int)>($i5, $i4);

        i9 = i9 + 1;

        goto label3;

     label4:
        return r3;
    }

    public int[] getTopLeftOnBit()
    {
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int[] $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9, i10, i11, i12, i13;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i10 = 0;

     label1:
        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i0 = lengthof $r1;

        if i10 >= $i0 goto label2;

        $r5 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i9 = $r5[i10];

        if $i9 != 0 goto label2;

        i10 = i10 + 1;

        goto label1;

     label2:
        $r2 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = lengthof $r2;

        if i10 != $i1 goto label3;

        return null;

     label3:
        $i2 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        i3 = i10 / $i2;

        $i4 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        $i5 = i10 % $i4;

        i11 = $i5 << 5;

        $r3 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        i6 = $r3[i10];

        i12 = 0;

     label4:
        $i7 = 31 - i12;

        $i8 = i6 << $i7;

        if $i8 != 0 goto label5;

        i12 = i12 + 1;

        goto label4;

     label5:
        i13 = i11 + i12;

        $r4 = newarray (int)[2];

        $r4[0] = i13;

        $r4[1] = i3;

        return $r4;
    }

    public int getWidth()
    {
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int $i0;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        $i0 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        return $i0;
    }

    public int getHeight()
    {
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int $i0;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        $i0 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int height>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        ext.plantuml.com.google.zxing.common.BitMatrix r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        int[] $r3, $r4, $r5, $r6, $r7;

        r2 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof ext.plantuml.com.google.zxing.common.BitMatrix;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (ext.plantuml.com.google.zxing.common.BitMatrix) r0;

        $i1 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        $i0 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        if $i1 != $i0 goto label2;

        $i3 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int height>;

        $i2 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int height>;

        if $i3 != $i2 goto label2;

        $i5 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        $i4 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        if $i5 != $i4 goto label2;

        $r3 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i7 = lengthof $r3;

        $r4 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i6 = lengthof $r4;

        if $i7 == $i6 goto label3;

     label2:
        return 0;

     label3:
        i11 = 0;

     label4:
        $r5 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i8 = lengthof $r5;

        if i11 >= $i8 goto label6;

        $r6 = r2.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i10 = $r6[i11];

        $r7 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i9 = $r7[i11];

        if $i10 == $i9 goto label5;

        return 0;

     label5:
        i11 = i11 + 1;

        goto label4;

     label6:
        return 1;
    }

    public int hashCode()
    {
        ext.plantuml.com.google.zxing.common.BitMatrix r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        int[] $r1, $r2;

        r0 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        i9 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        $i1 = 31 * i9;

        $i0 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        i10 = $i1 + $i0;

        $i3 = 31 * i10;

        $i2 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int height>;

        i11 = $i3 + $i2;

        $i5 = 31 * i11;

        $i4 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int rowSize>;

        i12 = $i5 + $i4;

        i13 = 0;

     label1:
        $r1 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i6 = lengthof $r1;

        if i13 >= $i6 goto label2;

        $i8 = 31 * i12;

        $r2 = r0.<ext.plantuml.com.google.zxing.common.BitMatrix: int[] bits>;

        $i7 = $r2[i13];

        i12 = $i8 + $i7;

        i13 = i13 + 1;

        goto label1;

     label2:
        return i12;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        ext.plantuml.com.google.zxing.common.BitMatrix r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r3, $r7;
        boolean $z0;

        r1 := @this: ext.plantuml.com.google.zxing.common.BitMatrix;

        $r0 = new java.lang.StringBuilder;

        $i2 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int height>;

        $i0 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        $i1 = $i0 + 1;

        $i3 = $i2 * $i1;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i3);

        i6 = 0;

     label1:
        $i4 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int height>;

        if i6 >= $i4 goto label6;

        i7 = 0;

     label2:
        $i5 = r1.<ext.plantuml.com.google.zxing.common.BitMatrix: int width>;

        if i7 >= $i5 goto label5;

        $z0 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitMatrix: boolean get(int,int)>(i7, i6);

        if $z0 == 0 goto label3;

        $r7 = "X ";

        goto label4;

     label3:
        $r7 = "  ";

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i7 = i7 + 1;

        goto label2;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i6 = i6 + 1;

        goto label1;

     label6:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
