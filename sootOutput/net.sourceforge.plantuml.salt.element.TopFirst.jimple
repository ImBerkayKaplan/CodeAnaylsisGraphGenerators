class net.sourceforge.plantuml.salt.element.TopFirst extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        net.sourceforge.plantuml.salt.element.TopFirst r0;

        r0 := @this: net.sourceforge.plantuml.salt.element.TopFirst;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(net.sourceforge.plantuml.salt.Cell, net.sourceforge.plantuml.salt.Cell)
    {
        net.sourceforge.plantuml.salt.Cell r0, r1;
        int $i0, $i1, i2, $i3, $i4, i5;
        net.sourceforge.plantuml.salt.element.TopFirst r2;

        r2 := @this: net.sourceforge.plantuml.salt.element.TopFirst;

        r0 := @parameter0: net.sourceforge.plantuml.salt.Cell;

        r1 := @parameter1: net.sourceforge.plantuml.salt.Cell;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.salt.Cell: int getNbRows()>();

        $i1 = virtualinvoke r1.<net.sourceforge.plantuml.salt.Cell: int getNbRows()>();

        i2 = $i0 - $i1;

        if i2 == 0 goto label1;

        return i2;

     label1:
        $i3 = virtualinvoke r0.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        $i4 = virtualinvoke r1.<net.sourceforge.plantuml.salt.Cell: int getMinRow()>();

        i5 = $i3 - $i4;

        return i5;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        net.sourceforge.plantuml.salt.element.TopFirst r0;
        java.lang.Object r1, r2;
        net.sourceforge.plantuml.salt.Cell $r3, $r4;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.salt.element.TopFirst;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (net.sourceforge.plantuml.salt.Cell) r1;

        $r3 = (net.sourceforge.plantuml.salt.Cell) r2;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.salt.element.TopFirst: int compare(net.sourceforge.plantuml.salt.Cell,net.sourceforge.plantuml.salt.Cell)>($r4, $r3);

        return $i0;
    }
}
