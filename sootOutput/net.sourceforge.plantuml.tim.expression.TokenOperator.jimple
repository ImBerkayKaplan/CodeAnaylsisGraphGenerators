public abstract enum class net.sourceforge.plantuml.tim.expression.TokenOperator extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator MULTIPLICATION;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator DIVISION;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator ADDITION;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator SUBSTRACTION;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator LESS_THAN;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator GREATER_THAN;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator LESS_THAN_OR_EQUALS;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator GREATER_THAN_OR_EQUALS;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator EQUALS;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator NOT_EQUALS;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator LOGICAL_AND;
    public static final enum net.sourceforge.plantuml.tim.expression.TokenOperator LOGICAL_OR;
    private final int precedence;
    private final java.lang.String display;
    private static final net.sourceforge.plantuml.tim.expression.TokenOperator[] $VALUES;

    public static net.sourceforge.plantuml.tim.expression.TokenOperator[] values()
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.tim.expression.TokenOperator[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.tim.expression.TokenOperator valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.tim.expression.TokenOperator $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/tim/expression/TokenOperator;", r0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TokenOperator) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int, java.lang.String)
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator r0;
        java.lang.String r1, r2;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<net.sourceforge.plantuml.tim.expression.TokenOperator: int precedence> = i1;

        r0.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String display> = r2;

        return;
    }

    public boolean isLeftAssociativity()
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator r0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenOperator;

        return 1;
    }

    public static net.sourceforge.plantuml.tim.expression.TokenOperator getTokenOperator(char, char)
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4;
        int $i0, $i3, i7, i8, i9, i10;
        char $c1, c2, $c4, $c5, c6;
        net.sourceforge.plantuml.tim.expression.TokenOperator[] r5, r7;
        net.sourceforge.plantuml.tim.expression.TokenOperator r6, r8;

        c2 := @parameter0: char;

        c6 := @parameter1: char;

        r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator[] values()>();

        i7 = lengthof r5;

        i8 = 0;

     label1:
        if i8 >= i7 goto label3;

        r6 = r5[i8];

        $r2 = r6.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String display>;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i3 != 2 goto label2;

        $r3 = r6.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String display>;

        $c4 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        if $c4 != c2 goto label2;

        $r4 = r6.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String display>;

        $c5 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(1);

        if $c5 != c6 goto label2;

        return r6;

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        r7 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator[] values()>();

        i9 = lengthof r7;

        i10 = 0;

     label4:
        if i10 >= i9 goto label6;

        r8 = r7[i10];

        $r0 = r8.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String display>;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 1 goto label5;

        $r1 = r8.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String display>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        if $c1 != c2 goto label5;

        return r8;

     label5:
        i10 = i10 + 1;

        goto label4;

     label6:
        return null;
    }

    public final int getPrecedence()
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenOperator;

        $i0 = r0.<net.sourceforge.plantuml.tim.expression.TokenOperator: int precedence>;

        return $i0;
    }

    public abstract net.sourceforge.plantuml.tim.expression.TValue operate(net.sourceforge.plantuml.tim.expression.TValue, net.sourceforge.plantuml.tim.expression.TValue);

    public final java.lang.String getDisplay()
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenOperator;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TokenOperator: java.lang.String display>;

        return $r1;
    }

    private static net.sourceforge.plantuml.tim.expression.TokenOperator[] $values()
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator[] $r0;
        net.sourceforge.plantuml.tim.expression.TokenOperator $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = newarray (net.sourceforge.plantuml.tim.expression.TokenOperator)[12];

        $r1 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator MULTIPLICATION>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator DIVISION>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator ADDITION>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator SUBSTRACTION>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LESS_THAN>;

        $r0[4] = $r5;

        $r6 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator GREATER_THAN>;

        $r0[5] = $r6;

        $r7 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LESS_THAN_OR_EQUALS>;

        $r0[6] = $r7;

        $r8 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator GREATER_THAN_OR_EQUALS>;

        $r0[7] = $r8;

        $r9 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator EQUALS>;

        $r0[8] = $r9;

        $r10 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator NOT_EQUALS>;

        $r0[9] = $r10;

        $r11 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LOGICAL_AND>;

        $r0[10] = $r11;

        $r12 = <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LOGICAL_OR>;

        $r0[11] = $r12;

        return $r0;
    }

    void <init>(java.lang.String, int, int, java.lang.String, net.sourceforge.plantuml.tim.expression.TokenOperator$1)
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator r0;
        java.lang.String r1, r2;
        int i0, i1;
        net.sourceforge.plantuml.tim.expression.TokenOperator$1 r3;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: net.sourceforge.plantuml.tim.expression.TokenOperator$1;

        specialinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenOperator: void <init>(java.lang.String,int,int,java.lang.String)>(r1, i0, i1, r2);

        return;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.tim.expression.TokenOperator$1 $r0;
        net.sourceforge.plantuml.tim.expression.TokenOperator$2 $r1;
        net.sourceforge.plantuml.tim.expression.TokenOperator$3 $r2;
        net.sourceforge.plantuml.tim.expression.TokenOperator$4 $r3;
        net.sourceforge.plantuml.tim.expression.TokenOperator$5 $r4;
        net.sourceforge.plantuml.tim.expression.TokenOperator$6 $r5;
        net.sourceforge.plantuml.tim.expression.TokenOperator$7 $r6;
        net.sourceforge.plantuml.tim.expression.TokenOperator$8 $r7;
        net.sourceforge.plantuml.tim.expression.TokenOperator$9 $r8;
        net.sourceforge.plantuml.tim.expression.TokenOperator$10 $r9;
        net.sourceforge.plantuml.tim.expression.TokenOperator$11 $r10;
        net.sourceforge.plantuml.tim.expression.TokenOperator$12 $r11;
        net.sourceforge.plantuml.tim.expression.TokenOperator[] $r12;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenOperator$1;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenOperator$1: void <init>(java.lang.String,int,int,java.lang.String)>("MULTIPLICATION", 0, 97, "*");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator MULTIPLICATION> = $r0;

        $r1 = new net.sourceforge.plantuml.tim.expression.TokenOperator$2;

        specialinvoke $r1.<net.sourceforge.plantuml.tim.expression.TokenOperator$2: void <init>(java.lang.String,int,int,java.lang.String)>("DIVISION", 1, 97, "/");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator DIVISION> = $r1;

        $r2 = new net.sourceforge.plantuml.tim.expression.TokenOperator$3;

        specialinvoke $r2.<net.sourceforge.plantuml.tim.expression.TokenOperator$3: void <init>(java.lang.String,int,int,java.lang.String)>("ADDITION", 2, 96, "+");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator ADDITION> = $r2;

        $r3 = new net.sourceforge.plantuml.tim.expression.TokenOperator$4;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.expression.TokenOperator$4: void <init>(java.lang.String,int,int,java.lang.String)>("SUBSTRACTION", 3, 96, "-");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator SUBSTRACTION> = $r3;

        $r4 = new net.sourceforge.plantuml.tim.expression.TokenOperator$5;

        specialinvoke $r4.<net.sourceforge.plantuml.tim.expression.TokenOperator$5: void <init>(java.lang.String,int,int,java.lang.String)>("LESS_THAN", 4, 94, "<");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LESS_THAN> = $r4;

        $r5 = new net.sourceforge.plantuml.tim.expression.TokenOperator$6;

        specialinvoke $r5.<net.sourceforge.plantuml.tim.expression.TokenOperator$6: void <init>(java.lang.String,int,int,java.lang.String)>("GREATER_THAN", 5, 94, ">");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator GREATER_THAN> = $r5;

        $r6 = new net.sourceforge.plantuml.tim.expression.TokenOperator$7;

        specialinvoke $r6.<net.sourceforge.plantuml.tim.expression.TokenOperator$7: void <init>(java.lang.String,int,int,java.lang.String)>("LESS_THAN_OR_EQUALS", 6, 94, "<=");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LESS_THAN_OR_EQUALS> = $r6;

        $r7 = new net.sourceforge.plantuml.tim.expression.TokenOperator$8;

        specialinvoke $r7.<net.sourceforge.plantuml.tim.expression.TokenOperator$8: void <init>(java.lang.String,int,int,java.lang.String)>("GREATER_THAN_OR_EQUALS", 7, 94, ">=");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator GREATER_THAN_OR_EQUALS> = $r7;

        $r8 = new net.sourceforge.plantuml.tim.expression.TokenOperator$9;

        specialinvoke $r8.<net.sourceforge.plantuml.tim.expression.TokenOperator$9: void <init>(java.lang.String,int,int,java.lang.String)>("EQUALS", 8, 93, "==");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator EQUALS> = $r8;

        $r9 = new net.sourceforge.plantuml.tim.expression.TokenOperator$10;

        specialinvoke $r9.<net.sourceforge.plantuml.tim.expression.TokenOperator$10: void <init>(java.lang.String,int,int,java.lang.String)>("NOT_EQUALS", 9, 93, "!=");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator NOT_EQUALS> = $r9;

        $r10 = new net.sourceforge.plantuml.tim.expression.TokenOperator$11;

        specialinvoke $r10.<net.sourceforge.plantuml.tim.expression.TokenOperator$11: void <init>(java.lang.String,int,int,java.lang.String)>("LOGICAL_AND", 10, 89, "&&");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LOGICAL_AND> = $r10;

        $r11 = new net.sourceforge.plantuml.tim.expression.TokenOperator$12;

        specialinvoke $r11.<net.sourceforge.plantuml.tim.expression.TokenOperator$12: void <init>(java.lang.String,int,int,java.lang.String)>("LOGICAL_OR", 11, 88, "||");

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator LOGICAL_OR> = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator[] $values()>();

        <net.sourceforge.plantuml.tim.expression.TokenOperator: net.sourceforge.plantuml.tim.expression.TokenOperator[] $VALUES> = $r12;

        return;
    }
}
