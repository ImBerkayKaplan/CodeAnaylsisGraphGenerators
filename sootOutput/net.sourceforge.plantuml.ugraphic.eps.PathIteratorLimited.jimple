public class net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited extends java.lang.Object implements java.awt.geom.PathIterator
{
    private final java.awt.geom.PathIterator path;
    private final int limit;
    private int current;

    public static int count(java.awt.Shape)
    {
        java.awt.Shape r0;
        java.awt.geom.PathIterator r1;
        boolean $z0;
        int i0;

        r0 := @parameter0: java.awt.Shape;

        i0 = 0;

        r1 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

     label1:
        $z0 = interfaceinvoke r1.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label2;

        i0 = i0 + 1;

        interfaceinvoke r1.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label2:
        return i0;
    }

    public void <init>(java.awt.Shape, int, int)
    {
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited r0;
        java.awt.Shape r1;
        java.awt.geom.PathIterator $r2;
        int i0, i1, i2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        r1 := @parameter0: java.awt.Shape;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: int current> = 0;

        $r2 = interfaceinvoke r1.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: java.awt.geom.PathIterator path> = $r2;

        r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: int limit> = i0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: void next()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public int currentSegment(float[])
    {
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited r0;
        float[] r1;
        java.awt.geom.PathIterator $r2;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        r1 := @parameter0: float[];

        $r2 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: java.awt.geom.PathIterator path>;

        $i0 = interfaceinvoke $r2.<java.awt.geom.PathIterator: int currentSegment(float[])>(r1);

        return $i0;
    }

    public int currentSegment(double[])
    {
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited r0;
        double[] r1;
        java.awt.geom.PathIterator $r2;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        r1 := @parameter0: double[];

        $r2 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: java.awt.geom.PathIterator path>;

        $i0 = interfaceinvoke $r2.<java.awt.geom.PathIterator: int currentSegment(double[])>(r1);

        return $i0;
    }

    public int getWindingRule()
    {
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited r0;
        java.awt.geom.PathIterator $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: java.awt.geom.PathIterator path>;

        $i0 = interfaceinvoke $r1.<java.awt.geom.PathIterator: int getWindingRule()>();

        return $i0;
    }

    public boolean isDone()
    {
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited r0;
        int $i0, $i1;
        java.awt.geom.PathIterator $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $i1 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: int current>;

        $i0 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: int limit>;

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: java.awt.geom.PathIterator path>;

        $z0 = interfaceinvoke $r1.<java.awt.geom.PathIterator: boolean isDone()>();

        return $z0;
    }

    public void next()
    {
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited r0;
        java.awt.geom.PathIterator $r1;
        int $i0, $i1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: java.awt.geom.PathIterator path>;

        interfaceinvoke $r1.<java.awt.geom.PathIterator: void next()>();

        $i0 = r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: int current>;

        $i1 = $i0 + 1;

        r0.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: int current> = $i1;

        return;
    }
}
