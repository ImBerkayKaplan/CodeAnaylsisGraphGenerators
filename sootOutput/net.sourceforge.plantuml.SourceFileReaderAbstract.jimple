public abstract class net.sourceforge.plantuml.SourceFileReaderAbstract extends java.lang.Object implements net.sourceforge.plantuml.ISourceFileReader
{
    protected java.io.File file;
    protected java.io.File outputDirectory;
    protected java.io.File outputFile;
    protected final net.sourceforge.plantuml.BlockUmlBuilder builder;
    protected net.sourceforge.plantuml.FileFormatOption fileFormatOption;
    private boolean checkMetadata;
    private boolean noerror;
    protected int cpt;

    public void <init>(java.io.File, net.sourceforge.plantuml.FileFormatOption, net.sourceforge.plantuml.preproc.Defines, java.util.List, java.lang.String) throws java.io.IOException
    {
        net.sourceforge.plantuml.SourceFileReaderAbstract r0;
        java.io.File r1, $r10, $r11;
        boolean $z0;
        java.lang.String r2, $r13;
        java.nio.charset.Charset r3;
        net.sourceforge.plantuml.FileFormatOption r4;
        net.sourceforge.plantuml.BlockUmlBuilder $r5;
        net.sourceforge.plantuml.api.ThemeStyle $r6;
        java.util.List r7;
        net.sourceforge.plantuml.preproc.Defines r8;
        java.io.Reader $r9;
        net.sourceforge.plantuml.security.SFile $r12;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        r1 := @parameter0: java.io.File;

        r4 := @parameter1: net.sourceforge.plantuml.FileFormatOption;

        r8 := @parameter2: net.sourceforge.plantuml.preproc.Defines;

        r7 := @parameter3: java.util.List;

        r2 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label1:
        r3 = staticinvoke <net.sourceforge.plantuml.utils.CharsetUtils: java.nio.charset.Charset charsetOrDefault(java.lang.String)>(r2);

        r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: java.io.File file> = r1;

        r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.FileFormatOption fileFormatOption> = r4;

        $r5 = new net.sourceforge.plantuml.BlockUmlBuilder;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.FileFormatOption: net.sourceforge.plantuml.api.ThemeStyle getStyle()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: java.io.Reader getReader(java.nio.charset.Charset)>(r3);

        $r10 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile fromFile(java.io.File)>($r11);

        $r13 = staticinvoke <net.sourceforge.plantuml.preproc.FileWithSuffix: java.lang.String getFileName(java.io.File)>(r1);

        specialinvoke $r5.<net.sourceforge.plantuml.BlockUmlBuilder: void <init>(net.sourceforge.plantuml.api.ThemeStyle,java.util.List,java.nio.charset.Charset,net.sourceforge.plantuml.preproc.Defines,java.io.Reader,net.sourceforge.plantuml.security.SFile,java.lang.String)>($r6, r7, r3, r8, $r9, $r12, $r13);

        r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.BlockUmlBuilder builder> = $r5;

        return;
    }

    public void setCheckMetadata(boolean)
    {
        net.sourceforge.plantuml.SourceFileReaderAbstract r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: boolean checkMetadata> = z0;

        return;
    }

    public boolean hasError()
    {
        net.sourceforge.plantuml.SourceFileReaderAbstract r0;
        net.sourceforge.plantuml.BlockUmlBuilder $r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        net.sourceforge.plantuml.BlockUml r5;
        net.sourceforge.plantuml.core.Diagram $r6;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        $r1 = r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.BlockUmlBuilder builder>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.BlockUmlBuilder: java.util.List getBlockUmls()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.BlockUml) $r4;

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

        $z1 = $r6 instanceof net.sourceforge.plantuml.error.PSystemError;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.util.List getBlocks()
    {
        net.sourceforge.plantuml.SourceFileReaderAbstract r0;
        net.sourceforge.plantuml.BlockUmlBuilder $r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        $r1 = r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.BlockUmlBuilder builder>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.BlockUmlBuilder: java.util.List getBlockUmls()>();

        return $r2;
    }

    protected java.io.Reader getReader(java.nio.charset.Charset) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.io.InputStreamReader $r0;
        java.io.BufferedInputStream $r1;
        java.io.FileInputStream $r2;
        net.sourceforge.plantuml.SourceFileReaderAbstract r3;
        java.io.File $r4;
        java.nio.charset.Charset r5;

        r3 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        r5 := @parameter0: java.nio.charset.Charset;

        $r0 = new java.io.InputStreamReader;

        $r1 = new java.io.BufferedInputStream;

        $r2 = new java.io.FileInputStream;

        $r4 = r3.<net.sourceforge.plantuml.SourceFileReaderAbstract: java.io.File file>;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r2);

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r1, r5);

        return $r0;
    }

    public final java.util.Set getIncludedFiles()
    {
        net.sourceforge.plantuml.SourceFileReaderAbstract r0;
        net.sourceforge.plantuml.BlockUmlBuilder $r1;
        java.util.Set $r2;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        $r1 = r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.BlockUmlBuilder builder>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.BlockUmlBuilder: java.util.Set getIncludedFiles()>();

        return $r2;
    }

    public final void setFileFormatOption(net.sourceforge.plantuml.FileFormatOption)
    {
        net.sourceforge.plantuml.SourceFileReaderAbstract r0;
        net.sourceforge.plantuml.FileFormatOption r1;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        r1 := @parameter0: net.sourceforge.plantuml.FileFormatOption;

        r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.FileFormatOption fileFormatOption> = r1;

        return;
    }

    protected boolean endsWithSlashOrAntislash(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.SourceFileReaderAbstract r1;

        r1 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("\\");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private java.util.List getCrashedImage(net.sourceforge.plantuml.BlockUml, java.lang.Throwable, net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        net.sourceforge.plantuml.GeneratedImageImpl $r0;
        net.sourceforge.plantuml.security.SFile r1;
        net.sourceforge.plantuml.BlockUml r2;
        java.io.BufferedOutputStream r4;
        java.lang.Throwable r5, $r12, $r15;
        net.sourceforge.plantuml.SourceFileReaderAbstract r6;
        net.sourceforge.plantuml.FileFormatOption $r7;
        java.lang.String $r8, $r9;
        java.util.List $r10, $r11;

        r6 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        r2 := @parameter0: net.sourceforge.plantuml.BlockUml;

        r5 := @parameter1: java.lang.Throwable;

        r1 := @parameter2: net.sourceforge.plantuml.security.SFile;

        $r0 = new net.sourceforge.plantuml.GeneratedImageImpl;

        specialinvoke $r0.<net.sourceforge.plantuml.GeneratedImageImpl: void <init>(net.sourceforge.plantuml.security.SFile,java.lang.String,net.sourceforge.plantuml.BlockUml,int)>(r1, "Crash Error", r2, 503);

        r4 = virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: java.io.BufferedOutputStream createBufferedOutputStream()>();

     label1:
        $r7 = r6.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.BlockUml: java.lang.String getFlashData()>();

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.BlockUml: java.lang.String getFlashData()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.UmlDiagram: java.util.List getFailureText2(java.lang.Throwable,java.lang.String)>(r5, $r9);

        staticinvoke <net.sourceforge.plantuml.UmlDiagram: void exportDiagramError(java.io.OutputStream,java.lang.Throwable,net.sourceforge.plantuml.FileFormatOption,long,java.lang.String,java.lang.String,java.util.List)>(r4, r5, $r7, 42L, null, $r8, $r10);

     label2:
        if r4 == null goto label8;

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        goto label8;

     label3:
        $r15 := @caughtexception;

        if r4 == null goto label7;

     label4:
        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label7:
        throw $r15;

     label8:
        $r11 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r0);

        return $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    protected void exportWarnOrErrIfWord(net.sourceforge.plantuml.security.SFile, net.sourceforge.plantuml.core.Diagram) throws java.io.FileNotFoundException
    {
        net.sourceforge.plantuml.OptionFlags $r0;
        boolean $z0;
        net.sourceforge.plantuml.security.SFile r1, $r11, r12;
        net.sourceforge.plantuml.core.Diagram r2;
        java.lang.String r3, $r5, $r6, $r7, r10;
        java.lang.StringBuilder $r4, $r8, $r9;
        int $i0, $i1;
        java.io.FileOutputStream $r13;
        java.io.PrintStream r14;
        java.lang.Throwable $r15, $r18;
        net.sourceforge.plantuml.SourceFileReaderAbstract r19;

        r19 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        r1 := @parameter0: net.sourceforge.plantuml.security.SFile;

        r2 := @parameter1: net.sourceforge.plantuml.core.Diagram;

        $r0 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r0.<net.sourceforge.plantuml.OptionFlags: boolean isWord()>();

        if $z0 == 0 goto label8;

        if r1 == null goto label8;

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.core.Diagram: java.lang.String getWarningOrError()>();

        if r3 == null goto label8;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        $r6 = virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i1 = $i0 - 4;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".err");

        r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r1.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile getParentFile()>();

        r12 = virtualinvoke $r11.<net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile file(java.lang.String)>(r10);

        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.security.SFile: java.io.FileOutputStream createFileOutputStream()>();

        r14 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: java.io.PrintStream createPrintStream(java.io.OutputStream)>($r13);

     label1:
        virtualinvoke r14.<java.io.PrintStream: void print(java.lang.String)>(r3);

     label2:
        if r14 == null goto label8;

        virtualinvoke r14.<java.io.PrintStream: void close()>();

        goto label8;

     label3:
        $r18 := @caughtexception;

        if r14 == null goto label7;

     label4:
        virtualinvoke r14.<java.io.PrintStream: void close()>();

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        virtualinvoke $r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

     label7:
        throw $r18;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public final java.util.List getGeneratedImages() throws java.io.IOException
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r11, $r12, $r13, $r28, $r29, $r32, $r33, $r35;
        net.sourceforge.plantuml.SourceFileReaderAbstract r2;
        java.io.File $r3, $r22, $r30;
        java.lang.String $r5, $r14, $r31, r36;
        java.util.ArrayList $r6, $r40;
        net.sourceforge.plantuml.BlockUmlBuilder $r8;
        java.util.List $r9, $r15, $r47, r49;
        java.util.Iterator r10, r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r16, $r26;
        net.sourceforge.plantuml.BlockUml r17;
        net.sourceforge.plantuml.SuggestedFile r18;
        net.sourceforge.plantuml.core.Diagram r19;
        net.sourceforge.plantuml.OptionFlags $r20, $r21, $r45;
        boolean $z0, $z1, $z2, $z4, $z6, $z7, $z8, $z9, $z10;
        net.sourceforge.plantuml.security.SFile $r23, r37, $r46;
        net.sourceforge.plantuml.FileFormatOption $r24;
        net.sourceforge.plantuml.FileImageData r27, $r41;
        net.sourceforge.plantuml.core.DiagramDescription $r34;
        net.sourceforge.plantuml.GeneratedImageImpl $r38;
        net.sourceforge.plantuml.api.ImageDataSimple $r42;
        net.sourceforge.plantuml.Dimension2DDouble $r43;
        java.lang.Throwable $r44;

        r2 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reading file: ");

        $r3 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: java.io.File file>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r5);

        r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: int cpt> = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r8 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.BlockUmlBuilder builder>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.BlockUmlBuilder: java.util.List getBlockUmls()>();

        r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z9 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label14;

        $r16 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r17 = (net.sourceforge.plantuml.BlockUml) $r16;

        r18 = virtualinvoke r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.SuggestedFile getSuggestedFile(net.sourceforge.plantuml.BlockUml)>(r17);

     label02:
        r19 = virtualinvoke r17.<net.sourceforge.plantuml.BlockUml: net.sourceforge.plantuml.core.Diagram getDiagram()>();

     label03:
        goto label07;

     label04:
        $r44 := @caughtexception;

        virtualinvoke $r44.<java.lang.Throwable: void printStackTrace()>();

        $r45 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z7 = virtualinvoke $r45.<net.sourceforge.plantuml.OptionFlags: boolean isSilentlyCompletelyIgnoreErrors()>();

        if $z7 != 0 goto label05;

        $z8 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: boolean noerror>;

        if $z8 == 0 goto label06;

     label05:
        goto label01;

     label06:
        $r46 = virtualinvoke r18.<net.sourceforge.plantuml.SuggestedFile: net.sourceforge.plantuml.security.SFile getFile(int)>(0);

        $r47 = specialinvoke r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: java.util.List getCrashedImage(net.sourceforge.plantuml.BlockUml,java.lang.Throwable,net.sourceforge.plantuml.security.SFile)>(r17, $r44, $r46);

        return $r47;

     label07:
        $r20 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $z0 = virtualinvoke $r20.<net.sourceforge.plantuml.OptionFlags: boolean isSilentlyCompletelyIgnoreErrors()>();

        if $z0 == 0 goto label08;

        $z6 = r19 instanceof net.sourceforge.plantuml.error.PSystemError;

        if $z6 == 0 goto label08;

        goto label01;

     label08:
        $r21 = staticinvoke <net.sourceforge.plantuml.OptionFlags: net.sourceforge.plantuml.OptionFlags getInstance()>();

        $r22 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: java.io.File file>;

        $r23 = staticinvoke <net.sourceforge.plantuml.security.SFile: net.sourceforge.plantuml.security.SFile fromFile(java.io.File)>($r22);

        virtualinvoke $r21.<net.sourceforge.plantuml.OptionFlags: void logData(net.sourceforge.plantuml.security.SFile,net.sourceforge.plantuml.core.Diagram)>($r23, r19);

        $z1 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: boolean noerror>;

        if $z1 == 0 goto label09;

        $z4 = r19 instanceof net.sourceforge.plantuml.error.PSystemError;

        if $z4 == 0 goto label09;

        $r40 = new java.util.ArrayList;

        specialinvoke $r40.<java.util.ArrayList: void <init>()>();

        r49 = $r40;

        $r41 = new net.sourceforge.plantuml.FileImageData;

        $r42 = new net.sourceforge.plantuml.api.ImageDataSimple;

        $r43 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r43.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        specialinvoke $r42.<net.sourceforge.plantuml.api.ImageDataSimple: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D,int)>($r43, 400);

        specialinvoke $r41.<net.sourceforge.plantuml.FileImageData: void <init>(net.sourceforge.plantuml.security.SFile,net.sourceforge.plantuml.core.ImageData)>(null, $r42);

        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r41);

        goto label10;

     label09:
        $r24 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: net.sourceforge.plantuml.FileFormatOption fileFormatOption>;

        $z2 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: boolean checkMetadata>;

        r49 = staticinvoke <net.sourceforge.plantuml.PSystemUtils: java.util.List exportDiagrams(net.sourceforge.plantuml.core.Diagram,net.sourceforge.plantuml.SuggestedFile,net.sourceforge.plantuml.FileFormatOption,boolean)>(r19, r18, $r24, $z2);

     label10:
        $i6 = interfaceinvoke r49.<java.util.List: int size()>();

        if $i6 <= 1 goto label11;

        $i2 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: int cpt>;

        $i3 = interfaceinvoke r49.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $i5 = $i2 + $i4;

        r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: int cpt> = $i5;

     label11:
        r25 = interfaceinvoke r49.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z10 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label13;

        $r26 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r27 = (net.sourceforge.plantuml.FileImageData) $r26;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r30 = r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: java.io.File file>;

        $r31 = virtualinvoke $r30.<java.io.File: java.lang.String getName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r34 = interfaceinvoke r19.<net.sourceforge.plantuml.core.Diagram: net.sourceforge.plantuml.core.DiagramDescription getDescription()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        r37 = virtualinvoke r27.<net.sourceforge.plantuml.FileImageData: net.sourceforge.plantuml.security.SFile getFile()>();

        virtualinvoke r2.<net.sourceforge.plantuml.SourceFileReaderAbstract: void exportWarnOrErrIfWord(net.sourceforge.plantuml.security.SFile,net.sourceforge.plantuml.core.Diagram)>(r37, r19);

        $r38 = new net.sourceforge.plantuml.GeneratedImageImpl;

        $i1 = virtualinvoke r27.<net.sourceforge.plantuml.FileImageData: int getStatus()>();

        specialinvoke $r38.<net.sourceforge.plantuml.GeneratedImageImpl: void <init>(net.sourceforge.plantuml.security.SFile,java.lang.String,net.sourceforge.plantuml.BlockUml,int)>(r37, r36, r17, $i1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r38);

        goto label12;

     label13:
        goto label01;

     label14:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of image(s): ");

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void info(java.lang.String)>($r14);

        $r15 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r6);

        return $r15;

        catch java.lang.Throwable from label02 to label03 with label04;
    }

    protected abstract net.sourceforge.plantuml.SuggestedFile getSuggestedFile(net.sourceforge.plantuml.BlockUml) throws java.io.FileNotFoundException;

    protected final void setNoerror(boolean)
    {
        net.sourceforge.plantuml.SourceFileReaderAbstract r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.SourceFileReaderAbstract;

        z0 := @parameter0: boolean;

        r0.<net.sourceforge.plantuml.SourceFileReaderAbstract: boolean noerror> = z0;

        return;
    }
}
