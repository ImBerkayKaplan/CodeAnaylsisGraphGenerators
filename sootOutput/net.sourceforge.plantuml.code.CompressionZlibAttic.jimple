public class net.sourceforge.plantuml.code.CompressionZlibAttic extends java.lang.Object implements net.sourceforge.plantuml.code.Compression
{
    private static boolean USE_ZOPFLI;
    private static final int COMPRESSION_LEVEL;

    public void <init>()
    {
        net.sourceforge.plantuml.code.CompressionZlibAttic r0;

        r0 := @this: net.sourceforge.plantuml.code.CompressionZlibAttic;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public byte[] compress(byte[])
    {
        boolean $z0;
        byte[] r0, $r3, r4;
        int $i0, $i1, i2;
        net.sourceforge.plantuml.code.CompressionZlibAttic r1;
        net.sourceforge.plantuml.code.CompressionZopfliZlib $r2;

        r1 := @this: net.sourceforge.plantuml.code.CompressionZlibAttic;

        r0 := @parameter0: byte[];

        $z0 = <net.sourceforge.plantuml.code.CompressionZlibAttic: boolean USE_ZOPFLI>;

        if $z0 == 0 goto label1;

        $r2 = new net.sourceforge.plantuml.code.CompressionZopfliZlib;

        specialinvoke $r2.<net.sourceforge.plantuml.code.CompressionZopfliZlib: void <init>()>();

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.code.CompressionZopfliZlib: byte[] compress(byte[])>(r0);

        return $r3;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        return null;

     label2:
        $i1 = lengthof r0;

        i2 = $i1 * 2;

        if i2 >= 1000 goto label3;

        i2 = 1000;

     label3:
        r4 = specialinvoke r1.<net.sourceforge.plantuml.code.CompressionZlibAttic: byte[] tryCompress(byte[],int)>(r0, i2);

        return r4;
    }

    private byte[] tryCompress(byte[], int)
    {
        java.util.zip.Deflater $r0;
        byte[] r2, r3, $r5;
        int i0, i1;
        boolean $z0;
        net.sourceforge.plantuml.code.CompressionZlibAttic r4;

        r4 := @this: net.sourceforge.plantuml.code.CompressionZlibAttic;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r0 = new java.util.zip.Deflater;

        specialinvoke $r0.<java.util.zip.Deflater: void <init>(int,boolean)>(9, 1);

        virtualinvoke $r0.<java.util.zip.Deflater: void setInput(byte[])>(r2);

        virtualinvoke $r0.<java.util.zip.Deflater: void finish()>();

        r3 = newarray (byte)[i0];

        i1 = virtualinvoke $r0.<java.util.zip.Deflater: int deflate(byte[])>(r3);

        $z0 = virtualinvoke $r0.<java.util.zip.Deflater: boolean finished()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r5 = specialinvoke r4.<net.sourceforge.plantuml.code.CompressionZlibAttic: byte[] copyArray(byte[],int)>(r3, i1);

        return $r5;
    }

    public net.sourceforge.plantuml.code.ByteArray decompress(byte[]) throws net.sourceforge.plantuml.code.NoPlantumlCompressionException
    {
        byte[] r0, r6, r7;
        int $i0, $i1, $i2;
        net.sourceforge.plantuml.code.CompressionZlibAttic r1;
        net.sourceforge.plantuml.code.ByteArray $r2;
        net.sourceforge.plantuml.code.NoPlantumlCompressionException $r3, $r5;
        java.io.IOException $r4;

        r1 := @this: net.sourceforge.plantuml.code.CompressionZlibAttic;

        r0 := @parameter0: byte[];

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 + 256;

        r6 = newarray (byte)[$i1];

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r6, 0, $i2);

        r7 = specialinvoke r1.<net.sourceforge.plantuml.code.CompressionZlibAttic: byte[] tryDecompress(byte[],int)>(r6, 100000);

        if r7 != null goto label2;

        $r3 = new net.sourceforge.plantuml.code.NoPlantumlCompressionException;

        specialinvoke $r3.<net.sourceforge.plantuml.code.NoPlantumlCompressionException: void <init>(java.lang.String)>("Too big?");

        throw $r3;

     label2:
        $r2 = staticinvoke <net.sourceforge.plantuml.code.ByteArray: net.sourceforge.plantuml.code.ByteArray 'from'(byte[])>(r7);

     label3:
        return $r2;

     label4:
        $r4 := @caughtexception;

        $r5 = new net.sourceforge.plantuml.code.NoPlantumlCompressionException;

        specialinvoke $r5.<net.sourceforge.plantuml.code.NoPlantumlCompressionException: void <init>(java.lang.Exception)>($r4);

        throw $r5;

        catch java.io.IOException from label1 to label3 with label4;
    }

    private byte[] tryDecompress(byte[], int) throws java.io.IOException
    {
        int i0, i1;
        byte[] r0, r3, r5;
        java.util.zip.Inflater $r1;
        boolean $z0;
        net.sourceforge.plantuml.code.CompressionZlibAttic r4;
        java.io.IOException $r6, $r8;
        java.util.zip.DataFormatException $r7;
        java.lang.String $r9;

        r4 := @this: net.sourceforge.plantuml.code.CompressionZlibAttic;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 <= 200000 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("OutOfMemory");

        throw $r6;

     label1:
        r0 = newarray (byte)[i0];

        $r1 = new java.util.zip.Inflater;

        specialinvoke $r1.<java.util.zip.Inflater: void <init>(boolean)>(1);

        virtualinvoke $r1.<java.util.zip.Inflater: void setInput(byte[])>(r3);

     label2:
        i1 = virtualinvoke $r1.<java.util.zip.Inflater: int inflate(byte[])>(r0);

        $z0 = virtualinvoke $r1.<java.util.zip.Inflater: boolean finished()>();

        if $z0 != 0 goto label4;

     label3:
        return null;

     label4:
        virtualinvoke $r1.<java.util.zip.Inflater: void end()>();

        r5 = specialinvoke r4.<net.sourceforge.plantuml.code.CompressionZlibAttic: byte[] copyArray(byte[],int)>(r0, i1);

     label5:
        return r5;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.io.IOException;

        $r9 = virtualinvoke $r7.<java.util.zip.DataFormatException: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.util.zip.DataFormatException from label2 to label3 with label6;
        catch java.util.zip.DataFormatException from label4 to label5 with label6;
    }

    private byte[] copyArray(byte[], int)
    {
        int i0;
        byte[] r0, r1;
        net.sourceforge.plantuml.code.CompressionZlibAttic r2;

        r2 := @this: net.sourceforge.plantuml.code.CompressionZlibAttic;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0);

        return r0;
    }

    static void <clinit>()
    {
        <net.sourceforge.plantuml.code.CompressionZlibAttic: int COMPRESSION_LEVEL> = 9;

        <net.sourceforge.plantuml.code.CompressionZlibAttic: boolean USE_ZOPFLI> = 0;

        return;
    }
}
