public class net.sourceforge.plantuml.project.lang.SubjectDaysAsDates extends java.lang.Object implements net.sourceforge.plantuml.project.lang.Subject
{

    public void <init>()
    {
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r0;

        r0 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.command.regex.IRegex toRegex()
    {
        net.sourceforge.plantuml.command.regex.RegexOr $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r2;
        net.sourceforge.plantuml.command.regex.IRegex $r3, $r4, $r5, $r6;

        r2 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates: net.sourceforge.plantuml.command.regex.IRegex toRegexB()>();

        $r1[0] = $r3;

        $r4 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates: net.sourceforge.plantuml.command.regex.IRegex toRegexE()>();

        $r1[1] = $r4;

        $r5 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates: net.sourceforge.plantuml.command.regex.IRegex andRegex()>();

        $r1[2] = $r5;

        $r6 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates: net.sourceforge.plantuml.command.regex.IRegex thenRegex()>();

        $r1[3] = $r6;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexB()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r15;

        r15 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[13];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BYEAR1", "([\\d]{4})");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BMONTH1", "([\\d]{1,2})");

        $r1[2] = $r4;

        $r5 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r5.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[3] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BDAY1", "([\\d]{1,2})");

        $r1[4] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[5] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("to");

        $r1[6] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[7] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BYEAR2", "([\\d]{4})");

        $r1[8] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[9] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BMONTH2", "([\\d]{1,2})");

        $r1[10] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[11] = $r13;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BDAY2", "([\\d]{1,2})");

        $r1[12] = $r14;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexE()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r9;

        r9 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[7];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[dD]\\+");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("ECOUNT1", "([\\d]+)");

        $r1[1] = $r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[2] = $r4;

        $r5 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r5.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("to");

        $r1[3] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[4] = $r6;

        $r7 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r7.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[dD]\\+");

        $r1[5] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("ECOUNT2", "([\\d]+)");

        $r1[6] = $r8;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex andRegex()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r13;

        r13 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[11];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BYEAR3", "([\\d]{4})");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BMONTH3", "([\\d]{1,2})");

        $r1[2] = $r4;

        $r5 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r5.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[3] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BDAY3", "([\\d]{1,2})");

        $r1[4] = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[5] = $r7;

        $r8 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("and");

        $r1[6] = $r8;

        $r9 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[7] = $r9;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("COUNT_AND", "([\\d]+)");

        $r1[8] = $r10;

        $r11 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[9] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("days?");

        $r1[10] = $r12;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex thenRegex()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r7;

        r7 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("then");

        $r1[0] = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("COUNT_THEN", "([\\d]+)");

        $r1[2] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r1[3] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("days?");

        $r1[4] = $r6;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    public net.sourceforge.plantuml.project.Failable getMe(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r11;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r2;
        net.sourceforge.plantuml.project.GanttDiagram r3;
        net.sourceforge.plantuml.project.DaysAsDates $r4, $r6, $r8;
        net.sourceforge.plantuml.project.Failable $r5, $r7, $r9;
        net.sourceforge.plantuml.project.time.Day r10, r12, r13, r14;
        int i0, i1;

        r2 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        r3 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COUNT_AND", 0);

        if r1 == null goto label1;

        r10 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates: net.sourceforge.plantuml.project.time.Day getDate(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r3, r0, "3");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        $r8 = new net.sourceforge.plantuml.project.DaysAsDates;

        specialinvoke $r8.<net.sourceforge.plantuml.project.DaysAsDates: void <init>(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.project.time.Day,int)>(r3, r10, i0);

        $r9 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r8);

        return $r9;

     label1:
        r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COUNT_THEN", 0);

        if r11 == null goto label2;

        r12 = virtualinvoke r3.<net.sourceforge.plantuml.project.GanttDiagram: net.sourceforge.plantuml.project.time.Day getThenDate()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        $r6 = new net.sourceforge.plantuml.project.DaysAsDates;

        specialinvoke $r6.<net.sourceforge.plantuml.project.DaysAsDates: void <init>(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.project.time.Day,int)>(r3, r12, i1);

        $r7 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r6);

        return $r7;

     label2:
        r13 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates: net.sourceforge.plantuml.project.time.Day getDate(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r3, r0, "1");

        r14 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates: net.sourceforge.plantuml.project.time.Day getDate(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.command.regex.RegexResult,java.lang.String)>(r3, r0, "2");

        $r4 = new net.sourceforge.plantuml.project.DaysAsDates;

        specialinvoke $r4.<net.sourceforge.plantuml.project.DaysAsDates: void <init>(net.sourceforge.plantuml.project.time.Day,net.sourceforge.plantuml.project.time.Day)>(r13, r14);

        $r5 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r4);

        return $r5;
    }

    private net.sourceforge.plantuml.project.time.Day getDate(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult, java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r7, $r8, $r9, $r13, $r14, $r15, $r21, $r22, $r23, $r26, $r27, $r28, $r31, $r32, $r33;
        java.lang.String r3, $r5, $r6, $r10, $r11, $r16, $r17, $r24, $r25, $r29, $r30, $r34, $r35;
        java.lang.IllegalStateException $r12;
        net.sourceforge.plantuml.project.GanttDiagram r18;
        net.sourceforge.plantuml.project.time.Day $r19, $r20, $r36;
        int i0, i1, i2, i3;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r37;

        r37 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        r18 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        r3 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BDAY");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r5, 0);

        if $r6 == null goto label1;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BDAY");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r24, 0);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BMONTH");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r29, 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r30);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BYEAR");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r34, 0);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r35);

        $r36 = staticinvoke <net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day create(int,int,int)>(i1, i0, i2);

        return $r36;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ECOUNT");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r10, 0);

        if $r11 == null goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ECOUNT");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>($r16, 0);

        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        $r19 = virtualinvoke r18.<net.sourceforge.plantuml.project.GanttDiagram: net.sourceforge.plantuml.project.time.Day getStartingDate()>();

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day addDays(int)>(i3);

        return $r20;

     label2:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;
    }

    public java.util.Collection getSentences()
    {
        net.sourceforge.plantuml.project.lang.SentenceSimple[] $r0;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Close $r1;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates r2;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Open $r3;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$InColor $r4;
        net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Named $r5;
        java.util.List $r6;

        r2 := @this: net.sourceforge.plantuml.project.lang.SubjectDaysAsDates;

        $r0 = newarray (net.sourceforge.plantuml.project.lang.SentenceSimple)[4];

        $r1 = new net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Close;

        specialinvoke $r1.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Close: void <init>(net.sourceforge.plantuml.project.lang.SubjectDaysAsDates)>(r2);

        $r0[0] = $r1;

        $r3 = new net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Open;

        specialinvoke $r3.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Open: void <init>(net.sourceforge.plantuml.project.lang.SubjectDaysAsDates)>(r2);

        $r0[1] = $r3;

        $r4 = new net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$InColor;

        specialinvoke $r4.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$InColor: void <init>(net.sourceforge.plantuml.project.lang.SubjectDaysAsDates)>(r2);

        $r0[2] = $r4;

        $r5 = new net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Named;

        specialinvoke $r5.<net.sourceforge.plantuml.project.lang.SubjectDaysAsDates$Named: void <init>(net.sourceforge.plantuml.project.lang.SubjectDaysAsDates)>(r2);

        $r0[3] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r6;
    }
}
