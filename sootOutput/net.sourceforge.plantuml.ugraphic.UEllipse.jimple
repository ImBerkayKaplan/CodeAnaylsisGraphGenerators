public class net.sourceforge.plantuml.ugraphic.UEllipse extends net.sourceforge.plantuml.ugraphic.AbstractShadowable implements net.sourceforge.plantuml.ugraphic.UShapeSized
{
    private final double width;
    private final double height;
    private final double start;
    private final double extend;

    public void <init>(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double,double,double)>(d0, d1, 0.0, 0.0);

        return;
    }

    public void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractShadowable: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double width> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double height> = d1;

        r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double start> = d2;

        r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double extend> = d3;

        return;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        return $d0;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        return $d0;
    }

    public final double getStart()
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double start>;

        return $d0;
    }

    public final double getExtend()
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double extend>;

        return $d0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.ugraphic.UEllipse r1;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        $d0 = r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UEllipse bigger(double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        $d4 = $d1 + d0;

        $d2 = r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        $d3 = $d2 + d0;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d4, $d3);

        $d5 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getDeltaShadow()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d5);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UEllipse scale(double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        $d4 = $d1 * d0;

        $d2 = r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        $d3 = $d2 * d0;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>($d4, $d3);

        $d5 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getDeltaShadow()>();

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d5);

        return $r0;
    }

    public double getStartingX(double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, d11, d12;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d11 := @parameter0: double;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        $d1 = d11 / $d0;

        d12 = $d1 * 2.0;

        $d3 = d12 - 1.0;

        $d2 = d12 - 1.0;

        $d4 = $d3 * $d2;

        $d5 = 1.0 - $d4;

        $d6 = staticinvoke <java.lang.Math: double sqrt(double)>($d5);

        d7 = 1.0 - $d6;

        $d8 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        $d9 = d7 * $d8;

        $d10 = $d9 / 2.0;

        return $d10;
    }

    public double getEndingX(double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, d11, d12;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d11 := @parameter0: double;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        $d1 = d11 / $d0;

        d12 = $d1 * 2.0;

        $d3 = d12 - 1.0;

        $d2 = d12 - 1.0;

        $d4 = $d3 * $d2;

        $d5 = 1.0 - $d4;

        $d6 = staticinvoke <java.lang.Math: double sqrt(double)>($d5);

        d7 = 1.0 + $d6;

        $d8 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        $d9 = d7 * $d8;

        $d10 = $d9 / 2.0;

        return $d10;
    }

    public java.awt.geom.Point2D getPointAtAngle(double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, d14;
        java.awt.geom.Point2D$Double $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d2 := @parameter0: double;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        $d3 = $d0 / 2.0;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double width>;

        $d4 = $d1 / 2.0;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>(d2);

        $d6 = $d4 * $d5;

        d7 = $d3 + $d6;

        $d8 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        $d10 = $d8 / 2.0;

        $d9 = r0.<net.sourceforge.plantuml.ugraphic.UEllipse: double height>;

        $d11 = $d9 / 2.0;

        $d12 = staticinvoke <java.lang.Math: double sin(double)>(d2);

        $d13 = $d11 * $d12;

        d14 = $d10 + $d13;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d7, d14);

        return $r1;
    }

    public volatile void setDeltaShadow(double)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractShadowable: void setDeltaShadow(double)>(d0);

        return;
    }

    public volatile double getDeltaShadow()
    {
        net.sourceforge.plantuml.ugraphic.UEllipse r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UEllipse;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.AbstractShadowable: double getDeltaShadow()>();

        return $d0;
    }
}
