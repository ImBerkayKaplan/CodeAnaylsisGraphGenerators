public final enum class net.sourceforge.plantuml.project.time.DayOfWeek extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.project.time.DayOfWeek MONDAY;
    public static final enum net.sourceforge.plantuml.project.time.DayOfWeek TUESDAY;
    public static final enum net.sourceforge.plantuml.project.time.DayOfWeek WEDNESDAY;
    public static final enum net.sourceforge.plantuml.project.time.DayOfWeek THURSDAY;
    public static final enum net.sourceforge.plantuml.project.time.DayOfWeek FRIDAY;
    public static final enum net.sourceforge.plantuml.project.time.DayOfWeek SATURDAY;
    public static final enum net.sourceforge.plantuml.project.time.DayOfWeek SUNDAY;
    private static final java.util.Calendar gmt;
    private static final java.text.SimpleDateFormat dateFormatGmt;
    private final int legacy;
    private static final net.sourceforge.plantuml.project.time.DayOfWeek[] $VALUES;

    public static net.sourceforge.plantuml.project.time.DayOfWeek[] values()
    {
        net.sourceforge.plantuml.project.time.DayOfWeek[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.project.time.DayOfWeek[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.project.time.DayOfWeek valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.project.time.DayOfWeek $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/project/time/DayOfWeek;", r0);

        $r2 = (net.sourceforge.plantuml.project.time.DayOfWeek) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        net.sourceforge.plantuml.project.time.DayOfWeek r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: net.sourceforge.plantuml.project.time.DayOfWeek;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<net.sourceforge.plantuml.project.time.DayOfWeek: int legacy> = i1;

        return;
    }

    public int getLegacyJavaValue()
    {
        net.sourceforge.plantuml.project.time.DayOfWeek r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.project.time.DayOfWeek;

        $i0 = r0.<net.sourceforge.plantuml.project.time.DayOfWeek: int legacy>;

        return $i0;
    }

    public static synchronized net.sourceforge.plantuml.project.time.DayOfWeek fromTime(long)
    {
        long l0;
        java.util.Calendar $r0, $r1;
        int i1, $i2;
        net.sourceforge.plantuml.project.time.DayOfWeek[] $r2;
        net.sourceforge.plantuml.project.time.DayOfWeek $r3, $r4;

        l0 := @parameter0: long;

        $r0 = <net.sourceforge.plantuml.project.time.DayOfWeek: java.util.Calendar gmt>;

        virtualinvoke $r0.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r1 = <net.sourceforge.plantuml.project.time.DayOfWeek: java.util.Calendar gmt>;

        i1 = virtualinvoke $r1.<java.util.Calendar: int get(int)>(7);

        if i1 != 1 goto label1;

        $r4 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek SUNDAY>;

        return $r4;

     label1:
        $r2 = staticinvoke <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] values()>();

        $i2 = i1 - 2;

        $r3 = $r2[$i2];

        return $r3;
    }

    public static java.lang.String getRegexString()
    {
        java.lang.StringBuilder $r0, $r5, $r8, $r9;
        net.sourceforge.plantuml.project.time.DayOfWeek[] r2;
        int i0, $i1, i2;
        java.lang.String $r3, $r6, $r7, $r10;
        net.sourceforge.plantuml.project.time.DayOfWeek r4;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        r2 = staticinvoke <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] values()>();

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = r2[i2];

        $i1 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.project.time.DayOfWeek: java.lang.String name()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a-z]*");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static net.sourceforge.plantuml.project.time.DayOfWeek fromString(java.lang.String)
    {
        java.lang.String $r0, $r4, r5, r6;
        net.sourceforge.plantuml.project.time.DayOfWeek[] r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r2;
        net.sourceforge.plantuml.project.time.DayOfWeek r3;
        boolean $z0;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goUpperCase(java.lang.String)>(r5);

        r6 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        r1 = staticinvoke <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] values()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.project.time.DayOfWeek: java.lang.String name()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>(r6);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    public net.sourceforge.plantuml.project.time.DayOfWeek next()
    {
        net.sourceforge.plantuml.project.time.DayOfWeek[] $r0;
        net.sourceforge.plantuml.project.time.DayOfWeek r1, $r2;
        int $i0, $i1, $i2;

        r1 := @this: net.sourceforge.plantuml.project.time.DayOfWeek;

        $r0 = staticinvoke <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] values()>();

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.project.time.DayOfWeek: int ordinal()>();

        $i1 = $i0 + 1;

        $i2 = $i1 % 7;

        $r2 = $r0[$i2];

        return $r2;
    }

    public static net.sourceforge.plantuml.project.time.DayOfWeek fromH(int)
    {
        net.sourceforge.plantuml.project.time.DayOfWeek[] $r0;
        int i0, $i1, $i2;
        net.sourceforge.plantuml.project.time.DayOfWeek $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] values()>();

        $i1 = i0 + 5;

        $i2 = $i1 % 7;

        $r1 = $r0[$i2];

        return $r1;
    }

    public java.lang.String shortName(java.util.Locale)
    {
        java.util.Locale r0, $r1;
        net.sourceforge.plantuml.project.time.DayOfWeek r2;
        java.lang.String $r3, $r6, r7, $r8, $r9, $r10, $r11;
        java.time.DayOfWeek $r4;
        java.time.format.TextStyle $r5;
        int $i0;

        r2 := @this: net.sourceforge.plantuml.project.time.DayOfWeek;

        r0 := @parameter0: java.util.Locale;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        if r0 != $r1 goto label1;

        $r9 = virtualinvoke r2.<net.sourceforge.plantuml.project.time.DayOfWeek: java.lang.String name()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $r11 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String capitalize(java.lang.String)>($r10);

        return $r11;

     label1:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.project.time.DayOfWeek: java.lang.String toString()>();

        $r4 = staticinvoke <java.time.DayOfWeek: java.time.DayOfWeek valueOf(java.lang.String)>($r3);

        $r5 = <java.time.format.TextStyle: java.time.format.TextStyle SHORT_STANDALONE>;

        $r6 = virtualinvoke $r4.<java.time.DayOfWeek: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>($r5, r0);

        r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String capitalize(java.lang.String)>($r6);

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 <= 2 goto label2;

        $r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        return $r8;

     label2:
        return r7;
    }

    private static net.sourceforge.plantuml.project.time.DayOfWeek[] $values()
    {
        net.sourceforge.plantuml.project.time.DayOfWeek[] $r0;
        net.sourceforge.plantuml.project.time.DayOfWeek $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        $r0 = newarray (net.sourceforge.plantuml.project.time.DayOfWeek)[7];

        $r1 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek MONDAY>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek TUESDAY>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek WEDNESDAY>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek THURSDAY>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek FRIDAY>;

        $r0[4] = $r5;

        $r6 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek SATURDAY>;

        $r0[5] = $r6;

        $r7 = <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek SUNDAY>;

        $r0[6] = $r7;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.project.time.DayOfWeek $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.project.time.DayOfWeek[] $r7;
        java.util.TimeZone $r8, $r13;
        java.util.Calendar $r9;
        java.text.SimpleDateFormat $r10, $r12;
        java.util.Locale $r11;

        $r0 = new net.sourceforge.plantuml.project.time.DayOfWeek;

        specialinvoke $r0.<net.sourceforge.plantuml.project.time.DayOfWeek: void <init>(java.lang.String,int,int)>("MONDAY", 0, 2);

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek MONDAY> = $r0;

        $r1 = new net.sourceforge.plantuml.project.time.DayOfWeek;

        specialinvoke $r1.<net.sourceforge.plantuml.project.time.DayOfWeek: void <init>(java.lang.String,int,int)>("TUESDAY", 1, 3);

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek TUESDAY> = $r1;

        $r2 = new net.sourceforge.plantuml.project.time.DayOfWeek;

        specialinvoke $r2.<net.sourceforge.plantuml.project.time.DayOfWeek: void <init>(java.lang.String,int,int)>("WEDNESDAY", 2, 4);

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek WEDNESDAY> = $r2;

        $r3 = new net.sourceforge.plantuml.project.time.DayOfWeek;

        specialinvoke $r3.<net.sourceforge.plantuml.project.time.DayOfWeek: void <init>(java.lang.String,int,int)>("THURSDAY", 3, 5);

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek THURSDAY> = $r3;

        $r4 = new net.sourceforge.plantuml.project.time.DayOfWeek;

        specialinvoke $r4.<net.sourceforge.plantuml.project.time.DayOfWeek: void <init>(java.lang.String,int,int)>("FRIDAY", 4, 6);

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek FRIDAY> = $r4;

        $r5 = new net.sourceforge.plantuml.project.time.DayOfWeek;

        specialinvoke $r5.<net.sourceforge.plantuml.project.time.DayOfWeek: void <init>(java.lang.String,int,int)>("SATURDAY", 5, 7);

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek SATURDAY> = $r5;

        $r6 = new net.sourceforge.plantuml.project.time.DayOfWeek;

        specialinvoke $r6.<net.sourceforge.plantuml.project.time.DayOfWeek: void <init>(java.lang.String,int,int)>("SUNDAY", 6, 1);

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek SUNDAY> = $r6;

        $r7 = staticinvoke <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] $values()>();

        <net.sourceforge.plantuml.project.time.DayOfWeek: net.sourceforge.plantuml.project.time.DayOfWeek[] $VALUES> = $r7;

        $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r8);

        <net.sourceforge.plantuml.project.time.DayOfWeek: java.util.Calendar gmt> = $r9;

        $r10 = new java.text.SimpleDateFormat;

        $r11 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r10.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("dd MMM yyyy HH:mm:ss.SSS", $r11);

        <net.sourceforge.plantuml.project.time.DayOfWeek: java.text.SimpleDateFormat dateFormatGmt> = $r10;

        $r12 = <net.sourceforge.plantuml.project.time.DayOfWeek: java.text.SimpleDateFormat dateFormatGmt>;

        $r13 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r12.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r13);

        return;
    }
}
