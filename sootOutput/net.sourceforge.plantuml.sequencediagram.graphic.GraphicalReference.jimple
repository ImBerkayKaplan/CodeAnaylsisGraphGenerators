class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference extends net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final net.sourceforge.plantuml.skin.Component comp;
    private final net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox1;
    private final net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox2;
    private final net.sourceforge.plantuml.Url url;

    public void <init>(double, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox, net.sourceforge.plantuml.Url)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r0;
        double d0;
        net.sourceforge.plantuml.Url r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r3, $r5, r6, $r8;
        java.lang.Object $r4, $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        d0 := @parameter0: double;

        r2 := @parameter1: net.sourceforge.plantuml.skin.Component;

        r3 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r6 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r1 := @parameter4: net.sourceforge.plantuml.Url;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void <init>(double)>(d0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.Url url> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.skin.Component comp> = r2;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r4;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox1> = $r5;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $r8 = (net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox) $r7;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox2> = $r8;

        return;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r1;
        double d0, $d1, d2, $d3, $d4, d5, d6, $d7, d8;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2;
        net.sourceforge.plantuml.skin.Component $r3, $r5, $r9;
        net.sourceforge.plantuml.Dimension2DDouble $r4;
        net.sourceforge.plantuml.Url $r7, $r11, $r12;
        net.sourceforge.plantuml.skin.Area $r8;
        net.sourceforge.plantuml.skin.Context2D r10;
        net.sourceforge.plantuml.ugraphic.UGraphic r13, r14;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        r13 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d8 := @parameter1: double;

        r10 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r0 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r2 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: double getStartingY()>();

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, $d1);

        r14 = interfaceinvoke r13.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.skin.Component comp>;

        d2 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        d5 = $d3 - $d4;

        d6 = staticinvoke <java.lang.Math: double max(double,double)>(d2, d5);

        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r5 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.skin.Component comp>;

        $d7 = interfaceinvoke $r5.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d6, $d7);

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.Url url>;

        if $r7 == null goto label1;

        $r12 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r14.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r12);

     label1:
        $r9 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.skin.Component comp>;

        $r8 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r8.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r4);

        interfaceinvoke $r9.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r14, $r8, r10);

        $r11 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.Url url>;

        if $r11 == null goto label2;

        interfaceinvoke r14.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label2:
        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.skin.Component comp>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r2, $r3;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox1>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox2>;

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        return $d2;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r2, $r3;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox1>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox livingParticipantBox2>;

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        return $d2;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
}
