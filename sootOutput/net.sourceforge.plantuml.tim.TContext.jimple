public class net.sourceforge.plantuml.tim.TContext extends java.lang.Object
{
    private final java.util.List resultList;
    private final java.util.List debug;
    public final net.sourceforge.plantuml.tim.FunctionsSet functionsSet;
    private net.sourceforge.plantuml.preproc.ImportedFiles importedFiles;
    private final java.nio.charset.Charset charset;
    private final java.util.Map subs;
    private final net.sourceforge.plantuml.DefinitionsContainer definitionsContainer;
    private final java.util.Set filesUsedCurrent;
    private java.lang.String pendingAdd;
    static final boolean $assertionsDisabled;

    public java.util.Set getFilesUsedCurrent()
    {
        net.sourceforge.plantuml.tim.TContext r0;
        java.util.Set $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.Set filesUsedCurrent>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    private void addStandardFunctions(net.sourceforge.plantuml.preproc.Defines)
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.stdlib.Strlen $r1;
        net.sourceforge.plantuml.tim.FunctionsSet $r2, $r4, $r6, $r8, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r79, $r81, $r83, $r85;
        net.sourceforge.plantuml.tim.stdlib.Substr $r3;
        net.sourceforge.plantuml.tim.stdlib.FileExists $r5;
        net.sourceforge.plantuml.tim.stdlib.Getenv $r7;
        net.sourceforge.plantuml.tim.stdlib.Dirpath $r9;
        net.sourceforge.plantuml.preproc.Defines r10;
        net.sourceforge.plantuml.tim.stdlib.Filename $r12;
        net.sourceforge.plantuml.tim.stdlib.DateFunction $r14;
        net.sourceforge.plantuml.tim.stdlib.Strpos $r16;
        net.sourceforge.plantuml.tim.stdlib.InvokeProcedure $r18;
        net.sourceforge.plantuml.tim.stdlib.AlwaysFalse $r20;
        net.sourceforge.plantuml.tim.stdlib.AlwaysTrue $r22;
        net.sourceforge.plantuml.tim.stdlib.LogicalNot $r24;
        net.sourceforge.plantuml.tim.stdlib.FunctionExists $r26;
        net.sourceforge.plantuml.tim.stdlib.VariableExists $r28;
        net.sourceforge.plantuml.tim.stdlib.CallUserFunction $r30;
        net.sourceforge.plantuml.tim.stdlib.RetrieveProcedure $r32;
        net.sourceforge.plantuml.tim.stdlib.SetVariableValue $r34;
        net.sourceforge.plantuml.tim.stdlib.GetVariableValue $r36;
        net.sourceforge.plantuml.tim.stdlib.IntVal $r38;
        net.sourceforge.plantuml.tim.stdlib.GetVersion $r40;
        net.sourceforge.plantuml.tim.stdlib.Upper $r42;
        net.sourceforge.plantuml.tim.stdlib.Lower $r44;
        net.sourceforge.plantuml.tim.stdlib.StringFunction $r46;
        net.sourceforge.plantuml.tim.stdlib.Newline $r48;
        net.sourceforge.plantuml.tim.stdlib.Feature $r50;
        net.sourceforge.plantuml.tim.stdlib.Lighten $r52;
        net.sourceforge.plantuml.tim.stdlib.Darken $r54;
        net.sourceforge.plantuml.tim.stdlib.IsDark $r56;
        net.sourceforge.plantuml.tim.stdlib.IsLight $r58;
        net.sourceforge.plantuml.tim.stdlib.ReverseHsluvColor $r60;
        net.sourceforge.plantuml.tim.stdlib.ReverseColor $r62;
        net.sourceforge.plantuml.tim.stdlib.Eval $r64;
        net.sourceforge.plantuml.tim.stdlib.Hex2dec $r66;
        net.sourceforge.plantuml.tim.stdlib.Dec2hex $r68;
        net.sourceforge.plantuml.tim.stdlib.HslColor $r70;
        net.sourceforge.plantuml.tim.stdlib.LoadJson $r72;
        net.sourceforge.plantuml.tim.stdlib.Chr $r74;
        net.sourceforge.plantuml.tim.stdlib.Size $r76;
        net.sourceforge.plantuml.tim.stdlib.GetJsonKey $r78;
        net.sourceforge.plantuml.tim.stdlib.GetJsonType $r80;
        net.sourceforge.plantuml.tim.stdlib.SplitStr $r82;
        net.sourceforge.plantuml.tim.stdlib.JsonKeyExists $r84;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r10 := @parameter0: net.sourceforge.plantuml.preproc.Defines;

        $r2 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r1 = new net.sourceforge.plantuml.tim.stdlib.Strlen;

        specialinvoke $r1.<net.sourceforge.plantuml.tim.stdlib.Strlen: void <init>()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r1);

        $r4 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r3 = new net.sourceforge.plantuml.tim.stdlib.Substr;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.stdlib.Substr: void <init>()>();

        virtualinvoke $r4.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r3);

        $r6 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r5 = new net.sourceforge.plantuml.tim.stdlib.FileExists;

        specialinvoke $r5.<net.sourceforge.plantuml.tim.stdlib.FileExists: void <init>()>();

        virtualinvoke $r6.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r5);

        $r8 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r7 = new net.sourceforge.plantuml.tim.stdlib.Getenv;

        specialinvoke $r7.<net.sourceforge.plantuml.tim.stdlib.Getenv: void <init>()>();

        virtualinvoke $r8.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r7);

        $r11 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r9 = new net.sourceforge.plantuml.tim.stdlib.Dirpath;

        specialinvoke $r9.<net.sourceforge.plantuml.tim.stdlib.Dirpath: void <init>(net.sourceforge.plantuml.preproc.Defines)>(r10);

        virtualinvoke $r11.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r9);

        $r13 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r12 = new net.sourceforge.plantuml.tim.stdlib.Filename;

        specialinvoke $r12.<net.sourceforge.plantuml.tim.stdlib.Filename: void <init>(net.sourceforge.plantuml.preproc.Defines)>(r10);

        virtualinvoke $r13.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r12);

        $r15 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r14 = new net.sourceforge.plantuml.tim.stdlib.DateFunction;

        specialinvoke $r14.<net.sourceforge.plantuml.tim.stdlib.DateFunction: void <init>()>();

        virtualinvoke $r15.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r14);

        $r17 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r16 = new net.sourceforge.plantuml.tim.stdlib.Strpos;

        specialinvoke $r16.<net.sourceforge.plantuml.tim.stdlib.Strpos: void <init>()>();

        virtualinvoke $r17.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r16);

        $r19 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r18 = new net.sourceforge.plantuml.tim.stdlib.InvokeProcedure;

        specialinvoke $r18.<net.sourceforge.plantuml.tim.stdlib.InvokeProcedure: void <init>()>();

        virtualinvoke $r19.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r18);

        $r21 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r20 = new net.sourceforge.plantuml.tim.stdlib.AlwaysFalse;

        specialinvoke $r20.<net.sourceforge.plantuml.tim.stdlib.AlwaysFalse: void <init>()>();

        virtualinvoke $r21.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r20);

        $r23 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r22 = new net.sourceforge.plantuml.tim.stdlib.AlwaysTrue;

        specialinvoke $r22.<net.sourceforge.plantuml.tim.stdlib.AlwaysTrue: void <init>()>();

        virtualinvoke $r23.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r22);

        $r25 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r24 = new net.sourceforge.plantuml.tim.stdlib.LogicalNot;

        specialinvoke $r24.<net.sourceforge.plantuml.tim.stdlib.LogicalNot: void <init>()>();

        virtualinvoke $r25.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r24);

        $r27 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r26 = new net.sourceforge.plantuml.tim.stdlib.FunctionExists;

        specialinvoke $r26.<net.sourceforge.plantuml.tim.stdlib.FunctionExists: void <init>()>();

        virtualinvoke $r27.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r26);

        $r29 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r28 = new net.sourceforge.plantuml.tim.stdlib.VariableExists;

        specialinvoke $r28.<net.sourceforge.plantuml.tim.stdlib.VariableExists: void <init>()>();

        virtualinvoke $r29.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r28);

        $r31 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r30 = new net.sourceforge.plantuml.tim.stdlib.CallUserFunction;

        specialinvoke $r30.<net.sourceforge.plantuml.tim.stdlib.CallUserFunction: void <init>()>();

        virtualinvoke $r31.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r30);

        $r33 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r32 = new net.sourceforge.plantuml.tim.stdlib.RetrieveProcedure;

        specialinvoke $r32.<net.sourceforge.plantuml.tim.stdlib.RetrieveProcedure: void <init>()>();

        virtualinvoke $r33.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r32);

        $r35 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r34 = new net.sourceforge.plantuml.tim.stdlib.SetVariableValue;

        specialinvoke $r34.<net.sourceforge.plantuml.tim.stdlib.SetVariableValue: void <init>()>();

        virtualinvoke $r35.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r34);

        $r37 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r36 = new net.sourceforge.plantuml.tim.stdlib.GetVariableValue;

        specialinvoke $r36.<net.sourceforge.plantuml.tim.stdlib.GetVariableValue: void <init>()>();

        virtualinvoke $r37.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r36);

        $r39 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r38 = new net.sourceforge.plantuml.tim.stdlib.IntVal;

        specialinvoke $r38.<net.sourceforge.plantuml.tim.stdlib.IntVal: void <init>()>();

        virtualinvoke $r39.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r38);

        $r41 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r40 = new net.sourceforge.plantuml.tim.stdlib.GetVersion;

        specialinvoke $r40.<net.sourceforge.plantuml.tim.stdlib.GetVersion: void <init>()>();

        virtualinvoke $r41.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r40);

        $r43 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r42 = new net.sourceforge.plantuml.tim.stdlib.Upper;

        specialinvoke $r42.<net.sourceforge.plantuml.tim.stdlib.Upper: void <init>()>();

        virtualinvoke $r43.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r42);

        $r45 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r44 = new net.sourceforge.plantuml.tim.stdlib.Lower;

        specialinvoke $r44.<net.sourceforge.plantuml.tim.stdlib.Lower: void <init>()>();

        virtualinvoke $r45.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r44);

        $r47 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r46 = new net.sourceforge.plantuml.tim.stdlib.StringFunction;

        specialinvoke $r46.<net.sourceforge.plantuml.tim.stdlib.StringFunction: void <init>()>();

        virtualinvoke $r47.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r46);

        $r49 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r48 = new net.sourceforge.plantuml.tim.stdlib.Newline;

        specialinvoke $r48.<net.sourceforge.plantuml.tim.stdlib.Newline: void <init>()>();

        virtualinvoke $r49.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r48);

        $r51 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r50 = new net.sourceforge.plantuml.tim.stdlib.Feature;

        specialinvoke $r50.<net.sourceforge.plantuml.tim.stdlib.Feature: void <init>()>();

        virtualinvoke $r51.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r50);

        $r53 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r52 = new net.sourceforge.plantuml.tim.stdlib.Lighten;

        specialinvoke $r52.<net.sourceforge.plantuml.tim.stdlib.Lighten: void <init>()>();

        virtualinvoke $r53.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r52);

        $r55 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r54 = new net.sourceforge.plantuml.tim.stdlib.Darken;

        specialinvoke $r54.<net.sourceforge.plantuml.tim.stdlib.Darken: void <init>()>();

        virtualinvoke $r55.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r54);

        $r57 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r56 = new net.sourceforge.plantuml.tim.stdlib.IsDark;

        specialinvoke $r56.<net.sourceforge.plantuml.tim.stdlib.IsDark: void <init>()>();

        virtualinvoke $r57.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r56);

        $r59 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r58 = new net.sourceforge.plantuml.tim.stdlib.IsLight;

        specialinvoke $r58.<net.sourceforge.plantuml.tim.stdlib.IsLight: void <init>()>();

        virtualinvoke $r59.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r58);

        $r61 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r60 = new net.sourceforge.plantuml.tim.stdlib.ReverseHsluvColor;

        specialinvoke $r60.<net.sourceforge.plantuml.tim.stdlib.ReverseHsluvColor: void <init>()>();

        virtualinvoke $r61.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r60);

        $r63 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r62 = new net.sourceforge.plantuml.tim.stdlib.ReverseColor;

        specialinvoke $r62.<net.sourceforge.plantuml.tim.stdlib.ReverseColor: void <init>()>();

        virtualinvoke $r63.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r62);

        $r65 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r64 = new net.sourceforge.plantuml.tim.stdlib.Eval;

        specialinvoke $r64.<net.sourceforge.plantuml.tim.stdlib.Eval: void <init>()>();

        virtualinvoke $r65.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r64);

        $r67 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r66 = new net.sourceforge.plantuml.tim.stdlib.Hex2dec;

        specialinvoke $r66.<net.sourceforge.plantuml.tim.stdlib.Hex2dec: void <init>()>();

        virtualinvoke $r67.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r66);

        $r69 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r68 = new net.sourceforge.plantuml.tim.stdlib.Dec2hex;

        specialinvoke $r68.<net.sourceforge.plantuml.tim.stdlib.Dec2hex: void <init>()>();

        virtualinvoke $r69.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r68);

        $r71 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r70 = new net.sourceforge.plantuml.tim.stdlib.HslColor;

        specialinvoke $r70.<net.sourceforge.plantuml.tim.stdlib.HslColor: void <init>()>();

        virtualinvoke $r71.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r70);

        $r73 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r72 = new net.sourceforge.plantuml.tim.stdlib.LoadJson;

        specialinvoke $r72.<net.sourceforge.plantuml.tim.stdlib.LoadJson: void <init>()>();

        virtualinvoke $r73.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r72);

        $r75 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r74 = new net.sourceforge.plantuml.tim.stdlib.Chr;

        specialinvoke $r74.<net.sourceforge.plantuml.tim.stdlib.Chr: void <init>()>();

        virtualinvoke $r75.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r74);

        $r77 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r76 = new net.sourceforge.plantuml.tim.stdlib.Size;

        specialinvoke $r76.<net.sourceforge.plantuml.tim.stdlib.Size: void <init>()>();

        virtualinvoke $r77.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r76);

        $r79 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r78 = new net.sourceforge.plantuml.tim.stdlib.GetJsonKey;

        specialinvoke $r78.<net.sourceforge.plantuml.tim.stdlib.GetJsonKey: void <init>()>();

        virtualinvoke $r79.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r78);

        $r81 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r80 = new net.sourceforge.plantuml.tim.stdlib.GetJsonType;

        specialinvoke $r80.<net.sourceforge.plantuml.tim.stdlib.GetJsonType: void <init>()>();

        virtualinvoke $r81.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r80);

        $r83 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r82 = new net.sourceforge.plantuml.tim.stdlib.SplitStr;

        specialinvoke $r82.<net.sourceforge.plantuml.tim.stdlib.SplitStr: void <init>()>();

        virtualinvoke $r83.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r82);

        $r85 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r84 = new net.sourceforge.plantuml.tim.stdlib.JsonKeyExists;

        specialinvoke $r84.<net.sourceforge.plantuml.tim.stdlib.JsonKeyExists: void <init>()>();

        virtualinvoke $r85.<net.sourceforge.plantuml.tim.FunctionsSet: void addFunction(net.sourceforge.plantuml.tim.TFunction)>($r84);

        return;
    }

    public void <init>(net.sourceforge.plantuml.preproc.ImportedFiles, net.sourceforge.plantuml.preproc.Defines, java.nio.charset.Charset, net.sourceforge.plantuml.DefinitionsContainer)
    {
        net.sourceforge.plantuml.tim.TContext r0;
        java.util.ArrayList $r1, $r2;
        net.sourceforge.plantuml.tim.FunctionsSet $r3;
        java.util.HashMap $r4;
        java.util.HashSet $r5;
        net.sourceforge.plantuml.DefinitionsContainer r6;
        net.sourceforge.plantuml.preproc.ImportedFiles r7;
        java.nio.charset.Charset r8, $r10;
        java.lang.Object $r9;
        net.sourceforge.plantuml.preproc.Defines r11;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r7 := @parameter0: net.sourceforge.plantuml.preproc.ImportedFiles;

        r11 := @parameter1: net.sourceforge.plantuml.preproc.Defines;

        r8 := @parameter2: java.nio.charset.Charset;

        r6 := @parameter3: net.sourceforge.plantuml.DefinitionsContainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.TContext: java.util.List debug> = $r2;

        $r3 = new net.sourceforge.plantuml.tim.FunctionsSet;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.FunctionsSet: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.TContext: java.util.Map subs> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.TContext: java.util.Set filesUsedCurrent> = $r5;

        r0.<net.sourceforge.plantuml.tim.TContext: java.lang.String pendingAdd> = null;

        r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.DefinitionsContainer definitionsContainer> = r6;

        r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles> = r7;

        $r9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        $r10 = (java.nio.charset.Charset) $r9;

        r0.<net.sourceforge.plantuml.tim.TContext: java.nio.charset.Charset charset> = $r10;

        specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: void addStandardFunctions(net.sourceforge.plantuml.preproc.Defines)>(r11);

        return;
    }

    public net.sourceforge.plantuml.tim.expression.Knowledge asKnowledge(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation)
    {
        net.sourceforge.plantuml.tim.TContext$1 $r0;
        net.sourceforge.plantuml.tim.TContext r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        net.sourceforge.plantuml.LineLocation r3;

        r1 := @this: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter1: net.sourceforge.plantuml.LineLocation;

        $r0 = new net.sourceforge.plantuml.tim.TContext$1;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TContext$1: void <init>(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation)>(r1, r2, r3);

        return $r0;
    }

    private net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.tim.TMemory, java.lang.String, net.sourceforge.plantuml.LineLocation) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        net.sourceforge.plantuml.LineLocation r2;
        java.lang.String r3, r4;
        net.sourceforge.plantuml.tim.expression.TValue $r5, $r7;
        java.lang.Exception $r6;
        net.sourceforge.plantuml.json.JsonValue r8;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r1, r2, r3);

     label1:
        r8 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue parse(java.lang.String)>(r4);

        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.json.JsonValue)>(r8);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r4);

        return $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private net.sourceforge.plantuml.tim.iterator.CodeIterator buildCodeIterator(net.sourceforge.plantuml.tim.TMemory, java.util.List)
    {
        net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl $r0;
        java.util.List r1, $r5, $r8, $r17, $r21, $r25, $r28, $r32, $r35, $r38;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment $r3;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment $r7;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorInnerComment $r10;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorSub $r12;
        net.sourceforge.plantuml.tim.TMemory r13;
        java.util.Map $r14;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction $r16;
        net.sourceforge.plantuml.tim.FunctionsSet $r18, $r22, $r29;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorProcedure $r20;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorIf $r24;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorLegacyDefine $r27;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile $r31;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorForeach $r34;
        net.sourceforge.plantuml.tim.iterator.CodeIteratorAffectation $r37;

        r4 := @this: net.sourceforge.plantuml.tim.TContext;

        r13 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: java.util.List;

        $r0 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl: void <init>(java.util.List)>(r1);

        $r3 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment;

        $r5 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r3.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,java.util.List)>($r0, $r5);

        $r7 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment;

        $r8 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r7.<net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,java.util.List)>($r3, $r8);

        $r10 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorInnerComment;

        specialinvoke $r10.<net.sourceforge.plantuml.tim.iterator.CodeIteratorInnerComment: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator)>($r7);

        $r12 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorSub;

        $r14 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.Map subs>;

        specialinvoke $r12.<net.sourceforge.plantuml.tim.iterator.CodeIteratorSub: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,java.util.Map,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r10, $r14, r4, r13);

        $r16 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction;

        $r18 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r17 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r16.<net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.tim.FunctionsSet,java.util.List)>($r12, r4, r13, $r18, $r17);

        $r20 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorProcedure;

        $r22 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r21 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r20.<net.sourceforge.plantuml.tim.iterator.CodeIteratorProcedure: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.tim.FunctionsSet,java.util.List)>($r16, r4, r13, $r22, $r21);

        $r24 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorIf;

        $r25 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r24.<net.sourceforge.plantuml.tim.iterator.CodeIteratorIf: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List)>($r20, r4, r13, $r25);

        $r27 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorLegacyDefine;

        $r29 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r28 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r27.<net.sourceforge.plantuml.tim.iterator.CodeIteratorLegacyDefine: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.tim.FunctionsSet,java.util.List)>($r24, r4, r13, $r29, $r28);

        $r31 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile;

        $r32 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r31.<net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List)>($r27, r4, r13, $r32);

        $r34 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorForeach;

        $r35 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r34.<net.sourceforge.plantuml.tim.iterator.CodeIteratorForeach: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List)>($r31, r4, r13, $r35);

        $r37 = new net.sourceforge.plantuml.tim.iterator.CodeIteratorAffectation;

        $r38 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        specialinvoke $r37.<net.sourceforge.plantuml.tim.iterator.CodeIteratorAffectation: void <init>(net.sourceforge.plantuml.tim.iterator.CodeIterator,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List)>($r34, r4, r13, $r38);

        return $r37;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeLines(net.sourceforge.plantuml.tim.TMemory, java.util.List, net.sourceforge.plantuml.tim.TFunctionType, boolean) throws net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        java.util.List r2;
        net.sourceforge.plantuml.tim.iterator.CodeIterator r3;
        net.sourceforge.plantuml.StringLocated $r4, r8;
        net.sourceforge.plantuml.tim.TFunctionType r5;
        boolean z0;
        net.sourceforge.plantuml.tim.EaterException $r6;
        net.sourceforge.plantuml.tim.EaterExceptionLocated $r7;
        net.sourceforge.plantuml.tim.expression.TValue r9;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r2 := @parameter1: java.util.List;

        r5 := @parameter2: net.sourceforge.plantuml.tim.TFunctionType;

        z0 := @parameter3: boolean;

        r3 = specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.iterator.CodeIterator buildCodeIterator(net.sourceforge.plantuml.tim.TMemory,java.util.List)>(r1, r2);

        r8 = null;

     label1:
        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        r8 = $r4;

        if $r4 == null goto label4;

        r9 = specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue executeOneLineSafe(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated,net.sourceforge.plantuml.tim.TFunctionType,boolean)>(r1, $r4, r5, z0);

        if r9 == null goto label3;

     label2:
        return r9;

     label3:
        interfaceinvoke r3.<net.sourceforge.plantuml.tim.iterator.CodeIterator: void next()>();

        goto label1;

     label4:
        return null;

     label5:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterExceptionLocated withLocation(net.sourceforge.plantuml.StringLocated)>(r8);

        throw $r7;

        catch net.sourceforge.plantuml.tim.EaterException from label1 to label2 with label5;
        catch net.sourceforge.plantuml.tim.EaterException from label3 to label4 with label5;
    }

    private void executeLinesInternal(net.sourceforge.plantuml.tim.TMemory, java.util.List, net.sourceforge.plantuml.tim.TFunctionType) throws net.sourceforge.plantuml.tim.EaterExceptionLocated, net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        java.util.List r2;
        net.sourceforge.plantuml.tim.iterator.CodeIterator r3;
        net.sourceforge.plantuml.StringLocated $r4;
        net.sourceforge.plantuml.tim.TFunctionType r5;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r2 := @parameter1: java.util.List;

        r5 := @parameter2: net.sourceforge.plantuml.tim.TFunctionType;

        r3 = specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.iterator.CodeIterator buildCodeIterator(net.sourceforge.plantuml.tim.TMemory,java.util.List)>(r1, r2);

     label1:
        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.tim.iterator.CodeIterator: net.sourceforge.plantuml.StringLocated peek()>();

        if $r4 == null goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue executeOneLineSafe(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated,net.sourceforge.plantuml.tim.TFunctionType,boolean)>(r1, $r4, r5, 0);

        interfaceinvoke r3.<net.sourceforge.plantuml.tim.iterator.CodeIterator: void next()>();

        goto label1;

     label2:
        return;
    }

    private net.sourceforge.plantuml.tim.expression.TValue executeOneLineSafe(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated, net.sourceforge.plantuml.tim.TFunctionType, boolean) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.StringLocated r1;
        java.util.List $r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        net.sourceforge.plantuml.tim.TFunctionType r4;
        boolean z1, $z2, $z3;
        net.sourceforge.plantuml.tim.expression.TValue $r5;
        java.lang.Exception $r6;
        net.sourceforge.plantuml.tim.EaterException $r8, $r10;
        net.sourceforge.plantuml.tim.EaterExceptionLocated $r9;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        r4 := @parameter2: net.sourceforge.plantuml.tim.TFunctionType;

        z1 := @parameter3: boolean;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue executeOneLineNotSafe(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated,net.sourceforge.plantuml.tim.TFunctionType,boolean)>(r3, r1, r4, z1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $z2 = $r6 instanceof net.sourceforge.plantuml.tim.EaterException;

        if $z2 == 0 goto label4;

        $r10 = (net.sourceforge.plantuml.tim.EaterException) $r6;

        throw $r10;

     label4:
        $z3 = $r6 instanceof net.sourceforge.plantuml.tim.EaterExceptionLocated;

        if $z3 == 0 goto label5;

        $r9 = (net.sourceforge.plantuml.tim.EaterExceptionLocated) $r6;

        throw $r9;

     label5:
        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Fatal parsing error");

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private net.sourceforge.plantuml.tim.expression.TValue executeOneLineNotSafe(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated, net.sourceforge.plantuml.tim.TFunctionType, boolean) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.StringLocated r0, $r34, $r35;
        net.sourceforge.plantuml.tim.TLineType r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r26, $r28, $r29, $r33;
        net.sourceforge.plantuml.tim.TFunctionType r10, $r11, $r12, $r13;
        java.lang.String $r16, $r22;
        boolean $z0, z1;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r21;
        net.sourceforge.plantuml.tim.EaterException $r23;
        net.sourceforge.plantuml.tim.TContext r24;
        net.sourceforge.plantuml.tim.TMemory r25;
        net.sourceforge.plantuml.tim.EaterReturn $r30;
        net.sourceforge.plantuml.tim.expression.TValue r32;

        r24 := @this: net.sourceforge.plantuml.tim.TContext;

        r25 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r0 := @parameter1: net.sourceforge.plantuml.StringLocated;

        r10 := @parameter2: net.sourceforge.plantuml.tim.TFunctionType;

        z1 := @parameter3: boolean;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r2 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDESUB>;

        if r1 != $r2 goto label01;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeIncludesub(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label01:
        $r3 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType THEME>;

        if r1 != $r3 goto label02;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeTheme(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label02:
        $r4 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE>;

        if r1 != $r4 goto label03;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeInclude(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label03:
        $r5 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType INCLUDE_DEF>;

        if r1 != $r5 goto label04;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeIncludeDef(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label04:
        $r6 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType IMPORT>;

        if r1 != $r6 goto label05;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeImport(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label05:
        $r7 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType DUMP_MEMORY>;

        if r1 != $r7 goto label06;

        $r35 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeDumpMemory(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, $r35);

        return null;

     label06:
        $r8 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType ASSERT>;

        if r1 != $r8 goto label07;

        $r34 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeAssert(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, $r34);

        return null;

     label07:
        $r9 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType UNDEF>;

        if r1 != $r9 goto label08;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeUndef(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label08:
        $r11 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        if r10 == $r11 goto label09;

        $r33 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType PLAIN>;

        if r1 != $r33 goto label09;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void addPlain(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label09:
        $r12 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        if r10 != $r12 goto label11;

        $r29 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType RETURN>;

        if r1 != $r29 goto label11;

        if z1 == 0 goto label10;

        $r30 = new net.sourceforge.plantuml.tim.EaterReturn;

        specialinvoke $r30.<net.sourceforge.plantuml.tim.EaterReturn: void <init>(net.sourceforge.plantuml.StringLocated)>(r0);

        virtualinvoke $r30.<net.sourceforge.plantuml.tim.EaterReturn: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r24, r25);

        r32 = virtualinvoke $r30.<net.sourceforge.plantuml.tim.EaterReturn: net.sourceforge.plantuml.tim.expression.TValue getValue2()>();

        return r32;

     label10:
        return null;

     label11:
        $r13 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        if r10 != $r13 goto label12;

        $r28 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType PLAIN>;

        if r1 != $r28 goto label12;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void simulatePlain(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label12:
        $r14 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType AFFECTATION_DEFINE>;

        if r1 != $r14 goto label13;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeAffectationDefine(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label13:
        if r10 != null goto label14;

        $r26 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType END_FUNCTION>;

        if r1 != $r26 goto label14;

        staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("error endfunc");

        return null;

     label14:
        $r15 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType LOG>;

        if r1 != $r15 goto label15;

        specialinvoke r24.<net.sourceforge.plantuml.tim.TContext: void executeLog(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r25, r0);

        return null;

     label15:
        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $z0 = virtualinvoke $r16.<java.lang.String: boolean matches(java.lang.String)>("^\\s+$");

        if $z0 == 0 goto label16;

        return null;

     label16:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compile Error ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r22);

        throw $r23;
    }

    private void addPlain(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        net.sourceforge.plantuml.StringLocated r2, r6, $r8, $r12, $r16;
        net.sourceforge.plantuml.StringLocated[] r3;
        java.lang.String $r4, $r10, $r13, $r15;
        int i0, i1;
        java.util.List $r7;
        java.lang.StringBuilder $r9, $r11, $r14;
        net.sourceforge.plantuml.LineLocation $r17;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r2 := @parameter1: net.sourceforge.plantuml.StringLocated;

        r3 = specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.StringLocated[] applyFunctionsAndVariablesInternal(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r1, r2);

        if r3 == null goto label3;

        $r4 = r0.<net.sourceforge.plantuml.tim.TContext: java.lang.String pendingAdd>;

        if $r4 == null goto label1;

        $r8 = new net.sourceforge.plantuml.StringLocated;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<net.sourceforge.plantuml.tim.TContext: java.lang.String pendingAdd>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = r3[0];

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = r3[0];

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        specialinvoke $r8.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>($r15, $r17);

        r3[0] = $r8;

        r0.<net.sourceforge.plantuml.tim.TContext: java.lang.String pendingAdd> = null;

     label1:
        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r6 = r3[i1];

        $r7 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void simulatePlain(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        net.sourceforge.plantuml.StringLocated r2;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r2 := @parameter1: net.sourceforge.plantuml.StringLocated;

        specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.StringLocated[] applyFunctionsAndVariablesInternal(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.StringLocated)>(r1, r2);

        return;
    }

    private void executeAffectationDefine(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterAffectationDefine $r0;
        net.sourceforge.plantuml.StringLocated r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;

        r2 := @this: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterAffectationDefine;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterAffectationDefine: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r2, r3);

        return;
    }

    private void executeDumpMemory(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterDumpMemory $r0;
        net.sourceforge.plantuml.StringLocated r1;
        net.sourceforge.plantuml.tim.TContext r3;
        net.sourceforge.plantuml.tim.TMemory r4;

        r3 := @this: net.sourceforge.plantuml.tim.TContext;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterDumpMemory;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterDumpMemory: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterDumpMemory: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r3, r4);

        return;
    }

    private void executeAssert(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterAssert $r0;
        net.sourceforge.plantuml.StringLocated r1;
        net.sourceforge.plantuml.tim.TContext r3;
        net.sourceforge.plantuml.tim.TMemory r4;

        r3 := @this: net.sourceforge.plantuml.tim.TContext;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterAssert;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterAssert: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterAssert: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r3, r4);

        return;
    }

    private void executeUndef(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterUndef $r0;
        net.sourceforge.plantuml.StringLocated r1;
        net.sourceforge.plantuml.tim.TContext r3;
        net.sourceforge.plantuml.tim.TMemory r4;

        r3 := @this: net.sourceforge.plantuml.tim.TContext;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterUndef;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterUndef: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterUndef: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r3, r4);

        return;
    }

    private net.sourceforge.plantuml.StringLocated[] applyFunctionsAndVariablesInternal(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TMemory r0;
        boolean $z0;
        net.sourceforge.plantuml.tim.TContext r1;
        net.sourceforge.plantuml.StringLocated r2, $r8;
        net.sourceforge.plantuml.LineLocation $r3, $r10;
        java.lang.String $r4, r5, $r9;
        java.lang.String[] r6;
        int $i0, $i1, $i2, i3;
        net.sourceforge.plantuml.StringLocated[] r7, $r12;
        net.sourceforge.plantuml.tim.FunctionsSet $r11;

        r1 := @this: net.sourceforge.plantuml.tim.TContext;

        r0 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r2 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.TMemory: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r11 = r1.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $i2 = virtualinvoke $r11.<net.sourceforge.plantuml.tim.FunctionsSet: int size()>();

        if $i2 != 0 goto label1;

        $r12 = newarray (net.sourceforge.plantuml.StringLocated)[1];

        $r12[0] = r2;

        return $r12;

     label1:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r5 = virtualinvoke r1.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r0, $r3, $r4);

        if r5 != null goto label2;

        return null;

     label2:
        r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $i0 = lengthof r6;

        r7 = newarray (net.sourceforge.plantuml.StringLocated)[$i0];

        i3 = 0;

     label3:
        $i1 = lengthof r6;

        if i3 >= $i1 goto label4;

        $r8 = new net.sourceforge.plantuml.StringLocated;

        $r9 = r6[i3];

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        specialinvoke $r8.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>($r9, $r10);

        r7[i3] = $r8;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r7;
    }

    public java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.lang.String) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TMemory r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r1, $r35, $r36, $r37;
        java.lang.String r3, $r4, r6, $r9, r12, $r33, $r34, $r38, r41, $r45;
        char c0;
        net.sourceforge.plantuml.tim.TContext r5;
        net.sourceforge.plantuml.tim.VariableManager $r7, $r11;
        net.sourceforge.plantuml.LineLocation r8;
        net.sourceforge.plantuml.tim.EaterFunctionCall $r13;
        net.sourceforge.plantuml.StringLocated $r14;
        net.sourceforge.plantuml.tim.TFunctionSignature $r16;
        java.util.List $r17, $r42;
        int $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, $i9;
        java.util.Map $r18, $r43;
        java.util.Set $r19;
        net.sourceforge.plantuml.tim.FunctionsSet $r21, $r40;
        net.sourceforge.plantuml.tim.TFunction r22;
        net.sourceforge.plantuml.tim.TFunctionType $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31;
        java.lang.AssertionError $r32;
        net.sourceforge.plantuml.tim.EaterException $r39;
        net.sourceforge.plantuml.tim.expression.TValue r44;

        r5 := @this: net.sourceforge.plantuml.tim.TContext;

        r0 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r8 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: java.lang.String;

        $z0 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.TMemory: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r40 = r5.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $i4 = virtualinvoke $r40.<net.sourceforge.plantuml.tim.FunctionsSet: int size()>();

        if $i4 != 0 goto label01;

        return r3;

     label01:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i5 = 0;

     label02:
        $i6 = virtualinvoke r3.<java.lang.String: int length()>();

        if i5 >= $i6 goto label11;

        c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i5);

        r6 = specialinvoke r5.<net.sourceforge.plantuml.tim.TContext: java.lang.String getFunctionNameAt(java.lang.String,int)>(r3, i5);

        if r6 == null goto label08;

        r12 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(i5);

        $r13 = new net.sourceforge.plantuml.tim.EaterFunctionCall;

        $r14 = new net.sourceforge.plantuml.StringLocated;

        specialinvoke $r14.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>(r12, r8);

        $z1 = virtualinvoke r5.<net.sourceforge.plantuml.tim.TContext: boolean isLegacyDefine(java.lang.String)>(r6);

        $z2 = virtualinvoke r5.<net.sourceforge.plantuml.tim.TContext: boolean isUnquoted(java.lang.String)>(r6);

        specialinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: void <init>(net.sourceforge.plantuml.StringLocated,boolean,boolean)>($r14, $z1, $z2);

        virtualinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r5, r0);

        $r16 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        $r17 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List getValues()>();

        $i1 = interfaceinvoke $r17.<java.util.List: int size()>();

        $r18 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map getNamedArguments()>();

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r16.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int,java.util.Set)>(r6, $i1, $r19);

        $r21 = r5.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        r22 = virtualinvoke $r21.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunction getFunctionSmart(net.sourceforge.plantuml.tim.TFunctionSignature)>($r16);

        if r22 != null goto label03;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function not found ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r38);

        throw $r39;

     label03:
        $r23 = interfaceinvoke r22.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionType getFunctionType()>();

        $r24 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType PROCEDURE>;

        if $r23 != $r24 goto label05;

        $r34 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r5.<net.sourceforge.plantuml.tim.TContext: java.lang.String pendingAdd> = $r34;

        specialinvoke r5.<net.sourceforge.plantuml.tim.TContext: void executeVoid3(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TMemory,java.lang.String,net.sourceforge.plantuml.tim.TFunction,net.sourceforge.plantuml.tim.EaterFunctionCall)>(r8, r0, r12, r22, $r13);

        $i2 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: int getCurrentPosition()>();

        i7 = i5 + $i2;

        r41 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(i7);

        $i3 = virtualinvoke r41.<java.lang.String: int length()>();

        if $i3 <= 0 goto label04;

        specialinvoke r5.<net.sourceforge.plantuml.tim.TContext: void appendToLastResult(java.lang.String)>(r41);

     label04:
        return null;

     label05:
        $r25 = interfaceinvoke r22.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionType getFunctionType()>();

        $r26 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType LEGACY_DEFINELONG>;

        if $r25 != $r26 goto label06;

        $r33 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        r5.<net.sourceforge.plantuml.tim.TContext: java.lang.String pendingAdd> = $r33;

        specialinvoke r5.<net.sourceforge.plantuml.tim.TContext: void executeVoid3(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TMemory,java.lang.String,net.sourceforge.plantuml.tim.TFunction,net.sourceforge.plantuml.tim.EaterFunctionCall)>(r8, r0, r12, r22, $r13);

        return null;

     label06:
        $z3 = <net.sourceforge.plantuml.tim.TContext: boolean $assertionsDisabled>;

        if $z3 != 0 goto label07;

        $r28 = interfaceinvoke r22.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionType getFunctionType()>();

        $r29 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        if $r28 == $r29 goto label07;

        $r30 = interfaceinvoke r22.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionType getFunctionType()>();

        $r31 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType LEGACY_DEFINE>;

        if $r30 == $r31 goto label07;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label07:
        $r42 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List getValues()>();

        $r43 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map getNamedArguments()>();

        r44 = interfaceinvoke r22.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.util.List,java.util.Map)>(r5, r0, r8, $r42, $r43);

        $r45 = virtualinvoke r44.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $i8 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.EaterFunctionCall: int getCurrentPosition()>();

        $i9 = $i8 - 1;

        i5 = i5 + $i9;

        goto label10;

     label08:
        $r7 = new net.sourceforge.plantuml.tim.VariableManager;

        specialinvoke $r7.<net.sourceforge.plantuml.tim.VariableManager: void <init>(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation)>(r5, r0, r8);

        $r9 = virtualinvoke $r7.<net.sourceforge.plantuml.tim.VariableManager: java.lang.String getVarnameAt(java.lang.String,int)>(r3, i5);

        if $r9 == null goto label09;

        $r11 = new net.sourceforge.plantuml.tim.VariableManager;

        specialinvoke $r11.<net.sourceforge.plantuml.tim.VariableManager: void <init>(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation)>(r5, r0, r8);

        i5 = virtualinvoke $r11.<net.sourceforge.plantuml.tim.VariableManager: int replaceVariables(java.lang.String,int,java.lang.StringBuilder)>(r3, i5, $r1);

        goto label10;

     label09:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label10:
        i5 = i5 + 1;

        goto label02;

     label11:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void appendToLastResult(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TContext r0;
        java.util.List $r1, $r2, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        net.sourceforge.plantuml.StringLocated r4, $r8;
        java.lang.String r7;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r7 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        r4 = (net.sourceforge.plantuml.StringLocated) $r3;

        $r6 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $r5 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r8 = virtualinvoke r4.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated append(java.lang.String)>(r7);

        interfaceinvoke $r6.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i3, $r8);

        return;
    }

    private void executeVoid3(net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.tim.TMemory, java.lang.String, net.sourceforge.plantuml.tim.TFunction, net.sourceforge.plantuml.tim.EaterFunctionCall) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TFunction r0;
        net.sourceforge.plantuml.tim.TContext r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        net.sourceforge.plantuml.tim.EaterFunctionCall r3;
        java.util.List $r4;
        java.util.Map $r5;
        net.sourceforge.plantuml.LineLocation r6;
        java.lang.String r7;

        r1 := @this: net.sourceforge.plantuml.tim.TContext;

        r6 := @parameter0: net.sourceforge.plantuml.LineLocation;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r7 := @parameter2: java.lang.String;

        r0 := @parameter3: net.sourceforge.plantuml.tim.TFunction;

        r3 := @parameter4: net.sourceforge.plantuml.tim.EaterFunctionCall;

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List getValues()>();

        $r5 = virtualinvoke r3.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map getNamedArguments()>();

        interfaceinvoke r0.<net.sourceforge.plantuml.tim.TFunction: void executeProcedureInternal(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List,java.util.Map)>(r1, r2, $r4, $r5);

        return;
    }

    private void executeImport(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterImport $r0;
        net.sourceforge.plantuml.StringLocated r1, $r2;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TMemory r5;
        net.sourceforge.plantuml.FileSystem $r6;
        net.sourceforge.plantuml.LineLocation $r7;
        java.lang.String $r8, $r9, $r15, $r17;
        boolean $z0, $z1;
        net.sourceforge.plantuml.tim.EaterException $r10, $r18;
        net.sourceforge.plantuml.preproc.ImportedFiles $r11;
        java.io.IOException $r12;
        java.lang.StringBuilder $r13, $r14, $r16;
        net.sourceforge.plantuml.security.SFile r19;

        r4 := @this: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterImport;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterImport: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterImport: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r4, r5);

     label1:
        $r6 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        $r7 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        $r8 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterImport: java.lang.String getLocation()>();

        $r9 = virtualinvoke r4.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r5, $r7, $r8);

        r19 = virtualinvoke $r6.<net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.security.SFile getFile(java.lang.String)>($r9);

        $z0 = virtualinvoke r19.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r19.<net.sourceforge.plantuml.security.SFile: boolean isDirectory()>();

        if $z1 != 0 goto label3;

        $r11 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        virtualinvoke $r11.<net.sourceforge.plantuml.preproc.ImportedFiles: void add(net.sourceforge.plantuml.security.SFile)>(r19);

     label2:
        return;

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.io.IOException: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot import ");

        $r15 = virtualinvoke $r12.<java.io.IOException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r17);

        throw $r18;

     label5:
        $r10 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Cannot import");

        throw $r10;

        catch java.io.IOException from label1 to label2 with label4;
    }

    private void executeLog(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterLog $r0;
        net.sourceforge.plantuml.StringLocated r1, $r2;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TMemory r5;

        r4 := @this: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterLog;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterLog: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterLog: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r4, r5);

        return;
    }

    public net.sourceforge.plantuml.preproc.FileWithSuffix getFileWithSuffix(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, r2;
        net.sourceforge.plantuml.tim.TContext r3;
        net.sourceforge.plantuml.preproc.ImportedFiles $r4;
        net.sourceforge.plantuml.preproc.FileWithSuffix r5;

        r3 := @this: net.sourceforge.plantuml.tim.TContext;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <net.sourceforge.plantuml.theme.ThemeUtils: java.lang.String getFullPath(java.lang.String,java.lang.String)>(r0, r1);

        $r4 = r3.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.preproc.FileWithSuffix getFile(java.lang.String,java.lang.String)>(r2, null);

        return r5;
    }

    private void executeIncludesub(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterIncludesub $r0;
        net.sourceforge.plantuml.StringLocated r1, $r2;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TMemory r5;
        java.lang.String r6, $r11, r15, r16, $r28, $r36;
        int i0, $i1;
        java.util.List $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r25, $r26, $r27, $r33, $r34, $r35;
        net.sourceforge.plantuml.tim.EaterException $r12, $r29, $r37;
        java.util.Map $r13;
        java.lang.Object $r14;
        net.sourceforge.plantuml.preproc.ImportedFiles $r17, $r18, $r20, r40;
        boolean $z0;
        net.sourceforge.plantuml.AParentFolder $r19;
        java.nio.charset.Charset $r21;
        java.io.Reader r22;
        net.sourceforge.plantuml.LineLocation $r23;
        net.sourceforge.plantuml.preproc.UncommentReadLine $r24;
        java.lang.Throwable $r30, $r38;
        java.io.IOException $r32;
        net.sourceforge.plantuml.preproc.Sub r41;
        net.sourceforge.plantuml.preproc.FileWithSuffix r42;
        net.sourceforge.plantuml.preproc.ReadLine r43;

        r4 := @this: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        r40 = null;

     label01:
        $r0 = new net.sourceforge.plantuml.tim.EaterIncludesub;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterIncludesub: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterIncludesub: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r4, r5);

        r6 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterIncludesub: java.lang.String getLocation()>();

        i0 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(33);

        r41 = null;

        if i0 == -1 goto label09;

        r15 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i1 = i0 + 1;

        r16 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>($i1);

     label02:
        $r17 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        r42 = virtualinvoke $r17.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.preproc.FileWithSuffix getFile(java.lang.String,java.lang.String)>(r15, null);

        $z0 = virtualinvoke r42.<net.sourceforge.plantuml.preproc.FileWithSuffix: boolean fileOk()>();

        if $z0 == 0 goto label07;

        r40 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        $r18 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        $r19 = virtualinvoke r42.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AParentFolder getParentFile()>();

        $r20 = virtualinvoke $r18.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.preproc.ImportedFiles withCurrentDir(net.sourceforge.plantuml.AParentFolder)>($r19);

        r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles> = $r20;

        $r21 = r4.<net.sourceforge.plantuml.tim.TContext: java.nio.charset.Charset charset>;

        r22 = virtualinvoke r42.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.io.Reader getReader(java.nio.charset.Charset)>($r21);

        if r22 != null goto label03;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot include ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r28);

        throw $r29;

     label03:
        $r23 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        r43 = staticinvoke <net.sourceforge.plantuml.preproc.ReadLineReader: net.sourceforge.plantuml.preproc.ReadLine create(java.io.Reader,java.lang.String,net.sourceforge.plantuml.LineLocation)>(r22, r6, $r23);

        $r24 = new net.sourceforge.plantuml.preproc.UncommentReadLine;

        specialinvoke $r24.<net.sourceforge.plantuml.preproc.UncommentReadLine: void <init>(net.sourceforge.plantuml.preproc.ReadLine)>(r43);

        r41 = staticinvoke <net.sourceforge.plantuml.preproc.Sub: net.sourceforge.plantuml.preproc.Sub fromFile(net.sourceforge.plantuml.preproc.ReadLine,java.lang.String,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r24, r16, r4, r5);

     label04:
        virtualinvoke r22.<java.io.Reader: void close()>();

        goto label07;

     label05:
        $r38 := @caughtexception;

     label06:
        virtualinvoke r22.<java.io.Reader: void close()>();

        throw $r38;

     label07:
        goto label09;

     label08:
        $r32 := @caughtexception;

        virtualinvoke $r32.<java.io.IOException: void printStackTrace()>();

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot include ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r36);

        throw $r37;

     label09:
        if r41 != null goto label10;

        $r13 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.Map subs>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r41 = (net.sourceforge.plantuml.preproc.Sub) $r14;

     label10:
        if r41 != null goto label11;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot include ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r11);

        throw $r12;

     label11:
        $r7 = virtualinvoke r41.<net.sourceforge.plantuml.preproc.Sub: java.util.List lines()>();

        specialinvoke r4.<net.sourceforge.plantuml.tim.TContext: void executeLinesInternal(net.sourceforge.plantuml.tim.TMemory,java.util.List,net.sourceforge.plantuml.tim.TFunctionType)>(r5, $r7, null);

     label12:
        if r40 == null goto label16;

        r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles> = r40;

        goto label16;

     label13:
        $r30 := @caughtexception;

     label14:
        if r40 == null goto label15;

        r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles> = r40;

     label15:
        throw $r30;

     label16:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.io.IOException from label02 to label07 with label08;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void executeIncludeDef(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterIncludeDef $r0;
        net.sourceforge.plantuml.StringLocated r1, $r2, r13;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TMemory r5;
        java.lang.String r6, $r22;
        net.sourceforge.plantuml.DefinitionsContainer $r7;
        java.util.List r8;
        net.sourceforge.plantuml.preproc.ReadLineList $r9;
        net.sourceforge.plantuml.LineLocation $r10;
        java.util.ArrayList $r12;
        java.io.IOException $r14, $r18, $r24;
        java.lang.Throwable $r17;
        java.lang.StringBuilder $r19, $r20, $r21;
        net.sourceforge.plantuml.tim.EaterException $r23;

        r4 := @this: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterIncludeDef;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterIncludeDef: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterIncludeDef: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r4, r5);

        r6 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterIncludeDef: java.lang.String getLocation()>();

        $r7 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.DefinitionsContainer definitionsContainer>;

        r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.DefinitionsContainer: java.util.List getDefinition(java.lang.String)>(r6);

        $r9 = new net.sourceforge.plantuml.preproc.ReadLineList;

        $r10 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        specialinvoke $r9.<net.sourceforge.plantuml.preproc.ReadLineList: void <init>(java.util.List,net.sourceforge.plantuml.LineLocation)>(r8, $r10);

     label01:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

     label02:
        r13 = interfaceinvoke $r9.<net.sourceforge.plantuml.preproc.ReadLine: net.sourceforge.plantuml.StringLocated readLine()>();

        if r13 != null goto label07;

        specialinvoke r4.<net.sourceforge.plantuml.tim.TContext: void executeLinesInternal(net.sourceforge.plantuml.tim.TMemory,java.util.List,net.sourceforge.plantuml.tim.TFunctionType)>(r5, $r12, null);

     label03:
        interfaceinvoke $r9.<net.sourceforge.plantuml.preproc.ReadLine: void close()>();

     label04:
        goto label06;

     label05:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.io.IOException: void printStackTrace()>();

     label06:
        return;

     label07:
        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r13);

        goto label02;

     label08:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.io.IOException: void printStackTrace()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r22);

        throw $r23;

     label09:
        $r17 := @caughtexception;

     label10:
        interfaceinvoke $r9.<net.sourceforge.plantuml.preproc.ReadLine: void close()>();

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.io.IOException: void printStackTrace()>();

     label13:
        throw $r17;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label03 with label08;
        catch java.io.IOException from label07 to label08 with label08;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    private void executeTheme(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterTheme $r0;
        net.sourceforge.plantuml.StringLocated r1, $r2, r9;
        net.sourceforge.plantuml.tim.TContext r3;
        net.sourceforge.plantuml.preproc.ImportedFiles $r4;
        net.sourceforge.plantuml.tim.TMemory r6;
        net.sourceforge.plantuml.preproc.ReadLine r7;
        java.util.ArrayList $r8;
        java.lang.StringBuilder $r11, $r12, $r14, $r22, $r23, $r24;
        java.lang.String $r13, $r15, $r25;
        net.sourceforge.plantuml.tim.EaterException $r16, $r26;
        java.io.IOException $r17, $r21, $r27;
        java.lang.Throwable $r20;

        r3 := @this: net.sourceforge.plantuml.tim.TContext;

        r6 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterTheme;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        $r4 = r3.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterTheme: void <init>(net.sourceforge.plantuml.StringLocated,net.sourceforge.plantuml.preproc.ImportedFiles)>($r2, $r4);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterTheme: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r3, r6);

        r7 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterTheme: net.sourceforge.plantuml.preproc.ReadLine getTheme()>();

        if r7 != null goto label01;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such theme ");

        $r13 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterTheme: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r15);

        throw $r16;

     label01:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

     label02:
        r9 = interfaceinvoke r7.<net.sourceforge.plantuml.preproc.ReadLine: net.sourceforge.plantuml.StringLocated readLine()>();

        if r9 != null goto label07;

        virtualinvoke r3.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue executeLines(net.sourceforge.plantuml.tim.TMemory,java.util.List,net.sourceforge.plantuml.tim.TFunctionType,boolean)>(r6, $r8, null, 0);

     label03:
        interfaceinvoke r7.<net.sourceforge.plantuml.preproc.ReadLine: void close()>();

     label04:
        goto label06;

     label05:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.io.IOException: void printStackTrace()>();

     label06:
        return;

     label07:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label02;

     label08:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.io.IOException: void printStackTrace()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading theme ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r25);

        throw $r26;

     label09:
        $r20 := @caughtexception;

     label10:
        interfaceinvoke r7.<net.sourceforge.plantuml.preproc.ReadLine: void close()>();

     label11:
        goto label13;

     label12:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.io.IOException: void printStackTrace()>();

     label13:
        throw $r20;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label03 with label08;
        catch java.io.IOException from label07 to label08 with label08;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    private void executeInclude(net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterInclude $r0;
        net.sourceforge.plantuml.StringLocated r1, $r2, r53;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TMemory r5;
        net.sourceforge.plantuml.preproc2.PreprocessorIncludeStrategy r6, $r12, $r13;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10;
        java.nio.charset.Charset $r7, $r14, $r15, $r23;
        java.util.ArrayList $r8;
        net.sourceforge.plantuml.tim.EaterException $r10, $r22, $r25, $r37, $r60;
        net.sourceforge.plantuml.preproc.ImportedFiles $r11, $r17, $r19, r47;
        net.sourceforge.plantuml.LineLocation $r16;
        net.sourceforge.plantuml.AParentFolder $r18;
        java.util.Set $r20, $r24, $r26;
        java.lang.AssertionError $r21;
        java.lang.String $r27, $r36, r44, r45, $r59;
        java.io.IOException $r28, $r32, $r38, $r41;
        java.lang.Throwable $r31, $r39;
        java.lang.StringBuilder $r33, $r34, $r35, $r56, $r57, $r58;
        net.sourceforge.plantuml.preproc.ReadLine r46;
        net.sourceforge.plantuml.security.SURL r48;
        net.sourceforge.plantuml.preproc.FileWithSuffix r49;
        java.io.Reader r51;

        r4 := @this: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r1 := @parameter1: net.sourceforge.plantuml.StringLocated;

        $r0 = new net.sourceforge.plantuml.tim.EaterInclude;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated getTrimmed()>();

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterInclude: void <init>(net.sourceforge.plantuml.StringLocated)>($r2);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterInclude: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r4, r5);

        r44 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterInclude: java.lang.String getLocation()>();

        r6 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterInclude: net.sourceforge.plantuml.preproc2.PreprocessorIncludeStrategy getPreprocessorIncludeStrategy()>();

        i0 = virtualinvoke r44.<java.lang.String: int lastIndexOf(int)>(33);

        r45 = null;

        if i0 == -1 goto label01;

        $i3 = i0 + 1;

        r45 = virtualinvoke r44.<java.lang.String: java.lang.String substring(int)>($i3);

        r44 = virtualinvoke r44.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label01:
        r46 = null;

        r47 = null;

     label02:
        $z0 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

        if $z0 != 0 goto label03;

        $z2 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        if $z2 == 0 goto label05;

     label03:
        r48 = staticinvoke <net.sourceforge.plantuml.security.SURL: net.sourceforge.plantuml.security.SURL create(java.lang.String)>(r44);

        if r48 != null goto label04;

        $r10 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Cannot open URL");

        throw $r10;

     label04:
        $r7 = r4.<net.sourceforge.plantuml.tim.TContext: java.nio.charset.Charset charset>;

        r46 = staticinvoke <net.sourceforge.plantuml.preproc2.PreprocessorUtils: net.sourceforge.plantuml.preproc.ReadLine getReaderIncludeUrl(net.sourceforge.plantuml.security.SURL,net.sourceforge.plantuml.StringLocated,java.lang.String,java.nio.charset.Charset)>(r48, r1, r45, $r7);

        goto label15;

     label05:
        $z3 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z3 == 0 goto label06;

        $z10 = virtualinvoke r44.<java.lang.String: boolean endsWith(java.lang.String)>(">");

        if $z10 == 0 goto label06;

        $i1 = virtualinvoke r44.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r27 = virtualinvoke r44.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        r46 = staticinvoke <net.sourceforge.plantuml.preproc2.PreprocessorUtils: net.sourceforge.plantuml.preproc.ReadLine getReaderStdlibInclude(net.sourceforge.plantuml.StringLocated,java.lang.String)>(r1, $r27);

        goto label15;

     label06:
        $r11 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        r49 = virtualinvoke $r11.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.preproc.FileWithSuffix getFile(java.lang.String,java.lang.String)>(r44, r45);

        $z4 = virtualinvoke r49.<net.sourceforge.plantuml.preproc.FileWithSuffix: boolean fileOk()>();

        if $z4 == 0 goto label15;

        $r12 = <net.sourceforge.plantuml.preproc2.PreprocessorIncludeStrategy: net.sourceforge.plantuml.preproc2.PreprocessorIncludeStrategy DEFAULT>;

        if r6 != $r12 goto label09;

        $r26 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.Set filesUsedCurrent>;

        $z9 = interfaceinvoke $r26.<java.util.Set: boolean contains(java.lang.Object)>(r49);

        if $z9 == 0 goto label09;

     label07:
        goto label08;

     label08:
        return;

     label09:
        $r13 = <net.sourceforge.plantuml.preproc2.PreprocessorIncludeStrategy: net.sourceforge.plantuml.preproc2.PreprocessorIncludeStrategy ONCE>;

        if r6 != $r13 goto label10;

        $r24 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.Set filesUsedCurrent>;

        $z8 = interfaceinvoke $r24.<java.util.Set: boolean contains(java.lang.Object)>(r49);

        if $z8 == 0 goto label10;

        $r25 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("This file has already been included");

        throw $r25;

     label10:
        $r14 = r4.<net.sourceforge.plantuml.tim.TContext: java.nio.charset.Charset charset>;

        $z5 = staticinvoke <net.sourceforge.plantuml.preproc.StartDiagramExtractReader: boolean containsStartDiagram(net.sourceforge.plantuml.preproc.FileWithSuffix,net.sourceforge.plantuml.StringLocated,java.nio.charset.Charset)>(r49, r1, $r14);

        if $z5 == 0 goto label11;

        $r23 = r4.<net.sourceforge.plantuml.tim.TContext: java.nio.charset.Charset charset>;

        r46 = staticinvoke <net.sourceforge.plantuml.preproc.StartDiagramExtractReader: net.sourceforge.plantuml.preproc.StartDiagramExtractReader build(net.sourceforge.plantuml.preproc.FileWithSuffix,net.sourceforge.plantuml.StringLocated,java.nio.charset.Charset)>(r49, r1, $r23);

        goto label13;

     label11:
        $r15 = r4.<net.sourceforge.plantuml.tim.TContext: java.nio.charset.Charset charset>;

        r51 = virtualinvoke r49.<net.sourceforge.plantuml.preproc.FileWithSuffix: java.io.Reader getReader(java.nio.charset.Charset)>($r15);

        if r51 != null goto label12;

        $r22 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Cannot include file");

        throw $r22;

     label12:
        $r16 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        r46 = staticinvoke <net.sourceforge.plantuml.preproc.ReadLineReader: net.sourceforge.plantuml.preproc.ReadLine create(java.io.Reader,java.lang.String,net.sourceforge.plantuml.LineLocation)>(r51, r44, $r16);

     label13:
        r47 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        $r17 = r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles>;

        $r18 = virtualinvoke r49.<net.sourceforge.plantuml.preproc.FileWithSuffix: net.sourceforge.plantuml.AParentFolder getParentFile()>();

        $r19 = virtualinvoke $r17.<net.sourceforge.plantuml.preproc.ImportedFiles: net.sourceforge.plantuml.preproc.ImportedFiles withCurrentDir(net.sourceforge.plantuml.AParentFolder)>($r18);

        r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles> = $r19;

        $z6 = <net.sourceforge.plantuml.tim.TContext: boolean $assertionsDisabled>;

        if $z6 != 0 goto label14;

        if r46 != null goto label14;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label14:
        $r20 = r4.<net.sourceforge.plantuml.tim.TContext: java.util.Set filesUsedCurrent>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>(r49);

     label15:
        if r46 == null goto label28;

     label16:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

     label17:
        r53 = interfaceinvoke r46.<net.sourceforge.plantuml.preproc.ReadLine: net.sourceforge.plantuml.StringLocated readLine()>();

        if r53 != null goto label24;

        virtualinvoke r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue executeLines(net.sourceforge.plantuml.tim.TMemory,java.util.List,net.sourceforge.plantuml.tim.TFunctionType,boolean)>(r5, $r8, null, 0);

     label18:
        if r47 == null goto label19;

        r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles> = r47;

     label19:
        if r46 == null goto label23;

     label20:
        interfaceinvoke r46.<net.sourceforge.plantuml.preproc.ReadLine: void close()>();

     label21:
        goto label23;

     label22:
        $r41 := @caughtexception;

        virtualinvoke $r41.<java.io.IOException: void printStackTrace()>();

     label23:
        return;

     label24:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r53);

        goto label17;

     label25:
        $r39 := @caughtexception;

     label26:
        if r47 == null goto label27;

        r4.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.preproc.ImportedFiles importedFiles> = r47;

     label27:
        throw $r39;

     label28:
        if r46 == null goto label39;

     label29:
        interfaceinvoke r46.<net.sourceforge.plantuml.preproc.ReadLine: void close()>();

     label30:
        goto label39;

     label31:
        $r38 := @caughtexception;

        virtualinvoke $r38.<java.io.IOException: void printStackTrace()>();

        goto label39;

     label32:
        $r32 := @caughtexception;

        virtualinvoke $r32.<java.io.IOException: void printStackTrace()>();

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot include ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r36);

        throw $r37;

     label33:
        $r31 := @caughtexception;

     label34:
        if r46 == null goto label38;

     label35:
        interfaceinvoke r46.<net.sourceforge.plantuml.preproc.ReadLine: void close()>();

     label36:
        goto label38;

     label37:
        $r28 := @caughtexception;

        virtualinvoke $r28.<java.io.IOException: void printStackTrace()>();

     label38:
        throw $r31;

     label39:
        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot include ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r60 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>($r59);

        throw $r60;

        catch java.io.IOException from label20 to label21 with label22;
        catch java.lang.Throwable from label16 to label18 with label25;
        catch java.lang.Throwable from label24 to label26 with label25;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.io.IOException from label02 to label07 with label32;
        catch java.io.IOException from label09 to label19 with label32;
        catch java.io.IOException from label24 to label28 with label32;
        catch java.lang.Throwable from label02 to label07 with label33;
        catch java.lang.Throwable from label09 to label19 with label33;
        catch java.lang.Throwable from label24 to label28 with label33;
        catch java.io.IOException from label35 to label36 with label37;
        catch java.lang.Throwable from label32 to label34 with label33;
    }

    public boolean isLegacyDefine(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.FunctionsSet $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r7, $r11;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.tim.TFunctionSignature $r8;
        java.lang.String $r9, r10;
        net.sourceforge.plantuml.tim.TFunction $r12;
        net.sourceforge.plantuml.tim.TFunctionType $r13;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r10 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (net.sourceforge.plantuml.tim.TFunctionSignature) $r7;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.tim.TFunctionSignature: java.lang.String getFunctionName()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (net.sourceforge.plantuml.tim.TFunction) $r11;

        $r13 = interfaceinvoke $r12.<net.sourceforge.plantuml.tim.TFunction: net.sourceforge.plantuml.tim.TFunctionType getFunctionType()>();

        $z2 = virtualinvoke $r13.<net.sourceforge.plantuml.tim.TFunctionType: boolean isLegacy()>();

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean isUnquoted(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.FunctionsSet $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r7, $r11;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.tim.TFunctionSignature $r8;
        java.lang.String $r9, r10;
        net.sourceforge.plantuml.tim.TFunction $r12;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r10 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (net.sourceforge.plantuml.tim.TFunctionSignature) $r7;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.tim.TFunctionSignature: java.lang.String getFunctionName()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (net.sourceforge.plantuml.tim.TFunction) $r11;

        $z2 = interfaceinvoke $r12.<net.sourceforge.plantuml.tim.TFunction: boolean isUnquoted()>();

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean doesFunctionExist(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.FunctionsSet $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r7;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.tim.TFunctionSignature $r8;
        java.lang.String $r9, r10;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r10 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.tim.FunctionsSet: java.util.Map functions()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (net.sourceforge.plantuml.tim.TFunctionSignature) $r7;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.tim.TFunctionSignature: java.lang.String getFunctionName()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private java.lang.String getFunctionNameAt(java.lang.String, int)
    {
        int i0, $i1, $i2, $i3, $i5;
        net.sourceforge.plantuml.tim.TContext r0;
        java.lang.String r1, r2, $r3, $r5;
        char $c4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.tim.FunctionsSet $r4;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $i3 = i0 - 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscoreOrDigit(char)>($c4);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <net.sourceforge.plantuml.tim.VariableManager: boolean justAfterBackslashN(java.lang.String,int)>(r1, i0);

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        r2 = virtualinvoke $r4.<net.sourceforge.plantuml.tim.FunctionsSet: java.lang.String getLonguestMatchStartingIn(java.lang.String)>($r5);

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i5 != 0 goto label2;

        return null;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r3;
    }

    public java.util.List getResultList()
    {
        net.sourceforge.plantuml.tim.TContext r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        return $r1;
    }

    public java.util.List getDebug()
    {
        net.sourceforge.plantuml.tim.TContext r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        $r1 = r0.<net.sourceforge.plantuml.tim.TContext: java.util.List debug>;

        return $r1;
    }

    public java.lang.String extractFromResultList(int)
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.tim.TContext r2;
        int i0, $i1, $i2;
        java.lang.String $r3, $r7;
        java.util.List $r4, $r9, $r11, $r13;
        java.lang.Object $r5;
        net.sourceforge.plantuml.StringLocated $r6;

        r2 := @this: net.sourceforge.plantuml.tim.TContext;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r13 = r2.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i2 <= i0 goto label2;

        $r4 = r2.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (net.sourceforge.plantuml.StringLocated) $r5;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = r2.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>(i0);

        $r11 = r2.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i1 <= i0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void appendEndOfLine(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1, i2;
        net.sourceforge.plantuml.tim.TContext r1;
        java.util.List $r2, $r3, $r5;
        java.lang.Object $r4;
        net.sourceforge.plantuml.StringLocated r7, r8;

        r1 := @this: net.sourceforge.plantuml.tim.TContext;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = r1.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        i2 = $i1 - 1;

        $r3 = r1.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        r7 = (net.sourceforge.plantuml.StringLocated) $r4;

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.StringLocated append(java.lang.String)>(r0);

        $r5 = r1.<net.sourceforge.plantuml.tim.TContext: java.util.List resultList>;

        interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i2, r8);

     label1:
        return;
    }

    public net.sourceforge.plantuml.tim.TFunction getFunctionSmart(net.sourceforge.plantuml.tim.TFunctionSignature)
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TFunctionSignature r1;
        net.sourceforge.plantuml.tim.FunctionsSet $r2;
        net.sourceforge.plantuml.tim.TFunction $r3;

        r0 := @this: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TFunctionSignature;

        $r2 = r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.FunctionsSet functionsSet>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.FunctionsSet: net.sourceforge.plantuml.tim.TFunction getFunctionSmart(net.sourceforge.plantuml.tim.TFunctionSignature)>(r1);

        return $r3;
    }

    static net.sourceforge.plantuml.tim.expression.TValue access$000(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, java.lang.String, net.sourceforge.plantuml.LineLocation) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TContext r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        java.lang.String r2;
        net.sourceforge.plantuml.LineLocation r3;
        net.sourceforge.plantuml.tim.expression.TValue $r4;

        r0 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: net.sourceforge.plantuml.LineLocation;

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.tim.TMemory,java.lang.String,net.sourceforge.plantuml.LineLocation)>(r1, r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/TContext;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.TContext: boolean $assertionsDisabled> = $z1;

        return;
    }
}
