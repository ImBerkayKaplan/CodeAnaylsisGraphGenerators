public class net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection extends java.lang.Object
{
    public final java.lang.Object obj;

    public void <init>(java.lang.Object)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r0;
        java.lang.Object r1, $r2;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj> = $r2;

        return;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r0;
        java.lang.Object $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r0, $r2;
        java.lang.Object r1, $r3, $r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $r2 = (net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection) r1;

        $r3 = $r2.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public double getStartX()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getStartX");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double getStartY()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getStartY");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double getEndX()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getEndX");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double getEndY()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getEndY");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public java.util.Collection getBendPoints()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection r2;
        java.lang.Object $r3, $r4, r7;
        java.util.Collection r5;
        java.util.Iterator r6;
        boolean $z0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint $r8;

        r2 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: java.lang.Object obj>;

        $r4 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r3, "getBendPoints");

        r5 = (java.util.Collection) $r4;

        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = new net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint;

        specialinvoke $r8.<net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint: void <init>(java.lang.Object)>(r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }
}
