public class net.sourceforge.plantuml.timingdiagram.ChangeState extends java.lang.Object implements java.lang.Comparable
{
    private final net.sourceforge.plantuml.timingdiagram.TimeTick when;
    private final java.lang.String[] states;
    private final java.lang.String comment;
    private final net.sourceforge.plantuml.graphic.color.Colors colors;

    public transient void <init>(net.sourceforge.plantuml.timingdiagram.TimeTick, java.lang.String, net.sourceforge.plantuml.graphic.color.Colors, java.lang.String[])
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        java.lang.String[] r1;
        int $i0;
        net.sourceforge.plantuml.timingdiagram.TimeTick r2;
        java.lang.String r3;
        net.sourceforge.plantuml.graphic.color.Colors r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        r2 := @parameter0: net.sourceforge.plantuml.timingdiagram.TimeTick;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: net.sourceforge.plantuml.graphic.color.Colors;

        r1 := @parameter3: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick when> = r2;

        r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] states> = r1;

        r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String comment> = r3;

        r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.graphic.color.Colors colors> = r4;

        return;
    }

    public int compareTo(net.sourceforge.plantuml.timingdiagram.ChangeState)
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0, r1;
        net.sourceforge.plantuml.timingdiagram.TimeTick $r2, $r3;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        r1 := @parameter0: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r3 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick when>;

        $r2 = r1.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick when>;

        $i0 = virtualinvoke $r3.<net.sourceforge.plantuml.timingdiagram.TimeTick: int compareTo(net.sourceforge.plantuml.timingdiagram.TimeTick)>($r2);

        return $i0;
    }

    public final net.sourceforge.plantuml.timingdiagram.TimeTick getWhen()
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        net.sourceforge.plantuml.timingdiagram.TimeTick $r1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.timingdiagram.TimeTick when>;

        return $r1;
    }

    public final java.lang.String[] getStates()
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        java.lang.String[] $r1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] states>;

        return $r1;
    }

    public final java.lang.String getState()
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] states>;

        $r2 = $r1[0];

        return $r2;
    }

    public java.lang.String getComment()
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String comment>;

        return $r1;
    }

    public final net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        net.sourceforge.plantuml.graphic.color.Colors $r1, $r11, $r14;
        boolean $z0;
        net.sourceforge.plantuml.style.Style r2;
        net.sourceforge.plantuml.style.PName $r3;
        net.sourceforge.plantuml.style.Value $r4;
        net.sourceforge.plantuml.ISkinParam r5;
        net.sourceforge.plantuml.api.ThemeStyle $r6;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor $r8, $r9, $r12, $r15;
        net.sourceforge.plantuml.graphic.color.ColorType $r10, $r13;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        r5 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r2 := @parameter1: net.sourceforge.plantuml.style.Style;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.graphic.color.Colors colors>;

        if $r1 == null goto label1;

        $r11 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.graphic.color.Colors colors>;

        $r10 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r10);

        if $r12 != null goto label3;

     label1:
        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 != 0 goto label2;

        $r9 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor COL_D7E0F2>;

        return $r9;

     label2:
        $r3 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r3);

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r7 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r8 = interfaceinvoke $r4.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r6, $r7);

        return $r8;

     label3:
        $r14 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.graphic.color.Colors colors>;

        $r13 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r13);

        return $r15;
    }

    private final net.sourceforge.plantuml.ugraphic.color.HColor getLineColor(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        net.sourceforge.plantuml.graphic.color.Colors $r1, $r11, $r14;
        boolean $z0;
        net.sourceforge.plantuml.style.Style r2;
        net.sourceforge.plantuml.style.PName $r3;
        net.sourceforge.plantuml.style.Value $r4;
        net.sourceforge.plantuml.ISkinParam r5;
        net.sourceforge.plantuml.api.ThemeStyle $r6;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor $r8, $r9, $r12, $r15;
        net.sourceforge.plantuml.graphic.color.ColorType $r10, $r13;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        r5 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r2 := @parameter1: net.sourceforge.plantuml.style.Style;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.graphic.color.Colors colors>;

        if $r1 == null goto label1;

        $r11 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.graphic.color.Colors colors>;

        $r10 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r10);

        if $r12 != null goto label3;

     label1:
        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 != 0 goto label2;

        $r9 = <net.sourceforge.plantuml.ugraphic.color.HColorUtils: net.sourceforge.plantuml.ugraphic.color.HColor COL_038048>;

        return $r9;

     label2:
        $r3 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r3);

        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r7 = interfaceinvoke r5.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r8 = interfaceinvoke $r4.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r6, $r7);

        return $r8;

     label3:
        $r14 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.graphic.color.Colors colors>;

        $r13 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r13);

        return $r15;
    }

    public net.sourceforge.plantuml.graphic.SymbolContext getContext(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.graphic.SymbolContext $r0, $r7;
        net.sourceforge.plantuml.timingdiagram.ChangeState r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.style.Style r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4, $r5;
        net.sourceforge.plantuml.ugraphic.UStroke $r6;

        r1 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        r2 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter1: net.sourceforge.plantuml.style.Style;

        $r0 = new net.sourceforge.plantuml.graphic.SymbolContext;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>(r2, r3);

        $r5 = specialinvoke r1.<net.sourceforge.plantuml.timingdiagram.ChangeState: net.sourceforge.plantuml.ugraphic.color.HColor getLineColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>(r2, r3);

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>($r4, $r5);

        $r6 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        $r7 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withStroke(net.sourceforge.plantuml.ugraphic.UStroke)>($r6);

        return $r7;
    }

    public final boolean isBlank()
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] states>;

        $r2 = $r1[0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("{...}");

        return $z0;
    }

    public final boolean isCompletelyHidden()
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] states>;

        $r2 = $r1[0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("{hidden}");

        return $z0;
    }

    public final boolean isFlat()
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: java.lang.String[] states>;

        $r2 = $r1[0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("{-}");

        return $z0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.sourceforge.plantuml.timingdiagram.ChangeState r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.ChangeState;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.sourceforge.plantuml.timingdiagram.ChangeState) r1;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.timingdiagram.ChangeState: int compareTo(net.sourceforge.plantuml.timingdiagram.ChangeState)>($r2);

        return $i0;
    }
}
