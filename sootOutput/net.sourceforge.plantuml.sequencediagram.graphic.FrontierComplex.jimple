class net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex extends java.lang.Object implements net.sourceforge.plantuml.sequencediagram.graphic.Frontier
{
    private final double[] freeY;

    public void <init>(double, int)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r0;
        int i0, $i1, i2;
        double[] $r1, $r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = i0 + 1;

        $r1 = newarray (double)[$i1];

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY> = $r1;

        i2 = 0;

     label1:
        if i2 > i0 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $r2[i2] = d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void <init>(double[])
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r0;
        double[] r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY> = r1;

        return;
    }

    private void <init>(double[], double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r0;
        double[] r1, $r3, $r5;
        java.lang.Object $r2;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r4;
        double $d0, d1, d2;
        int $i0, i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        r1 := @parameter0: double[];

        d1 := @parameter1: double;

        r4 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: void <init>(double[])>($r3);

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(r4);

        d2 = $d0 + d1;

        i1 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange: int start()>();

     label1:
        $i0 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange: int end()>();

        if i1 > $i0 goto label2;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $r5[i1] = d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public double getFreeY(net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r0;
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r2;
        double[] $r3, $r4, $r5;
        int $i0, $i1, i3;
        double $d0, d1;
        byte $b2;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange: int start()>();

        d1 = $r3[$i0];

        i3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange: int start()>();

     label1:
        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange: int end()>();

        if i3 > $i1 goto label3;

        $r4 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $d0 = $r4[i3];

        $b2 = $d0 cmpl d1;

        if $b2 <= 0 goto label2;

        $r5 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        d1 = $r5[i3];

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return d1;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r0;
        double[] $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex add(double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r0, r1;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r2, $r5;
        double[] $r3;
        java.lang.Object $r4;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        d0 := @parameter0: double;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r5 = (net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange) $r4;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: void <init>(double[],double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>($r3, d0, $r5);

        return $r0;
    }

    net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex copy()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex $r0, r1;
        double[] $r2, $r4;
        java.lang.Object $r3;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        $r0 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: void <init>(double[])>($r4);

        return $r0;
    }

    net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex mergeMax(net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r0, r2, $r4;
        double[] $r1, $r3, $r5, $r6, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, i4;
        double $d0, $d1, $d2;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $i1 = lengthof $r1;

        $r3 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label1:
        $r4 = new net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $i2 = lengthof $r5;

        $r6 = newarray (double)[$i2];

        specialinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: void <init>(double[])>($r6);

        i4 = 0;

     label2:
        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $i3 = lengthof $r8;

        if i4 >= $i3 goto label3;

        $r11 = $r4.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $d1 = $r9[i4];

        $r10 = r2.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: double[] freeY>;

        $d0 = $r10[i4];

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d0);

        $r11[i4] = $d2;

        i4 = i4 + 1;

        goto label2;

     label3:
        return $r4;
    }

    public volatile net.sourceforge.plantuml.sequencediagram.graphic.Frontier add(double, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex r0, $r2;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex: net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex add(double,net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange)>(d0, r1);

        return $r2;
    }
}
