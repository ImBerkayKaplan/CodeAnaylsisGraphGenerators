public abstract class net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile extends net.sourceforge.plantuml.sequencediagram.teoz.CommonTile implements net.sourceforge.plantuml.sequencediagram.teoz.Tile
{
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile;

        return -1.0;
    }

    public final double getZZZ()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile r0;
        double $d0, $d1, d2;
        boolean $z0;
        byte $b0;
        java.lang.AssertionError $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: double getPreferredHeight()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: double getContactPointRelative()>();

        d2 = $d0 - $d1;

        $z0 = <net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b0 = d2 cmpl 0.0;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return d2;
    }

    public boolean matchAnchor(java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile r0;
        net.sourceforge.plantuml.sequencediagram.Event r1;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r2;
        java.lang.String r3, $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile;

        r3 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $z0 = r1 instanceof net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        if $z0 == 0 goto label1;

        r2 = (net.sourceforge.plantuml.sequencediagram.AbstractMessage) r1;

        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.AbstractMessage: java.lang.String getAnchor()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/teoz/AbstractTile;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: boolean $assertionsDisabled> = $z1;

        return;
    }
}
