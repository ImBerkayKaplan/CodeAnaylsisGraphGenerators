public abstract class ext.plantuml.com.ctreber.acearth.projection.Projection extends java.lang.Object
{
    int fImageHeight;
    int fImageWidth;
    private double fXOffset;
    private double fYOffset;
    private int fShiftX;
    private int fShiftY;
    double fScale;
    private ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos;
    private double fViewRotation;
    double fViewMagnification;
    private double fCosLat;
    private double fSinLat;
    private double fCosLon;
    private double fSinLon;
    private double fCosRot;
    private double fSinRot;

    public void <init>()
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void initTransformTable()
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        ext.plantuml.com.ctreber.acearth.util.Coordinate $r1, $r2, $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;
        int $i0, $i1, $i2, $i3;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        $r1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d0 = virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLat()>();

        $d1 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fCosLat> = $d2;

        $r2 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d3 = virtualinvoke $r2.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLat()>();

        $d4 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d3);

        $d5 = staticinvoke <java.lang.Math: double sin(double)>($d4);

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fSinLat> = $d5;

        $r3 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d6 = virtualinvoke $r3.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLong()>();

        $d7 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d6);

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d7);

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fCosLon> = $d8;

        $r4 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d9 = virtualinvoke $r4.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLong()>();

        $d10 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d9);

        $d11 = staticinvoke <java.lang.Math: double sin(double)>($d10);

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fSinLon> = $d11;

        $d12 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fViewRotation>;

        $d13 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d12);

        $d14 = staticinvoke <java.lang.Math: double cos(double)>($d13);

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fCosRot> = $d14;

        $d15 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fViewRotation>;

        $d16 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d15);

        $d17 = staticinvoke <java.lang.Math: double sin(double)>($d16);

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fSinRot> = $d17;

        $i0 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fImageWidth>;

        $d18 = (double) $i0;

        $d20 = $d18 / 2.0;

        $i1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fShiftX>;

        $d19 = (double) $i1;

        $d21 = $d20 + $d19;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fXOffset> = $d21;

        $i2 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fImageHeight>;

        $d22 = (double) $i2;

        $d24 = $d22 / 2.0;

        $i3 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fShiftY>;

        $d23 = (double) $i3;

        $d25 = $d24 + $d23;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fYOffset> = $d25;

        virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: void setScale()>();

        return;
    }

    protected abstract void setScale();

    public abstract double projectY(double);

    public abstract double inverseProjectY(double);

    protected abstract double projectX(double, double);

    public abstract double inverseProjectX(double);

    public abstract boolean isVisible(ext.plantuml.com.ctreber.acearth.util.Point3D);

    public boolean isWithinImage(ext.plantuml.com.ctreber.acearth.util.Point2D)
    {
        ext.plantuml.com.ctreber.acearth.util.Point2D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0, $b2, $b3, $b5;
        ext.plantuml.com.ctreber.acearth.projection.Projection r1;
        int $i1, $i4;
        boolean $z0;

        r1 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        r0 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point2D;

        $d0 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $d1 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $i1 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fImageWidth>;

        $d2 = (double) $i1;

        $b2 = $d1 cmpg $d2;

        if $b2 >= 0 goto label1;

        $d3 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getY()>();

        $b3 = $d3 cmpl 0.0;

        if $b3 < 0 goto label1;

        $d4 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getY()>();

        $i4 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fImageHeight>;

        $d5 = (double) $i4;

        $b5 = $d4 cmpg $d5;

        if $b5 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract ext.plantuml.com.ctreber.acearth.util.Coordinate getLocation(int, int);

    public ext.plantuml.com.ctreber.acearth.util.Point2D project2D(ext.plantuml.com.ctreber.acearth.util.Point3D)
    {
        ext.plantuml.com.ctreber.acearth.util.Point2D $r0;
        ext.plantuml.com.ctreber.acearth.projection.Projection r1;
        ext.plantuml.com.ctreber.acearth.util.Point3D r2;
        double $d0, $d1, $d2, $d3, $d4;

        r1 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        r2 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point3D;

        $r0 = new ext.plantuml.com.ctreber.acearth.util.Point2D;

        $d0 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        $d1 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d2 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double projectX(double,double)>($d0, $d1);

        $d3 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        $d4 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double projectY(double)>($d3);

        specialinvoke $r0.<ext.plantuml.com.ctreber.acearth.util.Point2D: void <init>(double,double)>($d2, $d4);

        return $r0;
    }

    public ext.plantuml.com.ctreber.acearth.util.Point2D finalize(ext.plantuml.com.ctreber.acearth.util.Point2D)
    {
        ext.plantuml.com.ctreber.acearth.util.Point2D $r0, r2;
        ext.plantuml.com.ctreber.acearth.projection.Projection r1;
        double $d0, $d1, $d2, $d3;

        r1 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        r2 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point2D;

        $r0 = new ext.plantuml.com.ctreber.acearth.util.Point2D;

        $d0 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeX(double)>($d0);

        $d2 = virtualinvoke r2.<ext.plantuml.com.ctreber.acearth.util.Point2D: double getY()>();

        $d3 = virtualinvoke r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double finalizeY(double)>($d2);

        specialinvoke $r0.<ext.plantuml.com.ctreber.acearth.util.Point2D: void <init>(double,double)>($d1, $d3);

        return $r0;
    }

    public double finalizeX(double)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        d0 := @parameter0: double;

        $d3 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fXOffset>;

        $d1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fScale>;

        $d2 = $d1 * d0;

        $d4 = $d3 + $d2;

        return $d4;
    }

    public double finalizeY(double)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        d0 := @parameter0: double;

        $d3 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fYOffset>;

        $d1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fScale>;

        $d2 = $d1 * d0;

        $d4 = $d3 - $d2;

        return $d4;
    }

    public double inverseFinalizeX(double)
    {
        double d0, $d1, $d2, $d3, $d4;
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        d0 := @parameter0: double;

        $d1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fXOffset>;

        $d3 = d0 - $d1;

        $d2 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fScale>;

        $d4 = $d3 / $d2;

        return $d4;
    }

    public double inverseFinalizeY(double)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        d0 := @parameter0: double;

        $d1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fYOffset>;

        $d3 = $d1 - d0;

        $d2 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fScale>;

        $d4 = $d3 / $d2;

        return $d4;
    }

    public ext.plantuml.com.ctreber.acearth.util.Point3D rotate(ext.plantuml.com.ctreber.acearth.util.Point3D)
    {
        ext.plantuml.com.ctreber.acearth.util.Point3D r0, $r2;
        ext.plantuml.com.ctreber.acearth.projection.Projection r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14, d15, d16, d17, d18, d20, d21, d22, d23, d25, d26, d27, d28;

        r1 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        r0 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point3D;

        d12 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        d13 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        d14 = virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        d15 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fCosLon>;

        d16 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fSinLon>;

        $d1 = d15 * d12;

        $d0 = d16 * d14;

        d17 = $d1 - $d0;

        $d3 = d16 * d12;

        $d2 = d15 * d14;

        d18 = $d3 + $d2;

        d20 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fCosLat>;

        d21 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fSinLat>;

        $d5 = d20 * d13;

        $d4 = d21 * d18;

        d22 = $d5 - $d4;

        $d7 = d21 * d13;

        $d6 = d20 * d18;

        d23 = $d7 + $d6;

        d25 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fCosRot>;

        d26 = r1.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fSinRot>;

        $d9 = d25 * d17;

        $d8 = d26 * d22;

        d27 = $d9 - $d8;

        $d11 = d26 * d17;

        $d10 = d25 * d22;

        d28 = $d11 + $d10;

        $r2 = new ext.plantuml.com.ctreber.acearth.util.Point3D;

        specialinvoke $r2.<ext.plantuml.com.ctreber.acearth.util.Point3D: void <init>(double,double,double)>(d27, d28, d23);

        return $r2;
    }

    public ext.plantuml.com.ctreber.acearth.util.Point3D rotateReverse(ext.plantuml.com.ctreber.acearth.util.Point3D)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        ext.plantuml.com.ctreber.acearth.util.Coordinate $r1, $r2, $r3, $r4;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, d11, $d12, $d13, $d14, d15, $d16, $d17, $d18, d19, $d20, $d21, $d22, d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, d36, d37, d38, d41, d42, d46, d47, d51, d52;
        ext.plantuml.com.ctreber.acearth.util.Point3D r5, $r6;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        r5 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Point3D;

        $r1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d0 = virtualinvoke $r1.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLat()>();

        $d1 = neg $d0;

        $d2 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d1);

        d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $r2 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d4 = virtualinvoke $r2.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLat()>();

        $d5 = neg $d4;

        $d6 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d5);

        d7 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        $r3 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d8 = virtualinvoke $r3.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLong()>();

        $d9 = neg $d8;

        $d10 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d9);

        d11 = staticinvoke <java.lang.Math: double cos(double)>($d10);

        $r4 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        $d12 = virtualinvoke $r4.<ext.plantuml.com.ctreber.acearth.util.Coordinate: double getLong()>();

        $d13 = neg $d12;

        $d14 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d13);

        d15 = staticinvoke <java.lang.Math: double sin(double)>($d14);

        $d16 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fViewRotation>;

        $d17 = neg $d16;

        $d18 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d17);

        d19 = staticinvoke <java.lang.Math: double cos(double)>($d18);

        $d20 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fViewRotation>;

        $d21 = neg $d20;

        $d22 = staticinvoke <ext.plantuml.com.ctreber.acearth.util.Toolkit: double degsToRads(double)>($d21);

        d23 = staticinvoke <java.lang.Math: double sin(double)>($d22);

        d36 = virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getX()>();

        d37 = virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getY()>();

        d38 = virtualinvoke r5.<ext.plantuml.com.ctreber.acearth.util.Point3D: double getZ()>();

        $d25 = d19 * d36;

        $d24 = d23 * d37;

        d41 = $d25 - $d24;

        $d27 = d23 * d36;

        $d26 = d19 * d37;

        d42 = $d27 + $d26;

        $d29 = d3 * d42;

        $d28 = d7 * d38;

        d46 = $d29 - $d28;

        $d31 = d7 * d42;

        $d30 = d3 * d38;

        d47 = $d31 + $d30;

        $d33 = d11 * d41;

        $d32 = d15 * d47;

        d51 = $d33 - $d32;

        $d35 = d15 * d41;

        $d34 = d11 * d47;

        d52 = $d35 + $d34;

        $r6 = new ext.plantuml.com.ctreber.acearth.util.Point3D;

        specialinvoke $r6.<ext.plantuml.com.ctreber.acearth.util.Point3D: void <init>(double,double,double)>(d51, d46, d52);

        return $r6;
    }

    public double getScale()
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        double $d0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        $d0 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fScale>;

        return $d0;
    }

    public ext.plantuml.com.ctreber.acearth.util.Coordinate getViewPos()
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        ext.plantuml.com.ctreber.acearth.util.Coordinate $r1;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        $r1 = r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos>;

        return $r1;
    }

    public void setViewMagnification(double)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        double d0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        d0 := @parameter0: double;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fViewMagnification> = d0;

        virtualinvoke r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: void setScale()>();

        return;
    }

    public void setViewPos(ext.plantuml.com.ctreber.acearth.util.Coordinate)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        ext.plantuml.com.ctreber.acearth.util.Coordinate r1;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        r1 := @parameter0: ext.plantuml.com.ctreber.acearth.util.Coordinate;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: ext.plantuml.com.ctreber.acearth.util.Coordinate fViewPos> = r1;

        return;
    }

    public void setShiftX(int)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        int i0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        i0 := @parameter0: int;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fShiftX> = i0;

        return;
    }

    public void setShiftY(int)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        int i0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        i0 := @parameter0: int;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fShiftY> = i0;

        return;
    }

    public void setViewRotation(double)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        double d0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        d0 := @parameter0: double;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: double fViewRotation> = d0;

        return;
    }

    public void setImageWidth(int)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        int i0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        i0 := @parameter0: int;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fImageWidth> = i0;

        return;
    }

    public void setImageHeight(int)
    {
        ext.plantuml.com.ctreber.acearth.projection.Projection r0;
        int i0;

        r0 := @this: ext.plantuml.com.ctreber.acearth.projection.Projection;

        i0 := @parameter0: int;

        r0.<ext.plantuml.com.ctreber.acearth.projection.Projection: int fImageHeight> = i0;

        return;
    }
}
