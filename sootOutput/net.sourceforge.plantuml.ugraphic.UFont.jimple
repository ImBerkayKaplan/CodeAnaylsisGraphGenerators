public class net.sourceforge.plantuml.ugraphic.UFont extends java.lang.Object
{
    private final java.awt.Font font;
    private final java.lang.String family;
    private static final java.util.Set names;

    public java.lang.String toStringDebug()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.ugraphic.UFont r2;
        java.lang.String $r3, $r8;
        java.awt.Font $r6;
        int $i0;

        r2 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String getPortableFontName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = r2.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $i0 = virtualinvoke $r6.<java.awt.Font: int getSize()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void <init>(java.lang.String, int, int)
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.lang.String r1;
        int i0, i1;
        java.awt.Font $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font buildFont(java.lang.String,int,int)>(r1, i0, i1);

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.awt.Font,java.lang.String)>($r2, r1);

        return;
    }

    private static java.awt.Font buildFont(java.lang.String, int, int)
    {
        java.lang.String r0, $r3, r5, r6;
        boolean $z0, $z1;
        java.awt.Font $r1, $r4;
        int i0, i1, i2, i3;
        java.lang.String[] r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");

        if $z0 == 0 goto label3;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i2 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        r5 = r2[i3];

        $r3 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r5);

        r6 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.ugraphic.UFont: boolean doesFamilyExists(java.lang.String)>(r6);

        if $z1 == 0 goto label2;

        $r4 = new java.awt.Font;

        specialinvoke $r4.<java.awt.Font: void <init>(java.lang.String,int,int)>(r0, i0, i1);

        return $r4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r1 = new java.awt.Font;

        specialinvoke $r1.<java.awt.Font: void <init>(java.lang.String,int,int)>(r0, i0, i1);

        return $r1;
    }

    private static boolean doesFamilyExists(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Set $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <net.sourceforge.plantuml.ugraphic.UFont: java.util.Set names>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    public static net.sourceforge.plantuml.ugraphic.UFont serif(int)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>("Serif", 0, i0);

        return $r0;
    }

    public static net.sourceforge.plantuml.ugraphic.UFont sansSerif(int)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>("SansSerif", 0, i0);

        return $r0;
    }

    public static net.sourceforge.plantuml.ugraphic.UFont courier(int)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>("Courier", 0, i0);

        return $r0;
    }

    public static net.sourceforge.plantuml.ugraphic.UFont byDefault(int)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont sansSerif(int)>(12);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UFont goTikz(int)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0, r2;
        java.awt.Font $r1;
        int $i0, $i1, i2, $i3;

        r2 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        i2 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = new java.awt.Font;

        $i0 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UFont: int getStyle()>();

        $i1 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UFont: int getSize()>();

        $i3 = $i1 + i2;

        specialinvoke $r1.<java.awt.Font: void <init>(java.lang.String,int,int)>("Serif", $i0, $i3);

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.awt.Font,java.lang.String)>($r1, "Serif");

        return $r0;
    }

    public static net.sourceforge.plantuml.ugraphic.UFont monospaced(int)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>("Monospaced", 0, i0);

        return $r0;
    }

    private void <init>(java.awt.Font, java.lang.String)
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font r1;
        java.lang.String r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        r1 := @parameter0: java.awt.Font;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font> = r1;

        r0.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String family> = r2;

        return;
    }

    public final java.awt.Font getUnderlayingFont()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        return $r1;
    }

    public net.sourceforge.plantuml.ugraphic.UFont withSize(float)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0, r1;
        float f0;
        java.awt.Font $r2, $r3;
        java.lang.String $r4;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        f0 := @parameter0: float;

        $r0 = new net.sourceforge.plantuml.ugraphic.UFont;

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $r3 = virtualinvoke $r2.<java.awt.Font: java.awt.Font deriveFont(float)>(f0);

        $r4 = r1.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String family>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.awt.Font,java.lang.String)>($r3, $r4);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UFont withStyle(int)
    {
        net.sourceforge.plantuml.ugraphic.UFont $r0, r1;
        int i0;
        java.awt.Font $r2, $r3;
        java.lang.String $r4;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.ugraphic.UFont;

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $r3 = virtualinvoke $r2.<java.awt.Font: java.awt.Font deriveFont(int)>(i0);

        $r4 = r1.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String family>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.awt.Font,java.lang.String)>($r3, $r4);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UFont bold()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0, $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont withStyle(int)>(1);

        return $r1;
    }

    public net.sourceforge.plantuml.ugraphic.UFont italic()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0, $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont withStyle(int)>(2);

        return $r1;
    }

    public int getStyle()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $i0 = virtualinvoke $r1.<java.awt.Font: int getStyle()>();

        return $i0;
    }

    public int getSize()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $i0 = virtualinvoke $r1.<java.awt.Font: int getSize()>();

        return $i0;
    }

    public double getSize2D()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;
        float $f0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $f0 = virtualinvoke $r1.<java.awt.Font: float getSize2D()>();

        $d0 = (double) $f0;

        return $d0;
    }

    public boolean isBold()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $z0 = virtualinvoke $r1.<java.awt.Font: boolean isBold()>();

        return $z0;
    }

    public boolean isItalic()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $z0 = virtualinvoke $r1.<java.awt.Font: boolean isItalic()>();

        return $z0;
    }

    public java.lang.String getFamily(net.sourceforge.plantuml.ugraphic.UFontContext)
    {
        net.sourceforge.plantuml.ugraphic.UFontContext r0, $r1, $r2;
        net.sourceforge.plantuml.ugraphic.UFont r3;
        java.lang.String $r4, $r5, $r6, $r7, $r9;
        boolean $z0;
        java.awt.Font $r8;

        r3 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UFontContext;

        $r1 = <net.sourceforge.plantuml.ugraphic.UFontContext: net.sourceforge.plantuml.ugraphic.UFontContext EPS>;

        if r0 != $r1 goto label2;

        $r7 = r3.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String family>;

        if $r7 != null goto label1;

        return "Times-Roman";

     label1:
        $r8 = r3.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $r9 = virtualinvoke $r8.<java.awt.Font: java.lang.String getPSName()>();

        return $r9;

     label2:
        $r2 = <net.sourceforge.plantuml.ugraphic.UFontContext: net.sourceforge.plantuml.ugraphic.UFontContext SVG>;

        if r0 != $r2 goto label4;

        $r5 = r3.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String family>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sansserif");

        if $z0 == 0 goto label3;

        return "sans-serif";

     label3:
        $r6 = r3.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String family>;

        return $r6;

     label4:
        $r4 = r3.<net.sourceforge.plantuml.ugraphic.UFont: java.lang.String family>;

        return $r4;
    }

    private java.lang.String getPortableFontName()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1, $r3, $r4, $r5, $r15;
        java.lang.String r2, $r19, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        r2 = virtualinvoke $r1.<java.awt.Font: java.lang.String getFontName()>();

        $r3 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $z0 = virtualinvoke $r3.<java.awt.Font: boolean isBold()>();

        if $z0 == 0 goto label03;

        $r15 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $z6 = virtualinvoke $r15.<java.awt.Font: boolean isItalic()>();

        if $z6 == 0 goto label03;

        $z7 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".bolditalic");

        if $z7 == 0 goto label01;

        $r19 = r2;

        goto label02;

     label01:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bolditalic");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        return $r19;

     label03:
        $r4 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $z1 = virtualinvoke $r4.<java.awt.Font: boolean isBold()>();

        if $z1 == 0 goto label06;

        $z5 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".bold");

        if $z5 == 0 goto label04;

        $r20 = r2;

        goto label05;

     label04:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bold");

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        return $r20;

     label06:
        $r5 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $z2 = virtualinvoke $r5.<java.awt.Font: boolean isItalic()>();

        if $z2 == 0 goto label09;

        $z4 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".italic");

        if $z4 == 0 goto label07;

        $r21 = r2;

        goto label08;

     label07:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".italic");

        $r21 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        return $r21;

     label09:
        $z3 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".plain");

        if $z3 == 0 goto label10;

        $r22 = r2;

        goto label11;

     label10:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".plain");

        $r22 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        return $r22;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $r2 = virtualinvoke $r1.<java.awt.Font: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        java.awt.Font $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $i0 = virtualinvoke $r1.<java.awt.Font: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.ugraphic.UFont r1, $r2;
        java.awt.Font $r3, $r4;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UFont;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof net.sourceforge.plantuml.ugraphic.UFont;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r1.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $r2 = (net.sourceforge.plantuml.ugraphic.UFont) r0;

        $r3 = $r2.<net.sourceforge.plantuml.ugraphic.UFont: java.awt.Font font>;

        $z1 = virtualinvoke $r4.<java.awt.Font: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.awt.GraphicsEnvironment $r1;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.String r3, $r5;
        java.util.Set $r4;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <net.sourceforge.plantuml.ugraphic.UFont: java.util.Set names> = $r0;

        $r1 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        r2 = virtualinvoke $r1.<java.awt.GraphicsEnvironment: java.lang.String[] getAvailableFontFamilyNames()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r4 = <net.sourceforge.plantuml.ugraphic.UFont: java.util.Set names>;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
