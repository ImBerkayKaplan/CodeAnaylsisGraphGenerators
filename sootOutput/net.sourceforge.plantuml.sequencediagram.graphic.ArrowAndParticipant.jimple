class net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant extends net.sourceforge.plantuml.sequencediagram.graphic.Arrow implements net.sourceforge.plantuml.sequencediagram.InGroupable
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow;
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox;
    private final double paddingParticipant;

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.graphic.Arrow, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow r1;
        double $d0, d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.skin.ArrowComponent $r3;
        net.sourceforge.plantuml.Url $r4;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r1 := @parameter1: net.sourceforge.plantuml.sequencediagram.graphic.Arrow;

        r5 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        d1 := @parameter3: double;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getStartingY()>();

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.Url getUrl()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void <init>(double,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.skin.ArrowComponent,net.sourceforge.plantuml.Url)>($d0, $r2, $r3, $r4);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: double paddingParticipant> = d1;

        $d2 = virtualinvoke r5.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d3 = $d2 / 2.0;

        $d4 = $d3 - d1;

        virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void setPaddingArrowHead(double)>($d4);

        return;
    }

    public void setMaxX(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void setMaxX(double)>(d0);

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void setMaxX(double)>(d0);

        return;
    }

    public final double getArrowOnlyWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d1 / 2.0;

        $d3 = $d0 + $d2;

        return $d3;
    }

    public double getArrowYEndLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getArrowYEndLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public int getDirection(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $i0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: int getDirection(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $i0;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.NotePosition)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.NotePosition r2;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.sequencediagram.NotePosition;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.sequencediagram.NotePosition)>(r1, r2);

        return $r4;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r1, $r5, $r13, $r16;
        double d0, d1, $d2, $d3, $d4, d5, d6, $d7, $d8, d9, d10, d11;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r9, $r17;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r3, $r7, $r11, $r18;
        net.sourceforge.plantuml.graphic.StringBounder $r4, $r6, $r12, $r14;
        byte $b0, $b1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8, $r15;
        net.sourceforge.plantuml.skin.Context2D r10;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d5 := @parameter1: double;

        r10 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        d0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getStartingX()>();

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>($r4);

        $b0 = d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        virtualinvoke $r18.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>(r2, d5, r10);

        goto label2;

     label1:
        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $r6 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d9 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d3 = d9 / 2.0;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: double paddingParticipant>;

        $d4 = $d3 - $d2;

        $r8 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        $r9 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic,double,net.sourceforge.plantuml.skin.Context2D)>($r9, d5, r10);

     label2:
        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $r12 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d10 = virtualinvoke $r11.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>($r12);

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $r14 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d6 = virtualinvoke $r13.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>($r14);

        d11 = 0.0;

        $b1 = d10 cmpl d6;

        if $b1 <= 0 goto label3;

        d11 = d10 - d6;

     label3:
        $z0 = interfaceinvoke r10.<net.sourceforge.plantuml.skin.Context2D: boolean isBackground()>();

        if $z0 != 0 goto label4;

        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $r15 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: double getStartingY()>();

        $d8 = $d7 + d11;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, $d8);

        $r17 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r15);

        virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: void drawParticipantHead(net.sourceforge.plantuml.ugraphic.UGraphic)>($r17);

     label4:
        return;
    }

    private double getDiff(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3, $r5;
        double d0, d1, d2;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $r5 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d1 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>($r5);

        d2 = d0 - d1;

        return d2;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getHeadHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        return $d2;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d1 / 2.0;

        $d3 = $d0 + $d2;

        return $d3;
    }

    public double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox participantBox>;

        $d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d1 / 2.0;

        $d3 = $d0 + $d2;

        return $d3;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.graphic.Arrow $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant: net.sourceforge.plantuml.sequencediagram.graphic.Arrow arrow>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }
}
