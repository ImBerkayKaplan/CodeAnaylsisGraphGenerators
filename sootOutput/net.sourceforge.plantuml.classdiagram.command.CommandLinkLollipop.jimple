public final class net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop extends net.sourceforge.plantuml.command.SingleLineCommand2
{
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r0;
        net.sourceforge.plantuml.UmlDiagramType r1;
        net.sourceforge.plantuml.command.regex.RegexConcat $r2;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r1 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r2 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: net.sourceforge.plantuml.command.regex.RegexConcat getRegexConcat(net.sourceforge.plantuml.UmlDiagramType)>(r1);

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r2);

        return;
    }

    static net.sourceforge.plantuml.command.regex.RegexConcat getRegexConcat(net.sourceforge.plantuml.UmlDiagramType)
    {
        java.lang.StringBuilder $r0, $r3, $r5, $r15, $r16, $r18, $r19, $r34, $r35, $r37, $r38;
        java.lang.Class $r1;
        java.lang.String $r2, $r6, $r17, $r20, $r36, $r39;
        net.sourceforge.plantuml.UmlDiagramType r4;
        net.sourceforge.plantuml.command.regex.IRegex[] $r7, $r11, $r26, $r43;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r8, $r12, $r13, $r14, $r21, $r23, $r24, $r27, $r28, $r29, $r31, $r32, $r33, $r40, $r44, $r45, $r46, $r47;
        net.sourceforge.plantuml.command.regex.RegexOptional $r9, $r22, $r30, $r41;
        net.sourceforge.plantuml.command.regex.RegexConcat $r10, $r42, $r48;
        net.sourceforge.plantuml.command.regex.RegexOr $r25;

        r4 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandLinkLollipop;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[14];

        $r8 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r7[0] = $r8;

        $r9 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r10 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r11 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("HEADER", "@([\\d.]+)");

        $r11[0] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r11[1] = $r13;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r11);

        specialinvoke $r9.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r10);

        $r7[1] = $r9;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r17 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: java.lang.String optionalKeywords(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[%s]+)?(\\.?[%pLN_]+(?:\\.[%pLN_]+)*|[%g][^%g]+[%g])[%s]*(\\<\\<.*\\>\\>)?");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("ENT1", $r20);

        $r7[2] = $r14;

        $r21 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r7[3] = $r21;

        $r22 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("FIRST_LABEL", "[%g]([^%g]+)[%g]");

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r23);

        $r7[4] = $r22;

        $r24 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r7[5] = $r24;

        $r25 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r26 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r27 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("LOL_THEN_ENT", "([()]\\))([-=.]+)");

        $r26[0] = $r27;

        $r28 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r28.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("ENT_THEN_LOL", "([-=.]+)(\\([()])");

        $r26[1] = $r28;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r26);

        $r7[6] = $r25;

        $r29 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r7[7] = $r29;

        $r30 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r31 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r31.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SECOND_LABEL", "[%g]([^%g]+)[%g]");

        specialinvoke $r30.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r31);

        $r7[8] = $r30;

        $r32 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r7[9] = $r32;

        $r33 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r36 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: java.lang.String optionalKeywords(net.sourceforge.plantuml.UmlDiagramType)>(r4);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[%s]+)?(\\.?[%pLN_]+(?:\\.[%pLN_]+)*|[%g][^%g]+[%g])[%s]*(\\<\\<.*\\>\\>)?");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("ENT2", $r39);

        $r7[10] = $r33;

        $r40 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r7[11] = $r40;

        $r41 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r42 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r43 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[3];

        $r44 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r44.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(":");

        $r43[0] = $r44;

        $r45 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r43[1] = $r45;

        $r46 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r46.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("LABEL_LINK", "(.+)");

        $r43[2] = $r46;

        specialinvoke $r42.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r43);

        specialinvoke $r41.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r42);

        $r7[12] = $r41;

        $r47 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r7[13] = $r47;

        $r48 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r6, $r7);

        return $r48;
    }

    private static java.lang.String optionalKeywords(net.sourceforge.plantuml.UmlDiagramType)
    {
        net.sourceforge.plantuml.UmlDiagramType r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: net.sourceforge.plantuml.UmlDiagramType;

        $r1 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType CLASS>;

        if r0 != $r1 goto label1;

        return "(interface|enum|annotation|abstract[%s]+class|abstract|class|entity)";

     label1:
        $r2 = <net.sourceforge.plantuml.UmlDiagramType: net.sourceforge.plantuml.UmlDiagramType OBJECT>;

        if r0 != $r2 goto label2;

        return "(object)";

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    private net.sourceforge.plantuml.cucadiagram.LeafType getType(java.lang.String)
    {
        java.lang.String r0;
        char $c0, $c1;
        net.sourceforge.plantuml.cucadiagram.LeafType $r1, $r2;
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r3;

        r3 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        if $c0 != $c1 goto label1;

        $r2 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType LOLLIPOP_HALF>;

        return $r2;

     label1:
        $r1 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType LOLLIPOP_FULL>;

        return $r1;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r2, r6, $r7, $r13, $r16, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r35, $r38, $r40, r55, r56, r57, r58, $r59, r60, $r64, $r65, $r69;
        java.lang.StringBuilder $r3, $r4, $r5, $r10, $r11, $r12, $r32, $r33, $r34;
        int $i0, $i1, i2;
        net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r9;
        net.sourceforge.plantuml.cucadiagram.Code $r14, $r36, $r44, $r51;
        net.sourceforge.plantuml.cucadiagram.Display $r15, $r37, $r63;
        net.sourceforge.plantuml.cucadiagram.LeafType $r17, $r39;
        net.sourceforge.plantuml.command.regex.Matcher2 r18, r20, r22;
        net.sourceforge.plantuml.command.regex.Pattern2 r19, r21, r61;
        java.lang.AssertionError $r41;
        net.sourceforge.plantuml.LineLocation r42;
        net.sourceforge.plantuml.cucadiagram.Ident r43, r47, r50, r53;
        net.sourceforge.plantuml.cucadiagram.IEntity r46, r48, r49;
        net.sourceforge.plantuml.cucadiagram.LinkType r54;
        net.sourceforge.plantuml.cucadiagram.Link $r62;
        net.sourceforge.plantuml.ISkinParam $r66;
        net.sourceforge.plantuml.style.StyleBuilder $r67;
        net.sourceforge.plantuml.command.CommandExecutionResult $r70;

        r9 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r8 := @parameter0: net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram;

        r42 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ENT1", 1);

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ENT2", 1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lol");

        $i0 = staticinvoke <net.sourceforge.plantuml.utils.UniqueSequence: int getValue()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LOL_THEN_ENT", 1);

        if $r7 != null goto label04;

        $z4 = <net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: boolean $assertionsDisabled>;

        if $z4 != 0 goto label01;

        $r40 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ENT_THEN_LOL", 0);

        if $r40 != null goto label01;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label01:
        r43 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        $z5 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: boolean V1972()>();

        if $z5 == 0 goto label02;

        $r44 = r43;

        goto label03;

     label02:
        $r44 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r1);

     label03:
        r46 = specialinvoke r9.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: net.sourceforge.plantuml.cucadiagram.IEntity getFoo1(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Ident)>(r8, $r44, r43);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        r47 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>($r35);

        $r36 = virtualinvoke r47.<net.sourceforge.plantuml.cucadiagram.Ident: net.sourceforge.plantuml.cucadiagram.Code toCode(net.sourceforge.plantuml.cucadiagram.CucaDiagram)>(r8);

        $r37 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r2);

        $r38 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ENT_THEN_LOL", 1);

        $r39 = specialinvoke r9.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: net.sourceforge.plantuml.cucadiagram.LeafType getType(java.lang.String)>($r38);

        r48 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r47, $r36, $r37, $r39, null);

        r49 = r46;

        goto label07;

     label04:
        r50 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r2);

        $z0 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: boolean V1972()>();

        if $z0 == 0 goto label05;

        $r51 = r50;

        goto label06;

     label05:
        $r51 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r2);

     label06:
        r48 = specialinvoke r9.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: net.sourceforge.plantuml.cucadiagram.IEntity getFoo1(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Ident)>(r8, $r51, r50);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r53 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>($r13);

        $r14 = virtualinvoke r53.<net.sourceforge.plantuml.cucadiagram.Ident: net.sourceforge.plantuml.cucadiagram.Code toCode(net.sourceforge.plantuml.cucadiagram.CucaDiagram)>(r8);

        $r15 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r1);

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LOL_THEN_ENT", 0);

        $r17 = specialinvoke r9.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: net.sourceforge.plantuml.cucadiagram.LeafType getType(java.lang.String)>($r16);

        r46 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf createLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r53, $r14, $r15, $r17, null);

        r49 = r48;

     label07:
        r54 = specialinvoke r9.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: net.sourceforge.plantuml.cucadiagram.LinkType getLinkType(net.sourceforge.plantuml.command.regex.RegexResult)>(r0);

        r55 = specialinvoke r9.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: java.lang.String getQueue(net.sourceforge.plantuml.command.regex.RegexResult)>(r0);

        i2 = virtualinvoke r55.<java.lang.String: int length()>();

        if i2 != 1 goto label08;

        $i1 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: int getNbOfHozizontalLollipop(net.sourceforge.plantuml.cucadiagram.IEntity)>(r49);

        if $i1 <= 1 goto label08;

        i2 = i2 + 1;

     label08:
        r56 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("FIRST_LABEL", 0);

        r57 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SECOND_LABEL", 0);

        r58 = null;

        $r59 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LABEL_LINK", 0);

        if $r59 == null goto label12;

        r60 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LABEL_LINK", 0);

        if r56 != null goto label11;

        if r57 != null goto label11;

        r61 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^\"([^\"]+)\"([^\"]+)\"([^\"]+)\"$");

        r18 = virtualinvoke r61.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r60);

        $z1 = virtualinvoke r18.<net.sourceforge.plantuml.command.regex.Matcher2: boolean matches()>();

        if $z1 == 0 goto label09;

        r56 = virtualinvoke r18.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r29 = virtualinvoke r18.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        $r30 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r29);

        $r31 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r30);

        r60 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r31);

        r57 = virtualinvoke r18.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(3);

        goto label11;

     label09:
        r19 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^\"([^\"]+)\"([^\"]+)$");

        r20 = virtualinvoke r19.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r60);

        $z2 = virtualinvoke r20.<net.sourceforge.plantuml.command.regex.Matcher2: boolean matches()>();

        if $z2 == 0 goto label10;

        r56 = virtualinvoke r20.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r26 = virtualinvoke r20.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

        $r27 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r26);

        $r28 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r27);

        r60 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r28);

        r57 = null;

        goto label11;

     label10:
        r21 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>("^([^\"]+)\"([^\"]+)\"$");

        r22 = virtualinvoke r21.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r60);

        $z3 = virtualinvoke r22.<net.sourceforge.plantuml.command.regex.Matcher2: boolean matches()>();

        if $z3 == 0 goto label11;

        r56 = null;

        $r23 = virtualinvoke r22.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(1);

        $r24 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r23);

        $r25 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r24);

        r60 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r25);

        r57 = virtualinvoke r22.<net.sourceforge.plantuml.command.regex.Matcher2: java.lang.String group(int)>(2);

     label11:
        r58 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r60);

     label12:
        $r62 = new net.sourceforge.plantuml.cucadiagram.Link;

        $r63 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r58);

        $r64 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: java.lang.String getLabeldistance()>();

        $r65 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: java.lang.String getLabelangle()>();

        $r66 = virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r67 = interfaceinvoke $r66.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        specialinvoke $r62.<net.sourceforge.plantuml.cucadiagram.Link: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.cucadiagram.LinkType,net.sourceforge.plantuml.cucadiagram.Display,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,net.sourceforge.plantuml.style.StyleBuilder)>(r46, r48, r54, $r63, i2, r56, r57, $r64, $r65, $r67);

        virtualinvoke r8.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: void resetPragmaLabel()>();

        $r69 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("HEADER", 0);

        specialinvoke r9.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: void addLink(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram,net.sourceforge.plantuml.cucadiagram.Link,java.lang.String)>(r8, $r62, $r69);

        $r70 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r70;
    }

    private net.sourceforge.plantuml.cucadiagram.IEntity getFoo1(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram, net.sourceforge.plantuml.cucadiagram.Code, net.sourceforge.plantuml.cucadiagram.Ident)
    {
        net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram r0;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.Ident r1;
        net.sourceforge.plantuml.cucadiagram.Code r2;
        net.sourceforge.plantuml.cucadiagram.IEntity $r3;
        int $i0;
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r5;
        net.sourceforge.plantuml.cucadiagram.ILeaf $r6;

        r5 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r0 := @parameter0: net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram;

        r2 := @parameter1: net.sourceforge.plantuml.cucadiagram.Code;

        r1 := @parameter2: net.sourceforge.plantuml.cucadiagram.Ident;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: boolean V1972()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Ident: int size()>();

        if $i0 != 1 goto label1;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getLeafVerySmart(net.sourceforge.plantuml.cucadiagram.Ident)>(r1);

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getLeafStrict(net.sourceforge.plantuml.cucadiagram.Ident)>(r1);

     label2:
        if $r6 == null goto label3;

        return $r6;

     label3:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: net.sourceforge.plantuml.cucadiagram.IEntity getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r1, r2, null, null);

        return $r3;
    }

    private void addLink(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram, net.sourceforge.plantuml.cucadiagram.Link, java.lang.String)
    {
        net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram r0;
        net.sourceforge.plantuml.cucadiagram.Link r1;
        java.lang.String r2;
        double $d0;
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r3;

        r3 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r0 := @parameter0: net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram;

        r1 := @parameter1: net.sourceforge.plantuml.cucadiagram.Link;

        r2 := @parameter2: java.lang.String;

        virtualinvoke r0.<net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram: void addLink(net.sourceforge.plantuml.cucadiagram.Link)>(r1);

        if r2 != null goto label1;

        goto label2;

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

        virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Link: void setWeight(double)>($d0);

     label2:
        return;
    }

    private net.sourceforge.plantuml.cucadiagram.LinkType getLinkType(net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.cucadiagram.LinkType $r0;
        net.sourceforge.plantuml.cucadiagram.LinkDecor $r1, $r2;
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r3;
        net.sourceforge.plantuml.command.regex.RegexResult r4;

        r3 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r4 := @parameter0: net.sourceforge.plantuml.command.regex.RegexResult;

        $r0 = new net.sourceforge.plantuml.cucadiagram.LinkType;

        $r2 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor NONE>;

        $r1 = <net.sourceforge.plantuml.cucadiagram.LinkDecor: net.sourceforge.plantuml.cucadiagram.LinkDecor NONE>;

        specialinvoke $r0.<net.sourceforge.plantuml.cucadiagram.LinkType: void <init>(net.sourceforge.plantuml.cucadiagram.LinkDecor,net.sourceforge.plantuml.cucadiagram.LinkDecor)>($r2, $r1);

        return $r0;
    }

    private java.lang.String getQueue(net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, $r2, $r4, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r3;
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r8;

        r8 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r0 := @parameter0: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LOL_THEN_ENT", 1);

        if $r1 == null goto label1;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LOL_THEN_ENT", 1);

        $r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r6);

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ENT_THEN_LOL", 0);

        if $r2 == null goto label2;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ENT_THEN_LOL", 0);

        $r5 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r4);

        return $r5;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandLinkLollipop;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop: boolean $assertionsDisabled> = $z1;

        return;
    }
}
