public class net.sourceforge.plantuml.sequencediagram.teoz.TileMarged extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile implements net.sourceforge.plantuml.sequencediagram.teoz.Tile
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.Tile tile;
    private final double x1;
    private final double x2;
    private final double y1;
    private final double y2;

    public void <init>(net.sourceforge.plantuml.sequencediagram.teoz.Tile, double, double, double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileMarged r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r1;
        net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileMarged;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        $r2 = (net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile) r1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double x1> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double x2> = d1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double y1> = d2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double y2> = d3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileMarged r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.UDrawable $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileMarged;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r4 = (net.sourceforge.plantuml.graphic.UDrawable) $r1;

        $r3 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double x1>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double y1>;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, $d0);

        $r5 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r5);

        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileMarged r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileMarged;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double y1>;

        $d3 = $d0 + $d1;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double y2>;

        $d4 = $d3 + $d2;

        return $d4;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileMarged r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileMarged;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void addConstraints()>();

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileMarged r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileMarged;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMinX()>();

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileMarged r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.real.Real $r2, $r3;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileMarged;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double x1>;

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: double x2>;

        $d2 = $d1 + $d0;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d2);

        return $r3;
    }

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileMarged r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.sequencediagram.Event $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileMarged;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileMarged: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        return $r2;
    }
}
