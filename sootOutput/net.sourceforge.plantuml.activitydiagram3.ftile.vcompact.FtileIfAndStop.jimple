class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop extends net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile
{
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Ftile stop2;
    private final net.sourceforge.plantuml.graphic.Rainbow arrowColor;

    private void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.graphic.Rainbow, net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1, r3, r4;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.graphic.Rainbow r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r3 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r1 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r5 := @parameter2: net.sourceforge.plantuml.graphic.Rainbow;

        r4 := @parameter3: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ISkinParam skinParam()>();

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile: void <init>(net.sourceforge.plantuml.ISkinParam)>($r2);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1> = r3;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1> = r1;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile stop2> = r4;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.graphic.Rainbow arrowColor> = r5;

        return;
    }

    public java.util.Set getSwimlanes()
    {
        java.util.HashSet $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r3, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r4;
        java.util.Set $r5, $r6;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        if $r3 == null goto label1;

        $r7 = virtualinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label1:
        $r4 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r6;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        return $r2;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()>();

        return $r1;
    }

    static net.sourceforge.plantuml.activitydiagram3.ftile.Ftile create(net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.graphic.Rainbow, net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactory, net.sourceforge.plantuml.svek.ConditionStyle, net.sourceforge.plantuml.activitydiagram3.Branch, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.cucadiagram.Display)
    {
        net.sourceforge.plantuml.activitydiagram3.Branch r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r1, r4, $r34;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactory r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r3;
        boolean $z0;
        net.sourceforge.plantuml.graphic.FontConfiguration $r5, $r40, r44;
        net.sourceforge.plantuml.ISkinParam r6, $r24, $r36;
        net.sourceforge.plantuml.FontParam $r7;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r8, $r9;
        net.sourceforge.plantuml.creole.CreoleMode $r10;
        net.sourceforge.plantuml.creole.SheetBuilder $r11;
        net.sourceforge.plantuml.cucadiagram.Display r12;
        net.sourceforge.plantuml.creole.SheetBlock1 $r13;
        net.sourceforge.plantuml.LineBreakStrategy $r14;
        double $d0;
        net.sourceforge.plantuml.creole.SheetBlock2 $r16;
        net.sourceforge.plantuml.creole.Stencil $r17;
        net.sourceforge.plantuml.svek.ConditionStyle r19, $r20, $r21;
        java.lang.IllegalStateException $r22;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamond $r23;
        net.sourceforge.plantuml.ugraphic.color.HColor r25, r26;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop $r27;
        net.sourceforge.plantuml.graphic.Rainbow r28;
        java.util.ArrayList $r30;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop$ConnectionHorizontal $r32;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside $r35;
        net.sourceforge.plantuml.style.StyleSignature $r38;
        net.sourceforge.plantuml.style.StyleBuilder $r39;
        net.sourceforge.plantuml.graphic.StringBounder r41;
        net.sourceforge.plantuml.style.Style r42;
        net.sourceforge.plantuml.ugraphic.UStroke r43;
        net.sourceforge.plantuml.creole.Sheet r45;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondWIP r46;

        r3 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r26 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r25 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r28 := @parameter3: net.sourceforge.plantuml.graphic.Rainbow;

        r2 := @parameter4: net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactory;

        r19 := @parameter5: net.sourceforge.plantuml.svek.ConditionStyle;

        r0 := @parameter6: net.sourceforge.plantuml.activitydiagram3.Branch;

        r6 := @parameter7: net.sourceforge.plantuml.ISkinParam;

        r41 := @parameter8: net.sourceforge.plantuml.graphic.StringBounder;

        r12 := @parameter9: net.sourceforge.plantuml.cucadiagram.Display;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.Branch: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile getFtile()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactory: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile stop(net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>(r3);

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r38 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature activityDiamond()>();

        $r39 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r42 = virtualinvoke $r38.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r39);

        r43 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.style.Style)>(r42);

        $r40 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        specialinvoke $r40.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.style.Style)>(r6, r42);

        r44 = $r40;

        goto label2;

     label1:
        r43 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ugraphic.UStroke getThickness(net.sourceforge.plantuml.style.Style)>(null);

        $r5 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        $r7 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam ACTIVITY_DIAMOND>;

        specialinvoke $r5.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.cucadiagram.Stereotype)>(r6, $r7, null);

        r44 = $r5;

     label2:
        $r8 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment LEFT>;

        $r9 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r8);

        $r10 = <net.sourceforge.plantuml.creole.CreoleMode: net.sourceforge.plantuml.creole.CreoleMode FULL>;

        $r11 = staticinvoke <net.sourceforge.plantuml.creole.Parser: net.sourceforge.plantuml.creole.SheetBuilder build(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.creole.CreoleMode)>(r44, $r9, r6, $r10);

        r45 = interfaceinvoke $r11.<net.sourceforge.plantuml.creole.SheetBuilder: net.sourceforge.plantuml.creole.Sheet createSheet(net.sourceforge.plantuml.cucadiagram.Display)>(r12);

        $r13 = new net.sourceforge.plantuml.creole.SheetBlock1;

        $r14 = <net.sourceforge.plantuml.LineBreakStrategy: net.sourceforge.plantuml.LineBreakStrategy NONE>;

        $d0 = interfaceinvoke r6.<net.sourceforge.plantuml.ISkinParam: double getPadding()>();

        specialinvoke $r13.<net.sourceforge.plantuml.creole.SheetBlock1: void <init>(net.sourceforge.plantuml.creole.Sheet,net.sourceforge.plantuml.LineBreakStrategy,double)>(r45, $r14, $d0);

        $r16 = new net.sourceforge.plantuml.creole.SheetBlock2;

        $r17 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Hexagon: net.sourceforge.plantuml.creole.Stencil asStencil(net.sourceforge.plantuml.graphic.TextBlock)>($r13);

        specialinvoke $r16.<net.sourceforge.plantuml.creole.SheetBlock2: void <init>(net.sourceforge.plantuml.creole.SheetBlock1,net.sourceforge.plantuml.creole.Stencil,net.sourceforge.plantuml.ugraphic.UStroke)>($r13, $r17, r43);

        $r20 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle INSIDE_HEXAGON>;

        if r19 != $r20 goto label3;

        $r35 = new net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside;

        $r36 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ISkinParam skinParam()>();

        specialinvoke $r35.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>($r16, $r36, r25, r26, r3);

        r46 = $r35;

        goto label5;

     label3:
        $r21 = <net.sourceforge.plantuml.svek.ConditionStyle: net.sourceforge.plantuml.svek.ConditionStyle EMPTY_DIAMOND>;

        if r19 != $r21 goto label4;

        $r23 = new net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamond;

        $r24 = interfaceinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.ISkinParam skinParam()>();

        specialinvoke $r23.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamond: void <init>(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>($r24, r25, r26, r3);

        r46 = virtualinvoke $r23.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamond: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamond withNorth(net.sourceforge.plantuml.graphic.TextBlock)>($r16);

        goto label5;

     label4:
        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>()>();

        throw $r22;

     label5:
        $r27 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        specialinvoke $r27.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.graphic.Rainbow,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(r46, r1, r28, r4);

        $r30 = new java.util.ArrayList;

        specialinvoke $r30.<java.util.ArrayList: void <init>()>();

        $r32 = new net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop$ConnectionHorizontal;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r27);

        specialinvoke $r32.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop$ConnectionHorizontal: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop,net.sourceforge.plantuml.graphic.Rainbow)>($r27, r28);

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r32);

        $r34 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.FtileUtils: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile addConnection(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,java.util.Collection)>($r27, $r30);

        return $r34;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r3, $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r4, r6, $r7;
        double $d0, $d1, d2, $d3, $d4, d5;
        int $i0;
        net.sourceforge.plantuml.ugraphic.UTranslate $r8;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d1 = virtualinvoke r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getHeight()>();

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: int getSuppHeight()>();

        $d4 = (double) $i0;

        d5 = $d3 + $d4;

        $r8 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d2, d5);

        return $r8;
    }

    private int getSuppHeight()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        return 30;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3, $r4;
        double $d1, $d2, $d3, d4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d1 = virtualinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = $d2 / 2.0;

        d4 = $d1 - $d3;

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d4, 0.0);

        return $r5;
    }

    private net.sourceforge.plantuml.ugraphic.UTranslate getTranslateStop(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3, r5, $r6;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, d9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile stop2>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = $d0 - $d1;

        d3 = $d2 / 2.0;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d4 = virtualinvoke $r6.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $d5 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d6 = $d5 / 2.0;

        $d7 = $d4 + $d6;

        $d8 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: double getDiamondStopDistance()>();

        d9 = $d7 + $d8;

        $r7 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d9, d3);

        return $r7;
    }

    private double getDiamondStopDistance()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        return 40.0;
    }

    public net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0, $r2, $r3;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r1;
        java.lang.UnsupportedOperationException $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6, $r7;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        if r0 != $r2 goto label1;

        $r7 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        return $r7;

     label1:
        $r3 = r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        if r0 != $r3 goto label2;

        $r6 = specialinvoke r1.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        return $r6;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r4, $r7, $r10;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r2;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3, $r6, $r9;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r5, $r8, $r11;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r5 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r5);

        $r6 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.ugraphic.UTranslate getTranslate1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r7 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        $r8 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        interfaceinvoke $r7.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r8);

        $r9 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateStop(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r10 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        $r11 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile stop2>;

        interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r11);

        return;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionFtile(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r2, $r4, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3, $r5, r6, r8, $r9, $r10;
        double $d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile stop2>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile tile1>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: double getDiamondStopDistance()>();

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = $d0 + $d1;

        r6 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addDim(double,double)>(0.0, $d2);

        $r7 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry appendBottom(net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry)>(r6);

        $i0 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: int getSuppHeight()>();

        $d3 = (double) $i0;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry addDim(double,double)>(0.0, $d3);

        return $r10;
    }

    static net.sourceforge.plantuml.activitydiagram3.ftile.Ftile access$000(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r1;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile diamond1>;

        return $r1;
    }

    static net.sourceforge.plantuml.activitydiagram3.ftile.Ftile access$100(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r1;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile stop2>;

        return $r1;
    }

    static net.sourceforge.plantuml.ugraphic.UTranslate access$200(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateDiamond1(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }

    static net.sourceforge.plantuml.ugraphic.UTranslate access$300(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateStop(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r2;
    }
}
