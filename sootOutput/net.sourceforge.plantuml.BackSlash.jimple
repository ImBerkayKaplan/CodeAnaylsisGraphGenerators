public class net.sourceforge.plantuml.BackSlash extends java.lang.Object
{
    public static final java.lang.String BS_BS_N;
    public static final java.lang.String NEWLINE;
    public static final char CHAR_NEWLINE;

    public void <init>()
    {
        net.sourceforge.plantuml.BackSlash r0;

        r0 := @this: net.sourceforge.plantuml.BackSlash;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static char hiddenNewLine()
    {
        return 57354;
    }

    public static java.lang.String convertHiddenNewLine(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r2;
        char $c0;
        java.lang.String $r3, r4, r5, r6;

        r4 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $c0 = staticinvoke <net.sourceforge.plantuml.BackSlash: char hiddenNewLine()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(?<!\\\\)\\\\n", $r3);

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\\\\\n", "\\\\n");

        return r6;
    }

    public static java.util.List splitHiddenNewLine(java.lang.String)
    {
        java.lang.String r0, $r4;
        java.lang.StringBuilder $r1, $r2, $r3;
        char $c0;
        java.lang.String[] $r5;
        java.util.List $r6;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $c0 = staticinvoke <net.sourceforge.plantuml.BackSlash: char hiddenNewLine()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r4);

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        return $r6;
    }

    public static java.lang.String manageNewLine(java.lang.String)
    {
        java.lang.String r0, $r1;
        char $c0;

        r0 := @parameter0: java.lang.String;

        $c0 = staticinvoke <net.sourceforge.plantuml.BackSlash: char hiddenNewLine()>();

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>($c0, 10);

        return $r1;
    }

    public static java.util.List getWithNewlines(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.util.ArrayList $r1;
        java.lang.StringBuilder $r3;
        int $i0, $i2, $i3, $i4, i6;
        java.lang.String $r5, $r10;
        java.util.List $r6;
        char c1, c5;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i6 = 0;

     label2:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i6 >= $i0 goto label8;

        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i6);

        if c1 != 92 goto label6;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = $i2 - 1;

        if i6 >= $i3 goto label6;

        $i4 = i6 + 1;

        c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        i6 = i6 + 1;

        if c5 != 110 goto label3;

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0);

        goto label5;

     label3:
        if c5 != 116 goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        goto label5;

     label4:
        if c5 != 92 goto label5;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

     label5:
        goto label7;

     label6:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label7:
        i6 = i6 + 1;

        goto label2;

     label8:
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r6;
    }

    public static java.lang.String translateBackSlashes(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.StringBuilder $r1;
        int $i0, $i2, $i3, $i4, $i6, i9;
        java.lang.String $r3;
        char c1, $c5, $c7, $c8;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i9 = 0;

     label2:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i9 >= $i0 goto label5;

        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i9);

        if c1 != 92 goto label3;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = $i2 - 1;

        if i9 >= $i3 goto label3;

        $i4 = i9 + 1;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $z0 = staticinvoke <net.sourceforge.plantuml.BackSlash: boolean isEnglishLetterOfBackSlash(char)>($c5);

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        $i6 = i9 + 1;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i6);

        $c8 = staticinvoke <net.sourceforge.plantuml.BackSlash: char translateChar(char)>($c7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        i9 = i9 + 1;

        goto label4;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label4:
        i9 = i9 + 1;

        goto label2;

     label5:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static boolean isEnglishLetterOfBackSlash(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 != 110 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String untranslateBackSlashes(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1, i2;
        java.lang.String $r3;
        char c3;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label2:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i2 >= $i0 goto label4;

        c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        if c3 <= 57344 goto label3;

        if c3 >= 57471 goto label3;

        $i1 = c3 - 57344;

        c3 = (char) $i1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        i2 = i2 + 1;

        goto label2;

     label4:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static char translateChar(char)
    {
        char c0, $c2;
        int $i1;
        java.lang.IllegalArgumentException $r0;

        c0 := @parameter0: char;

        if c0 <= 128 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label1:
        $i1 = 57344 + c0;

        $c2 = (char) $i1;

        return $c2;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.BackSlash: char CHAR_NEWLINE> = 10;

        <net.sourceforge.plantuml.BackSlash: java.lang.String NEWLINE> = "\n";

        <net.sourceforge.plantuml.BackSlash: java.lang.String BS_BS_N> = "\\n";

        return;
    }
}
