public final enum class net.sourceforge.plantuml.sequencediagram.GroupingType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.sequencediagram.GroupingType START;
    public static final enum net.sourceforge.plantuml.sequencediagram.GroupingType ELSE;
    public static final enum net.sourceforge.plantuml.sequencediagram.GroupingType END;
    private static final net.sourceforge.plantuml.sequencediagram.GroupingType[] $VALUES;

    public static net.sourceforge.plantuml.sequencediagram.GroupingType[] values()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.sequencediagram.GroupingType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.sequencediagram.GroupingType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/sequencediagram/GroupingType;", r0);

        $r2 = (net.sourceforge.plantuml.sequencediagram.GroupingType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.sequencediagram.GroupingType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.GroupingType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.sequencediagram.GroupingType getType(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.IllegalArgumentException $r1;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("opt");

        if $z0 == 0 goto label01;

        $r12 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r12;

     label01:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("alt");

        if $z1 == 0 goto label02;

        $r11 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r11;

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("loop");

        if $z2 == 0 goto label03;

        $r10 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r10;

     label03:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("par");

        if $z3 == 0 goto label04;

        $r9 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r9;

     label04:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("par2");

        if $z4 == 0 goto label05;

        $r8 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r8;

     label05:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("break");

        if $z5 == 0 goto label06;

        $r7 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r7;

     label06:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("group");

        if $z6 == 0 goto label07;

        $r6 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r6;

     label07:
        $z7 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("critical");

        if $z7 == 0 goto label08;

        $r5 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        return $r5;

     label08:
        $z8 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("also");

        if $z8 == 0 goto label09;

        $r4 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType ELSE>;

        return $r4;

     label09:
        $z9 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("else");

        if $z9 == 0 goto label10;

        $r3 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType ELSE>;

        return $r3;

     label10:
        $z10 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("end");

        if $z10 == 0 goto label11;

        $r2 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType END>;

        return $r2;

     label11:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    private static net.sourceforge.plantuml.sequencediagram.GroupingType[] $values()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingType[] $r0;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r1, $r2, $r3;

        $r0 = newarray (net.sourceforge.plantuml.sequencediagram.GroupingType)[3];

        $r1 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType ELSE>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType END>;

        $r0[2] = $r3;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.sequencediagram.GroupingType $r0, $r1, $r2;
        net.sourceforge.plantuml.sequencediagram.GroupingType[] $r3;

        $r0 = new net.sourceforge.plantuml.sequencediagram.GroupingType;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.GroupingType: void <init>(java.lang.String,int)>("START", 0);

        <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType START> = $r0;

        $r1 = new net.sourceforge.plantuml.sequencediagram.GroupingType;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.GroupingType: void <init>(java.lang.String,int)>("ELSE", 1);

        <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType ELSE> = $r1;

        $r2 = new net.sourceforge.plantuml.sequencediagram.GroupingType;

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.GroupingType: void <init>(java.lang.String,int)>("END", 2);

        <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType END> = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType[] $values()>();

        <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType[] $VALUES> = $r3;

        return;
    }
}
