public class net.sourceforge.plantuml.sequencediagram.teoz.TileParallel extends net.sourceforge.plantuml.sequencediagram.teoz.CommonTile
{
    private final java.util.List tiles;

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        java.util.ArrayList $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommonTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles> = $r2;

        return;
    }

    protected final void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void callbackY(double)>(d0);

        goto label1;

     label2:
        return;
    }

    public void add(net.sourceforge.plantuml.sequencediagram.teoz.Tile)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r1;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        double d0, d1, $d2;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, $r8;
        net.sourceforge.plantuml.graphic.UDrawable $r6;
        net.sourceforge.plantuml.ugraphic.UTranslate $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: double getContactPointRelative()>();

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        d1 = interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getContactPointRelative()>();

        $r6 = (net.sourceforge.plantuml.graphic.UDrawable) r4;

        $d2 = d0 - d1;

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        $r8 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r8);

        goto label1;

     label2:
        return;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        $d0 = interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getContactPointRelative()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public double getZZZ()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        $d0 = interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getZZZ()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: double getContactPointRelative()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: double getZZZ()>();

        $d2 = $d0 + $d1;

        return $d2;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void addConstraints()>();

        goto label1;

     label2:
        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel$1 $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r1;
        net.sourceforge.plantuml.real.Real $r2;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.TileParallel$1;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel$1: void <init>(net.sourceforge.plantuml.sequencediagram.teoz.TileParallel)>(r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real min(java.util.Collection)>($r0);

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel$2 $r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r1;
        net.sourceforge.plantuml.real.Real $r2;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        $r0 = new net.sourceforge.plantuml.sequencediagram.teoz.TileParallel$2;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel$2: void <init>(net.sourceforge.plantuml.sequencediagram.teoz.TileParallel)>(r1);

        $r2 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real max(java.util.Collection)>($r0);

        return $r2;
    }

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        return null;
    }

    public boolean matchAnchor(java.lang.String)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;
        java.lang.String r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        $z1 = interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: boolean matchAnchor(java.lang.String)>(r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    static java.util.List access$000(net.sourceforge.plantuml.sequencediagram.teoz.TileParallel)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel r0;
        java.util.List $r1;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: java.util.List tiles>;

        return $r1;
    }
}
