public class net.sourceforge.plantuml.bpm.Grid extends java.lang.Object
{
    private final net.sourceforge.plantuml.bpm.Chain lines;
    private final net.sourceforge.plantuml.bpm.Chain cols;
    private final net.sourceforge.plantuml.bpm.Coord root;
    private final java.util.Map cells;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        java.util.HashMap $r1;
        net.sourceforge.plantuml.bpm.Coord $r2, $r6, $r9, $r13;
        net.sourceforge.plantuml.bpm.Line $r3, $r7;
        net.sourceforge.plantuml.bpm.Col $r4, $r10;
        net.sourceforge.plantuml.bpm.ChainImpl $r5, $r8;
        net.sourceforge.plantuml.bpm.Cell $r11;
        java.util.Map $r12;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells> = $r1;

        $r2 = new net.sourceforge.plantuml.bpm.Coord;

        $r3 = new net.sourceforge.plantuml.bpm.Line;

        specialinvoke $r3.<net.sourceforge.plantuml.bpm.Line: void <init>()>();

        $r4 = new net.sourceforge.plantuml.bpm.Col;

        specialinvoke $r4.<net.sourceforge.plantuml.bpm.Col: void <init>()>();

        specialinvoke $r2.<net.sourceforge.plantuml.bpm.Coord: void <init>(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col)>($r3, $r4);

        r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord root> = $r2;

        $r5 = new net.sourceforge.plantuml.bpm.ChainImpl;

        $r6 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord root>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        specialinvoke $r5.<net.sourceforge.plantuml.bpm.ChainImpl: void <init>(java.lang.Object)>($r7);

        r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines> = $r5;

        $r8 = new net.sourceforge.plantuml.bpm.ChainImpl;

        $r9 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord root>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke $r8.<net.sourceforge.plantuml.bpm.ChainImpl: void <init>(java.lang.Object)>($r10);

        r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols> = $r8;

        $r12 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r13 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord root>;

        $r11 = new net.sourceforge.plantuml.bpm.Cell;

        specialinvoke $r11.<net.sourceforge.plantuml.bpm.Cell: void <init>()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        return;
    }

    private void <init>(net.sourceforge.plantuml.bpm.Grid)
    {
        net.sourceforge.plantuml.bpm.Grid r0, r2;
        java.util.HashMap $r1;
        net.sourceforge.plantuml.bpm.Chain $r3, $r6;
        net.sourceforge.plantuml.bpm.ChainImpl $r4, $r5, $r7, $r8;
        net.sourceforge.plantuml.bpm.Coord $r9;
        java.util.Map $r10, $r11;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r2 := @parameter0: net.sourceforge.plantuml.bpm.Grid;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells> = $r1;

        $r3 = r2.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r4 = (net.sourceforge.plantuml.bpm.ChainImpl) $r3;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.bpm.ChainImpl: net.sourceforge.plantuml.bpm.ChainImpl cloneMe()>();

        r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines> = $r5;

        $r6 = r2.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r7 = (net.sourceforge.plantuml.bpm.ChainImpl) $r6;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.bpm.ChainImpl: net.sourceforge.plantuml.bpm.ChainImpl cloneMe()>();

        r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols> = $r8;

        $r9 = r2.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord root>;

        r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord root> = $r9;

        $r11 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r10 = r2.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        interfaceinvoke $r11.<java.util.Map: void putAll(java.util.Map)>($r10);

        return;
    }

    public net.sourceforge.plantuml.bpm.Grid cloneMe()
    {
        net.sourceforge.plantuml.bpm.Grid $r0, r1;

        r1 := @this: net.sourceforge.plantuml.bpm.Grid;

        $r0 = new net.sourceforge.plantuml.bpm.Grid;

        specialinvoke $r0.<net.sourceforge.plantuml.bpm.Grid: void <init>(net.sourceforge.plantuml.bpm.Grid)>(r1);

        return $r0;
    }

    public net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Coord)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Coord r1;
        net.sourceforge.plantuml.bpm.Line $r2;
        net.sourceforge.plantuml.bpm.Col $r3;
        net.sourceforge.plantuml.bpm.Cell $r4;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r1 := @parameter0: net.sourceforge.plantuml.bpm.Coord;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col)>($r2, $r3);

        return $r4;
    }

    public net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Line, net.sourceforge.plantuml.bpm.Col)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Line r1;
        net.sourceforge.plantuml.bpm.Chain $r2, $r4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.bpm.Col r3;
        net.sourceforge.plantuml.bpm.Coord $r5;
        java.util.Map $r7, $r10;
        java.lang.Object $r8;
        net.sourceforge.plantuml.bpm.Cell $r9, r14;
        java.lang.IllegalArgumentException $r12, $r13;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r1 := @parameter0: net.sourceforge.plantuml.bpm.Line;

        r3 := @parameter1: net.sourceforge.plantuml.bpm.Col;

        $r2 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $z0 = interfaceinvoke $r2.<net.sourceforge.plantuml.bpm.Chain: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $z1 = interfaceinvoke $r4.<net.sourceforge.plantuml.bpm.Chain: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label2:
        $r5 = new net.sourceforge.plantuml.bpm.Coord;

        specialinvoke $r5.<net.sourceforge.plantuml.bpm.Coord: void <init>(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col)>(r1, r3);

        $r7 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r14 = (net.sourceforge.plantuml.bpm.Cell) $r8;

        if r14 != null goto label3;

        $r9 = new net.sourceforge.plantuml.bpm.Cell;

        specialinvoke $r9.<net.sourceforge.plantuml.bpm.Cell: void <init>()>();

        r14 = $r9;

        $r10 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r9);

     label3:
        return r14;
    }

    public net.sourceforge.plantuml.bpm.Coord getById(java.lang.String)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        java.lang.Object $r4, $r6, $r12;
        java.util.Map$Entry r5;
        net.sourceforge.plantuml.bpm.Cell r7;
        net.sourceforge.plantuml.bpm.Placeable $r8, $r10;
        java.lang.String r9, $r11;
        boolean $z0, $z1;
        net.sourceforge.plantuml.bpm.Coord $r13;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (net.sourceforge.plantuml.bpm.Cell) $r6;

        if r7 == null goto label1;

        $r8 = virtualinvoke r7.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        if $r8 != null goto label2;

        goto label1;

     label2:
        $r10 = virtualinvoke r7.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        $r11 = interfaceinvoke $r10.<net.sourceforge.plantuml.bpm.Placeable: java.lang.String getId()>();

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (net.sourceforge.plantuml.bpm.Coord) $r12;

        return $r13;

     label3:
        goto label1;

     label4:
        return null;
    }

    public final net.sourceforge.plantuml.bpm.Coord getRoot()
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Coord $r1;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord root>;

        return $r1;
    }

    public final net.sourceforge.plantuml.bpm.Chain lines()
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Chain $r1;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        return $r1;
    }

    public final net.sourceforge.plantuml.bpm.Chain cols()
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Chain $r1;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        return $r1;
    }

    public final net.sourceforge.plantuml.bpm.Coord getCoord(net.sourceforge.plantuml.bpm.Cell)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object $r5, $r7, $r9;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.bpm.Cell r8;
        net.sourceforge.plantuml.bpm.Coord $r10;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r8 := @parameter0: net.sourceforge.plantuml.bpm.Cell;

        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r7 != r8 goto label2;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (net.sourceforge.plantuml.bpm.Coord) $r9;

        return $r10;

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;
    }

    private net.sourceforge.plantuml.bpm.Coord getCoord(net.sourceforge.plantuml.bpm.Placeable)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object $r5, $r7, $r11;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.bpm.Cell $r8;
        net.sourceforge.plantuml.bpm.Placeable $r9, r10;
        net.sourceforge.plantuml.bpm.Coord $r12;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r10 := @parameter0: net.sourceforge.plantuml.bpm.Placeable;

        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (net.sourceforge.plantuml.bpm.Cell) $r7;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        if $r9 != r10 goto label2;

        $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (net.sourceforge.plantuml.bpm.Coord) $r11;

        return $r12;

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;
    }

    public final net.sourceforge.plantuml.bpm.Navigator linesOf(net.sourceforge.plantuml.bpm.Coord)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Coord r1;
        net.sourceforge.plantuml.bpm.Chain $r2;
        net.sourceforge.plantuml.bpm.Line $r3;
        net.sourceforge.plantuml.bpm.Navigator $r4;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r1 := @parameter0: net.sourceforge.plantuml.bpm.Coord;

        $r2 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.bpm.Chain: net.sourceforge.plantuml.bpm.Navigator navigator(java.lang.Object)>($r3);

        return $r4;
    }

    public final net.sourceforge.plantuml.bpm.Navigator colsOf(net.sourceforge.plantuml.bpm.Coord)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Coord r1;
        net.sourceforge.plantuml.bpm.Chain $r2;
        net.sourceforge.plantuml.bpm.Col $r3;
        net.sourceforge.plantuml.bpm.Navigator $r4;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r1 := @parameter0: net.sourceforge.plantuml.bpm.Coord;

        $r2 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.bpm.Chain: net.sourceforge.plantuml.bpm.Navigator navigator(java.lang.Object)>($r3);

        return $r4;
    }

    public final net.sourceforge.plantuml.bpm.Navigator linesOf(net.sourceforge.plantuml.bpm.Cell)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Cell r1;
        net.sourceforge.plantuml.bpm.Coord $r2;
        net.sourceforge.plantuml.bpm.Navigator $r3;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r1 := @parameter0: net.sourceforge.plantuml.bpm.Cell;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord getCoord(net.sourceforge.plantuml.bpm.Cell)>(r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Navigator linesOf(net.sourceforge.plantuml.bpm.Coord)>($r2);

        return $r3;
    }

    public final net.sourceforge.plantuml.bpm.Navigator colsOf(net.sourceforge.plantuml.bpm.Cell)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Cell r1;
        net.sourceforge.plantuml.bpm.Coord $r2;
        net.sourceforge.plantuml.bpm.Navigator $r3;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r1 := @parameter0: net.sourceforge.plantuml.bpm.Cell;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord getCoord(net.sourceforge.plantuml.bpm.Cell)>(r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Navigator colsOf(net.sourceforge.plantuml.bpm.Coord)>($r2);

        return $r3;
    }

    public final net.sourceforge.plantuml.bpm.GridArray toArray(net.sourceforge.plantuml.ISkinParam)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Chain $r1, $r3;
        java.util.List r2, r4;
        net.sourceforge.plantuml.bpm.GridArray $r5;
        net.sourceforge.plantuml.ISkinParam r6;
        int $i0, $i1, i2, i3;
        java.util.Map $r8;
        java.util.Set $r9;
        java.util.Iterator r10;
        boolean $z0;
        java.lang.Object $r11, $r13, $r16, $r19, $r25, $r33;
        java.util.Map$Entry r12;
        net.sourceforge.plantuml.bpm.Coord $r14, $r17, $r26, $r34;
        net.sourceforge.plantuml.bpm.Line $r15, $r27;
        net.sourceforge.plantuml.bpm.Col $r18, $r35;
        net.sourceforge.plantuml.bpm.Cell $r20;
        net.sourceforge.plantuml.bpm.Placeable $r21;
        java.lang.IllegalStateException $r22, $r30;
        java.lang.StringBuilder $r23, $r24, $r28, $r31, $r32, $r36;
        java.lang.String $r29, $r37;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r6 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.bpm.Chain: java.util.List toList()>();

        $r3 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.bpm.Chain: java.util.List toList()>();

        $r5 = new net.sourceforge.plantuml.bpm.GridArray;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        specialinvoke $r5.<net.sourceforge.plantuml.bpm.GridArray: void <init>(net.sourceforge.plantuml.ISkinParam,int,int)>(r6, $i0, $i1);

        $r8 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (net.sourceforge.plantuml.bpm.Coord) $r13;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        i2 = interfaceinvoke r2.<java.util.List: int indexOf(java.lang.Object)>($r15);

        $r16 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (net.sourceforge.plantuml.bpm.Coord) $r16;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        i3 = interfaceinvoke r4.<java.util.List: int indexOf(java.lang.Object)>($r18);

        if i3 != -1 goto label2;

        $r30 = new java.lang.IllegalStateException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("col=");

        $r33 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r34 = (net.sourceforge.plantuml.bpm.Coord) $r33;

        $r35 = virtualinvoke $r34.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37);

        throw $r30;

     label2:
        if i2 != -1 goto label3;

        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line=");

        $r25 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (net.sourceforge.plantuml.bpm.Coord) $r25;

        $r27 = virtualinvoke $r26.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label3:
        $r19 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (net.sourceforge.plantuml.bpm.Cell) $r19;

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.bpm.GridArray: void setData(int,int,net.sourceforge.plantuml.bpm.Placeable)>(i2, i3, $r21);

        goto label1;

     label4:
        return $r5;
    }

    public java.util.Set usedColsOf(net.sourceforge.plantuml.bpm.Line)
    {
        java.util.HashSet $r0;
        net.sourceforge.plantuml.bpm.Grid r2;
        java.util.Map $r3;
        java.util.Set $r4, $r6;
        java.util.Iterator r5;
        java.lang.Object $r7, $r9, $r12, $r16;
        java.util.Map$Entry r8;
        net.sourceforge.plantuml.bpm.Cell r10;
        net.sourceforge.plantuml.bpm.Placeable $r11;
        net.sourceforge.plantuml.bpm.Coord $r13, $r17;
        net.sourceforge.plantuml.bpm.Line $r14, r15;
        net.sourceforge.plantuml.bpm.Col $r18;
        boolean $z1;

        r2 := @this: net.sourceforge.plantuml.bpm.Grid;

        r15 := @parameter0: net.sourceforge.plantuml.bpm.Line;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (net.sourceforge.plantuml.bpm.Cell) $r9;

        if r10 == null goto label1;

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        if $r11 != null goto label2;

        goto label1;

     label2:
        $r12 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (net.sourceforge.plantuml.bpm.Coord) $r12;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r14 != r15 goto label3;

        $r16 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (net.sourceforge.plantuml.bpm.Coord) $r16;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r18);

     label3:
        goto label1;

     label4:
        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r6;
    }

    public void removeLine(net.sourceforge.plantuml.bpm.Line)
    {
        boolean $z0, $z1, $z2, z3;
        net.sourceforge.plantuml.bpm.Grid r0;
        java.util.Map $r1;
        java.util.Set $r2, $r15;
        net.sourceforge.plantuml.bpm.Line r3, $r10;
        net.sourceforge.plantuml.bpm.Chain $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object $r6, $r8, $r11;
        java.util.Map$Entry r7;
        net.sourceforge.plantuml.bpm.Coord $r9;
        net.sourceforge.plantuml.bpm.Cell r12;
        net.sourceforge.plantuml.bpm.Placeable $r13;
        java.lang.IllegalStateException $r14;
        java.lang.AssertionError $r16;
        java.util.Iterator r17;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r3 := @parameter0: net.sourceforge.plantuml.bpm.Line;

        $z0 = <net.sourceforge.plantuml.bpm.Grid: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Set usedColsOf(net.sourceforge.plantuml.bpm.Line)>(r3);

        $z1 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r17 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r6 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (net.sourceforge.plantuml.bpm.Coord) $r8;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r10 == r3 goto label3;

        goto label2;

     label3:
        $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r12 = (net.sourceforge.plantuml.bpm.Cell) $r11;

        if r12 == null goto label4;

        $r13 = virtualinvoke r12.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        if $r13 != null goto label5;

     label4:
        interfaceinvoke r17.<java.util.Iterator: void remove()>();

        goto label6;

     label5:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>()>();

        throw $r14;

     label6:
        goto label2;

     label7:
        $r4 = r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        z3 = interfaceinvoke $r4.<net.sourceforge.plantuml.bpm.Chain: boolean remove(java.lang.Object)>(r3);

        if z3 != 0 goto label8;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label8:
        return;
    }

    public void addConnections()
    {
        java.util.HashMap $r0;
        net.sourceforge.plantuml.bpm.Grid r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0, $z2;
        java.lang.Object $r5, $r7, $r10, $r12;
        java.util.Map$Entry r6;
        net.sourceforge.plantuml.bpm.Cell $r8;
        java.util.List r9;
        net.sourceforge.plantuml.bpm.Coord r11, r14;
        int $i0, i1;
        net.sourceforge.plantuml.bpm.Placeable $r13;

        r1 := @this: net.sourceforge.plantuml.bpm.Grid;

        $r0 = new java.util.HashMap;

        $r2 = r1.<net.sourceforge.plantuml.bpm.Grid: java.util.Map cells>;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        $r3 = virtualinvoke $r0.<java.util.HashMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (net.sourceforge.plantuml.bpm.Cell) $r7;

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.bpm.Cell: java.util.List getDestinations2()>();

        $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r11 = (net.sourceforge.plantuml.bpm.Coord) $r10;

        i1 = 0;

     label2:
        $i0 = interfaceinvoke r9.<java.util.List: int size()>();

        if i1 >= $i0 goto label7;

        $r12 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(i1);

        $r13 = (net.sourceforge.plantuml.bpm.Placeable) $r12;

        r14 = specialinvoke r1.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Coord getCoord(net.sourceforge.plantuml.bpm.Placeable)>($r13);

        if i1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z2 == 0 goto label5;

        specialinvoke r1.<net.sourceforge.plantuml.bpm.Grid: void drawStartHorizontal(net.sourceforge.plantuml.bpm.Coord,net.sourceforge.plantuml.bpm.Coord)>(r11, r14);

        goto label6;

     label5:
        specialinvoke r1.<net.sourceforge.plantuml.bpm.Grid: void drawStartVertical(net.sourceforge.plantuml.bpm.Coord,net.sourceforge.plantuml.bpm.Coord)>(r11, r14);

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        goto label1;

     label8:
        return;
    }

    private void drawStartVertical(net.sourceforge.plantuml.bpm.Coord, net.sourceforge.plantuml.bpm.Coord)
    {
        net.sourceforge.plantuml.bpm.Coord r0, r2;
        net.sourceforge.plantuml.bpm.Line $r1, $r3, $r9, $r10, $r12, $r13, $r21, $r22, $r26, $r27, $r28, $r33, $r39, $r41, $r46, $r48, $r58, r59, $r64, $r65;
        net.sourceforge.plantuml.bpm.Grid r4;
        net.sourceforge.plantuml.bpm.Cell $r5, $r19;
        net.sourceforge.plantuml.bpm.Placeable $r6, $r20;
        net.sourceforge.plantuml.bpm.BpmElement r7, r62;
        net.sourceforge.plantuml.bpm.Chain $r8, $r11, $r14, $r25, $r30, $r35;
        int i0, $i1, $i2, $i3;
        net.sourceforge.plantuml.bpm.Col $r15, $r16, $r18, $r23, $r24, $r29, $r31, $r32, $r34, $r36, $r37, $r40, $r42, $r45, $r49, $r52, $r53, r61;
        java.lang.Object $r17, $r44, $r47, $r57;
        java.lang.IllegalStateException $r51, $r54;
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where $r55, $r63, $r66;
        net.sourceforge.plantuml.bpm.Navigator r56, r60;

        r4 := @this: net.sourceforge.plantuml.bpm.Grid;

        r0 := @parameter0: net.sourceforge.plantuml.bpm.Coord;

        r2 := @parameter1: net.sourceforge.plantuml.bpm.Coord;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r1 != $r3 goto label01;

        $r52 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r53 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if $r52 != $r53 goto label01;

        $r54 = new java.lang.IllegalStateException;

        specialinvoke $r54.<java.lang.IllegalStateException: void <init>()>();

        throw $r54;

     label01:
        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Coord)>(r0);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        r7 = (net.sourceforge.plantuml.bpm.BpmElement) $r6;

        $r8 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        i0 = interfaceinvoke $r8.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r9, $r10);

        if i0 != 0 goto label02;

        $r51 = new java.lang.IllegalStateException;

        specialinvoke $r51.<java.lang.IllegalStateException: void <init>()>();

        throw $r51;

     label02:
        if i0 >= 0 goto label03;

        $r55 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where SOUTH>;

        goto label04;

     label03:
        $r55 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where NORTH>;

     label04:
        virtualinvoke r7.<net.sourceforge.plantuml.bpm.BpmElement: void append(net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where)>($r55);

        $r11 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        r56 = staticinvoke <net.sourceforge.plantuml.bpm.Navigators: net.sourceforge.plantuml.bpm.Navigator iterate(net.sourceforge.plantuml.bpm.Chain,java.lang.Object,java.lang.Object)>($r11, $r12, $r13);

     label05:
        $r57 = interfaceinvoke r56.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object get()>();

        $r58 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r57 == $r58 goto label07;

        $r47 = interfaceinvoke r56.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object next()>();

        r59 = (net.sourceforge.plantuml.bpm.Line) $r47;

        $r48 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if r59 == $r48 goto label06;

        $r49 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>(r59, $r49, "NS");

     label06:
        goto label05;

     label07:
        $r14 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r16 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        r60 = staticinvoke <net.sourceforge.plantuml.bpm.Navigators: net.sourceforge.plantuml.bpm.Navigator iterate(net.sourceforge.plantuml.bpm.Chain,java.lang.Object,java.lang.Object)>($r14, $r15, $r16);

     label08:
        $r17 = interfaceinvoke r60.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object get()>();

        $r18 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if $r17 == $r18 goto label10;

        $r44 = interfaceinvoke r60.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object next()>();

        r61 = (net.sourceforge.plantuml.bpm.Col) $r44;

        $r45 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if r61 == $r45 goto label09;

        $r46 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r46, r61, "EW");

     label09:
        goto label08;

     label10:
        $r19 = virtualinvoke r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Coord)>(r2);

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        r62 = (net.sourceforge.plantuml.bpm.BpmElement) $r20;

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r22 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r21 != $r22 goto label13;

        if i0 >= 0 goto label11;

        $r63 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where NORTH>;

        goto label12;

     label11:
        $r63 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where SOUTH>;

     label12:
        virtualinvoke r62.<net.sourceforge.plantuml.bpm.BpmElement: void append(net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where)>($r63);

     label13:
        $r64 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r65 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r64 == $r65 goto label20;

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r24 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if $r23 == $r24 goto label20;

        $r25 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r26 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r27 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $i1 = interfaceinvoke $r25.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r26, $r27);

        if $i1 <= 0 goto label14;

        $r41 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r42 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r41, $r42, "N");

        goto label15;

     label14:
        $r28 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r29 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r28, $r29, "S");

     label15:
        $r30 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r31 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r32 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $i2 = interfaceinvoke $r30.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r31, $r32);

        if $i2 <= 0 goto label16;

        $r39 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r40 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r39, $r40, "E");

        goto label17;

     label16:
        $r33 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r34 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r33, $r34, "W");

     label17:
        $r35 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r36 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r37 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $i3 = interfaceinvoke $r35.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r36, $r37);

        if $i3 <= 0 goto label18;

        $r66 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where EAST>;

        goto label19;

     label18:
        $r66 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where WEST>;

     label19:
        virtualinvoke r62.<net.sourceforge.plantuml.bpm.BpmElement: void append(net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where)>($r66);

     label20:
        return;
    }

    private void drawStartHorizontal(net.sourceforge.plantuml.bpm.Coord, net.sourceforge.plantuml.bpm.Coord)
    {
        net.sourceforge.plantuml.bpm.Coord r0, r2;
        net.sourceforge.plantuml.bpm.Line $r1, $r3, $r15, $r16, $r18, $r21, $r22, $r28, $r31, $r32, $r33, $r36, $r37, $r39, $r41, $r45, $r49, r61, $r64, $r65;
        net.sourceforge.plantuml.bpm.Grid r4;
        net.sourceforge.plantuml.bpm.Cell $r5, $r19;
        net.sourceforge.plantuml.bpm.Placeable $r6, $r20;
        net.sourceforge.plantuml.bpm.BpmElement r7, r62;
        net.sourceforge.plantuml.bpm.Chain $r8, $r11, $r14, $r25, $r30, $r35;
        net.sourceforge.plantuml.bpm.Col $r9, $r10, $r12, $r13, $r23, $r24, $r26, $r27, $r29, $r34, $r40, $r42, $r46, $r48, $r52, $r53, $r58, r59;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r17, $r44, $r47, $r57;
        java.lang.IllegalStateException $r51, $r54;
        net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where $r55, $r63, $r66;
        net.sourceforge.plantuml.bpm.Navigator r56, r60;

        r4 := @this: net.sourceforge.plantuml.bpm.Grid;

        r0 := @parameter0: net.sourceforge.plantuml.bpm.Coord;

        r2 := @parameter1: net.sourceforge.plantuml.bpm.Coord;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r1 != $r3 goto label01;

        $r52 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r53 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if $r52 != $r53 goto label01;

        $r54 = new java.lang.IllegalStateException;

        specialinvoke $r54.<java.lang.IllegalStateException: void <init>()>();

        throw $r54;

     label01:
        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Coord)>(r0);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        r7 = (net.sourceforge.plantuml.bpm.BpmElement) $r6;

        $r8 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        i0 = interfaceinvoke $r8.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r9, $r10);

        if i0 != 0 goto label02;

        $r51 = new java.lang.IllegalStateException;

        specialinvoke $r51.<java.lang.IllegalStateException: void <init>()>();

        throw $r51;

     label02:
        if i0 >= 0 goto label03;

        $r55 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where EAST>;

        goto label04;

     label03:
        $r55 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where WEST>;

     label04:
        virtualinvoke r7.<net.sourceforge.plantuml.bpm.BpmElement: void append(net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where)>($r55);

        $r11 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        r56 = staticinvoke <net.sourceforge.plantuml.bpm.Navigators: net.sourceforge.plantuml.bpm.Navigator iterate(net.sourceforge.plantuml.bpm.Chain,java.lang.Object,java.lang.Object)>($r11, $r12, $r13);

     label05:
        $r57 = interfaceinvoke r56.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object get()>();

        $r58 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if $r57 == $r58 goto label07;

        $r47 = interfaceinvoke r56.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object next()>();

        r59 = (net.sourceforge.plantuml.bpm.Col) $r47;

        $r48 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if r59 == $r48 goto label06;

        $r49 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r49, r59, "EW");

     label06:
        goto label05;

     label07:
        $r14 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r15 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r16 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        r60 = staticinvoke <net.sourceforge.plantuml.bpm.Navigators: net.sourceforge.plantuml.bpm.Navigator iterate(net.sourceforge.plantuml.bpm.Chain,java.lang.Object,java.lang.Object)>($r14, $r15, $r16);

     label08:
        $r17 = interfaceinvoke r60.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object get()>();

        $r18 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r17 == $r18 goto label10;

        $r44 = interfaceinvoke r60.<net.sourceforge.plantuml.bpm.Navigator: java.lang.Object next()>();

        r61 = (net.sourceforge.plantuml.bpm.Line) $r44;

        $r45 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if r61 == $r45 goto label09;

        $r46 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>(r61, $r46, "NS");

     label09:
        goto label08;

     label10:
        $r19 = virtualinvoke r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Coord)>(r2);

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        r62 = (net.sourceforge.plantuml.bpm.BpmElement) $r20;

        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r22 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r21 != $r22 goto label13;

        if i0 >= 0 goto label11;

        $r63 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where WEST>;

        goto label12;

     label11:
        $r63 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where EAST>;

     label12:
        virtualinvoke r62.<net.sourceforge.plantuml.bpm.BpmElement: void append(net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where)>($r63);

     label13:
        $r64 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r65 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        if $r64 == $r65 goto label20;

        $r23 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r24 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        if $r23 == $r24 goto label20;

        $r25 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain cols>;

        $r26 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $r27 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        $i1 = interfaceinvoke $r25.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r26, $r27);

        if $i1 <= 0 goto label14;

        $r41 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r42 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r41, $r42, "W");

        goto label15;

     label14:
        $r28 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r29 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r28, $r29, "E");

     label15:
        $r30 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r31 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r32 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $i2 = interfaceinvoke $r30.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r31, $r32);

        if $i2 <= 0 goto label16;

        $r39 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r40 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r39, $r40, "S");

        goto label17;

     label16:
        $r33 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r34 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Col getCol()>();

        specialinvoke r4.<net.sourceforge.plantuml.bpm.Grid: void addPuzzle(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col,java.lang.String)>($r33, $r34, "N");

     label17:
        $r35 = r4.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Chain lines>;

        $r36 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $r37 = virtualinvoke r2.<net.sourceforge.plantuml.bpm.Coord: net.sourceforge.plantuml.bpm.Line getLine()>();

        $i3 = interfaceinvoke $r35.<net.sourceforge.plantuml.bpm.Chain: int compare(java.lang.Object,java.lang.Object)>($r36, $r37);

        if $i3 <= 0 goto label18;

        $r66 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where SOUTH>;

        goto label19;

     label18:
        $r66 = <net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where: net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where NORTH>;

     label19:
        virtualinvoke r62.<net.sourceforge.plantuml.bpm.BpmElement: void append(net.sourceforge.plantuml.bpm.ConnectorPuzzle$Where)>($r66);

     label20:
        return;
    }

    private void addPuzzle(net.sourceforge.plantuml.bpm.Line, net.sourceforge.plantuml.bpm.Col, java.lang.String)
    {
        net.sourceforge.plantuml.bpm.Grid r0;
        net.sourceforge.plantuml.bpm.Line r1;
        net.sourceforge.plantuml.bpm.Col r2;
        net.sourceforge.plantuml.bpm.Cell r3;
        net.sourceforge.plantuml.bpm.Placeable $r4;
        java.lang.String r5;
        net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty $r6, $r7, r8;

        r0 := @this: net.sourceforge.plantuml.bpm.Grid;

        r1 := @parameter0: net.sourceforge.plantuml.bpm.Line;

        r2 := @parameter1: net.sourceforge.plantuml.bpm.Col;

        r5 := @parameter2: java.lang.String;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.bpm.Grid: net.sourceforge.plantuml.bpm.Cell getCell(net.sourceforge.plantuml.bpm.Line,net.sourceforge.plantuml.bpm.Col)>(r1, r2);

        $r4 = virtualinvoke r3.<net.sourceforge.plantuml.bpm.Cell: net.sourceforge.plantuml.bpm.Placeable getData()>();

        r8 = (net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty) $r4;

        if r8 != null goto label1;

        $r7 = new net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty;

        specialinvoke $r7.<net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty: void <init>()>();

        r8 = $r7;

        virtualinvoke r3.<net.sourceforge.plantuml.bpm.Cell: void setData(net.sourceforge.plantuml.bpm.Placeable)>($r7);

     label1:
        $r6 = staticinvoke <net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty: net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty get(java.lang.String)>(r5);

        virtualinvoke r8.<net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty: void append(net.sourceforge.plantuml.bpm.ConnectorPuzzle)>($r6);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/bpm/Grid;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.bpm.Grid: boolean $assertionsDisabled> = $z1;

        return;
    }
}
