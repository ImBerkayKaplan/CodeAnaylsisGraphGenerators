public class net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UDriver
{

    public void <init>()
    {
        net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz r0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UImage, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, net.sourceforge.plantuml.tikz.TikzGraphics)
    {
        net.sourceforge.plantuml.ugraphic.UImage r0;
        java.lang.String r1, r10, r11;
        net.sourceforge.plantuml.tikz.TikzGraphics r2;
        double d0, d1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz r7;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r8;
        net.sourceforge.plantuml.ugraphic.UParam r9;

        r7 := @this: net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UImage;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r8 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r9 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r2 := @parameter5: net.sourceforge.plantuml.tikz.TikzGraphics;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UImage: java.lang.String getRawFileName()>();

        if r1 == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\includegraphics{");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void appendRaw(double,double,java.lang.String)>(d0, d1, r10);

        return;

     label1:
        r11 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UImage: java.lang.String getFormula()>();

        if r11 == null goto label2;

        virtualinvoke r2.<net.sourceforge.plantuml.tikz.TikzGraphics: void appendRaw(double,double,java.lang.String)>(d0, d1, r11);

     label2:
        return;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        net.sourceforge.plantuml.tikz.TikzGraphics $r5;
        net.sourceforge.plantuml.ugraphic.UImage $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.UImage) r1;

        $r5 = (net.sourceforge.plantuml.tikz.TikzGraphics) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz: void draw(net.sourceforge.plantuml.ugraphic.UImage,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.tikz.TikzGraphics)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
