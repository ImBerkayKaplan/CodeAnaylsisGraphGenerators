public class net.sourceforge.plantuml.tim.stdlib.GetJsonType extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.GetJsonType r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonType;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.GetJsonType r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonType;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%get_json_type", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.GetJsonType r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonType;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        net.sourceforge.plantuml.json.JsonValue r3;
        net.sourceforge.plantuml.tim.stdlib.GetJsonType r13;
        net.sourceforge.plantuml.tim.TContext r14;
        net.sourceforge.plantuml.tim.TMemory r15;
        net.sourceforge.plantuml.LineLocation r16;
        java.util.Map r17;

        r13 := @this: net.sourceforge.plantuml.tim.stdlib.GetJsonType;

        r14 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r15 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r16 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r17 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isString()>();

        if $z0 == 0 goto label1;

        $r12 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("string");

        return $r12;

     label1:
        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isNumber()>();

        if $z1 == 0 goto label2;

        $r11 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("number");

        return $r11;

     label2:
        $z2 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: boolean isJson()>();

        if $z2 != 0 goto label3;

        $r10 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("not_json");

        return $r10;

     label3:
        r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $z3 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isArray()>();

        if $z3 == 0 goto label4;

        $r9 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("array");

        return $r9;

     label4:
        $z4 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isObject()>();

        if $z4 == 0 goto label5;

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("object");

        return $r8;

     label5:
        $z5 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isBoolean()>();

        if $z5 == 0 goto label6;

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("boolean");

        return $r7;

     label6:
        $z6 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isNumber()>();

        if $z6 == 0 goto label7;

        $r6 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("number");

        return $r6;

     label7:
        $z7 = virtualinvoke r3.<net.sourceforge.plantuml.json.JsonValue: boolean isString()>();

        if $z7 == 0 goto label8;

        $r5 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("string");

        return $r5;

     label8:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("json");

        return $r4;
    }
}
