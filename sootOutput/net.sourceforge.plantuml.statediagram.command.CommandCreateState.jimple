public class net.sourceforge.plantuml.statediagram.command.CommandCreateState extends net.sourceforge.plantuml.command.SingleLineCommand2
{

    public void <init>()
    {
        net.sourceforge.plantuml.statediagram.command.CommandCreateState r0;
        net.sourceforge.plantuml.command.regex.IRegex $r1;

        r0 := @this: net.sourceforge.plantuml.statediagram.command.CommandCreateState;

        $r1 = staticinvoke <net.sourceforge.plantuml.statediagram.command.CommandCreateState: net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()>();

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r1);

        return;
    }

    private static net.sourceforge.plantuml.command.regex.IRegex getRegexConcat()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r30, $r33;
        net.sourceforge.plantuml.command.regex.IRegex[] $r2, $r7, $r9, $r16, $r43;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r3, $r4, $r5, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r34, $r36, $r37, $r39, $r40, $r44, $r45, $r46, $r47;
        net.sourceforge.plantuml.command.regex.RegexOr $r6;
        net.sourceforge.plantuml.command.regex.RegexConcat $r8, $r15, $r42, $r48;
        java.lang.StringBuilder $r28, $r29, $r31, $r32;
        net.sourceforge.plantuml.graphic.color.ColorParser $r35;
        net.sourceforge.plantuml.command.regex.RegexOptional $r38, $r41;

        $r0 = class "Lnet/sourceforge/plantuml/statediagram/command/CommandCreateState;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[15];

        $r3 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r2[0] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("state");

        $r2[1] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r2[2] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r7 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[4];

        $r8 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r10 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r10.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([%pLN_.]+)");

        $r9[0] = $r10;

        $r11 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r9[1] = $r11;

        $r12 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r12.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r9[2] = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r9[3] = $r13;

        $r14 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r14.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY1", "[%g]([^%g]+)[%g]");

        $r9[4] = $r14;

        specialinvoke $r8.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r9);

        $r7[0] = $r8;

        $r15 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r16 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r17 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r17.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", "[%g]([^%g]+)[%g]");

        $r16[0] = $r17;

        $r18 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r16[1] = $r18;

        $r19 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r19.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r16[2] = $r19;

        $r20 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r16[3] = $r20;

        $r21 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r21.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([%pLN_.]+)");

        $r16[4] = $r21;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r16);

        $r7[1] = $r15;

        $r22 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r22.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE3", "([%pLN_.]+)");

        $r7[2] = $r22;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE4", "[%g]([^%g]+)[%g]");

        $r7[3] = $r23;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r7);

        $r2[3] = $r6;

        $r24 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[4] = $r24;

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE", "(\\<\\<.*\\>\\>)?");

        $r2[5] = $r25;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[6] = $r26;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r30 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r33);

        $r2[7] = $r27;

        $r34 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[8] = $r34;

        $r35 = staticinvoke <net.sourceforge.plantuml.statediagram.command.CommandCreateState: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r36 = virtualinvoke $r35.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf getRegex()>();

        $r2[9] = $r36;

        $r37 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[10] = $r37;

        $r38 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r39 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r39.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("LINECOLOR", "##(?:\\[(dotted|dashed|bold)\\])?(\\w+)?");

        specialinvoke $r38.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r39);

        $r2[11] = $r38;

        $r40 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r2[12] = $r40;

        $r41 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r42 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r43 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[3];

        $r44 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r44.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>(":");

        $r43[0] = $r44;

        $r45 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r43[1] = $r45;

        $r46 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r46.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("ADDFIELD", "(.*)");

        $r43[2] = $r46;

        specialinvoke $r42.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r43);

        specialinvoke $r41.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r42);

        $r2[13] = $r41;

        $r47 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r2[14] = $r47;

        $r48 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r1, $r2);

        return $r48;
    }

    private static net.sourceforge.plantuml.graphic.color.ColorParser color()
    {
        net.sourceforge.plantuml.graphic.color.ColorType $r0;
        net.sourceforge.plantuml.graphic.color.ColorParser $r1;

        $r0 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        $r1 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.ColorParser simpleColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r0);

        return $r1;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.statediagram.StateDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String r1, r5, r11, $r22, r23, $r26, $r30, $r35, $r38, r42, r46;
        net.sourceforge.plantuml.statediagram.StateDiagram r2;
        net.sourceforge.plantuml.cucadiagram.Ident r3, $r8;
        boolean $z0, $z1;
        net.sourceforge.plantuml.cucadiagram.Code r4, $r41;
        net.sourceforge.plantuml.statediagram.command.CommandCreateState r6;
        net.sourceforge.plantuml.cucadiagram.LeafType r7;
        net.sourceforge.plantuml.cucadiagram.IEntity r9;
        net.sourceforge.plantuml.cucadiagram.Display $r10;
        net.sourceforge.plantuml.graphic.color.ColorParser $r12;
        net.sourceforge.plantuml.ISkinParam $r13, $r15, $r17, $r19, $r29;
        net.sourceforge.plantuml.api.ThemeStyle $r14, $r20;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r16, $r18;
        net.sourceforge.plantuml.command.CommandExecutionResult $r24, $r39;
        net.sourceforge.plantuml.cucadiagram.Bodier $r25;
        net.sourceforge.plantuml.graphic.color.ColorType $r27;
        net.sourceforge.plantuml.UrlBuilder $r28;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r31;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r32;
        java.lang.StringBuilder $r33, $r34, $r36, $r37;
        net.sourceforge.plantuml.LineLocation r40;
        net.sourceforge.plantuml.Url r44;
        net.sourceforge.plantuml.graphic.color.Colors r45;
        net.sourceforge.plantuml.ugraphic.color.HColor $r47;

        r6 := @this: net.sourceforge.plantuml.statediagram.command.CommandCreateState;

        r2 := @parameter0: net.sourceforge.plantuml.statediagram.StateDiagram;

        r40 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: boolean V1972()>();

        if $z0 == 0 goto label01;

        $r41 = r3;

        goto label02;

     label01:
        $r41 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r1);

     label02:
        r4 = $r41;

        r42 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        if r42 != null goto label03;

        r42 = interfaceinvoke $r41.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

     label03:
        r5 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("STEREOTYPE", 0);

        r7 = specialinvoke r6.<net.sourceforge.plantuml.statediagram.command.CommandCreateState: net.sourceforge.plantuml.cucadiagram.LeafType getTypeFromStereotype(java.lang.String)>(r5);

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: boolean checkConcurrentStateOk(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code)>(r3, r4);

        if $z1 != 0 goto label04;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The state ");

        $r35 = interfaceinvoke r4.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been created in a concurrent state : it cannot be used here.");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>($r38);

        return $r39;

     label04:
        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r1);

        r9 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.cucadiagram.IEntity getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>($r8, r4, r7, null);

        $r10 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r42);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setDisplay(net.sourceforge.plantuml.cucadiagram.Display)>($r10);

        if r5 == null goto label05;

        $r32 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String)>(r5);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r32);

     label05:
        r11 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r11 == null goto label06;

        $r28 = new net.sourceforge.plantuml.UrlBuilder;

        $r29 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r30 = interfaceinvoke $r29.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r31 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r28.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r30, $r31);

        r44 = virtualinvoke $r28.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r11);

        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void addUrl(net.sourceforge.plantuml.Url)>(r44);

     label06:
        $r12 = staticinvoke <net.sourceforge.plantuml.statediagram.command.CommandCreateState: net.sourceforge.plantuml.graphic.color.ColorParser color()>();

        $r13 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r14 = interfaceinvoke $r13.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r15 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r16 = interfaceinvoke $r15.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r45 = virtualinvoke $r12.<net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.graphic.color.Colors getColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.command.regex.RegexResult,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r14, r0, $r16);

        r46 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 1);

        if r46 != null goto label07;

        $r47 = null;

        goto label08;

     label07:
        $r17 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r19 = virtualinvoke r2.<net.sourceforge.plantuml.statediagram.StateDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = interfaceinvoke $r19.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r47 = virtualinvoke $r18.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r20, r46);

     label08:
        if $r47 == null goto label09;

        $r27 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r45 = virtualinvoke r45.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors add(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r27, $r47);

     label09:
        $r22 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 0);

        if $r22 == null goto label10;

        $r26 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("LINECOLOR", 0);

        r45 = virtualinvoke r45.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.graphic.color.Colors addLegacyStroke(java.lang.String)>($r26);

     label10:
        interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: void setColors(net.sourceforge.plantuml.graphic.color.Colors)>(r45);

        r23 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ADDFIELD", 0);

        if r23 == null goto label11;

        $r25 = interfaceinvoke r9.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Bodier getBodier()>();

        interfaceinvoke $r25.<net.sourceforge.plantuml.cucadiagram.Bodier: void addFieldOrMethod(java.lang.String)>(r23);

     label11:
        $r24 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r24;
    }

    private net.sourceforge.plantuml.cucadiagram.LeafType getTypeFromStereotype(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        net.sourceforge.plantuml.cucadiagram.LeafType $r6, $r7, $r8, $r9, $r10;
        net.sourceforge.plantuml.statediagram.command.CommandCreateState r11;

        r11 := @this: net.sourceforge.plantuml.statediagram.command.CommandCreateState;

        r0 := @parameter0: java.lang.String;

        $r1 = "<<choice>>";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r10 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType STATE_CHOICE>;

        return $r10;

     label1:
        $r2 = "<<fork>>";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r9 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType STATE_FORK_JOIN>;

        return $r9;

     label2:
        $r3 = "<<join>>";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        $r8 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType STATE_FORK_JOIN>;

        return $r8;

     label3:
        $r4 = "<<start>>";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label4;

        $r7 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CIRCLE_START>;

        return $r7;

     label4:
        $r5 = "<<end>>";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label5;

        $r6 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType CIRCLE_END>;

        return $r6;

     label5:
        return null;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.statediagram.command.CommandCreateState r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.statediagram.StateDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.statediagram.command.CommandCreateState;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.statediagram.StateDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.statediagram.command.CommandCreateState: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.statediagram.StateDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
