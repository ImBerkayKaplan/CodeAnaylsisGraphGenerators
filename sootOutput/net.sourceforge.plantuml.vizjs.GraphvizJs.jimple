public class net.sourceforge.plantuml.vizjs.GraphvizJs extends java.lang.Object implements net.sourceforge.plantuml.cucadiagram.dot.Graphviz
{
    private static final java.util.concurrent.ExecutorService executorService;
    private final java.lang.String dotString;

    public void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.vizjs.GraphvizJs;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.vizjs.GraphvizJs: java.lang.String dotString> = r1;

        return;
    }

    public net.sourceforge.plantuml.cucadiagram.dot.ProcessState createFile3(java.io.OutputStream)
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs r0;
        java.util.concurrent.Future $r1;
        java.lang.Object $r2;
        java.io.OutputStream r3;
        byte[] $r4;
        net.sourceforge.plantuml.cucadiagram.dot.ProcessState $r5;
        java.lang.Exception $r6;
        net.sourceforge.plantuml.vizjs.GraphvizJsRuntimeException $r7;
        java.lang.String r8;

        r0 := @this: net.sourceforge.plantuml.vizjs.GraphvizJs;

        r3 := @parameter0: java.io.OutputStream;

     label1:
        $r1 = specialinvoke r0.<net.sourceforge.plantuml.vizjs.GraphvizJs: java.util.concurrent.Future submitJob()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.Future: java.lang.Object get()>();

        r8 = (java.lang.String) $r2;

        $r4 = virtualinvoke r8.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.ProcessState: net.sourceforge.plantuml.cucadiagram.dot.ProcessState TERMINATED_OK()>();

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        $r7 = new net.sourceforge.plantuml.vizjs.GraphvizJsRuntimeException;

        specialinvoke $r7.<net.sourceforge.plantuml.vizjs.GraphvizJsRuntimeException: void <init>(java.lang.Exception)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.util.concurrent.Future submitJob()
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs$2 $r0;
        net.sourceforge.plantuml.vizjs.GraphvizJs r1;
        java.util.concurrent.ExecutorService $r2;
        java.util.concurrent.Future $r3;

        r1 := @this: net.sourceforge.plantuml.vizjs.GraphvizJs;

        $r2 = <net.sourceforge.plantuml.vizjs.GraphvizJs: java.util.concurrent.ExecutorService executorService>;

        $r0 = new net.sourceforge.plantuml.vizjs.GraphvizJs$2;

        specialinvoke $r0.<net.sourceforge.plantuml.vizjs.GraphvizJs$2: void <init>(net.sourceforge.plantuml.vizjs.GraphvizJs)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r0);

        return $r3;
    }

    public java.io.File getDotExe()
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs r0;

        r0 := @this: net.sourceforge.plantuml.vizjs.GraphvizJs;

        return null;
    }

    public java.lang.String dotVersion()
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs r0;

        r0 := @this: net.sourceforge.plantuml.vizjs.GraphvizJs;

        return "VizJs";
    }

    public net.sourceforge.plantuml.cucadiagram.dot.ExeState getExeState()
    {
        net.sourceforge.plantuml.cucadiagram.dot.ExeState $r0;
        net.sourceforge.plantuml.vizjs.GraphvizJs r1;

        r1 := @this: net.sourceforge.plantuml.vizjs.GraphvizJs;

        $r0 = <net.sourceforge.plantuml.cucadiagram.dot.ExeState: net.sourceforge.plantuml.cucadiagram.dot.ExeState OK>;

        return $r0;
    }

    public static net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion getGraphvizVersion(boolean)
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs$3 $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = new net.sourceforge.plantuml.vizjs.GraphvizJs$3;

        specialinvoke $r0.<net.sourceforge.plantuml.vizjs.GraphvizJs$3: void <init>(boolean)>(z0);

        return $r0;
    }

    public boolean graphviz244onWindows()
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs r0;

        r0 := @this: net.sourceforge.plantuml.vizjs.GraphvizJs;

        return 0;
    }

    static java.lang.String access$100(net.sourceforge.plantuml.vizjs.GraphvizJs)
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs r0;
        java.lang.String $r1;

        r0 := @parameter0: net.sourceforge.plantuml.vizjs.GraphvizJs;

        $r1 = r0.<net.sourceforge.plantuml.vizjs.GraphvizJs: java.lang.String dotString>;

        return $r1;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.vizjs.GraphvizJs$1 $r0;
        java.util.concurrent.ScheduledExecutorService $r1;

        $r0 = new net.sourceforge.plantuml.vizjs.GraphvizJs$1;

        specialinvoke $r0.<net.sourceforge.plantuml.vizjs.GraphvizJs$1: void <init>()>();

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>($r0);

        <net.sourceforge.plantuml.vizjs.GraphvizJs: java.util.concurrent.ExecutorService executorService> = $r1;

        return;
    }
}
