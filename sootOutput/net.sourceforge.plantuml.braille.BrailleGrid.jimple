public class net.sourceforge.plantuml.braille.BrailleGrid extends java.lang.Object
{
    private int minX;
    private int minY;
    private int maxX;
    private int maxY;
    private final double quanta;
    private final java.util.Set on;

    public void <init>(double)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        java.util.HashSet $r1;
        double d0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<net.sourceforge.plantuml.braille.BrailleGrid: java.util.Set on> = $r1;

        r0.<net.sourceforge.plantuml.braille.BrailleGrid: double quanta> = d0;

        return;
    }

    public boolean getState(int, int)
    {
        net.sourceforge.plantuml.braille.Coords $r0;
        int i0, i1;
        net.sourceforge.plantuml.braille.BrailleGrid r2;
        java.util.Set $r3;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new net.sourceforge.plantuml.braille.Coords;

        specialinvoke $r0.<net.sourceforge.plantuml.braille.Coords: void <init>(int,int)>(i0, i1);

        $r3 = r2.<net.sourceforge.plantuml.braille.BrailleGrid: java.util.Set on>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }

    private void setStateDouble(double, double, boolean)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        double d0, d1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d0);

        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d1);

        virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void setState(int,int,boolean)>($i0, $i1, z0);

        return;
    }

    public void setState(int, int, boolean)
    {
        net.sourceforge.plantuml.braille.Coords $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0;
        net.sourceforge.plantuml.braille.BrailleGrid r2;
        java.util.Set $r3, $r4;

        r2 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = new net.sourceforge.plantuml.braille.Coords;

        specialinvoke $r0.<net.sourceforge.plantuml.braille.Coords: void <init>(int,int)>(i0, i1);

        if z0 == 0 goto label1;

        $r4 = r2.<net.sourceforge.plantuml.braille.BrailleGrid: java.util.Set on>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r0);

        goto label2;

     label1:
        $r3 = r2.<net.sourceforge.plantuml.braille.BrailleGrid: java.util.Set on>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r0);

     label2:
        $i2 = r2.<net.sourceforge.plantuml.braille.BrailleGrid: int minX>;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i0);

        r2.<net.sourceforge.plantuml.braille.BrailleGrid: int minX> = $i3;

        $i4 = r2.<net.sourceforge.plantuml.braille.BrailleGrid: int maxX>;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, i0);

        r2.<net.sourceforge.plantuml.braille.BrailleGrid: int maxX> = $i5;

        $i6 = r2.<net.sourceforge.plantuml.braille.BrailleGrid: int minY>;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, i1);

        r2.<net.sourceforge.plantuml.braille.BrailleGrid: int minY> = $i7;

        $i8 = r2.<net.sourceforge.plantuml.braille.BrailleGrid: int maxY>;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, i1);

        r2.<net.sourceforge.plantuml.braille.BrailleGrid: int maxY> = $i9;

        return;
    }

    public int getMinX()
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        $i0 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: int minX>;

        return $i0;
    }

    public int getMinY()
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        $i0 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: int minY>;

        return $i0;
    }

    public int getMaxX()
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        $i0 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: int maxX>;

        return $i0;
    }

    public int getMaxY()
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        $i0 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: int maxY>;

        return $i0;
    }

    public void rectangle(double, double, double, double)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        double d0, d1, d2, $d3, d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        d4 := @parameter3: double;

        $d3 = d1 + d2;

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void hline(double,double,double)>(d0, d1, $d3);

        $d6 = d0 + d4;

        $d5 = d1 + d2;

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void hline(double,double,double)>($d6, d1, $d5);

        $d7 = d0 + d4;

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void vline(double,double,double)>(d1, d0, $d7);

        $d9 = d1 + d2;

        $d8 = d0 + d4;

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void vline(double,double,double)>($d9, d0, $d8);

        return;
    }

    private void vline(double, double, double)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        double d0, d1, d2;
        int i0, i1, i2, i3;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d0);

        i1 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d1);

        i2 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d2);

        i3 = i1;

     label1:
        if i3 > i2 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void setState(int,int,boolean)>(i0, i3, 1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void hline(double, double, double)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        double d0, d1, d2;
        int i0, i1, i2, i3;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d0);

        i1 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d1);

        i2 = virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: int toInt(double)>(d2);

        i3 = i1;

     label1:
        if i3 > i2 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void setState(int,int,boolean)>(i3, i0, 1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public int toInt(double)
    {
        double d0, $d1, $d2;
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        long $l0;
        int $i1;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: double quanta>;

        $d2 = d0 / $d1;

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d2);

        $i1 = (int) $l0;

        return $i1;
    }

    public void line(double, double, double, double)
    {
        double d0, d1, d2, d3;
        byte $b0, $b1;
        java.io.PrintStream $r0;
        net.sourceforge.plantuml.braille.BrailleGrid r1;

        r1 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        d3 := @parameter3: double;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        specialinvoke r1.<net.sourceforge.plantuml.braille.BrailleGrid: void vline(double,double,double)>(d0, d2, d3);

        goto label3;

     label1:
        $b1 = d2 cmpl d3;

        if $b1 != 0 goto label2;

        specialinvoke r1.<net.sourceforge.plantuml.braille.BrailleGrid: void hline(double,double,double)>(d2, d0, d1);

        goto label3;

     label2:
        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("warning line");

     label3:
        return;
    }

    public double getQuanta()
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        $d0 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: double quanta>;

        return $d0;
    }

    public void drawDotPath(double, double, net.sourceforge.plantuml.posimo.DotPath)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        net.sourceforge.plantuml.braille.BrailleGrid r5;
        double d0, d1;

        r5 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: net.sourceforge.plantuml.posimo.DotPath;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List getBeziers()>();

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        specialinvoke r5.<net.sourceforge.plantuml.braille.BrailleGrid: void drawCubic(double,double,java.awt.geom.CubicCurve2D$Double)>(d0, d1, r4);

        goto label1;

     label2:
        return;
    }

    private void drawCubic(double, double, java.awt.geom.CubicCurve2D$Double)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        double d0, d1, $d2, $d3;
        java.awt.geom.CubicCurve2D$Double r1, $r6, $r8;
        java.awt.geom.Point2D $r2, $r3, $r4, $r5;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: java.awt.geom.CubicCurve2D$Double;

        $r2 = virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawPointInternal(double,double,java.awt.geom.Point2D)>(d0, d1, $r2);

        $r3 = virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawPointInternal(double,double,java.awt.geom.Point2D)>(d0, d1, $r3);

        $r4 = virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $r5 = virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $d2 = virtualinvoke $r4.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r5);

        $d3 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: double quanta>;

        $b0 = $d2 cmpl $d3;

        if $b0 <= 0 goto label1;

        $r6 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r6.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r8 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r8.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r1.<java.awt.geom.CubicCurve2D$Double: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r6, $r8);

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawCubic(double,double,java.awt.geom.CubicCurve2D$Double)>(d0, d1, $r6);

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawCubic(double,double,java.awt.geom.CubicCurve2D$Double)>(d0, d1, $r8);

     label1:
        return;
    }

    private void drawPointInternal(double, double, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        double d0, $d1, d2, $d3, $d4, $d5;
        java.awt.geom.Point2D r1;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r1 := @parameter2: java.awt.geom.Point2D;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d3 = d0 + $d1;

        $d4 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = d2 + $d4;

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void setStateDouble(double,double,boolean)>($d3, $d5, 1);

        return;
    }

    public void drawPolygon(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        net.sourceforge.plantuml.braille.BrailleGrid r1;
        java.lang.Object $r2, $r4, $r6, $r8;
        java.awt.geom.Point2D $r3, $r5, $r7, $r9;

        r1 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        r0 := @parameter0: java.util.List;

        i5 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i5 >= $i1 goto label2;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        $r7 = (java.awt.geom.Point2D) $r6;

        $i4 = i5 + 1;

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i4);

        $r9 = (java.awt.geom.Point2D) $r8;

        specialinvoke r1.<net.sourceforge.plantuml.braille.BrailleGrid: void drawLineInternal(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r7, $r9);

        i5 = i5 + 1;

        goto label1;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i3);

        $r3 = (java.awt.geom.Point2D) $r2;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.awt.geom.Point2D) $r4;

        specialinvoke r1.<net.sourceforge.plantuml.braille.BrailleGrid: void drawLineInternal(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r3, $r5);

        return;
    }

    private void drawLineInternal(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.braille.BrailleGrid r0;
        java.awt.geom.Point2D r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0;
        java.awt.geom.Point2D$Double $r3;

        r0 := @this: net.sourceforge.plantuml.braille.BrailleGrid;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Point2D;

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawPointInternal(double,double,java.awt.geom.Point2D)>(0.0, 0.0, r1);

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawPointInternal(double,double,java.awt.geom.Point2D)>(0.0, 0.0, r2);

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>(r2);

        $d1 = r0.<net.sourceforge.plantuml.braille.BrailleGrid: double quanta>;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        $r3 = new java.awt.geom.Point2D$Double;

        $d2 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d4 = $d2 + $d3;

        $d5 = $d4 / 2.0;

        $d6 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d7 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d8 = $d6 + $d7;

        $d9 = $d8 / 2.0;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d9);

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawLineInternal(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r1, $r3);

        specialinvoke r0.<net.sourceforge.plantuml.braille.BrailleGrid: void drawLineInternal(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r3, r2);

     label1:
        return;
    }
}
