public class net.sourceforge.plantuml.style.Style extends java.lang.Object
{
    private final java.util.Map map;
    private final net.sourceforge.plantuml.style.StyleSignature signature;

    public void <init>(net.sourceforge.plantuml.style.StyleSignature, java.util.Map)
    {
        net.sourceforge.plantuml.style.Style r0;
        java.util.Map r1;
        net.sourceforge.plantuml.style.StyleSignature r2;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r2 := @parameter0: net.sourceforge.plantuml.style.StyleSignature;

        r1 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.style.Style: java.util.Map map> = r1;

        r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature> = r2;

        return;
    }

    public net.sourceforge.plantuml.style.Style deltaPriority(int)
    {
        net.sourceforge.plantuml.style.Style r0, $r7;
        net.sourceforge.plantuml.style.StyleSignature $r1, $r8;
        boolean $z0, $z1;
        java.util.EnumMap $r2;
        java.util.Map $r4;
        java.util.Set $r5;
        java.util.Iterator r6;
        java.lang.Object $r9, $r11, $r13;
        java.util.Map$Entry r10;
        net.sourceforge.plantuml.style.PName $r12;
        int i0;
        net.sourceforge.plantuml.style.ValueImpl $r14;
        net.sourceforge.plantuml.style.Value $r15;
        java.lang.UnsupportedOperationException $r17;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: boolean isStarred()>();

        if $z0 != 0 goto label1;

        $r17 = new java.lang.UnsupportedOperationException;

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r17;

     label1:
        $r2 = new java.util.EnumMap;

        specialinvoke $r2.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lnet/sourceforge/plantuml/style/PName;");

        $r4 = r0.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (net.sourceforge.plantuml.style.PName) $r11;

        $r13 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (net.sourceforge.plantuml.style.ValueImpl) $r13;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.style.ValueImpl: net.sourceforge.plantuml.style.Value addPriority(int)>(i0);

        virtualinvoke $r2.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r12, $r15);

        goto label2;

     label3:
        $r7 = new net.sourceforge.plantuml.style.Style;

        $r8 = r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        specialinvoke $r7.<net.sourceforge.plantuml.style.Style: void <init>(net.sourceforge.plantuml.style.StyleSignature,java.util.Map)>($r8, $r2);

        return $r7;
    }

    public void printMe()
    {
        net.sourceforge.plantuml.style.Style r0;
        java.util.Map $r1, $r8;
        int $i0;
        java.lang.StringBuilder $r2, $r5, $r6, $r14, $r16, $r18, $r19, $r23;
        java.io.PrintStream $r3, $r11, $r15;
        net.sourceforge.plantuml.style.StyleSignature $r4;
        java.lang.String $r7, $r22, $r24;
        java.util.Set $r9;
        java.util.Iterator r10;
        boolean $z0;
        java.lang.Object $r12, $r17, $r20;
        java.util.Map$Entry r13;
        net.sourceforge.plantuml.style.Value $r21;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = r0.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = r0.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r12;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r17 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (net.sourceforge.plantuml.style.Value) $r20;

        $r22 = interfaceinvoke $r21.<net.sourceforge.plantuml.style.Value: java.lang.String asString()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r24);

        goto label2;

     label3:
        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("}");

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        net.sourceforge.plantuml.style.Style r1;
        net.sourceforge.plantuml.style.StyleSignature $r2;
        java.util.Map $r5;
        java.lang.String $r7;

        r1 := @this: net.sourceforge.plantuml.style.Style;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.style.Value r4, $r5;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r1 := @parameter0: net.sourceforge.plantuml.style.PName;

        $r2 = r0.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.sourceforge.plantuml.style.Value) $r3;

        if r4 != null goto label1;

        $r5 = <net.sourceforge.plantuml.style.ValueNull: net.sourceforge.plantuml.style.Value NULL>;

        return $r5;

     label1:
        return r4;
    }

    public boolean hasValue(net.sourceforge.plantuml.style.PName)
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r1 := @parameter0: net.sourceforge.plantuml.style.PName;

        $r2 = r0.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public net.sourceforge.plantuml.style.Style mergeWith(net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.style.Style r0, r2, $r8;
        java.util.EnumMap $r1;
        java.util.Map $r3, $r5, $r14;
        java.util.Set $r6;
        java.util.Iterator r7;
        boolean $z0;
        net.sourceforge.plantuml.style.StyleSignature $r9, $r10, $r11;
        java.lang.Object $r12, $r15, $r16, $r18, $r20;
        java.util.Map$Entry r13;
        net.sourceforge.plantuml.style.Value r17, $r22;
        net.sourceforge.plantuml.style.PName r19;
        net.sourceforge.plantuml.style.ValueImpl $r21;

        r2 := @this: net.sourceforge.plantuml.style.Style;

        r0 := @parameter0: net.sourceforge.plantuml.style.Style;

        if r0 != null goto label1;

        return r2;

     label1:
        $r1 = new java.util.EnumMap;

        $r3 = r2.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        specialinvoke $r1.<java.util.EnumMap: void <init>(java.util.Map)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r12;

        $r14 = r2.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        $r15 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        r17 = (net.sourceforge.plantuml.style.Value) $r16;

        $r18 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        r19 = (net.sourceforge.plantuml.style.PName) $r18;

        $r20 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (net.sourceforge.plantuml.style.ValueImpl) $r20;

        $r22 = virtualinvoke $r21.<net.sourceforge.plantuml.style.ValueImpl: net.sourceforge.plantuml.style.Value mergeWith(net.sourceforge.plantuml.style.Value)>(r17);

        virtualinvoke $r1.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r19, $r22);

        goto label2;

     label3:
        $r8 = new net.sourceforge.plantuml.style.Style;

        $r9 = r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature getSignature()>();

        $r11 = virtualinvoke $r9.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature mergeWith(net.sourceforge.plantuml.style.StyleSignature)>($r10);

        specialinvoke $r8.<net.sourceforge.plantuml.style.Style: void <init>(net.sourceforge.plantuml.style.StyleSignature,java.util.Map)>($r11, $r1);

        return $r8;
    }

    public net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.ugraphic.color.HColor r0;
        java.util.EnumMap $r1;
        net.sourceforge.plantuml.style.Style r2, $r10;
        java.util.Map $r3;
        net.sourceforge.plantuml.style.PName r5;
        java.lang.Object $r6;
        net.sourceforge.plantuml.style.Value r7;
        net.sourceforge.plantuml.style.ValueColor $r8;
        int $i0;
        net.sourceforge.plantuml.style.StyleSignature $r11;

        r2 := @this: net.sourceforge.plantuml.style.Style;

        r5 := @parameter0: net.sourceforge.plantuml.style.PName;

        r0 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        if r0 != null goto label1;

        return r2;

     label1:
        $r1 = new java.util.EnumMap;

        $r3 = r2.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        specialinvoke $r1.<java.util.EnumMap: void <init>(java.util.Map)>($r3);

        $r6 = virtualinvoke $r1.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r5);

        r7 = (net.sourceforge.plantuml.style.Value) $r6;

        $r8 = new net.sourceforge.plantuml.style.ValueColor;

        $i0 = interfaceinvoke r7.<net.sourceforge.plantuml.style.Value: int getPriority()>();

        specialinvoke $r8.<net.sourceforge.plantuml.style.ValueColor: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,int)>(r0, $i0);

        virtualinvoke $r1.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r5, $r8);

        $r10 = new net.sourceforge.plantuml.style.Style;

        $r11 = r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        specialinvoke $r10.<net.sourceforge.plantuml.style.Style: void <init>(net.sourceforge.plantuml.style.StyleSignature,java.util.Map)>($r11, $r1);

        return $r10;
    }

    public net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName, double)
    {
        net.sourceforge.plantuml.style.Style r0, $r6;
        net.sourceforge.plantuml.style.PName r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        double d0;
        java.lang.String $r5;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r1 := @parameter0: net.sourceforge.plantuml.style.PName;

        d0 := @parameter1: double;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,java.lang.String)>(r1, $r5);

        return $r6;
    }

    public net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName, java.lang.String)
    {
        java.util.EnumMap $r0;
        net.sourceforge.plantuml.style.Style r1, $r8;
        java.util.Map $r2;
        net.sourceforge.plantuml.style.PName r4;
        java.lang.String r5;
        net.sourceforge.plantuml.style.ValueImpl $r6;
        net.sourceforge.plantuml.style.StyleSignature $r9;

        r1 := @this: net.sourceforge.plantuml.style.Style;

        r4 := @parameter0: net.sourceforge.plantuml.style.PName;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.util.EnumMap;

        $r2 = r1.<net.sourceforge.plantuml.style.Style: java.util.Map map>;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.util.Map)>($r2);

        $r6 = staticinvoke <net.sourceforge.plantuml.style.ValueImpl: net.sourceforge.plantuml.style.ValueImpl regular(java.lang.String,int)>(r5, 2147483647);

        virtualinvoke $r0.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>(r4, $r6);

        $r8 = new net.sourceforge.plantuml.style.Style;

        $r9 = r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        specialinvoke $r8.<net.sourceforge.plantuml.style.Style: void <init>(net.sourceforge.plantuml.style.StyleSignature,java.util.Map)>($r9, $r0);

        return $r8;
    }

    public net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.graphic.color.Colors)
    {
        net.sourceforge.plantuml.style.Style r0, r11;
        net.sourceforge.plantuml.graphic.color.Colors r1;
        net.sourceforge.plantuml.graphic.color.ColorType $r2, $r4, $r6;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r5, r7;
        net.sourceforge.plantuml.style.PName $r8, $r9, $r10;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.color.Colors;

        r11 = r0;

        if r1 == null goto label3;

        $r2 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r3 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r2);

        if r3 == null goto label1;

        $r10 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        r11 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r10, r3);

     label1:
        $r4 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType LINE>;

        r5 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r4);

        if r5 == null goto label2;

        $r9 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        r11 = virtualinvoke r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r9, r5);

     label2:
        $r6 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType TEXT>;

        r7 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r6);

        if r7 == null goto label3;

        $r8 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName FontColor>;

        r11 = virtualinvoke r11.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r8, r7);

     label3:
        return r11;
    }

    public net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.graphic.SymbolContext)
    {
        net.sourceforge.plantuml.style.Style r0, r4;
        net.sourceforge.plantuml.graphic.SymbolContext r1;
        net.sourceforge.plantuml.ugraphic.color.HColor r2;
        net.sourceforge.plantuml.style.PName $r3;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.SymbolContext;

        r4 = r0;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

        if r2 == null goto label1;

        $r3 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,net.sourceforge.plantuml.ugraphic.color.HColor)>($r3, r2);

     label1:
        return r4;
    }

    public net.sourceforge.plantuml.style.StyleSignature getSignature()
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature signature>;

        return $r1;
    }

    public net.sourceforge.plantuml.ugraphic.UFont getUFont()
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1, $r4, $r6;
        net.sourceforge.plantuml.style.Value $r2, $r5, $r7;
        java.lang.String r3;
        int i0, i1;
        net.sourceforge.plantuml.ugraphic.UFont $r8;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName FontName>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: java.lang.String asString()>();

        $r4 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName FontStyle>;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r4);

        i0 = interfaceinvoke $r5.<net.sourceforge.plantuml.style.Value: int asFontStyle()>();

        $r6 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName FontSize>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r6);

        i1 = interfaceinvoke $r7.<net.sourceforge.plantuml.style.Value: int asInt()>();

        $r8 = new net.sourceforge.plantuml.ugraphic.UFont;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.UFont: void <init>(java.lang.String,int,int)>(r3, i0, i1);

        return $r8;
    }

    public net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.ugraphic.color.HColorSet)
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.ugraphic.UFont r1;
        net.sourceforge.plantuml.style.PName $r2, $r7;
        net.sourceforge.plantuml.style.Value $r3, $r8;
        net.sourceforge.plantuml.api.ThemeStyle r4;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r5;
        net.sourceforge.plantuml.ugraphic.color.HColor r6, r9;
        net.sourceforge.plantuml.graphic.FontConfiguration $r10;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r4 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r5 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UFont getUFont()>();

        $r2 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName FontColor>;

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r2);

        r6 = interfaceinvoke $r3.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r4, r5);

        $r7 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName HyperLinkColor>;

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r7);

        r9 = interfaceinvoke $r8.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r4, r5);

        $r10 = new net.sourceforge.plantuml.graphic.FontConfiguration;

        specialinvoke $r10.<net.sourceforge.plantuml.graphic.FontConfiguration: void <init>(net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,boolean)>(r1, r6, r9, 1);

        return $r10;
    }

    public net.sourceforge.plantuml.graphic.SymbolContext getSymbolContext(net.sourceforge.plantuml.api.ThemeStyle, net.sourceforge.plantuml.ugraphic.color.HColorSet)
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1, $r6, $r9;
        net.sourceforge.plantuml.style.Value $r2, $r7, $r10;
        net.sourceforge.plantuml.api.ThemeStyle r3;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r4;
        net.sourceforge.plantuml.ugraphic.color.HColor r5, r8;
        double d0;
        net.sourceforge.plantuml.graphic.SymbolContext $r11, $r13, $r14;
        net.sourceforge.plantuml.ugraphic.UStroke $r12;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r3 := @parameter0: net.sourceforge.plantuml.api.ThemeStyle;

        r4 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        r5 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r3, r4);

        $r6 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r6);

        r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r3, r4);

        $r9 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r9);

        d0 = interfaceinvoke $r10.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r11 = new net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke $r11.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r5, r8);

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $r13 = virtualinvoke $r11.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withStroke(net.sourceforge.plantuml.ugraphic.UStroke)>($r12);

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withDeltaShadow(double)>(d0);

        return $r14;
    }

    public net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.ugraphic.UStroke)
    {
        net.sourceforge.plantuml.ugraphic.UStroke r0;
        net.sourceforge.plantuml.style.Style r1, r10, r11;
        net.sourceforge.plantuml.style.PName $r2, $r4;
        double $d0, d1, d2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r1 := @this: net.sourceforge.plantuml.style.Style;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UStroke;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineThickness>;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        r10 = virtualinvoke r1.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,double)>($r2, $d0);

        d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UStroke: double getDashSpace()>();

        d2 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UStroke: double getDashVisible()>();

        $r4 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineStyle>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r11 = virtualinvoke r10.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Style eventuallyOverride(net.sourceforge.plantuml.style.PName,java.lang.String)>($r4, $r9);

        return r11;
    }

    public net.sourceforge.plantuml.ugraphic.UStroke getStroke()
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1, $r3;
        net.sourceforge.plantuml.style.Value $r2, $r4;
        double d0, d1, d2;
        java.lang.String r5, $r7, $r8, $r10, $r11;
        int $i0;
        java.util.StringTokenizer $r6;
        boolean $z0;
        net.sourceforge.plantuml.ugraphic.UStroke $r9, $r12, $r14;
        java.lang.Exception $r13;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineThickness>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r3 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineStyle>;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r3);

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.style.Value: java.lang.String asString()>();

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r12 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(d0);

        return $r12;

     label1:
        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r5, "-;,");

        $r7 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

        d2 = d1;

        $z0 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r11);

     label2:
        $r9 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double,double,double)>(d1, d2, d0);

     label3:
        return $r9;

     label4:
        $r13 := @caughtexception;

        $r14 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(d0);

        return $r14;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public net.sourceforge.plantuml.ugraphic.UStroke getStroke(net.sourceforge.plantuml.graphic.color.Colors)
    {
        net.sourceforge.plantuml.graphic.color.Colors r0;
        net.sourceforge.plantuml.ugraphic.UStroke r1, $r3;
        net.sourceforge.plantuml.style.Style r2;

        r2 := @this: net.sourceforge.plantuml.style.Style;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.color.Colors;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.UStroke getSpecificLineStroke()>();

        if r1 != null goto label1;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        return $r3;

     label1:
        return r1;
    }

    public net.sourceforge.plantuml.LineBreakStrategy wrapWidth()
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1;
        net.sourceforge.plantuml.style.Value $r2;
        java.lang.String r3;
        net.sourceforge.plantuml.LineBreakStrategy $r4;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName MaximumWidth>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: java.lang.String asString()>();

        $r4 = new net.sourceforge.plantuml.LineBreakStrategy;

        specialinvoke $r4.<net.sourceforge.plantuml.LineBreakStrategy: void <init>(java.lang.String)>(r3);

        return $r4;
    }

    public net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getPadding()
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1;
        net.sourceforge.plantuml.style.Value $r2;
        java.lang.String r3;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r4;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Padding>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: java.lang.String asString()>();

        $r4 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft read(java.lang.String)>(r3);

        return $r4;
    }

    public net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1;
        net.sourceforge.plantuml.style.Value $r2;
        java.lang.String r3;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft $r4;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Margin>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: java.lang.String asString()>();

        $r4 = staticinvoke <net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft read(java.lang.String)>(r3);

        return $r4;
    }

    public net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1;
        net.sourceforge.plantuml.style.Value $r2;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r3;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName HorizontalAlignment>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.graphic.HorizontalAlignment asHorizontalAlignment()>();

        return $r3;
    }

    private net.sourceforge.plantuml.graphic.TextBlock createTextBlockInternal(net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.ugraphic.color.HColorSet, net.sourceforge.plantuml.ISkinSimple, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.ISkinSimple r1;
        net.sourceforge.plantuml.api.ThemeStyle $r2;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r3;
        net.sourceforge.plantuml.graphic.FontConfiguration r4;
        net.sourceforge.plantuml.cucadiagram.Display r5;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r6;
        net.sourceforge.plantuml.graphic.TextBlock $r7;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r5 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        r1 := @parameter2: net.sourceforge.plantuml.ISkinSimple;

        r6 := @parameter3: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r2 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinSimple: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r4 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r2, r3);

        $r7 = virtualinvoke r5.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple)>(r4, r6, r1);

        return $r7;
    }

    public net.sourceforge.plantuml.graphic.TextBlock createTextBlockBordered(net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.ugraphic.color.HColorSet, net.sourceforge.plantuml.ISkinSimple)
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r1;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r3;
        net.sourceforge.plantuml.ISkinSimple r4;
        net.sourceforge.plantuml.graphic.TextBlock r5, r19, $r20;
        net.sourceforge.plantuml.style.PName $r6, $r10, $r15;
        net.sourceforge.plantuml.style.Value $r7, $r11, $r16;
        net.sourceforge.plantuml.api.ThemeStyle $r8, $r12;
        net.sourceforge.plantuml.ugraphic.color.HColor r9, r13;
        net.sourceforge.plantuml.ugraphic.UStroke r14;
        int i0;
        net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft r17, r18;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r2 := @parameter0: net.sourceforge.plantuml.cucadiagram.Display;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        r4 := @parameter2: net.sourceforge.plantuml.ISkinSimple;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        r5 = specialinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.TextBlock createTextBlockInternal(net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r2, r3, r4, r1);

        $r6 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r6);

        $r8 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinSimple: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r9 = interfaceinvoke $r7.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r8, r3);

        $r10 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r11 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r10);

        $r12 = interfaceinvoke r4.<net.sourceforge.plantuml.ISkinSimple: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r13 = interfaceinvoke $r11.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r12, r3);

        r14 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $r15 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName RoundCorner>;

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r15);

        i0 = interfaceinvoke $r16.<net.sourceforge.plantuml.style.Value: int asInt()>();

        r17 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getMargin()>();

        r18 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft getPadding()>();

        $d0 = (double) i0;

        r19 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock bordered(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.ugraphic.UStroke,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,double,net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft)>(r5, r14, r13, r9, $d0, r18);

        $r20 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft)>(r19, r17);

        return $r20;
    }

    public net.sourceforge.plantuml.ugraphic.UGraphic applyStrokeAndLineColor(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.ugraphic.color.HColorSet, net.sourceforge.plantuml.api.ThemeStyle)
    {
        net.sourceforge.plantuml.style.Style r0;
        net.sourceforge.plantuml.style.PName $r1;
        net.sourceforge.plantuml.style.Value $r2;
        net.sourceforge.plantuml.api.ThemeStyle r3;
        net.sourceforge.plantuml.ugraphic.color.HColorSet r4;
        net.sourceforge.plantuml.ugraphic.color.HColor r5;
        net.sourceforge.plantuml.ugraphic.UStroke $r6;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r7;
        net.sourceforge.plantuml.ugraphic.UGraphic r8, r9, r10;

        r0 := @this: net.sourceforge.plantuml.style.Style;

        r8 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r4 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColorSet;

        r3 := @parameter2: net.sourceforge.plantuml.api.ThemeStyle;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        r5 = interfaceinvoke $r2.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r3, r4);

        if r5 != null goto label1;

        $r7 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        r9 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        goto label2;

     label1:
        r9 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r5);

     label2:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        r10 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        return r10;
    }
}
