public class jcckit.renderer.Transformation extends java.lang.Object
{
    private final double _scale;
    private final double _x0;
    private final double _y0;

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7;
        jcckit.renderer.Transformation r2;
        double $d0, $d1, $d2;
        java.lang.String $r8;

        r2 := @this: jcckit.renderer.Transformation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_scale=");

        $d0 = r2.<jcckit.renderer.Transformation: double _scale>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" _x0=");

        $d1 = r2.<jcckit.renderer.Transformation: double _x0>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" _y0=");

        $d2 = r2.<jcckit.renderer.Transformation: double _y0>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void <init>(int, int, jcckit.graphic.ClippingRectangle, jcckit.graphic.Anchor, jcckit.graphic.Anchor)
    {
        jcckit.renderer.Transformation r0;
        jcckit.graphic.ClippingRectangle r1;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        int i0, i1, $i2, $i3;
        jcckit.graphic.Anchor r2, r3;

        r0 := @this: jcckit.renderer.Transformation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: jcckit.graphic.ClippingRectangle;

        r2 := @parameter3: jcckit.graphic.Anchor;

        r3 := @parameter4: jcckit.graphic.Anchor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = virtualinvoke r1.<jcckit.graphic.ClippingRectangle: double getMaxX()>();

        $d1 = virtualinvoke r1.<jcckit.graphic.ClippingRectangle: double getMinX()>();

        d2 = $d0 - $d1;

        $d3 = virtualinvoke r1.<jcckit.graphic.ClippingRectangle: double getMaxY()>();

        $d4 = virtualinvoke r1.<jcckit.graphic.ClippingRectangle: double getMinY()>();

        d5 = $d3 - $d4;

        $d6 = (double) i0;

        $d9 = $d6 / d2;

        $d7 = (double) i1;

        $d8 = $d7 / d5;

        $d10 = staticinvoke <java.lang.Math: double min(double,double)>($d9, $d8);

        r0.<jcckit.renderer.Transformation: double _scale> = $d10;

        $i2 = virtualinvoke r2.<jcckit.graphic.Anchor: int getFactor()>();

        $d11 = (double) $i2;

        $d16 = 0.5 * $d11;

        $d14 = (double) i0;

        $d12 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d13 = $d12 * d2;

        $d15 = $d14 - $d13;

        $d17 = $d16 * $d15;

        $d18 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d19 = virtualinvoke r1.<jcckit.graphic.ClippingRectangle: double getMinX()>();

        $d20 = $d18 * $d19;

        $d21 = $d17 - $d20;

        r0.<jcckit.renderer.Transformation: double _x0> = $d21;

        $i3 = virtualinvoke r3.<jcckit.graphic.Anchor: int getFactor()>();

        $d22 = (double) $i3;

        $d27 = 0.5 * $d22;

        $d23 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d25 = $d23 * d5;

        $d24 = (double) i1;

        $d26 = $d25 - $d24;

        $d29 = $d27 * $d26;

        $d28 = (double) i1;

        $d30 = $d29 + $d28;

        $d31 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d32 = virtualinvoke r1.<jcckit.graphic.ClippingRectangle: double getMinY()>();

        $d33 = $d31 * $d32;

        $d34 = $d30 + $d33;

        r0.<jcckit.renderer.Transformation: double _y0> = $d34;

        return;
    }

    public int transformX(double)
    {
        jcckit.renderer.Transformation r0;
        double d0, $d1, $d2, $d3, $d4;
        int $i0;

        r0 := @this: jcckit.renderer.Transformation;

        d0 := @parameter0: double;

        $d1 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d3 = $d1 * d0;

        $d2 = r0.<jcckit.renderer.Transformation: double _x0>;

        $d4 = $d3 + $d2;

        $i0 = staticinvoke <jcckit.renderer.Transformation: int trim(double)>($d4);

        return $i0;
    }

    public int transformY(double)
    {
        jcckit.renderer.Transformation r0;
        double d0, $d1, $d2, $d3, $d4;
        int $i0;

        r0 := @this: jcckit.renderer.Transformation;

        d0 := @parameter0: double;

        $d3 = r0.<jcckit.renderer.Transformation: double _y0>;

        $d1 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d2 = $d1 * d0;

        $d4 = $d3 - $d2;

        $i0 = staticinvoke <jcckit.renderer.Transformation: int trim(double)>($d4);

        return $i0;
    }

    public int transformWidth(double)
    {
        jcckit.renderer.Transformation r0;
        double d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: jcckit.renderer.Transformation;

        d0 := @parameter0: double;

        $d1 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d2 = $d1 * d0;

        $d3 = $d2 + 0.5;

        $i0 = staticinvoke <jcckit.renderer.Transformation: int trim(double)>($d3);

        return $i0;
    }

    public int transformHeight(double)
    {
        jcckit.renderer.Transformation r0;
        double d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: jcckit.renderer.Transformation;

        d0 := @parameter0: double;

        $d1 = r0.<jcckit.renderer.Transformation: double _scale>;

        $d2 = $d1 * d0;

        $d3 = $d2 + 0.5;

        $i0 = staticinvoke <jcckit.renderer.Transformation: int trim(double)>($d3);

        return $i0;
    }

    private static int trim(double)
    {
        double d0;
        byte $b0, $b1;
        int $i2;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 32767.0;

        if $b0 <= 0 goto label1;

        $i2 = 32767;

        goto label3;

     label1:
        $b1 = d0 cmpg -32768.0;

        if $b1 >= 0 goto label2;

        $i2 = -32768;

        goto label3;

     label2:
        $i2 = (int) d0;

     label3:
        return $i2;
    }

    public jcckit.graphic.GraphPoint transformBack(int, int)
    {
        jcckit.graphic.GraphPoint $r0;
        int i0, i1;
        jcckit.renderer.Transformation r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r1 := @this: jcckit.renderer.Transformation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new jcckit.graphic.GraphPoint;

        $d1 = (double) i0;

        $d0 = r1.<jcckit.renderer.Transformation: double _x0>;

        $d3 = $d1 - $d0;

        $d2 = r1.<jcckit.renderer.Transformation: double _scale>;

        $d9 = $d3 / $d2;

        $d5 = r1.<jcckit.renderer.Transformation: double _y0>;

        $d4 = (double) i1;

        $d7 = $d5 - $d4;

        $d6 = r1.<jcckit.renderer.Transformation: double _scale>;

        $d8 = $d7 / $d6;

        specialinvoke $r0.<jcckit.graphic.GraphPoint: void <init>(double,double)>($d9, $d8);

        return $r0;
    }

    public void apply(java.awt.Graphics2D)
    {
        java.awt.Graphics2D r0;
        jcckit.renderer.Transformation r1;
        double $d0, $d1, $d2, $d3, $d4;

        r1 := @this: jcckit.renderer.Transformation;

        r0 := @parameter0: java.awt.Graphics2D;

        $d1 = r1.<jcckit.renderer.Transformation: double _x0>;

        $d0 = r1.<jcckit.renderer.Transformation: double _y0>;

        virtualinvoke r0.<java.awt.Graphics2D: void translate(double,double)>($d1, $d0);

        $d4 = r1.<jcckit.renderer.Transformation: double _scale>;

        $d2 = r1.<jcckit.renderer.Transformation: double _scale>;

        $d3 = neg $d2;

        virtualinvoke r0.<java.awt.Graphics2D: void scale(double,double)>($d4, $d3);

        return;
    }
}
