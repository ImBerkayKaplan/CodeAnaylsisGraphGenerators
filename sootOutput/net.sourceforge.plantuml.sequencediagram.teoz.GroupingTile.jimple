public class net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
{
    private static final int EXTERNAL_MARGINX1;
    private static final int EXTERNAL_MARGINX2;
    private static final int MARGINX;
    private static final int MARGINY_MAGIC;
    private java.util.List tiles;
    private final net.sourceforge.plantuml.real.Real min;
    private final net.sourceforge.plantuml.real.Real max;
    private final net.sourceforge.plantuml.sequencediagram.GroupingStart start;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.cucadiagram.Display display;
    private double bodyHeight;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        return $r1;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        return 0.0;
    }

    public void <init>(java.util.Iterator, net.sourceforge.plantuml.sequencediagram.GroupingStart, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments, net.sourceforge.plantuml.sequencediagram.teoz.TileArguments)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.sequencediagram.teoz.TileArguments r1, r4;
        net.sourceforge.plantuml.graphic.StringBounder $r2, r5, $r21;
        java.util.ArrayList $r3, $r13, $r15, $r17;
        net.sourceforge.plantuml.sequencediagram.GroupingStart r6;
        java.lang.String $r7, $r9, $r10, $r47;
        boolean $z0, $z4, $z8, $z10, $z11, $z12, $z13;
        java.lang.CharSequence[] $r8, $r46;
        net.sourceforge.plantuml.skin.rose.Rose $r11;
        net.sourceforge.plantuml.ISkinParam $r12;
        net.sourceforge.plantuml.awt.geom.Dimension2D r19;
        java.util.Iterator r20, r51, r53, r57;
        java.util.List $r22, $r23, $r24, $r40, $r42;
        int $i0;
        net.sourceforge.plantuml.real.Real $r25, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r35, r56;
        double $d0, $d1, $d2, $d3, d4;
        java.lang.Object $r29, $r32, $r39, $r41;
        net.sourceforge.plantuml.sequencediagram.Grouping $r36, $r43;
        net.sourceforge.plantuml.sequencediagram.GroupingType $r37, $r38, $r44, $r45;
        net.sourceforge.plantuml.cucadiagram.Display $r49;
        net.sourceforge.plantuml.sequencediagram.Event r50, r55;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r52, r54, r58;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r20 := @parameter0: java.util.Iterator;

        r6 := @parameter1: net.sourceforge.plantuml.sequencediagram.GroupingStart;

        r1 := @parameter2: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        r4 := @parameter3: net.sourceforge.plantuml.sequencediagram.teoz.TileArguments;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles> = $r3;

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.sequencediagram.GroupingStart start> = r6;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getTitle()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("group");

        if $z0 == 0 goto label01;

        $r46 = newarray (java.lang.CharSequence)[1];

        $r47 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getComment()>();

        $r46[0] = $r47;

        $r49 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r46);

        goto label02;

     label01:
        $r8 = newarray (java.lang.CharSequence)[2];

        $r9 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getTitle()>();

        $r8[0] = $r9;

        $r10 = virtualinvoke r6.<net.sourceforge.plantuml.sequencediagram.GroupingStart: java.lang.String getComment()>();

        $r8[1] = $r10;

        $r49 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display create(java.lang.CharSequence[])>($r8);

     label02:
        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.cucadiagram.Display display> = $r49;

        $r11 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.skin.rose.Rose getSkin()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.skin.rose.Rose skin> = $r11;

        $r12 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.ISkinParam skinParam> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r19 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionIfEmpty(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

     label03:
        $z10 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label07;

        $r39 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r50 = (net.sourceforge.plantuml.sequencediagram.Event) $r39;

        $z8 = r50 instanceof net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        if $z8 == 0 goto label04;

        $r43 = (net.sourceforge.plantuml.sequencediagram.Grouping) r50;

        $r44 = virtualinvoke $r43.<net.sourceforge.plantuml.sequencediagram.Grouping: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r45 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType END>;

        if $r44 != $r45 goto label04;

        goto label07;

     label04:
        $r40 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.TileBuilder: java.util.List buildOne(java.util.Iterator,net.sourceforge.plantuml.sequencediagram.teoz.TileArguments,net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.teoz.Tile)>(r20, r4, r50, r0);

        r51 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z11 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label06;

        $r41 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r52 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r41;

        $r42 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>(r52);

        goto label05;

     label06:
        goto label03;

     label07:
        $r21 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r22 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        $r23 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List mergeParallel(net.sourceforge.plantuml.graphic.StringBounder,java.util.List)>($r21, $r22);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles> = $r23;

        $r24 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        r53 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z12 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label10;

        $r32 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r32;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double bodyHeight>;

        $d2 = interfaceinvoke r54.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        $d3 = $d1 + $d2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double bodyHeight> = $d3;

        r55 = interfaceinvoke r54.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $z4 = r55 instanceof net.sourceforge.plantuml.sequencediagram.GroupingLeaf;

        if $z4 == 0 goto label09;

        $r36 = (net.sourceforge.plantuml.sequencediagram.Grouping) r55;

        $r37 = virtualinvoke $r36.<net.sourceforge.plantuml.sequencediagram.Grouping: net.sourceforge.plantuml.sequencediagram.GroupingType getType()>();

        $r38 = <net.sourceforge.plantuml.sequencediagram.GroupingType: net.sourceforge.plantuml.sequencediagram.GroupingType ELSE>;

        if $r37 != $r38 goto label09;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r54);

        goto label08;

     label09:
        $r33 = interfaceinvoke r54.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMinX()>();

        $r34 = interfaceinvoke $r33.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(-16.0);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r34);

        r56 = interfaceinvoke r54.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        $r35 = interfaceinvoke r56.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(16.0);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r35);

        goto label08;

     label10:
        d4 = virtualinvoke r19.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i0 != 0 goto label11;

        $r31 = virtualinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.TileArguments: net.sourceforge.plantuml.real.Real getOrigin()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r31);

     label11:
        $r25 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real min(java.util.Collection)>($r13);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real min> = $r25;

        r57 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z13 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label13;

        $r29 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r58 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r29;

        $r30 = interfaceinvoke r58.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r30);

        goto label12;

     label13:
        $r26 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real min>;

        $d0 = d4 + 16.0;

        $r27 = interfaceinvoke $r26.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r27);

        $r28 = staticinvoke <net.sourceforge.plantuml.real.RealUtils: net.sourceforge.plantuml.real.Real max(java.util.Collection)>($r15);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real max> = $r28;

        return;
    }

    private net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.sequencediagram.GroupingStart $r1;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.cucadiagram.Display $r4;
        net.sourceforge.plantuml.ISkinParam $r5;
        net.sourceforge.plantuml.skin.ComponentType $r6;
        net.sourceforge.plantuml.skin.Component r7;
        net.sourceforge.plantuml.graphic.StringBounder r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r8 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.sequencediagram.GroupingStart start>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.GroupingStart: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType GROUPING_HEADER>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.cucadiagram.Display display>;

        r7 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r6, null, $r5, $r4);

        return r7;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionIfEmpty(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r11, $r19;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r2;
        net.sourceforge.plantuml.skin.Component r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.skin.Area $r5;
        net.sourceforge.plantuml.real.Real $r6, $r7, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10, $r18;
        net.sourceforge.plantuml.skin.Context2D $r12;
        java.util.List $r13;
        java.util.Iterator r14;
        boolean $z0;
        java.lang.Object $r15;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r16;
        net.sourceforge.plantuml.graphic.UDrawable $r17;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r4 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionIfEmpty(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = new net.sourceforge.plantuml.skin.Area;

        $r6 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real max>;

        $d0 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r7 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real min>;

        $d1 = interfaceinvoke $r7.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d2 = $d0 - $d1;

        $d3 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double getTotalHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        specialinvoke $r5.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d2, $d3);

        $r9 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real min>;

        $d4 = interfaceinvoke $r9.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        $r11 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        $r12 = (net.sourceforge.plantuml.skin.Context2D) r0;

        interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r11, $r5, $r12);

        specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: void drawAllElses(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        $d5 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d7 = $d5 + 10.0;

        $r13 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r15;

        $r17 = (net.sourceforge.plantuml.graphic.UDrawable) r16;

        $r18 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d7);

        $r19 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        interfaceinvoke $r17.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r19);

        d6 = interfaceinvoke r16.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        d7 = d7 + d6;

        goto label1;

     label2:
        return;
    }

    private double getTotalHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionIfEmpty(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double bodyHeight>;

        $d1 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = $d0 + $d1;

        $d3 = $d2 + 10.0;

        return $d3;
    }

    private void drawAllElses(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r23;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        java.util.ArrayList $r3;
        java.util.List $r5, $r7;
        boolean $z0, $z2, $z3, $z4;
        java.lang.Double $r6, $r15, $r17, $r22, $r26;
        java.lang.Object $r8, $r14, $r16, $r21, $r25;
        net.sourceforge.plantuml.sequencediagram.teoz.ElseTile r9, r29;
        net.sourceforge.plantuml.skin.Component r10;
        net.sourceforge.plantuml.skin.Area $r11;
        net.sourceforge.plantuml.real.Real $r12, $r13, $r20;
        int $i0, i1;
        net.sourceforge.plantuml.ugraphic.UTranslate $r19;
        net.sourceforge.plantuml.skin.Context2D $r24;
        java.util.Iterator r27, r30;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r28, r31;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double getTotalHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        r27 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r25 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r25;

        $z4 = r28 instanceof net.sourceforge.plantuml.sequencediagram.teoz.ElseTile;

        if $z4 == 0 goto label2;

        r29 = (net.sourceforge.plantuml.sequencediagram.teoz.ElseTile) r28;

        $d9 = virtualinvoke r29.<net.sourceforge.plantuml.sequencediagram.teoz.ElseTile: double getY()>();

        $d10 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double getY()>();

        $d11 = $d9 - $d10;

        $d12 = $d11 + 10.0;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r26);

     label2:
        goto label1;

     label3:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        i1 = 0;

        $r7 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        r30 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r8 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r8;

        $z3 = r31 instanceof net.sourceforge.plantuml.sequencediagram.teoz.ElseTile;

        if $z3 == 0 goto label5;

        r9 = (net.sourceforge.plantuml.sequencediagram.teoz.ElseTile) r31;

        r10 = virtualinvoke r9.<net.sourceforge.plantuml.sequencediagram.teoz.ElseTile: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r11 = new net.sourceforge.plantuml.skin.Area;

        $r12 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real max>;

        $d1 = interfaceinvoke $r12.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r13 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real min>;

        $d2 = interfaceinvoke $r13.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $d3 = $d1 - $d2;

        $i0 = i1 + 1;

        $r14 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r15 = (java.lang.Double) $r14;

        $d4 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $r16 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r17 = (java.lang.Double) $r16;

        $d5 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $d6 = $d4 - $d5;

        specialinvoke $r11.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d3, $d6);

        $r19 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $r20 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real min>;

        $d7 = interfaceinvoke $r20.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r21 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r22 = (java.lang.Double) $r21;

        $d8 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        specialinvoke $r19.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d7, $d8);

        $r23 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r19);

        $r24 = (net.sourceforge.plantuml.skin.Context2D) r0;

        interfaceinvoke r10.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r23, $r11, $r24);

        i1 = i1 + 1;

     label5:
        goto label4;

     label6:
        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionIfEmpty(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $d0 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double bodyHeight>;

        $d2 = $d0 + $d1;

        $d3 = $d2 + 20.0;

        return $d3;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        interfaceinvoke r4.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void addConstraints()>();

        goto label1;

     label2:
        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.real.Real $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real min>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(-3.0);

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.real.Real $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.real.Real max>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(9.0);

        return $r2;
    }

    public static double fillPositionelTiles(net.sourceforge.plantuml.graphic.StringBounder, double, java.util.List, java.util.List, java.util.List)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        java.util.List r1, $r2, r6, r8, $r13;
        java.util.Iterator r3;
        boolean $z0, $z3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r5;
        net.sourceforge.plantuml.sequencediagram.teoz.CommonTile $r7, $r9;
        double $d0, d1, $d2, d4;
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r10;
        java.util.ArrayList $r11;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d4 := @parameter1: double;

        r1 := @parameter2: java.util.List;

        r6 := @parameter3: java.util.List;

        r8 := @parameter4: java.util.List;

        $r2 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List mergeParallel(net.sourceforge.plantuml.graphic.StringBounder,java.util.List)>(r0, r1);

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r4;

        interfaceinvoke r5.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void callbackY(double)>(d4);

        $r7 = (net.sourceforge.plantuml.sequencediagram.teoz.CommonTile) r5;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r9 = (net.sourceforge.plantuml.sequencediagram.teoz.CommonTile) r5;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $z3 = r5 instanceof net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        if $z3 == 0 goto label2;

        r10 = (net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile) r5;

        d1 = specialinvoke r10.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double getHeaderHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $d2 = d4 + d1;

        $r13 = r10.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: double fillPositionelTiles(net.sourceforge.plantuml.graphic.StringBounder,double,java.util.List,java.util.List,java.util.List)>(r0, $d2, $r13, $r11, r8);

     label2:
        $d0 = interfaceinvoke r5.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        d4 = d4 + $d0;

        goto label1;

     label3:
        return d4;
    }

    private double getHeaderHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimensionIfEmpty(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = $d0 + 10.0;

        return $d1;
    }

    private static java.util.List mergeParallel(net.sourceforge.plantuml.graphic.StringBounder, java.util.List)
    {
        java.util.ArrayList $r0;
        java.util.Iterator r2;
        boolean $z0, $z1, $z3;
        java.lang.Object $r3, $r7, $r10;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4, r8, $r11;
        net.sourceforge.plantuml.sequencediagram.teoz.TileParallel $r5, r15;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.List r14, r16;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r14 := @parameter1: java.util.List;

        r15 = null;

        r16 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List removeEmptyCloseToParallel(java.util.List)>(r14);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        $z1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: boolean isParallel(net.sourceforge.plantuml.sequencediagram.teoz.Tile)>(r4);

        if $z1 == 0 goto label4;

        if r15 != null goto label3;

        $r5 = new net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        specialinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        r15 = $r5;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        r8 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r7;

        $z3 = r8 instanceof net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile;

        if $z3 == 0 goto label2;

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i5 = $i4 - 2;

        $r10 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i5);

        $r11 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r10;

        virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: void add(net.sourceforge.plantuml.sequencediagram.teoz.Tile)>($r11);

        virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: void add(net.sourceforge.plantuml.sequencediagram.teoz.Tile)>(r8);

        $i6 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i7 = $i6 - 2;

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i7, $r5);

        $i8 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i9 = $i8 - 1;

        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>($i9);

        goto label3;

     label2:
        virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: void add(net.sourceforge.plantuml.sequencediagram.teoz.Tile)>(r8);

        $i2 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i3, $r5);

     label3:
        virtualinvoke r15.<net.sourceforge.plantuml.sequencediagram.teoz.TileParallel: void add(net.sourceforge.plantuml.sequencediagram.teoz.Tile)>(r4);

        goto label5;

     label4:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

        r15 = null;

     label5:
        goto label1;

     label6:
        return $r0;
    }

    private static java.util.List removeEmptyCloseToParallel(java.util.List)
    {
        java.util.ArrayList $r0;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r5;

        r2 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r4;

        $z1 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: boolean isParallel(net.sourceforge.plantuml.sequencediagram.teoz.Tile)>(r5);

        if $z1 == 0 goto label2;

        staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: void removeHeadEmpty(java.util.List)>($r0);

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label1;

     label3:
        return $r0;
    }

    private static void removeHeadEmpty(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        $z0 = $r1 instanceof net.sourceforge.plantuml.sequencediagram.teoz.EmptyTile;

        if $z0 == 0 goto label2;

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>($i4);

        goto label1;

     label2:
        return;
    }

    public static boolean isParallel(net.sourceforge.plantuml.sequencediagram.teoz.Tile)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r0;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.sequencediagram.Event $r1;

        r0 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        $z0 = r0 instanceof net.sourceforge.plantuml.sequencediagram.teoz.TileParallel;

        if $z0 != 0 goto label1;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $z1 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Event: boolean isParallel()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    void addYNewPages(java.util.Collection)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile r0, $r8;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r4;
        net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile $r5;
        double d0;
        java.util.Collection r6;
        java.lang.Double $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        r6 := @parameter0: java.util.Collection;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: java.util.List tiles>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.sequencediagram.teoz.Tile) $r3;

        $z1 = r4 instanceof net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile;

        if $z1 == 0 goto label2;

        $r8 = (net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile) r4;

        virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: void addYNewPages(java.util.Collection)>(r6);

     label2:
        $z2 = r4 instanceof net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile;

        if $z2 == 0 goto label3;

        $r5 = (net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile) r4;

        d0 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile: double getY()>();

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r7);

     label3:
        goto label1;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: int MARGINY_MAGIC> = 20;

        <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: int MARGINX> = 16;

        <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: int EXTERNAL_MARGINX2> = 9;

        <net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile: int EXTERNAL_MARGINX1> = 3;

        return;
    }
}
