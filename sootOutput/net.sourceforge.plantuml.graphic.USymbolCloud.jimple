class net.sourceforge.plantuml.graphic.USymbolCloud extends net.sourceforge.plantuml.graphic.USymbol
{
    private static final boolean NEW;
    private static final boolean DEBUG;

    void <init>()
    {
        net.sourceforge.plantuml.graphic.USymbolCloud r0;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbol: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()
    {
        net.sourceforge.plantuml.graphic.SkinParameter $r0;
        net.sourceforge.plantuml.graphic.USymbolCloud r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        $r0 = <net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.graphic.SkinParameter CLOUD>;

        return $r0;
    }

    public net.sourceforge.plantuml.style.SName getSName()
    {
        net.sourceforge.plantuml.style.SName $r0;
        net.sourceforge.plantuml.graphic.USymbolCloud r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        $r0 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName cloud>;

        return $r0;
    }

    private void drawCloud(net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud r0;
        double d0, d1, d2;
        net.sourceforge.plantuml.ugraphic.UPath r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2, $r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r3;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r1 = specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: net.sourceforge.plantuml.ugraphic.UPath getSpecificFrontierForCloud(double,double)>(d0, d1);

        virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>(d2);

        $r3 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(0.0);

        $r4 = interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r1);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getSpecificFrontierForCloudNew(double, double)
    {
        java.util.Random $r0;
        double d0, d1, $d2, $d3, $d5, $d6, $d7, $d8, $d9, d10;
        long $l0, $l1, $l2, $l3;
        java.util.ArrayList $r2;
        byte $b4, $b5, $b7;
        java.awt.geom.Point2D$Double $r4, $r6, $r8, $r10;
        net.sourceforge.plantuml.graphic.USymbolCloud r12;
        java.lang.Object $r14, $r16, $r18, $r21;
        int $i6, i8, $i9, $i10;
        java.awt.geom.Point2D $r15, $r17, $r19, $r22;
        net.sourceforge.plantuml.ugraphic.UPath $r20;

        r12 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new java.util.Random;

        $l2 = (long) d0;

        $l0 = (long) d1;

        $l1 = 7919L * $l0;

        $l3 = $l2 + $l1;

        specialinvoke $r0.<java.util.Random: void <init>(long)>($l3);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        d10 = 11.0;

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        $d3 = $d2 / 11.0;

        $b4 = $d3 cmpl 16.0;

        if $b4 <= 0 goto label1;

        $d9 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        d10 = $d9 / 16.0;

     label1:
        $r4 = new java.awt.geom.Point2D$Double;

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>(8.0, 8.0);

        $r6 = new java.awt.geom.Point2D$Double;

        $d5 = d0 - 8.0;

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, 8.0);

        $r8 = new java.awt.geom.Point2D$Double;

        $d7 = d0 - 8.0;

        $d6 = d1 - 8.0;

        specialinvoke $r8.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d6);

        $r10 = new java.awt.geom.Point2D$Double;

        $d8 = d1 - 8.0;

        specialinvoke $r10.<java.awt.geom.Point2D$Double: void <init>(double,double)>(8.0, $d8);

        $b5 = d0 cmpl 100.0;

        if $b5 <= 0 goto label2;

        $b7 = d1 cmpl 100.0;

        if $b7 <= 0 goto label2;

        specialinvoke r12.<net.sourceforge.plantuml.graphic.USymbolCloud: void complex(java.util.Random,java.util.List,double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>($r0, $r2, d10, $r4, $r6, $r8, $r10);

        goto label3;

     label2:
        specialinvoke r12.<net.sourceforge.plantuml.graphic.USymbolCloud: void simple(java.util.Random,java.util.List,double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>($r0, $r2, d10, $r4, $r6, $r8, $r10);

     label3:
        $r18 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r19 = (java.awt.geom.Point2D) $r18;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r20.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $r21 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (java.awt.geom.Point2D) $r21;

        virtualinvoke $r20.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(java.awt.geom.Point2D)>($r22);

        i8 = 0;

     label4:
        $i9 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i10 = $i9 - 1;

        if i8 >= $i10 goto label5;

        $r14 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i8);

        $r15 = (java.awt.geom.Point2D) $r14;

        $i6 = i8 + 1;

        $r16 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i6);

        $r17 = (java.awt.geom.Point2D) $r16;

        specialinvoke r12.<net.sourceforge.plantuml.graphic.USymbolCloud: void addCurve(java.util.Random,net.sourceforge.plantuml.ugraphic.UPath,java.awt.geom.Point2D,java.awt.geom.Point2D)>($r0, $r20, $r15, $r17);

        i8 = i8 + 1;

        goto label4;

     label5:
        return $r20;
    }

    private void complex(java.util.Random, java.util.List, double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud r0;
        double d1;
        java.util.Random r1;
        java.util.List r2;
        java.awt.geom.Point2D$Double r3, r5, r9, r13;
        java.awt.geom.Point2D $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: java.util.List;

        d1 := @parameter2: double;

        r3 := @parameter3: java.awt.geom.Point2D$Double;

        r5 := @parameter4: java.awt.geom.Point2D$Double;

        r9 := @parameter5: java.awt.geom.Point2D$Double;

        r13 := @parameter6: java.awt.geom.Point2D$Double;

        $r4 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvX(java.awt.geom.Point2D,double)>(r3, 7.0);

        $r6 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvX(java.awt.geom.Point2D,double)>(r5, -7.0);

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d1, r1, r2, $r4, $r6);

        $r7 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvY(java.awt.geom.Point2D,double)>(r5, 7.0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvY(java.awt.geom.Point2D,double)>(r5, 7.0);

        $r10 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvY(java.awt.geom.Point2D,double)>(r9, -7.0);

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d1, r1, r2, $r8, $r10);

        $r11 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvX(java.awt.geom.Point2D,double)>(r9, -7.0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvX(java.awt.geom.Point2D,double)>(r9, -7.0);

        $r14 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvX(java.awt.geom.Point2D,double)>(r13, 7.0);

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d1, r1, r2, $r12, $r14);

        $r15 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvY(java.awt.geom.Point2D,double)>(r13, -7.0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvY(java.awt.geom.Point2D,double)>(r13, -7.0);

        $r17 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvY(java.awt.geom.Point2D,double)>(r3, 7.0);

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d1, r1, r2, $r16, $r17);

        $r18 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D mvX(java.awt.geom.Point2D,double)>(r3, 7.0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18);

        return;
    }

    private void simple(java.util.Random, java.util.List, double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double, java.awt.geom.Point2D$Double)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud r0;
        double d0;
        java.util.Random r1;
        java.util.List r2;
        java.awt.geom.Point2D$Double r3, r4, r5, r6;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: java.util.List;

        d0 := @parameter2: double;

        r3 := @parameter3: java.awt.geom.Point2D$Double;

        r4 := @parameter4: java.awt.geom.Point2D$Double;

        r5 := @parameter5: java.awt.geom.Point2D$Double;

        r6 := @parameter6: java.awt.geom.Point2D$Double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d0, r1, r2, r3, r4);

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d0, r1, r2, r4, r5);

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d0, r1, r2, r5, r6);

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void specialLine(double,java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D)>(d0, r1, r2, r6, r3);

        return;
    }

    private static java.awt.geom.Point2D mvX(java.awt.geom.Point2D, double)
    {
        java.awt.geom.Point2D$Double $r0;
        java.awt.geom.Point2D r1;
        double $d0, d1, $d2, $d3;

        r1 := @parameter0: java.awt.geom.Point2D;

        d1 := @parameter1: double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d2, $d3);

        return $r0;
    }

    private static java.awt.geom.Point2D mvY(java.awt.geom.Point2D, double)
    {
        java.awt.geom.Point2D$Double $r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1, d2, $d3;

        r1 := @parameter0: java.awt.geom.Point2D;

        d2 := @parameter1: double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d3 = $d1 + d2;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d3);

        return $r0;
    }

    private void specialLine(double, java.util.Random, java.util.List, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.graphic.CoordinateChange $r0;
        java.awt.geom.Point2D r1, r2, r5;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Random r4;
        net.sourceforge.plantuml.graphic.USymbolCloud r6;
        java.util.List r7;

        r6 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        d1 := @parameter0: double;

        r4 := @parameter1: java.util.Random;

        r7 := @parameter2: java.util.List;

        r1 := @parameter3: java.awt.geom.Point2D;

        r2 := @parameter4: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.graphic.CoordinateChange;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r1, r2);

        d0 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: double getLength()>();

        $d3 = d0 / 2.0;

        $d2 = d1 * 0.8;

        $d4 = staticinvoke <java.lang.Math: double min(double,double)>(12.0, $d2);

        $d5 = 1.0 + $d4;

        $d6 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: double rnd(java.util.Random,double,double)>(r4, 1.0, $d5);

        $d7 = neg $d6;

        r5 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: java.awt.geom.Point2D getTrueCoordinate(double,double)>($d3, $d7);

        specialinvoke r6.<net.sourceforge.plantuml.graphic.USymbolCloud: void bubbleLine(java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D,double)>(r4, r7, r1, r5, d1);

        specialinvoke r6.<net.sourceforge.plantuml.graphic.USymbolCloud: void bubbleLine(java.util.Random,java.util.List,java.awt.geom.Point2D,java.awt.geom.Point2D,double)>(r4, r7, r5, r2, d1);

        return;
    }

    private void bubbleLine(java.util.Random, java.util.List, java.awt.geom.Point2D, java.awt.geom.Point2D, double)
    {
        net.sourceforge.plantuml.graphic.CoordinateChange $r0;
        java.awt.geom.Point2D r1, r2, $r6, $r7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        java.util.List r4;
        java.util.Random r5;
        net.sourceforge.plantuml.graphic.USymbolCloud r8;
        int i0, i1;

        r8 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        r5 := @parameter0: java.util.Random;

        r4 := @parameter1: java.util.List;

        r1 := @parameter2: java.awt.geom.Point2D;

        r2 := @parameter3: java.awt.geom.Point2D;

        d8 := @parameter4: double;

        $r0 = new net.sourceforge.plantuml.graphic.CoordinateChange;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r1, r2);

        d0 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: double getLength()>();

        $d1 = d0 / d8;

        i0 = (int) $d1;

        if i0 != 0 goto label1;

        d8 = d0 / 2.0;

        $d7 = d0 / d8;

        i0 = (int) $d7;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d2 = (double) i1;

        $d4 = $d2 * d0;

        $d3 = (double) i0;

        $d5 = $d4 / $d3;

        $r6 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: java.awt.geom.Point2D getTrueCoordinate(double,double)>($d5, 0.0);

        $d6 = d8 * 0.2;

        $r7 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: java.awt.geom.Point2D rnd(java.util.Random,java.awt.geom.Point2D,double)>(r5, $r6, $d6);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void addCurve(java.util.Random, net.sourceforge.plantuml.ugraphic.UPath, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.graphic.CoordinateChange $r0;
        java.awt.geom.Point2D r1, r2, r5, r6;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        java.util.Random r4;
        net.sourceforge.plantuml.ugraphic.UPath r7;
        net.sourceforge.plantuml.graphic.USymbolCloud r8;

        r8 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        r4 := @parameter0: java.util.Random;

        r7 := @parameter1: net.sourceforge.plantuml.ugraphic.UPath;

        r1 := @parameter2: java.awt.geom.Point2D;

        r2 := @parameter3: java.awt.geom.Point2D;

        $r0 = new net.sourceforge.plantuml.graphic.CoordinateChange;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>(r1, r2);

        d0 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: double getLength()>();

        d1 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: double rnd(java.util.Random,double,double)>(r4, 0.25, 0.35);

        $d2 = d0 * d1;

        $d3 = neg d0;

        $d4 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: double rnd(java.util.Random,double,double)>(r4, 0.4, 0.55);

        $d5 = $d3 * $d4;

        r5 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: java.awt.geom.Point2D getTrueCoordinate(double,double)>($d2, $d5);

        $d6 = 1.0 - d1;

        $d7 = d0 * $d6;

        $d8 = neg d0;

        $d9 = staticinvoke <net.sourceforge.plantuml.graphic.USymbolCloud: double rnd(java.util.Random,double,double)>(r4, 0.4, 0.55);

        $d10 = $d8 * $d9;

        r6 = virtualinvoke $r0.<net.sourceforge.plantuml.graphic.CoordinateChange: java.awt.geom.Point2D getTrueCoordinate(double,double)>($d7, $d10);

        virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.UPath: void cubicTo(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r5, r6, r2);

        return;
    }

    private static double rnd(java.util.Random, double, double)
    {
        java.util.Random r0;
        double $d0, d1, d2, $d3, $d4, $d5;

        r0 := @parameter0: java.util.Random;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>();

        $d3 = d1 - d2;

        $d4 = $d0 * $d3;

        $d5 = $d4 + d2;

        return $d5;
    }

    private static java.awt.geom.Point2D rnd(java.util.Random, java.awt.geom.Point2D, double)
    {
        java.awt.geom.Point2D r0;
        double $d0, d1, $d2, $d3, d4, $d5, $d6, $d7, d8;
        java.util.Random r1;
        java.awt.geom.Point2D$Double $r2;

        r1 := @parameter0: java.util.Random;

        r0 := @parameter1: java.awt.geom.Point2D;

        d1 := @parameter2: double;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d2 = virtualinvoke r1.<java.util.Random: double nextDouble()>();

        $d3 = d1 * $d2;

        d4 = $d0 + $d3;

        $d5 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d6 = virtualinvoke r1.<java.util.Random: double nextDouble()>();

        $d7 = d1 * $d6;

        d8 = $d5 + $d7;

        $r2 = new java.awt.geom.Point2D$Double;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d4, d8);

        return $r2;
    }

    private net.sourceforge.plantuml.ugraphic.UPath getSpecificFrontierForCloud(double, double)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud r0;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.UPath $r1;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: net.sourceforge.plantuml.ugraphic.UPath getSpecificFrontierForCloudNew(double,double)>(d0, d1);

        return $r1;
    }

    private net.sourceforge.plantuml.graphic.USymbol$Margin getMargin()
    {
        net.sourceforge.plantuml.graphic.USymbol$Margin $r0;
        net.sourceforge.plantuml.graphic.USymbolCloud r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        $r0 = new net.sourceforge.plantuml.graphic.USymbol$Margin;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.USymbol$Margin: void <init>(double,double,double,double)>(15.0, 15.0, 15.0, 15.0);

        return $r0;
    }

    public net.sourceforge.plantuml.graphic.TextBlock asSmall(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.SymbolContext, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud$1 $r0;
        net.sourceforge.plantuml.graphic.USymbolCloud r1;
        net.sourceforge.plantuml.graphic.SymbolContext r2;
        net.sourceforge.plantuml.graphic.TextBlock r3, r4, r5;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r6;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r4 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter3: net.sourceforge.plantuml.graphic.SymbolContext;

        r6 := @parameter4: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r0 = new net.sourceforge.plantuml.graphic.USymbolCloud$1;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.USymbolCloud$1: void <init>(net.sourceforge.plantuml.graphic.USymbolCloud,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock)>(r1, r2, r3, r4);

        return $r0;
    }

    public net.sourceforge.plantuml.graphic.TextBlock asBig(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.graphic.TextBlock, double, double, net.sourceforge.plantuml.graphic.SymbolContext, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud$2 $r0;
        net.sourceforge.plantuml.graphic.USymbolCloud r1;
        net.sourceforge.plantuml.graphic.SymbolContext r2;
        net.sourceforge.plantuml.graphic.TextBlock r3, r4;
        double d0, d1;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r5, r6;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolCloud;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r5 := @parameter1: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        r2 := @parameter5: net.sourceforge.plantuml.graphic.SymbolContext;

        r6 := @parameter6: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r0 = new net.sourceforge.plantuml.graphic.USymbolCloud$2;

        specialinvoke $r0.<net.sourceforge.plantuml.graphic.USymbolCloud$2: void <init>(net.sourceforge.plantuml.graphic.USymbolCloud,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.TextBlock,double,net.sourceforge.plantuml.graphic.TextBlock,double)>(r1, r2, r3, d0, r4, d1);

        return $r0;
    }

    static void access$000(net.sourceforge.plantuml.graphic.USymbolCloud, net.sourceforge.plantuml.ugraphic.UGraphic, double, double, double)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        double d0, d1, d2;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.USymbolCloud;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: void drawCloud(net.sourceforge.plantuml.ugraphic.UGraphic,double,double,double)>(r1, d0, d1, d2);

        return;
    }

    static net.sourceforge.plantuml.graphic.USymbol$Margin access$100(net.sourceforge.plantuml.graphic.USymbolCloud)
    {
        net.sourceforge.plantuml.graphic.USymbolCloud r0;
        net.sourceforge.plantuml.graphic.USymbol$Margin $r1;

        r0 := @parameter0: net.sourceforge.plantuml.graphic.USymbolCloud;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolCloud: net.sourceforge.plantuml.graphic.USymbol$Margin getMargin()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.graphic.USymbolCloud: boolean DEBUG> = 0;

        <net.sourceforge.plantuml.graphic.USymbolCloud: boolean NEW> = 1;

        return;
    }
}
