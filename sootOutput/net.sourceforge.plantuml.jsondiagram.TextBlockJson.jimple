public class net.sourceforge.plantuml.jsondiagram.TextBlockJson extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.TextBlockBackcolored
{
    private final java.util.List lines;
    private final net.sourceforge.plantuml.style.Style styleNode;
    private final net.sourceforge.plantuml.style.Style styleNodeHightlight;
    private final net.sourceforge.plantuml.style.Style styleNodeHeader;
    private final net.sourceforge.plantuml.style.Style styleNodeHeaderHighlight;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private double totalWidth;
    private final net.sourceforge.plantuml.json.JsonValue root;

    private net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        net.sourceforge.plantuml.style.PName $r1;
        net.sourceforge.plantuml.style.Style $r2;
        net.sourceforge.plantuml.style.Value $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r6;
        net.sourceforge.plantuml.api.ThemeStyle $r5;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor $r8;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        $r2 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNodeHightlight>;

        $r1 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r1);

        $r4 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r6 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r8 = interfaceinvoke $r3.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r5, $r7);

        return $r8;
    }

    void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.json.JsonValue, java.util.List, net.sourceforge.plantuml.style.Style, net.sourceforge.plantuml.style.Style, net.sourceforge.plantuml.style.Style, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        java.util.ArrayList $r1;
        net.sourceforge.plantuml.ISkinParam r2;
        net.sourceforge.plantuml.style.Style r3, r4, r5, r6, $r15, $r22, $r24;
        net.sourceforge.plantuml.json.JsonValue r7, $r21, r33;
        boolean $z0, $z1, $z2, $z4, z6, z7;
        net.sourceforge.plantuml.json.JsonArray $r8;
        java.lang.Object $r9, $r20;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13, $r16, r30, r31;
        java.util.List r14, $r18, $r27;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line $r17, $r26;
        net.sourceforge.plantuml.json.JsonObject $r19;
        net.sourceforge.plantuml.graphic.TextBlock r23, r25, r34;
        java.util.Iterator r28, r32;
        net.sourceforge.plantuml.json.JsonObject$Member r29;
        int i0;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r2 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r7 := @parameter1: net.sourceforge.plantuml.json.JsonValue;

        r14 := @parameter2: java.util.List;

        r3 := @parameter3: net.sourceforge.plantuml.style.Style;

        r5 := @parameter4: net.sourceforge.plantuml.style.Style;

        r6 := @parameter5: net.sourceforge.plantuml.style.Style;

        r4 := @parameter6: net.sourceforge.plantuml.style.Style;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines> = $r1;

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam> = r2;

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNode> = r3;

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNodeHeaderHighlight> = r4;

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNodeHightlight> = r5;

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNodeHeader> = r6;

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root> = r7;

        $z0 = r7 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z0 == 0 goto label2;

        $r19 = (net.sourceforge.plantuml.json.JsonObject) r7;

        r28 = virtualinvoke $r19.<net.sourceforge.plantuml.json.JsonObject: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        $r20 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (net.sourceforge.plantuml.json.JsonObject$Member) $r20;

        r30 = virtualinvoke r29.<net.sourceforge.plantuml.json.JsonObject$Member: java.lang.String getName()>();

        $r21 = virtualinvoke r29.<net.sourceforge.plantuml.json.JsonObject$Member: net.sourceforge.plantuml.json.JsonValue getValue()>();

        r31 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.lang.String getShortString(net.sourceforge.plantuml.json.JsonValue)>($r21);

        z6 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: boolean isHighlighted(java.lang.String,java.util.List)>(r30, r14);

        $r22 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style getStyleToUse(boolean,boolean)>(1, z6);

        r23 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.style.Style,java.lang.String)>($r22, r30);

        $r24 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style getStyleToUse(boolean,boolean)>(0, z6);

        r25 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.style.Style,java.lang.String)>($r24, r31);

        $r27 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines>;

        $r26 = new net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line;

        specialinvoke $r26.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: void <init>(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,boolean)>(r23, r25, z6);

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label1;

     label2:
        $z1 = r7 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 == 0 goto label4;

        i0 = 0;

        $r8 = (net.sourceforge.plantuml.json.JsonArray) r7;

        r32 = virtualinvoke $r8.<net.sourceforge.plantuml.json.JsonArray: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r9 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (net.sourceforge.plantuml.json.JsonValue) $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        z7 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: boolean isHighlighted(java.lang.String,java.util.List)>($r13, r14);

        $r15 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style getStyleToUse(boolean,boolean)>(0, z7);

        $r16 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.lang.String getShortString(net.sourceforge.plantuml.json.JsonValue)>(r33);

        r34 = specialinvoke r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.style.Style,java.lang.String)>($r15, $r16);

        $r18 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines>;

        $r17 = new net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line;

        specialinvoke $r17.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: void <init>(net.sourceforge.plantuml.graphic.TextBlock,boolean)>(r34, z7);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r17);

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }

    private net.sourceforge.plantuml.style.Style getStyleToUse(boolean, boolean)
    {
        boolean z0, z1;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        net.sourceforge.plantuml.style.Style $r1, $r2, $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 == 0 goto label1;

        if z1 == 0 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNodeHeaderHighlight>;

        return $r4;

     label1:
        if z1 == 0 goto label2;

        $r3 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNodeHightlight>;

        return $r3;

     label2:
        if z0 == 0 goto label3;

        $r2 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNodeHeader>;

        return $r2;

     label3:
        $r1 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNode>;

        return $r1;
    }

    private boolean isHighlighted(java.lang.String, java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.String r3, $r4, r7, $r10;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r11;

        r11 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public int size()
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        net.sourceforge.plantuml.json.JsonValue $r1, $r2, $r3, $r6, r12;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.json.JsonArray $r4;
        java.lang.Object $r5, $r8;
        net.sourceforge.plantuml.json.JsonObject $r7;
        int i0;
        java.util.Iterator r9, r11;
        net.sourceforge.plantuml.json.JsonObject$Member r10;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        i0 = 0;

        $r1 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $z0 = $r1 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z0 == 0 goto label2;

        $r6 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $r7 = (net.sourceforge.plantuml.json.JsonObject) $r6;

        r9 = virtualinvoke $r7.<net.sourceforge.plantuml.json.JsonObject: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r8 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.json.JsonObject$Member) $r8;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $z1 = $r2 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 == 0 goto label4;

        $r3 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $r4 = (net.sourceforge.plantuml.json.JsonArray) $r3;

        r11 = virtualinvoke $r4.<net.sourceforge.plantuml.json.JsonArray: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r5 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (net.sourceforge.plantuml.json.JsonValue) $r5;

        i0 = i0 + 1;

        goto label3;

     label4:
        return i0;
    }

    private java.lang.String getShortString(net.sourceforge.plantuml.json.JsonValue)
    {
        net.sourceforge.plantuml.json.JsonValue r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r1, $r2;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r3;

        r3 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r0 := @parameter0: net.sourceforge.plantuml.json.JsonValue;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: boolean isString()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: java.lang.String asString()>();

        return $r2;

     label1:
        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: boolean isNull()>();

        if $z1 == 0 goto label2;

        return "<U+2400>";

     label2:
        $z2 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: boolean isNumber()>();

        if $z2 == 0 goto label3;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        return $r1;

     label3:
        $z3 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: boolean isBoolean()>();

        if $z3 == 0 goto label5;

        $z4 = virtualinvoke r0.<net.sourceforge.plantuml.json.JsonValue: boolean isTrue()>();

        if $z4 == 0 goto label4;

        return "<U+2611> true";

     label4:
        return "<U+2610> false";

     label5:
        return "   ";
    }

    public java.util.List children()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r2;
        net.sourceforge.plantuml.json.JsonValue $r3, $r4, $r6, $r9, r12, r16;
        boolean $z0, $z1, $z2, $z3, $z5, $z7, $z8, $z10;
        java.util.List $r5;
        net.sourceforge.plantuml.json.JsonArray $r7;
        java.lang.Object $r8, $r11;
        net.sourceforge.plantuml.json.JsonObject $r10;
        java.util.Iterator r13, r15;
        net.sourceforge.plantuml.json.JsonObject$Member r14;

        r2 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $z0 = $r3 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z0 == 0 goto label05;

        $r9 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $r10 = (net.sourceforge.plantuml.json.JsonObject) $r9;

        r13 = virtualinvoke $r10.<net.sourceforge.plantuml.json.JsonObject: java.util.Iterator iterator()>();

     label01:
        $z7 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label05;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (net.sourceforge.plantuml.json.JsonObject$Member) $r11;

        r12 = virtualinvoke r14.<net.sourceforge.plantuml.json.JsonObject$Member: net.sourceforge.plantuml.json.JsonValue getValue()>();

        $z8 = r12 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z8 != 0 goto label02;

        $z10 = r12 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z10 == 0 goto label03;

     label02:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r12);

        goto label04;

     label03:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(null);

     label04:
        goto label01;

     label05:
        $r4 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $z1 = $r4 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 == 0 goto label10;

        $r6 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $r7 = (net.sourceforge.plantuml.json.JsonArray) $r6;

        r15 = virtualinvoke $r7.<net.sourceforge.plantuml.json.JsonArray: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r8 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (net.sourceforge.plantuml.json.JsonValue) $r8;

        $z3 = r16 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z3 != 0 goto label07;

        $z5 = r16 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z5 == 0 goto label08;

     label07:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r16);

        goto label09;

     label08:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(null);

     label09:
        goto label06;

     label10:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    public java.util.List keys()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r2;
        net.sourceforge.plantuml.json.JsonValue $r3, $r4, $r6, $r13, r20;
        boolean $z0, $z1, $z2, $z4;
        java.util.List $r5;
        net.sourceforge.plantuml.json.JsonArray $r7;
        java.lang.Object $r8, $r15;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12, r18;
        net.sourceforge.plantuml.json.JsonObject $r14;
        java.util.Iterator r16, r19;
        net.sourceforge.plantuml.json.JsonObject$Member r17;
        int i0;

        r2 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $z0 = $r3 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z0 == 0 goto label2;

        $r13 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $r14 = (net.sourceforge.plantuml.json.JsonObject) $r13;

        r16 = virtualinvoke $r14.<net.sourceforge.plantuml.json.JsonObject: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        $r15 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (net.sourceforge.plantuml.json.JsonObject$Member) $r15;

        r18 = virtualinvoke r17.<net.sourceforge.plantuml.json.JsonObject$Member: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r18);

        goto label1;

     label2:
        $r4 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $z1 = $r4 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 == 0 goto label4;

        i0 = 0;

        $r6 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.json.JsonValue root>;

        $r7 = (net.sourceforge.plantuml.json.JsonArray) $r6;

        r19 = virtualinvoke $r7.<net.sourceforge.plantuml.json.JsonArray: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r8 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (net.sourceforge.plantuml.json.JsonValue) $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        i0 = i0 + 1;

        goto label3;

     label4:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1, $d2, $d3;

        r1 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: double getWidthColA(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: double getWidthColB(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d2 = $d0 + $d1;

        $d3 = specialinvoke r1.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: double getTotalHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d3);

        return $r0;
    }

    public double getWidthColA(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        net.sourceforge.plantuml.graphic.TextBlock $r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r7;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line) $r3;

        $r6 = r4.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: net.sourceforge.plantuml.graphic.TextBlock b1>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d0 = virtualinvoke $r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        goto label1;

     label2:
        return d1;
    }

    public double getWidthColB(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line r4;
        net.sourceforge.plantuml.graphic.TextBlock $r5, $r7;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r8;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line) $r3;

        $r5 = r4.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: net.sourceforge.plantuml.graphic.TextBlock b2>;

        if $r5 == null goto label2;

        $r7 = r4.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: net.sourceforge.plantuml.graphic.TextBlock b2>;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $d0 = virtualinvoke $r8.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

     label2:
        goto label1;

     label3:
        return d1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, r9, $r24, $r25, r37, r43, r48, $r54, $r57, $r59;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        double $d0, $d1, d2, d3, d4, $d5, d6, d7, d8, d9, d10;
        net.sourceforge.plantuml.ISkinParam $r4, $r7, $r18, $r20, $r30, $r33, $r35;
        net.sourceforge.plantuml.style.Style $r5, $r12, $r16, $r26, r32, $r44;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r6, $r21, $r34;
        net.sourceforge.plantuml.api.ThemeStyle $r8, $r19, $r36;
        java.util.List $r10, $r38;
        boolean $z0, $z1, $z2;
        byte $b0, $b1, $b2;
        net.sourceforge.plantuml.style.PName $r11, $r15;
        net.sourceforge.plantuml.style.Value $r13, $r17;
        net.sourceforge.plantuml.ugraphic.URectangle $r14, $r52, r63, r64;
        net.sourceforge.plantuml.ugraphic.color.HColor r22, $r53, $r55;
        net.sourceforge.plantuml.ugraphic.UBackground $r23, $r56;
        net.sourceforge.plantuml.style.StyleSignature $r27, $r29;
        net.sourceforge.plantuml.style.SName $r28;
        net.sourceforge.plantuml.style.StyleBuilder $r31;
        java.util.Iterator r39, r62;
        java.lang.Object $r40, $r60;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line r41, r61;
        net.sourceforge.plantuml.ugraphic.UTranslate $r42, $r47, $r58;
        net.sourceforge.plantuml.graphic.TextBlock $r45, $r46, $r49;
        net.sourceforge.plantuml.ugraphic.ULine $r50, $r51;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r65;

        r2 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: double totalWidth>;

        d6 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        d2 = virtualinvoke r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: double getWidthColA(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d3 = virtualinvoke r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: double getWidthColB(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d7 = 0.0;

        $r5 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNode>;

        $r4 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r6 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r7 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r9 = virtualinvoke $r5.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UGraphic applyStrokeAndLineColor(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r0, $r6, $r8);

        $r10 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines>;

        r62 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r60 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r61 = (net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line) $r60;

        d8 = virtualinvoke r61.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: double getHeightOfRow(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d7 = d7 + d8;

        goto label1;

     label2:
        $b0 = d7 cmpl 0.0;

        if $b0 != 0 goto label3;

        d7 = 15.0;

     label3:
        $b1 = d6 cmpl 0.0;

        if $b1 != 0 goto label4;

        d6 = 30.0;

     label4:
        $r12 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNode>;

        $r11 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName RoundCorner>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r11);

        d9 = interfaceinvoke $r13.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        $r14 = new net.sourceforge.plantuml.ugraphic.URectangle;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>(d6, d7);

        r63 = virtualinvoke $r14.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>(d9);

        $r16 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNode>;

        $r15 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r15);

        $r18 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r20 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r21 = interfaceinvoke $r20.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r22 = interfaceinvoke $r17.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r19, $r21);

        $r23 = interfaceinvoke r22.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r24 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r23);

        $r25 = interfaceinvoke $r24.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r22);

        interfaceinvoke $r25.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r63);

        $r26 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNode>;

        $r27 = virtualinvoke $r26.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.StyleSignature getSignature()>();

        $r28 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName separator>;

        $r29 = virtualinvoke $r27.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature add(net.sourceforge.plantuml.style.SName)>($r28);

        $r30 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r31 = interfaceinvoke $r30.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r32 = virtualinvoke $r29.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r31);

        $r33 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r34 = interfaceinvoke $r33.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r35 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r36 = interfaceinvoke $r35.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        r37 = virtualinvoke r32.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.ugraphic.UGraphic applyStrokeAndLineColor(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.ugraphic.color.HColorSet,net.sourceforge.plantuml.api.ThemeStyle)>(r0, $r34, $r36);

        d10 = 0.0;

        $r38 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines>;

        r39 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r40 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r41 = (net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line) $r40;

        $r42 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>(d10);

        r43 = interfaceinvoke r37.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r42);

        d4 = virtualinvoke r41.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: double getHeightOfRow(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z1 = r41.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: boolean highlighted>;

        if $z1 == 0 goto label6;

        $r52 = new net.sourceforge.plantuml.ugraphic.URectangle;

        $d5 = d6 - 2.0;

        specialinvoke $r52.<net.sourceforge.plantuml.ugraphic.URectangle: void <init>(double,double)>($d5, d4);

        r64 = virtualinvoke $r52.<net.sourceforge.plantuml.ugraphic.URectangle: net.sourceforge.plantuml.ugraphic.URectangle rounded(double)>(4.0);

        $r53 = specialinvoke r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

        $r54 = interfaceinvoke r43.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r53);

        $r55 = specialinvoke r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

        $r56 = interfaceinvoke $r55.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r57 = interfaceinvoke $r54.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r56);

        $r58 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r58.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(1.5, 0.0);

        $r59 = interfaceinvoke $r57.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r58);

        interfaceinvoke $r59.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r64);

     label6:
        $b2 = d10 cmpl 0.0;

        if $b2 <= 0 goto label7;

        $r51 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine hline(double)>(d6);

        interfaceinvoke r43.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r51);

     label7:
        $r44 = r2.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.style.Style styleNode>;

        r65 = virtualinvoke $r44.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        $r45 = r41.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: net.sourceforge.plantuml.graphic.TextBlock b1>;

        virtualinvoke r65.<net.sourceforge.plantuml.graphic.HorizontalAlignment: void draw(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.graphic.TextBlock,double,double)>(r43, $r45, 0.0, d2);

        $r46 = r41.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: net.sourceforge.plantuml.graphic.TextBlock b2>;

        if $r46 == null goto label8;

        $r47 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>(d2);

        r48 = interfaceinvoke r43.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r47);

        $r49 = r41.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: net.sourceforge.plantuml.graphic.TextBlock b2>;

        virtualinvoke r65.<net.sourceforge.plantuml.graphic.HorizontalAlignment: void draw(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.graphic.TextBlock,double,double)>(r48, $r49, 0.0, d3);

        $r50 = staticinvoke <net.sourceforge.plantuml.ugraphic.ULine: net.sourceforge.plantuml.ugraphic.ULine vline(double)>(d4);

        interfaceinvoke r48.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r50);

     label8:
        d10 = d10 + d4;

        goto label5;

     label9:
        interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r63);

        return;
    }

    private double getTotalHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        double $d0, d1;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d1 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: java.util.List lines>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line) $r3;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.jsondiagram.TextBlockJson$Line: double getHeightOfRow(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        d1 = d1 + $d0;

        goto label1;

     label2:
        return d1;
    }

    private net.sourceforge.plantuml.graphic.TextBlock getTextBlock(net.sourceforge.plantuml.style.Style, java.lang.String)
    {
        java.lang.String r0;
        net.sourceforge.plantuml.cucadiagram.Display r1;
        net.sourceforge.plantuml.style.Style r2;
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r6, $r12;
        net.sourceforge.plantuml.api.ThemeStyle $r5;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r7;
        net.sourceforge.plantuml.graphic.FontConfiguration r8;
        net.sourceforge.plantuml.LineBreakStrategy r9;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r10;
        net.sourceforge.plantuml.creole.CreoleMode $r11;
        net.sourceforge.plantuml.graphic.TextBlock r13, r14;

        r3 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        r2 := @parameter0: net.sourceforge.plantuml.style.Style;

        r0 := @parameter1: java.lang.String;

        r1 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r0);

        $r4 = r3.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r6 = r3.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r8 = virtualinvoke r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r5, $r7);

        r9 = virtualinvoke r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.LineBreakStrategy wrapWidth()>();

        r10 = virtualinvoke r2.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.HorizontalAlignment getHorizontalAlignment()>();

        $r12 = r3.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r11 = <net.sourceforge.plantuml.creole.CreoleMode: net.sourceforge.plantuml.creole.CreoleMode NO_CREOLE>;

        r13 = virtualinvoke r1.<net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.graphic.TextBlock create0(net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.ISkinSimple,net.sourceforge.plantuml.LineBreakStrategy,net.sourceforge.plantuml.creole.CreoleMode,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColor)>(r8, r10, $r12, r9, $r11, null, null);

        r14 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock withMargin(net.sourceforge.plantuml.graphic.TextBlock,double,double)>(r13, 5.0, 2.0);

        return r14;
    }

    public void setTotalWidth(double)
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.jsondiagram.TextBlockJson: double totalWidth> = d0;

        return;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.jsondiagram.TextBlockJson r0;

        r0 := @this: net.sourceforge.plantuml.jsondiagram.TextBlockJson;

        return null;
    }
}
