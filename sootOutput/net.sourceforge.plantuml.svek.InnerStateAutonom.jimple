public final class net.sourceforge.plantuml.svek.InnerStateAutonom extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final net.sourceforge.plantuml.svek.IEntityImage im;
    private final net.sourceforge.plantuml.graphic.TextBlock title;
    private final net.sourceforge.plantuml.graphic.TextBlock attribute;
    private final net.sourceforge.plantuml.ugraphic.color.HColor borderColor;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColor;
    private final net.sourceforge.plantuml.Url url;
    private final boolean withSymbol;
    private final net.sourceforge.plantuml.ugraphic.UStroke stroke;
    private final double rounded;
    private final double shadowing;

    public void <init>(net.sourceforge.plantuml.svek.IEntityImage, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.Url, boolean, net.sourceforge.plantuml.ugraphic.UStroke, double, double)
    {
        net.sourceforge.plantuml.svek.InnerStateAutonom r0;
        net.sourceforge.plantuml.svek.IEntityImage r1;
        boolean z0;
        net.sourceforge.plantuml.graphic.TextBlock r2, r5;
        net.sourceforge.plantuml.ugraphic.color.HColor r3, r4;
        double d0, d1;
        net.sourceforge.plantuml.Url r6;
        net.sourceforge.plantuml.ugraphic.UStroke r7;

        r0 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        r1 := @parameter0: net.sourceforge.plantuml.svek.IEntityImage;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r5 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter4: net.sourceforge.plantuml.ugraphic.color.HColor;

        r6 := @parameter5: net.sourceforge.plantuml.Url;

        z0 := @parameter6: boolean;

        r7 := @parameter7: net.sourceforge.plantuml.ugraphic.UStroke;

        d1 := @parameter8: double;

        d0 := @parameter9: double;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.svek.IEntityImage im> = r1;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: boolean withSymbol> = z0;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock title> = r2;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = r3;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = r4;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: double shadowing> = d0;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock attribute> = r5;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.Url url> = r6;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.ugraphic.UStroke stroke> = r7;

        r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: double rounded> = d1;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.InnerStateAutonom r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1, $r20, $r23, $r27, $r30;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r5, $r19, $r22;
        net.sourceforge.plantuml.graphic.StringBounder $r3, $r6, $r8, $r24;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4, r7, r9;
        double $d0, $d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, $d17, $d18, $d19;
        byte $b0;
        net.sourceforge.plantuml.svek.RoundedContainer $r10;
        net.sourceforge.plantuml.svek.IEntityImage $r11, $r26;
        net.sourceforge.plantuml.ugraphic.color.HColor $r12, $r13, $r14, $r29;
        net.sourceforge.plantuml.ugraphic.UStroke $r15;
        net.sourceforge.plantuml.Url $r17, $r28, $r31;
        net.sourceforge.plantuml.ugraphic.UTranslate $r18, $r21, $r25;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock attribute>;

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r7 = interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r6);

        $r8 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r9 = virtualinvoke r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r8);

        $d0 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $d19 = 5.0;

        goto label2;

     label1:
        $d19 = 0.0;

     label2:
        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = 5.0 + $d2;

        d4 = $d3 + 5.0;

        $r10 = new net.sourceforge.plantuml.svek.RoundedContainer;

        $d5 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = $d5 + $d19;

        $r12 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

        $r13 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.ugraphic.color.HColor backColor>;

        $r11 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.svek.IEntityImage im>;

        $r14 = interfaceinvoke $r11.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        $r15 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.ugraphic.UStroke stroke>;

        $d8 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: double rounded>;

        $d7 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: double shadowing>;

        specialinvoke $r10.<net.sourceforge.plantuml.svek.RoundedContainer: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.UStroke,double,double)>(r9, d4, $d6, $r12, $r13, $r14, $r15, $d8, $d7);

        $r17 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.Url url>;

        if $r17 == null goto label3;

        $r31 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r31);

     label3:
        virtualinvoke $r10.<net.sourceforge.plantuml.svek.RoundedContainer: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r1);

        $r19 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock title>;

        $r18 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d9 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d10 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d11 = $d9 - $d10;

        $d12 = $d11 / 2.0;

        specialinvoke $r18.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d12, 5.0);

        $r20 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r18);

        interfaceinvoke $r19.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r20);

        $r22 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock attribute>;

        $r21 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d13 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d14 = 5.0 + $d13;

        $d15 = $d14 + 5.0;

        specialinvoke $r21.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(5.0, $d15);

        $r23 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r21);

        interfaceinvoke $r22.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r23);

        $r24 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d16 = specialinvoke r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: double getSpaceYforURL(net.sourceforge.plantuml.graphic.StringBounder)>($r24);

        $r26 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.svek.IEntityImage im>;

        $r25 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r25.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(5.0, d16);

        $r27 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r25);

        interfaceinvoke $r26.<net.sourceforge.plantuml.svek.IEntityImage: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r27);

        $z0 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: boolean withSymbol>;

        if $z0 == 0 goto label4;

        $r29 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

        $r30 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r29);

        $d17 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d18 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        staticinvoke <net.sourceforge.plantuml.svek.image.EntityImageState: void drawSymbol(net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r30, $d17, $d18);

     label4:
        $r28 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.Url url>;

        if $r28 == null goto label5;

        interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label5:
        return;
    }

    private double getSpaceYforURL(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.InnerStateAutonom r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r5;
        double $d0, $d2, $d3, d4, $d5, $d6, d7, $d8, $d9;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock title>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock attribute>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $d9 = 5.0;

        goto label2;

     label1:
        $d9 = 0.0;

     label2:
        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d3 = 5.0 + $d2;

        d4 = $d3 + 5.0;

        $d5 = d4 + $d9;

        $d6 = virtualinvoke r5.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d7 = $d5 + $d6;

        $d8 = d7 + 5.0;

        return $d8;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.InnerStateAutonom r0;

        r0 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        return null;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.InnerStateAutonom r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r5, r7, r8, r9;
        net.sourceforge.plantuml.graphic.TextBlock $r4, $r6;
        double $d0, $d2, $d3;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.svek.IEntityImage im>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock title>;

        r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r6 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.graphic.TextBlock attribute>;

        r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r8 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r5, r7, r3);

        $d0 = virtualinvoke r7.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $d3 = 5.0;

        goto label2;

     label1:
        $d3 = 0.0;

     label2:
        $d2 = 20.0 + $d3;

        r9 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double)>(r8, $d2);

        return r9;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.InnerStateAutonom r1;

        r1 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType ROUND_RECTANGLE>;

        return $r0;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Margins $r0;
        net.sourceforge.plantuml.svek.InnerStateAutonom r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r0;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.InnerStateAutonom r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        $r1 = r0.<net.sourceforge.plantuml.svek.InnerStateAutonom: net.sourceforge.plantuml.svek.IEntityImage im>;

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: boolean isHidden()>();

        return $z0;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.InnerStateAutonom r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.svek.InnerStateAutonom;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }
}
