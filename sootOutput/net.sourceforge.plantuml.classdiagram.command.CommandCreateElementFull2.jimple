public class net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2 extends net.sourceforge.plantuml.command.SingleLineCommand2
{
    private final net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode mode;

    public void <init>(net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode)
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2 r0;
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode r1;
        net.sourceforge.plantuml.command.regex.RegexConcat $r2;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2;

        r1 := @parameter0: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode;

        $r2 = staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2: net.sourceforge.plantuml.command.regex.RegexConcat getRegexConcat(net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode)>(r1);

        specialinvoke r0.<net.sourceforge.plantuml.command.SingleLineCommand2: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r2);

        r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode mode> = r1;

        return;
    }

    private static net.sourceforge.plantuml.command.regex.RegexConcat getRegexConcat(net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode)
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode r1, $r2;
        java.lang.StringBuilder $r3, $r6, $r7, $r35, $r37, $r38, $r42, $r43, $r45, $r46, $r52, $r55, $r56, $r85, $r87, $r88, $r92, $r93, $r95, $r96;
        java.lang.Class $r4, $r53;
        java.lang.String $r5, $r8, $r36, $r39, $r44, $r47, $r54, $r57, $r86, $r89, $r94, $r97;
        net.sourceforge.plantuml.command.regex.IRegex[] $r9, $r14, $r17, $r21, $r30, $r58, $r64, $r67, $r71, $r80;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r10, $r11, $r12, $r15, $r18, $r22, $r23, $r24, $r25, $r26, $r27, $r31, $r32, $r33, $r34, $r40, $r41, $r48, $r49, $r50, $r59, $r60, $r61, $r62, $r65, $r68, $r72, $r73, $r74, $r75, $r76, $r77, $r81, $r82, $r83, $r84, $r90, $r91, $r98, $r99, $r100;
        net.sourceforge.plantuml.command.regex.RegexOr $r13, $r63;
        net.sourceforge.plantuml.command.regex.RegexConcat $r16, $r20, $r29, $r51, $r66, $r70, $r79, $r101;
        net.sourceforge.plantuml.command.regex.RegexOptional $r19, $r28, $r69, $r78;

        r1 := @parameter0: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode;

        $r2 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode WITH_MIX_PREFIX>;

        if r1 != $r2 goto label1;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandCreateElementFull2;";

        $r54 = virtualinvoke $r53.<java.lang.Class: java.lang.String getName()>();

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r58 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[13];

        $r59 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r58[0] = $r59;

        $r60 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r60.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("mix_");

        $r58[1] = $r60;

        $r61 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r61.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SYMBOL", "(state|person|artifact|actor/|actor|folder|card|file|package|rectangle|hexagon|label|node|frame|cloud|database|queue|stack|storage|agent|usecase/|usecase|component|boundary|control|entity|interface|circle|collections|port|portin|portout)");

        $r58[2] = $r61;

        $r62 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r58[3] = $r62;

        $r63 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r64 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r65 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r65.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%g].+?[%g])");

        $r64[0] = $r65;

        $r66 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r67 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r68 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r68.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r67[0] = $r68;

        $r69 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r70 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r71 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r72 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r71[0] = $r72;

        $r73 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r73.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE2", "(\\<\\<.+\\>\\>)");

        $r71[1] = $r73;

        specialinvoke $r70.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r71);

        specialinvoke $r69.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r70);

        $r67[1] = $r69;

        $r74 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r67[2] = $r74;

        $r75 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r75.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r67[3] = $r75;

        $r76 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r67[4] = $r76;

        $r77 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r77.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r67[5] = $r77;

        specialinvoke $r66.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r67);

        $r64[1] = $r66;

        specialinvoke $r63.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r64);

        $r58[4] = $r63;

        $r78 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r79 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r80 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r81 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r80[0] = $r81;

        $r82 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r82.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE", "(\\<\\<.+\\>\\>)");

        $r80[1] = $r82;

        specialinvoke $r79.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r80);

        specialinvoke $r78.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r79);

        $r58[5] = $r78;

        $r83 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r58[6] = $r83;

        $r84 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r86 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r84.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r89);

        $r58[7] = $r84;

        $r90 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r58[8] = $r90;

        $r91 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r94 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r95 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r91.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r97);

        $r58[9] = $r91;

        $r98 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r58[10] = $r98;

        $r99 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r58[11] = $r99;

        $r100 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r58[12] = $r100;

        $r101 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r57, $r58);

        return $r101;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = class "Lnet/sourceforge/plantuml/classdiagram/command/CommandCreateElementFull2;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[12];

        $r10 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf start()>();

        $r9[0] = $r10;

        $r11 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r11.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("SYMBOL", "(state|person|artifact|actor/|actor|folder|card|file|package|rectangle|hexagon|label|node|frame|cloud|database|queue|stack|storage|agent|usecase/|usecase|component|boundary|control|entity|interface|circle|collections|port|portin|portout)");

        $r9[1] = $r11;

        $r12 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r9[2] = $r12;

        $r13 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r14 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r15 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r15.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE1", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\]|[%g].+?[%g])");

        $r14[0] = $r15;

        $r16 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r17 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[6];

        $r18 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r18.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("DISPLAY2", "([%g].+?[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r17[0] = $r18;

        $r19 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r20 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r21 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r22 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r21[0] = $r22;

        $r23 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r23.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE2", "(\\<\\<.+\\>\\>)");

        $r21[1] = $r23;

        specialinvoke $r20.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r21);

        specialinvoke $r19.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r20);

        $r17[1] = $r19;

        $r24 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r17[2] = $r24;

        $r25 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r25.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("as");

        $r17[3] = $r25;

        $r26 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceOneOrMore()>();

        $r17[4] = $r26;

        $r27 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r27.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("CODE2", "([%pLN_.]+|\\(\\)[%s]*[%pLN_.]+|\\(\\)[%s]*[%g][^%g]+[%g]|:[^:]+:/?|\\([^()]+\\)/?|\\[[^\\[\\]]+\\])");

        $r17[5] = $r27;

        specialinvoke $r16.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r17);

        $r14[1] = $r16;

        specialinvoke $r13.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r14);

        $r9[3] = $r13;

        $r28 = new net.sourceforge.plantuml.command.regex.RegexOptional;

        $r29 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r30 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r31 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r30[0] = $r31;

        $r32 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r32.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("STEREOTYPE", "(\\<\\<.+\\>\\>)");

        $r30[1] = $r32;

        specialinvoke $r29.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r30);

        specialinvoke $r28.<net.sourceforge.plantuml.command.regex.RegexOptional: void <init>(net.sourceforge.plantuml.command.regex.IRegex)>($r29);

        $r9[4] = $r28;

        $r33 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r9[5] = $r33;

        $r34 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotag: java.lang.String pattern()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("TAGS", $r39);

        $r9[6] = $r34;

        $r40 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r9[7] = $r40;

        $r41 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r44 = staticinvoke <net.sourceforge.plantuml.UrlBuilder: java.lang.String getRegexp()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("URL", $r47);

        $r9[8] = $r41;

        $r48 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf spaceZeroOrMore()>();

        $r9[9] = $r48;

        $r49 = staticinvoke <net.sourceforge.plantuml.graphic.color.ColorParser: net.sourceforge.plantuml.command.regex.RegexLeaf exp1()>();

        $r9[10] = $r49;

        $r50 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexLeaf: net.sourceforge.plantuml.command.regex.RegexLeaf end()>();

        $r9[11] = $r50;

        $r51 = staticinvoke <net.sourceforge.plantuml.command.regex.RegexConcat: net.sourceforge.plantuml.command.regex.RegexConcat build(java.lang.String,net.sourceforge.plantuml.command.regex.IRegex[])>($r8, $r9);

        return $r51;
    }

    protected final boolean isForbidden(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String $r1;
        boolean $z0;
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2 r2;

        r2 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean matches(java.lang.String)>("^[\\p{L}0-9_.]+$");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2 r0;
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode $r1, $r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        java.lang.String r4, r7, r10, $r13, r14, $r24, $r38, $r39, r42, r43, r47, r48, r50;
        char c0, c1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.classdiagram.ClassDiagram r5;
        net.sourceforge.plantuml.ISkinParam $r6, $r16, $r18, $r23, $r27, $r28, $r32, $r36;
        net.sourceforge.plantuml.cucadiagram.Ident r8;
        net.sourceforge.plantuml.cucadiagram.Code r9, $r46;
        net.sourceforge.plantuml.cucadiagram.ILeaf r11;
        net.sourceforge.plantuml.cucadiagram.Display $r12;
        net.sourceforge.plantuml.graphic.color.ColorType $r15;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r17, $r33;
        net.sourceforge.plantuml.api.ThemeStyle $r19;
        net.sourceforge.plantuml.command.CommandExecutionResult $r20, $r40;
        net.sourceforge.plantuml.UrlBuilder $r22;
        net.sourceforge.plantuml.UrlBuilder$ModeUrl $r25;
        net.sourceforge.plantuml.Url r26;
        int $i2;
        double $d0;
        net.sourceforge.plantuml.FontParam[] $r29;
        net.sourceforge.plantuml.FontParam $r30;
        net.sourceforge.plantuml.ugraphic.UFont $r31;
        net.sourceforge.plantuml.cucadiagram.Stereotype $r34;
        java.lang.IllegalStateException $r35;
        net.sourceforge.plantuml.skin.ActorStyle $r37;
        net.sourceforge.plantuml.LineLocation r41;
        net.sourceforge.plantuml.cucadiagram.LeafType r44;
        net.sourceforge.plantuml.graphic.USymbol r45;
        net.sourceforge.plantuml.ugraphic.color.HColor $r51;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2;

        r5 := @parameter0: net.sourceforge.plantuml.classdiagram.ClassDiagram;

        r41 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r2 = r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode mode>;

        $r1 = <net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2$Mode NORMAL_KEYWORD>;

        if $r2 != $r1 goto label01;

        $z4 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean isAllowMixing()>();

        if $z4 != 0 goto label01;

        $r40 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Use \'allowmixing\' if you want to mix classes and other UML elements.");

        return $r40;

     label01:
        r42 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("CODE", 0);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("DISPLAY", 0);

        c0 = specialinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2: char getCharEncoding(java.lang.String)>(r42);

        c1 = specialinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2: char getCharEncoding(java.lang.String)>(r4);

        $z0 = virtualinvoke r42.<java.lang.String: boolean startsWith(java.lang.String)>("()");

        if $z0 == 0 goto label02;

        r43 = "interface";

        $r38 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int)>(2);

        $r39 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r38);

        r42 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>($r39);

        goto label09;

     label02:
        if c0 == 40 goto label03;

        if c1 != 40 goto label04;

     label03:
        r43 = "usecase";

        goto label09;

     label04:
        if c0 == 58 goto label05;

        if c1 != 58 goto label06;

     label05:
        r43 = "actor";

        goto label09;

     label06:
        if c0 == 91 goto label07;

        if c1 != 91 goto label08;

     label07:
        r43 = "component";

        goto label09;

     label08:
        r43 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("SYMBOL", 0);

     label09:
        if r43 != null goto label10;

        r44 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DESCRIPTION>;

        $r36 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r37 = interfaceinvoke $r36.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.skin.ActorStyle actorStyle()>();

        r45 = virtualinvoke $r37.<net.sourceforge.plantuml.skin.ActorStyle: net.sourceforge.plantuml.graphic.USymbol toUSymbol()>();

        goto label14;

     label10:
        $z1 = virtualinvoke r43.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("port");

        if $z1 == 0 goto label11;

        r44 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType PORT>;

        r45 = null;

        goto label14;

     label11:
        $z2 = virtualinvoke r43.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("usecase");

        if $z2 == 0 goto label12;

        r44 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType USECASE>;

        r45 = null;

        goto label14;

     label12:
        $z3 = virtualinvoke r43.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("state");

        if $z3 == 0 goto label13;

        r44 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType STATE>;

        r45 = null;

        goto label14;

     label13:
        r44 = <net.sourceforge.plantuml.cucadiagram.LeafType: net.sourceforge.plantuml.cucadiagram.LeafType DESCRIPTION>;

        $r6 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        r45 = staticinvoke <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol fromString(java.lang.String,net.sourceforge.plantuml.ISkinParam)>(r43, $r6);

        if r45 != null goto label14;

        $r35 = new java.lang.IllegalStateException;

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>()>();

        throw $r35;

     label14:
        r7 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r42);

        r8 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Ident buildLeafIdent(java.lang.String)>(r7);

        $z5 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: boolean V1972()>();

        if $z5 == 0 goto label15;

        $r46 = r8;

        goto label16;

     label15:
        $r46 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.Code buildCode(java.lang.String)>(r7);

     label16:
        r9 = $r46;

        r47 = r4;

        if r4 != null goto label17;

        r47 = interfaceinvoke $r46.<net.sourceforge.plantuml.cucadiagram.Code: java.lang.String getName()>();

     label17:
        r48 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String eventuallyRemoveStartingAndEndingDoubleQuote(java.lang.String)>(r47);

        r10 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String getLazzy(java.lang.String,int)>("STEREOTYPE", 0);

        r11 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.cucadiagram.ILeaf getOrCreateLeaf(net.sourceforge.plantuml.cucadiagram.Ident,net.sourceforge.plantuml.cucadiagram.Code,net.sourceforge.plantuml.cucadiagram.LeafType,net.sourceforge.plantuml.graphic.USymbol)>(r8, r9, r44, r45);

        $r12 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Display: net.sourceforge.plantuml.cucadiagram.Display getWithNewlines(java.lang.String)>(r48);

        interfaceinvoke r11.<net.sourceforge.plantuml.cucadiagram.IEntity: void setDisplay(net.sourceforge.plantuml.cucadiagram.Display)>($r12);

        interfaceinvoke r11.<net.sourceforge.plantuml.cucadiagram.IEntity: void setUSymbol(net.sourceforge.plantuml.graphic.USymbol)>(r45);

        if r10 == null goto label18;

        $r27 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $i2 = interfaceinvoke $r27.<net.sourceforge.plantuml.ISkinParam: int getCircledCharacterRadius()>();

        $d0 = (double) $i2;

        $r28 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r29 = newarray (net.sourceforge.plantuml.FontParam)[1];

        $r30 = <net.sourceforge.plantuml.FontParam: net.sourceforge.plantuml.FontParam CIRCLED_CHARACTER>;

        $r29[0] = $r30;

        $r31 = interfaceinvoke $r28.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.UFont getFont(net.sourceforge.plantuml.cucadiagram.Stereotype,boolean,net.sourceforge.plantuml.FontParam[])>(null, 0, $r29);

        $r32 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r33 = interfaceinvoke $r32.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r34 = staticinvoke <net.sourceforge.plantuml.cucadiagram.Stereotype: net.sourceforge.plantuml.cucadiagram.Stereotype build(java.lang.String,double,net.sourceforge.plantuml.ugraphic.UFont,net.sourceforge.plantuml.ugraphic.color.HColorSet)>(r10, $d0, $r31, $r33);

        interfaceinvoke r11.<net.sourceforge.plantuml.cucadiagram.IEntity: void setStereotype(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r34);

     label18:
        $r13 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("TAGS", 0);

        staticinvoke <net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines: void addTags(net.sourceforge.plantuml.cucadiagram.IEntity,java.lang.String)>(r11, $r13);

        r14 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("URL", 0);

        if r14 == null goto label19;

        $r22 = new net.sourceforge.plantuml.UrlBuilder;

        $r23 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r24 = interfaceinvoke $r23.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("topurl");

        $r25 = <net.sourceforge.plantuml.UrlBuilder$ModeUrl: net.sourceforge.plantuml.UrlBuilder$ModeUrl STRICT>;

        specialinvoke $r22.<net.sourceforge.plantuml.UrlBuilder: void <init>(java.lang.String,net.sourceforge.plantuml.UrlBuilder$ModeUrl)>($r24, $r25);

        r26 = virtualinvoke $r22.<net.sourceforge.plantuml.UrlBuilder: net.sourceforge.plantuml.Url getUrl(java.lang.String)>(r14);

        interfaceinvoke r11.<net.sourceforge.plantuml.cucadiagram.IEntity: void addUrl(net.sourceforge.plantuml.Url)>(r26);

     label19:
        r50 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("COLOR", 0);

        $r15 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        if r50 != null goto label20;

        $r51 = null;

        goto label21;

     label20:
        $r16 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r18 = virtualinvoke r5.<net.sourceforge.plantuml.classdiagram.ClassDiagram: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r19 = interfaceinvoke $r18.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r51 = virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.api.ThemeStyle,java.lang.String)>($r19, r50);

     label21:
        interfaceinvoke r11.<net.sourceforge.plantuml.cucadiagram.IEntity: void setSpecificColorTOBEREMOVED(net.sourceforge.plantuml.graphic.color.ColorType,net.sourceforge.plantuml.ugraphic.color.HColor)>($r15, $r51);

        $r20 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r20;
    }

    private char getCharEncoding(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2 r1;
        char $c1;

        r1 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 2 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        goto label2;

     label1:
        $c1 = 0;

     label2:
        return $c1;
    }

    protected volatile net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.core.Diagram, net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.command.regex.RegexResult) throws net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
    {
        net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2 r0;
        net.sourceforge.plantuml.core.Diagram r1;
        net.sourceforge.plantuml.LineLocation r2;
        net.sourceforge.plantuml.command.regex.RegexResult r3;
        net.sourceforge.plantuml.classdiagram.ClassDiagram $r4;
        net.sourceforge.plantuml.command.CommandExecutionResult $r5;

        r0 := @this: net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2;

        r1 := @parameter0: net.sourceforge.plantuml.core.Diagram;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        r3 := @parameter2: net.sourceforge.plantuml.command.regex.RegexResult;

        $r4 = (net.sourceforge.plantuml.classdiagram.ClassDiagram) r1;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2: net.sourceforge.plantuml.command.CommandExecutionResult executeArg(net.sourceforge.plantuml.classdiagram.ClassDiagram,net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.command.regex.RegexResult)>($r4, r2, r3);

        return $r5;
    }
}
