public class net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow extends net.sourceforge.plantuml.sequencediagram.graphic.Arrow
{
    private final net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p;
    private final net.sourceforge.plantuml.sequencediagram.MessageExoType type;
    private final boolean shortArrow;
    private final net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration;
    static final boolean $assertionsDisabled;

    public void <init>(double, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.skin.ArrowComponent, net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox, net.sourceforge.plantuml.sequencediagram.MessageExoType, net.sourceforge.plantuml.Url, boolean, net.sourceforge.plantuml.skin.ArrowConfiguration)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        double d0;
        net.sourceforge.plantuml.skin.rose.Rose r1;
        net.sourceforge.plantuml.skin.ArrowComponent r2;
        net.sourceforge.plantuml.Url r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox r4;
        net.sourceforge.plantuml.sequencediagram.MessageExoType r5;
        boolean z0;
        net.sourceforge.plantuml.skin.ArrowConfiguration r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.skin.rose.Rose;

        r2 := @parameter2: net.sourceforge.plantuml.skin.ArrowComponent;

        r4 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox;

        r5 := @parameter4: net.sourceforge.plantuml.sequencediagram.MessageExoType;

        r3 := @parameter5: net.sourceforge.plantuml.Url;

        z0 := @parameter6: boolean;

        r6 := @parameter7: net.sourceforge.plantuml.skin.ArrowConfiguration;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void <init>(double,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.skin.ArrowComponent,net.sourceforge.plantuml.Url)>(d0, r1, r2, r3);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: boolean shortArrow> = z0;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration> = r6;

        return;
    }

    double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double d0, $d1, $d2, d3;
        boolean $z0;
        byte $b0;
        java.lang.AssertionError $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getRightEndInternal(net.sourceforge.plantuml.graphic.StringBounder,double)>(r1, d0);

        $d2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        d3 = $d1 - $d2;

        $z0 = <net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b0 = d3 cmpl 0.0;

        if $b0 > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return d3;
    }

    private double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r1, $r2, $r9, $r10, $r11, $r12, $r17, $r18;
        boolean $z0;
        net.sourceforge.plantuml.skin.ArrowConfiguration $r3, $r6;
        net.sourceforge.plantuml.skin.ArrowDecoration $r4, $r5, $r7, $r8;
        net.sourceforge.plantuml.graphic.StringBounder r13;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r14, $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r15, $r20;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r16, $r21;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r13 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r1 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        if $r2 == $r1 goto label1;

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r17 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        if $r18 != $r17 goto label5;

     label1:
        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: boolean shortArrow>;

        if $z0 == 0 goto label2;

        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p>;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r13);

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder,double)>(r13, $d0);

        $r16 = virtualinvoke $r15.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()>();

        $d1 = virtualinvoke $r16.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos2()>();

        $d2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r13);

        $d3 = $d1 - $d2;

        return $d3;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration1()>();

        $r5 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r4 != $r5 goto label3;

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r11 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        if $r12 != $r11 goto label3;

        return 8.0;

     label3:
        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration2()>();

        $r8 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r7 != $r8 goto label4;

        $r10 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r9 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        if $r10 != $r9 goto label4;

        return 8.0;

     label4:
        return 0.0;

     label5:
        $r19 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p>;

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r13);

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder,double)>(r13, $d4);

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()>();

        $d5 = virtualinvoke $r21.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos2()>();

        return $d5;
    }

    private double getRightEndInternal(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r1, $r2, $r7, $r8, $r12, $r13, $r14, $r15;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r4;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.Segment $r6;
        boolean $z0;
        net.sourceforge.plantuml.skin.ArrowConfiguration $r9, $r16;
        net.sourceforge.plantuml.skin.ArrowDecoration $r10, $r11, $r17, $r18;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d2 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r1 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        if $r2 == $r1 goto label1;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r7 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        if $r8 != $r7 goto label2;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p>;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox: net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored getLiveThicknessAt(net.sourceforge.plantuml.graphic.StringBounder,double)>(r3, $d0);

        $r6 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored: net.sourceforge.plantuml.sequencediagram.graphic.Segment getSegment()>();

        $d1 = virtualinvoke $r6.<net.sourceforge.plantuml.sequencediagram.graphic.Segment: double getPos1()>();

        return $d1;

     label2:
        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: boolean shortArrow>;

        if $z0 == 0 goto label3;

        $d6 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d7 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d8 = $d6 + $d7;

        return $d8;

     label3:
        $d3 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d5 = $d3 + $d4;

        d9 = staticinvoke <java.lang.Math: double max(double,double)>(d2, $d5);

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration2()>();

        $r11 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r10 != $r11 goto label4;

        $r15 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r14 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT>;

        if $r15 != $r14 goto label4;

        d9 = d9 - 8.0;

     label4:
        $r16 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration1()>();

        $r18 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r17 != $r18 goto label5;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r12 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT>;

        if $r13 != $r12 goto label5;

        d9 = d9 - 8.0;

     label5:
        return d9;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $d0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public int getDirection(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r1;
        int $i0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $i0 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExoType: int getDirection()>();

        return $i0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.skin.ArrowConfiguration $r3, $r14, $r17, $r20;
        net.sourceforge.plantuml.skin.ArrowDecoration $r4, $r5, $r15, $r16, $r18, $r19, $r21, $r22;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration2()>();

        $r5 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r4 != $r5 goto label1;

        $r13 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r12 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT>;

        if $r13 != $r12 goto label1;

        d0 = d0 + 8.0;

     label1:
        $r14 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration1()>();

        $r16 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r15 != $r16 goto label2;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r10 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT>;

        if $r11 != $r10 goto label2;

        d0 = d0 + 8.0;

     label2:
        $r17 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration1()>();

        $r19 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r18 != $r19 goto label3;

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r8 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        if $r9 != $r8 goto label3;

        d0 = d0 + 8.0;

     label3:
        $r20 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowConfiguration arrowConfiguration>;

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.skin.ArrowConfiguration: net.sourceforge.plantuml.skin.ArrowDecoration getDecoration2()>();

        $r22 = <net.sourceforge.plantuml.skin.ArrowDecoration: net.sourceforge.plantuml.skin.ArrowDecoration CIRCLE>;

        if $r21 != $r22 goto label4;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        $r6 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        if $r7 != $r6 goto label4;

        d0 = d0 + 8.0;

     label4:
        return d0;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r1;
        double d0, d1, $d3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r2;
        net.sourceforge.plantuml.skin.ArrowComponent $r3;
        net.sourceforge.plantuml.skin.Area $r4;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r5;
        net.sourceforge.plantuml.skin.Context2D r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r7, r8;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d1 := @parameter1: double;

        r6 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r0 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r2 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getStartingY()>();

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d0, $d3);

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: void startUrl(net.sourceforge.plantuml.ugraphic.UGraphic)>(r8);

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $r4 = new net.sourceforge.plantuml.skin.Area;

        $r5 = specialinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.awt.geom.Dimension2D getActualDimension(net.sourceforge.plantuml.graphic.StringBounder,double)>(r0, d1);

        specialinvoke $r4.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r5);

        interfaceinvoke $r3.<net.sourceforge.plantuml.skin.ArrowComponent: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r8, $r4, r6);

        virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: void endUrl(net.sourceforge.plantuml.ugraphic.UGraphic)>(r8);

        return;
    }

    private net.sourceforge.plantuml.awt.geom.Dimension2D getActualDimension(net.sourceforge.plantuml.graphic.StringBounder, double)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.skin.ArrowComponent $r3;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder,double)>(r2, d0);

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $d2 = interfaceinvoke $r3.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d2);

        return $r0;
    }

    public double getArrowYStartLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow r3;
        net.sourceforge.plantuml.Dimension2DDouble $r4;
        net.sourceforge.plantuml.graphic.StringBounder r5;
        java.awt.geom.Point2D $r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r5 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $z0 = $r1 instanceof net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        r3 = (net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow) $r2;

        $r4 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r5);

        specialinvoke $r4.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d2);

        $d3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getStartingY()>();

        $r7 = virtualinvoke r3.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: java.awt.geom.Point2D getStartPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r5, $r4);

        $d4 = virtualinvoke $r7.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        return $d5;

     label1:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getStartingY()>();

        return $d0;
    }

    public double getArrowYEndLevel(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.skin.ArrowComponent $r1, $r2, $r4;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow r5;
        net.sourceforge.plantuml.Dimension2DDouble $r6;
        java.awt.geom.Point2D $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $z0 = $r1 instanceof net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        r5 = (net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow) $r4;

        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d3 = virtualinvoke r5.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d4 = virtualinvoke r5.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d3, $d4);

        $d5 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getStartingY()>();

        $r8 = virtualinvoke r5.<net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow: java.awt.geom.Point2D getEndPoint(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r3, $r6);

        $d6 = virtualinvoke $r8.<java.awt.geom.Point2D: double getY()>();

        $d7 = $d5 + $d6;

        return $d7;

     label1:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getStartingY()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.skin.ArrowComponent getArrowComponent()>();

        $d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.ArrowComponent: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d2 = $d0 + $d1;

        return $d2;
    }

    public double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getRightEndInternal(net.sourceforge.plantuml.graphic.StringBounder,double)>(r1, 0.0);

        return $d0;
    }

    public double getMinX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getLeftStartInternal(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public java.lang.String toString(net.sourceforge.plantuml.graphic.StringBounder)
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r5;
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1;
        java.lang.String $r6;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getMinX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getMaxX(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public final net.sourceforge.plantuml.sequencediagram.MessageExoType getType()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.MessageExoType type>;

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox getParticipantAt(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.sequencediagram.NotePosition)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.sequencediagram.NotePosition r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter1: net.sourceforge.plantuml.sequencediagram.NotePosition;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox p>;

        return $r1;
    }

    public double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getMaxX()>();

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: double getActualWidth(net.sourceforge.plantuml.graphic.StringBounder,double)>(r1, $d0);

        return $d1;
    }

    public volatile double getArrowOnlyWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: double getArrowOnlyWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public volatile void setMaxX(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow;

        d0 := @parameter0: double;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Arrow: void setMaxX(double)>(d0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/MessageExoArrow;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow: boolean $assertionsDisabled> = $z1;

        return;
    }
}
