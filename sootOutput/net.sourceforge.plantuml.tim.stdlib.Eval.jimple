public class net.sourceforge.plantuml.tim.stdlib.Eval extends net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
{

    public void <init>()
    {
        net.sourceforge.plantuml.tim.stdlib.Eval r0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Eval;

        specialinvoke r0.<net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionSignature $r0;
        net.sourceforge.plantuml.tim.stdlib.Eval r1;

        r1 := @this: net.sourceforge.plantuml.tim.stdlib.Eval;

        $r0 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int)>("%eval", 1);

        return $r0;
    }

    public boolean canCover(int, java.util.Set)
    {
        int i0;
        net.sourceforge.plantuml.tim.stdlib.Eval r0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.stdlib.Eval;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        if i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.List r0;
        java.lang.Object $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2, r8, $r9;
        java.lang.String r3;
        net.sourceforge.plantuml.tim.StringEater $r4;
        net.sourceforge.plantuml.tim.TContext r6;
        net.sourceforge.plantuml.tim.TMemory r7;
        int $i0;
        net.sourceforge.plantuml.tim.stdlib.Eval r10;
        net.sourceforge.plantuml.LineLocation r11;
        java.util.Map r12;

        r10 := @this: net.sourceforge.plantuml.tim.stdlib.Eval;

        r6 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r7 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r11 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r0 := @parameter3: java.util.List;

        r12 := @parameter4: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (net.sourceforge.plantuml.tim.expression.TValue) $r1;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        $r4 = new net.sourceforge.plantuml.tim.StringEater;

        specialinvoke $r4.<net.sourceforge.plantuml.tim.StringEater: void <init>(java.lang.String)>(r3);

        r8 = virtualinvoke $r4.<net.sourceforge.plantuml.tim.StringEater: net.sourceforge.plantuml.tim.expression.TValue eatExpression(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r6, r7);

        $i0 = virtualinvoke r8.<net.sourceforge.plantuml.tim.expression.TValue: int toInt()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromInt(int)>($i0);

        return $r9;
    }
}
