class net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader extends java.lang.Object
{
    public byte[] fcc;
    public int cb;
    public int dwMicroSecPerFrame;
    public int dwMaxBytesPerSec;
    public int dwPaddingGranularity;
    public int dwFlags;
    public int dwTotalFrames;
    public int dwInitialFrames;
    public int dwStreams;
    public int dwSuggestedBufferSize;
    public int dwWidth;
    public int dwHeight;
    public int[] dwReserved;
    final net.sourceforge.plantuml.mjpeg.MJPEGGenerator this$0;

    public void <init>(net.sourceforge.plantuml.mjpeg.MJPEGGenerator)
    {
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader r0;
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator r1;
        byte[] $r2;
        int[] $r3;
        double $d0, $d1, $d2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader;

        r1 := @parameter0: net.sourceforge.plantuml.mjpeg.MJPEGGenerator;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: net.sourceforge.plantuml.mjpeg.MJPEGGenerator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[4];

        $r2[0] = 97;

        $r2[1] = 118;

        $r2[2] = 105;

        $r2[3] = 104;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: byte[] fcc> = $r2;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int cb> = 56;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwMicroSecPerFrame> = 0;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwMaxBytesPerSec> = 10000000;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwPaddingGranularity> = 0;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwFlags> = 65552;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwTotalFrames> = 0;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwInitialFrames> = 0;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwStreams> = 1;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwSuggestedBufferSize> = 0;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwWidth> = 0;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwHeight> = 0;

        $r3 = newarray (int)[4];

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int[] dwReserved> = $r3;

        $d0 = r1.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator: double framerate>;

        $d1 = 1.0 / $d0;

        $d2 = $d1 * 1000000.0;

        $i0 = (int) $d2;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwMicroSecPerFrame> = $i0;

        $i1 = r1.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int width>;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwWidth> = $i1;

        $i2 = r1.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int height>;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwHeight> = $i2;

        $i3 = r1.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int numFrames>;

        r0.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwTotalFrames> = $i3;

        return;
    }

    public byte[] toBytes() throws java.io.IOException
    {
        java.io.ByteArrayOutputStream $r0;
        net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader r2;
        byte[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r18, $r20, $r22, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        int[] $r15, $r17, $r19, $r21;

        r2 := @this: net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: byte[] fcc>;

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r3);

        $i0 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int cb>;

        $i1 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i0);

        $r4 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i1);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r4);

        $i2 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwMicroSecPerFrame>;

        $i3 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i2);

        $r5 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i3);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r5);

        $i4 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwMaxBytesPerSec>;

        $i5 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i4);

        $r6 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i5);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r6);

        $i6 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwPaddingGranularity>;

        $i7 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i6);

        $r7 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i7);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r7);

        $i8 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwFlags>;

        $i9 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i8);

        $r8 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i9);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r8);

        $i10 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwTotalFrames>;

        $i11 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i10);

        $r9 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i11);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r9);

        $i12 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwInitialFrames>;

        $i13 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i12);

        $r10 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i13);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r10);

        $i14 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwStreams>;

        $i15 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i14);

        $r11 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i15);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r11);

        $i16 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwSuggestedBufferSize>;

        $i17 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i16);

        $r12 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i17);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r12);

        $i18 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwWidth>;

        $i19 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i18);

        $r13 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i19);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r13);

        $i20 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int dwHeight>;

        $i21 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i20);

        $r14 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i21);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r14);

        $r15 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int[] dwReserved>;

        $i22 = $r15[0];

        $i23 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i22);

        $r16 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i23);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r16);

        $r17 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int[] dwReserved>;

        $i24 = $r17[1];

        $i25 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i24);

        $r18 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i25);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r18);

        $r19 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int[] dwReserved>;

        $i26 = $r19[2];

        $i27 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i26);

        $r20 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i27);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r20);

        $r21 = r2.<net.sourceforge.plantuml.mjpeg.MJPEGGenerator$AVIMainHeader: int[] dwReserved>;

        $i28 = $r21[3];

        $i29 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: int swapInt(int)>($i28);

        $r22 = staticinvoke <net.sourceforge.plantuml.mjpeg.MJPEGGenerator: byte[] intBytes(int)>($i29);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r22);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

        $r23 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r23;
    }
}
