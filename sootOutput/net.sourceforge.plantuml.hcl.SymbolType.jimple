public final enum class net.sourceforge.plantuml.hcl.SymbolType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.hcl.SymbolType STRING_SIMPLE;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType FUNCTION_NAME;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_OPEN;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_CLOSE;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_OPEN;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_CLOSE;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_OPEN;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_CLOSE;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType TWO_POINTS;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType EQUALS;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType COMMA;
    public static final enum net.sourceforge.plantuml.hcl.SymbolType SPACE;
    private static final net.sourceforge.plantuml.hcl.SymbolType[] $VALUES;

    public static net.sourceforge.plantuml.hcl.SymbolType[] values()
    {
        net.sourceforge.plantuml.hcl.SymbolType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.hcl.SymbolType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.hcl.SymbolType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.hcl.SymbolType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/hcl/SymbolType;", r0);

        $r2 = (net.sourceforge.plantuml.hcl.SymbolType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.hcl.SymbolType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.hcl.SymbolType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static net.sourceforge.plantuml.hcl.SymbolType[] $values()
    {
        net.sourceforge.plantuml.hcl.SymbolType[] $r0;
        net.sourceforge.plantuml.hcl.SymbolType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        $r0 = newarray (net.sourceforge.plantuml.hcl.SymbolType)[13];

        $r1 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_SIMPLE>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType FUNCTION_NAME>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_OPEN>;

        $r0[3] = $r4;

        $r5 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_CLOSE>;

        $r0[4] = $r5;

        $r6 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_OPEN>;

        $r0[5] = $r6;

        $r7 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_CLOSE>;

        $r0[6] = $r7;

        $r8 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_OPEN>;

        $r0[7] = $r8;

        $r9 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_CLOSE>;

        $r0[8] = $r9;

        $r10 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType TWO_POINTS>;

        $r0[9] = $r10;

        $r11 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType EQUALS>;

        $r0[10] = $r11;

        $r12 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType COMMA>;

        $r0[11] = $r12;

        $r13 = <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SPACE>;

        $r0[12] = $r13;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.hcl.SymbolType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        net.sourceforge.plantuml.hcl.SymbolType[] $r13;

        $r0 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r0.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("STRING_SIMPLE", 0);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_SIMPLE> = $r0;

        $r1 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r1.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("STRING_QUOTED", 1);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType STRING_QUOTED> = $r1;

        $r2 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r2.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("FUNCTION_NAME", 2);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType FUNCTION_NAME> = $r2;

        $r3 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r3.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("SQUARE_BRACKET_OPEN", 3);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_OPEN> = $r3;

        $r4 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r4.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("SQUARE_BRACKET_CLOSE", 4);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SQUARE_BRACKET_CLOSE> = $r4;

        $r5 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r5.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("CURLY_BRACKET_OPEN", 5);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_OPEN> = $r5;

        $r6 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r6.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("CURLY_BRACKET_CLOSE", 6);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType CURLY_BRACKET_CLOSE> = $r6;

        $r7 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r7.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("PARENTHESIS_OPEN", 7);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_OPEN> = $r7;

        $r8 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r8.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("PARENTHESIS_CLOSE", 8);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType PARENTHESIS_CLOSE> = $r8;

        $r9 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r9.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("TWO_POINTS", 9);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType TWO_POINTS> = $r9;

        $r10 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r10.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("EQUALS", 10);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType EQUALS> = $r10;

        $r11 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r11.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("COMMA", 11);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType COMMA> = $r11;

        $r12 = new net.sourceforge.plantuml.hcl.SymbolType;

        specialinvoke $r12.<net.sourceforge.plantuml.hcl.SymbolType: void <init>(java.lang.String,int)>("SPACE", 12);

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType SPACE> = $r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType[] $values()>();

        <net.sourceforge.plantuml.hcl.SymbolType: net.sourceforge.plantuml.hcl.SymbolType[] $VALUES> = $r13;

        return;
    }
}
