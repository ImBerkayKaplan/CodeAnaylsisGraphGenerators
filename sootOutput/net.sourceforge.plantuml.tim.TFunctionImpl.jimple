public class net.sourceforge.plantuml.tim.TFunctionImpl extends java.lang.Object implements net.sourceforge.plantuml.tim.TFunction
{
    private final net.sourceforge.plantuml.tim.TFunctionSignature signature;
    private final java.util.List args;
    private final java.util.List body;
    private final boolean unquoted;
    private net.sourceforge.plantuml.tim.TFunctionType functionType;
    private java.lang.String legacyDefinition;
    private boolean containsReturn;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, java.util.List, boolean, net.sourceforge.plantuml.tim.TFunctionType)
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        java.util.ArrayList $r1;
        java.util.HashSet $r2;
        java.util.List r4;
        java.util.Iterator r5;
        boolean $z0, z1;
        net.sourceforge.plantuml.tim.TFunctionSignature $r6;
        java.lang.String r7, $r11;
        int $i0;
        net.sourceforge.plantuml.tim.TFunctionType r8;
        java.lang.Object $r9;
        net.sourceforge.plantuml.tim.TFunctionArgument r10;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r7 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.List;

        z1 := @parameter2: boolean;

        r8 := @parameter3: net.sourceforge.plantuml.tim.TFunctionType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List body> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.tim.TFunctionArgument) $r9;

        $r11 = virtualinvoke r10.<net.sourceforge.plantuml.tim.TFunctionArgument: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $r6 = new net.sourceforge.plantuml.tim.TFunctionSignature;

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        specialinvoke $r6.<net.sourceforge.plantuml.tim.TFunctionSignature: void <init>(java.lang.String,int,java.util.Set)>(r7, $i0, $r2);

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionSignature signature> = $r6;

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List args> = r4;

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean unquoted> = z1;

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType> = r8;

        return;
    }

    public boolean canCover(int, java.util.Set)
    {
        java.util.Set r0, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2, i3;
        net.sourceforge.plantuml.tim.TFunctionImpl r1;
        java.util.List $r2, $r3, $r9;
        java.lang.AssertionError $r4, $r10;
        java.lang.Object $r5, $r11;
        net.sourceforge.plantuml.tim.TFunctionArgument r6;
        java.lang.String $r7, r15;
        net.sourceforge.plantuml.tim.expression.TValue $r8;
        net.sourceforge.plantuml.tim.TFunctionSignature $r12;
        java.util.Iterator r14, r16;

        r1 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Set;

        r14 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r11 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r11;

        $r12 = r1.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionSignature signature>;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.tim.TFunctionSignature: java.util.Set getNamedArguments()>();

        $z4 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>(r15);

        if $z4 != 0 goto label02;

        return 0;

     label02:
        goto label01;

     label03:
        $r2 = r1.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List args>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 <= $i1 goto label04;

        return 0;

     label04:
        $z1 = <net.sourceforge.plantuml.tim.TFunctionImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label05;

        $r9 = r1.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List args>;

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        if i0 <= $i2 goto label05;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label05:
        i3 = 0;

        $r3 = r1.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List args>;

        r16 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        $r5 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r6 = (net.sourceforge.plantuml.tim.TFunctionArgument) $r5;

        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.tim.TFunctionArgument: java.lang.String getName()>();

        $z3 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z3 == 0 goto label07;

        goto label06;

     label07:
        $r8 = virtualinvoke r6.<net.sourceforge.plantuml.tim.TFunctionArgument: net.sourceforge.plantuml.tim.expression.TValue getOptionalDefaultValue()>();

        if $r8 != null goto label08;

        i3 = i3 + 1;

     label08:
        goto label06;

     label09:
        if i0 >= i3 goto label10;

        return 0;

     label10:
        $z2 = <net.sourceforge.plantuml.tim.TFunctionImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label11;

        if i0 >= i3 goto label11;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label11:
        return 1;
    }

    private net.sourceforge.plantuml.tim.TMemory getNewMemory(net.sourceforge.plantuml.tim.TMemory, java.util.List, java.util.Map)
    {
        java.util.HashMap $r0;
        net.sourceforge.plantuml.tim.TFunctionImpl r2;
        java.util.List $r3, r11;
        java.util.Iterator r4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.tim.TMemory r5, $r6;
        java.lang.Object $r7, $r15, $r17;
        net.sourceforge.plantuml.tim.TFunctionArgument r8;
        java.util.Map r9;
        java.lang.String $r10, $r12, $r16;
        int $i0, i1;
        java.lang.IllegalStateException $r14;
        net.sourceforge.plantuml.tim.expression.TValue r18;

        r2 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r5 := @parameter0: net.sourceforge.plantuml.tim.TMemory;

        r11 := @parameter1: java.util.List;

        r9 := @parameter2: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

        $r3 = r2.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List args>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.tim.TFunctionArgument) $r7;

        $r10 = virtualinvoke r8.<net.sourceforge.plantuml.tim.TFunctionArgument: java.lang.String getName()>();

        $z1 = interfaceinvoke r9.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        $r16 = virtualinvoke r8.<net.sourceforge.plantuml.tim.TFunctionArgument: java.lang.String getName()>();

        $r17 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r18 = (net.sourceforge.plantuml.tim.expression.TValue) $r17;

        goto label4;

     label2:
        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r15 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i1);

        r18 = (net.sourceforge.plantuml.tim.expression.TValue) $r15;

        i1 = i1 + 1;

        goto label4;

     label3:
        r18 = virtualinvoke r8.<net.sourceforge.plantuml.tim.TFunctionArgument: net.sourceforge.plantuml.tim.expression.TValue getOptionalDefaultValue()>();

     label4:
        if r18 != null goto label5;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>()>();

        throw $r14;

     label5:
        $r12 = virtualinvoke r8.<net.sourceforge.plantuml.tim.TFunctionArgument: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r18);

        goto label1;

     label6:
        $r6 = interfaceinvoke r5.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.TMemory forkFromGlobal(java.util.Map)>($r0);

        return $r6;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        net.sourceforge.plantuml.tim.TFunctionImpl r2;
        net.sourceforge.plantuml.tim.TFunctionSignature $r3;
        java.util.List $r6;
        java.lang.String $r8;

        r2 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FUNCTION ");

        $r3 = r2.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionSignature signature>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r2.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List args>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void addBody(net.sourceforge.plantuml.StringLocated) throws net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        net.sourceforge.plantuml.StringLocated r1;
        java.util.List $r2;
        net.sourceforge.plantuml.tim.TLineType $r3, $r4;
        net.sourceforge.plantuml.tim.TFunctionType $r5, $r6;
        net.sourceforge.plantuml.tim.EaterExceptionLocated $r7;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r2 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List body>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.tim.TLineType getType()>();

        $r4 = <net.sourceforge.plantuml.tim.TLineType: net.sourceforge.plantuml.tim.TLineType RETURN>;

        if $r3 != $r4 goto label1;

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean containsReturn> = 1;

        $r6 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType>;

        $r5 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType PROCEDURE>;

        if $r6 != $r5 goto label1;

        $r7 = staticinvoke <net.sourceforge.plantuml.tim.EaterExceptionLocated: net.sourceforge.plantuml.tim.EaterExceptionLocated located(java.lang.String,net.sourceforge.plantuml.StringLocated)>("A procedure cannot have !return directive. Declare it as a function instead ?", r1);

        throw $r7;

     label1:
        return;
    }

    public void executeProcedure(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.lang.String) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.EaterFunctionCall $r0;
        net.sourceforge.plantuml.StringLocated $r1;
        java.lang.String r2, $r7, r10;
        net.sourceforge.plantuml.LineLocation r3;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TFunctionImpl r5;
        net.sourceforge.plantuml.tim.TFunctionSignature $r6;
        boolean $z0, $z1;
        net.sourceforge.plantuml.tim.TMemory r9;
        java.util.List r11;
        java.util.Map r12;

        r5 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r9 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r2 := @parameter3: java.lang.String;

        $r0 = new net.sourceforge.plantuml.tim.EaterFunctionCall;

        $r1 = new net.sourceforge.plantuml.StringLocated;

        specialinvoke $r1.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>(r2, r3);

        $r6 = r5.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionSignature signature>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.tim.TFunctionSignature: java.lang.String getFunctionName()>();

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.tim.TContext: boolean isLegacyDefine(java.lang.String)>($r7);

        $z1 = r5.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean unquoted>;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void <init>(net.sourceforge.plantuml.StringLocated,boolean,boolean)>($r1, $z0, $z1);

        virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: void analyze(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>(r4, r9);

        r10 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.lang.String getEndOfLine()>();

        r11 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.List getValues()>();

        r12 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.EaterFunctionCall: java.util.Map getNamedArguments()>();

        virtualinvoke r5.<net.sourceforge.plantuml.tim.TFunctionImpl: void executeProcedureInternal(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List,java.util.Map)>(r4, r9, r11, r12);

        virtualinvoke r4.<net.sourceforge.plantuml.tim.TContext: void appendEndOfLine(java.lang.String)>(r10);

        return;
    }

    public void executeProcedureInternal(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        net.sourceforge.plantuml.tim.TFunctionType $r1, $r2, $r8, $r11, $r12;
        net.sourceforge.plantuml.tim.TMemory r3, r6;
        java.util.List r4, $r9;
        java.util.Map r5;
        net.sourceforge.plantuml.tim.TContext r7;
        java.lang.IllegalStateException $r13;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r7 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.util.Map;

        $r2 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType>;

        $r1 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType PROCEDURE>;

        if $r2 == $r1 goto label1;

        $r12 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType>;

        $r11 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType LEGACY_DEFINELONG>;

        if $r12 == $r11 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>()>();

        throw $r13;

     label1:
        r6 = specialinvoke r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TMemory getNewMemory(net.sourceforge.plantuml.tim.TMemory,java.util.List,java.util.Map)>(r3, r4, r5);

        $r9 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List body>;

        $r8 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType PROCEDURE>;

        virtualinvoke r7.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue executeLines(net.sourceforge.plantuml.tim.TMemory,java.util.List,net.sourceforge.plantuml.tim.TFunctionType,boolean)>(r6, $r9, $r8, 0);

        return;
    }

    public net.sourceforge.plantuml.tim.expression.TValue executeReturnFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation, java.util.List, java.util.Map) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        net.sourceforge.plantuml.tim.TFunctionType $r1, $r2, $r3, $r4, $r10;
        net.sourceforge.plantuml.tim.TMemory r5, r8;
        java.util.List r6, $r11;
        java.util.Map r7;
        net.sourceforge.plantuml.tim.TContext r9;
        net.sourceforge.plantuml.tim.expression.TValue r12, $r16;
        net.sourceforge.plantuml.tim.EaterException $r13, $r14;
        net.sourceforge.plantuml.LineLocation r15;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r9 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r15 := @parameter2: net.sourceforge.plantuml.LineLocation;

        r6 := @parameter3: java.util.List;

        r7 := @parameter4: java.util.Map;

        $r2 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType>;

        $r1 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType LEGACY_DEFINE>;

        if $r2 != $r1 goto label1;

        $r16 = specialinvoke r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.expression.TValue executeReturnLegacyDefine(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,java.util.List)>(r15, r9, r5, r6);

        return $r16;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType>;

        $r3 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        if $r4 == $r3 goto label2;

        $r14 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("Illegal call here. Is there a return directive in your function?");

        throw $r14;

     label2:
        r8 = specialinvoke r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TMemory getNewMemory(net.sourceforge.plantuml.tim.TMemory,java.util.List,java.util.Map)>(r5, r6, r7);

        $r11 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List body>;

        $r10 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        r12 = virtualinvoke r9.<net.sourceforge.plantuml.tim.TContext: net.sourceforge.plantuml.tim.expression.TValue executeLines(net.sourceforge.plantuml.tim.TMemory,java.util.List,net.sourceforge.plantuml.tim.TFunctionType,boolean)>(r8, $r11, $r10, 1);

        if r12 != null goto label3;

        $r13 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("No return directive found in your function");

        throw $r13;

     label3:
        return r12;
    }

    private net.sourceforge.plantuml.tim.expression.TValue executeReturnLegacyDefine(net.sourceforge.plantuml.LineLocation, net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, java.util.List) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        java.lang.String $r1, $r8, r9;
        net.sourceforge.plantuml.tim.TMemory r2, r5;
        java.util.List r3;
        java.util.Map $r4;
        net.sourceforge.plantuml.tim.TContext r6;
        net.sourceforge.plantuml.LineLocation r7;
        net.sourceforge.plantuml.tim.expression.TValue $r10, $r11;
        java.lang.IllegalStateException $r12;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r7 := @parameter0: net.sourceforge.plantuml.LineLocation;

        r6 := @parameter1: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter2: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter3: java.util.List;

        $r1 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.lang.String legacyDefinition>;

        if $r1 != null goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r5 = specialinvoke r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TMemory getNewMemory(net.sourceforge.plantuml.tim.TMemory,java.util.List,java.util.Map)>(r2, r3, $r4);

        $r8 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.lang.String legacyDefinition>;

        r9 = virtualinvoke r6.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>(r5, r7, $r8);

        if r9 != null goto label2;

        $r11 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>("");

        return $r11;

     label2:
        $r10 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>(r9);

        return $r10;
    }

    public final net.sourceforge.plantuml.tim.TFunctionType getFunctionType()
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        net.sourceforge.plantuml.tim.TFunctionType $r1;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        $r1 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType>;

        return $r1;
    }

    public final net.sourceforge.plantuml.tim.TFunctionSignature getSignature()
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        net.sourceforge.plantuml.tim.TFunctionSignature $r1;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        $r1 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionSignature signature>;

        return $r1;
    }

    public void setLegacyDefinition(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        r1 := @parameter0: java.lang.String;

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.lang.String legacyDefinition> = r1;

        return;
    }

    public boolean isUnquoted()
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        $z0 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean unquoted>;

        return $z0;
    }

    public boolean hasBody()
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        java.util.List $r1;
        int $i0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        $r1 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List body>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void finalizeEnddefinelong()
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        net.sourceforge.plantuml.tim.TFunctionType $r1, $r2, $r4;
        java.util.List $r3, $r5;
        int $i0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.StringLocated $r7;
        java.lang.String $r8;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        $r2 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType>;

        $r1 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType LEGACY_DEFINELONG>;

        if $r2 == $r1 goto label1;

        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r9;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List body>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r4 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType LEGACY_DEFINE>;

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: net.sourceforge.plantuml.tim.TFunctionType functionType> = $r4;

        $r5 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.util.List body>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (net.sourceforge.plantuml.StringLocated) $r6;

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        r0.<net.sourceforge.plantuml.tim.TFunctionImpl: java.lang.String legacyDefinition> = $r8;

     label2:
        return;
    }

    public final boolean doesContainReturn()
    {
        net.sourceforge.plantuml.tim.TFunctionImpl r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.TFunctionImpl;

        $z0 = r0.<net.sourceforge.plantuml.tim.TFunctionImpl: boolean containsReturn>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/TFunctionImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.TFunctionImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
