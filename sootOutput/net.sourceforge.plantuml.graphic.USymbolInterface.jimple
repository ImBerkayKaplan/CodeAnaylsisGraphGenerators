public class net.sourceforge.plantuml.graphic.USymbolInterface extends net.sourceforge.plantuml.graphic.USymbolSimpleAbstract
{

    public void <init>()
    {
        net.sourceforge.plantuml.graphic.USymbolInterface r0;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolInterface;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolSimpleAbstract: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.graphic.SkinParameter getSkinParameter()
    {
        net.sourceforge.plantuml.graphic.SkinParameter $r0;
        net.sourceforge.plantuml.graphic.USymbolInterface r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolInterface;

        $r0 = <net.sourceforge.plantuml.graphic.SkinParameter: net.sourceforge.plantuml.graphic.SkinParameter INTERFACE>;

        return $r0;
    }

    public net.sourceforge.plantuml.style.SName getSName()
    {
        net.sourceforge.plantuml.style.SName $r0;
        net.sourceforge.plantuml.graphic.USymbolInterface r1;

        r1 := @this: net.sourceforge.plantuml.graphic.USymbolInterface;

        $r0 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName interface_>;

        return $r0;
    }

    protected net.sourceforge.plantuml.graphic.TextBlock getDrawing(net.sourceforge.plantuml.graphic.SymbolContext)
    {
        net.sourceforge.plantuml.svek.CircleInterface2 $r0;
        net.sourceforge.plantuml.graphic.SymbolContext r1;
        net.sourceforge.plantuml.ugraphic.color.HColor $r2, $r3;
        boolean $z0;
        net.sourceforge.plantuml.graphic.USymbolInterface r4;
        double $d0;

        r4 := @this: net.sourceforge.plantuml.graphic.USymbolInterface;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.SymbolContext;

        $r0 = new net.sourceforge.plantuml.svek.CircleInterface2;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.color.HColor getBackColor()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.ugraphic.color.HColor getForeColor()>();

        $z0 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.SymbolContext: boolean isShadowing()>();

        if $z0 == 0 goto label1;

        $d0 = 4.0;

        goto label2;

     label1:
        $d0 = 0.0;

     label2:
        specialinvoke $r0.<net.sourceforge.plantuml.svek.CircleInterface2: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor,double)>($r2, $r3, $d0);

        return $r0;
    }

    public volatile net.sourceforge.plantuml.graphic.TextBlock asBig(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.HorizontalAlignment, net.sourceforge.plantuml.graphic.TextBlock, double, double, net.sourceforge.plantuml.graphic.SymbolContext, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.USymbolInterface r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r3, $r6;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r2, r5;
        double d0, d1;
        net.sourceforge.plantuml.graphic.SymbolContext r4;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolInterface;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        r4 := @parameter5: net.sourceforge.plantuml.graphic.SymbolContext;

        r5 := @parameter6: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolSimpleAbstract: net.sourceforge.plantuml.graphic.TextBlock asBig(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.graphic.TextBlock,double,double,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r1, r2, r3, d0, d1, r4, r5);

        return $r6;
    }

    public volatile net.sourceforge.plantuml.graphic.TextBlock asSmall(net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.graphic.SymbolContext, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.graphic.USymbolInterface r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2, r3, $r6;
        net.sourceforge.plantuml.graphic.SymbolContext r4;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r5;

        r0 := @this: net.sourceforge.plantuml.graphic.USymbolInterface;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.TextBlock;

        r4 := @parameter3: net.sourceforge.plantuml.graphic.SymbolContext;

        r5 := @parameter4: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.graphic.USymbolSimpleAbstract: net.sourceforge.plantuml.graphic.TextBlock asSmall(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(r1, r2, r3, r4, r5);

        return $r6;
    }
}
