public class net.sourceforge.plantuml.svek.image.RotatedEllipse extends java.lang.Object
{
    private final net.sourceforge.plantuml.ugraphic.UEllipse ellipse;
    private final double beta;

    public void <init>(net.sourceforge.plantuml.ugraphic.UEllipse, double)
    {
        net.sourceforge.plantuml.svek.image.RotatedEllipse r0;
        net.sourceforge.plantuml.ugraphic.UEllipse r1;
        double d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.RotatedEllipse;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UEllipse;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: net.sourceforge.plantuml.ugraphic.UEllipse ellipse> = r1;

        r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta> = d0;

        return;
    }

    public double getA()
    {
        net.sourceforge.plantuml.svek.image.RotatedEllipse r0;
        net.sourceforge.plantuml.ugraphic.UEllipse $r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.RotatedEllipse;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: net.sourceforge.plantuml.ugraphic.UEllipse ellipse>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getWidth()>();

        $d1 = $d0 / 2.0;

        return $d1;
    }

    public double getB()
    {
        net.sourceforge.plantuml.svek.image.RotatedEllipse r0;
        net.sourceforge.plantuml.ugraphic.UEllipse $r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.svek.image.RotatedEllipse;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: net.sourceforge.plantuml.ugraphic.UEllipse ellipse>;

        $d0 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UEllipse: double getHeight()>();

        $d1 = $d0 / 2.0;

        return $d1;
    }

    public double getBeta()
    {
        net.sourceforge.plantuml.svek.image.RotatedEllipse r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.image.RotatedEllipse;

        $d0 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta>;

        return $d0;
    }

    public java.awt.geom.Point2D getPoint(double)
    {
        net.sourceforge.plantuml.svek.image.RotatedEllipse r0;
        double $d0, d1, $d2, d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, d20;
        java.awt.geom.Point2D$Double $r1;

        r0 := @this: net.sourceforge.plantuml.svek.image.RotatedEllipse;

        d1 := @parameter0: double;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double getA()>();

        $d2 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        d3 = $d0 * $d2;

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double getB()>();

        $d5 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        d6 = $d4 * $d5;

        $d7 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta>;

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d7);

        $d10 = d3 * $d8;

        $d9 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta>;

        $d11 = staticinvoke <java.lang.Math: double sin(double)>($d9);

        $d12 = d6 * $d11;

        d13 = $d10 - $d12;

        $d14 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta>;

        $d15 = staticinvoke <java.lang.Math: double sin(double)>($d14);

        $d17 = d3 * $d15;

        $d16 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta>;

        $d18 = staticinvoke <java.lang.Math: double cos(double)>($d16);

        $d19 = d6 * $d18;

        d20 = $d17 + $d19;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d13, d20);

        return $r1;
    }

    public double getOtherTheta(double)
    {
        net.sourceforge.plantuml.svek.image.RotatedEllipse r0;
        double d0, d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, d9, $d10, $d11, $d12, $d13, $d14, d15, $d16, d17, $d18, $d19;
        java.awt.geom.Point2D $r1;

        r0 := @this: net.sourceforge.plantuml.svek.image.RotatedEllipse;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: java.awt.geom.Point2D getPoint(double)>(d0);

        d1 = virtualinvoke $r1.<java.awt.geom.Point2D: double getX()>();

        $d2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double getA()>();

        $d3 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta>;

        $d4 = staticinvoke <java.lang.Math: double cos(double)>($d3);

        d5 = $d2 * $d4;

        $d6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double getB()>();

        $d7 = r0.<net.sourceforge.plantuml.svek.image.RotatedEllipse: double beta>;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        d9 = $d6 * $d8;

        $d10 = 2.0 * d5;

        $d14 = $d10 * d1;

        $d12 = d5 * d5;

        $d11 = d9 * d9;

        $d13 = $d12 + $d11;

        d15 = $d14 / $d13;

        $d16 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        d17 = d15 - $d16;

        $d18 = staticinvoke <java.lang.Math: double acos(double)>(d17);

        $d19 = neg $d18;

        return $d19;
    }

    private double other(double[], double)
    {
        double d0, $d1, $d2, d3, $d4, $d5, d6, $d7, $d8;
        double[] r0;
        byte $b0;
        net.sourceforge.plantuml.svek.image.RotatedEllipse r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.RotatedEllipse;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $d1 = r0[0];

        $d2 = d0 - $d1;

        d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d4 = r0[1];

        $d5 = d0 - $d4;

        d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $b0 = d3 cmpl d6;

        if $b0 <= 0 goto label1;

        $d8 = r0[0];

        return $d8;

     label1:
        $d7 = r0[1];

        return $d7;
    }
}
