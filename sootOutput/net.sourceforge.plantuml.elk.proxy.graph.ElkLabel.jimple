public class net.sourceforge.plantuml.elk.proxy.graph.ElkLabel extends net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty
{

    public void <init>(java.lang.Object)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r0;
        java.lang.Object r1;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: void <init>(java.lang.Object)>(r1);

        return;
    }

    public void setText(java.lang.String)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r0;
        java.lang.String r1;
        java.lang.Object $r2;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: java.lang.Object obj>;

        staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String,java.lang.Object)>($r2, "setText", r1);

        return;
    }

    public void setDimensions(double, double)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r0;
        double d0, d1;
        java.lang.Object $r1;
        java.lang.Double $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: java.lang.Object obj>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call2(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r1, "setDimensions", $r2, $r3);

        return;
    }

    public java.lang.String getText()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r0;
        java.lang.Object $r1, $r2;
        java.lang.String $r3;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getText");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public double getX()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getX");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double getY()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel r0;
        java.lang.Object $r1, $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: java.lang.Object obj>;

        $r2 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r1, "getY");

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }
}
