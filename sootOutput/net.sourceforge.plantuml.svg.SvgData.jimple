public final class net.sourceforge.plantuml.svg.SvgData extends java.lang.Object
{
    private java.lang.String svg;
    private double startX;
    private double startY;
    private double width;
    private double height;

    public static net.sourceforge.plantuml.svg.SvgData fromGraphViz(java.lang.String)
    {
        net.sourceforge.plantuml.svg.SvgData $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new net.sourceforge.plantuml.svg.SvgData;

        $r2 = staticinvoke <net.sourceforge.plantuml.svg.SvgData: java.lang.String removeSvgXmlHeader1(java.lang.String)>(r1);

        specialinvoke $r0.<net.sourceforge.plantuml.svg.SvgData: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    private void <init>(java.lang.String)
    {
        net.sourceforge.plantuml.svg.SvgData r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.svg.SvgData;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.svg.SvgData: java.lang.String svg> = r1;

        specialinvoke r0.<net.sourceforge.plantuml.svg.SvgData: void init()>();

        return;
    }

    private void <init>()
    {
        net.sourceforge.plantuml.svg.SvgData r0;

        r0 := @this: net.sourceforge.plantuml.svg.SvgData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String removeSvgXmlHeader1(java.lang.String)
    {
        java.lang.String r1, r2;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)<svg[^>]*>", "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">");

        return r2;
    }

    public net.sourceforge.plantuml.svg.SvgData mutateFromSvgTitler(java.lang.String, double, double)
    {
        net.sourceforge.plantuml.svg.SvgData $r0, r3;
        java.lang.String r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9;

        r3 := @this: net.sourceforge.plantuml.svg.SvgData;

        r2 := @parameter0: java.lang.String;

        d7 := @parameter1: double;

        d0 := @parameter2: double;

        $r0 = new net.sourceforge.plantuml.svg.SvgData;

        specialinvoke $r0.<net.sourceforge.plantuml.svg.SvgData: void <init>()>();

        $r0.<net.sourceforge.plantuml.svg.SvgData: java.lang.String svg> = r2;

        $d2 = r3.<net.sourceforge.plantuml.svg.SvgData: double startX>;

        $d1 = d0 / 2.0;

        $d3 = $d2 - $d1;

        $r0.<net.sourceforge.plantuml.svg.SvgData: double startX> = $d3;

        $d4 = r3.<net.sourceforge.plantuml.svg.SvgData: double startY>;

        $r0.<net.sourceforge.plantuml.svg.SvgData: double startY> = $d4;

        $d5 = r3.<net.sourceforge.plantuml.svg.SvgData: double width>;

        $d6 = $d5 + d0;

        $r0.<net.sourceforge.plantuml.svg.SvgData: double width> = $d6;

        $d8 = r3.<net.sourceforge.plantuml.svg.SvgData: double height>;

        $d9 = $d8 + d7;

        $r0.<net.sourceforge.plantuml.svg.SvgData: double height> = $d9;

        return $r0;
    }

    public final java.lang.String getSvg()
    {
        net.sourceforge.plantuml.svg.SvgData r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.svg.SvgData;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.svg.SvgData: java.lang.String modifiedSvgXmlHeader()>();

        return $r1;
    }

    private void init()
    {
        java.util.regex.Pattern r0;
        net.sourceforge.plantuml.svg.SvgData r1;
        java.lang.String $r2, r4, r7, $r10, $r11, $r12, $r13;
        java.util.regex.Matcher r3;
        boolean $z0, $z1;
        java.util.StringTokenizer $r5, $r8;
        double $d0, $d1, d2, d3, d4, d5, d6, d7;
        byte $b0, $b1, $b2, $b3;

        r1 := @this: net.sourceforge.plantuml.svg.SvgData;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)<polygon\\s+[^>]*points=\"([^\"]+)\"");

        $r2 = r1.<net.sourceforge.plantuml.svg.SvgData: java.lang.String svg>;

        r3 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        d4 = 1.7976931348623157E308;

        d5 = 1.7976931348623157E308;

        d6 = -1.7976931348623157E308;

        d7 = -1.7976931348623157E308;

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r4 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, " ");

     label2:
        $z1 = virtualinvoke $r5.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label7;

        r7 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r7, ",");

        $r10 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r10);

        d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r11);

        $r12 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r13 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String trin(java.lang.String)>($r12);

        d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);

        $b0 = d2 cmpg d4;

        if $b0 >= 0 goto label3;

        d4 = d2;

     label3:
        $b1 = d3 cmpg d5;

        if $b1 >= 0 goto label4;

        d5 = d3;

     label4:
        $b2 = d2 cmpl d6;

        if $b2 <= 0 goto label5;

        d6 = d2;

     label5:
        $b3 = d3 cmpl d7;

        if $b3 <= 0 goto label6;

        d7 = d3;

     label6:
        goto label2;

     label7:
        $d0 = d6 - d4;

        r1.<net.sourceforge.plantuml.svg.SvgData: double width> = $d0;

        $d1 = d7 - d5;

        r1.<net.sourceforge.plantuml.svg.SvgData: double height> = $d1;

        return;
    }

    private java.lang.String modifiedSvgXmlHeader()
    {
        java.lang.StringBuilder $r0, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        net.sourceforge.plantuml.svg.SvgData r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;
        java.lang.String $r12, $r18, $r30, $r33, $r34, $r35;

        r3 := @this: net.sourceforge.plantuml.svg.SvgData;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("style=\"width:");

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.svg.SvgData: double getWidth()>();

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";height:");

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.svg.SvgData: double getHeight()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\" ");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("width=\"");

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.svg.SvgData: double getWidth()>();

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt\" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("height=\"");

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.svg.SvgData: double getHeight()>();

        $l3 = staticinvoke <java.lang.Math: long round(double)>($d3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pt\" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("viewBox=\"");

        $d4 = r3.<net.sourceforge.plantuml.svg.SvgData: double startX>;

        $l4 = staticinvoke <java.lang.Math: long round(double)>($d4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d5 = r3.<net.sourceforge.plantuml.svg.SvgData: double startY>;

        $l5 = staticinvoke <java.lang.Math: long round(double)>($d5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d6 = virtualinvoke r3.<net.sourceforge.plantuml.svg.SvgData: double getWidth()>();

        $l6 = staticinvoke <java.lang.Math: long round(double)>($d6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d7 = virtualinvoke r3.<net.sourceforge.plantuml.svg.SvgData: double getHeight()>();

        $l7 = staticinvoke <java.lang.Math: long round(double)>($d7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r33 = r3.<net.sourceforge.plantuml.svg.SvgData: java.lang.String svg>;

        $r34 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = virtualinvoke $r33.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)<svg[^>]*>", $r34);

        return $r35;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.svg.SvgData r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svg.SvgData;

        $d0 = r0.<net.sourceforge.plantuml.svg.SvgData: double width>;

        return $d0;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.svg.SvgData r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svg.SvgData;

        $d0 = r0.<net.sourceforge.plantuml.svg.SvgData: double height>;

        return $d0;
    }
}
