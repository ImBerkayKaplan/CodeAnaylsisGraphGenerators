public class smetana.core.UnsupportedC extends java.lang.Object implements smetana.core.__ptr__
{
    public static final java.util.concurrent.atomic.AtomicInteger CPT;
    public final int UID;

    public void <init>()
    {
        smetana.core.UnsupportedC r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: smetana.core.UnsupportedC;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <smetana.core.UnsupportedC: java.util.concurrent.atomic.AtomicInteger CPT>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        r0.<smetana.core.UnsupportedC: int UID> = $i0;

        return;
    }

    public boolean isSameThan(smetana.core.__ptr__)
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.UnsupportedC r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        smetana.core.__ptr__ r4;

        r1 := @this: smetana.core.UnsupportedC;

        r4 := @parameter0: smetana.core.__ptr__;

        $r0 = new java.lang.UnsupportedOperationException;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    public smetana.core.__ptr__ castTo(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.UnsupportedC r1;
        java.lang.Class $r2, r4;
        java.lang.String $r3;

        r1 := @this: smetana.core.UnsupportedC;

        r4 := @parameter0: java.lang.Class;

        $r0 = new java.lang.UnsupportedOperationException;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    public java.lang.Object getTheField(smetana.core.OFFSET)
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.UnsupportedC r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        smetana.core.OFFSET r4;

        r1 := @this: smetana.core.UnsupportedC;

        r4 := @parameter0: smetana.core.OFFSET;

        $r0 = new java.lang.UnsupportedOperationException;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    public final smetana.core.__ptr__ unsupported()
    {
        java.lang.UnsupportedOperationException $r0;
        smetana.core.UnsupportedC r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r1 := @this: smetana.core.UnsupportedC;

        $r0 = new java.lang.UnsupportedOperationException;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <smetana.core.UnsupportedC: java.util.concurrent.atomic.AtomicInteger CPT> = $r0;

        return;
    }
}
