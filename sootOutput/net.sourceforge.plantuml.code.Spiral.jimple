public class net.sourceforge.plantuml.code.Spiral extends java.lang.Object
{
    private net.sourceforge.plantuml.code.PairInt current;
    private net.sourceforge.plantuml.code.PairInt direction;
    private int step;
    private int lim;
    private int len;
    private int cpt;

    public void <init>()
    {
        net.sourceforge.plantuml.code.Spiral r0;
        net.sourceforge.plantuml.code.PairInt $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.code.Spiral;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.code.PairInt;

        specialinvoke $r1.<net.sourceforge.plantuml.code.PairInt: void <init>(int,int)>(0, 0);

        r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt current> = $r1;

        $r2 = new net.sourceforge.plantuml.code.PairInt;

        specialinvoke $r2.<net.sourceforge.plantuml.code.PairInt: void <init>(int,int)>(1, 0);

        r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt direction> = $r2;

        r0.<net.sourceforge.plantuml.code.Spiral: int step> = 0;

        r0.<net.sourceforge.plantuml.code.Spiral: int lim> = 1;

        r0.<net.sourceforge.plantuml.code.Spiral: int len> = 1;

        r0.<net.sourceforge.plantuml.code.Spiral: int cpt> = 0;

        return;
    }

    public net.sourceforge.plantuml.code.PairInt nextPoint()
    {
        net.sourceforge.plantuml.code.Spiral r0;
        net.sourceforge.plantuml.code.PairInt r1;

        r0 := @this: net.sourceforge.plantuml.code.Spiral;

        r1 = r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt current>;

        specialinvoke r0.<net.sourceforge.plantuml.code.Spiral: void oneStep()>();

        return r1;
    }

    private void oneStep()
    {
        net.sourceforge.plantuml.code.Spiral r0;
        net.sourceforge.plantuml.code.PairInt $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: net.sourceforge.plantuml.code.Spiral;

        $r2 = r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt current>;

        $r1 = r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt direction>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.code.PairInt: net.sourceforge.plantuml.code.PairInt plus(net.sourceforge.plantuml.code.PairInt)>($r1);

        r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt current> = $r3;

        $i0 = r0.<net.sourceforge.plantuml.code.Spiral: int step>;

        $i1 = $i0 + 1;

        r0.<net.sourceforge.plantuml.code.Spiral: int step> = $i1;

        $i3 = r0.<net.sourceforge.plantuml.code.Spiral: int step>;

        $i2 = r0.<net.sourceforge.plantuml.code.Spiral: int lim>;

        if $i3 != $i2 goto label2;

        $r4 = r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt direction>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.code.PairInt: net.sourceforge.plantuml.code.PairInt rotate()>();

        r0.<net.sourceforge.plantuml.code.Spiral: net.sourceforge.plantuml.code.PairInt direction> = $r5;

        $i4 = r0.<net.sourceforge.plantuml.code.Spiral: int cpt>;

        $i5 = $i4 + 1;

        r0.<net.sourceforge.plantuml.code.Spiral: int cpt> = $i5;

        $i6 = r0.<net.sourceforge.plantuml.code.Spiral: int cpt>;

        if $i6 != 2 goto label1;

        r0.<net.sourceforge.plantuml.code.Spiral: int cpt> = 0;

        $i10 = r0.<net.sourceforge.plantuml.code.Spiral: int len>;

        $i11 = $i10 + 1;

        r0.<net.sourceforge.plantuml.code.Spiral: int len> = $i11;

     label1:
        $i8 = r0.<net.sourceforge.plantuml.code.Spiral: int lim>;

        $i7 = r0.<net.sourceforge.plantuml.code.Spiral: int len>;

        $i9 = $i8 + $i7;

        r0.<net.sourceforge.plantuml.code.Spiral: int lim> = $i9;

     label2:
        return;
    }
}
