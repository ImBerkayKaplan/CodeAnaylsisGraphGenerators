public class net.sourceforge.plantuml.svek.Ports extends java.lang.Object
{
    private final java.util.Map ids;

    public void <init>()
    {
        net.sourceforge.plantuml.svek.Ports r0;
        java.util.HashMap $r1;

        r0 := @this: net.sourceforge.plantuml.svek.Ports;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids> = $r1;

        return;
    }

    public static java.lang.String encodePortNameToId(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String r2, $r3, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p");

        $r3 = staticinvoke <net.sourceforge.plantuml.SignatureUtils: java.lang.String getMD5Hex(java.lang.String)>(r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.svek.Ports r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.svek.Ports;

        $r1 = r0.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public net.sourceforge.plantuml.svek.Ports translateY(double)
    {
        net.sourceforge.plantuml.svek.Ports $r0, r2;
        java.util.Map $r3, $r8;
        java.util.Set $r4;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6, $r9, $r11;
        java.util.Map$Entry r7;
        java.lang.String $r10;
        double d0;
        net.sourceforge.plantuml.svek.PortGeometry $r12, $r13;

        r2 := @this: net.sourceforge.plantuml.svek.Ports;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.svek.Ports;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.Ports: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = $r0.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (net.sourceforge.plantuml.svek.PortGeometry) $r11;

        $r13 = virtualinvoke $r12.<net.sourceforge.plantuml.svek.PortGeometry: net.sourceforge.plantuml.svek.PortGeometry translateY(double)>(d0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r13);

        goto label1;

     label2:
        return $r0;
    }

    public void add(java.lang.String, int, double, double)
    {
        java.lang.String r0, $r2, r3;
        java.lang.Object $r1, $r6;
        net.sourceforge.plantuml.svek.Ports r4;
        java.util.Map $r5, $r9;
        net.sourceforge.plantuml.svek.PortGeometry r7, $r8;
        double d0, d1;
        int i0, $i1;

        r4 := @this: net.sourceforge.plantuml.svek.Ports;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r2 = (java.lang.String) $r1;

        r3 = staticinvoke <net.sourceforge.plantuml.svek.Ports: java.lang.String encodePortNameToId(java.lang.String)>($r2);

        $r5 = r4.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r7 = (net.sourceforge.plantuml.svek.PortGeometry) $r6;

        if r7 == null goto label1;

        $i1 = virtualinvoke r7.<net.sourceforge.plantuml.svek.PortGeometry: int getScore()>();

        if $i1 >= i0 goto label2;

     label1:
        $r9 = r4.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r8 = new net.sourceforge.plantuml.svek.PortGeometry;

        specialinvoke $r8.<net.sourceforge.plantuml.svek.PortGeometry: void <init>(java.lang.String,double,double,int)>(r3, d0, d1, i0);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r8);

     label2:
        return;
    }

    public void addThis(net.sourceforge.plantuml.svek.Ports)
    {
        net.sourceforge.plantuml.svek.Ports r0, r8;
        java.util.Map $r1, $r9, $r12;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4, $r6, $r10, $r13, $r16;
        java.util.Map$Entry r5;
        java.lang.String r7;
        net.sourceforge.plantuml.svek.PortGeometry r11, $r14, $r17;
        int $i0, $i1;

        r8 := @this: net.sourceforge.plantuml.svek.Ports;

        r0 := @parameter0: net.sourceforge.plantuml.svek.Ports;

        $r1 = r0.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r9 = r8.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r11 = (net.sourceforge.plantuml.svek.PortGeometry) $r10;

        if r11 == null goto label2;

        $i0 = virtualinvoke r11.<net.sourceforge.plantuml.svek.PortGeometry: int getScore()>();

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (net.sourceforge.plantuml.svek.PortGeometry) $r16;

        $i1 = virtualinvoke $r17.<net.sourceforge.plantuml.svek.PortGeometry: int getScore()>();

        if $i0 >= $i1 goto label3;

     label2:
        $r12 = r8.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (net.sourceforge.plantuml.svek.PortGeometry) $r13;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r14);

     label3:
        goto label1;

     label4:
        return;
    }

    public java.util.Collection getAllPortGeometry()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.svek.Ports r1;
        java.util.Map $r2;
        java.util.Collection $r3, $r5;

        r1 := @this: net.sourceforge.plantuml.svek.Ports;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.svek.Ports: java.util.Map ids>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        $r5 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r0);

        return $r5;
    }
}
