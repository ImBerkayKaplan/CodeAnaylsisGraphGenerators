public class net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug r0;

        r0 := @this: net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dumpState(net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine, java.lang.String)
    {
        java.lang.Object[] $r0, $r9;
        java.lang.String r1;
        java.io.PrintStream $r2, $r10;
        net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine r4;
        long[] $r5, $r6, $r7, $r8;
        int $i0;
        long $l1;

        r4 := @parameter0: net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine;

        r1 := @parameter1: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("-- MARK == @ %s @ ===========\n", $r0);

        $r5 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine: long[] access$200(net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine)>(r4);

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug: void dumpArray(java.lang.String,long[])>("register t", $r5);

        $r6 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine: long[] access$300(net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine)>(r4);

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug: void dumpArray(java.lang.String,long[])>("register h", $r6);

        $r7 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine: long[] access$400(net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine)>(r4);

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug: void dumpArray(java.lang.String,long[])>("register f", $r7);

        $r8 = newarray (long)[1];

        $i0 = staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine: int access$500(net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine)>(r4);

        $l1 = (long) $i0;

        $r8[0] = $l1;

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug: void dumpArray(java.lang.String,long[])>("register offset", $r8);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = newarray (java.lang.Object)[0];

        virtualinvoke $r10.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("-- END MARK =================\n", $r9);

        return;
    }

    public static void dumpArray(java.lang.String, long[])
    {
        java.lang.Object[] $r0, $r5, $r8;
        java.lang.String r1;
        java.io.PrintStream $r2, $r6, $r9;
        long[] r4;
        int $i0, i2;
        java.lang.Integer $r10;
        long $l1;
        java.lang.Long $r11;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: long[];

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("-- %s -- :\n{\n", $r0);

        i2 = 0;

     label1:
        $i0 = lengthof r4;

        if i2 >= $i0 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r8[0] = $r10;

        $l1 = r4[i2];

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r8[1] = $r11;

        virtualinvoke $r9.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("    [%2d] : %016X\n", $r8);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("}\n", $r5);

        return;
    }

    public static void dumpBuffer(java.io.PrintStream, java.lang.String, byte[])
    {
        java.io.PrintStream r0;
        java.lang.String r1;
        byte[] r2;
        int $i0;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        $i0 = lengthof r2;

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug: void dumpBuffer(java.io.PrintStream,java.lang.String,byte[],int,int)>(r0, r1, r2, 0, $i0);

        return;
    }

    public static void dumpBuffer(java.io.PrintStream, byte[])
    {
        java.io.PrintStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug: void dumpBuffer(java.io.PrintStream,java.lang.String,byte[],int,int)>(r0, null, r1, 0, $i0);

        return;
    }

    public static void dumpBuffer(java.io.PrintStream, byte[], int, int)
    {
        java.io.PrintStream r0;
        byte[] r1;
        int i0, i1;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <net.sourceforge.plantuml.argon2.blake2.Blake2b$Engine$Debug: void dumpBuffer(java.io.PrintStream,java.lang.String,byte[],int,int)>(r0, null, r1, i0, i1);

        return;
    }

    public static void dumpBuffer(java.io.PrintStream, java.lang.String, byte[], int, int)
    {
        java.lang.String r0;
        java.io.PrintStream r1;
        java.lang.Object[] $r2, $r4, $r6, $r10;
        int i0, i1, $i2, $i4, $i5, $i6, i7;
        byte[] r7;
        byte $b3;
        java.lang.Byte $r8;

        r1 := @parameter0: java.io.PrintStream;

        r0 := @parameter1: java.lang.String;

        r7 := @parameter2: byte[];

        i1 := @parameter3: int;

        i0 := @parameter4: int;

        if r0 == null goto label1;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r0;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("-- %s -- :\n", $r10);

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("{\n    ", $r2);

        i7 = 0;

     label2:
        if i7 >= i0 goto label5;

        $r6 = newarray (java.lang.Object)[1];

        $i2 = i7 + i1;

        $b3 = r7[$i2];

        $r8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r6[0] = $r8;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("%02X", $r6);

        $i4 = i7 + 1;

        if $i4 >= i0 goto label4;

        $i5 = i7 + 1;

        $i6 = $i5 % 8;

        if $i6 != 0 goto label3;

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>("\n    ");

        goto label4;

     label3:
        virtualinvoke r1.<java.io.PrintStream: void print(char)>(32);

     label4:
        i7 = i7 + 1;

        goto label2;

     label5:
        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("\n}\n", $r4);

        return;
    }
}
