class net.sourceforge.plantuml.json.WritingBuffer extends java.io.Writer
{
    private final java.io.Writer writer;
    private final char[] buffer;
    private int fill;

    void <init>(java.io.Writer)
    {
        net.sourceforge.plantuml.json.WritingBuffer r0;
        java.io.Writer r1;

        r0 := @this: net.sourceforge.plantuml.json.WritingBuffer;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<net.sourceforge.plantuml.json.WritingBuffer: void <init>(java.io.Writer,int)>(r1, 16);

        return;
    }

    void <init>(java.io.Writer, int)
    {
        net.sourceforge.plantuml.json.WritingBuffer r0;
        java.io.Writer r1;
        int i0;
        char[] $r2;

        r0 := @this: net.sourceforge.plantuml.json.WritingBuffer;

        r1 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill> = 0;

        r0.<net.sourceforge.plantuml.json.WritingBuffer: java.io.Writer writer> = r1;

        $r2 = newarray (char)[i0];

        r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer> = $r2;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.WritingBuffer r0;
        char[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        char $c6;

        r0 := @this: net.sourceforge.plantuml.json.WritingBuffer;

        i5 := @parameter0: int;

        $i2 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        $r1 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        if $i2 <= $i1 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.json.WritingBuffer: void flush()>();

     label1:
        $r2 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i3 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        $i4 = $i3 + 1;

        r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill> = $i4;

        $c6 = (char) i5;

        $r2[$i3] = $c6;

        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.WritingBuffer r0;
        char[] $r1, r2, $r3, $r4;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8;
        java.io.Writer $r6;

        r0 := @this: net.sourceforge.plantuml.json.WritingBuffer;

        r2 := @parameter0: char[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $i3 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        $r1 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i1 = lengthof $r1;

        $i2 = $i1 - i0;

        if $i3 <= $i2 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.json.WritingBuffer: void flush()>();

        $r4 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i8 = lengthof $r4;

        if i0 <= $i8 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.json.WritingBuffer: java.io.Writer writer>;

        virtualinvoke $r6.<java.io.Writer: void write(char[],int,int)>(r2, i4, i0);

        return;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i5 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, $r3, $i5, i0);

        $i6 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        $i7 = $i6 + i0;

        r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill> = $i7;

        return;
    }

    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        net.sourceforge.plantuml.json.WritingBuffer r0;
        char[] $r1, $r3, $r4;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r2;
        java.io.Writer $r6;

        r0 := @this: net.sourceforge.plantuml.json.WritingBuffer;

        r2 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $i3 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        $r1 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i1 = lengthof $r1;

        $i2 = $i1 - i0;

        if $i3 <= $i2 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.json.WritingBuffer: void flush()>();

        $r4 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i9 = lengthof $r4;

        if i0 <= $i9 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.json.WritingBuffer: java.io.Writer writer>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String,int,int)>(r2, i4, i0);

        return;

     label1:
        $i6 = i4 + i0;

        $r3 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i5 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(i4, $i6, $r3, $i5);

        $i7 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        $i8 = $i7 + i0;

        r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill> = $i8;

        return;
    }

    public void flush() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.WritingBuffer r0;
        int $i0;
        char[] $r1;
        java.io.Writer $r2;

        r0 := @this: net.sourceforge.plantuml.json.WritingBuffer;

        $r2 = r0.<net.sourceforge.plantuml.json.WritingBuffer: java.io.Writer writer>;

        $r1 = r0.<net.sourceforge.plantuml.json.WritingBuffer: char[] buffer>;

        $i0 = r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill>;

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, 0, $i0);

        r0.<net.sourceforge.plantuml.json.WritingBuffer: int fill> = 0;

        return;
    }

    public void close() throws java.io.IOException
    {
        net.sourceforge.plantuml.json.WritingBuffer r0;

        r0 := @this: net.sourceforge.plantuml.json.WritingBuffer;

        return;
    }
}
