public class net.sourceforge.plantuml.graphic.TextBlockRecentred extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.TextBlockBackcolored
{
    private final net.sourceforge.plantuml.graphic.TextBlock textBlock;

    public void <init>(net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.graphic.TextBlockRecentred r0;
        net.sourceforge.plantuml.graphic.TextBlock r1;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockRecentred;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.TextBlock;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockRecentred: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r1;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r6;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlockRecentred r2;
        net.sourceforge.plantuml.ugraphic.MinMax r3;
        net.sourceforge.plantuml.ugraphic.UTranslate $r4;
        net.sourceforge.plantuml.graphic.TextBlock $r5;
        double $d0, $d1, $d2, $d3;

        r2 := @this: net.sourceforge.plantuml.graphic.TextBlockRecentred;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.graphic.TextBlockRecentred: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = r2.<net.sourceforge.plantuml.graphic.TextBlockRecentred: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r4 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $d1 = neg $d0;

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $d3 = neg $d2;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d1, $d3);

        $r6 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>($r6);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockRecentred r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.ugraphic.MinMax $r3;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockRecentred;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockRecentred: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockRecentred r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.ugraphic.MinMax r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockRecentred;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockRecentred: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.awt.geom.Dimension2D getDimension()>();

        return $r3;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.graphic.TextBlockRecentred r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1, $r2;
        boolean $z0;
        net.sourceforge.plantuml.svek.TextBlockBackcolored $r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockRecentred;

        $r1 = r0.<net.sourceforge.plantuml.graphic.TextBlockRecentred: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $z0 = $r1 instanceof net.sourceforge.plantuml.svek.TextBlockBackcolored;

        if $z0 == 0 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockRecentred: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r3 = (net.sourceforge.plantuml.svek.TextBlockBackcolored) $r2;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.svek.TextBlockBackcolored: net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()>();

        return $r4;

     label1:
        return null;
    }
}
