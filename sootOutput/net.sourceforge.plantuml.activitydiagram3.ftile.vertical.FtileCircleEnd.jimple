public class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd extends net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile
{
    private static final int SIZE;
    private net.sourceforge.plantuml.ugraphic.color.HColor borderColor;
    private net.sourceforge.plantuml.ugraphic.color.HColor backColor;
    private final net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlane;
    private double shadowing;

    public java.util.Collection getMyChildren()
    {
        java.util.List $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd r1;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;
    }

    public void <init>(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, net.sourceforge.plantuml.style.Style)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd r0;
        net.sourceforge.plantuml.ISkinParam r1, $r5;
        net.sourceforge.plantuml.ugraphic.color.HColor r2, r3, $r13, $r18;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.style.Style r6;
        net.sourceforge.plantuml.style.PName $r7, $r9, $r14;
        net.sourceforge.plantuml.style.Value $r8, $r10, $r15;
        double $d0;
        net.sourceforge.plantuml.api.ThemeStyle $r11, $r16;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r12, $r17;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r2 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter3: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r6 := @parameter4: net.sourceforge.plantuml.style.Style;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile: void <init>(net.sourceforge.plantuml.ISkinParam)>(r1);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = r2;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = r3;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlane> = r4;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r7 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r8 = virtualinvoke r6.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r7);

        $d0 = interfaceinvoke $r8.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: double shadowing> = $d0;

        $r9 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName BackGroundColor>;

        $r10 = virtualinvoke r6.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r9);

        $r11 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r12 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r13 = interfaceinvoke $r10.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r11, $r12);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = $r13;

        $r14 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName LineColor>;

        $r15 = virtualinvoke r6.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r14);

        $r16 = interfaceinvoke r1.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        $r18 = interfaceinvoke $r15.<net.sourceforge.plantuml.style.Value: net.sourceforge.plantuml.ugraphic.color.HColor asColor(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r16, $r17);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColor borderColor> = $r18;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $z1 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>(null);

        if $z1 == 0 goto label2;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: double shadowing> = 3.0;

     label2:
        return;
    }

    public java.util.Set getSwimlanes()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1, $r2;
        java.util.Set $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlane>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r4;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlane>;

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2);

        return $r3;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneIn()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlane>;

        return $r1;
    }

    public net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd;

        $r1 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane swimlane>;

        return $r1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        long $l0, $l1;
        net.sourceforge.plantuml.ugraphic.UEllipse $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd r2;
        double $d0, $d2, d3, $d4, d5, $d6, $d7, d10, d11;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3, $r4;
        net.sourceforge.plantuml.ugraphic.UBackground $r5;
        net.sourceforge.plantuml.ugraphic.UGraphic $r6, $r8, $r10, $r13, $r16, r18, r19, r20;
        net.sourceforge.plantuml.ugraphic.UStroke $r7, $r11;
        net.sourceforge.plantuml.ugraphic.UTranslate $r9, $r12, $r15;
        net.sourceforge.plantuml.ugraphic.ULine $r14, $r17;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd;

        r18 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $l0 = staticinvoke <java.lang.Math: long round(double)>(0.0);

        d10 = (double) $l0;

        $l1 = staticinvoke <java.lang.Math: long round(double)>(0.0);

        d11 = (double) $l1;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(20.0, 20.0);

        $d0 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: double shadowing>;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d0);

        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColor borderColor>;

        r19 = interfaceinvoke r18.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $r4 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: net.sourceforge.plantuml.ugraphic.color.HColor backColor>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r6 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r7 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r7.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        $r8 = interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        $r9 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d10, d11);

        $r10 = interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r9);

        interfaceinvoke $r10.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        d3 = 17.5 / $d2;

        $d4 = 20.0 - d3;

        d5 = $d4 / 2.0;

        $r11 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r11.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(2.5);

        r20 = interfaceinvoke r19.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r11);

        $r12 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        specialinvoke $r12.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d5, d5);

        $r13 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r12);

        $r14 = new net.sourceforge.plantuml.ugraphic.ULine;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(d3, d3);

        interfaceinvoke $r13.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r14);

        $r15 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d6 = 20.0 - d5;

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(d5, $d6);

        $r16 = interfaceinvoke r20.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r15);

        $r17 = new net.sourceforge.plantuml.ugraphic.ULine;

        $d7 = neg d3;

        specialinvoke $r17.<net.sourceforge.plantuml.ugraphic.ULine: void <init>(double,double)>(d3, $d7);

        interfaceinvoke $r16.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r17);

        return;
    }

    protected net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimensionFtile(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry;

        specialinvoke $r0.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: void <init>(double,double,double,double)>(20.0, 20.0, 10.0, 0.0);

        return $r0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd: int SIZE> = 20;

        return;
    }
}
