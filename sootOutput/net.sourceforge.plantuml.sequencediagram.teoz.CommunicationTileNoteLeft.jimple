public class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft extends net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
{
    private final net.sourceforge.plantuml.sequencediagram.teoz.Tile tile;
    private final net.sourceforge.plantuml.sequencediagram.AbstractMessage message;
    private final net.sourceforge.plantuml.skin.rose.Rose skin;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace;
    private final net.sourceforge.plantuml.sequencediagram.Note noteOnMessage;

    public net.sourceforge.plantuml.sequencediagram.Event getEvent()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.AbstractMessage message>;

        return $r1;
    }

    public double getContactPointRelative()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $d0 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getContactPointRelative()>();

        return $d0;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.teoz.Tile, net.sourceforge.plantuml.sequencediagram.AbstractMessage, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace, net.sourceforge.plantuml.sequencediagram.Note)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r1;
        net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile $r2;
        net.sourceforge.plantuml.graphic.StringBounder $r3;
        net.sourceforge.plantuml.sequencediagram.AbstractMessage r4;
        net.sourceforge.plantuml.skin.rose.Rose r5;
        net.sourceforge.plantuml.ISkinParam r6;
        net.sourceforge.plantuml.sequencediagram.Note r7;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.AbstractMessage;

        r5 := @parameter2: net.sourceforge.plantuml.skin.rose.Rose;

        r6 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        r8 := @parameter4: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r7 := @parameter5: net.sourceforge.plantuml.sequencediagram.Note;

        $r2 = (net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile) r1;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile: void <init>(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.AbstractMessage message> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.skin.rose.Rose skin> = r5;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.ISkinParam skinParam> = r6;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage> = r7;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace> = r8;

        return;
    }

    protected final void callbackY_internal(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        double d0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void callbackY(double)>(d0);

        return;
    }

    private net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.sequencediagram.Note $r1, $r5, $r8;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r7;
        net.sourceforge.plantuml.skin.ComponentType $r6;
        net.sourceforge.plantuml.cucadiagram.Display $r9;
        net.sourceforge.plantuml.skin.Component r10;
        net.sourceforge.plantuml.graphic.StringBounder r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        r11 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.skin.rose.Rose skin>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.ISkinParam getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r4);

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.Note noteOnMessage>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.sequencediagram.Note: net.sourceforge.plantuml.cucadiagram.Display getStrings()>();

        r10 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponentNote(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r6, $r7, $r9);

        return r10;
    }

    private net.sourceforge.plantuml.real.Real getNotePosition(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace $r4;
        net.sourceforge.plantuml.real.Real $r5, $r6;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r3 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace livingSpace>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = neg $d0;

        $r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d1);

        return $r6;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0, $r11;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r2;
        net.sourceforge.plantuml.skin.Component r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.skin.Area $r5;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r7;
        net.sourceforge.plantuml.graphic.UDrawable $r8;
        net.sourceforge.plantuml.real.Real r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r10;
        net.sourceforge.plantuml.skin.Context2D $r12;

        r2 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r3 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        r4 = interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r5 = new net.sourceforge.plantuml.skin.Area;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        specialinvoke $r5.<net.sourceforge.plantuml.skin.Area: void <init>(double,double)>($d0, $d1);

        $r7 = r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r8 = (net.sourceforge.plantuml.graphic.UDrawable) $r7;

        interfaceinvoke $r8.<net.sourceforge.plantuml.graphic.UDrawable: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r0);

        r9 = specialinvoke r2.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.real.Real getNotePosition(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = interfaceinvoke r9.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d2);

        $r11 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r10);

        $r12 = (net.sourceforge.plantuml.skin.Context2D) r0;

        interfaceinvoke r3.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>($r11, $r5, $r12);

        return;
    }

    public double getPreferredHeight()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1, $r3;
        net.sourceforge.plantuml.skin.Component r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r5;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.skin.Component getComponent(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r4 = interfaceinvoke r2.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r3);

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $d0 = interfaceinvoke $r5.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: double getPreferredHeight()>();

        $d1 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        return $d2;
    }

    public void addConstraints()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: void addConstraints()>();

        return;
    }

    public net.sourceforge.plantuml.real.Real getMinX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.graphic.StringBounder $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.real.Real getNotePosition(net.sourceforge.plantuml.graphic.StringBounder)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getMaxX()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile $r1;
        net.sourceforge.plantuml.real.Real $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft: net.sourceforge.plantuml.sequencediagram.teoz.Tile tile>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.real.Real getMaxX()>();

        return $r2;
    }
}
