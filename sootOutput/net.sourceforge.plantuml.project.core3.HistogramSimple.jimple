public class net.sourceforge.plantuml.project.core3.HistogramSimple extends java.lang.Object implements net.sourceforge.plantuml.project.core3.Histogram
{
    private final java.util.Map events;

    public void <init>()
    {
        net.sourceforge.plantuml.project.core3.HistogramSimple r0;
        java.util.TreeMap $r1;

        r0 := @this: net.sourceforge.plantuml.project.core3.HistogramSimple;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: java.util.Map events> = $r1;

        return;
    }

    public long getNext(long)
    {
        net.sourceforge.plantuml.project.core3.HistogramSimple r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Long $r4, $r6;
        long $l0, l1, l2;
        java.lang.Object $r5;
        byte $b3;

        r0 := @this: net.sourceforge.plantuml.project.core3.HistogramSimple;

        l2 := @parameter0: long;

        $r1 = r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: java.util.Map events>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Long) $r5;

        l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $b3 = l1 cmp l2;

        if $b3 <= 0 goto label2;

        return l1;

     label2:
        goto label1;

     label3:
        $r4 = <net.sourceforge.plantuml.project.core3.TimeLine: java.lang.Long MAX_TIME>;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public long getPrevious(long)
    {
        java.lang.Long $r0, $r6;
        long $l0, l1, l2, l4;
        net.sourceforge.plantuml.project.core3.HistogramSimple r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        byte $b3;

        r1 := @this: net.sourceforge.plantuml.project.core3.HistogramSimple;

        l2 := @parameter0: long;

        $r0 = <net.sourceforge.plantuml.project.core3.TimeLine: java.lang.Long MAX_TIME>;

        $l0 = virtualinvoke $r0.<java.lang.Long: long longValue()>();

        l4 = neg $l0;

        $r2 = r1.<net.sourceforge.plantuml.project.core3.HistogramSimple: java.util.Map events>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Long) $r5;

        l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $b3 = l1 cmp l2;

        if $b3 < 0 goto label2;

        return l4;

     label2:
        l4 = l1;

        goto label1;

     label3:
        return l4;
    }

    public void put(long, long)
    {
        net.sourceforge.plantuml.project.core3.HistogramSimple r0;
        long l0, l1;
        java.util.Map $r1;
        java.lang.Long $r2, $r3;

        r0 := @this: net.sourceforge.plantuml.project.core3.HistogramSimple;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: java.util.Map events>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.project.core3.HistogramSimple r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.project.core3.HistogramSimple;

        $r1 = r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: java.util.Map events>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public long getValueAt(long)
    {
        net.sourceforge.plantuml.project.core3.HistogramSimple r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4, $r6, $r8;
        java.util.Map$Entry r5;
        java.lang.Long $r7, $r9;
        long $l0, l1, l3;
        byte $b2;

        r0 := @this: net.sourceforge.plantuml.project.core3.HistogramSimple;

        l1 := @parameter0: long;

        l3 = 0L;

        $r1 = r0.<net.sourceforge.plantuml.project.core3.HistogramSimple: java.util.Map events>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $b2 = $l0 cmp l1;

        if $b2 <= 0 goto label2;

        return l3;

     label2:
        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Long) $r8;

        l3 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        goto label1;

     label3:
        return l3;
    }
}
