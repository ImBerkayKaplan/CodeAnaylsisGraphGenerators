class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline extends net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection
{
    private final net.sourceforge.plantuml.graphic.Rainbow arrowColor;
    final net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0;

    public void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal, net.sourceforge.plantuml.graphic.Rainbow)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal r1;
        net.sourceforge.plantuml.graphic.Rainbow r2;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r1 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.Rainbow;

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0> = r1;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection: void <init>(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Ftile)>(null, null);

        r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.graphic.Rainbow arrowColor> = r2;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UGraphic r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal $r3, $r6, $r9, $r11;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r4;
        java.util.ArrayList $r5;
        java.util.List $r7, r17;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile $r10;
        boolean $z1, $z2, $z3;
        double $d0, d1, $d2, $d3, $d4, d5;
        net.sourceforge.plantuml.ISkinParam $r12;
        net.sourceforge.plantuml.graphic.Rainbow $r13;
        net.sourceforge.plantuml.activitydiagram3.ftile.Snake $r14, r16;
        net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy $r15;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r18;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane r19;
        double[] r20;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r1 = interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r3 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0>;

        r4 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry access$300(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal,net.sourceforge.plantuml.graphic.StringBounder)>($r3, r1);

        $r5 = new java.util.ArrayList;

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0>;

        $r7 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal: java.util.List access$700(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal)>($r6);

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        $r9 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0>;

        $r10 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile access$400(net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal)>($r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10);

        $z1 = r0 instanceof net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane;

        if $z1 == 0 goto label1;

        r19 = (net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane) r0;

        r17 = virtualinvoke r19.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane: java.util.List getOrderedListOfAllSwimlanes()>();

        $d4 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $r18 = virtualinvoke r19.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlane()>();

        r20 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: double[] getMinmax(net.sourceforge.plantuml.graphic.StringBounder,double,java.util.List,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane,java.util.List)>(r1, $d4, $r5, $r18, r17);

        goto label2;

     label1:
        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        r20 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: double[] getMinmaxSimple(net.sourceforge.plantuml.graphic.StringBounder,double,java.util.List)>(r1, $d0, $r5);

     label2:
        d5 = r20[0];

        d1 = r20[1];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5);

        if $z2 != 0 goto label3;

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z3 == 0 goto label4;

     label3:
        return;

     label4:
        $r11 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0>;

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r13 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.graphic.Rainbow arrowColor>;

        $r14 = staticinvoke <net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake create(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.graphic.Rainbow)>($r12, $r13);

        $r15 = <net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy: net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy NONE>;

        r16 = virtualinvoke $r14.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: net.sourceforge.plantuml.activitydiagram3.ftile.Snake withMerge(net.sourceforge.plantuml.activitydiagram3.ftile.MergeStrategy)>($r15);

        $d2 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r16.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d5, $d2);

        $d3 = virtualinvoke r4.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        virtualinvoke r16.<net.sourceforge.plantuml.activitydiagram3.ftile.Snake: void addPoint(double,double)>(d1, $d3);

        interfaceinvoke r0.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r16);

        return;
    }

    private java.lang.Double getLeftOut(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry r3;
        boolean $z0;
        double $d0;
        java.lang.Double $r4;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0>;

        r3 = virtualinvoke $r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r4;

     label1:
        return null;
    }

    private double[] getMinmax(net.sourceforge.plantuml.graphic.StringBounder, double, java.util.List, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, java.util.List)
    {
        java.util.List r0, r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r1;
        int i0, i1, i2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.lang.Double r4;
        double[] $r6, $r8, $r17;
        double d0, $d1, $d2, d3, $d4, d5, $d6, d8, d9;
        java.util.Iterator r7;
        java.lang.Object $r9;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r10;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r11, $r14, $r15;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal $r12;
        net.sourceforge.plantuml.ugraphic.UTranslate r13;
        java.lang.IllegalStateException $r16;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        r5 := @parameter2: java.util.List;

        r1 := @parameter3: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r0 := @parameter4: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int indexOf(java.lang.Object)>(r1);

        r4 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: java.lang.Double getLeftOut(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        if r4 != null goto label01;

        $r17 = newarray (double)[2];

        $r17[0] = #NaN;

        $r17[1] = #NaN;

        return $r17;

     label01:
        if i0 != -1 goto label02;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>()>();

        throw $r16;

     label02:
        i1 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: int getFirstSwimlane(net.sourceforge.plantuml.graphic.StringBounder,java.util.List,java.util.List)>(r3, r5, r0);

        i2 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: int getLastSwimlane(net.sourceforge.plantuml.graphic.StringBounder,java.util.List,java.util.List)>(r3, r5, r0);

        if i0 < i1 goto label03;

        if i0 <= i2 goto label04;

     label03:
        $r6 = newarray (double)[2];

        $r6[0] = #NaN;

        $r6[1] = #NaN;

        return $r6;

     label04:
        if i0 == i1 goto label05;

        $d4 = 0.0;

        goto label06;

     label05:
        $d4 = d0;

     label06:
        d5 = $d4;

        if i0 == i2 goto label07;

        $d6 = d0;

        goto label08;

     label07:
        $d6 = 0.0;

     label08:
        $d1 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        d8 = staticinvoke <java.lang.Math: double min(double,double)>(d5, $d1);

        $d2 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        d9 = staticinvoke <java.lang.Math: double max(double,double)>($d6, $d2);

        r7 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r9;

        $r11 = interfaceinvoke r10.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $z0 = virtualinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 != 0 goto label10;

        goto label09;

     label10:
        $z1 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: boolean ftileDoesOutcomeInThatSwimlane(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>(r10, r1);

        if $z1 != 0 goto label11;

        goto label09;

     label11:
        $r12 = r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0>;

        r13 = virtualinvoke $r12.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.graphic.StringBounder)>(r10, r3);

        $r14 = interfaceinvoke r10.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r15 = virtualinvoke $r14.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry translate(net.sourceforge.plantuml.ugraphic.UTranslate)>(r13);

        d3 = virtualinvoke $r15.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d8 = staticinvoke <java.lang.Math: double min(double,double)>(d8, d3);

        d9 = staticinvoke <java.lang.Math: double max(double,double)>(d9, d3);

        goto label09;

     label12:
        $r8 = newarray (double)[2];

        $r8[0] = d8;

        $r8[1] = d9;

        return $r8;
    }

    private double[] getMinmaxSimple(net.sourceforge.plantuml.graphic.StringBounder, double, java.util.List)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        java.lang.Double r2;
        double d0, $d1, $d2, d3, d4, d5, d6, d7;
        java.util.List r3;
        java.util.Iterator r4;
        double[] $r5, $r13;
        java.lang.Object $r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r8, $r11, $r12;
        boolean $z0, $z1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate r10;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        d0 := @parameter1: double;

        r3 := @parameter2: java.util.List;

        r2 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: java.lang.Double getLeftOut(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        if r2 != null goto label1;

        $r13 = newarray (double)[2];

        $r13[0] = #NaN;

        $r13[1] = #NaN;

        return $r13;

     label1:
        d4 = d0 / 2.0;

        d5 = d0 / 2.0;

        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d6 = staticinvoke <java.lang.Math: double min(double,double)>(d4, $d1);

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d7 = staticinvoke <java.lang.Math: double max(double,double)>(d5, $d2);

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r6;

        $r8 = interfaceinvoke r7.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $z0 = virtualinvoke $r8.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z0 != 0 goto label3;

        goto label2;

     label3:
        $r9 = r0.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal this$0>;

        r10 = virtualinvoke $r9.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal: net.sourceforge.plantuml.ugraphic.UTranslate getTranslateFor(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.graphic.StringBounder)>(r7, r1);

        $r11 = interfaceinvoke r7.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry translate(net.sourceforge.plantuml.ugraphic.UTranslate)>(r10);

        d3 = virtualinvoke $r12.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: double getLeft()>();

        d6 = staticinvoke <java.lang.Math: double min(double,double)>(d6, d3);

        d7 = staticinvoke <java.lang.Math: double max(double,double)>(d7, d3);

        goto label2;

     label4:
        $r5 = newarray (double)[2];

        $r5[0] = d6;

        $r5[1] = d7;

        return $r5;
    }

    private int getFirstSwimlane(net.sourceforge.plantuml.graphic.StringBounder, java.util.List, java.util.List)
    {
        java.util.List r0, r5;
        int $i0, i1;
        java.lang.IllegalStateException $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r6;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: java.util.List;

        r0 := @parameter2: java.util.List;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane) $r4;

        $z0 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: boolean atLeastOne(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane,java.util.List)>(r3, $r6, r5);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    private int getLastSwimlane(net.sourceforge.plantuml.graphic.StringBounder, java.util.List, java.util.List)
    {
        java.util.List r0, r5;
        int $i0, i1;
        java.lang.IllegalStateException $r1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        java.lang.Object $r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r6;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r5 := @parameter1: java.util.List;

        r0 := @parameter2: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane) $r4;

        $z0 = specialinvoke r2.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: boolean atLeastOne(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane,java.util.List)>(r3, $r6, r5);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    private boolean atLeastOne(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane, java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r3;
        net.sourceforge.plantuml.graphic.StringBounder r4;
        net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry $r5;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r6;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r7;

        r6 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r7 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        r0 := @parameter2: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (net.sourceforge.plantuml.activitydiagram3.ftile.Ftile) $r2;

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r4);

        $z1 = virtualinvoke $r5.<net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry: boolean hasPointOut()>();

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r6.<net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline: boolean ftileDoesOutcomeInThatSwimlane(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>(r3, r7);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean ftileDoesOutcomeInThatSwimlane(net.sourceforge.plantuml.activitydiagram3.ftile.Ftile, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)
    {
        net.sourceforge.plantuml.activitydiagram3.ftile.Ftile r0;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane $r1, r2;
        java.util.Set $r3;
        boolean $z0, $z1;
        net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline r4;

        r4 := @this: net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal$ConnectionHline;

        r0 := @parameter0: net.sourceforge.plantuml.activitydiagram3.ftile.Ftile;

        r2 := @parameter1: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        $r1 = interfaceinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane getSwimlaneOut()>();

        if $r1 != r2 goto label1;

        $r3 = interfaceinvoke r0.<net.sourceforge.plantuml.activitydiagram3.ftile.Ftile: java.util.Set getSwimlanes()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
