class net.sourceforge.plantuml.api.TimeoutExecutor$MyThread extends java.lang.Thread
{
    private final net.sourceforge.plantuml.api.MyRunnable task;
    private final java.util.concurrent.atomic.AtomicBoolean done;
    final net.sourceforge.plantuml.api.TimeoutExecutor this$0;

    private void <init>(net.sourceforge.plantuml.api.TimeoutExecutor, net.sourceforge.plantuml.api.MyRunnable)
    {
        net.sourceforge.plantuml.api.TimeoutExecutor$MyThread r0;
        net.sourceforge.plantuml.api.TimeoutExecutor r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        net.sourceforge.plantuml.api.MyRunnable r3;

        r0 := @this: net.sourceforge.plantuml.api.TimeoutExecutor$MyThread;

        r1 := @parameter0: net.sourceforge.plantuml.api.TimeoutExecutor;

        r3 := @parameter1: net.sourceforge.plantuml.api.MyRunnable;

        r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: net.sourceforge.plantuml.api.TimeoutExecutor this$0> = r1;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: java.util.concurrent.atomic.AtomicBoolean done> = $r2;

        r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: net.sourceforge.plantuml.api.MyRunnable task> = r3;

        return;
    }

    public void run()
    {
        net.sourceforge.plantuml.api.TimeoutExecutor$MyThread r0;
        net.sourceforge.plantuml.api.MyRunnable $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.lang.InterruptedException $r3;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.io.PrintStream $r6;
        java.lang.String $r9;

        r0 := @this: net.sourceforge.plantuml.api.TimeoutExecutor$MyThread;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: net.sourceforge.plantuml.api.MyRunnable task>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.api.MyRunnable: void runJob()>();

        $r2 = r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: java.util.concurrent.atomic.AtomicBoolean done>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TimeoutExecutorB ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    void <init>(net.sourceforge.plantuml.api.TimeoutExecutor, net.sourceforge.plantuml.api.MyRunnable, net.sourceforge.plantuml.api.TimeoutExecutor$1)
    {
        net.sourceforge.plantuml.api.TimeoutExecutor$MyThread r0;
        net.sourceforge.plantuml.api.TimeoutExecutor r1;
        net.sourceforge.plantuml.api.MyRunnable r2;
        net.sourceforge.plantuml.api.TimeoutExecutor$1 r3;

        r0 := @this: net.sourceforge.plantuml.api.TimeoutExecutor$MyThread;

        r1 := @parameter0: net.sourceforge.plantuml.api.TimeoutExecutor;

        r2 := @parameter1: net.sourceforge.plantuml.api.MyRunnable;

        r3 := @parameter2: net.sourceforge.plantuml.api.TimeoutExecutor$1;

        specialinvoke r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: void <init>(net.sourceforge.plantuml.api.TimeoutExecutor,net.sourceforge.plantuml.api.MyRunnable)>(r1, r2);

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$100(net.sourceforge.plantuml.api.TimeoutExecutor$MyThread)
    {
        net.sourceforge.plantuml.api.TimeoutExecutor$MyThread r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: net.sourceforge.plantuml.api.TimeoutExecutor$MyThread;

        $r1 = r0.<net.sourceforge.plantuml.api.TimeoutExecutor$MyThread: java.util.concurrent.atomic.AtomicBoolean done>;

        return $r1;
    }
}
