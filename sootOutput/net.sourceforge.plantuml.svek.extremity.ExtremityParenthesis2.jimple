class net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2 extends net.sourceforge.plantuml.svek.extremity.Extremity
{
    private final java.awt.geom.Point2D contact;
    private final java.awt.geom.Point2D center;
    private final double ortho;
    private final double ang;

    public void <init>(java.awt.geom.Point2D, double, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2 r0;
        java.awt.geom.Point2D$Double $r1, $r4;
        java.awt.geom.Point2D r2, r3;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, d8, $d9, d10, $d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        long $l0, $l1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2;

        r2 := @parameter0: java.awt.geom.Point2D;

        d2 := @parameter1: double;

        r3 := @parameter2: java.awt.geom.Point2D;

        specialinvoke r0.<net.sourceforge.plantuml.svek.extremity.Extremity: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: double ang> = 30.0;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: double ang> = 30.0;

        $r1 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: java.awt.geom.Point2D contact> = $r1;

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: double ortho> = d2;

        $d3 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d4 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        d5 = $d3 - $d4;

        $d6 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d7 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        d8 = $d6 - $d7;

        $d9 = virtualinvoke r2.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>(r3);

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d9);

        d10 = (double) $l0;

        $d11 = d10 + 7.0;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d11);

        d12 = (double) $l1;

        $r4 = new java.awt.geom.Point2D$Double;

        $d13 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $d14 = d5 / d10;

        $d15 = $d14 * d12;

        $d16 = $d13 + $d15;

        $d17 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $d18 = d8 / d10;

        $d19 = $d18 * d12;

        $d20 = $d17 + $d19;

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d16, $d20);

        r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: java.awt.geom.Point2D center> = $r4;

        return;
    }

    public java.awt.geom.Point2D somePoint()
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2 r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: java.awt.geom.Point2D contact>;

        return $r1;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2 r0;
        double $d0, $d1, $d2, $d3, $d4, d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13;
        java.awt.geom.Point2D $r1, $r2, $r7, $r8;
        long $l0;
        net.sourceforge.plantuml.ugraphic.UEllipse $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r5, $r9;
        net.sourceforge.plantuml.ugraphic.UTranslate $r6;

        r0 := @this: net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $d0 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: double ortho>;

        $d1 = neg $d0;

        $d2 = $d1 * 180.0;

        $d3 = $d2 / 3.141592653589793;

        $d4 = $d3 + 90.0;

        d5 = $d4 - 30.0;

        $r2 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: java.awt.geom.Point2D contact>;

        $r1 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: java.awt.geom.Point2D center>;

        $d6 = virtualinvoke $r2.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r1);

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d6);

        d7 = (double) $l0;

        $r3 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        $d9 = d7 * 2.0;

        $d8 = d7 * 2.0;

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double,double,double)>($d9, $d8, d5, 60.0);

        $r6 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $r7 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: java.awt.geom.Point2D center>;

        $d10 = virtualinvoke $r7.<java.awt.geom.Point2D: double getX()>();

        $d11 = $d10 - d7;

        $r8 = r0.<net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2: java.awt.geom.Point2D center>;

        $d12 = virtualinvoke $r8.<java.awt.geom.Point2D: double getY()>();

        $d13 = $d12 - d7;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d11, $d13);

        $r9 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r6);

        interfaceinvoke $r9.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r3);

        return;
    }
}
