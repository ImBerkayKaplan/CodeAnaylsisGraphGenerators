public class net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader extends net.sourceforge.plantuml.asciiart.AbstractComponentText
{
    private final net.sourceforge.plantuml.skin.ComponentType type;
    private final net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay;
    private final net.sourceforge.plantuml.FileFormat fileFormat;

    public void <init>(net.sourceforge.plantuml.skin.ComponentType, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.FileFormat)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader r0;
        net.sourceforge.plantuml.skin.ComponentType r1;
        net.sourceforge.plantuml.cucadiagram.Display r2;
        net.sourceforge.plantuml.FileFormat r3;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader;

        r1 := @parameter0: net.sourceforge.plantuml.skin.ComponentType;

        r2 := @parameter1: net.sourceforge.plantuml.cucadiagram.Display;

        r3 := @parameter2: net.sourceforge.plantuml.FileFormat;

        specialinvoke r0.<net.sourceforge.plantuml.asciiart.AbstractComponentText: void <init>()>();

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.skin.ComponentType type> = r1;

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay> = r2;

        r0.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.FileFormat fileFormat> = r3;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Area, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.skin.Area r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt $r3;
        net.sourceforge.plantuml.asciiart.UmlCharArea r4;
        double $d0, $d1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader r5;
        net.sourceforge.plantuml.cucadiagram.Display $r6, $r16, $r17, $r19;
        java.lang.CharSequence $r7, $r18, $r20;
        java.lang.String r8, $r12, $r15, r21, $r23, $r26;
        net.sourceforge.plantuml.FileFormat $r9, $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r22, $r24, $r25;
        net.sourceforge.plantuml.skin.Context2D r27;

        r5 := @this: net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r0 := @parameter1: net.sourceforge.plantuml.skin.Area;

        r27 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.skin.Area: net.sourceforge.plantuml.awt.geom.Dimension2D getDimensionToUse()>();

        $r3 = (net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt) r2;

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt: net.sourceforge.plantuml.asciiart.UmlCharArea getCharArea()>();

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        i0 = (int) $d0;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        i1 = (int) $d1;

        $r6 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(0);

        r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>();

        $r10 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.FileFormat fileFormat>;

        $r9 = <net.sourceforge.plantuml.FileFormat: net.sourceforge.plantuml.FileFormat UTXT>;

        if $r10 != $r9 goto label1;

        $i13 = i0 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int,char,char)>(9552, 0, 1, $i13, 9474, 9578);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goUpperCase(java.lang.String)>(r8);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  /");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringLR(java.lang.String,int,int)>($r26, 2, 1);

        $i14 = virtualinvoke r8.<java.lang.String: int length()>();

        $i15 = $i14 + 4;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(9472, 2, 1, $i15);

        $i16 = i1 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawVLine(char,int,int,int)>(9553, 0, 1, $i16);

        $i18 = i0 - 1;

        $i17 = i1 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawVLine(char,int,int,int)>(9553, $i18, 1, $i17);

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawChar(char,int,int)>(9567, 0, 2);

        $i19 = virtualinvoke r8.<java.lang.String: int length()>();

        $i20 = $i19 + 4;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringTB(java.lang.String,int,int)>("\u2564\u2502\u2518", $i20, 0);

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawChar(char,int,int)>(9556, 0, 0);

        $i21 = i0 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawChar(char,int,int)>(9559, $i21, 0);

        $i23 = i1 - 1;

        $i22 = i0 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int,char,char)>(9552, $i23, 1, $i22, 9474, 9578);

        $i24 = i1 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawChar(char,int,int)>(9562, 0, $i24);

        $i26 = i0 - 1;

        $i25 = i1 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawChar(char,int,int)>(9565, $i26, $i25);

        goto label2;

     label1:
        $i2 = i0 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(95, 0, 0, $i2);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String goUpperCase(java.lang.String)>(r8);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  /");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringLR(java.lang.String,int,int)>($r15, 2, 1);

        $i3 = virtualinvoke r8.<java.lang.String: int length()>();

        $i4 = $i3 + 3;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(95, 2, 1, $i4);

        $i5 = virtualinvoke r8.<java.lang.String: int length()>();

        $i6 = $i5 + 3;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawChar(char,int,int)>(47, $i6, 2);

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawVLine(char,int,int,int)>(33, 0, 1, i1);

        $i7 = i0 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawVLine(char,int,int,int)>(33, $i7, 1, i1);

        $i9 = i1 - 1;

        $i8 = i0 - 1;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawHLine(char,int,int,int)>(126, $i9, 1, $i8);

     label2:
        $r16 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $i10 = virtualinvoke $r16.<net.sourceforge.plantuml.cucadiagram.Display: int size()>();

        if $i10 <= 1 goto label3;

        $r17 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(1);

        if $r18 == null goto label3;

        $r19 = r5.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $r20 = virtualinvoke $r19.<net.sourceforge.plantuml.cucadiagram.Display: java.lang.CharSequence get(int)>(1);

        r21 = interfaceinvoke $r20.<java.lang.CharSequence: java.lang.String toString()>();

        $i11 = virtualinvoke r8.<java.lang.String: int length()>();

        $i12 = $i11 + 7;

        interfaceinvoke r4.<net.sourceforge.plantuml.asciiart.UmlCharArea: void drawStringLR(java.lang.String,int,int)>(r21, $i12, 1);

     label3:
        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        int $i0, $i1;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $i0 = staticinvoke <net.sourceforge.plantuml.StringUtils: int getHeight(net.sourceforge.plantuml.cucadiagram.Display)>($r1);

        $i1 = $i0 + 1;

        $d0 = (double) $i1;

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader r0;
        net.sourceforge.plantuml.cucadiagram.Display $r1;
        int $i0, $i1;
        double $d0;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader: net.sourceforge.plantuml.cucadiagram.Display stringsToDisplay>;

        $i0 = staticinvoke <net.sourceforge.plantuml.StringUtils: int getWcWidth(net.sourceforge.plantuml.cucadiagram.Display)>($r1);

        $i1 = $i0 + 2;

        $d0 = (double) $i1;

        return $d0;
    }
}
