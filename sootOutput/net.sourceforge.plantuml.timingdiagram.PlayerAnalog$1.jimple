class net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1 extends net.sourceforge.plantuml.graphic.AbstractTextBlock
{
    final double val$fullAvailableWidth;
    final double val$specialVSpace;
    final net.sourceforge.plantuml.timingdiagram.PlayerAnalog this$0;

    void <init>(net.sourceforge.plantuml.timingdiagram.PlayerAnalog, double, double)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1 r0;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog r1;
        double d0, d1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1;

        r1 := @parameter0: net.sourceforge.plantuml.timingdiagram.PlayerAnalog;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: net.sourceforge.plantuml.timingdiagram.PlayerAnalog this$0> = r1;

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: double val$fullAvailableWidth> = d0;

        r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: double val$specialVSpace> = d1;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1 r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        double $d0, $d1;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog $r2;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r2 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: net.sourceforge.plantuml.timingdiagram.PlayerAnalog this$0>;

        $d1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: double val$fullAvailableWidth>;

        $d0 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: double val$specialVSpace>;

        staticinvoke <net.sourceforge.plantuml.timingdiagram.PlayerAnalog: void access$000(net.sourceforge.plantuml.timingdiagram.PlayerAnalog,net.sourceforge.plantuml.ugraphic.UGraphic,double,double)>($r2, r1, $d1, $d0);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1 r0;
        net.sourceforge.plantuml.timingdiagram.PlayerAnalog $r1, $r5;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        net.sourceforge.plantuml.awt.geom.Dimension2D r4, $r6;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: net.sourceforge.plantuml.timingdiagram.PlayerAnalog this$0>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog: net.sourceforge.plantuml.graphic.TextBlock getTitle()>();

        r4 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r5 = r0.<net.sourceforge.plantuml.timingdiagram.PlayerAnalog$1: net.sourceforge.plantuml.timingdiagram.PlayerAnalog this$0>;

        $d0 = staticinvoke <net.sourceforge.plantuml.timingdiagram.PlayerAnalog: double access$100(net.sourceforge.plantuml.timingdiagram.PlayerAnalog,net.sourceforge.plantuml.graphic.StringBounder)>($r5, r3);

        $d1 = 5.0 + $d0;

        $r6 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r4, $d1, 0.0);

        return $r6;
    }
}
