public class net.sourceforge.plantuml.eps.EpsGraphics extends java.lang.Object
{
    public static final java.lang.String END_OF_FILE;
    protected static final long COEF;
    private final java.lang.StringBuilder body;
    private final java.lang.StringBuilder header;
    private java.awt.Color color;
    private java.awt.Color fillcolor;
    private java.lang.String strokeWidth;
    private final net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient;
    private final net.sourceforge.plantuml.eps.PostScriptCommandMacro simplerect;
    private final net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect;
    private boolean setcolorgradientUsed;
    private boolean simplerectUsed;
    private boolean roundrectUsed;
    private boolean closeDone;
    private int maxX;
    private int maxY;
    private long dashVisible;
    private long dashSpace;
    private net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea;
    private final net.sourceforge.plantuml.ugraphic.ShadowManager shadowManager;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r2, $r10, $r12, $r13, $r14, $r16, $r17, $r20;
        java.awt.Color $r3, $r4;
        java.lang.String $r5, $r15, $r18;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r6, $r7, $r8, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49;
        net.sourceforge.plantuml.ugraphic.ShadowManager $r9;
        net.sourceforge.plantuml.eps.PostScriptCommandRaw $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder body> = $r1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header> = $r2;

        $r3 = <java.awt.Color: java.awt.Color BLACK>;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color> = $r3;

        $r4 = <java.awt.Color: java.awt.Color BLACK>;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor> = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(1.0);

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth> = $r5;

        $r6 = new net.sourceforge.plantuml.eps.PostScriptCommandMacro;

        specialinvoke $r6.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void <init>(java.lang.String)>("setcolorgradient");

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient> = $r6;

        $r7 = new net.sourceforge.plantuml.eps.PostScriptCommandMacro;

        specialinvoke $r7.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void <init>(java.lang.String)>("simplerect");

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro simplerect> = $r7;

        $r8 = new net.sourceforge.plantuml.eps.PostScriptCommandMacro;

        specialinvoke $r8.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void <init>(java.lang.String)>("roundrect");

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect> = $r8;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean setcolorgradientUsed> = 0;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean simplerectUsed> = 0;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean roundrectUsed> = 0;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean closeDone> = 0;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxX> = 10;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxY> = 10;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible> = 0L;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace> = 0L;

        $r9 = new net.sourceforge.plantuml.ugraphic.ShadowManager;

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.ShadowManager: void <init>(int,int)>(50, 200);

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.ugraphic.ShadowManager shadowManager> = $r9;

        $r10 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%!PS-Adobe-3.0 EPSF-3.0\n");

        $r13 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%%Creator: PlantUML v");

        $r15 = staticinvoke <net.sourceforge.plantuml.version.Version: java.lang.String versionString(int)>(15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%%Title: noTitle\n");

        $r23 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient>;

        $r22 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r22.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("3 index 7 index sub 1 index mul 7 index add", 1);

        virtualinvoke $r23.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r22);

        $r25 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient>;

        $r24 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r24.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("3 index 7 index sub 2 index mul 7 index add", 1);

        virtualinvoke $r25.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r24);

        $r27 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient>;

        $r26 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r26.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("3 index 7 index sub 3 index mul 7 index add", 1);

        virtualinvoke $r27.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r26);

        $r29 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient>;

        $r28 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r28.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("setrgbcolor", 1);

        virtualinvoke $r29.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r28);

        $r31 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient>;

        $r30 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r30.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("pop pop pop pop pop pop pop ", 1);

        virtualinvoke $r31.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r30);

        $r33 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro simplerect>;

        $r32 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r32.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("newpath moveto 1 index 0 rlineto", 1);

        virtualinvoke $r33.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r32);

        $r35 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro simplerect>;

        $r34 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r34.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("0 exch rlineto", 1);

        virtualinvoke $r35.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r34);

        $r37 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro simplerect>;

        $r36 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r36.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("neg 0 rlineto", 1);

        virtualinvoke $r37.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r36);

        $r39 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect>;

        $r38 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r38.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("newpath", 1);

        virtualinvoke $r39.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r38);

        $r41 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect>;

        $r40 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r40.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("dup 3 index add 2 index 2 index add 2 index 180 270 arc", 1);

        virtualinvoke $r41.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r40);

        $r43 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect>;

        $r42 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r42.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("2 index 5 index add 1 index sub 2 index 2 index add 2 index 270 0 arc", 1);

        virtualinvoke $r43.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r42);

        $r45 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect>;

        $r44 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r44.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("2 index 5 index add 1 index sub 2 index 5 index add 2 index sub 2 index 0 90 arc", 1);

        virtualinvoke $r45.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r44);

        $r47 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect>;

        $r46 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r46.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("dup 3 index add 2 index 5 index add 2 index sub 2 index 90 180 arc", 1);

        virtualinvoke $r47.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r46);

        $r49 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect>;

        $r48 = new net.sourceforge.plantuml.eps.PostScriptCommandRaw;

        specialinvoke $r48.<net.sourceforge.plantuml.eps.PostScriptCommandRaw: void <init>(java.lang.String,boolean)>("pop pop pop pop pop ", 1);

        virtualinvoke $r49.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: void add(net.sourceforge.plantuml.eps.PostScriptCommand)>($r48);

        return;
    }

    protected final void ensureVisible(double, double)
    {
        double d0, $d1, d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        int $i0, $i2, $i5, $i7, $i8, $i9;
        byte $b1, $b3;
        net.sourceforge.plantuml.eps.EpsGraphics$UrlArea $r1, $r2;
        long $l4, $l6;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $i0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxX>;

        $d1 = (double) $i0;

        $b1 = d0 cmpl $d1;

        if $b1 <= 0 goto label1;

        $d5 = d0 + 1.0;

        $i9 = (int) $d5;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxX> = $i9;

     label1:
        $i2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxY>;

        $d3 = (double) $i2;

        $b3 = d2 cmpl $d3;

        if $b3 <= 0 goto label2;

        $d4 = d2 + 1.0;

        $i8 = (int) $d4;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxY> = $i8;

     label2:
        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        if $r1 == null goto label3;

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $l4 = staticinvoke <java.lang.Math: long round(double)>(d0);

        $i5 = (int) $l4;

        $l6 = staticinvoke <java.lang.Math: long round(double)>(d2);

        $i7 = (int) $l6;

        virtualinvoke $r2.<net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: void ensureVisible(int,int)>($i5, $i7);

     label3:
        return;
    }

    protected final java.awt.Color getColor()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.awt.Color $r1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        return $r1;
    }

    public void close()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r10, $r12, $r14, $r16, $r18, $r19, $r20, $r21, $r22, $r25, $r28, $r32, $r36;
        int $i0, $i1, $i2;
        java.lang.String $r8, $r23, $r29, $r33, $r37;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.eps.PostScriptCommandMacro $r27, $r31, $r35;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%%BoundingBox: 0 0 ");

        $i0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxX>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxY>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%%ColorUsage: Color\n");

        $r12 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%%Origin: 0 0\n");

        $r14 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%%EndComments\n\n");

        $r16 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gsave\n");

        $r19 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 ");

        $i2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: int maxY>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" translate\n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".01 -.01 scale\n");

        $z0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean setcolorgradientUsed>;

        if $z0 == 0 goto label1;

        $r36 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        $r35 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro setcolorgradient>;

        $r37 = virtualinvoke $r35.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: java.lang.String getPostStringDefinition()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

     label1:
        $z1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean simplerectUsed>;

        if $z1 == 0 goto label2;

        $r32 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        $r31 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro simplerect>;

        $r33 = virtualinvoke $r31.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: java.lang.String getPostStringDefinition()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

     label2:
        $z2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean roundrectUsed>;

        if $z2 == 0 goto label3;

        $r28 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        $r27 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.PostScriptCommandMacro roundrect>;

        $r29 = virtualinvoke $r27.<net.sourceforge.plantuml.eps.PostScriptCommandMacro: java.lang.String getPostStringDefinition()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

     label3:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("grestore", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("showpage", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("%plantuml done", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("%%EOF", 1);

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean closeDone> = 1;

        return;
    }

    private void checkCloseDone()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $z0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean closeDone>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public java.lang.String getEPSCode()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r4, $r6;
        java.lang.String $r3, $r5, $r7;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $z0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean closeDone>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void close()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder header>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String getBodyString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected java.lang.String getBodyString()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder body>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public final void setStrokeColor(java.awt.Color)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.awt.Color r1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r1 := @parameter0: java.awt.Color;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color> = r1;

        return;
    }

    public void setFillColor(java.awt.Color)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.awt.Color r1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r1 := @parameter0: java.awt.Color;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor> = r1;

        return;
    }

    public final void setStrokeWidth(double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d1, $d2, d3, $d4;
        java.lang.String $r1;
        long $l0, $l1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        $r1 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth> = $r1;

        $d2 = d1 * 100.0;

        $l0 = (long) $d2;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible> = $l0;

        $d4 = d3 * 100.0;

        $l1 = (long) $d4;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace> = $l1;

        return;
    }

    public void newpathDot()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r2, $r5, $r13;
        java.awt.Color $r6;
        long $l0, $l1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        z0 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean isDashed()>();

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setlinewidth");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r5, 1);

        $r6 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r6);

        if z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] 0 setdash");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r13, 1);

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        return;
    }

    private boolean isDashed()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        long $l0, $l2;
        byte $b1, $b3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isDashed2()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        long $l0, $l2;
        byte $b1, $b3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isDashed3()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        long $l0, $l2;
        byte $b1, $b3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void closepathDot()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        z0 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean isDashed()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("stroke", 1);

        if z0 == 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("[] 0 setdash", 1);

     label1:
        return;
    }

    public void epsLine(double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r9, $r10, $r12, $r13, $r15, $r17, $r18, $r20, $r21;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r16, $r19, $r22;
        java.awt.Color $r6;
        boolean $z0;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d2, d3);

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setlinewidth");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r5, 1);

        $r6 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r6);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean isDashed2()>();

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r14, 1);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $d8 = d2 - d0;

        $r16 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d8);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d9 = d3 - d1;

        $r19 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d9);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rlineto");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r22, 1);

        goto label3;

     label1:
        $b0 = d0 cmpl d2;

        if $b0 != 0 goto label2;

        $d6 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d3);

        $d7 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsHLine(double,double,double)>(d0, $d6, $d7);

        goto label3;

     label2:
        $b1 = d1 cmpl d3;

        if $b1 != 0 goto label3;

        $d4 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2);

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d2);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsVLine(double,double,double)>(d1, $d4, $d5);

     label3:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("stroke", 1);

        $d10 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d2);

        $d11 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d10, $d11);

        return;
    }

    protected void epsHLine(double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17;
        double d0, d1, $d2, d3, $d4, $d5, $d6;
        java.lang.String $r2, $r5, $r8, $r13, $r18;
        long $l0, $l2, $l3, $l4, $l6, $l7, $l8, $l9, $l10, l11, l12;
        byte $b1, $b5;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r8, 1);

        $d2 = d1 * 100.0;

        l11 = (long) $d2;

     label1:
        $d4 = d3 * 100.0;

        $l0 = (long) $d4;

        $b1 = l11 cmp $l0;

        if $b1 >= 0 goto label4;

        $l2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $l4 = l11 + $l2;

        $d5 = d3 * 100.0;

        $l3 = (long) $d5;

        $b5 = $l4 cmp $l3;

        if $b5 <= 0 goto label2;

        $d6 = d3 * 100.0;

        $l10 = (long) $d6;

        l12 = l11 - $l10;

        goto label3;

     label2:
        l12 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rlineto");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r13, 1);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 ");

        $l6 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rmoveto");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r18, 1);

        $l8 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $l7 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $l9 = $l8 + $l7;

        l11 = l11 + $l9;

        goto label1;

     label4:
        return;
    }

    protected void epsVLine(double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17;
        double d0, d1, $d2, d3, $d4, $d5, $d6;
        java.lang.String $r2, $r5, $r8, $r13, $r18;
        long $l0, $l2, $l3, $l4, $l6, $l7, $l8, $l9, $l10, l11, l12;
        byte $b1, $b5;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        d3 := @parameter2: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r8, 1);

        $d2 = d0 * 100.0;

        l11 = (long) $d2;

     label1:
        $d4 = d3 * 100.0;

        $l0 = (long) $d4;

        $b1 = l11 cmp $l0;

        if $b1 >= 0 goto label4;

        $l2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $l4 = l11 + $l2;

        $d5 = d3 * 100.0;

        $l3 = (long) $d5;

        $b5 = $l4 cmp $l3;

        if $b5 <= 0 goto label2;

        $d6 = d3 * 100.0;

        $l10 = (long) $d6;

        l12 = l11 - $l10;

        goto label3;

     label2:
        l12 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 rlineto");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r13, 1);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $l6 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 rmoveto");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r18, 1);

        $l8 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $l7 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $l9 = $l8 + $l7;

        l11 = l11 + $l9;

        goto label1;

     label4:
        return;
    }

    public void epsPath(double, double, net.sourceforge.plantuml.ugraphic.UPath)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.awt.Color $r1, $r2, $r8, $r22;
        java.lang.StringBuilder $r3, $r5, $r6, $r17, $r18, $r19, $r30, $r31, $r32;
        java.lang.String $r4, $r7, $r20, $r33;
        net.sourceforge.plantuml.ugraphic.UPath r9;
        boolean $z0, $z1;
        java.lang.Object $r10, $r23;
        net.sourceforge.plantuml.ugraphic.USegmentType $r11, $r12, $r13, $r14, $r15, $r16, $r24, $r25, $r26, $r27, $r28, $r29, r37, r41;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41;
        java.lang.UnsupportedOperationException $r21, $r34;
        java.util.Iterator r35, r39;
        net.sourceforge.plantuml.ugraphic.USegment r36, r40;
        double[] r38, r42;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r9 := @parameter2: net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        if $r1 == null goto label10;

        $r22 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r22);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        r35 = virtualinvoke r9.<net.sourceforge.plantuml.ugraphic.UPath: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r23 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (net.sourceforge.plantuml.ugraphic.USegment) $r23;

        r37 = virtualinvoke r36.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegmentType getSegmentType()>();

        r38 = virtualinvoke r36.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $r24 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        if r37 != $r24 goto label02;

        $d38 = r38[0];

        $d41 = $d38 + d0;

        $d39 = r38[1];

        $d40 = $d39 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void movetoNoMacro(double,double)>($d41, $d40);

        goto label08;

     label02:
        $r25 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        if r37 != $r25 goto label03;

        $d34 = r38[0];

        $d37 = $d34 + d0;

        $d35 = r38[1];

        $d36 = $d35 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void linetoNoMacro(double,double)>($d37, $d36);

        goto label08;

     label03:
        $r26 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_QUADTO>;

        if r37 != $r26 goto label04;

        $r34 = new java.lang.UnsupportedOperationException;

        specialinvoke $r34.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r34;

     label04:
        $r27 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        if r37 != $r27 goto label05;

        $d22 = r38[0];

        $d33 = $d22 + d0;

        $d23 = r38[1];

        $d32 = $d23 + d2;

        $d24 = r38[2];

        $d31 = $d24 + d0;

        $d25 = r38[3];

        $d30 = $d25 + d2;

        $d26 = r38[4];

        $d29 = $d26 + d0;

        $d27 = r38[5];

        $d28 = $d27 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void curvetoNoMacro(double,double,double,double,double,double)>($d33, $d32, $d31, $d30, $d29, $d28);

        goto label08;

     label05:
        $r28 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CLOSE>;

        if r37 != $r28 goto label06;

        goto label08;

     label06:
        $r29 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        if r37 != $r29 goto label07;

        goto label08;

     label07:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown1 ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void println(java.lang.Object)>($r33);

     label08:
        goto label01;

     label09:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eofill", 1);

     label10:
        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        if $r2 == null goto label20;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setlinewidth");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r7, 1);

        $r8 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r8);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        r39 = virtualinvoke r9.<net.sourceforge.plantuml.ugraphic.UPath: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label19;

        $r10 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (net.sourceforge.plantuml.ugraphic.USegment) $r10;

        r41 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegmentType getSegmentType()>();

        r42 = virtualinvoke r40.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $r11 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        if r41 != $r11 goto label12;

        $d18 = r42[0];

        $d21 = $d18 + d0;

        $d19 = r42[1];

        $d20 = $d19 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void movetoNoMacro(double,double)>($d21, $d20);

        goto label18;

     label12:
        $r12 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        if r41 != $r12 goto label13;

        $d14 = r42[0];

        $d17 = $d14 + d0;

        $d15 = r42[1];

        $d16 = $d15 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void linetoNoMacro(double,double)>($d17, $d16);

        goto label18;

     label13:
        $r13 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_QUADTO>;

        if r41 != $r13 goto label14;

        $r21 = new java.lang.UnsupportedOperationException;

        specialinvoke $r21.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r21;

     label14:
        $r14 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        if r41 != $r14 goto label15;

        $d1 = r42[0];

        $d13 = $d1 + d0;

        $d3 = r42[1];

        $d12 = $d3 + d2;

        $d4 = r42[2];

        $d11 = $d4 + d0;

        $d5 = r42[3];

        $d10 = $d5 + d2;

        $d6 = r42[4];

        $d9 = $d6 + d0;

        $d7 = r42[5];

        $d8 = $d7 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void curvetoNoMacro(double,double,double,double,double,double)>($d13, $d12, $d11, $d10, $d9, $d8);

        goto label18;

     label15:
        $r15 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CLOSE>;

        if r41 != $r15 goto label16;

        goto label18;

     label16:
        $r16 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_ARCTO>;

        if r41 != $r16 goto label17;

        goto label18;

     label17:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown2 ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.Log: void println(java.lang.Object)>($r20);

     label18:
        goto label11;

     label19:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("stroke", 1);

     label20:
        return;
    }

    public transient void epsPolygon(net.sourceforge.plantuml.ugraphic.color.HColorGradient, net.sourceforge.plantuml.ugraphic.color.ColorMapper, double[])
    {
        boolean $z0;
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r1;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient r2;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3;
        java.awt.Color $r4;
        double[] r5;
        int $i0, $i1;
        java.lang.AssertionError $r6;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        r1 := @parameter1: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r5 := @parameter2: double[];

        $z0 = <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = lengthof r5;

        $i1 = $i0 % 2;

        if $i1 == 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r4 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r3);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void setFillColor(java.awt.Color)>($r4);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsPolygon(double[])>(r5);

        return;
    }

    public transient void epsPolygon(double[])
    {
        boolean $z0;
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.awt.Color $r1, $r2, $r8, $r34;
        java.lang.StringBuilder $r3, $r5, $r6, $r10, $r12, $r13, $r15, $r16, $r18, $r20, $r21, $r23, $r24, $r26, $r28, $r29, $r31, $r32, $r35, $r37, $r38, $r40, $r41, $r43, $r45, $r46, $r48, $r49, $r51, $r53, $r54, $r56, $r57;
        java.lang.String $r4, $r7, $r11, $r14, $r17, $r19, $r22, $r25, $r27, $r30, $r33, $r36, $r39, $r42, $r44, $r47, $r50, $r52, $r55, $r58;
        double[] r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, d21;
        java.lang.AssertionError $r59;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r9 := @parameter0: double[];

        $z0 = <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i10 = lengthof r9;

        $i11 = $i10 % 2;

        if $i11 == 0 goto label01;

        $r59 = new java.lang.AssertionError;

        specialinvoke $r59.<java.lang.AssertionError: void <init>()>();

        throw $r59;

     label01:
        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        d20 = 0.0;

        d21 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        if $r1 == null goto label06;

        $r34 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r34);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        i12 = 0;

     label02:
        $i5 = lengthof r9;

        if i12 >= $i5 goto label05;

        $d13 = r9[i12];

        $i6 = i12 + 1;

        $d12 = r9[$i6];

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d13, $d12);

        if i12 != 0 goto label03;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $d18 = r9[i12];

        $r52 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d18);

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i9 = i12 + 1;

        $d19 = r9[$i9];

        $r55 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d19);

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r58, 1);

        goto label04;

     label03:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $d14 = r9[i12];

        $d15 = $d14 - d20;

        $r44 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d15);

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i7 = i12 + 1;

        $d16 = r9[$i7];

        $d17 = $d16 - d21;

        $r47 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d17);

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rlineto");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r50, 1);

     label04:
        d20 = r9[i12];

        $i8 = i12 + 1;

        d21 = r9[$i8];

        i12 = i12 + 2;

        goto label02;

     label05:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $d10 = r9[0];

        $r36 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d10);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d11 = r9[1];

        $r39 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d11);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lineto");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r42, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eofill", 1);

     label06:
        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        if $r2 == null goto label11;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setlinewidth");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r7, 1);

        $r8 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r8);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        i13 = 0;

     label07:
        $i0 = lengthof r9;

        if i13 >= $i0 goto label10;

        $d3 = r9[i13];

        $i1 = i13 + 1;

        $d2 = r9[$i1];

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d3, $d2);

        if i13 != 0 goto label08;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $d8 = r9[i13];

        $r27 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d8);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i4 = i13 + 1;

        $d9 = r9[$i4];

        $r30 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d9);

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r33, 1);

        goto label09;

     label08:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $d4 = r9[i13];

        $d5 = $d4 - d20;

        $r19 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d5);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i2 = i13 + 1;

        $d6 = r9[$i2];

        $d7 = $d6 - d21;

        $r22 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d7);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rlineto");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r25, 1);

     label09:
        d20 = r9[i13];

        $i3 = i13 + 1;

        d21 = r9[$i3];

        i13 = i13 + 2;

        goto label07;

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $d0 = r9[0];

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = r9[1];

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lineto");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r17, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath stroke", 1);

     label11:
        return;
    }

    public void epsRectangle(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d1, d2, d3, $d4, $d5, d6, d7;
        java.awt.Color $r1, $r7, $r8, $r9;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d6 := @parameter4: double;

        d7 := @parameter5: double;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        $d5 = d0 + d2;

        $d4 = d1 + d3;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d5, $d4);

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        if $r1 == null goto label1;

        $r8 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r8);

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsRectangleInternal(double,double,double,double,double,double,boolean)>(d0, d1, d2, d3, d6, d7, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eofill", 1);

        $z1 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean isDashed3()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("[] 0 setdash", 1);

     label1:
        $r9 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        if $r9 == null goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setlinewidth");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r6, 1);

        $r7 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r7);

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsRectangleInternal(double,double,double,double,double,double,boolean)>(d0, d1, d2, d3, d6, d7, 0);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath stroke", 1);

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean isDashed3()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("[] 0 setdash", 1);

     label2:
        return;
    }

    public void epsRectangle(double, double, double, double, double, double, net.sourceforge.plantuml.ugraphic.color.HColorGradient, net.sourceforge.plantuml.ugraphic.color.ColorMapper)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d1, d2, d3, $d4, $d5, d6, d7, $d8, $d9;
        byte $b0, $b1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r1;
        net.sourceforge.plantuml.ugraphic.color.HColorGradient r2;
        net.sourceforge.plantuml.ugraphic.color.HColor $r3, $r5, $r23, $r25;
        java.awt.Color $r4, $r6, $r24, $r26;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38;
        java.lang.String $r8, $r11, $r14, $r17, $r20, $r22, $r28, $r31, $r34, $r37, $r39;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d6 := @parameter4: double;

        d7 := @parameter5: double;

        r2 := @parameter6: net.sourceforge.plantuml.ugraphic.color.HColorGradient;

        r1 := @parameter7: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        $d5 = d0 + d2;

        $d4 = d1 + d3;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d5, $d4);

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean setcolorgradientUsed> = 1;

        $b0 = d6 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b1 = d7 cmpl 0.0;

        if $b1 != 0 goto label1;

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean simplerectUsed> = 1;

        $r23 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r24 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r23);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColorShort(java.awt.Color)>($r24);

        $r25 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r26 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r25);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColorShort(java.awt.Color)>($r26);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d2);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r31 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d3);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r34 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r37 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r39, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("100 -1 1 {", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("100 div", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("2 index 2 index moveto", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("dup 5 index mul 2 mul dup 0 rlineto", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("neg 4 index 2 index mul 2 mul rlineto", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eoclip", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("10 index 10 index 10 index", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("10 index 10 index 10 index", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("6 index setcolorgradient", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("4 index 4 index 4 index 4 index simplerect", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eofill", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("} for", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop pop pop pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop pop pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop pop pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("initclip", 1);

        goto label2;

     label1:
        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean roundrectUsed> = 1;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor1()>();

        $r4 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r3);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColorShort(java.awt.Color)>($r4);

        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.color.HColorGradient: net.sourceforge.plantuml.ugraphic.color.HColor getColor2()>();

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r5);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColorShort(java.awt.Color)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d8 = d6 + d7;

        $d9 = $d8 / 2.0;

        $r20 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d9);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r22, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("100 -1 1 {", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("100 div", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("3 index 3 index moveto", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("dup 6 index mul 2 mul dup 0 rlineto", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("neg 5 index 2 index mul 2 mul rlineto", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eoclip", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("11 index 11 index 11 index", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("11 index 11 index 11 index", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("6 index setcolorgradient", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("5 index 5 index 5 index 5 index 5 index roundrect", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eofill", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("} for", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop pop pop pop pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop pop pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("pop pop pop", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("initclip", 1);

     label2:
        return;
    }

    private void epsRectangleInternal(double, double, double, double, double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5;
        byte $b0, $b1;
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        d4 := @parameter3: double;

        d0 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b1 = d5 cmpl 0.0;

        if $b1 != 0 goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void simpleRectangle(double,double,double,double,boolean)>(d1, d2, d3, d4, z0);

        goto label2;

     label1:
        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void roundRectangle(double,double,double,double,double,double)>(d1, d2, d3, d4, d0, d5);

     label2:
        return;
    }

    private void roundRectangle(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        boolean $z0;
        double d0, d1, $d2, d3, d4, $d5, $d6, $d7, d8, d9, d10;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r17, $r24;
        long $l0, $l1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d9 := @parameter0: double;

        d10 := @parameter1: double;

        d3 := @parameter2: double;

        d4 := @parameter3: double;

        d0 := @parameter4: double;

        d1 := @parameter5: double;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean isDashed3()>();

        if $z0 == 0 goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] 0 setdash");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r24, 1);

     label1:
        $d2 = d0 + d1;

        $d7 = $d2 / 2.0;

        $d6 = d3 / 2.0;

        $d5 = d4 / 2.0;

        d8 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double min(double,double,double)>($d7, $d6, $d5);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d10);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d8);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" roundrect");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r17, 1);

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean roundrectUsed> = 1;

        return;
    }

    private void simpleRectangle(double, double, double, double, boolean)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        boolean $z0, z1;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20;
        double d0, d1, d2, d3;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r21;
        long $l0, $l1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d2 := @parameter0: double;

        d3 := @parameter1: double;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        z1 := @parameter4: boolean;

        $z0 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean isDashed3()>();

        if $z0 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] 0 setdash");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r21, 1);

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" simplerect");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r14, 1);

        r0.<net.sourceforge.plantuml.eps.EpsGraphics: boolean simplerectUsed> = 1;

        return;
    }

    private int convertToClockwiseAngle(double)
    {
        double d0, $d1;
        int $i0;
        net.sourceforge.plantuml.eps.EpsGraphics r0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        $d1 = 360.0 - d0;

        $i0 = (int) $d1;

        return $i0;
    }

    public void epsEllipse(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d1, d2, d3, $d4, $d5, d6, d7, $d8, d9, d10, $d11, d12;
        byte $b0, $b1;
        java.awt.Color $r1, $r7;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r26, $r27;
        java.lang.String $r3, $r6, $r9, $r12, $r15, $r22, $r25, $r28;
        int $i2, $i3;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        d3 := @parameter3: double;

        d6 := @parameter4: double;

        d7 := @parameter5: double;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        $d5 = d0 + d1;

        $d4 = d2 + d3;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d5, $d4);

        d12 = 1.0;

        $b0 = d1 cmpl d3;

        if $b0 == 0 goto label1;

        d12 = d3 / d1;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("gsave", 1);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1 ");

        $r25 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d12);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scale");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r28, 1);

     label1:
        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        if $r1 == null goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setlinewidth");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r6, 1);

        $r7 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r7);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        $d8 = d6 + d7;

        $i2 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: int convertToClockwiseAngle(double)>($d8);

        d9 = (double) $i2;

        $i3 = specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: int convertToClockwiseAngle(double)>(d6);

        d10 = (double) $i3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d11 = d2 / d12;

        $r12 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d11);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d9);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arc");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r22, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("stroke", 1);

     label2:
        $b1 = d12 cmpl 1.0;

        if $b1 == 0 goto label3;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("grestore", 1);

     label3:
        return;
    }

    public void epsEllipse(double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, d8;
        byte $b0, $b1;
        java.awt.Color $r1, $r2, $r8, $r20;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void checkCloseDone()>();

        $d5 = d0 + d1;

        $d4 = d2 + d3;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d5, $d4);

        d8 = 1.0;

        $b0 = d1 cmpl d3;

        if $b0 == 0 goto label1;

        d8 = d3 / d1;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("gsave", 1);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1 ");

        $r34 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple4(double)>(d8);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scale");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r37, 1);

     label1:
        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        if $r1 == null goto label2;

        $r20 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color fillcolor>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r20);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d7 = d2 / d8;

        $r25 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d7);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r28 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 360 arc");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r31, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath eofill", 1);

     label2:
        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        if $r2 == null goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String strokeWidth>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setlinewidth");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r7, 1);

        $r8 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r8);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d6 = d2 / d8;

        $r13 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d6);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 360 arc");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r19, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath stroke", 1);

     label3:
        $b1 = d8 cmpl 1.0;

        if $b1 == 0 goto label4;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("grestore", 1);

     label4:
        return;
    }

    protected void appendColor(java.awt.Color)
    {
        java.awt.Color r0;
        int $i0, $i1, $i2;
        double $d0, d1, $d2, d3, $d4, d5;
        net.sourceforge.plantuml.eps.EpsGraphics r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.String $r3, $r6, $r9, $r12;

        r1 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<java.awt.Color: int getRed()>();

        $d0 = (double) $i0;

        d1 = $d0 / 255.0;

        $i1 = virtualinvoke r0.<java.awt.Color: int getGreen()>();

        $d2 = (double) $i1;

        d3 = $d2 / 255.0;

        $i2 = virtualinvoke r0.<java.awt.Color: int getBlue()>();

        $d4 = (double) $i2;

        d5 = $d4 / 255.0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple2(double)>(d1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple2(double)>(d3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple2(double)>(d5);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setrgbcolor");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r12, 1);

        return;
    }

    protected void appendColorShort(java.awt.Color)
    {
        java.awt.Color r0;
        int $i0, $i1, $i2;
        double $d0, d1, $d2, d3, $d4, d5;
        net.sourceforge.plantuml.eps.EpsGraphics r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8, $r10;
        java.lang.String $r3, $r6, $r9, $r11;

        r1 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<java.awt.Color: int getRed()>();

        $d0 = (double) $i0;

        d1 = $d0 / 255.0;

        $i1 = virtualinvoke r0.<java.awt.Color: int getGreen()>();

        $d2 = (double) $i1;

        d3 = $d2 / 255.0;

        $i2 = virtualinvoke r0.<java.awt.Color: int getBlue()>();

        $d4 = (double) $i2;

        d5 = $d4 / 255.0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple2(double)>(d1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple2(double)>(d3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String formatSimple2(double)>(d5);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r11, 1);

        return;
    }

    static java.lang.String format(double)
    {
        double d0, $d1;
        byte $b0;
        long $l1;
        java.lang.String $r0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return "0";

     label1:
        $d1 = d0 * 100.0;

        $l1 = (long) $d1;

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        return $r0;
    }

    public static java.lang.String formatSimple4(double)
    {
        double d0;
        byte $b0;
        java.lang.Object[] $r0;
        java.util.Locale $r1;
        java.lang.Double $r2;
        boolean $z0;
        int $i1, $i2;
        java.lang.String r3, r4;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return "0";

     label1:
        $r1 = <java.util.Locale: java.util.Locale US>;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r2;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%1.4f", $r0);

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(\\.\\d*?)0+$", "$1");

        $z0 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label2:
        return r4;
    }

    private static java.lang.String formatSimple2(double)
    {
        double d0;
        byte $b0;
        java.lang.Object[] $r0;
        java.util.Locale $r1;
        java.lang.Double $r2;
        boolean $z0;
        int $i1, $i2;
        java.lang.String r3, r4;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return "0";

     label1:
        $r1 = <java.util.Locale: java.util.Locale US>;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r2;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%1.2f", $r0);

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(\\.\\d*?)0+$", "$1");

        $z0 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label2:
        return r4;
    }

    protected void append(java.lang.String, boolean)
    {
        boolean z0;
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String r3, $r6;
        int $i0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>("  ");

        if $i0 == -1 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r3);

        throw $r8;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.lang.StringBuilder body>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        return;
    }

    public final void linetoNoMacro(double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7;
        double d0, d1;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lineto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r8, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        return;
    }

    public final void movetoNoMacro(double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7;
        double d0, d1;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r8, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        return;
    }

    public final void curvetoNoMacro(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19;
        double d0, d1, d2, d3, d4, d5;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r17, $r20;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d4);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d5);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" curveto");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r20, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d2, d3);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d4, d5);

        return;
    }

    public void moveto(double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7;
        double d0, d1;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" moveto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r8, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        return;
    }

    public void lineto(double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7;
        double d0, d1;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lineto");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r8, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        return;
    }

    public void curveto(double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19;
        double d0, d1, d2, d3, d4, d5;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r17, $r20;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d4);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d5);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" curveto");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r20, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d2, d3);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d4, d5);

        return;
    }

    public void quadto(double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19;
        double d0, d1, d2, d3;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r17, $r20;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d3);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" curveto");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r20, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d0, d1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>(d2, d3);

        return;
    }

    public void newpath()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.awt.Color $r1;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("0 setlinewidth", 1);

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: java.awt.Color color>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void appendColor(java.awt.Color)>($r1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("newpath", 1);

        return;
    }

    public void closepath()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("closepath", 1);

        return;
    }

    public void fill(int)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        i0 := @parameter0: int;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("%fill", 1);

        if i0 != 0 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("eofill", 1);

        goto label2;

     label1:
        if i0 != 1 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("fill", 1);

     label2:
        return;
    }

    public void drawImage(java.awt.image.BufferedImage, double, double)
    {
        java.awt.image.BufferedImage r0;
        int i0, i1, $i2, $i3, i4, i5;
        net.sourceforge.plantuml.eps.EpsGraphics r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.lang.String $r3, $r6, $r9, $r11, $r14, $r17, $r30, $r33, r34;
        boolean $z0;
        java.lang.AssertionError $r36;

        r1 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r0 := @parameter0: java.awt.image.BufferedImage;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("gsave", 1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" translate");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r9, 1);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $d2 = (double) i0;

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d3 = (double) i1;

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d3);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scale");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r17, 1);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 8 [");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 0 -");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0 ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r30, 1);

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("{<", 1);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        i4 = i1 - 1;

     label1:
        if i4 < 0 goto label5;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i5, i4);

        r34 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String getRgb(int)>($i2);

        $z0 = <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i3 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i3 == 6 goto label3;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label3:
        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        i5 = i5 + 1;

        goto label2;

     label4:
        i4 = i4 + -1;

        goto label1;

     label5:
        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r33, 1);

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>(">} false 3 colorimage", 1);

        $d4 = (double) i0;

        $d7 = d0 + $d4;

        $d5 = (double) i1;

        $d6 = d1 + $d5;

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d7, $d6);

        virtualinvoke r1.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("grestore", 1);

        return;
    }

    static java.lang.String getRgb(int)
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        int i0, $i1, $i2;
        java.lang.String $r2, r4, $r5;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000000");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = $i1 - 6;

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r5;
    }

    public void drawEps(java.lang.String, double, double)
    {
        java.lang.String r0, $r2, $r3, $r5, $r6, $r7, $r8, $r11, $r14, $r17;
        int i0, $i1, $i2, i3, i4, i5, i6, $i7, $i8;
        java.util.StringTokenizer $r1;
        boolean $z0, $z1;
        net.sourceforge.plantuml.eps.EpsGraphics r9;
        double d0, $d1, d2, d3, $d4, d5, $d6, $d7, $d8, $d9;
        java.lang.StringBuilder $r10, $r12, $r13, $r15, $r16;
        java.lang.AssertionError $r18, $r19;
        java.lang.IllegalArgumentException $r20;

        r9 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d3 := @parameter2: double;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("%%BoundingBox:");

        if i0 != -1 goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r20;

     label1:
        $r1 = new java.util.StringTokenizer;

        $r2 = "%%BoundingBox:";

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r3, " \n\t\r");

        $r5 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $r8 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $z0 = <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i5 >= i3 goto label2;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label2:
        $z1 = <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i6 >= i4 goto label3;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label3:
        virtualinvoke r9.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("gsave", 1);

        $d1 = (double) i3;

        d2 = d0 - $d1;

        $d4 = (double) i6;

        d5 = d3 + $d4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>(d5);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" translate");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r17, 1);

        virtualinvoke r9.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("1 -1 scale", 1);

        virtualinvoke r9.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>(r0, 0);

        $i7 = i5 - i3;

        $d6 = (double) $i7;

        $d9 = d0 + $d6;

        $i8 = i6 - i4;

        $d7 = (double) $i8;

        $d8 = d3 + $d7;

        virtualinvoke r9.<net.sourceforge.plantuml.eps.EpsGraphics: void ensureVisible(double,double)>($d9, $d8);

        virtualinvoke r9.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("grestore", 1);

        return;
    }

    protected final long getDashVisible()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashVisible>;

        return $l0;
    }

    protected final long getDashSpace()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        long $l0;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $l0 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: long dashSpace>;

        return $l0;
    }

    public void closeLink()
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        net.sourceforge.plantuml.eps.EpsGraphics$UrlArea $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8;
        boolean $z0;
        java.lang.String $r10;
        java.lang.AssertionError $r11;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        if $r1 == null goto label3;

        $r2 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $i0 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: int access$000(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r2);

        if $i0 == 2147483647 goto label3;

        $r3 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $i1 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: int access$100(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r3);

        $r4 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $i2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: int access$000(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r4);

        i3 = $i1 - $i2;

        $r5 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $i4 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: int access$200(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r5);

        $r6 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $i5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: int access$300(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r6);

        i6 = $i4 - $i5;

        $z0 = <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i3 < 0 goto label1;

        if i6 >= 0 goto label2;

     label1:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $r7 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $i7 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: int access$000(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r7);

        $r8 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $i8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: int access$300(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r8);

        $r9 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea>;

        $r10 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: java.lang.String access$400(net.sourceforge.plantuml.eps.EpsGraphics$UrlArea)>($r9);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsUrlLink(int,int,int,int,java.lang.String)>($i7, $i8, i3, i6, $r10);

     label3:
        r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea> = null;

        return;
    }

    public void epsUrlLink(int, int, int, int, java.lang.String)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r15, $r16;
        int i0, i1, i2, $i3, i4, $i5;
        java.lang.String $r11, r14, $r17;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i4 := @parameter3: int;

        r14 := @parameter4: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ /Rect [ ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i3 = i0 + i2;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i5 = i1 + i4;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r11, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("/Border [ 0 0 0 ]", 1);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/Action << /Subtype /URI /URI (");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") >>");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>($r17, 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("/Subtype /Link", 1);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void append(java.lang.String,boolean)>("/ANN pdfmark", 1);

        return;
    }

    public void openLink(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        net.sourceforge.plantuml.eps.EpsGraphics r1;
        net.sourceforge.plantuml.eps.EpsGraphics$UrlArea $r2;

        r1 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: boolean ignoreThisLink(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new net.sourceforge.plantuml.eps.EpsGraphics$UrlArea;

        specialinvoke $r2.<net.sourceforge.plantuml.eps.EpsGraphics$UrlArea: void <init>(java.lang.String)>(r0);

        r1.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.eps.EpsGraphics$UrlArea urlArea> = $r2;

        return;
    }

    public void epsRectangleShadow(double, double, double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d2, $d3, d4, $d5, d6, $d7, d8, $d9, d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, d18;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.ShadowManager $r1;
        java.awt.Color $r2;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d2 := @parameter0: double;

        d4 := @parameter1: double;

        d6 := @parameter2: double;

        d8 := @parameter3: double;

        d10 := @parameter4: double;

        d11 := @parameter5: double;

        d0 := @parameter6: double;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>(null);

        d18 = 0.0;

     label1:
        $b0 = d18 cmpg d0;

        if $b0 > 0 goto label2;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.ugraphic.ShadowManager shadowManager>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.ShadowManager: java.awt.Color getColor(double,double)>(d18, d0);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void setFillColor(java.awt.Color)>($r2);

        $d3 = d2 + d0;

        $d17 = $d3 + d18;

        $d5 = d4 + d0;

        $d16 = $d5 + d18;

        $d7 = 2.0 * d18;

        $d15 = d6 - $d7;

        $d9 = 2.0 * d18;

        $d14 = d8 - $d9;

        $d13 = d10 + 1.0;

        $d12 = d11 + 1.0;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsRectangle(double,double,double,double,double,double)>($d17, $d16, $d15, $d14, $d13, $d12);

        d18 = d18 + 0.5;

        goto label1;

     label2:
        return;
    }

    public transient void epsPolygonShadow(double, double[])
    {
        boolean $z0;
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d2;
        net.sourceforge.plantuml.ugraphic.ShadowManager $r1, $r4;
        java.awt.Color $r2;
        double[] r3, $r5;
        int $i0, $i1;
        java.lang.AssertionError $r6;
        byte $b2;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter0: double;

        r3 := @parameter1: double[];

        $z0 = <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = lengthof r3;

        $i1 = $i0 % 2;

        if $i1 == 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>(null);

        d2 = 0.0;

     label2:
        $b2 = d2 cmpg d0;

        if $b2 > 0 goto label3;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.ugraphic.ShadowManager shadowManager>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.ShadowManager: java.awt.Color getColor(double,double)>(d2, d0);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void setFillColor(java.awt.Color)>($r2);

        $r4 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.ugraphic.ShadowManager shadowManager>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.ShadowManager: double[] getShadowDeltaPoints(double,double,double[])>(d0, d2, r3);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsPolygon(double[])>($r5);

        d2 = d2 + 0.5;

        goto label2;

     label3:
        return;
    }

    public void epsEllipseShadow(double, double, double, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double d0, d2, d3, d4, d5, $d6, $d7, $d8, $d9, d10;
        byte $b0;
        net.sourceforge.plantuml.ugraphic.ShadowManager $r1;
        java.awt.Color $r2;

        r0 := @this: net.sourceforge.plantuml.eps.EpsGraphics;

        d2 := @parameter0: double;

        d3 := @parameter1: double;

        d4 := @parameter2: double;

        d5 := @parameter3: double;

        d0 := @parameter4: double;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>(null);

        d10 = 0.0;

     label1:
        $b0 = d10 cmpg d0;

        if $b0 > 0 goto label2;

        $r1 = r0.<net.sourceforge.plantuml.eps.EpsGraphics: net.sourceforge.plantuml.ugraphic.ShadowManager shadowManager>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.ShadowManager: java.awt.Color getColor(double,double)>(d10, d0);

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void setFillColor(java.awt.Color)>($r2);

        $d9 = d2 + d0;

        $d8 = d3 + d0;

        $d7 = d4 - d10;

        $d6 = d5 - d10;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void epsEllipse(double,double,double,double)>($d9, $d8, $d7, $d6);

        d10 = d10 + 0.5;

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <net.sourceforge.plantuml.eps.EpsGraphics: long COEF> = 100L;

        <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String END_OF_FILE> = "%plantuml done";

        $r0 = class "Lnet/sourceforge/plantuml/eps/EpsGraphics;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.eps.EpsGraphics: boolean $assertionsDisabled> = $z1;

        return;
    }
}
