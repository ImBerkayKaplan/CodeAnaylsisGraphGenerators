public class net.sourceforge.plantuml.ugraphic.eps.DriverLineEps extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UDriver
{
    private final net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer;

    public void <init>(net.sourceforge.plantuml.ugraphic.ClipContainer)
    {
        net.sourceforge.plantuml.ugraphic.eps.DriverLineEps r0;
        net.sourceforge.plantuml.ugraphic.ClipContainer r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverLineEps;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.ClipContainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.eps.DriverLineEps: net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer> = r1;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.ULine, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, net.sourceforge.plantuml.eps.EpsGraphics)
    {
        net.sourceforge.plantuml.ugraphic.ULine r0;
        double $d0, $d1, $d2, $d3, $d4, d5, d6, d7, d8;
        net.sourceforge.plantuml.ugraphic.eps.DriverLineEps r1;
        net.sourceforge.plantuml.ugraphic.ClipContainer $r2;
        net.sourceforge.plantuml.ugraphic.UClip r3;
        net.sourceforge.plantuml.eps.EpsGraphics r4;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r5;
        net.sourceforge.plantuml.ugraphic.UParam r6;
        net.sourceforge.plantuml.ugraphic.color.HColor $r7;
        java.awt.Color $r8;
        net.sourceforge.plantuml.ugraphic.UStroke $r9, $r10, $r11;
        java.awt.geom.Line2D$Double $r12, r13;

        r1 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverLineEps;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.ULine;

        d5 := @parameter1: double;

        d6 := @parameter2: double;

        r5 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r6 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: net.sourceforge.plantuml.eps.EpsGraphics;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.ULine: double getDX()>();

        d7 = d5 + $d0;

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.ULine: double getDY()>();

        d8 = d6 + $d1;

        $r2 = r1.<net.sourceforge.plantuml.ugraphic.eps.DriverLineEps: net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ugraphic.ClipContainer: net.sourceforge.plantuml.ugraphic.UClip getClip()>();

        if r3 == null goto label2;

        $r12 = new java.awt.geom.Line2D$Double;

        specialinvoke $r12.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(d5, d6, d7, d8);

        r13 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UClip: java.awt.geom.Line2D$Double getClippedLine(java.awt.geom.Line2D$Double)>($r12);

        if r13 != null goto label1;

        return;

     label1:
        d5 = r13.<java.awt.geom.Line2D$Double: double x1>;

        d6 = r13.<java.awt.geom.Line2D$Double: double y1>;

        d7 = r13.<java.awt.geom.Line2D$Double: double x2>;

        d8 = r13.<java.awt.geom.Line2D$Double: double y2>;

     label2:
        $r7 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r8 = interfaceinvoke r5.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r7);

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>($r8);

        $r9 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d2 = virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.UStroke: double getThickness()>();

        $r10 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d3 = virtualinvoke $r10.<net.sourceforge.plantuml.ugraphic.UStroke: double getDashVisible()>();

        $r11 = interfaceinvoke r6.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.UStroke getStroke()>();

        $d4 = virtualinvoke $r11.<net.sourceforge.plantuml.ugraphic.UStroke: double getDashSpace()>();

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>($d2, $d3, $d4);

        virtualinvoke r4.<net.sourceforge.plantuml.eps.EpsGraphics: void epsLine(double,double,double,double)>(d5, d6, d7, d8);

        return;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.eps.DriverLineEps r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        net.sourceforge.plantuml.eps.EpsGraphics $r5;
        net.sourceforge.plantuml.ugraphic.ULine $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverLineEps;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.ULine) r1;

        $r5 = (net.sourceforge.plantuml.eps.EpsGraphics) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverLineEps: void draw(net.sourceforge.plantuml.ugraphic.ULine,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.eps.EpsGraphics)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
