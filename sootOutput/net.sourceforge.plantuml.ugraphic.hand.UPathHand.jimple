public class net.sourceforge.plantuml.ugraphic.hand.UPathHand extends java.lang.Object
{
    private final net.sourceforge.plantuml.ugraphic.UPath path;
    private final double defaultVariation;

    public void <init>(net.sourceforge.plantuml.ugraphic.UPath, java.util.Random)
    {
        net.sourceforge.plantuml.ugraphic.hand.UPathHand r0;
        net.sourceforge.plantuml.ugraphic.UPath $r1, r4, $r6, $r17;
        java.awt.geom.Point2D$Double $r3, $r18, $r33, $r36, r37;
        java.util.Iterator r5, r41;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12, d13, d14, d15, d16;
        java.lang.Object $r7, $r19;
        net.sourceforge.plantuml.ugraphic.USegment r8, r20;
        net.sourceforge.plantuml.ugraphic.USegmentType r9, $r10, $r11, $r12, $r21, $r22;
        double[] $r13, $r14, $r23, $r24, $r25, $r26, $r29, $r30, $r31, $r32, $r34, $r35;
        net.sourceforge.plantuml.ugraphic.hand.HandJiggle $r15, $r27;
        java.util.Random r16;
        java.awt.geom.CubicCurve2D$Double $r28;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.UPathHand;

        r4 := @parameter0: net.sourceforge.plantuml.ugraphic.UPath;

        r16 := @parameter1: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.hand.UPathHand: double defaultVariation> = 4.0;

        r0.<net.sourceforge.plantuml.ugraphic.hand.UPathHand: double defaultVariation> = 4.0;

        $r1 = new net.sourceforge.plantuml.ugraphic.UPath;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPath: void <init>()>();

        $r3 = new java.awt.geom.Point2D$Double;

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>()>();

        r37 = $r3;

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UPath: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (net.sourceforge.plantuml.ugraphic.USegment) $r7;

        r9 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegmentType getSegmentType()>();

        $r10 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        if r9 != $r10 goto label2;

        $r34 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        d11 = $r34[0];

        $r35 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        d12 = $r35[1];

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPath: void moveTo(double,double)>(d11, d12);

        $r36 = new java.awt.geom.Point2D$Double;

        specialinvoke $r36.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d11, d12);

        r37 = $r36;

        goto label8;

     label2:
        $r11 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        if r9 != $r11 goto label3;

        $r25 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        d13 = $r25[4];

        $r26 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        d14 = $r26[5];

        $r27 = new net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        specialinvoke $r27.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void <init>(java.awt.geom.Point2D,double,java.util.Random)>(r37, 2.0, r16);

        $r28 = new java.awt.geom.CubicCurve2D$Double;

        $d5 = virtualinvoke r37.<java.awt.geom.Point2D: double getX()>();

        $d6 = virtualinvoke r37.<java.awt.geom.Point2D: double getY()>();

        $r29 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $d7 = $r29[0];

        $r30 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $d8 = $r30[1];

        $r31 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $d9 = $r31[2];

        $r32 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $d10 = $r32[3];

        specialinvoke $r28.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d5, $d6, $d7, $d8, $d9, $d10, d13, d14);

        virtualinvoke $r27.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void curveTo(java.awt.geom.CubicCurve2D)>($r28);

        virtualinvoke $r27.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void appendTo(net.sourceforge.plantuml.ugraphic.UPath)>($r1);

        $r33 = new java.awt.geom.Point2D$Double;

        specialinvoke $r33.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d13, d14);

        r37 = $r33;

        goto label8;

     label3:
        $r12 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        if r9 != $r12 goto label7;

        $r13 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        d15 = $r13[0];

        $r14 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        d16 = $r14[1];

        $r15 = new net.sourceforge.plantuml.ugraphic.hand.HandJiggle;

        $d1 = virtualinvoke r37.<java.awt.geom.Point2D: double getX()>();

        $d2 = virtualinvoke r37.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r15.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void <init>(double,double,double,java.util.Random)>($d1, $d2, 4.0, r16);

        virtualinvoke $r15.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: void lineTo(double,double)>(d15, d16);

        $r17 = virtualinvoke $r15.<net.sourceforge.plantuml.ugraphic.hand.HandJiggle: net.sourceforge.plantuml.ugraphic.UPath toUPath()>();

        r41 = virtualinvoke $r17.<net.sourceforge.plantuml.ugraphic.UPath: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r19 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        r20 = (net.sourceforge.plantuml.ugraphic.USegment) $r19;

        $r21 = virtualinvoke r20.<net.sourceforge.plantuml.ugraphic.USegment: net.sourceforge.plantuml.ugraphic.USegmentType getSegmentType()>();

        $r22 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_LINETO>;

        if $r21 != $r22 goto label5;

        $r23 = virtualinvoke r20.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $d3 = $r23[0];

        $r24 = virtualinvoke r20.<net.sourceforge.plantuml.ugraphic.USegment: double[] getCoord()>();

        $d4 = $r24[1];

        virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPath: void lineTo(double,double)>($d3, $d4);

     label5:
        goto label4;

     label6:
        $r18 = new java.awt.geom.Point2D$Double;

        specialinvoke $r18.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d15, d16);

        r37 = $r18;

        goto label8;

     label7:
        r0.<net.sourceforge.plantuml.ugraphic.hand.UPathHand: net.sourceforge.plantuml.ugraphic.UPath path> = r4;

        return;

     label8:
        goto label1;

     label9:
        r0.<net.sourceforge.plantuml.ugraphic.hand.UPathHand: net.sourceforge.plantuml.ugraphic.UPath path> = $r1;

        $r6 = r0.<net.sourceforge.plantuml.ugraphic.hand.UPathHand: net.sourceforge.plantuml.ugraphic.UPath path>;

        $d0 = virtualinvoke r4.<net.sourceforge.plantuml.ugraphic.UPath: double getDeltaShadow()>();

        virtualinvoke $r6.<net.sourceforge.plantuml.ugraphic.UPath: void setDeltaShadow(double)>($d0);

        return;
    }

    public net.sourceforge.plantuml.ugraphic.UPath getHanddrawn()
    {
        net.sourceforge.plantuml.ugraphic.hand.UPathHand r0;
        net.sourceforge.plantuml.ugraphic.UPath $r1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.hand.UPathHand;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.hand.UPathHand: net.sourceforge.plantuml.ugraphic.UPath path>;

        return $r1;
    }
}
