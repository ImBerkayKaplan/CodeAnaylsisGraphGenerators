public class net.sourceforge.plantuml.logo.TinyJavaLogo extends java.lang.Object
{
    private final net.sourceforge.plantuml.logo.LogoScanner scanner;
    private final net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane;
    private final java.util.Map dictionary;
    private net.sourceforge.plantuml.ugraphic.color.HColor penColor;

    public void <init>(net.sourceforge.plantuml.logo.TurtleGraphicsPane)
    {
        net.sourceforge.plantuml.logo.TinyJavaLogo r0;
        net.sourceforge.plantuml.logo.LogoScanner $r1;
        java.util.HashMap $r2;
        net.sourceforge.plantuml.logo.TurtleGraphicsPane r3;

        r0 := @this: net.sourceforge.plantuml.logo.TinyJavaLogo;

        r3 := @parameter0: net.sourceforge.plantuml.logo.TurtleGraphicsPane;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.logo.LogoScanner;

        specialinvoke $r1.<net.sourceforge.plantuml.logo.LogoScanner: void <init>()>();

        r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: java.util.Map dictionary> = $r2;

        r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane> = r3;

        return;
    }

    private void message(java.lang.String)
    {
        net.sourceforge.plantuml.logo.TinyJavaLogo r0;
        java.lang.String r1;

        r0 := @this: net.sourceforge.plantuml.logo.TinyJavaLogo;

        r1 := @parameter0: java.lang.String;

        return;
    }

    private void error(java.lang.String)
    {
        net.sourceforge.plantuml.logo.TinyJavaLogo r0;
        java.lang.StringBuilder $r1, $r3, $r5;
        net.sourceforge.plantuml.logo.TurtleGraphicsPane $r2;
        java.lang.String r4, $r6;

        r0 := @this: net.sourceforge.plantuml.logo.TinyJavaLogo;

        r4 := @parameter0: java.lang.String;

        $r2 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void message(java.lang.String)>($r6);

        return;
    }

    private void parseCommandBlock(int)
    {
        net.sourceforge.plantuml.logo.TinyJavaLogo r0;
        net.sourceforge.plantuml.logo.LogoScanner $r1, $r2, $r8, $r9, $r16, $r19, $r24, $r25, $r26, $r27, $r28, $r30, $r32, $r34, $r36, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r50, $r53, $r55, $r56, $r57, $r58, $r59, $r64, $r65;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, i19;
        java.lang.String r3, $r15, $r23, r54, $r63, r74, r75, r76, r77;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r6, $r79;
        net.sourceforge.plantuml.logo.TurtleGraphicsPane $r7, $r29, $r31, $r33, $r35, $r37, $r40, $r43, $r46, $r49;
        java.util.Map $r10, $r17, $r51;
        java.lang.Object $r11, $r52;
        java.lang.StringBuilder $r12, $r13, $r14, $r20, $r21, $r22, $r60, $r61, $r62;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3;
        net.sourceforge.plantuml.logo.LogoToken r66, r67, r68, r69, r70, r71, r72, r73, r78;

        r0 := @this: net.sourceforge.plantuml.logo.TinyJavaLogo;

        i7 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r1.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

     label01:
        $i18 = r66.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i18 == 256 goto label38;

        $i0 = r66.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i0 == 257 goto label38;

        $i1 = r66.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        lookupswitch($i1)
        {
            case 91: goto label34;
            case 93: goto label35;
            case 258: goto label28;
            case 260: goto label02;
            case 261: goto label05;
            case 262: goto label08;
            case 263: goto label11;
            case 264: goto label14;
            case 265: goto label15;
            case 266: goto label16;
            case 267: goto label17;
            case 268: goto label18;
            case 269: goto label19;
            case 271: goto label24;
            case 272: goto label30;
            default: goto label37;
        };

     label02:
        $r48 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r67 = virtualinvoke $r48.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        $i15 = r67.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i15 == 259 goto label03;

        $i16 = r67.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i16 != 270 goto label04;

     label03:
        $r49 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        $f3 = r67.<net.sourceforge.plantuml.logo.LogoToken: float value>;

        $d3 = (double) $f3;

        virtualinvoke $r49.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void forward(double)>($d3);

        $r50 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r50.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label04:
        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("FORWARD requires distance");

        return;

     label05:
        $r45 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r68 = virtualinvoke $r45.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        $i13 = r68.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i13 == 259 goto label06;

        $i14 = r68.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i14 != 270 goto label07;

     label06:
        $r46 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        $f2 = r68.<net.sourceforge.plantuml.logo.LogoToken: float value>;

        $d2 = (double) $f2;

        virtualinvoke $r46.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void back(double)>($d2);

        $r47 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r47.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label07:
        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("BACK requires distance");

        return;

     label08:
        $r42 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r69 = virtualinvoke $r42.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        $i11 = r69.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i11 == 259 goto label09;

        $i12 = r69.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i12 != 270 goto label10;

     label09:
        $r43 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        $f1 = r69.<net.sourceforge.plantuml.logo.LogoToken: float value>;

        $d1 = (double) $f1;

        virtualinvoke $r43.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void left(double)>($d1);

        $r44 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r44.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label10:
        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("LEFT requires turn angle");

        return;

     label11:
        $r39 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r70 = virtualinvoke $r39.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        $i9 = r70.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i9 == 259 goto label12;

        $i10 = r70.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i10 != 270 goto label13;

     label12:
        $r40 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        $f0 = r70.<net.sourceforge.plantuml.logo.LogoToken: float value>;

        $d0 = (double) $f0;

        virtualinvoke $r40.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void right(double)>($d0);

        $r41 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r41.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label13:
        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("RIGHT requires turn angle");

        return;

     label14:
        $r37 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        virtualinvoke $r37.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void penUp()>();

        $r38 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r38.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label15:
        $r35 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        virtualinvoke $r35.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void penDown()>();

        $r36 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r36.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label16:
        $r33 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        virtualinvoke $r33.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void hideTurtle()>();

        $r34 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r34.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label17:
        $r31 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        virtualinvoke $r31.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void showTurtle()>();

        $r32 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r32.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label18:
        $r29 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        virtualinvoke $r29.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void clearScreen()>();

        $r30 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r30.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label19:
        $r24 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r71 = virtualinvoke $r24.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        $i3 = r71.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i3 == 270 goto label20;

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("REPEAT requires positive integer count");

        return;

     label20:
        i19 = r71.<net.sourceforge.plantuml.logo.LogoToken: int intValue>;

        $r25 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r72 = virtualinvoke $r25.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        $i4 = r72.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i4 == 91 goto label21;

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("REPEAT requires block in []");

        return;

     label21:
        $r26 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        i5 = virtualinvoke $r26.<net.sourceforge.plantuml.logo.LogoScanner: int getPosition()>();

     label22:
        $i6 = i19;

        i19 = i19 + -1;

        if $i6 <= 0 goto label23;

        $r28 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        virtualinvoke $r28.<net.sourceforge.plantuml.logo.LogoScanner: void setPosition(int)>(i5);

        $i8 = i7 + 1;

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void parseCommandBlock(int)>($i8);

        goto label22;

     label23:
        $r27 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r27.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label24:
        $r9 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r73 = virtualinvoke $r9.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        $i2 = r73.<net.sourceforge.plantuml.logo.LogoToken: int kind>;

        if $i2 == 258 goto label25;

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("TO requires name for new definition");

        return;

     label25:
        r74 = r73.<net.sourceforge.plantuml.logo.LogoToken: java.lang.String lexeme>;

        $r10 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: java.util.Map dictionary>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r74);

        if $r11 != null goto label26;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Defining new command ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void message(java.lang.String)>($r23);

        goto label27;

     label26:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redefining command ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void message(java.lang.String)>($r15);

     label27:
        $r16 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r75 = virtualinvoke $r16.<net.sourceforge.plantuml.logo.LogoScanner: java.lang.String getRestAsString()>();

        $r17 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: java.util.Map dictionary>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r74, r75);

        $r19 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r19.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label28:
        r76 = r66.<net.sourceforge.plantuml.logo.LogoToken: java.lang.String lexeme>;

        $r51 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: java.util.Map dictionary>;

        $r52 = interfaceinvoke $r51.<java.util.Map: java.lang.Object get(java.lang.Object)>(r76);

        r77 = (java.lang.String) $r52;

        if r77 != null goto label29;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Undefined command ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>($r63);

        return;

     label29:
        $r53 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r54 = virtualinvoke $r53.<net.sourceforge.plantuml.logo.LogoScanner: java.lang.String getSourceString()>();

        $r55 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        i17 = virtualinvoke $r55.<net.sourceforge.plantuml.logo.LogoScanner: int getPosition()>();

        $r56 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        virtualinvoke $r56.<net.sourceforge.plantuml.logo.LogoScanner: void setSourceString(java.lang.String)>(r77);

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void parseCommandBlock(int)>(0);

        $r57 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        virtualinvoke $r57.<net.sourceforge.plantuml.logo.LogoScanner: void setSourceString(java.lang.String)>(r54);

        $r58 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        virtualinvoke $r58.<net.sourceforge.plantuml.logo.LogoScanner: void setPosition(int)>(i17);

        $r59 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r59.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label30:
        $r2 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r78 = virtualinvoke $r2.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        r3 = r78.<net.sourceforge.plantuml.logo.LogoToken: java.lang.String lexeme>;

        if r3 != null goto label31;

        $r79 = null;

        goto label32;

     label31:
        $r4 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColorSet instance()>();

        $r79 = virtualinvoke $r4.<net.sourceforge.plantuml.ugraphic.color.HColorSet: net.sourceforge.plantuml.ugraphic.color.HColor getColorOrWhite(java.lang.String)>(r3);

     label32:
        if $r79 != null goto label33;

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("Unrecognized color name");

        return;

     label33:
        r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.ugraphic.color.HColor penColor> = $r79;

        $r7 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.TurtleGraphicsPane turtleGraphicsPane>;

        $r6 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.ugraphic.color.HColor penColor>;

        virtualinvoke $r7.<net.sourceforge.plantuml.logo.TurtleGraphicsPane: void setPenColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r6);

        $r8 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r8.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label34:
        $r65 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        r66 = virtualinvoke $r65.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        goto label01;

     label35:
        if i7 != 0 goto label36;

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("] without matching [");

        $r64 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        virtualinvoke $r64.<net.sourceforge.plantuml.logo.LogoScanner: net.sourceforge.plantuml.logo.LogoToken getToken()>();

        return;

     label36:
        return;

     label37:
        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void error(java.lang.String)>("Unrecognized symbol in input");

        return;

     label38:
        return;
    }

    public void doCommandLine(java.lang.String)
    {
        net.sourceforge.plantuml.logo.TinyJavaLogo r0;
        java.lang.String r1;
        net.sourceforge.plantuml.logo.LogoScanner $r2;

        r0 := @this: net.sourceforge.plantuml.logo.TinyJavaLogo;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void message(java.lang.String)>(r1);

        $r2 = r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: net.sourceforge.plantuml.logo.LogoScanner scanner>;

        virtualinvoke $r2.<net.sourceforge.plantuml.logo.LogoScanner: void setSourceString(java.lang.String)>(r1);

        specialinvoke r0.<net.sourceforge.plantuml.logo.TinyJavaLogo: void parseCommandBlock(int)>(0);

        return;
    }
}
