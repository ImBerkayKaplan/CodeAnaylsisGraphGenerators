public class net.sourceforge.plantuml.tim.EaterIfndef extends net.sourceforge.plantuml.tim.Eater
{
    private java.lang.String varname;

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterIfndef r0;
        net.sourceforge.plantuml.StringLocated r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterIfndef;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterIfndef r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;

        r0 := @this: net.sourceforge.plantuml.tim.EaterIfndef;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfndef: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfndef: void checkAndEatChar(java.lang.String)>("!ifndef");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfndef: void skipSpaces()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterIfndef: java.lang.String eatAndGetVarname()>();

        r0.<net.sourceforge.plantuml.tim.EaterIfndef: java.lang.String varname> = $r1;

        return;
    }

    public boolean isTrue(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory)
    {
        net.sourceforge.plantuml.tim.TMemory r0;
        net.sourceforge.plantuml.tim.EaterIfndef r1;
        java.lang.String $r2, $r5;
        net.sourceforge.plantuml.tim.expression.TValue r3;
        net.sourceforge.plantuml.tim.TContext r4;
        boolean $z0, $z1;

        r1 := @this: net.sourceforge.plantuml.tim.EaterIfndef;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r0 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        $r2 = r1.<net.sourceforge.plantuml.tim.EaterIfndef: java.lang.String varname>;

        r3 = interfaceinvoke r0.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.expression.TValue getVariable(java.lang.String)>($r2);

        if r3 != null goto label1;

        $r5 = r1.<net.sourceforge.plantuml.tim.EaterIfndef: java.lang.String varname>;

        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.tim.TContext: boolean doesFunctionExist(java.lang.String)>($r5);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
