public class net.sourceforge.plantuml.posimo.GraphvizSolverB extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.posimo.GraphvizSolverB r0;

        r0 := @this: net.sourceforge.plantuml.posimo.GraphvizSolverB;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D solve(net.sourceforge.plantuml.posimo.Cluster, java.util.Collection) throws java.io.IOException
    {
        net.sourceforge.plantuml.posimo.DotxMaker $r0;
        net.sourceforge.plantuml.posimo.Cluster r1, r85;
        java.util.Collection r2, $r23, $r24;
        java.lang.String[] $r3, $r7;
        java.lang.String r4, $r14, $r19, $r20, $r41, $r42, r43, $r59, $r70, $r78, r82, r86, r90, r91, r92;
        net.sourceforge.plantuml.svek.MinFinder $r5, $r47;
        net.sourceforge.plantuml.cucadiagram.dot.Graphviz r8;
        java.io.ByteArrayOutputStream $r9;
        net.sourceforge.plantuml.cucadiagram.dot.ProcessState r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte[] r13;
        java.nio.charset.Charset $r15;
        java.util.regex.Pattern r17;
        java.util.regex.Matcher r18;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        net.sourceforge.plantuml.svek.YDelta $r21;
        double $d0, $d1, $d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14;
        net.sourceforge.plantuml.Dimension2DDouble $r25;
        java.lang.Object $r26, $r51, $r62;
        java.lang.StringBuilder $r27, $r28, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r75, $r76, $r77;
        net.sourceforge.plantuml.posimo.Block $r29, $r33, r81;
        net.sourceforge.plantuml.posimo.DotPath $r44;
        net.sourceforge.plantuml.svek.SvgResult $r45;
        net.sourceforge.plantuml.posimo.Label $r48;
        java.util.List r49, r83, r87;
        java.lang.IllegalStateException $r50, $r61, $r72, $r73, $r74;
        java.awt.geom.Point2D $r60, $r71;
        net.sourceforge.plantuml.posimo.GraphvizSolverB r79;
        java.util.Iterator r80, r84, r88;
        net.sourceforge.plantuml.posimo.Path r89;

        r79 := @this: net.sourceforge.plantuml.posimo.GraphvizSolverB;

        r1 := @parameter0: net.sourceforge.plantuml.posimo.Cluster;

        r2 := @parameter1: java.util.Collection;

        $r0 = new net.sourceforge.plantuml.posimo.DotxMaker;

        specialinvoke $r0.<net.sourceforge.plantuml.posimo.DotxMaker: void <init>(net.sourceforge.plantuml.posimo.Cluster,java.util.Collection)>(r1, r2);

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "nodesep=0.2;";

        $r3[1] = "ranksep=0.2;";

        r4 = virtualinvoke $r0.<net.sourceforge.plantuml.posimo.DotxMaker: java.lang.String createDotString(java.lang.String[])>($r3);

        $r5 = new net.sourceforge.plantuml.svek.MinFinder;

        specialinvoke $r5.<net.sourceforge.plantuml.svek.MinFinder: void <init>()>();

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "svg";

        r8 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: net.sourceforge.plantuml.cucadiagram.dot.Graphviz create(net.sourceforge.plantuml.ISkinParam,java.lang.String,java.lang.String[])>(null, r4, $r7);

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        r11 = interfaceinvoke r8.<net.sourceforge.plantuml.cucadiagram.dot.Graphviz: net.sourceforge.plantuml.cucadiagram.dot.ProcessState createFile3(java.io.OutputStream)>($r9);

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void close()>();

        $r12 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.ProcessState: net.sourceforge.plantuml.cucadiagram.dot.ProcessState TERMINATED_OK()>();

        $z0 = virtualinvoke r11.<net.sourceforge.plantuml.cucadiagram.dot.ProcessState: boolean differs(net.sourceforge.plantuml.cucadiagram.dot.ProcessState)>($r12);

        if $z0 == 0 goto label01;

        $r74 = new java.lang.IllegalStateException;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout2 ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r78);

        throw $r74;

     label01:
        r13 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r14 = new java.lang.String;

        $r15 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r14.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r13, $r15);

        r17 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?m)\\<svg\\s+width=\"(\\d+)pt\"\\s+height=\"(\\d+)pt\"");

        r18 = virtualinvoke r17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r14);

        $z1 = virtualinvoke r18.<java.util.regex.Matcher: boolean find()>();

        if $z1 != 0 goto label02;

        $r73 = new java.lang.IllegalStateException;

        specialinvoke $r73.<java.lang.IllegalStateException: void <init>()>();

        throw $r73;

     label02:
        $r19 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19);

        $r20 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r20);

        $r21 = new net.sourceforge.plantuml.svek.YDelta;

        $d0 = (double) i1;

        specialinvoke $r21.<net.sourceforge.plantuml.svek.YDelta: void <init>(double)>($d0);

        $r23 = virtualinvoke r1.<net.sourceforge.plantuml.posimo.Cluster: java.util.Collection getRecursiveContents()>();

        r80 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r80.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r62 = interfaceinvoke r80.<java.util.Iterator: java.lang.Object next()>();

        r81 = (net.sourceforge.plantuml.posimo.Block) $r62;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $i10 = virtualinvoke r81.<net.sourceforge.plantuml.posimo.Block: int getUid()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        r82 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<title>");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r82);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</title>");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        i11 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String)>($r70);

        if i11 != -1 goto label04;

        $r72 = new java.lang.IllegalStateException;

        specialinvoke $r72.<java.lang.IllegalStateException: void <init>()>();

        throw $r72;

     label04:
        r83 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: java.util.List extractPointsList(java.lang.String,int,net.sourceforge.plantuml.svek.YDelta)>($r14, i11, $r21);

        $d11 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinX(java.util.List)>(r83);

        virtualinvoke r81.<net.sourceforge.plantuml.posimo.Block: void setX(double)>($d11);

        $d12 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinY(java.util.List)>(r83);

        virtualinvoke r81.<net.sourceforge.plantuml.posimo.Block: void setY(double)>($d12);

        $r71 = virtualinvoke r81.<net.sourceforge.plantuml.posimo.Block: java.awt.geom.Point2D getPosition()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.svek.MinFinder: void manage(java.awt.geom.Point2D)>($r71);

        goto label03;

     label05:
        $r24 = virtualinvoke r1.<net.sourceforge.plantuml.posimo.Cluster: java.util.Collection getSubClusters()>();

        r84 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r51 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>();

        r85 = (net.sourceforge.plantuml.posimo.Cluster) $r51;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cluster");

        $i9 = virtualinvoke r85.<net.sourceforge.plantuml.posimo.Cluster: int getUid()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        r86 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<title>");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r86);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</title>");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        i12 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String)>($r59);

        if i12 != -1 goto label07;

        $r61 = new java.lang.IllegalStateException;

        specialinvoke $r61.<java.lang.IllegalStateException: void <init>()>();

        throw $r61;

     label07:
        r87 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: java.util.List extractPointsList(java.lang.String,int,net.sourceforge.plantuml.svek.YDelta)>($r14, i12, $r21);

        $d5 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinX(java.util.List)>(r87);

        virtualinvoke r85.<net.sourceforge.plantuml.posimo.Cluster: void setX(double)>($d5);

        $d6 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinY(java.util.List)>(r87);

        virtualinvoke r85.<net.sourceforge.plantuml.posimo.Cluster: void setY(double)>($d6);

        $d7 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMaxX(java.util.List)>(r87);

        $d8 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinX(java.util.List)>(r87);

        d13 = $d7 - $d8;

        $d9 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMaxY(java.util.List)>(r87);

        $d10 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinY(java.util.List)>(r87);

        d14 = $d9 - $d10;

        virtualinvoke r85.<net.sourceforge.plantuml.posimo.Cluster: void setHeight(double)>(d14);

        virtualinvoke r85.<net.sourceforge.plantuml.posimo.Cluster: void setWidth(double)>(d13);

        $r60 = virtualinvoke r85.<net.sourceforge.plantuml.posimo.Cluster: java.awt.geom.Point2D getPosition()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.svek.MinFinder: void manage(java.awt.geom.Point2D)>($r60);

        goto label06;

     label08:
        r88 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke r88.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r26 = interfaceinvoke r88.<java.util.Iterator: java.lang.Object next()>();

        r89 = (net.sourceforge.plantuml.posimo.Path) $r26;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $r29 = virtualinvoke r89.<net.sourceforge.plantuml.posimo.Path: net.sourceforge.plantuml.posimo.Block getStart()>();

        $i2 = virtualinvoke $r29.<net.sourceforge.plantuml.posimo.Block: int getUid()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r90 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $r33 = virtualinvoke r89.<net.sourceforge.plantuml.posimo.Path: net.sourceforge.plantuml.posimo.Block getEnd()>();

        $i3 = virtualinvoke $r33.<net.sourceforge.plantuml.posimo.Block: int getUid()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r91 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<title>");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r90);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#45;&gt;");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r91);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</title>");

        r92 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        i13 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String)>(r92);

        if i13 != -1 goto label10;

        $r50 = new java.lang.IllegalStateException;

        specialinvoke $r50.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r92);

        throw $r50;

     label10:
        i4 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String,int)>(" d=\"", i13);

        $r41 = " d=\"";

        $i5 = virtualinvoke $r41.<java.lang.String: int length()>();

        $i6 = i4 + $i5;

        i14 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String,int)>("\"", $i6);

        $r42 = " d=\"";

        $i7 = virtualinvoke $r42.<java.lang.String: int length()>();

        $i8 = i4 + $i7;

        r43 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>($i8, i14);

        $r44 = new net.sourceforge.plantuml.posimo.DotPath;

        $r45 = new net.sourceforge.plantuml.svek.SvgResult;

        specialinvoke $r45.<net.sourceforge.plantuml.svek.SvgResult: void <init>(java.lang.String,net.sourceforge.plantuml.svek.Point2DFunction)>(r43, $r21);

        specialinvoke $r44.<net.sourceforge.plantuml.posimo.DotPath: void <init>(net.sourceforge.plantuml.svek.SvgResult)>($r45);

        virtualinvoke r89.<net.sourceforge.plantuml.posimo.Path: void setDotPath(net.sourceforge.plantuml.posimo.DotPath)>($r44);

        $r47 = virtualinvoke $r44.<net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.svek.MinFinder getMinFinder()>();

        virtualinvoke $r5.<net.sourceforge.plantuml.svek.MinFinder: void manage(net.sourceforge.plantuml.svek.MinFinder)>($r47);

        $r48 = virtualinvoke r89.<net.sourceforge.plantuml.posimo.Path: net.sourceforge.plantuml.posimo.Label getLabel()>();

        if $r48 == null goto label11;

        r49 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: java.util.List extractPointsList(java.lang.String,int,net.sourceforge.plantuml.svek.YDelta)>($r14, i13, $r21);

        d3 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinX(java.util.List)>(r49);

        d4 = staticinvoke <net.sourceforge.plantuml.posimo.GraphvizSolverB: double getMinY(java.util.List)>(r49);

        virtualinvoke r89.<net.sourceforge.plantuml.posimo.Path: void setLabelPosition(double,double)>(d3, d4);

        virtualinvoke $r5.<net.sourceforge.plantuml.svek.MinFinder: void manage(double,double)>(d3, d4);

     label11:
        goto label09;

     label12:
        $r25 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d2 = (double) i0;

        $d1 = (double) i1;

        specialinvoke $r25.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d1);

        return $r25;
    }

    private static java.util.List extractPointsList(java.lang.String, int, net.sourceforge.plantuml.svek.YDelta)
    {
        net.sourceforge.plantuml.svek.SvgResult $r0, $r3;
        java.lang.String r1;
        net.sourceforge.plantuml.svek.YDelta r2;
        int i0;
        java.util.List $r4;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.svek.YDelta;

        $r0 = new net.sourceforge.plantuml.svek.SvgResult;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.SvgResult: void <init>(java.lang.String,net.sourceforge.plantuml.svek.Point2DFunction)>(r1, r2);

        $r3 = virtualinvoke $r0.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>(i0);

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.SvgResult: java.util.List extractList(java.lang.String)>("points=\"");

        return $r4;
    }

    private static double getMaxX(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1, $r3, $r5;
        java.awt.geom.Point2D$Double $r2, $r4, $r6;
        int $i0, i2;
        double $d0, d1;
        byte $b1;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.awt.geom.Point2D$Double) $r1;

        d1 = $r2.<java.awt.geom.Point2D$Double: double x>;

        i2 = 1;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (java.awt.geom.Point2D$Double) $r3;

        $d0 = $r4.<java.awt.geom.Point2D$Double: double x>;

        $b1 = $d0 cmpl d1;

        if $b1 <= 0 goto label2;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (java.awt.geom.Point2D$Double) $r5;

        d1 = $r6.<java.awt.geom.Point2D$Double: double x>;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return d1;
    }

    private static double getMinX(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1, $r3, $r5;
        java.awt.geom.Point2D$Double $r2, $r4, $r6;
        int $i0, i2;
        double $d0, d1;
        byte $b1;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.awt.geom.Point2D$Double) $r1;

        d1 = $r2.<java.awt.geom.Point2D$Double: double x>;

        i2 = 1;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (java.awt.geom.Point2D$Double) $r3;

        $d0 = $r4.<java.awt.geom.Point2D$Double: double x>;

        $b1 = $d0 cmpg d1;

        if $b1 >= 0 goto label2;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (java.awt.geom.Point2D$Double) $r5;

        d1 = $r6.<java.awt.geom.Point2D$Double: double x>;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return d1;
    }

    private static double getMaxY(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1, $r3, $r5;
        java.awt.geom.Point2D$Double $r2, $r4, $r6;
        int $i0, i2;
        double $d0, d1;
        byte $b1;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.awt.geom.Point2D$Double) $r1;

        d1 = $r2.<java.awt.geom.Point2D$Double: double y>;

        i2 = 1;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (java.awt.geom.Point2D$Double) $r3;

        $d0 = $r4.<java.awt.geom.Point2D$Double: double y>;

        $b1 = $d0 cmpl d1;

        if $b1 <= 0 goto label2;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (java.awt.geom.Point2D$Double) $r5;

        d1 = $r6.<java.awt.geom.Point2D$Double: double y>;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return d1;
    }

    private static double getMinY(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1, $r3, $r5;
        java.awt.geom.Point2D$Double $r2, $r4, $r6;
        int $i0, i2;
        double $d0, d1;
        byte $b1;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.awt.geom.Point2D$Double) $r1;

        d1 = $r2.<java.awt.geom.Point2D$Double: double y>;

        i2 = 1;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (java.awt.geom.Point2D$Double) $r3;

        $d0 = $r4.<java.awt.geom.Point2D$Double: double y>;

        $b1 = $d0 cmpg d1;

        if $b1 >= 0 goto label2;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (java.awt.geom.Point2D$Double) $r5;

        d1 = $r6.<java.awt.geom.Point2D$Double: double y>;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return d1;
    }

    private void exportPng(java.lang.String, net.sourceforge.plantuml.security.SFile) throws java.io.IOException
    {
        java.lang.String r0, $r10;
        java.lang.String[] $r1;
        net.sourceforge.plantuml.cucadiagram.dot.Graphviz r2;
        net.sourceforge.plantuml.security.SFile r3;
        java.io.BufferedOutputStream r4;
        net.sourceforge.plantuml.cucadiagram.dot.ProcessState $r5, r15;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.Throwable $r11, $r13;
        net.sourceforge.plantuml.posimo.GraphvizSolverB r14;

        r14 := @this: net.sourceforge.plantuml.posimo.GraphvizSolverB;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: net.sourceforge.plantuml.security.SFile;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "png";

        r2 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils: net.sourceforge.plantuml.cucadiagram.dot.Graphviz create(net.sourceforge.plantuml.ISkinParam,java.lang.String,java.lang.String[])>(null, r0, $r1);

        r4 = virtualinvoke r3.<net.sourceforge.plantuml.security.SFile: java.io.BufferedOutputStream createBufferedOutputStream()>();

     label1:
        r15 = interfaceinvoke r2.<net.sourceforge.plantuml.cucadiagram.dot.Graphviz: net.sourceforge.plantuml.cucadiagram.dot.ProcessState createFile3(java.io.OutputStream)>(r4);

        $r5 = staticinvoke <net.sourceforge.plantuml.cucadiagram.dot.ProcessState: net.sourceforge.plantuml.cucadiagram.dot.ProcessState TERMINATED_OK()>();

        $z0 = virtualinvoke r15.<net.sourceforge.plantuml.cucadiagram.dot.ProcessState: boolean differs(net.sourceforge.plantuml.cucadiagram.dot.ProcessState)>($r5);

        if $z0 == 0 goto label2;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout3 ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        if r4 == null goto label8;

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        goto label8;

     label3:
        $r13 := @caughtexception;

        if r4 == null goto label7;

     label4:
        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label7:
        throw $r13;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private net.sourceforge.plantuml.posimo.Path getPath(java.util.Collection, int, int)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r3;
        net.sourceforge.plantuml.posimo.Path r4;
        net.sourceforge.plantuml.posimo.Block $r5, $r6;
        int $i0, i1, $i2, i3;
        net.sourceforge.plantuml.posimo.GraphvizSolverB r7;

        r7 := @this: net.sourceforge.plantuml.posimo.GraphvizSolverB;

        r0 := @parameter0: java.util.Collection;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.posimo.Path) $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.Path: net.sourceforge.plantuml.posimo.Block getStart()>();

        $i0 = virtualinvoke $r5.<net.sourceforge.plantuml.posimo.Block: int getUid()>();

        if $i0 != i1 goto label2;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.posimo.Path: net.sourceforge.plantuml.posimo.Block getEnd()>();

        $i2 = virtualinvoke $r6.<net.sourceforge.plantuml.posimo.Block: int getUid()>();

        if $i2 != i3 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }
}
