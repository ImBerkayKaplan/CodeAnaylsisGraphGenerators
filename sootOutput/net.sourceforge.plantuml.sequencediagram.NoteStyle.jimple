public final enum class net.sourceforge.plantuml.sequencediagram.NoteStyle extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.sequencediagram.NoteStyle NORMAL;
    public static final enum net.sourceforge.plantuml.sequencediagram.NoteStyle HEXAGONAL;
    public static final enum net.sourceforge.plantuml.sequencediagram.NoteStyle BOX;
    private static final net.sourceforge.plantuml.sequencediagram.NoteStyle[] $VALUES;

    public static net.sourceforge.plantuml.sequencediagram.NoteStyle[] values()
    {
        net.sourceforge.plantuml.sequencediagram.NoteStyle[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.sequencediagram.NoteStyle[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.sequencediagram.NoteStyle valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/sequencediagram/NoteStyle;", r0);

        $r2 = (net.sourceforge.plantuml.sequencediagram.NoteStyle) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.sequencediagram.NoteStyle r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.NoteStyle;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static net.sourceforge.plantuml.sequencediagram.NoteStyle getNoteStyle(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("hnote");

        if $z0 == 0 goto label1;

        $r3 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle HEXAGONAL>;

        return $r3;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("rnote");

        if $z1 == 0 goto label2;

        $r2 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle BOX>;

        return $r2;

     label2:
        $r1 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle NORMAL>;

        return $r1;
    }

    public net.sourceforge.plantuml.skin.ComponentType getNoteComponentType()
    {
        net.sourceforge.plantuml.sequencediagram.NoteStyle r0, $r1, $r2;
        net.sourceforge.plantuml.skin.ComponentType $r3, $r4, $r5;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.NoteStyle;

        $r1 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle HEXAGONAL>;

        if r0 != $r1 goto label1;

        $r5 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE_HEXAGONAL>;

        return $r5;

     label1:
        $r2 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle BOX>;

        if r0 != $r2 goto label2;

        $r4 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE_BOX>;

        return $r4;

     label2:
        $r3 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType NOTE>;

        return $r3;
    }

    public net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinition()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.sequencediagram.NoteStyle r6;

        r6 := @this: net.sourceforge.plantuml.sequencediagram.NoteStyle;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName sequenceDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName note>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    private static net.sourceforge.plantuml.sequencediagram.NoteStyle[] $values()
    {
        net.sourceforge.plantuml.sequencediagram.NoteStyle[] $r0;
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r1, $r2, $r3;

        $r0 = newarray (net.sourceforge.plantuml.sequencediagram.NoteStyle)[3];

        $r1 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle NORMAL>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle HEXAGONAL>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle BOX>;

        $r0[2] = $r3;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.sequencediagram.NoteStyle $r0, $r1, $r2;
        net.sourceforge.plantuml.sequencediagram.NoteStyle[] $r3;

        $r0 = new net.sourceforge.plantuml.sequencediagram.NoteStyle;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.NoteStyle: void <init>(java.lang.String,int)>("NORMAL", 0);

        <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle NORMAL> = $r0;

        $r1 = new net.sourceforge.plantuml.sequencediagram.NoteStyle;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.NoteStyle: void <init>(java.lang.String,int)>("HEXAGONAL", 1);

        <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle HEXAGONAL> = $r1;

        $r2 = new net.sourceforge.plantuml.sequencediagram.NoteStyle;

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.NoteStyle: void <init>(java.lang.String,int)>("BOX", 2);

        <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle BOX> = $r2;

        $r3 = staticinvoke <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle[] $values()>();

        <net.sourceforge.plantuml.sequencediagram.NoteStyle: net.sourceforge.plantuml.sequencediagram.NoteStyle[] $VALUES> = $r3;

        return;
    }
}
