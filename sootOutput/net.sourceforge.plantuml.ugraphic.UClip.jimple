public class net.sourceforge.plantuml.ugraphic.UClip extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UChange
{
    private final double x;
    private final double y;
    private final double width;
    private final double height;
    static final boolean $assertionsDisabled;

    public void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.UClip: double x> = d0;

        r0.<net.sourceforge.plantuml.ugraphic.UClip: double y> = d1;

        r0.<net.sourceforge.plantuml.ugraphic.UClip: double width> = d2;

        r0.<net.sourceforge.plantuml.ugraphic.UClip: double height> = d3;

        return;
    }

    public net.sourceforge.plantuml.ugraphic.UClip enlarge(double)
    {
        net.sourceforge.plantuml.ugraphic.UClip $r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UClip;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $d10 = $d1 - d0;

        $d2 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $d9 = $d2 - d0;

        $d4 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        $d3 = 2.0 * d0;

        $d8 = $d4 + $d3;

        $d6 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        $d5 = 2.0 * d0;

        $d7 = $d6 + $d5;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UClip: void <init>(double,double,double,double)>($d10, $d9, $d8, $d7);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        net.sourceforge.plantuml.ugraphic.UClip r2;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r10;

        r2 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLIP x=");

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" y=");

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" w=");

        $d2 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" h=");

        $d3 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public net.sourceforge.plantuml.ugraphic.UClip translate(double, double)
    {
        net.sourceforge.plantuml.ugraphic.UClip $r0, r1;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new net.sourceforge.plantuml.ugraphic.UClip;

        $d1 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $d7 = $d1 + d0;

        $d3 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $d6 = $d3 + d2;

        $d5 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        $d4 = r1.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UClip: void <init>(double,double,double,double)>($d7, $d6, $d5, $d4);

        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.UClip translate(net.sourceforge.plantuml.ugraphic.UTranslate)
    {
        net.sourceforge.plantuml.ugraphic.UClip r0, $r2;
        net.sourceforge.plantuml.ugraphic.UTranslate r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UTranslate;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDx()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UTranslate: double getDy()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: net.sourceforge.plantuml.ugraphic.UClip translate(double,double)>($d0, $d1);

        return $r2;
    }

    public final double getX()
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        return $d0;
    }

    public final double getY()
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        return $d0;
    }

    public final double getWidth()
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        return $d0;
    }

    public final double getHeight()
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        $d0 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        return $d0;
    }

    public boolean isInside(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d0, $d1);

        return $z0;
    }

    public boolean isInside(double, double)
    {
        double d0, $d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        net.sourceforge.plantuml.ugraphic.UClip r0;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.AssertionError $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        d0 := @parameter0: double;

        d5 := @parameter1: double;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label02;

        $z5 = <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled>;

        if $z5 != 0 goto label01;

        $d15 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedX(double)>(d0);

        $b9 = $d15 cmpl d0;

        if $b9 != 0 goto label01;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label01:
        return 0;

     label02:
        $d3 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $d2 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        $d4 = $d3 + $d2;

        $b1 = d0 cmpl $d4;

        if $b1 <= 0 goto label04;

        $z4 = <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled>;

        if $z4 != 0 goto label03;

        $d14 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedX(double)>(d0);

        $b8 = $d14 cmpl d0;

        if $b8 != 0 goto label03;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label03:
        return 0;

     label04:
        $d6 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $b2 = d5 cmpg $d6;

        if $b2 >= 0 goto label06;

        $z3 = <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $d13 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedY(double)>(d5);

        $b7 = $d13 cmpl d5;

        if $b7 != 0 goto label05;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label05:
        return 0;

     label06:
        $d8 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $d7 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        $d9 = $d8 + $d7;

        $b3 = d5 cmpl $d9;

        if $b3 <= 0 goto label08;

        $z2 = <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled>;

        if $z2 != 0 goto label07;

        $d12 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedY(double)>(d5);

        $b6 = $d12 cmpl d5;

        if $b6 != 0 goto label07;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label07:
        return 0;

     label08:
        $z0 = <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled>;

        if $z0 != 0 goto label09;

        $d11 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedX(double)>(d0);

        $b5 = $d11 cmpl d0;

        if $b5 == 0 goto label09;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label09:
        $z1 = <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled>;

        if $z1 != 0 goto label10;

        $d10 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedY(double)>(d5);

        $b4 = $d10 cmpl d5;

        if $b4 == 0 goto label10;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label10:
        return 1;
    }

    public java.awt.geom.Rectangle2D$Double getClippedRectangle(java.awt.geom.Rectangle2D$Double)
    {
        java.awt.geom.Rectangle2D$Double r0, $r1, $r4;
        net.sourceforge.plantuml.ugraphic.UClip r2;
        double $d0, $d1, $d2, $d3;
        java.awt.geom.Rectangle2D $r3;

        r2 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        r0 := @parameter0: java.awt.geom.Rectangle2D$Double;

        $r1 = new java.awt.geom.Rectangle2D$Double;

        $d3 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $d2 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $d1 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        $d0 = r2.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        specialinvoke $r1.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d3, $d2, $d1, $d0);

        $r3 = virtualinvoke r0.<java.awt.geom.Rectangle2D$Double: java.awt.geom.Rectangle2D createIntersection(java.awt.geom.Rectangle2D)>($r1);

        $r4 = (java.awt.geom.Rectangle2D$Double) $r3;

        return $r4;
    }

    public java.awt.geom.Line2D$Double getClippedLine(java.awt.geom.Line2D$Double)
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        java.awt.geom.Line2D$Double r1, $r3, $r4, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, d32, d33, $d34, $d35, d36, d37, d38, d39;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        java.lang.IllegalStateException $r2;
        java.lang.AssertionError $r5;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        r1 := @parameter0: java.awt.geom.Line2D$Double;

        $d1 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d0 = r1.<java.awt.geom.Line2D$Double: double y1>;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d1, $d0);

        if $z0 == 0 goto label1;

        $d31 = r1.<java.awt.geom.Line2D$Double: double x2>;

        $d30 = r1.<java.awt.geom.Line2D$Double: double y2>;

        $z4 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d31, $d30);

        if $z4 == 0 goto label1;

        return r1;

     label1:
        $d3 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d2 = r1.<java.awt.geom.Line2D$Double: double y1>;

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d3, $d2);

        if $z1 != 0 goto label3;

        $d23 = r1.<java.awt.geom.Line2D$Double: double x2>;

        $d22 = r1.<java.awt.geom.Line2D$Double: double y2>;

        $z3 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d23, $d22);

        if $z3 != 0 goto label3;

        $d25 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d24 = r1.<java.awt.geom.Line2D$Double: double x2>;

        $b5 = $d25 cmpl $d24;

        if $b5 != 0 goto label2;

        $d26 = r1.<java.awt.geom.Line2D$Double: double y1>;

        d32 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedY(double)>($d26);

        $d27 = r1.<java.awt.geom.Line2D$Double: double y2>;

        d33 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedY(double)>($d27);

        $b6 = d32 cmpl d33;

        if $b6 == 0 goto label2;

        $r6 = new java.awt.geom.Line2D$Double;

        $d29 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d28 = r1.<java.awt.geom.Line2D$Double: double x2>;

        specialinvoke $r6.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($d29, d32, $d28, d33);

        return $r6;

     label2:
        return null;

     label3:
        $d5 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d4 = r1.<java.awt.geom.Line2D$Double: double x2>;

        $b0 = $d5 cmpl $d4;

        if $b0 == 0 goto label4;

        $d21 = r1.<java.awt.geom.Line2D$Double: double y1>;

        $d20 = r1.<java.awt.geom.Line2D$Double: double y2>;

        $b4 = $d21 cmpl $d20;

        if $b4 == 0 goto label4;

        return null;

     label4:
        $z2 = <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $d17 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d16 = r1.<java.awt.geom.Line2D$Double: double x2>;

        $b2 = $d17 cmpl $d16;

        if $b2 == 0 goto label5;

        $d19 = r1.<java.awt.geom.Line2D$Double: double y1>;

        $d18 = r1.<java.awt.geom.Line2D$Double: double y2>;

        $b3 = $d19 cmpl $d18;

        if $b3 == 0 goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $d34 = r1.<java.awt.geom.Line2D$Double: double y1>;

        $d35 = r1.<java.awt.geom.Line2D$Double: double y2>;

        $b7 = $d34 cmpl $d35;

        if $b7 != 0 goto label6;

        $d12 = r1.<java.awt.geom.Line2D$Double: double x1>;

        d36 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedX(double)>($d12);

        $d13 = r1.<java.awt.geom.Line2D$Double: double x2>;

        d37 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedX(double)>($d13);

        $r4 = new java.awt.geom.Line2D$Double;

        $d15 = r1.<java.awt.geom.Line2D$Double: double y1>;

        $d14 = r1.<java.awt.geom.Line2D$Double: double y2>;

        specialinvoke $r4.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(d36, $d15, d37, $d14);

        return $r4;

     label6:
        $d7 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d6 = r1.<java.awt.geom.Line2D$Double: double x2>;

        $b1 = $d7 cmpl $d6;

        if $b1 != 0 goto label7;

        $d8 = r1.<java.awt.geom.Line2D$Double: double y1>;

        d38 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedY(double)>($d8);

        $d9 = r1.<java.awt.geom.Line2D$Double: double y2>;

        d39 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: double getClippedY(double)>($d9);

        $r3 = new java.awt.geom.Line2D$Double;

        $d11 = r1.<java.awt.geom.Line2D$Double: double x1>;

        $d10 = r1.<java.awt.geom.Line2D$Double: double x2>;

        specialinvoke $r3.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($d11, d38, $d10, d39);

        return $r3;

     label7:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    private double getClippedX(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        net.sourceforge.plantuml.ugraphic.UClip r0;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $d8 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        return $d8;

     label1:
        $d3 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $d2 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        $d4 = $d3 + $d2;

        $b1 = d0 cmpl $d4;

        if $b1 <= 0 goto label2;

        $d6 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double x>;

        $d5 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double width>;

        $d7 = $d6 + $d5;

        return $d7;

     label2:
        return d0;
    }

    private double getClippedY(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        net.sourceforge.plantuml.ugraphic.UClip r0;
        byte $b0, $b1;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $d8 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        return $d8;

     label1:
        $d3 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $d2 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        $d4 = $d3 + $d2;

        $b1 = d0 cmpl $d4;

        if $b1 <= 0 goto label2;

        $d6 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double y>;

        $d5 = r0.<net.sourceforge.plantuml.ugraphic.UClip: double height>;

        $d7 = $d6 + $d5;

        return $d7;

     label2:
        return d0;
    }

    public boolean isInside(double, double, net.sourceforge.plantuml.ugraphic.UPath)
    {
        net.sourceforge.plantuml.ugraphic.UClip r0;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        net.sourceforge.plantuml.ugraphic.UPath r1;
        boolean $z0, $z1, $z2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.UClip;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r1 := @parameter2: net.sourceforge.plantuml.ugraphic.UPath;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMinX()>();

        $d3 = d0 + $d1;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMinY()>();

        $d5 = d2 + $d4;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d3, $d5);

        if $z0 == 0 goto label1;

        $d6 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMaxX()>();

        $d7 = d0 + $d6;

        $d8 = virtualinvoke r1.<net.sourceforge.plantuml.ugraphic.UPath: double getMaxY()>();

        $d9 = d2 + $d8;

        $z1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>($d7, $d9);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/ugraphic/UClip;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.ugraphic.UClip: boolean $assertionsDisabled> = $z1;

        return;
    }
}
