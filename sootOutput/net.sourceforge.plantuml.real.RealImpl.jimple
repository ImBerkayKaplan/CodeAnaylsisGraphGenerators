class net.sourceforge.plantuml.real.RealImpl extends net.sourceforge.plantuml.real.RealMoveable implements net.sourceforge.plantuml.real.RealOrigin
{
    private double currentValue;

    public void <init>(java.lang.String, net.sourceforge.plantuml.real.RealLine, double)
    {
        net.sourceforge.plantuml.real.RealImpl r0;
        net.sourceforge.plantuml.real.RealLine r1;
        java.lang.String r2;
        double d0;

        r0 := @this: net.sourceforge.plantuml.real.RealImpl;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: net.sourceforge.plantuml.real.RealLine;

        d0 := @parameter2: double;

        specialinvoke r0.<net.sourceforge.plantuml.real.RealMoveable: void <init>(net.sourceforge.plantuml.real.RealLine,java.lang.String)>(r1, r2);

        r0.<net.sourceforge.plantuml.real.RealImpl: double currentValue> = d0;

        return;
    }

    void move(double)
    {
        net.sourceforge.plantuml.real.RealImpl r0;
        double d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.real.RealImpl;

        d0 := @parameter0: double;

        $d1 = r0.<net.sourceforge.plantuml.real.RealImpl: double currentValue>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.real.RealImpl: double currentValue> = $d2;

        return;
    }

    double getCurrentValueInternal()
    {
        net.sourceforge.plantuml.real.RealImpl r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.real.RealImpl;

        $d0 = r0.<net.sourceforge.plantuml.real.RealImpl: double currentValue>;

        return $d0;
    }

    public net.sourceforge.plantuml.real.Real addAtLeast(double)
    {
        net.sourceforge.plantuml.real.RealImpl $r0, r2;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.String $r3, $r7;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.real.RealLine $r8, $r10;
        net.sourceforge.plantuml.real.PositiveForce $r11;

        r2 := @this: net.sourceforge.plantuml.real.RealImpl;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.real.RealImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.real.RealImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".addAtLeast");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.real.RealImpl: net.sourceforge.plantuml.real.RealLine getLine()>();

        $d1 = r2.<net.sourceforge.plantuml.real.RealImpl: double currentValue>;

        $d2 = $d1 + d0;

        specialinvoke $r0.<net.sourceforge.plantuml.real.RealImpl: void <init>(java.lang.String,net.sourceforge.plantuml.real.RealLine,double)>($r7, $r8, $d2);

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.real.RealImpl: net.sourceforge.plantuml.real.RealLine getLine()>();

        $r11 = new net.sourceforge.plantuml.real.PositiveForce;

        specialinvoke $r11.<net.sourceforge.plantuml.real.PositiveForce: void <init>(net.sourceforge.plantuml.real.Real,net.sourceforge.plantuml.real.RealMoveable,double)>(r2, $r0, d0);

        virtualinvoke $r10.<net.sourceforge.plantuml.real.RealLine: void addForce(net.sourceforge.plantuml.real.PositiveForce)>($r11);

        return $r0;
    }

    public void ensureBiggerThan(net.sourceforge.plantuml.real.Real)
    {
        net.sourceforge.plantuml.real.RealImpl r0;
        net.sourceforge.plantuml.real.RealLine $r1;
        net.sourceforge.plantuml.real.PositiveForce $r2;
        net.sourceforge.plantuml.real.Real r3;

        r0 := @this: net.sourceforge.plantuml.real.RealImpl;

        r3 := @parameter0: net.sourceforge.plantuml.real.Real;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.real.RealImpl: net.sourceforge.plantuml.real.RealLine getLine()>();

        $r2 = new net.sourceforge.plantuml.real.PositiveForce;

        specialinvoke $r2.<net.sourceforge.plantuml.real.PositiveForce: void <init>(net.sourceforge.plantuml.real.Real,net.sourceforge.plantuml.real.RealMoveable,double)>(r3, r0, 0.0);

        virtualinvoke $r1.<net.sourceforge.plantuml.real.RealLine: void addForce(net.sourceforge.plantuml.real.PositiveForce)>($r2);

        return;
    }

    public void compileNow()
    {
        net.sourceforge.plantuml.real.RealImpl r0;
        net.sourceforge.plantuml.real.RealLine $r1;

        r0 := @this: net.sourceforge.plantuml.real.RealImpl;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.real.RealImpl: net.sourceforge.plantuml.real.RealLine getLine()>();

        virtualinvoke $r1.<net.sourceforge.plantuml.real.RealLine: void compile()>();

        return;
    }
}
