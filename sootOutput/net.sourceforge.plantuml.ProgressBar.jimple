public class net.sourceforge.plantuml.ProgressBar extends java.lang.Object
{
    private static boolean enable;
    private static java.lang.String last;
    private static final java.util.concurrent.atomic.AtomicInteger total;
    private static final java.util.concurrent.atomic.AtomicInteger done;

    public void <init>()
    {
        net.sourceforge.plantuml.ProgressBar r0;

        r0 := @this: net.sourceforge.plantuml.ProgressBar;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static synchronized void print(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintStream $r1;

        r0 := @parameter0: java.lang.String;

        staticinvoke <net.sourceforge.plantuml.ProgressBar: void clear()>();

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>(r0);

        <net.sourceforge.plantuml.ProgressBar: java.lang.String last> = r0;

        return;
    }

    public static synchronized void clear()
    {
        java.lang.String $r0, $r1, $r2, $r3;
        int $i0, $i1, $i2, i3, i4, i5;
        java.io.PrintStream $r4, $r5, $r6;

        $r0 = <net.sourceforge.plantuml.ProgressBar: java.lang.String last>;

        if $r0 == null goto label6;

        i3 = 0;

     label1:
        $r1 = <net.sourceforge.plantuml.ProgressBar: java.lang.String last>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i3 >= $i0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void print(char)>(8);

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $r2 = <net.sourceforge.plantuml.ProgressBar: java.lang.String last>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i4 >= $i1 goto label4;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void print(char)>(32);

        i4 = i4 + 1;

        goto label3;

     label4:
        i5 = 0;

     label5:
        $r3 = <net.sourceforge.plantuml.ProgressBar: java.lang.String last>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i5 >= $i2 goto label6;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void print(char)>(8);

        i5 = i5 + 1;

        goto label5;

     label6:
        <net.sourceforge.plantuml.ProgressBar: java.lang.String last> = null;

        return;
    }

    public static void incTotal(int)
    {
        int i0, $i2, $i3;
        java.util.concurrent.atomic.AtomicInteger $r0, $r1, $r2;

        i0 := @parameter0: int;

        $r0 = <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger total>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(i0);

        $r1 = <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger done>;

        $i2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int intValue()>();

        $r2 = <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger total>;

        $i3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int intValue()>();

        staticinvoke <net.sourceforge.plantuml.ProgressBar: void printBar(int,int)>($i2, $i3);

        return;
    }

    private static synchronized void printBar(int, int)
    {
        boolean $z0;
        int i0, i1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r2, r8;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = <net.sourceforge.plantuml.ProgressBar: boolean enable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        if i0 != 0 goto label2;

        return;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = staticinvoke <net.sourceforge.plantuml.ProgressBar: java.lang.String getBar(int,int)>(i1, i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.ProgressBar: void print(java.lang.String)>(r8);

        return;
    }

    private static java.lang.String getBar(int, int)
    {
        java.lang.StringBuilder $r0;
        int i1, i2, $i3, i4, i5;
        java.lang.String $r2;
        char $c6;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i3 = 30 * i1;

        i4 = $i3 / i2;

        i5 = 0;

     label1:
        if i5 >= 30 goto label4;

        if i5 >= i4 goto label2;

        $c6 = 35;

        goto label3;

     label2:
        $c6 = 32;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        i5 = i5 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static void incDone(boolean)
    {
        java.util.concurrent.atomic.AtomicInteger $r0, $r1, $r2;
        int $i1, $i2;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger done>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r1 = <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger done>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int intValue()>();

        $r2 = <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger total>;

        $i2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int intValue()>();

        staticinvoke <net.sourceforge.plantuml.ProgressBar: void printBar(int,int)>($i1, $i2);

        return;
    }

    public static void setEnable(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <net.sourceforge.plantuml.ProgressBar: boolean enable> = z0;

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0, $r1;

        <net.sourceforge.plantuml.ProgressBar: java.lang.String last> = null;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger total> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <net.sourceforge.plantuml.ProgressBar: java.util.concurrent.atomic.AtomicInteger done> = $r1;

        return;
    }
}
