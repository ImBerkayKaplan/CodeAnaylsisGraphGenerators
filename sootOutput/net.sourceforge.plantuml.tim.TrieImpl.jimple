public class net.sourceforge.plantuml.tim.TrieImpl extends java.lang.Object implements net.sourceforge.plantuml.tim.Trie
{
    private final java.util.Map brothers;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.tim.TrieImpl r0;
        java.util.HashMap $r1;

        r0 := @this: net.sourceforge.plantuml.tim.TrieImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers> = $r1;

        return;
    }

    public void add(java.lang.String)
    {
        java.lang.String r0, $r5;
        int $i0;
        net.sourceforge.plantuml.tim.TrieImpl r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r6;

        r1 := @this: net.sourceforge.plantuml.tim.TrieImpl;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(0);

        if $i0 == -1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u0000");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <net.sourceforge.plantuml.tim.TrieImpl: void addInternal(net.sourceforge.plantuml.tim.TrieImpl,java.lang.String)>(r1, $r5);

        return;
    }

    private static void addInternal(net.sourceforge.plantuml.tim.TrieImpl, java.lang.String)
    {
        int $i0, $i1;
        char $c2;
        java.lang.Character r0;
        net.sourceforge.plantuml.tim.TrieImpl r1, r3;
        java.lang.UnsupportedOperationException $r2;
        java.lang.String r4;

        r3 := @parameter0: net.sourceforge.plantuml.tim.TrieImpl;

        r4 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        r0 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        r1 = specialinvoke r3.<net.sourceforge.plantuml.tim.TrieImpl: net.sourceforge.plantuml.tim.TrieImpl getOrCreate(java.lang.Character)>(r0);

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

        r3 = r1;

        goto label1;

     label2:
        return;
    }

    public boolean remove(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TrieImpl r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String r2, $r5;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.TrieImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u0000");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TrieImpl: boolean removeInternal(net.sourceforge.plantuml.tim.TrieImpl,java.lang.String)>(r0, $r5);

        return $z0;
    }

    private static boolean removeInternal(net.sourceforge.plantuml.tim.TrieImpl, java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.IllegalStateException $r0;
        char $c2, $c4;
        java.lang.Character r1, $r6;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r7;
        net.sourceforge.plantuml.tim.TrieImpl r4, r10;
        boolean $z0, $z1;
        java.lang.AssertionError $r8;
        java.lang.UnsupportedOperationException $r9;
        java.lang.String r11;

        r10 := @parameter0: net.sourceforge.plantuml.tim.TrieImpl;

        r11 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i0 > 1 goto label1;

        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r9;

     label1:
        $i1 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i1 <= 0 goto label7;

        $c2 = virtualinvoke r11.<java.lang.String: char charAt(int)>(0);

        r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r2 = r10.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.sourceforge.plantuml.tim.TrieImpl) $r3;

        if r4 != null goto label2;

        return 0;

     label2:
        r11 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>(1);

        $i3 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i3 != 1 goto label6;

        $z0 = <net.sourceforge.plantuml.tim.TrieImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $c4 = virtualinvoke r11.<java.lang.String: char charAt(int)>(0);

        if $c4 == 0 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $r5 = r4.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        if $r7 == null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        r10 = r4;

        goto label1;

     label7:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    private net.sourceforge.plantuml.tim.TrieImpl getOrCreate(java.lang.Character)
    {
        net.sourceforge.plantuml.tim.TrieImpl r0, $r4, r7;
        java.lang.Character r1;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;

        r0 := @this: net.sourceforge.plantuml.tim.TrieImpl;

        r1 := @parameter0: java.lang.Character;

        $r2 = r0.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (net.sourceforge.plantuml.tim.TrieImpl) $r3;

        if r7 != null goto label1;

        $r4 = new net.sourceforge.plantuml.tim.TrieImpl;

        specialinvoke $r4.<net.sourceforge.plantuml.tim.TrieImpl: void <init>()>();

        r7 = $r4;

        $r5 = r0.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r7;
    }

    public java.lang.String getLonguestMatchStartingIn(java.lang.String)
    {
        net.sourceforge.plantuml.tim.TrieImpl r0;
        java.lang.String r1, $r2;

        r0 := @this: net.sourceforge.plantuml.tim.TrieImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <net.sourceforge.plantuml.tim.TrieImpl: java.lang.String getLonguestMatchStartingIn(net.sourceforge.plantuml.tim.TrieImpl,java.lang.String)>(r0, r1);

        return $r2;
    }

    private static java.lang.String getLonguestMatchStartingIn(net.sourceforge.plantuml.tim.TrieImpl, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        int $i0, $i2;
        java.util.Map $r2, $r6, $r9, $r11;
        char $c1, $c3;
        java.lang.Character $r3, $r7, $r12;
        java.lang.Object $r4;
        net.sourceforge.plantuml.tim.TrieImpl r5, r14;
        boolean $z0, $z1;
        java.lang.String $r8, $r13, r15;

        r14 := @parameter0: net.sourceforge.plantuml.tim.TrieImpl;

        r15 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        if r14 == null goto label7;

        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        $r11 = r14.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        $r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        $z1 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>($r12);

        if $z1 == 0 goto label2;

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label2:
        return "";

     label3:
        $r2 = r14.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        $c1 = virtualinvoke r15.<java.lang.String: char charAt(int)>(0);

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (net.sourceforge.plantuml.tim.TrieImpl) $r4;

        if r5 == null goto label4;

        $r9 = r5.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        $i2 = interfaceinvoke $r9.<java.util.Map: int size()>();

        if $i2 != 0 goto label6;

     label4:
        $r6 = r14.<net.sourceforge.plantuml.tim.TrieImpl: java.util.Map brothers>;

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label5:
        return "";

     label6:
        $c3 = virtualinvoke r15.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        r14 = r5;

        r15 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>(1);

        goto label1;

     label7:
        return "";
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/TrieImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.TrieImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
