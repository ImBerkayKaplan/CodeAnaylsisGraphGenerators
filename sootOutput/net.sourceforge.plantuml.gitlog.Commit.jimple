public class net.sourceforge.plantuml.gitlog.Commit extends java.lang.Object
{
    private final java.lang.String name;
    private final java.lang.String comment;
    private final net.sourceforge.plantuml.gitlog.CursorPosition position;

    public void <init>(java.lang.String, net.sourceforge.plantuml.gitlog.CursorPosition)
    {
        net.sourceforge.plantuml.gitlog.Commit r0;
        java.lang.String r1, $r3;
        net.sourceforge.plantuml.gitlog.CursorPosition r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: net.sourceforge.plantuml.gitlog.Commit;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.gitlog.CursorPosition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String name> = r1;

        r0.<net.sourceforge.plantuml.gitlog.Commit: net.sourceforge.plantuml.gitlog.CursorPosition position> = r2;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.gitlog.CursorPosition: java.lang.String getCommentInLine()>();

        r0.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String comment> = $r3;

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>("* ");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>("*-");

        if $z1 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        return;
    }

    public java.lang.String getComment()
    {
        net.sourceforge.plantuml.gitlog.Commit r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.gitlog.Commit;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String comment>;

        return $r1;
    }

    public int hashCode()
    {
        net.sourceforge.plantuml.gitlog.Commit r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.gitlog.Commit;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        net.sourceforge.plantuml.gitlog.Commit r1, r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.gitlog.Commit;

        r0 := @parameter0: java.lang.Object;

        r1 = (net.sourceforge.plantuml.gitlog.Commit) r0;

        $r4 = r2.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String name>;

        $r3 = r1.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String name>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.gitlog.Commit r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.gitlog.Commit;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String name>;

        return $r1;
    }

    public java.util.List getCandidatesForDown()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.gitlog.Commit r2;
        net.sourceforge.plantuml.gitlog.CursorPosition $r3, $r4, $r6, $r7, r8;
        boolean $z0, $z1, $z3;
        java.util.List $r5;

        r2 := @this: net.sourceforge.plantuml.gitlog.Commit;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.gitlog.Commit: net.sourceforge.plantuml.gitlog.CursorPosition position>;

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(0, 1);

        $z0 = virtualinvoke $r4.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>("*");

        if $z0 == 0 goto label1;

        $r6 = r2.<net.sourceforge.plantuml.gitlog.Commit: net.sourceforge.plantuml.gitlog.CursorPosition position>;

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(0, 1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label1:
        r8 = r2.<net.sourceforge.plantuml.gitlog.Commit: net.sourceforge.plantuml.gitlog.CursorPosition position>;

        staticinvoke <net.sourceforge.plantuml.gitlog.Commit: void addAbove(java.util.List,net.sourceforge.plantuml.gitlog.CursorPosition)>($r0, r8);

     label2:
        r8 = virtualinvoke r8.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(1, 0);

        $z3 = virtualinvoke r8.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>(".");

        if $z3 == 0 goto label3;

        staticinvoke <net.sourceforge.plantuml.gitlog.Commit: void addAbove(java.util.List,net.sourceforge.plantuml.gitlog.CursorPosition)>($r0, r8);

        goto label2;

     label3:
        $z1 = virtualinvoke r8.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>("-");

        if $z1 == 0 goto label4;

        goto label2;

     label4:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    private static void addAbove(java.util.List, net.sourceforge.plantuml.gitlog.CursorPosition)
    {
        net.sourceforge.plantuml.gitlog.CursorPosition r0, $r1, $r2, $r3, $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        java.util.List r4;

        r4 := @parameter0: java.util.List;

        r0 := @parameter1: net.sourceforge.plantuml.gitlog.CursorPosition;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(0, 1);

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>("|");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(0, 1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r7);

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(1, 1);

        $z1 = virtualinvoke $r2.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>("\\");

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(1, 1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(-1, 1);

        $z2 = virtualinvoke $r3.<net.sourceforge.plantuml.gitlog.CursorPosition: boolean matches(java.lang.String)>("/");

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition move(int,int)>(-1, 1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        return;
    }

    public java.util.List getAncestors()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.gitlog.Commit r2, $r9;
        java.util.List $r3, $r5;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.gitlog.CursorPosition r7, r8;

        r2 := @this: net.sourceforge.plantuml.gitlog.Commit;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.gitlog.Commit: java.util.List getCandidatesForDown()>();

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.gitlog.CursorPosition) $r6;

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.CursorPosition getDownFromHere()>();

        $r9 = virtualinvoke r8.<net.sourceforge.plantuml.gitlog.CursorPosition: net.sourceforge.plantuml.gitlog.Commit getCommit()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r5;
    }

    public java.lang.String getName()
    {
        net.sourceforge.plantuml.gitlog.Commit r0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.plantuml.gitlog.Commit;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.Commit: java.lang.String name>;

        return $r1;
    }

    public final net.sourceforge.plantuml.gitlog.CursorPosition getPosition()
    {
        net.sourceforge.plantuml.gitlog.Commit r0;
        net.sourceforge.plantuml.gitlog.CursorPosition $r1;

        r0 := @this: net.sourceforge.plantuml.gitlog.Commit;

        $r1 = r0.<net.sourceforge.plantuml.gitlog.Commit: net.sourceforge.plantuml.gitlog.CursorPosition position>;

        return $r1;
    }
}
