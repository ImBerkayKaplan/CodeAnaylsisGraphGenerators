public class net.sourceforge.plantuml.svek.SvekNode extends java.lang.Object implements net.sourceforge.plantuml.posimo.Positionable, net.sourceforge.plantuml.svek.IShapePseudo, net.sourceforge.plantuml.Hideable
{
    private final net.sourceforge.plantuml.svek.ShapeType type;
    private final double width;
    private final double height;
    private final java.lang.String uid;
    private final int color;
    private double minX;
    private double minY;
    private final net.sourceforge.plantuml.svek.Margins shield;
    private final net.sourceforge.plantuml.cucadiagram.EntityPosition entityPosition;
    private final net.sourceforge.plantuml.svek.IEntityImage image;
    private net.sourceforge.plantuml.svek.Cluster cluster;
    private final boolean top;
    private final net.sourceforge.plantuml.cucadiagram.ILeaf leaf;
    private final net.sourceforge.plantuml.cucadiagram.IGroup group;
    private net.sourceforge.plantuml.ugraphic.Shadowable polygon;

    public net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition entityPosition>;

        return $r1;
    }

    public final net.sourceforge.plantuml.svek.Cluster getCluster()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.Cluster $r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Cluster cluster>;

        return $r1;
    }

    public final void setCluster(net.sourceforge.plantuml.svek.Cluster)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.Cluster r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r1 := @parameter0: net.sourceforge.plantuml.svek.Cluster;

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Cluster cluster> = r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9;
        net.sourceforge.plantuml.svek.SvekNode r1;
        java.lang.String $r2, $r10;
        net.sourceforge.plantuml.svek.IEntityImage $r5;
        net.sourceforge.plantuml.svek.ShapeType $r8;

        r1 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r1.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.svek.IEntityImage, net.sourceforge.plantuml.svek.ColorSequence, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.IEntityImage r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3;
        net.sourceforge.plantuml.cucadiagram.ILeaf r4;
        net.sourceforge.plantuml.cucadiagram.EntityPosition $r5;
        boolean $z0, $z1;
        net.sourceforge.plantuml.svek.ShapeType $r6, $r15, $r16, $r17, $r18, $r19, $r20;
        double $d0, $d1;
        net.sourceforge.plantuml.svek.ColorSequence r7;
        int $i0, $i1;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;
        java.lang.String $r10;
        net.sourceforge.plantuml.svek.Margins $r11, $r12;
        net.sourceforge.plantuml.cucadiagram.entity.EntityImpl $r13, $r22;
        net.sourceforge.plantuml.cucadiagram.IGroup $r14, $r23;
        java.lang.IllegalArgumentException $r21;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r4 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r1 := @parameter1: net.sourceforge.plantuml.svek.IEntityImage;

        r7 := @parameter2: net.sourceforge.plantuml.svek.ColorSequence;

        r2 := @parameter3: net.sourceforge.plantuml.graphic.StringBounder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r3 = interfaceinvoke r1.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r5 = interfaceinvoke r4.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.EntityPosition getEntityPosition()>();

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.EntityPosition entityPosition> = $r5;

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image> = r1;

        $z0 = interfaceinvoke r4.<net.sourceforge.plantuml.cucadiagram.ILeaf: boolean isTop()>();

        r0.<net.sourceforge.plantuml.svek.SvekNode: boolean top> = $z0;

        $r6 = interfaceinvoke r1.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.svek.ShapeType getShapeType()>();

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type> = $r6;

        $d0 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        r0.<net.sourceforge.plantuml.svek.SvekNode: double width> = $d0;

        $d1 = virtualinvoke r3.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        r0.<net.sourceforge.plantuml.svek.SvekNode: double height> = $d1;

        $i0 = virtualinvoke r7.<net.sourceforge.plantuml.svek.ColorSequence: int getValue()>();

        r0.<net.sourceforge.plantuml.svek.SvekNode: int color> = $i0;

        $r8 = newarray (java.lang.Object)[1];

        $i1 = r0.<net.sourceforge.plantuml.svek.SvekNode: int color>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("sh%04d", $r8);

        r0.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String uid> = $r10;

        $r11 = interfaceinvoke r1.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield> = $r11;

        $r12 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $z1 = virtualinvoke $r12.<net.sourceforge.plantuml.svek.Margins: boolean isZero()>();

        if $z1 != 0 goto label1;

        $r16 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r15 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        if $r16 == $r15 goto label1;

        $r18 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r17 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_HTML_FOR_PORTS>;

        if $r18 == $r17 goto label1;

        $r20 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r19 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_WITH_CIRCLE_INSIDE>;

        if $r20 == $r19 goto label1;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r21;

     label1:
        $r22 = (net.sourceforge.plantuml.cucadiagram.entity.EntityImpl) r4;

        $r23 = virtualinvoke $r22.<net.sourceforge.plantuml.cucadiagram.entity.EntityImpl: net.sourceforge.plantuml.cucadiagram.IGroup getOriginalGroup()>();

        if $r23 != null goto label2;

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.IGroup group> = null;

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.ILeaf leaf> = r4;

        goto label3;

     label2:
        $r13 = (net.sourceforge.plantuml.cucadiagram.entity.EntityImpl) r4;

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.cucadiagram.entity.EntityImpl: net.sourceforge.plantuml.cucadiagram.IGroup getOriginalGroup()>();

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.IGroup group> = $r14;

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.cucadiagram.ILeaf leaf> = null;

     label3:
        return;
    }

    public final net.sourceforge.plantuml.svek.ShapeType getType()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.ShapeType $r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        return $r1;
    }

    public final double getWidth()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $d0 = r0.<net.sourceforge.plantuml.svek.SvekNode: double width>;

        return $d0;
    }

    public final double getHeight()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $d0 = r0.<net.sourceforge.plantuml.svek.SvekNode: double height>;

        return $d0;
    }

    public void appendShape(java.lang.StringBuilder, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.ShapeType $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.StringBuilder r7, $r14, $r15, $r17, $r21, $r22, $r24, $r28, $r29, $r31, $r32;
        java.lang.String $r8, $r16, $r18, $r23, $r25, $r30, $r33;
        double $d0, $d1;
        int $i0;
        net.sourceforge.plantuml.svek.Margins $r36;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r37;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r7 := @parameter0: java.lang.StringBuilder;

        r37 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r1 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_HTML_FOR_PORTS>;

        if $r2 != $r1 goto label1;

        specialinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: void appendLabelHtmlSpecialForLink(java.lang.StringBuilder,net.sourceforge.plantuml.graphic.StringBounder)>(r7, r37);

        return;

     label1:
        $r4 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r3 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_WITH_CIRCLE_INSIDE>;

        if $r4 != $r3 goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: void appendHtml(java.lang.StringBuilder)>(r7);

        return;

     label2:
        $r6 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r5 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        if $r6 != $r5 goto label3;

        $r36 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $z0 = virtualinvoke $r36.<net.sourceforge.plantuml.svek.Margins: boolean isZero()>();

        if $z0 != 0 goto label3;

        specialinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: void appendHtml(java.lang.StringBuilder)>(r7);

        return;

     label3:
        $r8 = r0.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String uid>;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        specialinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: void appendShapeInternal(java.lang.StringBuilder)>(r7);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"\"");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("width=");

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: double getWidth()>();

        $r16 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: java.lang.String pixelToInches(double)>($d0);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("height=");

        $d1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: double getHeight()>();

        $r23 = staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: java.lang.String pixelToInches(double)>($d1);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("color=\"");

        $i0 = r0.<net.sourceforge.plantuml.svek.SvekNode: int color>;

        $r30 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>($i0);

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r7);

        return;
    }

    private void appendHtml(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0;
        net.sourceforge.plantuml.svek.SvekNode r1;
        java.lang.String $r2;

        r1 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r0 := @parameter0: java.lang.StringBuilder;

        $r2 = r1.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String uid>;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=plaintext,");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=<");

        specialinvoke r1.<net.sourceforge.plantuml.svek.SvekNode: void appendLabelHtml(java.lang.StringBuilder)>(r0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r0);

        return;
    }

    private void appendLabelHtml(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0, $r8, $r9, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20;
        net.sourceforge.plantuml.svek.SvekNode r3;
        net.sourceforge.plantuml.svek.Margins $r4, $r7, $r25, $r28;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0;
        java.lang.String $r10, $r13, $r21;

        r3 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r0 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TABLE BORDER=\"0\" CELLBORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\">");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TR>");

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder)>(r0);

        $r4 = r3.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $d0 = virtualinvoke $r4.<net.sourceforge.plantuml.svek.Margins: double getY1()>();

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder,double,double)>(r0, 1.0, $d0);

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder)>(r0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TR>");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TR>");

        $r7 = r3.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $d1 = virtualinvoke $r7.<net.sourceforge.plantuml.svek.Margins: double getX1()>();

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder,double,double)>(r0, $d1, 1.0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TD BGCOLOR=\"");

        $i0 = r3.<net.sourceforge.plantuml.svek.SvekNode: int color>;

        $r10 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>($i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FIXEDSIZE=\"TRUE\" WIDTH=\"");

        $d2 = virtualinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: double getWidth()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" HEIGHT=\"");

        $d3 = virtualinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: double getHeight()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PORT=\"h\">");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TD>");

        $r25 = r3.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $d4 = virtualinvoke $r25.<net.sourceforge.plantuml.svek.Margins: double getX2()>();

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder,double,double)>(r0, $d4, 1.0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TR>");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TR>");

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder)>(r0);

        $r28 = r3.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $d5 = virtualinvoke $r28.<net.sourceforge.plantuml.svek.Margins: double getY2()>();

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder,double,double)>(r0, 1.0, $d5);

        specialinvoke r3.<net.sourceforge.plantuml.svek.SvekNode: void appendTd(java.lang.StringBuilder)>(r0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TR>");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TABLE>");

        return;
    }

    private void appendLabelHtmlSpecialForLink(java.lang.StringBuilder, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.svek.WithPorts $r3;
        net.sourceforge.plantuml.svek.Ports r4;
        java.lang.StringBuilder r5, $r11, $r12, $r14, $r15;
        java.lang.String $r6, $r13, $r16, r25;
        int $i0;
        java.util.Collection $r18;
        java.util.Iterator r19;
        boolean $z0;
        double $d0, $d1, $d2, d3, $d4, d5;
        java.lang.Object $r23;
        net.sourceforge.plantuml.svek.PortGeometry r24;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r5 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        $r3 = (net.sourceforge.plantuml.svek.WithPorts) $r1;

        r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.svek.WithPorts: net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r6 = r0.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String uid>;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=plaintext,");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=<");

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TABLE BGCOLOR=\"");

        $i0 = r0.<net.sourceforge.plantuml.svek.SvekNode: int color>;

        $r13 = staticinvoke <net.sourceforge.plantuml.StringUtils: java.lang.String sharp000000(int)>($i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" BORDER=\"0\" CELLBORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\">");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        d5 = 0.0;

        $r18 = virtualinvoke r4.<net.sourceforge.plantuml.svek.Ports: java.util.Collection getAllPortGeometry()>();

        r19 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r23 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r24 = (net.sourceforge.plantuml.svek.PortGeometry) $r23;

        r25 = virtualinvoke r24.<net.sourceforge.plantuml.svek.PortGeometry: java.lang.String getId()>();

        $d2 = virtualinvoke r24.<net.sourceforge.plantuml.svek.PortGeometry: double getPosition()>();

        d3 = $d2 - d5;

        specialinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: void appendTr(java.lang.StringBuilder,java.lang.String,double)>(r5, null, d3);

        $d4 = virtualinvoke r24.<net.sourceforge.plantuml.svek.PortGeometry: double getHeight()>();

        specialinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: void appendTr(java.lang.StringBuilder,java.lang.String,double)>(r5, r25, $d4);

        d5 = virtualinvoke r24.<net.sourceforge.plantuml.svek.PortGeometry: double getLastY()>();

        goto label1;

     label2:
        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: double getHeight()>();

        $d1 = $d0 - d5;

        specialinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: void appendTr(java.lang.StringBuilder,java.lang.String,double)>(r5, null, $d1);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TABLE>");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];");

        staticinvoke <net.sourceforge.plantuml.svek.SvekUtils: void println(java.lang.StringBuilder)>(r5);

        return;
    }

    private void appendTr(java.lang.StringBuilder, java.lang.String, double)
    {
        double d0, $d1;
        byte $b0;
        java.lang.StringBuilder r0, $r3, $r4, $r6, $r7, $r8, $r9, $r16, $r17, $r18, $r19;
        net.sourceforge.plantuml.svek.SvekNode r5;
        java.lang.String $r10, r12, $r20;

        r5 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r0 := @parameter0: java.lang.StringBuilder;

        r12 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TR>");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TD ");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FIXEDSIZE=\"TRUE\" WIDTH=\"");

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.svek.SvekNode: double getWidth()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" HEIGHT=\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        if r12 == null goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PORT=\"");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TD>");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TR>");

        return;
    }

    private void appendTd(java.lang.StringBuilder, double, double)
    {
        java.lang.StringBuilder r0, $r2, $r3, $r4, $r5, $r6, $r7;
        double d0, d1;
        java.lang.String $r8;
        net.sourceforge.plantuml.svek.SvekNode r12;

        r12 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r0 := @parameter0: java.lang.StringBuilder;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TD");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FIXEDSIZE=\"TRUE\" WIDTH=\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" HEIGHT=\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TD>");

        return;
    }

    private void appendTd(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0;
        net.sourceforge.plantuml.svek.SvekNode r3;

        r3 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r0 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<TD>");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</TD>");

        return;
    }

    private void appendShapeInternal(java.lang.StringBuilder)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.ShapeType $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r28;
        java.lang.StringBuilder r5;
        java.lang.IllegalStateException $r27;
        java.lang.String $r29;
        java.lang.UnsupportedOperationException $r37, $r39;
        net.sourceforge.plantuml.svek.Margins $r38;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r5 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r1 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        if $r2 != $r1 goto label01;

        $r38 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $z0 = virtualinvoke $r38.<net.sourceforge.plantuml.svek.Margins: boolean isZero()>();

        if $z0 != 0 goto label01;

        $r39 = new java.lang.UnsupportedOperationException;

        specialinvoke $r39.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r39;

     label01:
        $r4 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r3 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        if $r4 == $r3 goto label02;

        $r8 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r7 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_WITH_CIRCLE_INSIDE>;

        if $r8 == $r7 goto label02;

        $r10 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r9 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType FOLDER>;

        if $r10 != $r9 goto label03;

     label02:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=rect");

        goto label12;

     label03:
        $r12 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r11 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE_HTML_FOR_PORTS>;

        if $r12 != $r11 goto label04;

        $r37 = new java.lang.UnsupportedOperationException;

        specialinvoke $r37.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r37;

     label04:
        $r14 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r13 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType OCTAGON>;

        if $r14 != $r13 goto label05;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=octagon");

        goto label12;

     label05:
        $r16 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r15 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType HEXAGON>;

        if $r16 != $r15 goto label06;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=hexagon");

        goto label12;

     label06:
        $r18 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r17 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType DIAMOND>;

        if $r18 != $r17 goto label07;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=diamond");

        goto label12;

     label07:
        $r20 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r19 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType CIRCLE>;

        if $r20 != $r19 goto label08;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=circle");

        goto label12;

     label08:
        $r22 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r21 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType CIRCLE_IN_RECT>;

        if $r22 != $r21 goto label09;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=circle");

        goto label12;

     label09:
        $r24 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r23 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType OVAL>;

        if $r24 != $r23 goto label10;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=ellipse");

        goto label12;

     label10:
        $r26 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r25 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType ROUND_RECTANGLE>;

        if $r26 != $r25 goto label11;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=rect,style=rounded");

        goto label12;

     label11:
        $r27 = new java.lang.IllegalStateException;

        $r28 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType type>;

        $r29 = virtualinvoke $r28.<net.sourceforge.plantuml.svek.ShapeType: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r27;

     label12:
        return;
    }

    public final java.lang.String getUid()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        java.lang.String $r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String uid>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.svek.SvekNode: java.lang.String uid>;

        return $r2;
    }

    public final double getMinX()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $d0 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        return $d0;
    }

    public final double getMinY()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $d0 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        return $d0;
    }

    public net.sourceforge.plantuml.svek.IEntityImage getImage()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        return $r1;
    }

    public final boolean isTop()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $z0 = r0.<net.sourceforge.plantuml.svek.SvekNode: boolean top>;

        return $z0;
    }

    public java.awt.geom.Point2D getPosition()
    {
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.svek.SvekNode r1;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d0 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getSize()
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.SvekNode r1;
        double $d0, $d1;

        r1 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.svek.SvekNode: double width>;

        $d0 = r1.<net.sourceforge.plantuml.svek.SvekNode: double height>;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()
    {
        net.sourceforge.plantuml.svek.ClusterPosition $r0;
        net.sourceforge.plantuml.svek.SvekNode r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r0 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d7 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d6 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        $d1 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d0 = r1.<net.sourceforge.plantuml.svek.SvekNode: double width>;

        $d5 = $d1 + $d0;

        $d3 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        $d2 = r1.<net.sourceforge.plantuml.svek.SvekNode: double height>;

        $d4 = $d3 + $d2;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d7, $d6, $d5, $d4);

        return $r0;
    }

    public boolean isShielded()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.Margins $r1;
        boolean $z0, $z1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.Margins shield>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.svek.Margins: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void moveSvek(double, double)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        double d0, $d1, $d2, d3, $d4, $d5;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        $d1 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d2 = $d1 + d0;

        r0.<net.sourceforge.plantuml.svek.SvekNode: double minX> = $d2;

        $d4 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        $d5 = $d4 + d3;

        r0.<net.sourceforge.plantuml.svek.SvekNode: double minY> = $d5;

        return;
    }

    public double getMaxWidthFromLabelForEntryExit(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1, $r3, $r4;
        boolean $z0;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1;
        net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r6;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        $z0 = $r1 instanceof net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder;

        if $z0 == 0 goto label1;

        $r4 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        r5 = (net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder) $r4;

        $d1 = virtualinvoke r5.<net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder: double getMaxWidthFromLabelForEntryExit(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $d1;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        r6 = interfaceinvoke $r3.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        $z0 = interfaceinvoke $r1.<net.sourceforge.plantuml.svek.IEntityImage: boolean isHidden()>();

        return $z0;
    }

    public void setPolygon(double, double, java.util.List)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.ugraphic.UPolygon $r1, $r3;
        java.util.List r2;
        double d0, d1, $d2, $d3;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r2 := @parameter2: java.util.List;

        $r1 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>(java.util.List)>(r2);

        $d3 = neg d0;

        $d2 = neg d1;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.ugraphic.UPolygon: net.sourceforge.plantuml.ugraphic.UPolygon translate(double,double)>($d3, $d2);

        r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.ugraphic.Shadowable polygon> = $r3;

        return;
    }

    public net.sourceforge.plantuml.ugraphic.Shadowable getPolygon()
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.ugraphic.Shadowable $r1;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.ugraphic.Shadowable polygon>;

        return $r1;
    }

    public java.awt.geom.Point2D getPoint2D(double, double)
    {
        java.awt.geom.Point2D$Double $r0;
        net.sourceforge.plantuml.svek.SvekNode r1;
        double d0, $d1, d2, $d3, $d4, $d5;

        r1 := @this: net.sourceforge.plantuml.svek.SvekNode;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d5 = $d1 + d0;

        $d3 = r1.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        $d4 = $d3 + d2;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        return $r0;
    }

    public java.awt.geom.Point2D projection(java.awt.geom.Point2D, net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.ShapeType $r1, $r2;
        net.sourceforge.plantuml.svek.ClusterPosition $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        java.awt.geom.Point2D r5;
        boolean $z0;
        net.sourceforge.plantuml.svek.IEntityImage $r6;
        net.sourceforge.plantuml.graphic.StringBounder r7;
        net.sourceforge.plantuml.svek.image.EntityImageDescription $r8;
        net.sourceforge.plantuml.awt.geom.Dimension2D r9;
        byte $b0;
        java.awt.geom.Point2D$Double $r10;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r5 := @parameter0: java.awt.geom.Point2D;

        r7 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.ShapeType getType()>();

        $r2 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType FOLDER>;

        if $r1 == $r2 goto label1;

        return r5;

     label1:
        $r3 = new net.sourceforge.plantuml.svek.ClusterPosition;

        $d7 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d6 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        $d1 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d0 = r0.<net.sourceforge.plantuml.svek.SvekNode: double width>;

        $d5 = $d1 + $d0;

        $d3 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minY>;

        $d2 = r0.<net.sourceforge.plantuml.svek.SvekNode: double height>;

        $d4 = $d3 + $d2;

        specialinvoke $r3.<net.sourceforge.plantuml.svek.ClusterPosition: void <init>(double,double,double,double)>($d7, $d6, $d5, $d4);

        $z0 = virtualinvoke $r3.<net.sourceforge.plantuml.svek.ClusterPosition: boolean isPointJustUpper(java.awt.geom.Point2D)>(r5);

        if $z0 == 0 goto label3;

        $r6 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        $r8 = (net.sourceforge.plantuml.svek.image.EntityImageDescription) $r6;

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.svek.image.EntityImageDescription: net.sourceforge.plantuml.awt.geom.Dimension2D getNameDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r7);

        $d8 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d9 = r0.<net.sourceforge.plantuml.svek.SvekNode: double minX>;

        $d10 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d11 = $d9 + $d10;

        $b0 = $d8 cmpg $d11;

        if $b0 >= 0 goto label2;

        return r5;

     label2:
        $r10 = new java.awt.geom.Point2D$Double;

        $d12 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d13 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        $d14 = virtualinvoke r9.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d15 = $d13 + $d14;

        $d16 = $d15 + 4.0;

        specialinvoke $r10.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d12, $d16);

        return $r10;

     label3:
        return r5;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.svek.IEntityImage $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.svek.IEntityImage: double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public void addImpact(double)
    {
        net.sourceforge.plantuml.svek.SvekNode r0;
        net.sourceforge.plantuml.svek.IEntityImage $r1;
        double d0;
        net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface $r2;

        r0 := @this: net.sourceforge.plantuml.svek.SvekNode;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.svek.SvekNode: net.sourceforge.plantuml.svek.IEntityImage image>;

        $r2 = (net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface) $r1;

        virtualinvoke $r2.<net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface: void addImpact(double)>(d0);

        return;
    }
}
