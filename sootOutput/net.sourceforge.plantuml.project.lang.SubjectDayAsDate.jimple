public class net.sourceforge.plantuml.project.lang.SubjectDayAsDate extends java.lang.Object implements net.sourceforge.plantuml.project.lang.Subject
{

    public void <init>()
    {
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r0;

        r0 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public net.sourceforge.plantuml.project.Failable getMe(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, $r2;
        java.lang.IllegalStateException $r3;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r4;
        net.sourceforge.plantuml.project.GanttDiagram r5;
        net.sourceforge.plantuml.project.time.Day $r6, $r8;
        net.sourceforge.plantuml.project.Failable $r7, $r9;

        r4 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        r5 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("BDAY", 0);

        if $r1 == null goto label1;

        $r8 = specialinvoke r4.<net.sourceforge.plantuml.project.lang.SubjectDayAsDate: net.sourceforge.plantuml.project.time.Day resultB(net.sourceforge.plantuml.command.regex.RegexResult)>(r0);

        $r9 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r8);

        return $r9;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ECOUNT", 0);

        if $r2 == null goto label2;

        $r6 = specialinvoke r4.<net.sourceforge.plantuml.project.lang.SubjectDayAsDate: net.sourceforge.plantuml.project.time.Day resultE(net.sourceforge.plantuml.project.GanttDiagram,net.sourceforge.plantuml.command.regex.RegexResult)>(r5, r0);

        $r7 = staticinvoke <net.sourceforge.plantuml.project.Failable: net.sourceforge.plantuml.project.Failable ok(java.lang.Object)>($r6);

        return $r7;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }

    private net.sourceforge.plantuml.project.time.Day resultB(net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1, $r2, $r3;
        int i0, i1, i2;
        net.sourceforge.plantuml.project.time.Day $r4;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r5;

        r5 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        r0 := @parameter0: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("BDAY", 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("BMONTH", 0);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("BYEAR", 0);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = staticinvoke <net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day create(int,int,int)>(i2, i1, i0);

        return $r4;
    }

    private net.sourceforge.plantuml.project.time.Day resultE(net.sourceforge.plantuml.project.GanttDiagram, net.sourceforge.plantuml.command.regex.RegexResult)
    {
        net.sourceforge.plantuml.command.regex.RegexResult r0;
        java.lang.String $r1;
        int i0;
        net.sourceforge.plantuml.project.GanttDiagram r2;
        net.sourceforge.plantuml.project.time.Day $r3, $r4;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r5;

        r5 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        r2 := @parameter0: net.sourceforge.plantuml.project.GanttDiagram;

        r0 := @parameter1: net.sourceforge.plantuml.command.regex.RegexResult;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexResult: java.lang.String get(java.lang.String,int)>("ECOUNT", 0);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.project.GanttDiagram: net.sourceforge.plantuml.project.time.Day getStartingDate()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.project.time.Day: net.sourceforge.plantuml.project.time.Day addDays(int)>(i0);

        return $r4;
    }

    public java.util.Collection getSentences()
    {
        net.sourceforge.plantuml.project.lang.SentenceSimple[] $r0;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate$Close $r1;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r2;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate$Open $r3;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate$InColor $r4;
        java.util.List $r5;

        r2 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        $r0 = newarray (net.sourceforge.plantuml.project.lang.SentenceSimple)[3];

        $r1 = new net.sourceforge.plantuml.project.lang.SubjectDayAsDate$Close;

        specialinvoke $r1.<net.sourceforge.plantuml.project.lang.SubjectDayAsDate$Close: void <init>(net.sourceforge.plantuml.project.lang.SubjectDayAsDate)>(r2);

        $r0[0] = $r1;

        $r3 = new net.sourceforge.plantuml.project.lang.SubjectDayAsDate$Open;

        specialinvoke $r3.<net.sourceforge.plantuml.project.lang.SubjectDayAsDate$Open: void <init>(net.sourceforge.plantuml.project.lang.SubjectDayAsDate)>(r2);

        $r0[1] = $r3;

        $r4 = new net.sourceforge.plantuml.project.lang.SubjectDayAsDate$InColor;

        specialinvoke $r4.<net.sourceforge.plantuml.project.lang.SubjectDayAsDate$InColor: void <init>(net.sourceforge.plantuml.project.lang.SubjectDayAsDate)>(r2);

        $r0[2] = $r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r5;
    }

    public net.sourceforge.plantuml.command.regex.IRegex toRegex()
    {
        net.sourceforge.plantuml.command.regex.RegexOr $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r2;
        net.sourceforge.plantuml.command.regex.IRegex $r3, $r4;

        r2 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexOr;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDayAsDate: net.sourceforge.plantuml.command.regex.IRegex toRegexB()>();

        $r1[0] = $r3;

        $r4 = specialinvoke r2.<net.sourceforge.plantuml.project.lang.SubjectDayAsDate: net.sourceforge.plantuml.command.regex.IRegex toRegexE()>();

        $r1[1] = $r4;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexOr: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexB()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r7;

        r7 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[5];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BYEAR", "([\\d]{4})");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[1] = $r3;

        $r4 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BMONTH", "([\\d]{1,2})");

        $r1[2] = $r4;

        $r5 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r5.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("\\D");

        $r1[3] = $r5;

        $r6 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("BDAY", "([\\d]{1,2})");

        $r1[4] = $r6;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }

    private net.sourceforge.plantuml.command.regex.IRegex toRegexE()
    {
        net.sourceforge.plantuml.command.regex.RegexConcat $r0;
        net.sourceforge.plantuml.command.regex.IRegex[] $r1;
        net.sourceforge.plantuml.command.regex.RegexLeaf $r2, $r3;
        net.sourceforge.plantuml.project.lang.SubjectDayAsDate r4;

        r4 := @this: net.sourceforge.plantuml.project.lang.SubjectDayAsDate;

        $r0 = new net.sourceforge.plantuml.command.regex.RegexConcat;

        $r1 = newarray (net.sourceforge.plantuml.command.regex.IRegex)[2];

        $r2 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r2.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String)>("[dD]\\+");

        $r1[0] = $r2;

        $r3 = new net.sourceforge.plantuml.command.regex.RegexLeaf;

        specialinvoke $r3.<net.sourceforge.plantuml.command.regex.RegexLeaf: void <init>(java.lang.String,java.lang.String)>("ECOUNT", "([\\d]+)");

        $r1[1] = $r3;

        specialinvoke $r0.<net.sourceforge.plantuml.command.regex.RegexConcat: void <init>(net.sourceforge.plantuml.command.regex.IRegex[])>($r1);

        return $r0;
    }
}
