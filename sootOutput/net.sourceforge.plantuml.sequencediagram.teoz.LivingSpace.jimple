public class net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace extends java.lang.Object
{
    private final net.sourceforge.plantuml.sequencediagram.Participant p;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.skin.ComponentType headType;
    private final net.sourceforge.plantuml.skin.ComponentType tailType;
    private final net.sourceforge.plantuml.sequencediagram.teoz.MutingLine mutingLine;
    private final net.sourceforge.plantuml.skin.rose.Rose rose;
    private final net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes liveboxes;
    private final net.sourceforge.plantuml.real.Real posB;
    private net.sourceforge.plantuml.real.Real posC;
    private net.sourceforge.plantuml.real.Real posD;
    private boolean create;
    private double createY;
    private final net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober;
    private double marginBefore;
    private double marginAfter;

    public int getLevelAt(net.sourceforge.plantuml.sequencediagram.teoz.Tile, net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.sequencediagram.teoz.Tile r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes $r2;
        net.sourceforge.plantuml.sequencediagram.Event $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode r4;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.teoz.Tile;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes liveboxes>;

        $r3 = interfaceinvoke r1.<net.sourceforge.plantuml.sequencediagram.teoz.Tile: net.sourceforge.plantuml.sequencediagram.Event getEvent()>();

        $i0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: int getLevelAt(net.sourceforge.plantuml.sequencediagram.Event,net.sourceforge.plantuml.sequencediagram.teoz.EventsHistoryMode)>($r3, r4);

        return $i0;
    }

    public void addStepForLivebox(net.sourceforge.plantuml.sequencediagram.Event, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.sequencediagram.Event r1;
        double d0;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.sequencediagram.Event;

        d0 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes liveboxes>;

        virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: void addStep(net.sourceforge.plantuml.sequencediagram.Event,double)>(r1, d0);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8, $r11, $r12, $r15;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r1;
        net.sourceforge.plantuml.sequencediagram.Participant $r2;
        java.lang.String $r3, $r10, $r14, $r16;
        net.sourceforge.plantuml.real.Real $r6, $r9, $r13;
        double $d0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $r3 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.Participant: java.lang.String getCode()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" B=");

        $r6 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posB>;

        $d0 = interfaceinvoke $r6.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/C=");

        $r9 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posC>;

        $r10 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: java.lang.String currentValue(net.sourceforge.plantuml.real.Real)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/D=");

        $r13 = r1.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posD>;

        $r14 = staticinvoke <net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: java.lang.String currentValue(net.sourceforge.plantuml.real.Real)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    private static java.lang.String currentValue(net.sourceforge.plantuml.real.Real)
    {
        net.sourceforge.plantuml.real.Real r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        double $d0;
        java.lang.String $r4;

        r0 := @parameter0: net.sourceforge.plantuml.real.Real;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d0 = interfaceinvoke r0.<net.sourceforge.plantuml.real.Real: double getCurrentValue()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void <init>(net.sourceforge.plantuml.sequencediagram.Participant, net.sourceforge.plantuml.sequencediagram.ParticipantEnglober, net.sourceforge.plantuml.skin.rose.Rose, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.real.Real, java.util.List)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.skin.rose.Rose $r1, r25;
        net.sourceforge.plantuml.sequencediagram.Participant r2;
        net.sourceforge.plantuml.ISkinParam r3;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober r4;
        net.sourceforge.plantuml.real.Real r5;
        net.sourceforge.plantuml.sequencediagram.ParticipantType $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.IllegalArgumentException $r22;
        net.sourceforge.plantuml.skin.ComponentType $r23, $r24, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40;
        java.util.List r26;
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine $r41;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes $r42;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r2 := @parameter0: net.sourceforge.plantuml.sequencediagram.Participant;

        r4 := @parameter1: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober;

        r25 := @parameter2: net.sourceforge.plantuml.skin.rose.Rose;

        r3 := @parameter3: net.sourceforge.plantuml.ISkinParam;

        r5 := @parameter4: net.sourceforge.plantuml.real.Real;

        r26 := @parameter5: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r1.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.rose.Rose rose> = $r1;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: boolean create> = 0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double createY> = 0.0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.ISkinParam skinParam> = r3;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober> = r4;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posB> = r5;

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r7 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType PARTICIPANT>;

        if $r6 != $r7 goto label1;

        $r39 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType PARTICIPANT_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r39;

        $r40 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType PARTICIPANT_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r40;

        goto label9;

     label1:
        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r9 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType ACTOR>;

        if $r8 != $r9 goto label2;

        $r37 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ACTOR_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r37;

        $r38 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ACTOR_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r38;

        goto label9;

     label2:
        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r11 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType BOUNDARY>;

        if $r10 != $r11 goto label3;

        $r35 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType BOUNDARY_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r35;

        $r36 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType BOUNDARY_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r36;

        goto label9;

     label3:
        $r12 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r13 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType CONTROL>;

        if $r12 != $r13 goto label4;

        $r33 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType CONTROL_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r33;

        $r34 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType CONTROL_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r34;

        goto label9;

     label4:
        $r14 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r15 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType ENTITY>;

        if $r14 != $r15 goto label5;

        $r31 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENTITY_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r31;

        $r32 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType ENTITY_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r32;

        goto label9;

     label5:
        $r16 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r17 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType QUEUE>;

        if $r16 != $r17 goto label6;

        $r29 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType QUEUE_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r29;

        $r30 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType QUEUE_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r30;

        goto label9;

     label6:
        $r18 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r19 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType DATABASE>;

        if $r18 != $r19 goto label7;

        $r27 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DATABASE_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r27;

        $r28 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType DATABASE_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r28;

        goto label9;

     label7:
        $r20 = virtualinvoke r2.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.sequencediagram.ParticipantType getType()>();

        $r21 = <net.sourceforge.plantuml.sequencediagram.ParticipantType: net.sourceforge.plantuml.sequencediagram.ParticipantType COLLECTIONS>;

        if $r20 != $r21 goto label8;

        $r23 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType COLLECTIONS_HEAD>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType> = $r23;

        $r24 = <net.sourceforge.plantuml.skin.ComponentType: net.sourceforge.plantuml.skin.ComponentType COLLECTIONS_TAIL>;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType tailType> = $r24;

        goto label9;

     label8:
        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r22;

     label9:
        $r41 = new net.sourceforge.plantuml.sequencediagram.teoz.MutingLine;

        specialinvoke $r41.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: void <init>(net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam,java.util.List,net.sourceforge.plantuml.sequencediagram.Participant)>(r25, r3, r26, r2);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine mutingLine> = $r41;

        $r42 = new net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes;

        specialinvoke $r42.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: void <init>(net.sourceforge.plantuml.sequencediagram.Participant,java.util.List,net.sourceforge.plantuml.skin.rose.Rose,net.sourceforge.plantuml.ISkinParam)>(r2, r26, r25, r3);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes liveboxes> = $r42;

        return;
    }

    private boolean useContinueLineBecauseOfDelay(java.util.List)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.ISkinParam $r1;
        java.lang.String r2, $r3;
        boolean $z0, $z1, $z2;
        java.util.List r4;
        java.util.Iterator r5;
        java.lang.Object $r6;
        net.sourceforge.plantuml.sequencediagram.Event r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r4 := @parameter0: java.util.List;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.ISkinParam skinParam>;

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.ISkinParam: java.lang.String getValue(java.lang.String)>("lifelineStrategy");

        $r3 = "nosolid";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.sequencediagram.Event) $r6;

        $z2 = r7 instanceof net.sourceforge.plantuml.sequencediagram.Delay;

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public void drawLineAndLiveboxes(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.ugraphic.UGraphic r1;
        net.sourceforge.plantuml.skin.Context2D r2;
        double d0, $d1, $d2;
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine $r3;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d0 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine mutingLine>;

        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double createY>;

        virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: void drawLine(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,double,double)>(r1, r2, $d1, d0);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes liveboxes>;

        $d2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double createY>;

        virtualinvoke $r4.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: void drawBoxes(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Context2D,double,double)>(r1, r2, $d2, d0);

        return;
    }

    public void drawHead(net.sourceforge.plantuml.ugraphic.UGraphic, net.sourceforge.plantuml.skin.Context2D, net.sourceforge.plantuml.graphic.VerticalAlignment, net.sourceforge.plantuml.graphic.HorizontalAlignment)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        boolean $z0, $z1;
        net.sourceforge.plantuml.sequencediagram.Participant $r1, $r5, $r9, $r20;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r8;
        net.sourceforge.plantuml.skin.ComponentType $r6;
        net.sourceforge.plantuml.SkinParamBackcolored $r7;
        net.sourceforge.plantuml.cucadiagram.Display $r10;
        net.sourceforge.plantuml.skin.Component r11;
        net.sourceforge.plantuml.graphic.StringBounder $r12;
        net.sourceforge.plantuml.awt.geom.Dimension2D r13;
        net.sourceforge.plantuml.graphic.HorizontalAlignment r14, $r15;
        net.sourceforge.plantuml.graphic.VerticalAlignment r16, $r17, $r25;
        net.sourceforge.plantuml.skin.Area $r18;
        net.sourceforge.plantuml.Url r21;
        net.sourceforge.plantuml.skin.Context2D r22;
        double $d0, $d1, $d2, $d3, $d4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r23, $r24;
        net.sourceforge.plantuml.ugraphic.UGraphic r26;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r26 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        r22 := @parameter1: net.sourceforge.plantuml.skin.Context2D;

        r16 := @parameter2: net.sourceforge.plantuml.graphic.VerticalAlignment;

        r14 := @parameter3: net.sourceforge.plantuml.graphic.HorizontalAlignment;

        $z0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: boolean create>;

        if $z0 == 0 goto label1;

        $r25 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment BOTTOM>;

        if r16 != $r25 goto label1;

        return;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.rose.Rose rose>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType>;

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = virtualinvoke $r5.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.SkinParamBackcolored getSkinParamBackcolored(net.sourceforge.plantuml.ISkinParam)>($r4);

        $r9 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z1 = interfaceinvoke $r8.<net.sourceforge.plantuml.ISkinParam: boolean forceSequenceParticipantUnderlined()>();

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.cucadiagram.Display getDisplay(boolean)>($z1);

        r11 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r6, null, $r7, $r10);

        $r12 = interfaceinvoke r26.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r13 = interfaceinvoke r11.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>($r12);

        $r15 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment RIGHT>;

        if r14 != $r15 goto label2;

        $d3 = virtualinvoke r13.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = neg $d3;

        $r24 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dx(double)>($d4);

        r26 = interfaceinvoke r26.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r24);

     label2:
        $r17 = <net.sourceforge.plantuml.graphic.VerticalAlignment: net.sourceforge.plantuml.graphic.VerticalAlignment CENTER>;

        if r16 != $r17 goto label3;

        $d0 = virtualinvoke r13.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = neg $d0;

        $d2 = $d1 / 2.0;

        $r23 = staticinvoke <net.sourceforge.plantuml.ugraphic.UTranslate: net.sourceforge.plantuml.ugraphic.UTranslate dy(double)>($d2);

        r26 = interfaceinvoke r26.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r23);

     label3:
        $r18 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r18.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r13);

        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant getParticipant()>();

        r21 = virtualinvoke $r20.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.Url getUrl()>();

        if r21 == null goto label4;

        interfaceinvoke r26.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>(r21);

     label4:
        interfaceinvoke r11.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r26, $r18, r22);

        if r21 == null goto label5;

        interfaceinvoke r26.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label5:
        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D getHeadPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.sequencediagram.Participant $r1, $r7;
        net.sourceforge.plantuml.skin.rose.Rose $r2;
        net.sourceforge.plantuml.style.Style[] $r3;
        net.sourceforge.plantuml.ISkinParam $r4, $r6;
        net.sourceforge.plantuml.skin.ComponentType $r5;
        boolean $z0;
        net.sourceforge.plantuml.cucadiagram.Display $r8;
        net.sourceforge.plantuml.skin.Component r9;
        net.sourceforge.plantuml.graphic.StringBounder r10;
        net.sourceforge.plantuml.awt.geom.Dimension2D r11;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r10 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.rose.Rose rose>;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $r3 = virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.style.Style[] getUsedStyles()>();

        $r5 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.skin.ComponentType headType>;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p>;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.ISkinParam skinParam>;

        $z0 = interfaceinvoke $r4.<net.sourceforge.plantuml.ISkinParam: boolean forceSequenceParticipantUnderlined()>();

        $r8 = virtualinvoke $r7.<net.sourceforge.plantuml.sequencediagram.Participant: net.sourceforge.plantuml.cucadiagram.Display getDisplay(boolean)>($z0);

        r9 = virtualinvoke $r2.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.skin.Component createComponent(net.sourceforge.plantuml.style.Style[],net.sourceforge.plantuml.skin.ComponentType,net.sourceforge.plantuml.skin.ArrowConfiguration,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Display)>($r3, $r5, null, $r6, $r8);

        r11 = interfaceinvoke r9.<net.sourceforge.plantuml.skin.Component: net.sourceforge.plantuml.awt.geom.Dimension2D getPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r10);

        return r11;
    }

    private double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.awt.geom.Dimension2D getHeadPreferredDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke $r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        return $d0;
    }

    public net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.real.Real $r1, $r2, $r4, $r5;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posC>;

        if $r1 != null goto label1;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posB>;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $d1 = $d0 / 2.0;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d1);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posC> = $r5;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posC>;

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getPosC2(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes $r2;
        double d0;
        net.sourceforge.plantuml.real.Real $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes liveboxes>;

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: double getMaxPosition(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosC(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>(d0);

        return $r4;
    }

    public net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.real.Real $r1, $r2, $r4, $r5;
        net.sourceforge.plantuml.graphic.StringBounder r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r3 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posD>;

        if $r1 != null goto label1;

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posB>;

        $d0 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r3);

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posD> = $r5;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posD>;

        return $r2;
    }

    public net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.real.Real $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real posB>;

        return $r1;
    }

    public net.sourceforge.plantuml.sequencediagram.Participant getParticipant()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.sequencediagram.Participant $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.Participant p>;

        return $r1;
    }

    public void goCreate(double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        d0 := @parameter0: double;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double createY> = d0;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: boolean create> = 1;

        return;
    }

    public void goCreate()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: boolean create> = 1;

        return;
    }

    public void delayOn(double, double)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        double d0, d1;
        net.sourceforge.plantuml.sequencediagram.teoz.MutingLine $r1;
        net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.MutingLine mutingLine>;

        virtualinvoke $r1.<net.sourceforge.plantuml.sequencediagram.teoz.MutingLine: void delayOn(double,double)>(d0, d1);

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes liveboxes>;

        virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes: void delayOn(double,double)>(d0, d1);

        return;
    }

    public net.sourceforge.plantuml.sequencediagram.ParticipantEnglober getEnglober()
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.sequencediagram.ParticipantEnglober $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.sequencediagram.ParticipantEnglober englober>;

        return $r1;
    }

    public void ensureMarginBefore(double)
    {
        double d0, $d1, $d2;
        byte $b0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double marginBefore>;

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d1, d0);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double marginBefore> = $d2;

        return;
    }

    public void ensureMarginAfter(double)
    {
        double d0, $d1, $d2;
        byte $b0;
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        $d1 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double marginAfter>;

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d1, d0);

        r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double marginAfter> = $d2;

        return;
    }

    public net.sourceforge.plantuml.real.Real getPosA(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.real.Real $r2, $r3;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosB(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double marginBefore>;

        $d1 = neg $d0;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d1);

        return $r3;
    }

    public net.sourceforge.plantuml.real.Real getPosE(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.real.Real $r2, $r3;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: net.sourceforge.plantuml.real.Real getPosD(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = r0.<net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace: double marginAfter>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.real.Real: net.sourceforge.plantuml.real.Real addFixed(double)>($d0);

        return $r3;
    }
}
