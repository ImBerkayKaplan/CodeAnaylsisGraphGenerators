public class net.sourceforge.plantuml.posimo.DotPath extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UShape, net.sourceforge.plantuml.posimo.Moveable
{
    private final java.util.List beziers;
    private java.lang.String comment;
    private java.lang.String codeLine;
    static final boolean $assertionsDisabled;

    public net.sourceforge.plantuml.posimo.DotPath copy()
    {
        net.sourceforge.plantuml.posimo.DotPath $r0, r2;
        java.util.List $r3, $r8;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        java.awt.geom.CubicCurve2D$Double r6, $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r2 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new net.sourceforge.plantuml.posimo.DotPath;

        specialinvoke $r0.<net.sourceforge.plantuml.posimo.DotPath: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.geom.CubicCurve2D$Double) $r5;

        $r8 = $r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r7 = new java.awt.geom.CubicCurve2D$Double;

        $d7 = r6.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d6 = r6.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d5 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d4 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $d3 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d2 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $d1 = r6.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d0 = r6.<java.awt.geom.CubicCurve2D$Double: double y2>;

        specialinvoke $r7.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d7, $d6, $d5, $d4, $d3, $d2, $d1, $d0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r0;
    }

    private static net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)
    {
        net.sourceforge.plantuml.posimo.DotPath $r0;
        java.util.List r2, $r3;
        java.lang.Object $r4;
        java.util.Collection $r5;

        r2 := @parameter0: java.util.List;

        $r0 = new net.sourceforge.plantuml.posimo.DotPath;

        specialinvoke $r0.<net.sourceforge.plantuml.posimo.DotPath: void <init>()>();

        $r3 = $r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r5 = (java.util.Collection) $r4;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r0;
    }

    public void <init>()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers> = $r1;

        return;
    }

    public void <init>(net.sourceforge.plantuml.svek.SvgResult)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.ArrayList $r1, $r6;
        net.sourceforge.plantuml.svek.SvgResult r2, $r4, $r8;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        int i0, $i1;
        java.awt.geom.Point2D$Double r5, r17, r20, r25;
        java.util.List $r9, $r15;
        java.util.Iterator r10, r24;
        java.lang.Object $r11, $r16, $r18, $r19;
        net.sourceforge.plantuml.posimo.DotPath$TriPoints r12, $r21;
        java.awt.geom.CubicCurve2D$Double $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        java.lang.IllegalArgumentException $r22, $r23;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r2 := @parameter0: net.sourceforge.plantuml.svek.SvgResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers> = $r1;

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.svek.SvgResult: java.lang.String getSvg()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: boolean isPathConsistent(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r23;

     label1:
        i0 = virtualinvoke r2.<net.sourceforge.plantuml.svek.SvgResult: int indexOf(java.lang.String,int)>("C", 0);

        if i0 != -1 goto label2;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r22;

     label2:
        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int,int)>(1, i0);

        r5 = virtualinvoke $r4.<net.sourceforge.plantuml.svek.SvgResult: java.awt.geom.Point2D$Double getNextPoint()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $i1 = i0 + 1;

        $r8 = virtualinvoke r2.<net.sourceforge.plantuml.svek.SvgResult: net.sourceforge.plantuml.svek.SvgResult substring(int)>($i1);

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.svek.SvgResult: java.util.List getPoints(java.lang.String)>(" ");

        r24 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r16 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.awt.geom.Point2D$Double) $r16;

        $r18 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.awt.geom.Point2D$Double) $r18;

        $r19 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.awt.geom.Point2D$Double) $r19;

        $r21 = new net.sourceforge.plantuml.posimo.DotPath$TriPoints;

        specialinvoke $r21.<net.sourceforge.plantuml.posimo.DotPath$TriPoints: void <init>(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)>(r17, r25, r20);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label3;

     label4:
        d6 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        d7 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        r10 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (net.sourceforge.plantuml.posimo.DotPath$TriPoints) $r11;

        $r13 = new java.awt.geom.CubicCurve2D$Double;

        $d0 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$000(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        $d1 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$100(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        $d2 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$200(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        $d3 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$300(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        $d4 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$400(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        $d5 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$500(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        specialinvoke $r13.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>(d6, d7, $d0, $d1, $d2, $d3, $d4, $d5);

        $r15 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r13);

        d6 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$400(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        d7 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath$TriPoints: double access$500(net.sourceforge.plantuml.posimo.DotPath$TriPoints)>(r12);

        goto label5;

     label6:
        return;
    }

    public net.sourceforge.plantuml.posimo.DotPath addCurve(java.awt.geom.Point2D, java.awt.geom.Point2D, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.posimo.DotPath r1, $r9;
        java.util.List $r2;
        java.awt.geom.CubicCurve2D$Double $r4;
        java.awt.geom.Point2D r5, r6, r7, r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 := @parameter0: java.awt.geom.Point2D;

        r6 := @parameter1: java.awt.geom.Point2D;

        r7 := @parameter2: java.awt.geom.Point2D;

        r8 := @parameter3: java.awt.geom.Point2D;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = new java.awt.geom.CubicCurve2D$Double;

        $d0 = virtualinvoke r5.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r5.<java.awt.geom.Point2D: double getY()>();

        $d2 = virtualinvoke r6.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke r6.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke r7.<java.awt.geom.Point2D: double getX()>();

        $d5 = virtualinvoke r7.<java.awt.geom.Point2D: double getY()>();

        $d6 = virtualinvoke r8.<java.awt.geom.Point2D: double getX()>();

        $d7 = virtualinvoke r8.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r4.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r9 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)>($r0);

        return $r9;
    }

    public net.sourceforge.plantuml.posimo.DotPath addCurve(java.awt.geom.Point2D, java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.posimo.DotPath r0, $r9;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        java.awt.geom.Point2D r5, r6, r7, r8;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r6 := @parameter0: java.awt.geom.Point2D;

        r7 := @parameter1: java.awt.geom.Point2D;

        r8 := @parameter2: java.awt.geom.Point2D;

        $r2 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        r5 = virtualinvoke r4.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath addCurve(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)>(r5, r6, r7, r8);

        return $r9;
    }

    private java.awt.geom.Point2D mirror(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, r1;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, d7;
        java.awt.geom.Point2D$Double $r2;
        net.sourceforge.plantuml.posimo.DotPath r3;

        r3 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r0 := @parameter0: java.awt.geom.Point2D;

        r1 := @parameter1: java.awt.geom.Point2D;

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = 2.0 * $d0;

        $d2 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        d3 = $d1 - $d2;

        $d4 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        $d5 = 2.0 * $d4;

        $d6 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        d7 = $d5 - $d6;

        $r2 = new java.awt.geom.Point2D$Double;

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d3, d7);

        return $r2;
    }

    public static boolean isPathConsistent(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("M");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.awt.geom.Point2D getStartPoint()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.awt.geom.CubicCurve2D$Double $r3;
        java.awt.geom.Point2D $r4;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.awt.geom.CubicCurve2D$Double) $r2;

        $r4 = virtualinvoke $r3.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        return $r4;
    }

    public java.util.Set sample()
    {
        java.util.HashSet $r0;
        net.sourceforge.plantuml.posimo.DotPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.util.Set $r5;
        java.lang.Object $r6;
        java.awt.geom.CubicCurve2D$Double r7;

        r2 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.awt.geom.CubicCurve2D$Double) $r6;

        staticinvoke <net.sourceforge.plantuml.posimo.DotPath: void sample(java.awt.geom.CubicCurve2D,java.util.Set)>(r7, $r0);

        goto label1;

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r5;
    }

    private static void sample(java.awt.geom.CubicCurve2D, java.util.Set)
    {
        java.awt.geom.CubicCurve2D r0;
        java.awt.geom.Point2D r1, r2;
        double $d0, $d1;
        byte $b0, $b1;
        java.awt.geom.CubicCurve2D$Double $r3, $r5;
        java.util.Set r7;

        r0 := @parameter0: java.awt.geom.CubicCurve2D;

        r7 := @parameter1: java.util.Set;

        r1 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: java.awt.geom.Point2D getCtrlP1()>();

        r2 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: java.awt.geom.Point2D getCtrlP2()>();

        $d0 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: double getFlatnessSq()>();

        $b0 = $d0 cmpl 0.5;

        if $b0 > 0 goto label1;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>(r2);

        $b1 = $d1 cmpl 4.0;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r3.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r5 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r5.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r0.<java.awt.geom.CubicCurve2D: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r3, $r5);

        staticinvoke <net.sourceforge.plantuml.posimo.DotPath: void sample(java.awt.geom.CubicCurve2D,java.util.Set)>($r3, r7);

        staticinvoke <net.sourceforge.plantuml.posimo.DotPath: void sample(java.awt.geom.CubicCurve2D,java.util.Set)>($r5, r7);

        goto label3;

     label2:
        interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>(r1);

        interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>(r2);

     label3:
        return;
    }

    public net.sourceforge.plantuml.svek.PointAndAngle getMiddle()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        net.sourceforge.plantuml.svek.PointAndAngle $r3;
        java.lang.Object $r4;
        java.awt.geom.CubicCurve2D$Double r5, $r6, $r8;
        java.awt.geom.Point2D r10, r11, r12, r13, r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r14 = null;

        d6 = 0.0;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.awt.geom.CubicCurve2D$Double) $r4;

        $r6 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r6.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r8 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r8.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r5.<java.awt.geom.CubicCurve2D$Double: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r6, $r8);

        r10 = virtualinvoke $r6.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        r11 = virtualinvoke $r6.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        r12 = virtualinvoke $r8.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        r13 = virtualinvoke $r8.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        if r14 == null goto label2;

        $d4 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r10);

        $d5 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r14);

        $b2 = $d4 cmpg $d5;

        if $b2 >= 0 goto label3;

     label2:
        r14 = r10;

        d6 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getStartingAngle(java.awt.geom.CubicCurve2D$Double)>($r6);

     label3:
        $d7 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r11);

        $d8 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r14);

        $b3 = $d7 cmpg $d8;

        if $b3 >= 0 goto label4;

        r14 = r11;

        d6 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getEndingAngle(java.awt.geom.CubicCurve2D$Double)>($r6);

     label4:
        $d0 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r12);

        $d1 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r14);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label5;

        r14 = r12;

        d6 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getStartingAngle(java.awt.geom.CubicCurve2D$Double)>($r8);

     label5:
        $d2 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r13);

        $d3 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: double getCost(java.awt.geom.Point2D)>(r14);

        $b1 = $d2 cmpg $d3;

        if $b1 >= 0 goto label6;

        r14 = r13;

        d6 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getEndingAngle(java.awt.geom.CubicCurve2D$Double)>($r8);

     label6:
        goto label1;

     label7:
        $r3 = new net.sourceforge.plantuml.svek.PointAndAngle;

        specialinvoke $r3.<net.sourceforge.plantuml.svek.PointAndAngle: void <init>(java.awt.geom.Point2D,double)>(r14, d6);

        return $r3;
    }

    private double getCost(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.awt.geom.Point2D r1, r2, r3;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r3 := @parameter0: java.awt.geom.Point2D;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getStartPoint()>();

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        $d0 = virtualinvoke r3.<java.awt.geom.Point2D: double distanceSq(java.awt.geom.Point2D)>(r1);

        $d1 = virtualinvoke r3.<java.awt.geom.Point2D: double distanceSq(java.awt.geom.Point2D)>(r2);

        $d2 = $d0 + $d1;

        return $d2;
    }

    public void forceStartPoint(double, double)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1, $r4, $r7, $r10;
        java.lang.Object $r2, $r5, $r8, $r11;
        double d0, d1;
        java.awt.geom.CubicCurve2D$Double $r3, $r6, $r9, $r12;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.awt.geom.CubicCurve2D$Double) $r2;

        $r3.<java.awt.geom.CubicCurve2D$Double: double x1> = d0;

        $r4 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.awt.geom.CubicCurve2D$Double) $r5;

        $r6.<java.awt.geom.CubicCurve2D$Double: double y1> = d1;

        $r7 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (java.awt.geom.CubicCurve2D$Double) $r8;

        $r9.<java.awt.geom.CubicCurve2D$Double: double ctrlx1> = d0;

        $r10 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (java.awt.geom.CubicCurve2D$Double) $r11;

        $r12.<java.awt.geom.CubicCurve2D$Double: double ctrly1> = d1;

        return;
    }

    public java.awt.geom.Point2D getEndPoint()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double $r4;
        java.awt.geom.Point2D $r5;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r2 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $r5 = virtualinvoke $r4.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        return $r5;
    }

    public void forceEndPoint(double, double)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r3, $r7, $r11, $r15;
        double d0, d1;
        java.awt.geom.CubicCurve2D$Double $r4, $r8, $r12, $r16;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $r4.<java.awt.geom.CubicCurve2D$Double: double x2> = d0;

        $r6 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r5 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i3);

        $r8 = (java.awt.geom.CubicCurve2D$Double) $r7;

        $r8.<java.awt.geom.CubicCurve2D$Double: double y2> = d1;

        $r10 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r9 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i5);

        $r12 = (java.awt.geom.CubicCurve2D$Double) $r11;

        $r12.<java.awt.geom.CubicCurve2D$Double: double ctrlx2> = d0;

        $r14 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r13 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i6 = interfaceinvoke $r13.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i7);

        $r16 = (java.awt.geom.CubicCurve2D$Double) $r15;

        $r16.<java.awt.geom.CubicCurve2D$Double: double ctrly2> = d1;

        return;
    }

    public void moveEndPoint(double, double)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r3, $r7, $r11, $r15;
        java.awt.geom.CubicCurve2D$Double $r4, $r8, $r12, $r16;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $d1 = $r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d2 = $d1 + d0;

        $r4.<java.awt.geom.CubicCurve2D$Double: double x2> = $d2;

        $r6 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r5 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i3);

        $r8 = (java.awt.geom.CubicCurve2D$Double) $r7;

        $d4 = $r8.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d5 = $d4 + d3;

        $r8.<java.awt.geom.CubicCurve2D$Double: double y2> = $d5;

        $r10 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r9 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i5);

        $r12 = (java.awt.geom.CubicCurve2D$Double) $r11;

        $d6 = $r12.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d7 = $d6 + d0;

        $r12.<java.awt.geom.CubicCurve2D$Double: double ctrlx2> = $d7;

        $r14 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r13 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i6 = interfaceinvoke $r13.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i7);

        $r16 = (java.awt.geom.CubicCurve2D$Double) $r15;

        $d8 = $r16.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $d9 = $d8 + d3;

        $r16.<java.awt.geom.CubicCurve2D$Double: double ctrly2> = $d9;

        return;
    }

    public net.sourceforge.plantuml.svek.MinFinder getMinFinder()
    {
        net.sourceforge.plantuml.svek.MinFinder $r0;
        net.sourceforge.plantuml.posimo.DotPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        java.awt.geom.CubicCurve2D$Double r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r2 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new net.sourceforge.plantuml.svek.MinFinder;

        specialinvoke $r0.<net.sourceforge.plantuml.svek.MinFinder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.geom.CubicCurve2D$Double) $r5;

        $d1 = r6.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d0 = r6.<java.awt.geom.CubicCurve2D$Double: double y1>;

        virtualinvoke $r0.<net.sourceforge.plantuml.svek.MinFinder: void manage(double,double)>($d1, $d0);

        $d3 = r6.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d2 = r6.<java.awt.geom.CubicCurve2D$Double: double y2>;

        virtualinvoke $r0.<net.sourceforge.plantuml.svek.MinFinder: void manage(double,double)>($d3, $d2);

        $d5 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d4 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        virtualinvoke $r0.<net.sourceforge.plantuml.svek.MinFinder: void manage(double,double)>($d5, $d4);

        $d7 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d6 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        virtualinvoke $r0.<net.sourceforge.plantuml.svek.MinFinder: void manage(double,double)>($d7, $d6);

        goto label1;

     label2:
        return $r0;
    }

    public net.sourceforge.plantuml.ugraphic.MinMax getMinMax()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.MinMax r5, r6, r7, r8;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(0);

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $d1 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d0 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d1, $d0);

        $d3 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d2 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        r7 = virtualinvoke r6.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d3, $d2);

        $d5 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d4 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d5, $d4);

        $d7 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d6 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        r5 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d7, $d6);

        goto label1;

     label2:
        return r5;
    }

    public double getMinDist(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        java.awt.geom.Point2D r5;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, d8, $d9, $d10, d11, d12;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 := @parameter0: java.awt.geom.Point2D;

        d12 = 1.7976931348623157E308;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $d1 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d0 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        d2 = virtualinvoke r5.<java.awt.geom.Point2D: double distance(double,double)>($d1, $d0);

        $b0 = d2 cmpg d12;

        if $b0 >= 0 goto label2;

        d12 = d2;

     label2:
        $d4 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d3 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        d5 = virtualinvoke r5.<java.awt.geom.Point2D: double distance(double,double)>($d4, $d3);

        $b1 = d5 cmpg d12;

        if $b1 >= 0 goto label3;

        d12 = d5;

     label3:
        $d7 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d6 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        d8 = virtualinvoke r5.<java.awt.geom.Point2D: double distance(double,double)>($d7, $d6);

        $b2 = d8 cmpg d12;

        if $b2 >= 0 goto label4;

        d12 = d8;

     label4:
        $d10 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d9 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        d11 = virtualinvoke r5.<java.awt.geom.Point2D: double distance(double,double)>($d10, $d9);

        $b3 = d11 cmpg d12;

        if $b3 >= 0 goto label5;

        d12 = d11;

     label5:
        goto label1;

     label6:
        return d12;
    }

    public java.awt.geom.Line2D getEndTangeante()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15;
        byte $b2, $b3;
        java.awt.geom.Line2D$Double $r5;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r2 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $d1 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d0 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        d8 = $d1 - $d0;

        $d3 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d2 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        d9 = $d3 - $d2;

        $b2 = d8 cmpl 0.0;

        if $b2 != 0 goto label1;

        $b3 = d9 cmpl 0.0;

        if $b3 != 0 goto label1;

        $d5 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d4 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        d8 = $d5 - $d4;

        $d7 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d6 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        d9 = $d7 - $d6;

     label1:
        $r5 = new java.awt.geom.Line2D$Double;

        $d10 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d11 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d12 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d13 = $d12 + d8;

        $d14 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d15 = $d14 + d9;

        specialinvoke $r5.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($d10, $d11, $d13, $d15);

        return $r5;
    }

    public double getEndAngle()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.awt.geom.Line2D r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Line2D getEndTangeante()>();

        $d0 = virtualinvoke r1.<java.awt.geom.Line2D: double getY2()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Line2D: double getY1()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Line2D: double getX2()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Line2D: double getX1()>();

        $d5 = $d3 - $d4;

        d6 = staticinvoke <java.lang.Math: double atan2(double,double)>($d2, $d5);

        return d6;
    }

    public double getStartAngle()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.awt.geom.Line2D r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Line2D getStartTangeante()>();

        $d0 = virtualinvoke r1.<java.awt.geom.Line2D: double getY2()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Line2D: double getY1()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r1.<java.awt.geom.Line2D: double getX2()>();

        $d4 = virtualinvoke r1.<java.awt.geom.Line2D: double getX1()>();

        $d5 = $d3 - $d4;

        d6 = staticinvoke <java.lang.Math: double atan2(double,double)>($d2, $d5);

        return d6;
    }

    public java.awt.geom.Line2D getStartTangeante()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.awt.geom.CubicCurve2D$Double r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15;
        byte $b0, $b1;
        java.awt.geom.Line2D$Double $r4;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (java.awt.geom.CubicCurve2D$Double) $r2;

        $d1 = r3.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d0 = r3.<java.awt.geom.CubicCurve2D$Double: double x1>;

        d8 = $d1 - $d0;

        $d3 = r3.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $d2 = r3.<java.awt.geom.CubicCurve2D$Double: double y1>;

        d9 = $d3 - $d2;

        $b0 = d8 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b1 = d9 cmpl 0.0;

        if $b1 != 0 goto label1;

        $d5 = r3.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d4 = r3.<java.awt.geom.CubicCurve2D$Double: double x1>;

        d8 = $d5 - $d4;

        $d7 = r3.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d6 = r3.<java.awt.geom.CubicCurve2D$Double: double y1>;

        d9 = $d7 - $d6;

     label1:
        $r4 = new java.awt.geom.Line2D$Double;

        $d10 = r3.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d11 = r3.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d12 = r3.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d13 = $d12 + d8;

        $d14 = r3.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d15 = $d14 + d9;

        specialinvoke $r4.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($d10, $d11, $d13, $d15);

        return $r4;
    }

    public net.sourceforge.plantuml.posimo.DotPath addBefore(java.awt.geom.CubicCurve2D$Double)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.posimo.DotPath r1, $r5;
        java.util.List $r2;
        java.awt.geom.CubicCurve2D$Double r4;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r4 := @parameter0: java.awt.geom.CubicCurve2D$Double;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, r4);

        $r5 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)>($r0);

        return $r5;
    }

    private net.sourceforge.plantuml.posimo.DotPath addBefore(net.sourceforge.plantuml.posimo.DotPath)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.posimo.DotPath r1, r4, $r6;
        java.util.List $r2, $r5;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r4 := @parameter0: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r5 = r4.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(int,java.util.Collection)>(0, $r5);

        $r6 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)>($r0);

        return $r6;
    }

    public net.sourceforge.plantuml.posimo.DotPath addAfter(java.awt.geom.CubicCurve2D$Double)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.posimo.DotPath r1, $r5;
        java.util.List $r2;
        java.awt.geom.CubicCurve2D$Double r4;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r4 := @parameter0: java.awt.geom.CubicCurve2D$Double;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r5 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)>($r0);

        return $r5;
    }

    public net.sourceforge.plantuml.posimo.DotPath addAfter(net.sourceforge.plantuml.posimo.DotPath)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.posimo.DotPath r1, r4, $r6;
        java.util.List $r2, $r5;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r4 := @parameter0: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r5 = r4.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $r6 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)>($r0);

        return $r6;
    }

    public java.util.Map somePoints()
    {
        java.util.HashMap $r0;
        net.sourceforge.plantuml.posimo.DotPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.Object $r5;
        java.awt.geom.CubicCurve2D$Double r6, $r7, $r9;
        java.awt.geom.Point2D $r11, $r14, $r17, $r20;
        double $d0, $d1, $d2, $d3;
        java.lang.Double $r12, $r15, $r18, $r21;

        r2 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.geom.CubicCurve2D$Double) $r5;

        $r7 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r7.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r9 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r9.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r6.<java.awt.geom.CubicCurve2D$Double: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r7, $r9);

        $r11 = virtualinvoke $r7.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $d0 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getStartingAngle(java.awt.geom.CubicCurve2D$Double)>($r7);

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r14 = virtualinvoke $r7.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $d1 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getEndingAngle(java.awt.geom.CubicCurve2D$Double)>($r7);

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r17 = virtualinvoke $r9.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $d2 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getStartingAngle(java.awt.geom.CubicCurve2D$Double)>($r9);

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r20 = virtualinvoke $r9.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $d3 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double getEndingAngle(java.awt.geom.CubicCurve2D$Double)>($r9);

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

        goto label1;

     label2:
        return $r0;
    }

    private net.sourceforge.plantuml.svek.PointDirected getIntersection(net.sourceforge.plantuml.svek.ClusterPosition)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        net.sourceforge.plantuml.svek.ClusterPosition r5;
        net.sourceforge.plantuml.svek.PointDirected r6;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 := @parameter0: net.sourceforge.plantuml.svek.ClusterPosition;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.svek.ClusterPosition: net.sourceforge.plantuml.svek.PointDirected getIntersection(java.awt.geom.CubicCurve2D$Double)>(r4);

        if r6 == null goto label2;

        return r6;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void draw(java.awt.Graphics2D, double, double)
    {
        java.awt.geom.GeneralPath $r0;
        net.sourceforge.plantuml.posimo.DotPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.awt.Graphics2D r5;
        java.lang.Object $r6;
        java.awt.geom.CubicCurve2D$Double $r7, r8;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r2 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 := @parameter0: java.awt.Graphics2D;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        $r0 = new java.awt.geom.GeneralPath;

        specialinvoke $r0.<java.awt.geom.GeneralPath: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.awt.geom.CubicCurve2D$Double) $r6;

        $r7 = new java.awt.geom.CubicCurve2D$Double;

        $d1 = r8.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d17 = d0 + $d1;

        $d3 = r8.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d16 = d2 + $d3;

        $d4 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d15 = d0 + $d4;

        $d5 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $d14 = d2 + $d5;

        $d6 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d13 = d0 + $d6;

        $d7 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $d12 = d2 + $d7;

        $d8 = r8.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d11 = d0 + $d8;

        $d9 = r8.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d10 = d2 + $d9;

        specialinvoke $r7.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d17, $d16, $d15, $d14, $d13, $d12, $d11, $d10);

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r7, 1);

        goto label1;

     label2:
        virtualinvoke r5.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void manageEnsureVisible(double, double, net.sourceforge.plantuml.EnsureVisible)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        net.sourceforge.plantuml.EnsureVisible r5;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r5 := @parameter2: net.sourceforge.plantuml.EnsureVisible;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $d1 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d5 = d0 + $d1;

        $d3 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d4 = d2 + $d3;

        interfaceinvoke r5.<net.sourceforge.plantuml.EnsureVisible: void ensureVisible(double,double)>($d5, $d4);

        $d6 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d9 = d0 + $d6;

        $d7 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d8 = d2 + $d7;

        interfaceinvoke r5.<net.sourceforge.plantuml.EnsureVisible: void ensureVisible(double,double)>($d9, $d8);

        goto label1;

     label2:
        return;
    }

    public void drawOk(net.sourceforge.plantuml.eps.EpsGraphics, double, double)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double $r4, r6;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;
        net.sourceforge.plantuml.eps.EpsGraphics r5;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 := @parameter0: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $r4 = new java.awt.geom.CubicCurve2D$Double;

        $d1 = r6.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d17 = d0 + $d1;

        $d3 = r6.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d16 = d2 + $d3;

        $d4 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d15 = d0 + $d4;

        $d5 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $d14 = d2 + $d5;

        $d6 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d13 = d0 + $d6;

        $d7 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $d12 = d2 + $d7;

        $d8 = r6.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d11 = d0 + $d8;

        $d9 = r6.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d10 = d2 + $d9;

        specialinvoke $r4.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d17, $d16, $d15, $d14, $d13, $d12, $d11, $d10);

        $d21 = $r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d20 = $r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d19 = $r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d18 = $r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        virtualinvoke r5.<net.sourceforge.plantuml.eps.EpsGraphics: void epsLine(double,double,double,double)>($d21, $d20, $d19, $d18);

        goto label1;

     label2:
        return;
    }

    public void draw(net.sourceforge.plantuml.eps.EpsGraphics, double, double)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        net.sourceforge.plantuml.posimo.DotPath r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z1, z2;
        java.lang.Object $r4;
        java.awt.geom.CubicCurve2D$Double $r5, r6;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r0 := @parameter0: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void newpathDot()>();

        z2 = 1;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.geom.CubicCurve2D$Double) $r4;

        $r5 = new java.awt.geom.CubicCurve2D$Double;

        $d1 = r6.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d17 = d0 + $d1;

        $d3 = r6.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d16 = d2 + $d3;

        $d4 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d15 = d0 + $d4;

        $d5 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $d14 = d2 + $d5;

        $d6 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d13 = d0 + $d6;

        $d7 = r6.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $d12 = d2 + $d7;

        $d8 = r6.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d11 = d0 + $d8;

        $d9 = r6.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d10 = d2 + $d9;

        specialinvoke $r5.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d17, $d16, $d15, $d14, $d13, $d12, $d11, $d10);

        if z2 == 0 goto label2;

        $d25 = $r5.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d24 = $r5.<java.awt.geom.CubicCurve2D$Double: double y1>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void movetoNoMacro(double,double)>($d25, $d24);

        z2 = 0;

     label2:
        $d23 = $r5.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d22 = $r5.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $d21 = $r5.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d20 = $r5.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $d19 = $r5.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d18 = $r5.<java.awt.geom.CubicCurve2D$Double: double y2>;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void curvetoNoMacro(double,double,double,double,double,double)>($d23, $d22, $d21, $d20, $d19, $d18);

        goto label1;

     label3:
        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void closepathDot()>();

        return;
    }

    public net.sourceforge.plantuml.ugraphic.UPath toUPath()
    {
        net.sourceforge.plantuml.ugraphic.UPath $r0;
        net.sourceforge.plantuml.posimo.DotPath r1;
        java.lang.String $r2, $r3;
        java.util.List $r5;
        java.util.Iterator r6;
        boolean $z0, z1;
        java.lang.Object $r7;
        java.awt.geom.CubicCurve2D$Double r8;
        double[] $r9, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        net.sourceforge.plantuml.ugraphic.USegmentType $r10, $r12;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPath;

        $r3 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.lang.String comment>;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.lang.String codeLine>;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void <init>(java.lang.String,java.lang.String)>($r3, $r2);

        z1 = 1;

        $r5 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.awt.geom.CubicCurve2D$Double) $r7;

        if z1 == 0 goto label2;

        $r11 = newarray (double)[2];

        $d6 = r8.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $r11[0] = $d6;

        $d7 = r8.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $r11[1] = $d7;

        $r12 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_MOVETO>;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r11, $r12);

        z1 = 0;

     label2:
        $r9 = newarray (double)[6];

        $d0 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $r9[0] = $d0;

        $d1 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $r9[1] = $d1;

        $d2 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $r9[2] = $d2;

        $d3 = r8.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $r9[3] = $d3;

        $d4 = r8.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $r9[4] = $d4;

        $d5 = r8.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $r9[5] = $d5;

        $r10 = <net.sourceforge.plantuml.ugraphic.USegmentType: net.sourceforge.plantuml.ugraphic.USegmentType SEG_CUBICTO>;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPath: void add(double[],net.sourceforge.plantuml.ugraphic.USegmentType)>($r9, $r10);

        goto label1;

     label3:
        return $r0;
    }

    private transient java.awt.geom.Point2D getFrontierIntersection(java.awt.Shape, java.awt.geom.Rectangle2D[])
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.posimo.DotPath r1;
        java.util.List $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.awt.Shape r7;
        java.lang.String $r9;
        java.util.Iterator r10;
        java.lang.Object $r11;
        java.awt.geom.CubicCurve2D$Double r12, $r14;
        java.awt.geom.Rectangle2D[] r13;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0;
        java.awt.geom.Point2D$Double $r16;
        int i1;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r7 := @parameter0: java.awt.Shape;

        r13 := @parameter1: java.awt.geom.Rectangle2D[];

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        i1 = 0;

     label1:
        if i1 >= 8 goto label8;

        r10 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.awt.geom.CubicCurve2D$Double) $r11;

        $z0 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: boolean contains(java.awt.geom.CubicCurve2D$Double,java.awt.geom.Rectangle2D[])>(r12, r13);

        if $z0 == 0 goto label3;

        goto label2;

     label3:
        $r14 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r14.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke $r14.<java.awt.geom.CubicCurve2D$Double: void setCurve(java.awt.geom.CubicCurve2D)>(r12);

        $z1 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: boolean isCutting(java.awt.geom.CubicCurve2D$Double,java.awt.Shape)>($r14, r7);

        if $z1 == 0 goto label6;

     label4:
        $d0 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double dist(java.awt.geom.CubicCurve2D$Double)>($r14);

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label5;

        staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: void shorten(java.awt.geom.CubicCurve2D$Double,java.awt.Shape)>($r14, r7);

        goto label4;

     label5:
        $r16 = new java.awt.geom.Point2D$Double;

        $d2 = $r14.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d1 = $r14.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d3 = $d2 + $d1;

        $d8 = $d3 / 2.0;

        $d5 = $r14.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d4 = $r14.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d6 = $d5 + $d4;

        $d7 = $d6 / 2.0;

        specialinvoke $r16.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d8, $d7);

        $z2 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: boolean contains(java.awt.geom.Point2D$Double,java.awt.geom.Rectangle2D[])>($r16, r13);

        if $z2 != 0 goto label6;

        return $r16;

     label6:
        goto label2;

     label7:
        specialinvoke r1.<net.sourceforge.plantuml.posimo.DotPath: void cutAllCubic(java.util.List)>($r0);

        i1 = i1 + 1;

        goto label1;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shape=");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    private void cutAllCubic(java.util.List)
    {
        java.util.ArrayList $r0;
        java.util.List r1;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        java.awt.geom.CubicCurve2D$Double r5, $r6, $r8;
        net.sourceforge.plantuml.posimo.DotPath r10;

        r10 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        interfaceinvoke r1.<java.util.List: void clear()>();

        r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.awt.geom.CubicCurve2D$Double) $r4;

        $r6 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r6.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r8 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r8.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r5.<java.awt.geom.CubicCurve2D$Double: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r6, $r8);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return;
    }

    private static transient boolean contains(java.awt.geom.Point2D$Double, java.awt.geom.Rectangle2D[])
    {
        java.awt.geom.Rectangle2D[] r0;
        int i0, i1;
        java.awt.geom.Rectangle2D r2;
        java.awt.geom.Point2D$Double r3;
        boolean $z0;

        r3 := @parameter0: java.awt.geom.Point2D$Double;

        r0 := @parameter1: java.awt.geom.Rectangle2D[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r0[i1];

        $z0 = virtualinvoke r2.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Point2D)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static transient boolean contains(java.awt.geom.CubicCurve2D$Double, java.awt.geom.Rectangle2D[])
    {
        java.awt.geom.Rectangle2D[] r0;
        int i0, i1;
        java.awt.geom.Rectangle2D r2;
        java.awt.geom.CubicCurve2D$Double r3;
        java.awt.geom.Point2D $r4, $r5;
        boolean $z0, $z1;

        r3 := @parameter0: java.awt.geom.CubicCurve2D$Double;

        r0 := @parameter1: java.awt.geom.Rectangle2D[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r0[i1];

        $r4 = virtualinvoke r3.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $z0 = virtualinvoke r2.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Point2D)>($r4);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r3.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z1 = virtualinvoke r2.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Point2D)>($r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private net.sourceforge.plantuml.posimo.DotPath manageRect(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D)
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.posimo.DotPath r1, $r19;
        java.util.List $r2;
        java.lang.Object $r4, $r7, $r13, $r16;
        java.awt.geom.Rectangle2D r5, r21;
        java.awt.geom.CubicCurve2D$Double $r6, $r8, $r9, $r11, $r14, $r17;
        boolean $z0, $z1;
        double $d0;
        byte $b0;
        java.lang.IllegalStateException $r20;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 := @parameter0: java.awt.geom.Rectangle2D;

        r21 := @parameter1: java.awt.geom.Rectangle2D;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

     label1:
        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.awt.geom.CubicCurve2D$Double) $r4;

        $z0 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: boolean isCutting(java.awt.geom.CubicCurve2D$Double,java.awt.Shape)>($r6, r5);

        if $z0 != 0 goto label2;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>()>();

        throw $r20;

     label2:
        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (java.awt.geom.CubicCurve2D$Double) $r7;

        $d0 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: double dist(java.awt.geom.CubicCurve2D$Double)>($r8);

        $b0 = $d0 cmpg 1.0;

        if $b0 > 0 goto label3;

        goto label5;

     label3:
        $r9 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r9.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r11 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r11.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r13 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (java.awt.geom.CubicCurve2D$Double) $r13;

        virtualinvoke $r14.<java.awt.geom.CubicCurve2D$Double: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r9, $r11);

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r9);

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(1, $r11);

        $r16 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(1);

        $r17 = (java.awt.geom.CubicCurve2D$Double) $r16;

        $z1 = staticinvoke <net.sourceforge.plantuml.posimo.BezierUtils: boolean isCutting(java.awt.geom.CubicCurve2D$Double,java.awt.Shape)>($r17, r5);

        if $z1 == 0 goto label4;

        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>(0);

     label4:
        goto label1;

     label5:
        $r19 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)>($r0);

        return $r19;
    }

    private java.awt.geom.Point2D getFrontierIntersection(net.sourceforge.plantuml.posimo.Positionable)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        net.sourceforge.plantuml.posimo.Positionable r1;
        java.awt.geom.Rectangle2D $r2;
        java.awt.geom.Rectangle2D[] $r3;
        java.awt.geom.Point2D $r4;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r1 := @parameter0: net.sourceforge.plantuml.posimo.Positionable;

        $r2 = staticinvoke <net.sourceforge.plantuml.posimo.PositionableUtils: java.awt.geom.Rectangle2D convert(net.sourceforge.plantuml.posimo.Positionable)>(r1);

        $r3 = newarray (java.awt.geom.Rectangle2D)[0];

        $r4 = specialinvoke r0.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getFrontierIntersection(java.awt.Shape,java.awt.geom.Rectangle2D[])>($r2, $r3);

        return $r4;
    }

    public void draw(net.sourceforge.plantuml.asciiart.BasicCharArea, double, double)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        byte $b0, $b1;
        net.sourceforge.plantuml.asciiart.BasicCharArea r5;
        int $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r5 := @parameter0: net.sourceforge.plantuml.asciiart.BasicCharArea;

        d7 := @parameter1: double;

        d4 := @parameter2: double;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $d1 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d0 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label2;

        $d12 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d13 = $d12 / d7;

        $i7 = (int) $d13;

        $d14 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d15 = $d14 / d4;

        $i6 = (int) $d15;

        $d16 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d17 = $d16 / d4;

        $i5 = (int) $d17;

        interfaceinvoke r5.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawVLine(char,int,int,int)>(124, $i7, $i6, $i5);

        goto label3;

     label2:
        $d3 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d2 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $b1 = $d3 cmpl $d2;

        if $b1 != 0 goto label3;

        $d5 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d6 = $d5 / d4;

        $i4 = (int) $d6;

        $d8 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d9 = $d8 / d7;

        $i3 = (int) $d9;

        $d10 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d11 = $d10 / d7;

        $i2 = (int) $d11;

        interfaceinvoke r5.<net.sourceforge.plantuml.asciiart.BasicCharArea: void drawHLine(char,int,int,int)>(45, $i4, $i3, $i2);

     label3:
        goto label1;

     label4:
        return;
    }

    static java.lang.String toString(java.awt.geom.CubicCurve2D$Double)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.awt.geom.CubicCurve2D$Double r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.lang.String $r19;

        r2 := @parameter0: java.awt.geom.CubicCurve2D$Double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $d0 = r2.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d1 = r2.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") (");

        $d2 = r2.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d3 = r2.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") (");

        $d4 = r2.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d5 = r2.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") (");

        $d6 = r2.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d7 = r2.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.posimo.DotPath r2;
        java.util.List $r3;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.String $r5, $r8;
        java.lang.Object $r6;
        java.awt.geom.CubicCurve2D$Double r7;

        r2 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.awt.geom.CubicCurve2D$Double) $r6;

        $r8 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: java.lang.String toString(java.awt.geom.CubicCurve2D$Double)>(r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.awt.geom.CubicCurve2D$Double reverse(java.awt.geom.CubicCurve2D)
    {
        java.awt.geom.CubicCurve2D$Double $r0;
        java.awt.geom.CubicCurve2D r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @parameter0: java.awt.geom.CubicCurve2D;

        $r0 = new java.awt.geom.CubicCurve2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getX2()>();

        $d1 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getY2()>();

        $d2 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getCtrlX2()>();

        $d3 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getCtrlY2()>();

        $d4 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getCtrlX1()>();

        $d5 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getCtrlY1()>();

        $d6 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getX1()>();

        $d7 = virtualinvoke r1.<java.awt.geom.CubicCurve2D: double getY1()>();

        specialinvoke $r0.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7);

        return $r0;
    }

    public net.sourceforge.plantuml.posimo.DotPath reverse()
    {
        java.util.ArrayList $r0, $r4;
        net.sourceforge.plantuml.posimo.DotPath r1, $r7;
        java.util.List $r2;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.Object $r8;
        java.awt.geom.CubicCurve2D$Double r9, $r10;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r6 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.awt.geom.CubicCurve2D$Double) $r8;

        $r10 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.CubicCurve2D$Double reverse(java.awt.geom.CubicCurve2D)>(r9);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        $r7 = staticinvoke <net.sourceforge.plantuml.posimo.DotPath: net.sourceforge.plantuml.posimo.DotPath fromBeziers(java.util.List)>($r4);

        return $r7;
    }

    public void moveSvek(double, double)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1, $r2, $r6;
        int $i0, i1;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4, $r5;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        i1 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $r6 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r5 = new java.awt.geom.CubicCurve2D$Double;

        $d1 = r4.<java.awt.geom.CubicCurve2D$Double: double x1>;

        $d17 = $d1 + d0;

        $d3 = r4.<java.awt.geom.CubicCurve2D$Double: double y1>;

        $d16 = $d3 + d2;

        $d4 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrlx1>;

        $d15 = $d4 + d0;

        $d5 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrly1>;

        $d14 = $d5 + d2;

        $d6 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrlx2>;

        $d13 = $d6 + d0;

        $d7 = r4.<java.awt.geom.CubicCurve2D$Double: double ctrly2>;

        $d12 = $d7 + d2;

        $d8 = r4.<java.awt.geom.CubicCurve2D$Double: double x2>;

        $d11 = $d8 + d0;

        $d9 = r4.<java.awt.geom.CubicCurve2D$Double: double y2>;

        $d10 = $d9 + d2;

        specialinvoke $r5.<java.awt.geom.CubicCurve2D$Double: void <init>(double,double,double,double,double,double,double,double)>($d17, $d16, $d15, $d14, $d13, $d12, $d11, $d10);

        interfaceinvoke $r6.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public final java.util.List getBeziers()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public net.sourceforge.plantuml.posimo.DotPath simulateCompound(net.sourceforge.plantuml.svek.Cluster, net.sourceforge.plantuml.svek.Cluster)
    {
        net.sourceforge.plantuml.svek.Cluster r0, r2;
        net.sourceforge.plantuml.posimo.DotPath r1, $r3, $r22, r61;
        java.awt.geom.Point2D $r4, $r7, $r8, $r11, $r13, $r14, $r16, $r18, $r21, $r27, $r37, $r39, $r40, $r45, $r50, $r55, $r59;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, $z11, $z13, $z14, $z15, $z16, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        java.util.List $r5, $r12, $r20, $r23, $r24, $r28, $r30, $r31, $r32, $r38, $r42, $r47, $r52, $r56;
        java.lang.Object $r6, $r25, $r29, $r33, $r43, $r48, $r53, $r57;
        java.awt.geom.CubicCurve2D$Double $r9, $r10, $r26, $r34, $r35, $r36, $r44, $r49, $r54, $r58, r70;
        java.lang.AssertionError $r15, $r17, $r19, $r41, $r46, $r51;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.lang.IllegalStateException $r60;
        net.sourceforge.plantuml.svek.ClusterPosition r62, r68;
        java.awt.geom.CubicCurve2D r64;
        java.util.Iterator r69;

        r1 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r0 := @parameter0: net.sourceforge.plantuml.svek.Cluster;

        r2 := @parameter1: net.sourceforge.plantuml.svek.Cluster;

        if r0 != null goto label01;

        if r2 != null goto label01;

        return r1;

     label01:
        r61 = r1;

        if r2 == null goto label15;

        r62 = virtualinvoke r2.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        $r21 = virtualinvoke r1.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getStartPoint()>();

        $z13 = virtualinvoke r62.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r21);

        if $z13 == 0 goto label15;

        $r22 = new net.sourceforge.plantuml.posimo.DotPath;

        specialinvoke $r22.<net.sourceforge.plantuml.posimo.DotPath: void <init>()>();

        i3 = 0;

     label02:
        $i0 = i3 + 1;

        $r23 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i1 = interfaceinvoke $r23.<java.util.List: int size()>();

        if $i0 >= $i1 goto label04;

        $r52 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r53 = interfaceinvoke $r52.<java.util.List: java.lang.Object get(int)>(i3);

        $r54 = (java.awt.geom.CubicCurve2D$Double) $r53;

        $r55 = virtualinvoke $r54.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z23 = virtualinvoke r62.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r55);

        if $z23 == 0 goto label04;

        $r56 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r57 = interfaceinvoke $r56.<java.util.List: java.lang.Object get(int)>(i3);

        $r58 = (java.awt.geom.CubicCurve2D$Double) $r57;

        $r59 = virtualinvoke $r58.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $z24 = virtualinvoke r62.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r59);

        if $z24 != 0 goto label03;

        $r60 = new java.lang.IllegalStateException;

        specialinvoke $r60.<java.lang.IllegalStateException: void <init>()>();

        throw $r60;

     label03:
        i3 = i3 + 1;

        goto label02;

     label04:
        $r24 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i3);

        $r26 = (java.awt.geom.CubicCurve2D$Double) $r25;

        $r27 = virtualinvoke $r26.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z14 = virtualinvoke r62.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r27);

        if $z14 == 0 goto label05;

        goto label15;

     label05:
        $z15 = <net.sourceforge.plantuml.posimo.DotPath: boolean $assertionsDisabled>;

        if $z15 != 0 goto label06;

        $r47 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r48 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(i3);

        $r49 = (java.awt.geom.CubicCurve2D$Double) $r48;

        $r50 = virtualinvoke $r49.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $z22 = virtualinvoke r62.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r50);

        if $z22 != 0 goto label06;

        $r51 = new java.lang.AssertionError;

        specialinvoke $r51.<java.lang.AssertionError: void <init>()>();

        throw $r51;

     label06:
        $z16 = <net.sourceforge.plantuml.posimo.DotPath: boolean $assertionsDisabled>;

        if $z16 != 0 goto label07;

        $r42 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r43 = interfaceinvoke $r42.<java.util.List: java.lang.Object get(int)>(i3);

        $r44 = (java.awt.geom.CubicCurve2D$Double) $r43;

        $r45 = virtualinvoke $r44.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z21 = virtualinvoke r62.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r45);

        if $z21 == 0 goto label07;

        $r46 = new java.lang.AssertionError;

        specialinvoke $r46.<java.lang.AssertionError: void <init>()>();

        throw $r46;

     label07:
        $r28 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i3);

        r64 = (java.awt.geom.CubicCurve2D) $r29;

        i4 = 0;

     label08:
        if i4 >= 8 goto label12;

        $r35 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r35.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r36 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r36.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r64.<java.awt.geom.CubicCurve2D: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r35, $r36);

        $z18 = <net.sourceforge.plantuml.posimo.DotPath: boolean $assertionsDisabled>;

        if $z18 != 0 goto label09;

        $r39 = virtualinvoke $r35.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $r40 = virtualinvoke $r36.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $z20 = virtualinvoke $r39.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($r40);

        if $z20 != 0 goto label09;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label09:
        $r37 = virtualinvoke $r35.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z19 = virtualinvoke r62.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r37);

        if $z19 == 0 goto label10;

        r64 = $r36;

        goto label11;

     label10:
        $r38 = $r22.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        interfaceinvoke $r38.<java.util.List: void add(int,java.lang.Object)>(0, $r36);

        r64 = $r35;

     label11:
        i4 = i4 + 1;

        goto label08;

     label12:
        i5 = i3 + 1;

     label13:
        $r30 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $i2 = interfaceinvoke $r30.<java.util.List: int size()>();

        if i5 >= $i2 goto label14;

        $r32 = $r22.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r31 = r1.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        $r33 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(i5);

        $r34 = (java.awt.geom.CubicCurve2D$Double) $r33;

        interfaceinvoke $r32.<java.util.List: boolean add(java.lang.Object)>($r34);

        i5 = i5 + 1;

        goto label13;

     label14:
        r61 = $r22;

     label15:
        if r0 == null goto label27;

        $r3 = new net.sourceforge.plantuml.posimo.DotPath;

        specialinvoke $r3.<net.sourceforge.plantuml.posimo.DotPath: void <init>()>();

        r68 = virtualinvoke r0.<net.sourceforge.plantuml.svek.Cluster: net.sourceforge.plantuml.svek.ClusterPosition getClusterPosition()>();

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.posimo.DotPath: java.awt.geom.Point2D getEndPoint()>();

        $z0 = virtualinvoke r68.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r4);

        if $z0 == 0 goto label27;

        $r5 = r61.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r69 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label27;

        $r6 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        r70 = (java.awt.geom.CubicCurve2D$Double) $r6;

        $r7 = virtualinvoke r70.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z2 = virtualinvoke r68.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r7);

        if $z2 != 0 goto label17;

        $r20 = $r3.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>(r70);

        goto label26;

     label17:
        $r8 = virtualinvoke r70.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $z3 = virtualinvoke r68.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r8);

        if $z3 == 0 goto label18;

        return r61;

     label18:
        $z4 = <net.sourceforge.plantuml.posimo.DotPath: boolean $assertionsDisabled>;

        if $z4 != 0 goto label19;

        $r18 = virtualinvoke r70.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $z11 = virtualinvoke r68.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r18);

        if $z11 == 0 goto label19;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label19:
        $z5 = <net.sourceforge.plantuml.posimo.DotPath: boolean $assertionsDisabled>;

        if $z5 != 0 goto label20;

        $r16 = virtualinvoke r70.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z10 = virtualinvoke r68.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r16);

        if $z10 != 0 goto label20;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label20:
        i6 = 0;

     label21:
        if i6 >= 8 goto label25;

        $r9 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r9.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        $r10 = new java.awt.geom.CubicCurve2D$Double;

        specialinvoke $r10.<java.awt.geom.CubicCurve2D$Double: void <init>()>();

        virtualinvoke r70.<java.awt.geom.CubicCurve2D$Double: void subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)>($r9, $r10);

        $z6 = <net.sourceforge.plantuml.posimo.DotPath: boolean $assertionsDisabled>;

        if $z6 != 0 goto label22;

        $r13 = virtualinvoke $r9.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $r14 = virtualinvoke $r10.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP1()>();

        $z9 = virtualinvoke $r13.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($r14);

        if $z9 != 0 goto label22;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label22:
        $r11 = virtualinvoke $r9.<java.awt.geom.CubicCurve2D$Double: java.awt.geom.Point2D getP2()>();

        $z7 = virtualinvoke r68.<net.sourceforge.plantuml.svek.ClusterPosition: boolean contains(java.awt.geom.Point2D)>($r11);

        if $z7 == 0 goto label23;

        r70 = $r9;

        goto label24;

     label23:
        $r12 = $r3.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r9);

        r70 = $r10;

     label24:
        i6 = i6 + 1;

        goto label21;

     label25:
        return $r3;

     label26:
        goto label16;

     label27:
        return r61;
    }

    private double length(java.awt.geom.CubicCurve2D)
    {
        java.awt.geom.CubicCurve2D r0;
        java.awt.geom.Point2D $r1, $r2;
        double $d0;
        net.sourceforge.plantuml.posimo.DotPath r3;

        r3 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r0 := @parameter0: java.awt.geom.CubicCurve2D;

        $r1 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: java.awt.geom.Point2D getP1()>();

        $r2 = virtualinvoke r0.<java.awt.geom.CubicCurve2D: java.awt.geom.Point2D getP2()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.Point2D: double distance(java.awt.geom.Point2D)>($r2);

        return $d0;
    }

    public boolean isLine()
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.awt.geom.CubicCurve2D$Double r4;
        double $d0;
        byte $b0;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        $r1 = r0.<net.sourceforge.plantuml.posimo.DotPath: java.util.List beziers>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.geom.CubicCurve2D$Double) $r3;

        $d0 = virtualinvoke r4.<java.awt.geom.CubicCurve2D$Double: double getFlatnessSq()>();

        $b0 = $d0 cmpl 0.001;

        if $b0 <= 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public void setCommentAndCodeLine(java.lang.String, java.lang.String)
    {
        net.sourceforge.plantuml.posimo.DotPath r0;
        java.lang.String r1, r2;

        r0 := @this: net.sourceforge.plantuml.posimo.DotPath;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<net.sourceforge.plantuml.posimo.DotPath: java.lang.String comment> = r1;

        r0.<net.sourceforge.plantuml.posimo.DotPath: java.lang.String codeLine> = r2;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/posimo/DotPath;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.posimo.DotPath: boolean $assertionsDisabled> = $z1;

        return;
    }
}
