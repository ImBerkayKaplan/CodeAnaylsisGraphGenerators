public class net.sourceforge.plantuml.tim.EaterWhile extends net.sourceforge.plantuml.tim.Eater
{
    private net.sourceforge.plantuml.tim.expression.TokenStack expression;

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.EaterWhile r0;
        net.sourceforge.plantuml.StringLocated r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterWhile;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(net.sourceforge.plantuml.StringLocated)>(r1);

        return;
    }

    public void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.EaterWhile r0;
        net.sourceforge.plantuml.tim.expression.TokenStack $r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;

        r0 := @this: net.sourceforge.plantuml.tim.EaterWhile;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterWhile: void skipSpaces()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterWhile: void checkAndEatChar(java.lang.String)>("!while");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterWhile: void skipSpaces()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.EaterWhile: net.sourceforge.plantuml.tim.expression.TokenStack eatTokenStack()>();

        r0.<net.sourceforge.plantuml.tim.EaterWhile: net.sourceforge.plantuml.tim.expression.TokenStack expression> = $r1;

        return;
    }

    public final net.sourceforge.plantuml.tim.expression.TokenStack getWhileExpression()
    {
        net.sourceforge.plantuml.tim.EaterWhile r0;
        net.sourceforge.plantuml.tim.expression.TokenStack $r1;

        r0 := @this: net.sourceforge.plantuml.tim.EaterWhile;

        $r1 = r0.<net.sourceforge.plantuml.tim.EaterWhile: net.sourceforge.plantuml.tim.expression.TokenStack expression>;

        return $r1;
    }
}
