public abstract class net.sourceforge.plantuml.command.regex.RegexComposed extends java.lang.Object implements net.sourceforge.plantuml.command.regex.IRegex
{
    protected static final java.util.concurrent.atomic.AtomicInteger nbCreateMatches;
    private final java.util.List partials;
    private final java.util.concurrent.atomic.AtomicReference fullCached;

    protected final java.util.List partials()
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        $r1 = r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.List partials>;

        return $r1;
    }

    protected abstract java.lang.String getFullSlow();

    private net.sourceforge.plantuml.command.regex.Pattern2 getPattern2()
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r4;
        java.lang.Object $r2;
        java.lang.String r3;
        net.sourceforge.plantuml.command.regex.Pattern2 r5;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        $r1 = r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.concurrent.atomic.AtomicReference fullCached>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (net.sourceforge.plantuml.command.regex.Pattern2) $r2;

        if r5 != null goto label1;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.lang.String getFullSlow()>();

        r5 = staticinvoke <net.sourceforge.plantuml.command.regex.MyPattern: net.sourceforge.plantuml.command.regex.Pattern2 cmpile(java.lang.String)>(r3);

        $r4 = r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.concurrent.atomic.AtomicReference fullCached>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r5);

     label1:
        return r5;
    }

    protected final boolean isCompiled()
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        $r1 = r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.concurrent.atomic.AtomicReference fullCached>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public transient void <init>(net.sourceforge.plantuml.command.regex.IRegex[])
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        net.sourceforge.plantuml.command.regex.IRegex[] r2;
        java.util.List $r3, $r4;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        r2 := @parameter0: net.sourceforge.plantuml.command.regex.IRegex[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.concurrent.atomic.AtomicReference fullCached> = $r1;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.List partials> = $r4;

        return;
    }

    public java.util.Map createPartialMatch(java.util.Iterator)
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        java.util.HashMap $r1;
        net.sourceforge.plantuml.command.regex.RegexComposed r3;
        java.util.List $r4;
        java.util.Iterator r5, r8;
        boolean $z0;
        java.lang.Object $r6;
        net.sourceforge.plantuml.command.regex.IRegex r7;
        java.util.Map $r9;

        r3 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        r8 := @parameter0: java.util.Iterator;

        $r0 = <net.sourceforge.plantuml.command.regex.RegexComposed: java.util.concurrent.atomic.AtomicInteger nbCreateMatches>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r4 = r3.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.List partials>;

        r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (net.sourceforge.plantuml.command.regex.IRegex) $r6;

        $r9 = interfaceinvoke r7.<net.sourceforge.plantuml.command.regex.IRegex: java.util.Map createPartialMatch(java.util.Iterator)>(r8);

        interfaceinvoke $r1.<java.util.Map: void putAll(java.util.Map)>($r9);

        goto label1;

     label2:
        return $r1;
    }

    public final int count()
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.command.regex.IRegex r4;
        int $i0, i1;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        i1 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexComposed: int getStartCount()>();

        $r1 = r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.List partials>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.sourceforge.plantuml.command.regex.IRegex) $r3;

        $i0 = interfaceinvoke r4.<net.sourceforge.plantuml.command.regex.IRegex: int count()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    protected int getStartCount()
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        return 0;
    }

    public net.sourceforge.plantuml.command.regex.RegexResult matcher(java.lang.String)
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;
        java.lang.String r2;
        net.sourceforge.plantuml.command.regex.Matcher2 r3;
        boolean $z0;
        net.sourceforge.plantuml.command.regex.MatcherIterator $r4;
        net.sourceforge.plantuml.command.regex.RegexResult $r6;
        java.util.Map $r7;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.command.regex.RegexComposed: net.sourceforge.plantuml.command.regex.Pattern2 getPattern2()>();

        r3 = virtualinvoke $r1.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke r3.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = new net.sourceforge.plantuml.command.regex.MatcherIterator;

        specialinvoke $r4.<net.sourceforge.plantuml.command.regex.MatcherIterator: void <init>(net.sourceforge.plantuml.command.regex.Matcher2)>(r3);

        $r6 = new net.sourceforge.plantuml.command.regex.RegexResult;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.Map createPartialMatch(java.util.Iterator)>($r4);

        specialinvoke $r6.<net.sourceforge.plantuml.command.regex.RegexResult: void <init>(java.util.Map)>($r7);

        return $r6;
    }

    public boolean match(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.StringLocated r0;
        java.lang.String r1;
        net.sourceforge.plantuml.command.regex.RegexComposed r2;
        net.sourceforge.plantuml.command.regex.Pattern2 $r3;
        net.sourceforge.plantuml.command.regex.Matcher2 r4;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        r0 := @parameter0: net.sourceforge.plantuml.StringLocated;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r3 = specialinvoke r2.<net.sourceforge.plantuml.command.regex.RegexComposed: net.sourceforge.plantuml.command.regex.Pattern2 getPattern2()>();

        r4 = virtualinvoke $r3.<net.sourceforge.plantuml.command.regex.Pattern2: net.sourceforge.plantuml.command.regex.Matcher2 matcher(java.lang.CharSequence)>(r1);

        if r4 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r4.<net.sourceforge.plantuml.command.regex.Matcher2: boolean find()>();

        return $z0;
    }

    public final java.lang.String getPattern()
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        net.sourceforge.plantuml.command.regex.Pattern2 $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.command.regex.RegexComposed: net.sourceforge.plantuml.command.regex.Pattern2 getPattern2()>();

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.command.regex.Pattern2: java.lang.String pattern()>();

        return $r2;
    }

    protected final java.util.List getPartials()
    {
        net.sourceforge.plantuml.command.regex.RegexComposed r0;
        java.util.List $r1;

        r0 := @this: net.sourceforge.plantuml.command.regex.RegexComposed;

        $r1 = r0.<net.sourceforge.plantuml.command.regex.RegexComposed: java.util.List partials>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <net.sourceforge.plantuml.command.regex.RegexComposed: java.util.concurrent.atomic.AtomicInteger nbCreateMatches> = $r0;

        return;
    }
}
