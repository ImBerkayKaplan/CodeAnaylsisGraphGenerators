public class net.sourceforge.plantuml.salt.element.Skeleton2 extends java.lang.Object
{
    private final java.util.List entries;
    private static final double sizeX;

    public void <init>()
    {
        net.sourceforge.plantuml.salt.element.Skeleton2 r0;
        java.util.ArrayList $r1;

        r0 := @this: net.sourceforge.plantuml.salt.element.Skeleton2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.salt.element.Skeleton2: java.util.List entries> = $r1;

        return;
    }

    public void add(int, double)
    {
        net.sourceforge.plantuml.salt.element.Skeleton2 r0;
        net.sourceforge.plantuml.salt.element.Skeleton2$Entry $r1;
        int i0;
        double d0;
        java.util.List $r2;

        r0 := @this: net.sourceforge.plantuml.salt.element.Skeleton2;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r2 = r0.<net.sourceforge.plantuml.salt.element.Skeleton2: java.util.List entries>;

        $r1 = new net.sourceforge.plantuml.salt.element.Skeleton2$Entry;

        specialinvoke $r1.<net.sourceforge.plantuml.salt.element.Skeleton2$Entry: void <init>(int,double)>(i0, d0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.salt.element.Skeleton2 r0;
        java.util.List $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.salt.element.Skeleton2$Entry r4, r6;
        net.sourceforge.plantuml.ugraphic.UGraphic r5;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.salt.element.Skeleton2;

        r5 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        i1 = 0;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.salt.element.Skeleton2: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r2 = r0.<net.sourceforge.plantuml.salt.element.Skeleton2: java.util.List entries>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (net.sourceforge.plantuml.salt.element.Skeleton2$Entry) $r3;

        virtualinvoke r4.<net.sourceforge.plantuml.salt.element.Skeleton2$Entry: void drawHline(net.sourceforge.plantuml.ugraphic.UGraphic)>(r5);

        r6 = specialinvoke r0.<net.sourceforge.plantuml.salt.element.Skeleton2: net.sourceforge.plantuml.salt.element.Skeleton2$Entry getMotherOrSister(int)>(i1);

        if r6 != null goto label2;

        $d0 = 0.0;

        goto label3;

     label2:
        $d0 = staticinvoke <net.sourceforge.plantuml.salt.element.Skeleton2$Entry: double access$100(net.sourceforge.plantuml.salt.element.Skeleton2$Entry)>(r6);

     label3:
        virtualinvoke r4.<net.sourceforge.plantuml.salt.element.Skeleton2$Entry: void drawVline(net.sourceforge.plantuml.ugraphic.UGraphic,double)>(r5, $d0);

        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private net.sourceforge.plantuml.salt.element.Skeleton2$Entry getMotherOrSister(int)
    {
        net.sourceforge.plantuml.salt.element.Skeleton2 r0;
        int i0, i1, i2, $i3, i4;
        java.util.List $r1, $r4, $r7;
        java.lang.Object $r2, $r5, $r8;
        net.sourceforge.plantuml.salt.element.Skeleton2$Entry $r3, $r6, $r9;

        r0 := @this: net.sourceforge.plantuml.salt.element.Skeleton2;

        i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.plantuml.salt.element.Skeleton2: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (net.sourceforge.plantuml.salt.element.Skeleton2$Entry) $r2;

        i1 = staticinvoke <net.sourceforge.plantuml.salt.element.Skeleton2$Entry: int access$200(net.sourceforge.plantuml.salt.element.Skeleton2$Entry)>($r3);

        i4 = i0 - 1;

     label1:
        if i4 < 0 goto label4;

        $r4 = r0.<net.sourceforge.plantuml.salt.element.Skeleton2: java.util.List entries>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        $r6 = (net.sourceforge.plantuml.salt.element.Skeleton2$Entry) $r5;

        i2 = staticinvoke <net.sourceforge.plantuml.salt.element.Skeleton2$Entry: int access$200(net.sourceforge.plantuml.salt.element.Skeleton2$Entry)>($r6);

        if i2 == i1 goto label2;

        $i3 = i1 - 1;

        if i2 != $i3 goto label3;

     label2:
        $r7 = r0.<net.sourceforge.plantuml.salt.element.Skeleton2: java.util.List entries>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i4);

        $r9 = (net.sourceforge.plantuml.salt.element.Skeleton2$Entry) $r8;

        return $r9;

     label3:
        i4 = i4 + -1;

        goto label1;

     label4:
        return null;
    }

    private static double getXStartForLevel(int)
    {
        int i0;
        double $d0, $d1;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        $d1 = $d0 * 8.0;

        return $d1;
    }

    public double getXEndForLevel(int)
    {
        int i0;
        double $d0, $d1;
        net.sourceforge.plantuml.salt.element.Skeleton2 r0;

        r0 := @this: net.sourceforge.plantuml.salt.element.Skeleton2;

        i0 := @parameter0: int;

        $d0 = staticinvoke <net.sourceforge.plantuml.salt.element.Skeleton2: double getXStartForLevel(int)>(i0);

        $d1 = $d0 + 8.0;

        return $d1;
    }

    static double access$000(int)
    {
        int i0;
        double $d0;

        i0 := @parameter0: int;

        $d0 = staticinvoke <net.sourceforge.plantuml.salt.element.Skeleton2: double getXStartForLevel(int)>(i0);

        return $d0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.salt.element.Skeleton2: double sizeX> = 8.0;

        return;
    }
}
