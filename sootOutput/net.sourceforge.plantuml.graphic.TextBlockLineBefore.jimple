public class net.sourceforge.plantuml.graphic.TextBlockLineBefore extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock, net.sourceforge.plantuml.svek.WithPorts
{
    private final net.sourceforge.plantuml.graphic.TextBlock textBlock;
    private final char separator;
    private final net.sourceforge.plantuml.graphic.TextBlock title;
    private final double defaultThickness;

    public void <init>(double, net.sourceforge.plantuml.graphic.TextBlock, char, net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.graphic.TextBlockLineBefore r0;
        net.sourceforge.plantuml.graphic.TextBlock r1, r2;
        char c0;
        double d0;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        c0 := @parameter2: char;

        r2 := @parameter3: net.sourceforge.plantuml.graphic.TextBlock;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock textBlock> = r1;

        r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: char separator> = c0;

        r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock title> = r2;

        r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: double defaultThickness> = d0;

        return;
    }

    public void <init>(double, net.sourceforge.plantuml.graphic.TextBlock, char)
    {
        net.sourceforge.plantuml.graphic.TextBlockLineBefore r0;
        double d0;
        net.sourceforge.plantuml.graphic.TextBlock r1;
        char c0;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        c0 := @parameter2: char;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: void <init>(double,net.sourceforge.plantuml.graphic.TextBlock,char,net.sourceforge.plantuml.graphic.TextBlock)>(d0, r1, c0, null);

        return;
    }

    public void <init>(double, net.sourceforge.plantuml.graphic.TextBlock)
    {
        net.sourceforge.plantuml.graphic.TextBlockLineBefore r0;
        double d0;
        net.sourceforge.plantuml.graphic.TextBlock r1;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.graphic.TextBlock;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: void <init>(double,net.sourceforge.plantuml.graphic.TextBlock,char)>(d0, r1, 0);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockLineBefore r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2, $r4, $r5;
        net.sourceforge.plantuml.awt.geom.Dimension2D r3, r6, $r7;
        double $d0, $d1, $d2;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $r4 = r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock title>;

        if $r4 == null goto label1;

        $r5 = r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock title>;

        r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d0 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = $d0 + 8.0;

        $d2 = virtualinvoke r6.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r7 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D atLeast(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r3, $d1, $d2);

        return $r7;

     label1:
        return r3;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UParam $r0;
        net.sourceforge.plantuml.ugraphic.color.HColor r1;
        net.sourceforge.plantuml.graphic.TextBlockLineBefore r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3, $r4, $r5, $r6;
        char $c0, $c1;
        double $d0, $d1;
        net.sourceforge.plantuml.ugraphic.UHorizontalLine $r7, $r9;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r8;
        net.sourceforge.plantuml.ugraphic.UGraphic r10, r11;

        r2 := @this: net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        r10 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UParam getParam()>();

        r1 = interfaceinvoke $r0.<net.sourceforge.plantuml.ugraphic.UParam: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r3 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock title>;

        if $r3 != null goto label1;

        $d1 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: double defaultThickness>;

        $c1 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: char separator>;

        $r9 = staticinvoke <net.sourceforge.plantuml.ugraphic.UHorizontalLine: net.sourceforge.plantuml.ugraphic.UHorizontalLine infinite(double,double,double,char)>($d1, 1.0, 1.0, $c1);

        virtualinvoke $r9.<net.sourceforge.plantuml.ugraphic.UHorizontalLine: void drawMe(net.sourceforge.plantuml.ugraphic.UGraphic)>(r10);

     label1:
        $r4 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r10);

        if r1 != null goto label2;

        $r8 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        r11 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r8);

        goto label3;

     label2:
        r11 = interfaceinvoke r10.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r1);

     label3:
        $r5 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock title>;

        if $r5 == null goto label4;

        $d0 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: double defaultThickness>;

        $r6 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock title>;

        $c0 = r2.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: char separator>;

        $r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.UHorizontalLine: net.sourceforge.plantuml.ugraphic.UHorizontalLine infinite(double,double,double,net.sourceforge.plantuml.graphic.TextBlock,char)>($d0, 1.0, 1.0, $r6, $c0);

        virtualinvoke $r7.<net.sourceforge.plantuml.ugraphic.UHorizontalLine: void drawMe(net.sourceforge.plantuml.ugraphic.UGraphic)>(r11);

     label4:
        return;
    }

    public java.awt.geom.Rectangle2D getInnerPosition(java.lang.String, net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.graphic.InnerStrategy)
    {
        net.sourceforge.plantuml.graphic.TextBlockLineBefore r0;
        java.lang.String r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.graphic.InnerStrategy r3;
        net.sourceforge.plantuml.graphic.TextBlock $r4;
        java.awt.geom.Rectangle2D $r5;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.graphic.StringBounder;

        r3 := @parameter2: net.sourceforge.plantuml.graphic.InnerStrategy;

        $r4 = r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r5 = interfaceinvoke $r4.<net.sourceforge.plantuml.graphic.TextBlock: java.awt.geom.Rectangle2D getInnerPosition(java.lang.String,net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.graphic.InnerStrategy)>(r1, r2, r3);

        return $r5;
    }

    public net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.graphic.TextBlockLineBefore r0;
        net.sourceforge.plantuml.graphic.TextBlock $r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        net.sourceforge.plantuml.svek.WithPorts $r3;
        net.sourceforge.plantuml.svek.Ports $r4;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockLineBefore;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.graphic.TextBlockLineBefore: net.sourceforge.plantuml.graphic.TextBlock textBlock>;

        $r3 = (net.sourceforge.plantuml.svek.WithPorts) $r1;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.svek.WithPorts: net.sourceforge.plantuml.svek.Ports getPorts(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $r4;
    }
}
