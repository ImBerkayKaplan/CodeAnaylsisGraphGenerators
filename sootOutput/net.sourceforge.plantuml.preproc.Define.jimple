public class net.sourceforge.plantuml.preproc.Define extends java.lang.Object
{
    private final net.sourceforge.plantuml.preproc.DefineSignature signature;
    private final java.lang.String definition;
    private final java.lang.String definitionQuoted;
    private final boolean emptyParentheses;
    private java.util.regex.Pattern pattern;
    private final net.sourceforge.plantuml.AParentFolder currentDir;

    public void <init>(java.lang.String, java.util.List, boolean, net.sourceforge.plantuml.AParentFolder)
    {
        net.sourceforge.plantuml.preproc.Define r0;
        net.sourceforge.plantuml.AParentFolder r1;
        boolean z0, $z1, $z2;
        java.util.List r2;
        java.lang.StringBuilder $r3;
        java.util.Iterator r5;
        java.lang.String $r6, $r7, $r8, r10, $r11, $r13;
        net.sourceforge.plantuml.preproc.DefineSignature $r9;
        java.lang.Object $r12;

        r0 := @this: net.sourceforge.plantuml.preproc.Define;

        r10 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        r1 := @parameter3: net.sourceforge.plantuml.AParentFolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.preproc.Define: net.sourceforge.plantuml.AParentFolder currentDir> = r1;

        r0.<net.sourceforge.plantuml.preproc.Define: boolean emptyParentheses> = z0;

        if r2 != null goto label1;

        r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definition> = null;

        r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definitionQuoted> = null;

        goto label4;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.String) $r12;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label2;

     label3:
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definition> = $r6;

        $r7 = r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definition>;

        $r8 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r7);

        r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definitionQuoted> = $r8;

     label4:
        $r9 = new net.sourceforge.plantuml.preproc.DefineSignature;

        $r11 = r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definitionQuoted>;

        specialinvoke $r9.<net.sourceforge.plantuml.preproc.DefineSignature: void <init>(java.lang.String,java.lang.String)>(r10, $r11);

        r0.<net.sourceforge.plantuml.preproc.Define: net.sourceforge.plantuml.preproc.DefineSignature signature> = $r9;

        return;
    }

    public java.lang.String toString()
    {
        net.sourceforge.plantuml.preproc.Define r0;
        net.sourceforge.plantuml.preproc.DefineSignature $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.preproc.Define;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Define: net.sourceforge.plantuml.preproc.DefineSignature signature>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.preproc.DefineSignature: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String apply(java.lang.String)
    {
        net.sourceforge.plantuml.preproc.Define r0;
        java.lang.String $r1, $r2, r4, r5;
        boolean $z0, $z1;
        net.sourceforge.plantuml.preproc.DefineSignature $r3;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.preproc.Define;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definition>;

        if $r1 != null goto label1;

        return r4;

     label1:
        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String getFunctionName()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label2;

        return r4;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.preproc.Define: net.sourceforge.plantuml.preproc.DefineSignature signature>;

        $z1 = virtualinvoke $r3.<net.sourceforge.plantuml.preproc.DefineSignature: boolean isMethod()>();

        if $z1 == 0 goto label4;

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(40);

        if $i0 != -1 goto label3;

        return r4;

     label3:
        r5 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String apply1(java.lang.String)>(r4);

        goto label5;

     label4:
        r5 = specialinvoke r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String apply2(java.lang.String)>(r4);

     label5:
        return r5;
    }

    private java.lang.String apply2(java.lang.String)
    {
        net.sourceforge.plantuml.preproc.Define r0;
        java.util.regex.Pattern $r1, $r10, $r14;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r8;
        net.sourceforge.plantuml.preproc.DefineSignature $r4;
        java.lang.String $r5, r9, r11, $r12, r13, $r16, r17, r18;
        boolean $z0;
        java.util.regex.Matcher $r15;

        r0 := @this: net.sourceforge.plantuml.preproc.Define;

        r11 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Define: java.util.regex.Pattern pattern>;

        if $r1 != null goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\b");

        $r4 = r0.<net.sourceforge.plantuml.preproc.Define: net.sourceforge.plantuml.preproc.DefineSignature signature>;

        $r5 = virtualinvoke $r4.<net.sourceforge.plantuml.preproc.DefineSignature: java.lang.String getKey()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\b");

        $z0 = r0.<net.sourceforge.plantuml.preproc.Define: boolean emptyParentheses>;

        if $z0 == 0 goto label1;

        $r12 = "(\\(\\))?";

        goto label2;

     label1:
        $r12 = "";

     label2:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r9);

        r0.<net.sourceforge.plantuml.preproc.Define: java.util.regex.Pattern pattern> = $r10;

     label3:
        r13 = staticinvoke <net.sourceforge.plantuml.BackSlash: java.lang.String translateBackSlashes(java.lang.CharSequence)>(r11);

        $r14 = r0.<net.sourceforge.plantuml.preproc.Define: java.util.regex.Pattern pattern>;

        $r15 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r13);

        $r16 = r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definitionQuoted>;

        r17 = virtualinvoke $r15.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r16);

        r18 = staticinvoke <net.sourceforge.plantuml.BackSlash: java.lang.String untranslateBackSlashes(java.lang.CharSequence)>(r17);

        return r18;
    }

    private java.lang.String apply1(java.lang.String)
    {
        net.sourceforge.plantuml.preproc.Define r0;
        net.sourceforge.plantuml.preproc.DefineSignature $r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.preproc.Variables r5;
        java.lang.String r6;

        r0 := @this: net.sourceforge.plantuml.preproc.Define;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Define: net.sourceforge.plantuml.preproc.DefineSignature signature>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.preproc.DefineSignature: java.util.List getVariationVariables()>();

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.preproc.Variables) $r4;

        r6 = virtualinvoke r5.<net.sourceforge.plantuml.preproc.Variables: java.lang.String applyOn(java.lang.String)>(r6);

        goto label1;

     label2:
        return r6;
    }

    public final java.lang.String getFunctionName()
    {
        net.sourceforge.plantuml.preproc.Define r0;
        net.sourceforge.plantuml.preproc.DefineSignature $r1;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.plantuml.preproc.Define;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Define: net.sourceforge.plantuml.preproc.DefineSignature signature>;

        $r2 = virtualinvoke $r1.<net.sourceforge.plantuml.preproc.DefineSignature: java.lang.String getFonctionName()>();

        return $r2;
    }

    public net.sourceforge.plantuml.tim.expression.TValue asTVariable()
    {
        net.sourceforge.plantuml.preproc.Define r0;
        java.lang.String $r1;
        net.sourceforge.plantuml.tim.expression.TValue $r2;

        r0 := @this: net.sourceforge.plantuml.preproc.Define;

        $r1 = r0.<net.sourceforge.plantuml.preproc.Define: java.lang.String definition>;

        $r2 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromString(java.lang.String)>($r1);

        return $r2;
    }
}
