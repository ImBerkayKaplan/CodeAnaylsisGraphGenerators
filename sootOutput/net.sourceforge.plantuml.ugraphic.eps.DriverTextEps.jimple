public class net.sourceforge.plantuml.ugraphic.eps.DriverTextEps extends java.lang.Object implements net.sourceforge.plantuml.ugraphic.UDriver
{
    private final net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer;
    private final net.sourceforge.plantuml.eps.EpsStrategy strategy;

    public void <init>(net.sourceforge.plantuml.ugraphic.ClipContainer, net.sourceforge.plantuml.eps.EpsStrategy)
    {
        net.sourceforge.plantuml.ugraphic.eps.DriverTextEps r0;
        net.sourceforge.plantuml.ugraphic.ClipContainer r1;
        net.sourceforge.plantuml.eps.EpsStrategy r2;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverTextEps;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.ClipContainer;

        r2 := @parameter1: net.sourceforge.plantuml.eps.EpsStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer> = r1;

        r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.eps.EpsStrategy strategy> = r2;

        return;
    }

    public void draw(net.sourceforge.plantuml.ugraphic.UText, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, net.sourceforge.plantuml.eps.EpsGraphics)
    {
        net.sourceforge.plantuml.ugraphic.eps.DriverTextEps r0;
        net.sourceforge.plantuml.ugraphic.ClipContainer $r1;
        net.sourceforge.plantuml.ugraphic.UClip r2;
        net.sourceforge.plantuml.ugraphic.UText r3;
        net.sourceforge.plantuml.graphic.FontConfiguration r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r5, $r22, $r28, r32, r34, r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        net.sourceforge.plantuml.eps.EpsStrategy $r6, $r7;
        java.awt.font.TextLayout r8;
        net.sourceforge.plantuml.graphic.FontStyle $r9, $r12, $r31, $r33;
        net.sourceforge.plantuml.eps.EpsGraphics r10;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r11;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, d33;
        java.awt.Shape $r13, $r17, $r19, $r23, $r30;
        java.awt.geom.PathIterator $r14, $r18, $r20, $r24;
        java.awt.Color $r15, $r16, $r21, r27, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        net.sourceforge.plantuml.ugraphic.UParam r25;
        net.sourceforge.plantuml.ugraphic.MinMax r26;
        byte $b10;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverTextEps;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UText;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r11 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r25 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r10 := @parameter5: net.sourceforge.plantuml.eps.EpsGraphics;

        $r1 = r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.ClipContainer clipContainer>;

        r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.ugraphic.ClipContainer: net.sourceforge.plantuml.ugraphic.UClip getClip()>();

        if r2 == null goto label01;

        $z3 = virtualinvoke r2.<net.sourceforge.plantuml.ugraphic.UClip: boolean isInside(double,double)>(d0, d1);

        if $z3 != 0 goto label01;

        return;

     label01:
        r4 = virtualinvoke r3.<net.sourceforge.plantuml.ugraphic.UText: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()>();

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.ugraphic.color.HColorUtils: boolean isTransparent(net.sourceforge.plantuml.ugraphic.color.HColor)>($r5);

        if $z0 == 0 goto label02;

        return;

     label02:
        $r7 = r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.eps.EpsStrategy strategy>;

        $r6 = <net.sourceforge.plantuml.eps.EpsStrategy: net.sourceforge.plantuml.eps.EpsStrategy WITH_MACRO_AND_TEXT>;

        if $r7 != $r6 goto label03;

        specialinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: void drawAsText(net.sourceforge.plantuml.ugraphic.UText,double,double,net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.eps.EpsGraphics,net.sourceforge.plantuml.ugraphic.color.ColorMapper)>(r3, d0, d1, r25, r10, r11);

        return;

     label03:
        r8 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: java.awt.font.TextLayout createTextLayout(net.sourceforge.plantuml.ugraphic.UText)>(r3);

        r26 = null;

        $r9 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle BACKCOLOR>;

        $z1 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: boolean containsStyle(net.sourceforge.plantuml.graphic.FontStyle)>($r9);

        if $z1 == 0 goto label04;

        $r22 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getExtendedColor()>();

        r27 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r22);

        if r27 == null goto label04;

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>(r27);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setFillColor(java.awt.Color)>(r27);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>(1.0, 0.0, 0.0);

        $r23 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: java.awt.Shape getOutline(java.awt.font.TextLayout)>(r8);

        $r24 = interfaceinvoke $r23.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r26 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(double,double,java.awt.geom.PathIterator)>(d0, d1, $r24);

        $d21 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $d22 = $d21 - 1.0;

        $d23 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $d24 = $d23 - 1.0;

        $d25 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getWidth()>();

        $d26 = $d25 + 2.0;

        $d27 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getHeight()>();

        $d28 = $d27 + 2.0;

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void epsRectangle(double,double,double,double,double,double)>($d22, $d24, $d26, $d28, 0.0, 0.0);

     label04:
        $r28 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r29 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r28);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>($r29);

        $r30 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: java.awt.Shape getOutline(java.awt.font.TextLayout)>(r8);

        staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: void drawPathIterator(net.sourceforge.plantuml.eps.EpsGraphics,double,double,java.awt.Shape)>(r10, d0, d1, $r30);

        $r31 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle UNDERLINE>;

        $z4 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: boolean containsStyle(net.sourceforge.plantuml.graphic.FontStyle)>($r31);

        if $z4 == 0 goto label07;

        r32 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getExtendedColor()>();

        if r32 == null goto label05;

        $r21 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r32);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>($r21);

     label05:
        if r26 != null goto label06;

        $r19 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: java.awt.Shape getOutline(java.awt.font.TextLayout)>(r8);

        $r20 = interfaceinvoke $r19.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r26 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(double,double,java.awt.geom.PathIterator)>(d0, d1, $r20);

     label06:
        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>(1.1, 0.0, 0.0);

        $d17 = d1 + 1.5;

        $d18 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getWidth()>();

        $d20 = d0 + $d18;

        $d19 = d1 + 1.5;

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void epsLine(double,double,double,double)>(d0, $d17, $d20, $d19);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>(1.0, 0.0, 0.0);

     label07:
        $r33 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle WAVE>;

        $z5 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: boolean containsStyle(net.sourceforge.plantuml.graphic.FontStyle)>($r33);

        if $z5 == 0 goto label12;

        if r26 != null goto label08;

        $r17 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: java.awt.Shape getOutline(java.awt.font.TextLayout)>(r8);

        $r18 = interfaceinvoke $r17.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r26 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(double,double,java.awt.geom.PathIterator)>(d0, d1, $r18);

     label08:
        $d8 = d1 + 2.5;

        $i0 = (int) $d8;

        i8 = $i0 - 1;

        r34 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getExtendedColor()>();

        if r34 == null goto label09;

        $r16 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r34);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>($r16);

     label09:
        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>(1.1, 0.0, 0.0);

        i9 = (int) d0;

     label10:
        $d29 = (double) i9;

        $d30 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getWidth()>();

        $d31 = d0 + $d30;

        $d32 = $d31 - 5.0;

        $b10 = $d29 cmpg $d32;

        if $b10 >= 0 goto label11;

        $d12 = (double) i9;

        $i1 = i8 - 0;

        $d11 = (double) $i1;

        $i2 = i9 + 3;

        $d10 = (double) $i2;

        $i3 = i8 + 1;

        $d9 = (double) $i3;

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void epsLine(double,double,double,double)>($d12, $d11, $d10, $d9);

        $i4 = i9 + 3;

        $d16 = (double) $i4;

        $i5 = i8 + 1;

        $d15 = (double) $i5;

        $i6 = i9 + 6;

        $d14 = (double) $i6;

        $i7 = i8 - 0;

        $d13 = (double) $i7;

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void epsLine(double,double,double,double)>($d16, $d15, $d14, $d13);

        i9 = i9 + 6;

        goto label10;

     label11:
        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>(1.0, 0.0, 0.0);

     label12:
        $r12 = <net.sourceforge.plantuml.graphic.FontStyle: net.sourceforge.plantuml.graphic.FontStyle STRIKE>;

        $z2 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: boolean containsStyle(net.sourceforge.plantuml.graphic.FontStyle)>($r12);

        if $z2 == 0 goto label15;

        r35 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getExtendedColor()>();

        if r35 == null goto label13;

        $r15 = interfaceinvoke r11.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>(r35);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>($r15);

     label13:
        if r26 != null goto label14;

        $r13 = specialinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: java.awt.Shape getOutline(java.awt.font.TextLayout)>(r8);

        $r14 = interfaceinvoke $r13.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r26 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(double,double,java.awt.geom.PathIterator)>(d0, d1, $r14);

     label14:
        $d2 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinY()>();

        $d3 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxY()>();

        $d4 = $d3 * 2.0;

        $d5 = $d2 + $d4;

        d33 = $d5 / 3.0;

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>(1.3, 0.0, 0.0);

        $d6 = virtualinvoke r26.<net.sourceforge.plantuml.ugraphic.MinMax: double getWidth()>();

        $d7 = d0 + $d6;

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void epsLine(double,double,double,double)>(d0, d33, $d7, d33);

        virtualinvoke r10.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeWidth(double,double,double)>(1.0, 0.0, 0.0);

     label15:
        return;
    }

    private java.awt.Shape getOutline(java.awt.font.TextLayout)
    {
        java.awt.font.TextLayout r0;
        java.awt.Shape $r1;
        net.sourceforge.plantuml.ugraphic.eps.DriverTextEps r2;

        r2 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverTextEps;

        r0 := @parameter0: java.awt.font.TextLayout;

        $r1 = virtualinvoke r0.<java.awt.font.TextLayout: java.awt.Shape getOutline(java.awt.geom.AffineTransform)>(null);

        return $r1;
    }

    private void drawAsText(net.sourceforge.plantuml.ugraphic.UText, double, double, net.sourceforge.plantuml.ugraphic.UParam, net.sourceforge.plantuml.eps.EpsGraphics, net.sourceforge.plantuml.ugraphic.color.ColorMapper)
    {
        net.sourceforge.plantuml.ugraphic.UText r0;
        net.sourceforge.plantuml.graphic.FontConfiguration r1;
        double d0, d1, d2;
        net.sourceforge.plantuml.eps.EpsGraphics r2;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;
        java.awt.Color $r5;
        net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText $r6;
        java.lang.String $r7;
        net.sourceforge.plantuml.ugraphic.eps.DriverTextEps r8;
        net.sourceforge.plantuml.ugraphic.UParam r9;

        r8 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverTextEps;

        r0 := @parameter0: net.sourceforge.plantuml.ugraphic.UText;

        d2 := @parameter1: double;

        d0 := @parameter2: double;

        r9 := @parameter3: net.sourceforge.plantuml.ugraphic.UParam;

        r2 := @parameter4: net.sourceforge.plantuml.eps.EpsGraphics;

        r3 := @parameter5: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r1 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UText: net.sourceforge.plantuml.graphic.FontConfiguration getFontConfiguration()>();

        d1 = d0 - 1.0;

        $r4 = virtualinvoke r1.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.color.ColorMapper: java.awt.Color toColor(net.sourceforge.plantuml.ugraphic.color.HColor)>($r4);

        virtualinvoke r2.<net.sourceforge.plantuml.eps.EpsGraphics: void setStrokeColor(java.awt.Color)>($r5);

        $r6 = (net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText) r2;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.UText: java.lang.String getText()>();

        virtualinvoke $r6.<net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText: void drawText(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration,double,double)>($r7, r1, d2, d1);

        return;
    }

    static void drawPathIterator(net.sourceforge.plantuml.eps.EpsGraphics, double, double, java.awt.Shape)
    {
        java.awt.Shape r0;
        java.util.List r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited $r2, $r6, $r9;
        java.lang.Object $r3, $r7, $r10, $r12;
        java.lang.Integer $r4, $r8, $r11, $r13;
        net.sourceforge.plantuml.eps.EpsGraphics r5;
        double d0, d1;
        java.awt.geom.PathIterator r15;

        r5 := @parameter0: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r0 := @parameter3: java.awt.Shape;

        r1 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: java.util.List analyze(java.awt.Shape)>(r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        r15 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: void drawSingle(net.sourceforge.plantuml.eps.EpsGraphics,double,double,java.awt.geom.PathIterator)>(r5, d0, d1, r15);

        return;

     label1:
        $r2 = new net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        specialinvoke $r2.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: void <init>(java.awt.Shape,int,int)>(r0, 0, $i1);

        staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: void drawSingle(net.sourceforge.plantuml.eps.EpsGraphics,double,double,java.awt.geom.PathIterator)>(r5, d0, d1, $r2);

        i12 = 0;

     label2:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        if i12 >= $i3 goto label3;

        $r9 = new net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i12);

        $r11 = (java.lang.Integer) $r10;

        $i8 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $i10 = $i8 + 1;

        $i9 = i12 + 1;

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i9);

        $r13 = (java.lang.Integer) $r12;

        $i11 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        specialinvoke $r9.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: void <init>(java.awt.Shape,int,int)>(r0, $i10, $i11);

        staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: void drawSingle(net.sourceforge.plantuml.eps.EpsGraphics,double,double,java.awt.geom.PathIterator)>(r5, d0, d1, $r9);

        i12 = i12 + 1;

        goto label2;

     label3:
        $r6 = new net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i5);

        $r8 = (java.lang.Integer) $r7;

        $i6 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i7 = $i6 + 1;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: void <init>(java.awt.Shape,int,int)>(r0, $i7, 2147483647);

        staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: void drawSingle(net.sourceforge.plantuml.eps.EpsGraphics,double,double,java.awt.geom.PathIterator)>(r5, d0, d1, $r6);

        return;
    }

    private static void drawSingle(net.sourceforge.plantuml.eps.EpsGraphics, double, double, java.awt.geom.PathIterator)
    {
        net.sourceforge.plantuml.eps.EpsGraphics r0;
        double[] r1;
        java.awt.geom.PathIterator r2;
        boolean $z0;
        int $i0, i1;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;

        r0 := @parameter0: net.sourceforge.plantuml.eps.EpsGraphics;

        d0 := @parameter1: double;

        d2 := @parameter2: double;

        r2 := @parameter3: java.awt.geom.PathIterator;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void newpath()>();

        r1 = newarray (double)[6];

     label1:
        $z0 = interfaceinvoke r2.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label8;

        i1 = interfaceinvoke r2.<java.awt.geom.PathIterator: int currentSegment(double[])>(r1);

        if i1 != 0 goto label2;

        $d26 = r1[0];

        $d29 = $d26 + d0;

        $d27 = r1[1];

        $d28 = $d27 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void moveto(double,double)>($d29, $d28);

        goto label7;

     label2:
        if i1 != 1 goto label3;

        $d22 = r1[0];

        $d25 = $d22 + d0;

        $d23 = r1[1];

        $d24 = $d23 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void lineto(double,double)>($d25, $d24);

        goto label7;

     label3:
        if i1 != 4 goto label4;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void closepath()>();

        goto label7;

     label4:
        if i1 != 3 goto label5;

        $d10 = r1[0];

        $d21 = $d10 + d0;

        $d11 = r1[1];

        $d20 = $d11 + d2;

        $d12 = r1[2];

        $d19 = $d12 + d0;

        $d13 = r1[3];

        $d18 = $d13 + d2;

        $d14 = r1[4];

        $d17 = $d14 + d0;

        $d15 = r1[5];

        $d16 = $d15 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void curveto(double,double,double,double,double,double)>($d21, $d20, $d19, $d18, $d17, $d16);

        goto label7;

     label5:
        if i1 != 2 goto label6;

        $d1 = r1[0];

        $d9 = $d1 + d0;

        $d3 = r1[1];

        $d8 = $d3 + d2;

        $d4 = r1[2];

        $d7 = $d4 + d0;

        $d5 = r1[3];

        $d6 = $d5 + d2;

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void quadto(double,double,double,double)>($d9, $d8, $d7, $d6);

        goto label7;

     label6:
        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("code=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label7:
        interfaceinvoke r2.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label8:
        $i0 = interfaceinvoke r2.<java.awt.geom.PathIterator: int getWindingRule()>();

        virtualinvoke r0.<net.sourceforge.plantuml.eps.EpsGraphics: void fill(int)>($i0);

        return;
    }

    private static java.util.List analyze(java.awt.Shape)
    {
        java.awt.Shape r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.geom.PathIterator $r1;
        java.util.List r2;
        java.util.ArrayList $r3;
        java.util.Iterator r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Integer r7;
        net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited $r8, $r10;
        net.sourceforge.plantuml.ugraphic.MinMax $r12, $r13;
        double d0, d1;
        byte $b6;

        r0 := @parameter0: java.awt.Shape;

        i0 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: int count(java.awt.Shape)>(r0);

        $r1 = interfaceinvoke r0.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        r2 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: java.util.List getClosings(java.awt.geom.PathIterator)>($r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i2 = $i1 + 2;

        if $i2 < i0 goto label2;

        goto label4;

     label2:
        $r8 = new net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $i3 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        specialinvoke $r8.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: void <init>(java.awt.Shape,int,int)>(r0, 0, $i3);

        $r10 = new net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited;

        $i4 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i5 = $i4 + 1;

        specialinvoke $r10.<net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited: void <init>(java.awt.Shape,int,int)>(r0, $i5, 2147483647);

        $r12 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(double,double,java.awt.geom.PathIterator)>(0.0, 0.0, $r8);

        d0 = virtualinvoke $r12.<net.sourceforge.plantuml.ugraphic.MinMax: double getMaxX()>();

        $r13 = staticinvoke <net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: net.sourceforge.plantuml.ugraphic.MinMax getMinMax(double,double,java.awt.geom.PathIterator)>(0.0, 0.0, $r10);

        d1 = virtualinvoke $r13.<net.sourceforge.plantuml.ugraphic.MinMax: double getMinX()>();

        $b6 = d1 cmpl d0;

        if $b6 <= 0 goto label3;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r7);

     label3:
        goto label1;

     label4:
        return $r3;
    }

    private static java.util.List getClosings(java.awt.geom.PathIterator)
    {
        java.util.ArrayList $r0;
        double[] r2;
        java.awt.geom.PathIterator r3;
        boolean $z0;
        int i0, i1;
        java.lang.Integer $r4;

        r3 := @parameter0: java.awt.geom.PathIterator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

        r2 = newarray (double)[6];

     label1:
        $z0 = interfaceinvoke r3.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label3;

        i0 = interfaceinvoke r3.<java.awt.geom.PathIterator: int currentSegment(double[])>(r2);

        if i0 != 4 goto label2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        i1 = i1 + 1;

        interfaceinvoke r3.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label3:
        return $r0;
    }

    private static net.sourceforge.plantuml.ugraphic.MinMax getMinMax(double, double, java.awt.geom.PathIterator)
    {
        double[] r0;
        java.awt.geom.PathIterator r1;
        boolean $z0;
        int i0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;
        net.sourceforge.plantuml.ugraphic.MinMax r7, r8, r9, r10;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        r1 := @parameter2: java.awt.geom.PathIterator;

        r7 = staticinvoke <net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax getEmpty(boolean)>(0);

        r0 = newarray (double)[6];

     label1:
        $z0 = interfaceinvoke r1.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label8;

        i0 = interfaceinvoke r1.<java.awt.geom.PathIterator: int currentSegment(double[])>(r0);

        if i0 != 0 goto label2;

        $d26 = r0[0];

        $d29 = $d26 + d0;

        $d27 = r0[1];

        $d28 = $d27 + d2;

        r7 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d29, $d28);

        goto label7;

     label2:
        if i0 != 1 goto label3;

        $d22 = r0[0];

        $d25 = $d22 + d0;

        $d23 = r0[1];

        $d24 = $d23 + d2;

        r7 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d25, $d24);

        goto label7;

     label3:
        if i0 != 4 goto label4;

        goto label7;

     label4:
        if i0 != 3 goto label5;

        $d10 = r0[0];

        $d13 = $d10 + d0;

        $d11 = r0[1];

        $d12 = $d11 + d2;

        r8 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d13, $d12);

        $d14 = r0[2];

        $d17 = $d14 + d0;

        $d15 = r0[3];

        $d16 = $d15 + d2;

        r9 = virtualinvoke r8.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d17, $d16);

        $d18 = r0[4];

        $d21 = $d18 + d0;

        $d19 = r0[5];

        $d20 = $d19 + d2;

        r7 = virtualinvoke r9.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d21, $d20);

        goto label7;

     label5:
        if i0 != 2 goto label6;

        $d1 = r0[0];

        $d5 = $d1 + d0;

        $d3 = r0[1];

        $d4 = $d3 + d2;

        r10 = virtualinvoke r7.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d5, $d4);

        $d6 = r0[2];

        $d9 = $d6 + d0;

        $d7 = r0[3];

        $d8 = $d7 + d2;

        r7 = virtualinvoke r10.<net.sourceforge.plantuml.ugraphic.MinMax: net.sourceforge.plantuml.ugraphic.MinMax addPoint(double,double)>($d9, $d8);

        goto label7;

     label6:
        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("code=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label7:
        interfaceinvoke r1.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label8:
        return r7;
    }

    public volatile void draw(net.sourceforge.plantuml.ugraphic.UShape, double, double, net.sourceforge.plantuml.ugraphic.color.ColorMapper, net.sourceforge.plantuml.ugraphic.UParam, java.lang.Object)
    {
        net.sourceforge.plantuml.ugraphic.eps.DriverTextEps r0;
        net.sourceforge.plantuml.ugraphic.UShape r1;
        double d0, d1;
        net.sourceforge.plantuml.ugraphic.color.ColorMapper r2;
        net.sourceforge.plantuml.ugraphic.UParam r3;
        java.lang.Object r4;
        net.sourceforge.plantuml.eps.EpsGraphics $r5;
        net.sourceforge.plantuml.ugraphic.UText $r6;

        r0 := @this: net.sourceforge.plantuml.ugraphic.eps.DriverTextEps;

        r1 := @parameter0: net.sourceforge.plantuml.ugraphic.UShape;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: net.sourceforge.plantuml.ugraphic.color.ColorMapper;

        r3 := @parameter4: net.sourceforge.plantuml.ugraphic.UParam;

        r4 := @parameter5: java.lang.Object;

        $r6 = (net.sourceforge.plantuml.ugraphic.UText) r1;

        $r5 = (net.sourceforge.plantuml.eps.EpsGraphics) r4;

        virtualinvoke r0.<net.sourceforge.plantuml.ugraphic.eps.DriverTextEps: void draw(net.sourceforge.plantuml.ugraphic.UText,double,double,net.sourceforge.plantuml.ugraphic.color.ColorMapper,net.sourceforge.plantuml.ugraphic.UParam,net.sourceforge.plantuml.eps.EpsGraphics)>($r6, d0, d1, r2, r3, $r5);

        return;
    }
}
