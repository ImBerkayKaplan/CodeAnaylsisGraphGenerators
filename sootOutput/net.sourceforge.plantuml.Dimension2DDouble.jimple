public class net.sourceforge.plantuml.Dimension2DDouble extends net.sourceforge.plantuml.awt.geom.Dimension2D
{
    private final double width;
    private final double height;

    public void <init>(double, double)
    {
        net.sourceforge.plantuml.Dimension2DDouble r0;
        double d0, d1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: net.sourceforge.plantuml.Dimension2DDouble;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: void <init>()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        r0.<net.sourceforge.plantuml.Dimension2DDouble: double width> = d0;

        r0.<net.sourceforge.plantuml.Dimension2DDouble: double height> = d1;

        return;
    }

    public void <init>(java.awt.geom.Point2D)
    {
        net.sourceforge.plantuml.Dimension2DDouble r0;
        java.awt.geom.Point2D r1;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.Dimension2DDouble;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        specialinvoke r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d0, $d1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        net.sourceforge.plantuml.Dimension2DDouble r2;
        double $d0, $d1;
        java.lang.String $r7;

        r2 := @this: net.sourceforge.plantuml.Dimension2DDouble;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r2.<net.sourceforge.plantuml.Dimension2DDouble: double width>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $d1 = r2.<net.sourceforge.plantuml.Dimension2DDouble: double height>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public double getHeight()
    {
        net.sourceforge.plantuml.Dimension2DDouble r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = r0.<net.sourceforge.plantuml.Dimension2DDouble: double height>;

        return $d0;
    }

    public double getWidth()
    {
        net.sourceforge.plantuml.Dimension2DDouble r0;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.Dimension2DDouble;

        $d0 = r0.<net.sourceforge.plantuml.Dimension2DDouble: double width>;

        return $d0;
    }

    public void setSize(double, double)
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.Dimension2DDouble r1;
        double d0, d1;

        r1 := @this: net.sourceforge.plantuml.Dimension2DDouble;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D, double)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, $r1;
        double d0;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d0 := @parameter1: double;

        $r1 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r0, d0, d0);

        return $r1;
    }

    public net.sourceforge.plantuml.Dimension2DDouble withWidth(double)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0, r1;
        double d0, $d1;

        r1 := @this: net.sourceforge.plantuml.Dimension2DDouble;

        d0 := @parameter0: double;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.Dimension2DDouble: double height>;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d0, $d1);

        return $r0;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D delta(net.sourceforge.plantuml.awt.geom.Dimension2D, double, double)
    {
        double d0, $d1, d2, $d3, $d4, $d5;
        byte $b0, $b1;
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.awt.geom.Dimension2D r1;

        r1 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d2 := @parameter1: double;

        d0 := @parameter2: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b1 = d2 cmpl 0.0;

        if $b1 != 0 goto label1;

        return r1;

     label1:
        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d3 = $d1 + d2;

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = $d4 + d0;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d3, $d5);

        return $r0;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r1 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $d3 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d5 = $d3 + $d4;

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d2, d5);

        return $r2;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D mergeTB(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, r1, r2;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, d8;
        net.sourceforge.plantuml.Dimension2DDouble $r3;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r1 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r2 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d3 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>($d0, $d1, $d2);

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = $d4 + $d5;

        $d7 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d8 = $d6 + $d7;

        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d3, d8);

        return $r3;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D mergeLR(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, r1;
        double $d0, $d1, d2, $d3, $d4, d5;
        net.sourceforge.plantuml.Dimension2DDouble $r2;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r1 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $d3 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d4 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d5 = $d3 + $d4;

        $r2 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r2.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d5, d2);

        return $r2;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D mergeLayoutT12B3(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, r1, r2;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, d8;
        net.sourceforge.plantuml.Dimension2DDouble $r3;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r1 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r2 := @parameter2: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d2 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        d3 = staticinvoke <net.sourceforge.plantuml.utils.MathUtils: double max(double,double,double)>($d0, $d1, $d2);

        $d4 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d5 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $d6 = $d4 + $d5;

        $d7 = virtualinvoke r2.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d8 = $d6 + $d7;

        $r3 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r3.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d3, d8);

        return $r3;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D max(net.sourceforge.plantuml.awt.geom.Dimension2D, net.sourceforge.plantuml.awt.geom.Dimension2D)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0, r1, $r2;
        double $d0, $d1;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        r1 := @parameter1: net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $d1 = virtualinvoke r1.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        $r2 = staticinvoke <net.sourceforge.plantuml.Dimension2DDouble: net.sourceforge.plantuml.awt.geom.Dimension2D atLeast(net.sourceforge.plantuml.awt.geom.Dimension2D,double,double)>(r0, $d0, $d1);

        return $r2;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D atLeast(net.sourceforge.plantuml.awt.geom.Dimension2D, double, double)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D r0;
        double d0, d1, d2, d3;
        byte $b0, $b1, $b2, $b3;
        net.sourceforge.plantuml.Dimension2DDouble $r1;

        r0 := @parameter0: net.sourceforge.plantuml.awt.geom.Dimension2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getHeight()>();

        d3 = virtualinvoke r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: double getWidth()>();

        $b0 = d3 cmpl d0;

        if $b0 <= 0 goto label1;

        $b3 = d2 cmpl d1;

        if $b3 <= 0 goto label1;

        return r0;

     label1:
        $b1 = d2 cmpg d1;

        if $b1 >= 0 goto label2;

        d2 = d1;

     label2:
        $b2 = d3 cmpg d0;

        if $b2 >= 0 goto label3;

        d3 = d0;

     label3:
        $r1 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r1.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d3, d2);

        return $r1;
    }

    public static net.sourceforge.plantuml.awt.geom.Dimension2D fromDimension(java.awt.Dimension)
    {
        net.sourceforge.plantuml.awt.geom.Dimension2D $r0;
        java.awt.Dimension r1;
        double $d0, $d1;

        r1 := @parameter0: java.awt.Dimension;

        $r0 = new net.sourceforge.plantuml.awt.geom.Dimension2D;

        $d0 = virtualinvoke r1.<java.awt.Dimension: double getWidth()>();

        $d1 = virtualinvoke r1.<java.awt.Dimension: double getHeight()>();

        specialinvoke $r0.<net.sourceforge.plantuml.awt.geom.Dimension2D: void <init>(double,double)>($d0, $d1);

        return $r0;
    }
}
