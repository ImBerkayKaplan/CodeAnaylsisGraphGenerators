public class net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart extends net.sourceforge.plantuml.activitydiagram3.gtile.AbstractGtile
{
    private static final int SIZE;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColor;
    private double shadowing;

    private net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionCircle()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.style.StyleSignature $r5;
        net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart r6;

        r6 := @this: net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName activityDiagram>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName circle>;

        $r0[3] = $r4;

        $r5 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r5;
    }

    public void <init>(net.sourceforge.plantuml.graphic.StringBounder, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)
    {
        net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.ISkinParam r2, $r5, $r7;
        net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane r3;
        net.sourceforge.plantuml.ugraphic.color.HColor r4;
        boolean $z0, $z1;
        net.sourceforge.plantuml.style.StyleSignature $r6;
        net.sourceforge.plantuml.style.StyleBuilder $r8;
        net.sourceforge.plantuml.style.Style r9;
        net.sourceforge.plantuml.style.PName $r10;
        net.sourceforge.plantuml.style.Value $r11;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r4 := @parameter2: net.sourceforge.plantuml.ugraphic.color.HColor;

        r3 := @parameter3: net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane;

        specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.gtile.AbstractGtile: void <init>(net.sourceforge.plantuml.graphic.StringBounder,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane)>(r1, r2, r3);

        r0.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = r4;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: net.sourceforge.plantuml.style.StyleSignature getDefaultStyleDefinitionCircle()>();

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $r8 = interfaceinvoke $r7.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        r9 = virtualinvoke $r6.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r8);

        $r10 = <net.sourceforge.plantuml.style.PName: net.sourceforge.plantuml.style.PName Shadowing>;

        $r11 = virtualinvoke r9.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.style.Value value(net.sourceforge.plantuml.style.PName)>($r10);

        $d0 = interfaceinvoke $r11.<net.sourceforge.plantuml.style.Value: double asDouble()>();

        r0.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: double shadowing> = $d0;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: net.sourceforge.plantuml.ISkinParam skinParam()>();

        $z1 = interfaceinvoke $r5.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>(null);

        if $z1 == 0 goto label2;

        r0.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: double shadowing> = 3.0;

     label2:
        return;
    }

    protected void drawUInternal(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.ugraphic.UEllipse $r0;
        net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart r2;
        double $d0;
        net.sourceforge.plantuml.ugraphic.UGraphic r3, $r5, $r8;
        net.sourceforge.plantuml.ugraphic.color.HColorNone $r4;
        net.sourceforge.plantuml.ugraphic.color.HColor $r6;
        net.sourceforge.plantuml.ugraphic.UBackground $r7;

        r2 := @this: net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart;

        r3 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r0 = new net.sourceforge.plantuml.ugraphic.UEllipse;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void <init>(double,double)>(20.0, 20.0);

        $d0 = r2.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: double shadowing>;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UEllipse: void setDeltaShadow(double)>($d0);

        $r4 = new net.sourceforge.plantuml.ugraphic.color.HColorNone;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.color.HColorNone: void <init>()>();

        $r5 = interfaceinvoke r3.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r4);

        $r6 = r2.<net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: net.sourceforge.plantuml.ugraphic.color.HColor backColor>;

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        $r8 = interfaceinvoke $r5.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r7);

        interfaceinvoke $r8.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r0);

        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(20.0, 20.0);

        return $r0;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.activitydiagram3.gtile.GtileCircleStart: int SIZE> = 20;

        return;
    }
}
