public final class net.sourceforge.plantuml.svek.ConcurrentStateImage extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.svek.IEntityImage
{
    private final java.util.List inners;
    private final net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator separator;
    private final net.sourceforge.plantuml.ISkinParam skinParam;
    private final net.sourceforge.plantuml.ugraphic.color.HColor backColor;

    private net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ColorParam)
    {
        net.sourceforge.plantuml.skin.rose.Rose $r0;
        net.sourceforge.plantuml.svek.ConcurrentStateImage r1;
        net.sourceforge.plantuml.ColorParam r2;
        net.sourceforge.plantuml.ISkinParam $r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4;

        r1 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        r2 := @parameter0: net.sourceforge.plantuml.ColorParam;

        $r0 = new net.sourceforge.plantuml.skin.rose.Rose;

        specialinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: void <init>()>();

        $r3 = r1.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.ISkinParam skinParam>;

        $r4 = virtualinvoke $r0.<net.sourceforge.plantuml.skin.rose.Rose: net.sourceforge.plantuml.ugraphic.color.HColor getHtmlColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.ColorParam)>($r3, r2);

        return $r4;
    }

    public void <init>(java.util.Collection, char, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.ugraphic.color.HColor)
    {
        net.sourceforge.plantuml.svek.ConcurrentStateImage r0;
        java.util.ArrayList $r1;
        char c0;
        net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator $r2;
        net.sourceforge.plantuml.ISkinParam r3;
        net.sourceforge.plantuml.ugraphic.color.HColor $r4, r7;
        java.util.Collection r5;
        java.util.List $r6;

        r0 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        r5 := @parameter0: java.util.Collection;

        c0 := @parameter1: char;

        r3 := @parameter2: net.sourceforge.plantuml.ISkinParam;

        r7 := @parameter3: net.sourceforge.plantuml.ugraphic.color.HColor;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.svek.ConcurrentStateImage: java.util.List inners> = $r1;

        $r2 = staticinvoke <net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator: net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator fromChar(char)>(c0);

        r0.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator separator> = $r2;

        r0.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.ISkinParam skinParam> = r3;

        $r4 = interfaceinvoke r3.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColor getBackgroundColor()>();

        r0.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.ugraphic.color.HColor backColor> = $r4;

        $r6 = r0.<net.sourceforge.plantuml.svek.ConcurrentStateImage: java.util.List inners>;

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>(r5);

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        java.lang.StringBuilder $r0, $r2, $r5;
        java.io.PrintStream $r1;
        net.sourceforge.plantuml.svek.ConcurrentStateImage r3;
        java.util.List $r4, $r11, $r12, $r18;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r6;
        net.sourceforge.plantuml.ColorParam $r7;
        net.sourceforge.plantuml.ugraphic.color.HColor r8;
        net.sourceforge.plantuml.graphic.StringBounder r9;
        net.sourceforge.plantuml.awt.geom.Dimension2D r10, r15;
        java.lang.Object $r13;
        net.sourceforge.plantuml.svek.IEntityImage r14;
        net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator $r16, $r19;
        net.sourceforge.plantuml.ugraphic.UTranslate $r17;
        net.sourceforge.plantuml.ugraphic.UGraphic $r20, r21;

        r3 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        r21 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("drawing ");

        $r4 = r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: java.util.List inners>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = <net.sourceforge.plantuml.ColorParam: net.sourceforge.plantuml.ColorParam stateBorder>;

        r8 = specialinvoke r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ColorParam)>($r7);

        r9 = interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        r10 = virtualinvoke r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        i4 = 0;

     label1:
        $r11 = r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: java.util.List inners>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i4 >= $i1 goto label3;

        $r12 = r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: java.util.List inners>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i4);

        r14 = (net.sourceforge.plantuml.svek.IEntityImage) $r13;

        interfaceinvoke r14.<net.sourceforge.plantuml.svek.IEntityImage: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r21);

        r15 = interfaceinvoke r14.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r9);

        $r16 = r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator separator>;

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator: net.sourceforge.plantuml.ugraphic.UTranslate move(net.sourceforge.plantuml.awt.geom.Dimension2D)>(r15);

        r21 = interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r17);

        $r18 = r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: java.util.List inners>;

        $i2 = interfaceinvoke $r18.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        if i4 >= $i3 goto label2;

        $r19 = r3.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator separator>;

        $r20 = interfaceinvoke r21.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>(r8);

        virtualinvoke $r19.<net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator: void drawSeparator(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.awt.geom.Dimension2D)>($r20, r10);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.svek.ConcurrentStateImage r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        net.sourceforge.plantuml.svek.IEntityImage r5;
        net.sourceforge.plantuml.graphic.StringBounder r6;
        net.sourceforge.plantuml.awt.geom.Dimension2D r7, r9;
        net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator $r8;

        r1 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        r6 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(0.0, 0.0);

        r9 = $r0;

        $r2 = r1.<net.sourceforge.plantuml.svek.ConcurrentStateImage: java.util.List inners>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (net.sourceforge.plantuml.svek.IEntityImage) $r4;

        r7 = interfaceinvoke r5.<net.sourceforge.plantuml.svek.IEntityImage: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r6);

        $r8 = r1.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator separator>;

        r9 = virtualinvoke $r8.<net.sourceforge.plantuml.svek.ConcurrentStateImage$Separator: net.sourceforge.plantuml.awt.geom.Dimension2D add(net.sourceforge.plantuml.awt.geom.Dimension2D,net.sourceforge.plantuml.awt.geom.Dimension2D)>(r9, r7);

        goto label1;

     label2:
        return r9;
    }

    public net.sourceforge.plantuml.ugraphic.color.HColor getBackcolor()
    {
        net.sourceforge.plantuml.svek.ConcurrentStateImage r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1;

        r0 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        $r1 = r0.<net.sourceforge.plantuml.svek.ConcurrentStateImage: net.sourceforge.plantuml.ugraphic.color.HColor backColor>;

        return $r1;
    }

    public boolean isHidden()
    {
        net.sourceforge.plantuml.svek.ConcurrentStateImage r0;

        r0 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        return 0;
    }

    public net.sourceforge.plantuml.svek.Margins getShield(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.Margins $r0;
        net.sourceforge.plantuml.svek.ConcurrentStateImage r1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = <net.sourceforge.plantuml.svek.Margins: net.sourceforge.plantuml.svek.Margins NONE>;

        return $r0;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.ConcurrentStateImage r1;

        r1 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    public double getOverscanX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.ConcurrentStateImage r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.svek.ConcurrentStateImage;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }
}
