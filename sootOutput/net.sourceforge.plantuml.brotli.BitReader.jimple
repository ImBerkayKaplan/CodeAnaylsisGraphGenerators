final class net.sourceforge.plantuml.brotli.BitReader extends java.lang.Object
{
    private static final boolean CHECK_UNUSED_BYTES_AFTER_END;
    private static final int LOG_BITNESS;
    private static final int BITNESS;
    private static final int BYTENESS;
    private static final int CAPACITY;
    private static final int SLACK;
    private static final int BUFFER_SIZE;
    private static final int SAFEGUARD;
    private static final int WATERLINE;
    private static final int HALF_BITNESS;
    private static final int HALF_SIZE;
    private static final int HALVES_CAPACITY;
    private static final int HALF_BUFFER_SIZE;
    private static final int HALF_WATERLINE;
    private static final int LOG_HALF_SIZE;

    void <init>()
    {
        net.sourceforge.plantuml.brotli.BitReader r0;

        r0 := @this: net.sourceforge.plantuml.brotli.BitReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void readMoreInput(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        if $i0 <= 1015 goto label1;

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void doReadMoreInput(net.sourceforge.plantuml.brotli.State)>(r0);

     label1:
        return;
    }

    static void doReadMoreInput(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i1, i2, i3, i4, $i5, i6;
        byte[] $r1, $r2;
        java.io.InputStream $r3;
        net.sourceforge.plantuml.brotli.BrotliRuntimeException $r4;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int endOfStreamReached>;

        if $i0 == 0 goto label2;

        $i5 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int halfAvailable(net.sourceforge.plantuml.brotli.State)>(r0);

        if $i5 < -2 goto label1;

        return;

     label1:
        $r4 = new net.sourceforge.plantuml.brotli.BrotliRuntimeException;

        specialinvoke $r4.<net.sourceforge.plantuml.brotli.BrotliRuntimeException: void <init>(java.lang.String)>("No more input");

        throw $r4;

     label2:
        $i1 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        i2 = $i1 << 2;

        i6 = 4096 - i2;

        $r1 = r0.<net.sourceforge.plantuml.brotli.State: byte[] byteBuffer>;

        staticinvoke <net.sourceforge.plantuml.brotli.Utils: void copyBytesWithin(byte[],int,int,int)>($r1, 0, i2, 4096);

        r0.<net.sourceforge.plantuml.brotli.State: int halfOffset> = 0;

     label3:
        if i6 >= 4096 goto label5;

        i3 = 4096 - i6;

        $r3 = r0.<net.sourceforge.plantuml.brotli.State: java.io.InputStream input>;

        $r2 = r0.<net.sourceforge.plantuml.brotli.State: byte[] byteBuffer>;

        i4 = staticinvoke <net.sourceforge.plantuml.brotli.Utils: int readInput(java.io.InputStream,byte[],int,int)>($r3, $r2, i6, i3);

        if i4 > 0 goto label4;

        r0.<net.sourceforge.plantuml.brotli.State: int endOfStreamReached> = 1;

        r0.<net.sourceforge.plantuml.brotli.State: int tailBytes> = i6;

        i6 = i6 + 3;

        goto label5;

     label4:
        i6 = i6 + i4;

        goto label3;

     label5:
        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void bytesToNibbles(net.sourceforge.plantuml.brotli.State,int)>(r0, i6);

        return;
    }

    static void checkHealth(net.sourceforge.plantuml.brotli.State, int)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9;
        net.sourceforge.plantuml.brotli.BrotliRuntimeException $r1;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        i9 := @parameter1: int;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int endOfStreamReached>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $i1 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        $i5 = $i1 << 2;

        $i2 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i3 = $i2 + 7;

        $i4 = $i3 >> 3;

        $i6 = $i5 + $i4;

        i7 = $i6 - 8;

        $i8 = r0.<net.sourceforge.plantuml.brotli.State: int tailBytes>;

        if i7 <= $i8 goto label2;

        $r1 = new net.sourceforge.plantuml.brotli.BrotliRuntimeException;

        specialinvoke $r1.<net.sourceforge.plantuml.brotli.BrotliRuntimeException: void <init>(java.lang.String)>("Read after end");

        throw $r1;

     label2:
        return;
    }

    static void fillBitWindow(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i1, $i2, $i3, $i9, $i10;
        int[] $r1;
        long $l4, $l5, $l6, $l7, $l8;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        if $i0 < 32 goto label1;

        $r1 = r0.<net.sourceforge.plantuml.brotli.State: int[] intBuffer>;

        $i1 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        $i2 = $i1 + 1;

        r0.<net.sourceforge.plantuml.brotli.State: int halfOffset> = $i2;

        $i3 = $r1[$i1];

        $l4 = (long) $i3;

        $l7 = $l4 << 32;

        $l5 = r0.<net.sourceforge.plantuml.brotli.State: long accumulator64>;

        $l6 = $l5 >>> 32;

        $l8 = $l7 | $l6;

        r0.<net.sourceforge.plantuml.brotli.State: long accumulator64> = $l8;

        $i9 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i10 = $i9 - 32;

        r0.<net.sourceforge.plantuml.brotli.State: int bitOffset> = $i10;

     label1:
        return;
    }

    private static void doFillBitWindow(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i1, $i2, $i8, $i9;
        int[] $r1;
        long $l3, $l4, $l5, $l6, $l7;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $r1 = r0.<net.sourceforge.plantuml.brotli.State: int[] intBuffer>;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        $i1 = $i0 + 1;

        r0.<net.sourceforge.plantuml.brotli.State: int halfOffset> = $i1;

        $i2 = $r1[$i0];

        $l3 = (long) $i2;

        $l6 = $l3 << 32;

        $l4 = r0.<net.sourceforge.plantuml.brotli.State: long accumulator64>;

        $l5 = $l4 >>> 32;

        $l7 = $l6 | $l5;

        r0.<net.sourceforge.plantuml.brotli.State: long accumulator64> = $l7;

        $i8 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i9 = $i8 - 32;

        r0.<net.sourceforge.plantuml.brotli.State: int bitOffset> = $i9;

        return;
    }

    static int peekBits(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i3;
        long $l1, $l2;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $l1 = r0.<net.sourceforge.plantuml.brotli.State: long accumulator64>;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $l2 = $l1 >>> $i0;

        $i3 = (int) $l2;

        return $i3;
    }

    static int readFewBits(net.sourceforge.plantuml.brotli.State, int)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, i1, $i2, $i3, i4, $i5, $i6;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        i1 := @parameter1: int;

        $i0 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int peekBits(net.sourceforge.plantuml.brotli.State)>(r0);

        $i2 = 1 << i1;

        $i3 = $i2 - 1;

        i4 = $i0 & $i3;

        $i5 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i6 = $i5 + i1;

        r0.<net.sourceforge.plantuml.brotli.State: int bitOffset> = $i6;

        return i4;
    }

    static int readBits(net.sourceforge.plantuml.brotli.State, int)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int i0, $i1;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        i0 := @parameter1: int;

        $i1 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int readFewBits(net.sourceforge.plantuml.brotli.State,int)>(r0, i0);

        return $i1;
    }

    private static int readManyBits(net.sourceforge.plantuml.brotli.State, int)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        i1 := @parameter1: int;

        i0 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int readFewBits(net.sourceforge.plantuml.brotli.State,int)>(r0, 16);

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void doFillBitWindow(net.sourceforge.plantuml.brotli.State)>(r0);

        $i2 = i1 - 16;

        $i3 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int readFewBits(net.sourceforge.plantuml.brotli.State,int)>(r0, $i2);

        $i4 = $i3 << 16;

        $i5 = i0 | $i4;

        return $i5;
    }

    static void initBitReader(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        byte[] $r1;
        int[] $r2;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $r1 = newarray (byte)[4160];

        r0.<net.sourceforge.plantuml.brotli.State: byte[] byteBuffer> = $r1;

        r0.<net.sourceforge.plantuml.brotli.State: long accumulator64> = 0L;

        $r2 = newarray (int)[1040];

        r0.<net.sourceforge.plantuml.brotli.State: int[] intBuffer> = $r2;

        r0.<net.sourceforge.plantuml.brotli.State: int bitOffset> = 64;

        r0.<net.sourceforge.plantuml.brotli.State: int halfOffset> = 1024;

        r0.<net.sourceforge.plantuml.brotli.State: int endOfStreamReached> = 0;

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void prepare(net.sourceforge.plantuml.brotli.State)>(r0);

        return;
    }

    private static void prepare(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void readMoreInput(net.sourceforge.plantuml.brotli.State)>(r0);

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void checkHealth(net.sourceforge.plantuml.brotli.State,int)>(r0, 0);

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void doFillBitWindow(net.sourceforge.plantuml.brotli.State)>(r0);

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void doFillBitWindow(net.sourceforge.plantuml.brotli.State)>(r0);

        return;
    }

    static void reload(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        if $i0 != 64 goto label1;

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void prepare(net.sourceforge.plantuml.brotli.State)>(r0);

     label1:
        return;
    }

    static void jumpToByteBoundary(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i1, i2, i3;
        net.sourceforge.plantuml.brotli.BrotliRuntimeException $r1;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i1 = 64 - $i0;

        i2 = $i1 & 7;

        if i2 == 0 goto label1;

        i3 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int readFewBits(net.sourceforge.plantuml.brotli.State,int)>(r0, i2);

        if i3 == 0 goto label1;

        $r1 = new net.sourceforge.plantuml.brotli.BrotliRuntimeException;

        specialinvoke $r1.<net.sourceforge.plantuml.brotli.BrotliRuntimeException: void <init>(java.lang.String)>("Corrupted padding bits");

        throw $r1;

     label1:
        return;
    }

    static int halfAvailable(net.sourceforge.plantuml.brotli.State)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        i5 = 1024;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int endOfStreamReached>;

        if $i0 == 0 goto label1;

        $i3 = r0.<net.sourceforge.plantuml.brotli.State: int tailBytes>;

        $i4 = $i3 + 3;

        i5 = $i4 >> 2;

     label1:
        $i1 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        $i2 = i5 - $i1;

        return $i2;
    }

    static void copyBytes(net.sourceforge.plantuml.brotli.State, byte[], int, int)
    {
        net.sourceforge.plantuml.brotli.State r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i19, $i20, i21, i22, i23, i24;
        byte[] r1, $r4;
        java.io.InputStream $r2;
        net.sourceforge.plantuml.brotli.BrotliRuntimeException $r3, $r5;
        byte $b9, $b18;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        r1 := @parameter1: byte[];

        i21 := @parameter2: int;

        i22 := @parameter3: int;

        $i0 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i1 = $i0 & 7;

        if $i1 == 0 goto label01;

        $r5 = new net.sourceforge.plantuml.brotli.BrotliRuntimeException;

        specialinvoke $r5.<net.sourceforge.plantuml.brotli.BrotliRuntimeException: void <init>(java.lang.String)>("Unaligned copyBytes");

        throw $r5;

     label01:
        $i2 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        if $i2 == 64 goto label02;

        if i22 == 0 goto label02;

        $i16 = i21;

        i21 = i21 + 1;

        $i17 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int peekBits(net.sourceforge.plantuml.brotli.State)>(r0);

        $b18 = (byte) $i17;

        r1[$i16] = $b18;

        $i19 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i20 = $i19 + 8;

        r0.<net.sourceforge.plantuml.brotli.State: int bitOffset> = $i20;

        i22 = i22 + -1;

        goto label01;

     label02:
        if i22 != 0 goto label03;

        return;

     label03:
        $i3 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int halfAvailable(net.sourceforge.plantuml.brotli.State)>(r0);

        $i4 = i22 >> 2;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        if i5 <= 0 goto label04;

        $i12 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        i23 = $i12 << 2;

        i13 = i5 << 2;

        $r4 = r0.<net.sourceforge.plantuml.brotli.State: byte[] byteBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i23, r1, i21, i13);

        i21 = i21 + i13;

        i22 = i22 - i13;

        $i14 = r0.<net.sourceforge.plantuml.brotli.State: int halfOffset>;

        $i15 = $i14 + i5;

        r0.<net.sourceforge.plantuml.brotli.State: int halfOffset> = $i15;

     label04:
        if i22 != 0 goto label05;

        return;

     label05:
        $i6 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int halfAvailable(net.sourceforge.plantuml.brotli.State)>(r0);

        if $i6 <= 0 goto label08;

        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void fillBitWindow(net.sourceforge.plantuml.brotli.State)>(r0);

     label06:
        if i22 == 0 goto label07;

        $i7 = i21;

        i21 = i21 + 1;

        $i8 = staticinvoke <net.sourceforge.plantuml.brotli.BitReader: int peekBits(net.sourceforge.plantuml.brotli.State)>(r0);

        $b9 = (byte) $i8;

        r1[$i7] = $b9;

        $i10 = r0.<net.sourceforge.plantuml.brotli.State: int bitOffset>;

        $i11 = $i10 + 8;

        r0.<net.sourceforge.plantuml.brotli.State: int bitOffset> = $i11;

        i22 = i22 + -1;

        goto label06;

     label07:
        staticinvoke <net.sourceforge.plantuml.brotli.BitReader: void checkHealth(net.sourceforge.plantuml.brotli.State,int)>(r0, 0);

        return;

     label08:
        if i22 <= 0 goto label10;

        $r2 = r0.<net.sourceforge.plantuml.brotli.State: java.io.InputStream input>;

        i24 = staticinvoke <net.sourceforge.plantuml.brotli.Utils: int readInput(java.io.InputStream,byte[],int,int)>($r2, r1, i21, i22);

        if i24 != -1 goto label09;

        $r3 = new net.sourceforge.plantuml.brotli.BrotliRuntimeException;

        specialinvoke $r3.<net.sourceforge.plantuml.brotli.BrotliRuntimeException: void <init>(java.lang.String)>("Unexpected end of input");

        throw $r3;

     label09:
        i21 = i21 + i24;

        i22 = i22 - i24;

        goto label08;

     label10:
        return;
    }

    static void bytesToNibbles(net.sourceforge.plantuml.brotli.State, int)
    {
        net.sourceforge.plantuml.brotli.State r0;
        byte[] r1;
        int i0, i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, i23;
        int[] r2;
        byte $b3, $b6, $b12, $b18;

        r0 := @parameter0: net.sourceforge.plantuml.brotli.State;

        i0 := @parameter1: int;

        r1 = r0.<net.sourceforge.plantuml.brotli.State: byte[] byteBuffer>;

        i1 = i0 >> 2;

        r2 = r0.<net.sourceforge.plantuml.brotli.State: int[] intBuffer>;

        i23 = 0;

     label1:
        if i23 >= i1 goto label2;

        $i2 = i23 * 4;

        $b3 = r1[$i2];

        $i9 = $b3 & 255;

        $i4 = i23 * 4;

        $i5 = $i4 + 1;

        $b6 = r1[$i5];

        $i7 = $b6 & 255;

        $i8 = $i7 << 8;

        $i15 = $i9 | $i8;

        $i10 = i23 * 4;

        $i11 = $i10 + 2;

        $b12 = r1[$i11];

        $i13 = $b12 & 255;

        $i14 = $i13 << 16;

        $i21 = $i15 | $i14;

        $i16 = i23 * 4;

        $i17 = $i16 + 3;

        $b18 = r1[$i17];

        $i19 = $b18 & 255;

        $i20 = $i19 << 24;

        $i22 = $i21 | $i20;

        r2[i23] = $i22;

        i23 = i23 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.brotli.BitReader: int LOG_HALF_SIZE> = 2;

        <net.sourceforge.plantuml.brotli.BitReader: int HALF_WATERLINE> = 1015;

        <net.sourceforge.plantuml.brotli.BitReader: int HALF_BUFFER_SIZE> = 1040;

        <net.sourceforge.plantuml.brotli.BitReader: int HALVES_CAPACITY> = 1024;

        <net.sourceforge.plantuml.brotli.BitReader: int HALF_SIZE> = 4;

        <net.sourceforge.plantuml.brotli.BitReader: int HALF_BITNESS> = 32;

        <net.sourceforge.plantuml.brotli.BitReader: int WATERLINE> = 4060;

        <net.sourceforge.plantuml.brotli.BitReader: int SAFEGUARD> = 36;

        <net.sourceforge.plantuml.brotli.BitReader: int BUFFER_SIZE> = 4160;

        <net.sourceforge.plantuml.brotli.BitReader: int SLACK> = 64;

        <net.sourceforge.plantuml.brotli.BitReader: int CAPACITY> = 4096;

        <net.sourceforge.plantuml.brotli.BitReader: int BYTENESS> = 8;

        <net.sourceforge.plantuml.brotli.BitReader: int BITNESS> = 64;

        <net.sourceforge.plantuml.brotli.BitReader: int LOG_BITNESS> = 6;

        <net.sourceforge.plantuml.brotli.BitReader: boolean CHECK_UNUSED_BYTES_AFTER_END> = 0;

        return;
    }
}
