class net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator extends java.lang.Object implements net.sourceforge.plantuml.tim.expression.TokenIterator
{
    private int pos;
    final net.sourceforge.plantuml.tim.expression.TokenStack this$0;

    void <init>(net.sourceforge.plantuml.tim.expression.TokenStack)
    {
        net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator r0;
        net.sourceforge.plantuml.tim.expression.TokenStack r1;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator;

        r1 := @parameter0: net.sourceforge.plantuml.tim.expression.TokenStack;

        r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: net.sourceforge.plantuml.tim.expression.TokenStack this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: int pos> = 0;

        return;
    }

    public net.sourceforge.plantuml.tim.expression.Token peekToken()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator r0;
        net.sourceforge.plantuml.tim.expression.TokenStack $r1;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r3;
        net.sourceforge.plantuml.tim.expression.Token $r4;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: net.sourceforge.plantuml.tim.expression.TokenStack this$0>;

        $r2 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List access$000(net.sourceforge.plantuml.tim.expression.TokenStack)>($r1);

        $i0 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: int pos>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (net.sourceforge.plantuml.tim.expression.Token) $r3;

        return $r4;
    }

    public net.sourceforge.plantuml.tim.expression.Token nextToken()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator r0;
        boolean $z0;
        net.sourceforge.plantuml.tim.expression.TokenStack $r1;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        net.sourceforge.plantuml.tim.expression.Token $r4;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator;

        $z0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: net.sourceforge.plantuml.tim.expression.TokenStack this$0>;

        $r2 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List access$000(net.sourceforge.plantuml.tim.expression.TokenStack)>($r1);

        $i0 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: int pos>;

        $i1 = $i0 + 1;

        r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: int pos> = $i1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (net.sourceforge.plantuml.tim.expression.Token) $r3;

        return $r4;
    }

    public boolean hasMoreTokens()
    {
        net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator r0;
        net.sourceforge.plantuml.tim.expression.TokenStack $r1;
        int $i0, $i1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator;

        $i0 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: int pos>;

        $r1 = r0.<net.sourceforge.plantuml.tim.expression.TokenStack$InternalIterator: net.sourceforge.plantuml.tim.expression.TokenStack this$0>;

        $r2 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenStack: java.util.List access$000(net.sourceforge.plantuml.tim.expression.TokenStack)>($r1);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
