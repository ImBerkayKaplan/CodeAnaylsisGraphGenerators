public class net.sourceforge.plantuml.graphic.TextBlockArrow extends net.sourceforge.plantuml.graphic.AbstractTextBlock implements net.sourceforge.plantuml.graphic.TextBlock
{
    private final double size;
    private final net.sourceforge.plantuml.Direction arrow;
    private final net.sourceforge.plantuml.ugraphic.color.HColor color;

    public void <init>(net.sourceforge.plantuml.Direction, net.sourceforge.plantuml.graphic.FontConfiguration)
    {
        net.sourceforge.plantuml.graphic.TextBlockArrow r0;
        net.sourceforge.plantuml.Direction r1, $r3;
        java.lang.Object $r2;
        net.sourceforge.plantuml.graphic.FontConfiguration r4;
        net.sourceforge.plantuml.ugraphic.UFont $r5;
        double $d0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r6;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockArrow;

        r1 := @parameter0: net.sourceforge.plantuml.Direction;

        r4 := @parameter1: net.sourceforge.plantuml.graphic.FontConfiguration;

        specialinvoke r0.<net.sourceforge.plantuml.graphic.AbstractTextBlock: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (net.sourceforge.plantuml.Direction) $r2;

        r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.Direction arrow> = $r3;

        $r5 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.UFont getFont()>();

        $d0 = virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UFont: double getSize2D()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: double size> = $d0;

        $r6 = virtualinvoke r4.<net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.ugraphic.color.HColor getColor()>();

        r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.ugraphic.color.HColor color> = $r6;

        return;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.graphic.TextBlockArrow r0;
        net.sourceforge.plantuml.ugraphic.color.HColor $r1, $r3;
        net.sourceforge.plantuml.ugraphic.UBackground $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, i1;
        net.sourceforge.plantuml.ugraphic.UPolygon r4;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.ugraphic.UGraphic $r6, r7, r8, r9;

        r0 := @this: net.sourceforge.plantuml.graphic.TextBlockArrow;

        r7 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.ugraphic.color.HColor color>;

        $r2 = interfaceinvoke $r1.<net.sourceforge.plantuml.ugraphic.color.HColor: net.sourceforge.plantuml.ugraphic.UBackground bg()>();

        r8 = interfaceinvoke r7.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r2);

        $r3 = r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.ugraphic.color.HColor color>;

        r9 = interfaceinvoke r8.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r3);

        $d0 = r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: double size>;

        $d1 = $d0 * 0.8;

        $d2 = $d1 - 3.0;

        i1 = (int) $d2;

        $i0 = i1 % 2;

        if $i0 != 1 goto label1;

        i1 = i1 + -1;

     label1:
        r4 = specialinvoke r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.ugraphic.UPolygon getTriangle(int)>(i1);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d4 = r0.<net.sourceforge.plantuml.graphic.TextBlockArrow: double size>;

        $d3 = (double) i1;

        $d5 = $d4 - $d3;

        $d6 = $d5 - 2.0;

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>(2.0, $d6);

        $r6 = interfaceinvoke r9.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        interfaceinvoke $r6.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>(r4);

        return;
    }

    private net.sourceforge.plantuml.ugraphic.UPolygon getTriangle(int)
    {
        net.sourceforge.plantuml.ugraphic.UPolygon $r0;
        net.sourceforge.plantuml.graphic.TextBlockArrow r2;
        net.sourceforge.plantuml.Direction $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalStateException $r11;
        int i0, $i1, $i2, $i3, $i4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;

        r2 := @this: net.sourceforge.plantuml.graphic.TextBlockArrow;

        i0 := @parameter0: int;

        $r0 = new net.sourceforge.plantuml.ugraphic.UPolygon;

        specialinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void <init>()>();

        $r4 = r2.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.Direction arrow>;

        $r3 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction RIGHT>;

        if $r4 != $r3 goto label1;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        $d14 = (double) i0;

        $i4 = i0 / 2;

        $d13 = (double) $i4;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d14, $d13);

        $d15 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, $d15);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        goto label5;

     label1:
        $r6 = r2.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.Direction arrow>;

        $r5 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction LEFT>;

        if $r6 != $r5 goto label2;

        $d8 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d8, 0.0);

        $i3 = i0 / 2;

        $d9 = (double) $i3;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, $d9);

        $d11 = (double) i0;

        $d10 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d11, $d10);

        $d12 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d12, 0.0);

        goto label5;

     label2:
        $r8 = r2.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.Direction arrow>;

        $r7 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction UP>;

        if $r8 != $r7 goto label3;

        $d3 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, $d3);

        $i2 = i0 / 2;

        $d4 = (double) $i2;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d4, 0.0);

        $d6 = (double) i0;

        $d5 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d6, $d5);

        $d7 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, $d7);

        goto label5;

     label3:
        $r10 = r2.<net.sourceforge.plantuml.graphic.TextBlockArrow: net.sourceforge.plantuml.Direction arrow>;

        $r9 = <net.sourceforge.plantuml.Direction: net.sourceforge.plantuml.Direction DOWN>;

        if $r10 != $r9 goto label4;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        $i1 = i0 / 2;

        $d1 = (double) $i1;

        $d0 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d1, $d0);

        $d2 = (double) i0;

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>($d2, 0.0);

        virtualinvoke $r0.<net.sourceforge.plantuml.ugraphic.UPolygon: void addPoint(double,double)>(0.0, 0.0);

        goto label5;

     label4:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label5:
        return $r0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.graphic.TextBlockArrow r1;
        double $d0, $d1;
        net.sourceforge.plantuml.graphic.StringBounder r2;

        r1 := @this: net.sourceforge.plantuml.graphic.TextBlockArrow;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $d1 = r1.<net.sourceforge.plantuml.graphic.TextBlockArrow: double size>;

        $d0 = r1.<net.sourceforge.plantuml.graphic.TextBlockArrow: double size>;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d1, $d0);

        return $r0;
    }
}
