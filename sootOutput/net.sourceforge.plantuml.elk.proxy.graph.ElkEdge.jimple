public class net.sourceforge.plantuml.elk.proxy.graph.ElkEdge extends net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty
{

    public void <init>(java.lang.Object)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge r0;
        java.lang.Object r1;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: void <init>(java.lang.Object)>(r1);

        return;
    }

    public net.sourceforge.plantuml.elk.proxy.graph.ElkNode getContainingNode()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkNode $r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge r1;
        java.lang.Object $r2, $r3;

        r1 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge;

        $r0 = new net.sourceforge.plantuml.elk.proxy.graph.ElkNode;

        $r2 = r1.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: java.lang.Object obj>;

        $r3 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r2, "getContainingNode");

        specialinvoke $r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkNode: void <init>(java.lang.Object)>($r3);

        return $r0;
    }

    public java.util.Collection getLabels()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge r2;
        java.lang.Object $r3, $r4, r7;
        java.util.Collection r5;
        java.util.Iterator r6;
        boolean $z0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkLabel $r8;

        r2 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: java.lang.Object obj>;

        $r4 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r3, "getLabels");

        r5 = (java.util.Collection) $r4;

        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = new net.sourceforge.plantuml.elk.proxy.graph.ElkLabel;

        specialinvoke $r8.<net.sourceforge.plantuml.elk.proxy.graph.ElkLabel: void <init>(java.lang.Object)>(r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }

    public java.util.List getSections()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge r2;
        java.lang.Object $r3, $r4, r7;
        java.util.Collection r5;
        java.util.Iterator r6;
        boolean $z0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection $r8;

        r2 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r2.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdge: java.lang.Object obj>;

        $r4 = staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call(java.lang.Object,java.lang.String)>($r3, "getSections");

        r5 = (java.util.Collection) $r4;

        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = new net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection;

        specialinvoke $r8.<net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection: void <init>(java.lang.Object)>(r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }

    public boolean isHierarchical()
    {
        java.lang.UnsupportedOperationException $r0;
        net.sourceforge.plantuml.elk.proxy.graph.ElkEdge r1;

        r1 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkEdge;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
