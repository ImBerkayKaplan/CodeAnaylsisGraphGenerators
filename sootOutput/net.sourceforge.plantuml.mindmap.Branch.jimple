class net.sourceforge.plantuml.mindmap.Branch extends java.lang.Object implements net.sourceforge.plantuml.graphic.UDrawable
{
    private net.sourceforge.plantuml.mindmap.Idea root;
    private net.sourceforge.plantuml.mindmap.Idea last;
    private net.sourceforge.plantuml.mindmap.Finger finger;

    void <init>()
    {
        net.sourceforge.plantuml.mindmap.Branch r0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void initRoot(net.sourceforge.plantuml.style.StyleBuilder, net.sourceforge.plantuml.ugraphic.color.HColor, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.mindmap.IdeaShape, java.lang.String)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Idea $r1, $r7;
        net.sourceforge.plantuml.style.StyleBuilder r2;
        net.sourceforge.plantuml.ugraphic.color.HColor r3;
        net.sourceforge.plantuml.cucadiagram.Display r4;
        net.sourceforge.plantuml.mindmap.IdeaShape r5;
        java.lang.String r6;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        r2 := @parameter0: net.sourceforge.plantuml.style.StyleBuilder;

        r3 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        r4 := @parameter2: net.sourceforge.plantuml.cucadiagram.Display;

        r5 := @parameter3: net.sourceforge.plantuml.mindmap.IdeaShape;

        r6 := @parameter4: java.lang.String;

        $r1 = new net.sourceforge.plantuml.mindmap.Idea;

        specialinvoke $r1.<net.sourceforge.plantuml.mindmap.Idea: void <init>(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,java.lang.String)>(r2, r3, r4, r5, r6);

        r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea root> = $r1;

        $r7 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea root>;

        r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last> = $r7;

        return;
    }

    void initFinger(net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.Direction)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.ISkinParam r1;
        net.sourceforge.plantuml.Direction r2;
        net.sourceforge.plantuml.mindmap.Idea $r3;
        net.sourceforge.plantuml.mindmap.FingerImpl $r4;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        r1 := @parameter0: net.sourceforge.plantuml.ISkinParam;

        r2 := @parameter1: net.sourceforge.plantuml.Direction;

        $r3 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea root>;

        $r4 = staticinvoke <net.sourceforge.plantuml.mindmap.FingerImpl: net.sourceforge.plantuml.mindmap.FingerImpl build(net.sourceforge.plantuml.mindmap.Idea,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.Direction)>($r3, r1, r2);

        r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger> = $r4;

        return;
    }

    net.sourceforge.plantuml.mindmap.Idea getParentOfLast(int)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        int i0, i1;
        net.sourceforge.plantuml.mindmap.Idea r1;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        i0 := @parameter0: int;

        r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = virtualinvoke r1.<net.sourceforge.plantuml.mindmap.Idea: net.sourceforge.plantuml.mindmap.Idea getParent()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    net.sourceforge.plantuml.command.CommandExecutionResult add(net.sourceforge.plantuml.style.StyleBuilder, net.sourceforge.plantuml.ugraphic.color.HColor, int, net.sourceforge.plantuml.cucadiagram.Display, net.sourceforge.plantuml.mindmap.IdeaShape, java.lang.String)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Idea $r1, $r2, $r3, $r5, $r6, r12, $r14, r17;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        net.sourceforge.plantuml.command.CommandExecutionResult $r4, $r13, $r15, $r16;
        net.sourceforge.plantuml.style.StyleBuilder r7;
        net.sourceforge.plantuml.ugraphic.color.HColor r8;
        net.sourceforge.plantuml.cucadiagram.Display r9;
        net.sourceforge.plantuml.mindmap.IdeaShape r10;
        java.lang.String r11;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        r7 := @parameter0: net.sourceforge.plantuml.style.StyleBuilder;

        r8 := @parameter1: net.sourceforge.plantuml.ugraphic.color.HColor;

        i0 := @parameter2: int;

        r9 := @parameter3: net.sourceforge.plantuml.cucadiagram.Display;

        r10 := @parameter4: net.sourceforge.plantuml.mindmap.IdeaShape;

        r11 := @parameter5: java.lang.String;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last>;

        if $r1 != null goto label1;

        $r16 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("Check your indentation ?");

        return $r16;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last>;

        $i1 = virtualinvoke $r2.<net.sourceforge.plantuml.mindmap.Idea: int getLevel()>();

        $i2 = $i1 + 1;

        if i0 != $i2 goto label2;

        $r14 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last>;

        r17 = virtualinvoke $r14.<net.sourceforge.plantuml.mindmap.Idea: net.sourceforge.plantuml.mindmap.Idea createIdea(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,int,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,java.lang.String)>(r7, r8, i0, r9, r10, r11);

        r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last> = r17;

        $r15 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r15;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last>;

        $i3 = virtualinvoke $r3.<net.sourceforge.plantuml.mindmap.Idea: int getLevel()>();

        if i0 > $i3 goto label3;

        $r5 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last>;

        $i4 = virtualinvoke $r5.<net.sourceforge.plantuml.mindmap.Idea: int getLevel()>();

        $i5 = $i4 - i0;

        i6 = $i5 + 1;

        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea getParentOfLast(int)>(i6);

        r12 = virtualinvoke $r6.<net.sourceforge.plantuml.mindmap.Idea: net.sourceforge.plantuml.mindmap.Idea createIdea(net.sourceforge.plantuml.style.StyleBuilder,net.sourceforge.plantuml.ugraphic.color.HColor,int,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.mindmap.IdeaShape,java.lang.String)>(r7, r8, i0, r9, r10, r11);

        r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea last> = r12;

        $r13 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult ok()>();

        return $r13;

     label3:
        $r4 = staticinvoke <net.sourceforge.plantuml.command.CommandExecutionResult: net.sourceforge.plantuml.command.CommandExecutionResult error(java.lang.String)>("error42L");

        return $r4;
    }

    public boolean hasFinger()
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Finger $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Finger $r1, $r3;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        if $r1 == null goto label1;

        $r3 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        interfaceinvoke $r3.<net.sourceforge.plantuml.mindmap.Finger: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r2);

     label1:
        return;
    }

    public double getHalfThickness(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Finger $r1, $r3;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        if $r1 != null goto label1;

        return 0.0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.mindmap.Finger: double getFullThickness(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $d1 = $d0 / 2.0;

        return $d1;
    }

    public double getFullElongation(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Finger $r1, $r3;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        if $r1 != null goto label1;

        return 0.0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.mindmap.Finger: double getFullElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        return $d0;
    }

    public boolean hasChildren()
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Idea $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea root>;

        $z0 = virtualinvoke $r1.<net.sourceforge.plantuml.mindmap.Idea: boolean hasChildren()>();

        return $z0;
    }

    public boolean hasRoot()
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Idea $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Idea root>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void doNotDrawFirstPhalanx()
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Finger $r1;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        interfaceinvoke $r1.<net.sourceforge.plantuml.mindmap.Finger: void doNotDrawFirstPhalanx()>();

        return;
    }

    public double getX12(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.mindmap.Branch r0;
        net.sourceforge.plantuml.mindmap.Finger $r1, $r3, $r4;
        net.sourceforge.plantuml.graphic.StringBounder r2;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.mindmap.FingerImpl $r5;

        r0 := @this: net.sourceforge.plantuml.mindmap.Branch;

        r2 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r1 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        if $r1 != null goto label1;

        return 0.0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        $d0 = interfaceinvoke $r3.<net.sourceforge.plantuml.mindmap.Finger: double getFullElongation(net.sourceforge.plantuml.graphic.StringBounder)>(r2);

        $r4 = r0.<net.sourceforge.plantuml.mindmap.Branch: net.sourceforge.plantuml.mindmap.Finger finger>;

        $r5 = (net.sourceforge.plantuml.mindmap.FingerImpl) $r4;

        $d1 = virtualinvoke $r5.<net.sourceforge.plantuml.mindmap.FingerImpl: double getX12()>();

        $d2 = $d0 + $d1;

        return $d2;
    }
}
