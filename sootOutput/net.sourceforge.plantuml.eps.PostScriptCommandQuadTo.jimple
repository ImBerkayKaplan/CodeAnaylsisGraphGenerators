public class net.sourceforge.plantuml.eps.PostScriptCommandQuadTo extends java.lang.Object implements net.sourceforge.plantuml.eps.PostScriptCommand
{
    private final double x1;
    private final double y1;
    private final double x2;
    private final double y2;

    public void <init>(double, double, double, double)
    {
        net.sourceforge.plantuml.eps.PostScriptCommandQuadTo r0;
        double d0, d1, d2, d3;

        r0 := @this: net.sourceforge.plantuml.eps.PostScriptCommandQuadTo;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double x1> = d0;

        r0.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double y1> = d1;

        r0.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double x2> = d2;

        r0.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double y2> = d3;

        return;
    }

    public java.lang.String toPostString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13;
        net.sourceforge.plantuml.eps.PostScriptCommandQuadTo r1;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r2, $r5, $r8, $r11, $r14;

        r1 := @this: net.sourceforge.plantuml.eps.PostScriptCommandQuadTo;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $d0 = r1.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double x1>;

        $r2 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = r1.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double y1>;

        $r5 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d2 = r1.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double x2>;

        $r8 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d3 = r1.<net.sourceforge.plantuml.eps.PostScriptCommandQuadTo: double y2>;

        $r11 = staticinvoke <net.sourceforge.plantuml.eps.EpsGraphics: java.lang.String format(double)>($d3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rquadto");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }
}
