public class net.sourceforge.plantuml.sequencediagram.graphic.Stairs extends java.lang.Object
{
    private final java.util.List ys;
    private final java.util.List values;
    private final java.util.Map cache;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        java.util.ArrayList $r1, $r2;
        java.util.HashMap $r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.Map cache> = $r3;

        return;
    }

    public java.lang.String toString()
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r1;
        java.util.List $r2;
        java.lang.StringBuilder $r4, $r11, $r12, $r13, $r14, $r15;
        java.util.Iterator r6;
        boolean $z0;
        java.lang.String $r8, $r16;
        java.lang.Object $r9;
        java.lang.Double r10;
        double $d0;
        int $i0;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        r6 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.Double) $r9;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $d0 = virtualinvoke r10.<java.lang.Double: double doubleValue()>();

        $i0 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: int getValue(double)>($d0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label1;

     label2:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void addStep(double, int)
    {
        boolean $z0;
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        java.util.List $r1, $r2, $r4, $r7, $r8, $r11, $r12, $r17, $r18;
        int $i0, i1, $i2, $i3, $i6, $i7, $i8, $i9;
        double d0, d1;
        java.lang.Double $r3, $r10;
        java.lang.Integer $r5, $r13;
        java.util.Map $r6, $r15;
        java.lang.Object $r9;
        byte $b4, $b5;
        java.lang.IllegalArgumentException $r16;
        java.lang.AssertionError $r19;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        d0 := @parameter0: double;

        i1 := @parameter1: int;

        $z0 = <net.sourceforge.plantuml.sequencediagram.graphic.Stairs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r17 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $i8 = interfaceinvoke $r17.<java.util.List: int size()>();

        $r18 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        $i9 = interfaceinvoke $r18.<java.util.List: int size()>();

        if $i8 == $i9 goto label1;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label1:
        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $r8 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $r7 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i3);

        $r10 = (java.lang.Double) $r9;

        d1 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $b4 = d0 cmpg d1;

        if $b4 >= 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r16;

     label2:
        $b5 = d1 cmpl d0;

        if $b5 != 0 goto label3;

        $r12 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        $r11 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $i6 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r12.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i7, $r13);

        $r15 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.Map cache>;

        interfaceinvoke $r15.<java.util.Map: void clear()>();

        return;

     label3:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.Map cache>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        return;
    }

    public int getMaxValue()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer r4;
        int $i0, i1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        i1 = -2147483648;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i0 <= i1 goto label2;

        i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

     label2:
        goto label1;

     label3:
        return i1;
    }

    public java.util.List getYs()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        java.util.List $r1, $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    private double getLastY()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        java.lang.Double $r5;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return 0.0;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public int getValue(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        double d0;
        java.util.Map $r1, $r4;
        java.lang.Double $r2, $r5;
        java.lang.Object $r3;
        int $i0, $i1;
        java.lang.Integer r7;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.Map cache>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r7 = (java.lang.Integer) $r3;

        if r7 != null goto label1;

        $i1 = specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: int getValueSlow(double)>(d0);

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.Map cache>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r7);

     label1:
        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    private int getValueSlow(double)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        double d0;
        java.util.List $r1, $r3, $r6;
        java.lang.Double $r2;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.lang.Object $r4, $r7;
        java.lang.Integer $r5, $r8;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        d0 := @parameter0: double;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List ys>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r1, $r2);

        if i0 < 0 goto label1;

        $r6 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        $r8 = (java.lang.Integer) $r7;

        $i5 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        return $i5;

     label1:
        $i1 = neg i0;

        i2 = $i1 - 1;

        if i2 != 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        $i3 = i2 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r5 = (java.lang.Integer) $r4;

        $i4 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i4;
    }

    public int getLastValue()
    {
        net.sourceforge.plantuml.sequencediagram.graphic.Stairs r0;
        java.util.List $r1, $r2;
        int i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.Stairs;

        $r1 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.Stairs: java.util.List values>;

        $i1 = i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/sequencediagram/graphic/Stairs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.sequencediagram.graphic.Stairs: boolean $assertionsDisabled> = $z1;

        return;
    }
}
