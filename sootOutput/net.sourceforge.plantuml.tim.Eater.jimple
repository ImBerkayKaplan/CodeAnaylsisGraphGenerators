public abstract class net.sourceforge.plantuml.tim.Eater extends java.lang.Object
{
    private int i;
    private final java.lang.String s;
    private final net.sourceforge.plantuml.LineLocation lineLocation;
    static final boolean $assertionsDisabled;

    public void <init>(net.sourceforge.plantuml.StringLocated)
    {
        net.sourceforge.plantuml.tim.Eater r0;
        net.sourceforge.plantuml.StringLocated r1;
        java.lang.String $r2;
        net.sourceforge.plantuml.LineLocation $r3;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        r1 := @parameter0: net.sourceforge.plantuml.StringLocated;

        $r2 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: java.lang.String getString()>();

        $r3 = virtualinvoke r1.<net.sourceforge.plantuml.StringLocated: net.sourceforge.plantuml.LineLocation getLocation()>();

        specialinvoke r0.<net.sourceforge.plantuml.tim.Eater: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>($r2, $r3);

        return;
    }

    protected void <init>(java.lang.String, net.sourceforge.plantuml.LineLocation)
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String r1;
        net.sourceforge.plantuml.LineLocation r2;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: net.sourceforge.plantuml.LineLocation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = 0;

        r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s> = r1;

        r0.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.LineLocation lineLocation> = r2;

        return;
    }

    public final net.sourceforge.plantuml.LineLocation getLineLocation()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        net.sourceforge.plantuml.LineLocation $r1;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.LineLocation lineLocation>;

        return $r1;
    }

    public abstract void analyze(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated;

    public int getCurrentPosition()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        return $i0;
    }

    protected final java.lang.String eatAllToEnd() throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        int $i0, $i1;
        java.lang.String $r1, r2, $r3;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i1;

        return r2;
    }

    public final net.sourceforge.plantuml.tim.expression.TValue eatExpression(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.Eater r0;
        char $c0;
        net.sourceforge.plantuml.LineLocation $r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.tim.TMemory r3;
        net.sourceforge.plantuml.tim.expression.TValue $r4, $r6;
        net.sourceforge.plantuml.json.JsonValue r5;
        java.lang.String r7;
        net.sourceforge.plantuml.tim.expression.TokenStack r8;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r3 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        $c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if $c0 != 123 goto label1;

        r7 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAllToEnd()>();

        r5 = staticinvoke <net.sourceforge.plantuml.json.Json: net.sourceforge.plantuml.json.JsonValue parse(java.lang.String)>(r7);

        $r6 = staticinvoke <net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.tim.expression.TValue fromJson(net.sourceforge.plantuml.json.JsonValue)>(r5);

        return $r6;

     label1:
        r8 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.tim.expression.TokenStack eatTokenStack()>();

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        $r4 = virtualinvoke r8.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TValue getResult(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r1, r2, r3);

        return $r4;
    }

    protected final net.sourceforge.plantuml.tim.expression.TokenStack eatTokenStack() throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.expression.TokenStack $r0;
        net.sourceforge.plantuml.tim.Eater r2;
        int $i0;
        net.sourceforge.plantuml.tim.EaterException $r3;

        r2 := @this: net.sourceforge.plantuml.tim.Eater;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenStack;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void <init>()>();

        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void addIntoTokenStack(net.sourceforge.plantuml.tim.expression.TokenStack,boolean)>($r0, 0);

        $i0 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: int size()>();

        if $i0 != 0 goto label1;

        $r3 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Missing expression");

        throw $r3;

     label1:
        return $r0;
    }

    protected final net.sourceforge.plantuml.tim.expression.TValue eatExpressionStopAtColon(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.expression.TokenStack $r0;
        net.sourceforge.plantuml.tim.Eater r2;
        net.sourceforge.plantuml.LineLocation $r3;
        net.sourceforge.plantuml.tim.TContext r4;
        net.sourceforge.plantuml.tim.TMemory r5;
        net.sourceforge.plantuml.tim.expression.TValue $r6;

        r2 := @this: net.sourceforge.plantuml.tim.Eater;

        r4 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r5 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        $r0 = new net.sourceforge.plantuml.tim.expression.TokenStack;

        specialinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: void <init>()>();

        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void addIntoTokenStack(net.sourceforge.plantuml.tim.expression.TokenStack,boolean)>($r0, 1);

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        $r6 = virtualinvoke $r0.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TValue getResult(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r3, r4, r5);

        return $r6;
    }

    protected final void addIntoTokenStack(net.sourceforge.plantuml.tim.expression.TokenStack, boolean) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        boolean z0;
        net.sourceforge.plantuml.tim.expression.Token r1;
        net.sourceforge.plantuml.tim.expression.TokenStack r2;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        r2 := @parameter0: net.sourceforge.plantuml.tim.expression.TokenStack;

        z0 := @parameter1: boolean;

     label1:
        r1 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenType: net.sourceforge.plantuml.tim.expression.Token eatOneToken(net.sourceforge.plantuml.tim.Eater,boolean)>(r0, z0);

        if r1 != null goto label2;

        return;

     label2:
        virtualinvoke r2.<net.sourceforge.plantuml.tim.expression.TokenStack: void add(net.sourceforge.plantuml.tim.expression.Token)>(r1);

        goto label1;
    }

    public final java.lang.String eatAndGetQuotedString() throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        char c0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        net.sourceforge.plantuml.tim.EaterException $r4;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isQuote(char)>(c0);

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("quote10");

        throw $r4;

     label1:
        virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: void checkAndEatChar(char)>(c0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: void addUpTo(char,java.lang.StringBuilder)>(c0, $r1);

        virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: void checkAndEatChar(char)>(c0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected final java.lang.String eatAndGetOptionalQuotedString() throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        char c0, c2, c3;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r5, $r7;
        net.sourceforge.plantuml.tim.EaterException $r6;
        int i1;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isQuote(char)>(c0);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAndGetQuotedString()>();

        return $r7;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label2:
        c2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if c2 != 0 goto label3;

        $r6 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("until001");

        throw $r6;

     label3:
        if i1 != 0 goto label5;

        if c2 == 44 goto label4;

        if c2 != 41 goto label5;

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        return $r5;

     label5:
        c3 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        if c3 != 40 goto label6;

        i1 = i1 + 1;

        goto label7;

     label6:
        if c3 != 41 goto label7;

        i1 = i1 + -1;

     label7:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        goto label2;
    }

    public final java.lang.String eatAndGetNumber() throws net.sourceforge.plantuml.tim.EaterException
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.tim.Eater r2;
        char c0, $c1;
        java.lang.String $r3;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.tim.Eater;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        c0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if c0 == 0 goto label2;

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLatinDigit(char)>(c0);

        if $z0 != 0 goto label3;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        $c1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label1;
    }

    public final java.lang.String eatAndGetSpaces() throws net.sourceforge.plantuml.tim.EaterException
    {
        java.lang.StringBuilder $r0;
        net.sourceforge.plantuml.tim.Eater r2;
        char c0, $c1;
        java.lang.String $r3;
        boolean $z0;

        r2 := @this: net.sourceforge.plantuml.tim.Eater;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        c0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if c0 == 0 goto label2;

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isSpaceChar(char)>(c0);

        if $z0 != 0 goto label3;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        $c1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label1;
    }

    protected final java.lang.String eatAndGetVarname() throws net.sourceforge.plantuml.tim.EaterException
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r4;
        net.sourceforge.plantuml.tim.Eater r3;
        char $c0, $c1;
        java.lang.String $r5, $r7;
        boolean $z0;
        net.sourceforge.plantuml.tim.EaterException $r8;

        r3 := @this: net.sourceforge.plantuml.tim.Eater;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $c0 = virtualinvoke r3.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $c1 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(0);

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscoreOrDollar(char)>($c1);

        if $z0 != 0 goto label1;

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("a002");

        throw $r8;

     label1:
        virtualinvoke r3.<net.sourceforge.plantuml.tim.Eater: void addUpToLastLetterOrUnderscoreOrDigit(java.lang.StringBuilder)>($r0);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected final java.lang.String eatAndGetFunctionName() throws net.sourceforge.plantuml.tim.EaterException
    {
        java.lang.StringBuilder $r0, $r1, $r2, $r4;
        net.sourceforge.plantuml.tim.Eater r3;
        char $c0, $c1;
        java.lang.String $r5, $r7;
        boolean $z0;
        net.sourceforge.plantuml.tim.EaterException $r8;

        r3 := @this: net.sourceforge.plantuml.tim.Eater;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $c0 = virtualinvoke r3.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $c1 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(0);

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscoreOrDollar(char)>($c1);

        if $z0 != 0 goto label1;

        $r8 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("a003");

        throw $r8;

     label1:
        virtualinvoke r3.<net.sourceforge.plantuml.tim.Eater: void addUpToLastLetterOrUnderscoreOrDigit(java.lang.StringBuilder)>($r0);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final void skipSpaces()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i4, $i5;
        char $c3;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label2;

        $i4 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i5 = $i4 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i5;

        goto label1;

     label2:
        return;
    }

    protected final void skipUntilChar(char)
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i5, $i6;
        char $c3, c4;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        c4 := @parameter0: char;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $r2 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        if $c3 == c4 goto label2;

        $i5 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i6 = $i5 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i6;

        goto label1;

     label2:
        return;
    }

    public final char peekChar()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2;
        char $c3;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        return $c3;
    }

    public final boolean matchAffectation()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        int $i0;
        java.lang.String $r1, r2;
        boolean z0;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        z0 = virtualinvoke r2.<java.lang.String: boolean matches(java.lang.String)>("^\\$?[_\\p{L}][_\\p{L}0-9]*\\s*=.*");

        return z0;
    }

    public final char peekCharN2()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1, $r2;
        char $c5;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i1 = $i0 + 1;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 < $i2 goto label1;

        return 0;

     label1:
        $r2 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i3 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i4 = $i3 + 1;

        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i4);

        return $c5;
    }

    protected final boolean hasNextChar()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final char eatOneChar()
    {
        net.sourceforge.plantuml.tim.Eater r0;
        int $i0, $i2, $i3;
        java.lang.String $r1;
        char c1;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i3 = $i2 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i3;

        return c1;
    }

    protected final void checkAndEatChar(char) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2, $i5, $i6;
        net.sourceforge.plantuml.tim.EaterException $r2;
        char $c3, c4;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        c4 := @parameter0: char;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $r3 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $c3 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i2);

        if $c3 == c4 goto label2;

     label1:
        $r2 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("a001");

        throw $r2;

     label2:
        $i5 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i6 = $i5 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i6;

        return;
    }

    protected final boolean safeCheckAndEatChar(char) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i5, $i6;
        char $c3, c4;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        c4 := @parameter0: char;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        if $c3 == c4 goto label2;

     label1:
        return 0;

     label2:
        $i5 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i6 = $i5 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i6;

        return 1;
    }

    protected final void optionallyEatChar(char) throws net.sourceforge.plantuml.tim.EaterException
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1, $i2, $i5, $i6, $i7;
        char $c3, c4, $c8;
        boolean $z0;
        java.lang.AssertionError $r5;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        c4 := @parameter0: char;

        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $r2 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        if $c3 == c4 goto label2;

     label1:
        return;

     label2:
        $z0 = <net.sourceforge.plantuml.tim.Eater: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r3 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i7 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $c8 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i7);

        if $c8 == c4 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        $i5 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i6 = $i5 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i6;

        return;
    }

    protected final void checkAndEatChar(java.lang.String) throws net.sourceforge.plantuml.tim.EaterException
    {
        java.lang.String r0;
        int $i0, i2;
        net.sourceforge.plantuml.tim.Eater r1;
        char $c1;

        r1 := @this: net.sourceforge.plantuml.tim.Eater;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r1.<net.sourceforge.plantuml.tim.Eater: void checkAndEatChar(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected final void addUpToLastLetterOrUnderscoreOrDigit(java.lang.StringBuilder)
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i4, $i5;
        char c3;
        boolean $z0;
        java.lang.StringBuilder r3;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        r3 := @parameter0: java.lang.StringBuilder;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

        $r2 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i2 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscoreOrDigit(char)>(c3);

        if $z0 != 0 goto label2;

        return;

     label2:
        $i4 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i5 = $i4 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        goto label1;

     label3:
        return;
    }

    protected final void addUpTo(char, java.lang.StringBuilder)
    {
        net.sourceforge.plantuml.tim.Eater r0;
        java.lang.String $r1;
        int $i0, $i1, $i4, $i5;
        char c2, c3;
        java.lang.StringBuilder r2;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        c3 := @parameter0: char;

        r2 := @parameter1: java.lang.StringBuilder;

     label1:
        $i0 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $r1 = r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String s>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

        c2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if c2 != c3 goto label2;

        return;

     label2:
        $i4 = r0.<net.sourceforge.plantuml.tim.Eater: int i>;

        $i5 = $i4 + 1;

        r0.<net.sourceforge.plantuml.tim.Eater: int i> = $i5;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        goto label1;

     label3:
        return;
    }

    protected final net.sourceforge.plantuml.tim.TFunctionImpl eatDeclareFunction(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, boolean, net.sourceforge.plantuml.LineLocation, boolean, net.sourceforge.plantuml.tim.TFunctionType) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.util.ArrayList $r0;
        net.sourceforge.plantuml.tim.Eater r2;
        java.lang.String r3, r7;
        boolean $z0, $z1, z2, z4;
        char c0, $c1;
        net.sourceforge.plantuml.tim.EaterException $r4, $r13;
        net.sourceforge.plantuml.tim.TFunctionImpl $r5, $r14;
        net.sourceforge.plantuml.tim.TFunctionType r6;
        net.sourceforge.plantuml.tim.TFunctionArgument $r8;
        net.sourceforge.plantuml.tim.expression.TokenStack r9;
        net.sourceforge.plantuml.LineLocation $r10, r15;
        net.sourceforge.plantuml.tim.TContext r11;
        net.sourceforge.plantuml.tim.TMemory r12;
        net.sourceforge.plantuml.tim.expression.TValue r16;

        r2 := @this: net.sourceforge.plantuml.tim.Eater;

        r11 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r12 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        z2 := @parameter2: boolean;

        r15 := @parameter3: net.sourceforge.plantuml.LineLocation;

        z4 := @parameter4: boolean;

        r6 := @parameter5: net.sourceforge.plantuml.tim.TFunctionType;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r3 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAndGetFunctionName()>();

        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void skipSpaces()>();

        $z0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: boolean safeCheckAndEatChar(char)>(40);

        if $z0 != 0 goto label2;

        if z4 == 0 goto label1;

        $r14 = new net.sourceforge.plantuml.tim.TFunctionImpl;

        specialinvoke $r14.<net.sourceforge.plantuml.tim.TFunctionImpl: void <init>(java.lang.String,java.util.List,boolean,net.sourceforge.plantuml.tim.TFunctionType)>(r3, $r0, z2, r6);

        return $r14;

     label1:
        $r13 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Missing opening parenthesis");

        throw $r13;

     label2:
        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void skipSpaces()>();

        c0 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        $z1 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscoreOrDollar(char)>(c0);

        if $z1 == 0 goto label5;

        r7 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAndGetVarname()>();

        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void skipSpaces()>();

        $c1 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if $c1 != 61 goto label3;

        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: char eatOneChar()>();

        r9 = staticinvoke <net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TokenStack eatUntilCloseParenthesisOrComma(net.sourceforge.plantuml.tim.Eater)>(r2);

        virtualinvoke r9.<net.sourceforge.plantuml.tim.expression.TokenStack: void guessFunctions()>();

        $r10 = virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.LineLocation getLineLocation()>();

        r16 = virtualinvoke r9.<net.sourceforge.plantuml.tim.expression.TokenStack: net.sourceforge.plantuml.tim.expression.TValue getResult(net.sourceforge.plantuml.LineLocation,net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory)>($r10, r11, r12);

        goto label4;

     label3:
        r16 = null;

     label4:
        $r8 = new net.sourceforge.plantuml.tim.TFunctionArgument;

        specialinvoke $r8.<net.sourceforge.plantuml.tim.TFunctionArgument: void <init>(java.lang.String,net.sourceforge.plantuml.tim.expression.TValue)>(r7, r16);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label8;

     label5:
        if c0 != 44 goto label6;

        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void checkAndEatChar(char)>(44);

        goto label8;

     label6:
        if c0 != 41 goto label7;

        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void checkAndEatChar(java.lang.String)>(")");

        goto label9;

     label7:
        $r4 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException located(java.lang.String)>("Error in function definition");

        throw $r4;

     label8:
        goto label2;

     label9:
        virtualinvoke r2.<net.sourceforge.plantuml.tim.Eater: void skipSpaces()>();

        $r5 = new net.sourceforge.plantuml.tim.TFunctionImpl;

        specialinvoke $r5.<net.sourceforge.plantuml.tim.TFunctionImpl: void <init>(java.lang.String,java.util.List,boolean,net.sourceforge.plantuml.tim.TFunctionType)>(r3, $r0, z2, r6);

        return $r5;
    }

    protected final net.sourceforge.plantuml.tim.TFunctionImpl eatDeclareReturnFunctionWithOptionalReturn(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, boolean, net.sourceforge.plantuml.LineLocation) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.Eater r0;
        net.sourceforge.plantuml.tim.TContext r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        boolean z0;
        net.sourceforge.plantuml.LineLocation r3;
        net.sourceforge.plantuml.tim.TFunctionType $r4;
        net.sourceforge.plantuml.tim.TFunctionImpl r5;
        char $c0, $c1;
        java.lang.StringBuilder $r6, $r7, $r9, $r11, $r12, $r14;
        java.lang.String $r8, $r13, r16, r17;
        net.sourceforge.plantuml.StringLocated $r10, $r15;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        z0 := @parameter2: boolean;

        r3 := @parameter3: net.sourceforge.plantuml.LineLocation;

        $r4 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType RETURN_FUNCTION>;

        r5 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.tim.TFunctionImpl eatDeclareFunction(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,boolean,net.sourceforge.plantuml.LineLocation,boolean,net.sourceforge.plantuml.tim.TFunctionType)>(r1, r2, z0, r3, 0, $r4);

        $c0 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if $c0 != 114 goto label1;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: void checkAndEatChar(java.lang.String)>("return");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: void skipSpaces()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!return ");

        $r13 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAllToEnd()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new net.sourceforge.plantuml.StringLocated;

        specialinvoke $r15.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>(r16, r3);

        virtualinvoke r5.<net.sourceforge.plantuml.tim.TFunctionImpl: void addBody(net.sourceforge.plantuml.StringLocated)>($r15);

        goto label2;

     label1:
        $c1 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: char peekChar()>();

        if $c1 != 33 goto label2;

        virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: void checkAndEatChar(java.lang.String)>("!return");

        virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: void skipSpaces()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!return ");

        $r8 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: java.lang.String eatAllToEnd()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new net.sourceforge.plantuml.StringLocated;

        specialinvoke $r10.<net.sourceforge.plantuml.StringLocated: void <init>(java.lang.String,net.sourceforge.plantuml.LineLocation)>(r17, r3);

        virtualinvoke r5.<net.sourceforge.plantuml.tim.TFunctionImpl: void addBody(net.sourceforge.plantuml.StringLocated)>($r10);

     label2:
        return r5;
    }

    protected final net.sourceforge.plantuml.tim.TFunctionImpl eatDeclareProcedure(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, boolean, net.sourceforge.plantuml.LineLocation) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.Eater r0;
        net.sourceforge.plantuml.tim.TContext r1;
        net.sourceforge.plantuml.tim.TMemory r2;
        boolean z0;
        net.sourceforge.plantuml.LineLocation r3;
        net.sourceforge.plantuml.tim.TFunctionType $r4;
        net.sourceforge.plantuml.tim.TFunctionImpl r5;

        r0 := @this: net.sourceforge.plantuml.tim.Eater;

        r1 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r2 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        z0 := @parameter2: boolean;

        r3 := @parameter3: net.sourceforge.plantuml.LineLocation;

        $r4 = <net.sourceforge.plantuml.tim.TFunctionType: net.sourceforge.plantuml.tim.TFunctionType PROCEDURE>;

        r5 = virtualinvoke r0.<net.sourceforge.plantuml.tim.Eater: net.sourceforge.plantuml.tim.TFunctionImpl eatDeclareFunction(net.sourceforge.plantuml.tim.TContext,net.sourceforge.plantuml.tim.TMemory,boolean,net.sourceforge.plantuml.LineLocation,boolean,net.sourceforge.plantuml.tim.TFunctionType)>(r1, r2, z0, r3, 0, $r4);

        return r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lnet/sourceforge/plantuml/tim/Eater;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <net.sourceforge.plantuml.tim.Eater: boolean $assertionsDisabled> = $z1;

        return;
    }
}
