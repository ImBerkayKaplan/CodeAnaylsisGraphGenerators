public class net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty extends java.lang.Object
{
    public final java.lang.Object obj;

    public void <init>(java.lang.Object)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty r0;
        java.lang.Object r1, $r2;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: java.lang.Object obj> = $r2;

        return;
    }

    public final int hashCode()
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty r0;
        java.lang.Object $r1;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty;

        $r1 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: java.lang.Object obj>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final boolean equals(java.lang.Object)
    {
        net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty r0, $r2;
        java.lang.Object r1, $r3, $r4;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: java.lang.Object obj>;

        $r2 = (net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty) r1;

        $r3 = $r2.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: java.lang.Object obj>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public final void setProperty(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r2, $r3, $r6, $r10, r12, r16;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty r1;
        net.sourceforge.plantuml.elk.proxy.ElkObjectProxy $r5, r13;
        java.util.Collection $r8;
        java.util.Iterator r9;
        java.lang.Class $r14;
        java.util.EnumSet r15;

        r1 := @this: net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.EnumSet;

        if $z0 == 0 goto label4;

        r15 = null;

        $r8 = (java.util.Collection) r0;

        r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r12 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r13 = (net.sourceforge.plantuml.elk.proxy.ElkObjectProxy) r12;

        if r15 != null goto label2;

        $r14 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>();

        r15 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r14);

     label2:
        virtualinvoke r15.<java.util.EnumSet: boolean add(java.lang.Object)>(r13);

        goto label1;

     label3:
        $r10 = r1.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: java.lang.Object obj>;

        staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call2(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r10, "setProperty", r2, r15);

        goto label6;

     label4:
        $z1 = r0 instanceof net.sourceforge.plantuml.elk.proxy.ElkObjectProxy;

        if $z1 == 0 goto label5;

        $r5 = (net.sourceforge.plantuml.elk.proxy.ElkObjectProxy) r0;

        r16 = interfaceinvoke $r5.<net.sourceforge.plantuml.elk.proxy.ElkObjectProxy: java.lang.Object getTrueObject()>();

        $r6 = r1.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: java.lang.Object obj>;

        staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call2(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r6, "setProperty", r2, r16);

        goto label6;

     label5:
        $r3 = r1.<net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty: java.lang.Object obj>;

        staticinvoke <net.sourceforge.plantuml.elk.proxy.Reflect: java.lang.Object call2(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r3, "setProperty", r2, r0);

     label6:
        return;
    }
}
