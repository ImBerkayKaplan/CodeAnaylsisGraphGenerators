public class net.sourceforge.plantuml.svek.image.EntityImageState2 extends net.sourceforge.plantuml.svek.AbstractEntityImage
{
    private final net.sourceforge.plantuml.Url url;
    private final net.sourceforge.plantuml.style.SName sname;
    private final net.sourceforge.plantuml.graphic.TextBlock asSmall;

    public void <init>(net.sourceforge.plantuml.cucadiagram.ILeaf, net.sourceforge.plantuml.ISkinParam, net.sourceforge.plantuml.style.SName)
    {
        net.sourceforge.plantuml.svek.image.EntityImageState2 r0;
        net.sourceforge.plantuml.cucadiagram.ILeaf r1;
        net.sourceforge.plantuml.ISkinParam r2, $r9, $r16, $r19;
        net.sourceforge.plantuml.style.SName r3;
        net.sourceforge.plantuml.cucadiagram.Stereotype r4, $r10, $r18, $r20;
        net.sourceforge.plantuml.graphic.USymbol r5;
        boolean $z0, $z1;
        net.sourceforge.plantuml.cucadiagram.IEntity $r6, $r17;
        net.sourceforge.plantuml.graphic.color.Colors $r7;
        net.sourceforge.plantuml.graphic.color.ColorType $r8;
        net.sourceforge.plantuml.ColorParam[] $r11, $r21;
        net.sourceforge.plantuml.ColorParam $r12, $r22;
        net.sourceforge.plantuml.graphic.SymbolContext $r13, $r15, r26;
        net.sourceforge.plantuml.ugraphic.UStroke $r14;
        net.sourceforge.plantuml.style.Style $r23, $r35;
        net.sourceforge.plantuml.api.ThemeStyle $r24;
        net.sourceforge.plantuml.ugraphic.color.HColorSet $r25;
        net.sourceforge.plantuml.ugraphic.color.HColor r27, r28;
        double $d0;
        net.sourceforge.plantuml.Url $r29;
        net.sourceforge.plantuml.graphic.TextBlock r30, r36, $r38;
        net.sourceforge.plantuml.graphic.HorizontalAlignment $r31, $r32, $r37;
        net.sourceforge.plantuml.cucadiagram.Display $r33;
        net.sourceforge.plantuml.FontParam $r34;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageState2;

        r1 := @parameter0: net.sourceforge.plantuml.cucadiagram.ILeaf;

        r2 := @parameter1: net.sourceforge.plantuml.ISkinParam;

        r3 := @parameter2: net.sourceforge.plantuml.style.SName;

        specialinvoke r0.<net.sourceforge.plantuml.svek.AbstractEntityImage: void <init>(net.sourceforge.plantuml.cucadiagram.IEntity,net.sourceforge.plantuml.ISkinParam)>(r1, r2);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.style.SName sname> = r3;

        r4 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        r5 = <net.sourceforge.plantuml.graphic.USymbols: net.sourceforge.plantuml.graphic.USymbol FRAME>;

        $z0 = staticinvoke <net.sourceforge.plantuml.UseStyle: boolean useBetaStyle()>();

        if $z0 == 0 goto label1;

        $r23 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.style.Style getStyle()>();

        $r24 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.api.ThemeStyle getThemeStyle()>();

        $r25 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.ugraphic.color.HColorSet getIHtmlColorSet()>();

        r26 = virtualinvoke $r23.<net.sourceforge.plantuml.style.Style: net.sourceforge.plantuml.graphic.SymbolContext getSymbolContext(net.sourceforge.plantuml.api.ThemeStyle,net.sourceforge.plantuml.ugraphic.color.HColorSet)>($r24, $r25);

        goto label5;

     label1:
        $r6 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r7 = interfaceinvoke $r6.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.graphic.color.Colors getColors()>();

        $r8 = <net.sourceforge.plantuml.graphic.color.ColorType: net.sourceforge.plantuml.graphic.color.ColorType BACK>;

        r27 = virtualinvoke $r7.<net.sourceforge.plantuml.graphic.color.Colors: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.graphic.color.ColorType)>($r8);

        if r27 != null goto label2;

        $r19 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r20 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r21 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r22 = virtualinvoke r5.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.ColorParam getColorParamBack()>();

        $r21[0] = $r22;

        r27 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r19, $r20, $r21);

     label2:
        $r9 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r10 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.cucadiagram.Stereotype getStereo()>();

        $r11 = newarray (net.sourceforge.plantuml.ColorParam)[1];

        $r12 = virtualinvoke r5.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.ColorParam getColorParamBorder()>();

        $r11[0] = $r12;

        r28 = staticinvoke <net.sourceforge.plantuml.SkinParamUtils: net.sourceforge.plantuml.ugraphic.color.HColor getColor(net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.ColorParam[])>($r9, $r10, $r11);

        $r13 = new net.sourceforge.plantuml.graphic.SymbolContext;

        specialinvoke $r13.<net.sourceforge.plantuml.graphic.SymbolContext: void <init>(net.sourceforge.plantuml.ugraphic.color.HColor,net.sourceforge.plantuml.ugraphic.color.HColor)>(r27, r28);

        $r14 = new net.sourceforge.plantuml.ugraphic.UStroke;

        specialinvoke $r14.<net.sourceforge.plantuml.ugraphic.UStroke: void <init>(double)>(1.5);

        $r15 = virtualinvoke $r13.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withStroke(net.sourceforge.plantuml.ugraphic.UStroke)>($r14);

        $r16 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r17 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.cucadiagram.IEntity getEntity()>();

        $r18 = interfaceinvoke $r17.<net.sourceforge.plantuml.cucadiagram.IEntity: net.sourceforge.plantuml.cucadiagram.Stereotype getStereotype()>();

        $z1 = interfaceinvoke $r16.<net.sourceforge.plantuml.ISkinParam: boolean shadowing(net.sourceforge.plantuml.cucadiagram.Stereotype)>($r18);

        if $z1 == 0 goto label3;

        $d0 = 3.0;

        goto label4;

     label3:
        $d0 = 0.0;

     label4:
        r26 = virtualinvoke $r15.<net.sourceforge.plantuml.graphic.SymbolContext: net.sourceforge.plantuml.graphic.SymbolContext withShadow(double)>($d0);

     label5:
        $r29 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.Url getUrl99()>();

        r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.Url url> = $r29;

        r30 = staticinvoke <net.sourceforge.plantuml.graphic.TextBlockUtils: net.sourceforge.plantuml.graphic.TextBlock empty(double,double)>(0.0, 0.0);

        $r31 = <net.sourceforge.plantuml.graphic.HorizontalAlignment: net.sourceforge.plantuml.graphic.HorizontalAlignment CENTER>;

        $r32 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getDefaultTextAlignment(net.sourceforge.plantuml.graphic.HorizontalAlignment)>($r31);

        $r33 = interfaceinvoke r1.<net.sourceforge.plantuml.cucadiagram.ILeaf: net.sourceforge.plantuml.cucadiagram.Display getDisplay()>();

        $r34 = virtualinvoke r5.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.FontParam getFontParam()>();

        $r35 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.style.Style getStyle()>();

        r36 = staticinvoke <net.sourceforge.plantuml.cucadiagram.BodyFactory: net.sourceforge.plantuml.graphic.TextBlock create2(net.sourceforge.plantuml.graphic.HorizontalAlignment,net.sourceforge.plantuml.cucadiagram.Display,net.sourceforge.plantuml.FontParam,net.sourceforge.plantuml.ISkinParam,net.sourceforge.plantuml.cucadiagram.Stereotype,net.sourceforge.plantuml.cucadiagram.ILeaf,net.sourceforge.plantuml.style.Style)>($r32, $r33, $r34, r2, r4, r1, $r35);

        $r37 = interfaceinvoke r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.graphic.HorizontalAlignment getStereotypeAlignment()>();

        $r38 = virtualinvoke r5.<net.sourceforge.plantuml.graphic.USymbol: net.sourceforge.plantuml.graphic.TextBlock asSmall(net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.TextBlock,net.sourceforge.plantuml.graphic.SymbolContext,net.sourceforge.plantuml.graphic.HorizontalAlignment)>(null, r36, r30, r26, $r37);

        r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.graphic.TextBlock asSmall> = $r38;

        return;
    }

    private net.sourceforge.plantuml.style.Style getStyle()
    {
        net.sourceforge.plantuml.svek.image.EntityImageState2 r0;
        net.sourceforge.plantuml.style.StyleSignature $r1;
        net.sourceforge.plantuml.ISkinParam $r2;
        net.sourceforge.plantuml.style.StyleBuilder $r3;
        net.sourceforge.plantuml.style.Style $r4;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageState2;

        $r1 = specialinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.style.StyleSignature getStyleSignature()>();

        $r2 = virtualinvoke r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.ISkinParam getSkinParam()>();

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.ISkinParam: net.sourceforge.plantuml.style.StyleBuilder getCurrentStyleBuilder()>();

        $r4 = virtualinvoke $r1.<net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.Style getMergedStyle(net.sourceforge.plantuml.style.StyleBuilder)>($r3);

        return $r4;
    }

    private net.sourceforge.plantuml.style.StyleSignature getStyleSignature()
    {
        net.sourceforge.plantuml.style.SName[] $r0;
        net.sourceforge.plantuml.style.SName $r1, $r2, $r4, $r5;
        net.sourceforge.plantuml.svek.image.EntityImageState2 r3;
        net.sourceforge.plantuml.style.StyleSignature $r6;

        r3 := @this: net.sourceforge.plantuml.svek.image.EntityImageState2;

        $r0 = newarray (net.sourceforge.plantuml.style.SName)[4];

        $r1 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName root>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName element>;

        $r0[1] = $r2;

        $r4 = r3.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.style.SName sname>;

        $r0[2] = $r4;

        $r5 = <net.sourceforge.plantuml.style.SName: net.sourceforge.plantuml.style.SName state>;

        $r0[3] = $r5;

        $r6 = staticinvoke <net.sourceforge.plantuml.style.StyleSignature: net.sourceforge.plantuml.style.StyleSignature of(net.sourceforge.plantuml.style.SName[])>($r0);

        return $r6;
    }

    public net.sourceforge.plantuml.svek.ShapeType getShapeType()
    {
        net.sourceforge.plantuml.svek.ShapeType $r0;
        net.sourceforge.plantuml.svek.image.EntityImageState2 r1;

        r1 := @this: net.sourceforge.plantuml.svek.image.EntityImageState2;

        $r0 = <net.sourceforge.plantuml.svek.ShapeType: net.sourceforge.plantuml.svek.ShapeType RECTANGLE>;

        return $r0;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.svek.image.EntityImageState2 r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.graphic.TextBlock $r2;
        net.sourceforge.plantuml.awt.geom.Dimension2D $r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageState2;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.graphic.TextBlock asSmall>;

        $r3 = interfaceinvoke $r2.<net.sourceforge.plantuml.graphic.TextBlock: net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $r3;
    }

    public final void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.svek.image.EntityImageState2 r0;
        net.sourceforge.plantuml.Url $r1, $r4, $r5;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.graphic.TextBlock $r3;

        r0 := @this: net.sourceforge.plantuml.svek.image.EntityImageState2;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        $r5 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r5);

     label1:
        $r3 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.graphic.TextBlock asSmall>;

        interfaceinvoke $r3.<net.sourceforge.plantuml.graphic.TextBlock: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)>(r2);

        $r4 = r0.<net.sourceforge.plantuml.svek.image.EntityImageState2: net.sourceforge.plantuml.Url url>;

        if $r4 == null goto label2;

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label2:
        return;
    }
}
