public class net.sourceforge.plantuml.creole.atom.AtomImg extends net.sourceforge.plantuml.creole.atom.AbstractAtom implements net.sourceforge.plantuml.creole.atom.Atom
{
    private static final java.lang.String DATA_IMAGE_PNG_BASE64;
    private static final java.lang.String DATA_IMAGE_SVG_BASE64;
    private final java.awt.image.BufferedImage image;
    private final double scale;
    private final net.sourceforge.plantuml.Url url;
    private final java.lang.String rawFileName;

    private void <init>(java.awt.image.BufferedImage, double, net.sourceforge.plantuml.Url, java.lang.String)
    {
        net.sourceforge.plantuml.creole.atom.AtomImg r0;
        java.awt.image.BufferedImage r1;
        double d0;
        net.sourceforge.plantuml.Url r2;
        java.lang.String r3;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomImg;

        r1 := @parameter0: java.awt.image.BufferedImage;

        d0 := @parameter1: double;

        r2 := @parameter2: net.sourceforge.plantuml.Url;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<net.sourceforge.plantuml.creole.atom.AbstractAtom: void <init>()>();

        r0.<net.sourceforge.plantuml.creole.atom.AtomImg: java.awt.image.BufferedImage image> = r1;

        r0.<net.sourceforge.plantuml.creole.atom.AtomImg: double scale> = d0;

        r0.<net.sourceforge.plantuml.creole.atom.AtomImg: net.sourceforge.plantuml.Url url> = r2;

        r0.<net.sourceforge.plantuml.creole.atom.AtomImg: java.lang.String rawFileName> = r3;

        return;
    }

    public static net.sourceforge.plantuml.creole.atom.Atom createQrcode(java.lang.String, double)
    {
        net.sourceforge.plantuml.flashcode.FlashCodeUtils r0;
        java.lang.String r1;
        java.awt.Color $r2, $r3;
        net.sourceforge.plantuml.creole.atom.AtomImg $r4;
        net.sourceforge.plantuml.ugraphic.UImage $r5, $r8;
        net.sourceforge.plantuml.ugraphic.PixelImage $r6;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r7;
        double d0;
        java.awt.image.BufferedImage $r9, $r10, r11;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r0 = staticinvoke <net.sourceforge.plantuml.flashcode.FlashCodeFactory: net.sourceforge.plantuml.flashcode.FlashCodeUtils getFlashCodeUtils()>();

        $r3 = <java.awt.Color: java.awt.Color BLACK>;

        $r2 = <java.awt.Color: java.awt.Color WHITE>;

        r11 = interfaceinvoke r0.<net.sourceforge.plantuml.flashcode.FlashCodeUtils: java.awt.image.BufferedImage exportFlashcode(java.lang.String,java.awt.Color,java.awt.Color)>(r1, $r3, $r2);

        if r11 != null goto label1;

        $r10 = new java.awt.image.BufferedImage;

        specialinvoke $r10.<java.awt.image.BufferedImage: void <init>(int,int,int)>(10, 10, 1);

        r11 = $r10;

     label1:
        $r4 = new net.sourceforge.plantuml.creole.atom.AtomImg;

        $r5 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r6 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r7 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_NEAREST_NEIGHBOR>;

        specialinvoke $r6.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>(r11, $r7);

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r6);

        $r8 = virtualinvoke $r5.<net.sourceforge.plantuml.ugraphic.UImage: net.sourceforge.plantuml.ugraphic.UImage scale(double)>(d0);

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UImage: java.awt.image.BufferedImage getImage(double)>(1.0);

        specialinvoke $r4.<net.sourceforge.plantuml.creole.atom.AtomImg: void <init>(java.awt.image.BufferedImage,double,net.sourceforge.plantuml.Url,java.lang.String)>($r9, 1.0, null, null);

        return $r4;
    }

    public static net.sourceforge.plantuml.creole.atom.Atom create(java.lang.String, net.sourceforge.plantuml.graphic.ImgValign, int, double, net.sourceforge.plantuml.Url)
    {
        net.sourceforge.plantuml.ugraphic.UFont r0;
        net.sourceforge.plantuml.graphic.FontConfiguration r1;
        java.lang.String r2, $r9, $r17, $r20, $r30, $r33, $r35, $r36, $r40, $r48, $r50, $r55, $r57, $r62, $r64, r67, r70, r74;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        net.sourceforge.plantuml.security.SURL $r3, $r6;
        double d0;
        net.sourceforge.plantuml.Url r4;
        net.sourceforge.plantuml.creole.atom.Atom $r5, $r7, $r14, $r21, $r24, $r27, $r34, $r41, $r45, $r51, $r58, $r65;
        net.sourceforge.plantuml.FileSystem $r8;
        net.sourceforge.plantuml.creole.atom.AtomImg $r10;
        java.awt.image.BufferedImage $r11, r75;
        net.sourceforge.plantuml.security.SecurityProfile $r12, $r13, $r25, $r26, $r43, $r44;
        java.lang.StringBuilder $r15, $r16, $r18, $r19, $r28, $r29, $r31, $r32, $r46, $r47, $r49, $r53, $r54, $r56, $r60, $r61, $r63;
        net.sourceforge.plantuml.creole.atom.AtomImgSvg $r22, $r38;
        net.sourceforge.plantuml.graphic.TileImageSvg $r23, $r39;
        int $i0, $i1, $i2, $i3, i4;
        java.io.IOException $r42;
        java.lang.Exception $r52, $r59;
        net.sourceforge.plantuml.graphic.ImgValign r66;
        byte[] r68, r71;
        net.sourceforge.plantuml.security.SFile r73;

        r2 := @parameter0: java.lang.String;

        r66 := @parameter1: net.sourceforge.plantuml.graphic.ImgValign;

        i4 := @parameter2: int;

        d0 := @parameter3: double;

        r4 := @parameter4: net.sourceforge.plantuml.Url;

        r0 = staticinvoke <net.sourceforge.plantuml.ugraphic.UFont: net.sourceforge.plantuml.ugraphic.UFont monospaced(int)>(14);

        r1 = staticinvoke <net.sourceforge.plantuml.graphic.FontConfiguration: net.sourceforge.plantuml.graphic.FontConfiguration blackBlueTrue(net.sourceforge.plantuml.ugraphic.UFont)>(r0);

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("data:image/png;base64,");

        if $z0 == 0 goto label04;

        $r40 = "data:image/png;base64,";

        $i2 = virtualinvoke $r40.<java.lang.String: int length()>();

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        r67 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

     label01:
        r68 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: byte[] decode(java.lang.String)>(r67);

        $r41 = staticinvoke <net.sourceforge.plantuml.creole.atom.AtomImg: net.sourceforge.plantuml.creole.atom.Atom buildRasterFromData(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration,byte[],double,net.sourceforge.plantuml.Url)>(r2, r1, r68, d0, r4);

     label02:
        return $r41;

     label03:
        $r59 := @caughtexception;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR ");

        $r62 = virtualinvoke $r59.<java.lang.Exception: java.lang.String toString()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        $r65 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r64, r1);

        return $r65;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("data:image/svg+xml;base64,");

        if $z1 == 0 goto label08;

        $r35 = "data:image/svg+xml;base64,";

        $i0 = virtualinvoke $r35.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        r70 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

     label05:
        r71 = staticinvoke <net.sourceforge.plantuml.code.Base64Coder: byte[] decode(java.lang.String)>(r70);

        $r36 = new java.lang.String;

        specialinvoke $r36.<java.lang.String: void <init>(byte[])>(r71);

        $r38 = new net.sourceforge.plantuml.creole.atom.AtomImgSvg;

        $r39 = new net.sourceforge.plantuml.graphic.TileImageSvg;

        specialinvoke $r39.<net.sourceforge.plantuml.graphic.TileImageSvg: void <init>(java.lang.String)>($r36);

        specialinvoke $r38.<net.sourceforge.plantuml.creole.atom.AtomImgSvg: void <init>(net.sourceforge.plantuml.graphic.TileImageSvg)>($r39);

     label06:
        return $r38;

     label07:
        $r52 := @caughtexception;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR ");

        $r55 = virtualinvoke $r52.<java.lang.Exception: java.lang.String toString()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r58 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r57, r1);

        return $r58;

     label08:
        $z2 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z2 != 0 goto label09;

        $z4 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("https:");

        if $z4 == 0 goto label13;

     label09:
        $z3 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".svg");

        if $z3 == 0 goto label11;

        $r6 = staticinvoke <net.sourceforge.plantuml.security.SURL: net.sourceforge.plantuml.security.SURL create(java.lang.String)>(r2);

        $r7 = staticinvoke <net.sourceforge.plantuml.creole.atom.AtomImg: net.sourceforge.plantuml.creole.atom.Atom buildSvgFromUrl(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.security.SURL,double,net.sourceforge.plantuml.Url)>(r2, r1, $r6, d0, r4);

     label10:
        return $r7;

     label11:
        $r3 = staticinvoke <net.sourceforge.plantuml.security.SURL: net.sourceforge.plantuml.security.SURL create(java.lang.String)>(r2);

        $r5 = staticinvoke <net.sourceforge.plantuml.creole.atom.AtomImg: net.sourceforge.plantuml.creole.atom.Atom buildRasterFromUrl(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration,net.sourceforge.plantuml.security.SURL,double,net.sourceforge.plantuml.Url)>(r2, r1, $r3, d0, r4);

     label12:
        return $r5;

     label13:
        $r8 = staticinvoke <net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.FileSystem getInstance()>();

        r73 = virtualinvoke $r8.<net.sourceforge.plantuml.FileSystem: net.sourceforge.plantuml.security.SFile getFile(java.lang.String)>(r2);

        $z5 = virtualinvoke r73.<net.sourceforge.plantuml.security.SFile: boolean exists()>();

        if $z5 != 0 goto label17;

        $r25 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r26 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r25 != $r26 goto label15;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(File not found: ");

        $r30 = virtualinvoke r73.<net.sourceforge.plantuml.security.SFile: java.lang.String getPrintablePath()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r33, r1);

     label14:
        return $r34;

     label15:
        $r27 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>("(Cannot decode)", r1);

     label16:
        return $r27;

     label17:
        $r9 = virtualinvoke r73.<net.sourceforge.plantuml.security.SFile: java.lang.String getName()>();

        $z6 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".svg");

        if $z6 == 0 goto label21;

        r74 = staticinvoke <net.sourceforge.plantuml.FileUtils: java.lang.String readSvg(net.sourceforge.plantuml.security.SFile)>(r73);

        if r74 != null goto label19;

        $r24 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>("(Cannot decode)", r1);

     label18:
        return $r24;

     label19:
        $r22 = new net.sourceforge.plantuml.creole.atom.AtomImgSvg;

        $r23 = new net.sourceforge.plantuml.graphic.TileImageSvg;

        specialinvoke $r23.<net.sourceforge.plantuml.graphic.TileImageSvg: void <init>(java.lang.String)>(r74);

        specialinvoke $r22.<net.sourceforge.plantuml.creole.atom.AtomImgSvg: void <init>(net.sourceforge.plantuml.graphic.TileImageSvg)>($r23);

     label20:
        return $r22;

     label21:
        r75 = virtualinvoke r73.<net.sourceforge.plantuml.security.SFile: java.awt.image.BufferedImage readRasterImageFromFile()>();

        if r75 != null goto label25;

        $r12 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r13 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r12 != $r13 goto label23;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Cannot decode: ");

        $r17 = virtualinvoke r73.<net.sourceforge.plantuml.security.SFile: java.lang.String getPrintablePath()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r20, r1);

     label22:
        return $r21;

     label23:
        $r14 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>("(Cannot decode)", r1);

     label24:
        return $r14;

     label25:
        $r10 = new net.sourceforge.plantuml.creole.atom.AtomImg;

        $r11 = virtualinvoke r73.<net.sourceforge.plantuml.security.SFile: java.awt.image.BufferedImage readRasterImageFromFile()>();

        specialinvoke $r10.<net.sourceforge.plantuml.creole.atom.AtomImg: void <init>(java.awt.image.BufferedImage,double,net.sourceforge.plantuml.Url,java.lang.String)>($r11, d0, r4, r2);

     label26:
        return $r10;

     label27:
        $r42 := @caughtexception;

        virtualinvoke $r42.<java.io.IOException: void printStackTrace()>();

        $r43 = staticinvoke <net.sourceforge.plantuml.security.SecurityUtils: net.sourceforge.plantuml.security.SecurityProfile getSecurityProfile()>();

        $r44 = <net.sourceforge.plantuml.security.SecurityProfile: net.sourceforge.plantuml.security.SecurityProfile UNSECURE>;

        if $r43 != $r44 goto label28;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR ");

        $r48 = virtualinvoke $r42.<java.io.IOException: java.lang.String toString()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r50, r1);

        return $r51;

     label28:
        $r45 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>("ERROR", r1);

        return $r45;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.io.IOException from label08 to label10 with label27;
        catch java.io.IOException from label11 to label12 with label27;
        catch java.io.IOException from label13 to label14 with label27;
        catch java.io.IOException from label15 to label16 with label27;
        catch java.io.IOException from label17 to label18 with label27;
        catch java.io.IOException from label19 to label20 with label27;
        catch java.io.IOException from label21 to label22 with label27;
        catch java.io.IOException from label23 to label24 with label27;
        catch java.io.IOException from label25 to label26 with label27;
    }

    private static net.sourceforge.plantuml.creole.atom.Atom buildRasterFromData(java.lang.String, net.sourceforge.plantuml.graphic.FontConfiguration, byte[], double, net.sourceforge.plantuml.Url) throws java.io.IOException
    {
        byte[] r0;
        java.awt.image.BufferedImage r1;
        net.sourceforge.plantuml.creole.atom.AtomImg $r2;
        double d0;
        net.sourceforge.plantuml.Url r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String r6, $r9;
        net.sourceforge.plantuml.graphic.FontConfiguration r10;
        net.sourceforge.plantuml.creole.atom.Atom $r11;

        r6 := @parameter0: java.lang.String;

        r10 := @parameter1: net.sourceforge.plantuml.graphic.FontConfiguration;

        r0 := @parameter2: byte[];

        d0 := @parameter3: double;

        r3 := @parameter4: net.sourceforge.plantuml.Url;

        r1 = staticinvoke <net.sourceforge.plantuml.security.SImageIO: java.awt.image.BufferedImage read(byte[])>(r0);

        if r1 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Cannot decode: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r9, r10);

        return $r11;

     label1:
        $r2 = new net.sourceforge.plantuml.creole.atom.AtomImg;

        specialinvoke $r2.<net.sourceforge.plantuml.creole.atom.AtomImg: void <init>(java.awt.image.BufferedImage,double,net.sourceforge.plantuml.Url,java.lang.String)>(r1, d0, r3, null);

        return $r2;
    }

    private static net.sourceforge.plantuml.creole.atom.Atom buildRasterFromUrl(java.lang.String, net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.security.SURL, double, net.sourceforge.plantuml.Url) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SURL r0;
        java.awt.image.BufferedImage r1;
        net.sourceforge.plantuml.creole.atom.AtomImg $r2;
        double d0;
        net.sourceforge.plantuml.Url r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r12, $r13, $r14, $r15;
        java.lang.String r6, $r9, $r16;
        net.sourceforge.plantuml.graphic.FontConfiguration r10;
        net.sourceforge.plantuml.creole.atom.Atom $r11, $r17;

        r6 := @parameter0: java.lang.String;

        r10 := @parameter1: net.sourceforge.plantuml.graphic.FontConfiguration;

        r0 := @parameter2: net.sourceforge.plantuml.security.SURL;

        d0 := @parameter3: double;

        r3 := @parameter4: net.sourceforge.plantuml.Url;

        if r0 != null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Cannot decode: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r16, r10);

        return $r17;

     label1:
        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SURL: java.awt.image.BufferedImage readRasterImageFromURL()>();

        if r1 != null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Cannot decode: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r9, r10);

        return $r11;

     label2:
        $r2 = new net.sourceforge.plantuml.creole.atom.AtomImg;

        specialinvoke $r2.<net.sourceforge.plantuml.creole.atom.AtomImg: void <init>(java.awt.image.BufferedImage,double,net.sourceforge.plantuml.Url,java.lang.String)>(r1, d0, r3, "http");

        return $r2;
    }

    private static net.sourceforge.plantuml.creole.atom.Atom buildSvgFromUrl(java.lang.String, net.sourceforge.plantuml.graphic.FontConfiguration, net.sourceforge.plantuml.security.SURL, double, net.sourceforge.plantuml.Url) throws java.io.IOException
    {
        net.sourceforge.plantuml.security.SURL r0;
        byte[] r1;
        net.sourceforge.plantuml.creole.atom.AtomImgSvg $r2;
        net.sourceforge.plantuml.graphic.TileImageSvg $r3;
        java.lang.String $r4, r8, $r11, $r18;
        java.nio.charset.Charset $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r14, $r15, $r16, $r17;
        net.sourceforge.plantuml.graphic.FontConfiguration r12;
        net.sourceforge.plantuml.creole.atom.Atom $r13, $r19;
        double d0;
        net.sourceforge.plantuml.Url r20;

        r8 := @parameter0: java.lang.String;

        r12 := @parameter1: net.sourceforge.plantuml.graphic.FontConfiguration;

        r0 := @parameter2: net.sourceforge.plantuml.security.SURL;

        d0 := @parameter3: double;

        r20 := @parameter4: net.sourceforge.plantuml.Url;

        if r0 != null goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Cannot decode SVG: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r18, r12);

        return $r19;

     label1:
        r1 = virtualinvoke r0.<net.sourceforge.plantuml.security.SURL: byte[] getBytes()>();

        if r1 != null goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Cannot decode SVG: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <net.sourceforge.plantuml.creole.legacy.AtomTextUtils: net.sourceforge.plantuml.creole.atom.Atom createLegacy(java.lang.String,net.sourceforge.plantuml.graphic.FontConfiguration)>($r11, r12);

        return $r13;

     label2:
        $r2 = new net.sourceforge.plantuml.creole.atom.AtomImgSvg;

        $r3 = new net.sourceforge.plantuml.graphic.TileImageSvg;

        $r4 = new java.lang.String;

        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r1, $r5);

        specialinvoke $r3.<net.sourceforge.plantuml.graphic.TileImageSvg: void <init>(java.lang.String)>($r4);

        specialinvoke $r2.<net.sourceforge.plantuml.creole.atom.AtomImgSvg: void <init>(net.sourceforge.plantuml.graphic.TileImageSvg)>($r3);

        return $r2;
    }

    public net.sourceforge.plantuml.awt.geom.Dimension2D calculateDimension(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.Dimension2DDouble $r0;
        net.sourceforge.plantuml.creole.atom.AtomImg r1;
        java.awt.image.BufferedImage $r2, $r3;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        net.sourceforge.plantuml.graphic.StringBounder r4;

        r1 := @this: net.sourceforge.plantuml.creole.atom.AtomImg;

        r4 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r0 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r2 = r1.<net.sourceforge.plantuml.creole.atom.AtomImg: java.awt.image.BufferedImage image>;

        $i0 = virtualinvoke $r2.<java.awt.image.BufferedImage: int getWidth()>();

        $d1 = (double) $i0;

        $d0 = r1.<net.sourceforge.plantuml.creole.atom.AtomImg: double scale>;

        $d2 = $d1 * $d0;

        $r3 = r1.<net.sourceforge.plantuml.creole.atom.AtomImg: java.awt.image.BufferedImage image>;

        $i1 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getHeight()>();

        $d4 = (double) $i1;

        $d3 = r1.<net.sourceforge.plantuml.creole.atom.AtomImg: double scale>;

        $d5 = $d4 * $d3;

        specialinvoke $r0.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>($d2, $d5);

        return $r0;
    }

    public double getStartingAltitude(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.creole.atom.AtomImg r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomImg;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public void drawU(net.sourceforge.plantuml.ugraphic.UGraphic)
    {
        net.sourceforge.plantuml.creole.atom.AtomImg r0;
        net.sourceforge.plantuml.Url $r1, $r10, $r11;
        net.sourceforge.plantuml.ugraphic.UGraphic r2;
        net.sourceforge.plantuml.ugraphic.UImage $r3, $r8, $r9;
        net.sourceforge.plantuml.ugraphic.PixelImage $r4;
        net.sourceforge.plantuml.ugraphic.AffineTransformType $r5;
        java.awt.image.BufferedImage $r6;
        java.lang.String $r7;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.creole.atom.AtomImg;

        r2 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        $r1 = r0.<net.sourceforge.plantuml.creole.atom.AtomImg: net.sourceforge.plantuml.Url url>;

        if $r1 == null goto label1;

        $r11 = r0.<net.sourceforge.plantuml.creole.atom.AtomImg: net.sourceforge.plantuml.Url url>;

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void startUrl(net.sourceforge.plantuml.Url)>($r11);

     label1:
        $r3 = new net.sourceforge.plantuml.ugraphic.UImage;

        $r4 = new net.sourceforge.plantuml.ugraphic.PixelImage;

        $r6 = r0.<net.sourceforge.plantuml.creole.atom.AtomImg: java.awt.image.BufferedImage image>;

        $r5 = <net.sourceforge.plantuml.ugraphic.AffineTransformType: net.sourceforge.plantuml.ugraphic.AffineTransformType TYPE_BILINEAR>;

        specialinvoke $r4.<net.sourceforge.plantuml.ugraphic.PixelImage: void <init>(java.awt.image.BufferedImage,net.sourceforge.plantuml.ugraphic.AffineTransformType)>($r6, $r5);

        specialinvoke $r3.<net.sourceforge.plantuml.ugraphic.UImage: void <init>(net.sourceforge.plantuml.ugraphic.MutableImage)>($r4);

        $r7 = r0.<net.sourceforge.plantuml.creole.atom.AtomImg: java.lang.String rawFileName>;

        $r8 = virtualinvoke $r3.<net.sourceforge.plantuml.ugraphic.UImage: net.sourceforge.plantuml.ugraphic.UImage withRawFileName(java.lang.String)>($r7);

        $d0 = r0.<net.sourceforge.plantuml.creole.atom.AtomImg: double scale>;

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.ugraphic.UImage: net.sourceforge.plantuml.ugraphic.UImage scale(double)>($d0);

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void draw(net.sourceforge.plantuml.ugraphic.UShape)>($r9);

        $r10 = r0.<net.sourceforge.plantuml.creole.atom.AtomImg: net.sourceforge.plantuml.Url url>;

        if $r10 == null goto label2;

        interfaceinvoke r2.<net.sourceforge.plantuml.ugraphic.UGraphic: void closeUrl()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <net.sourceforge.plantuml.creole.atom.AtomImg: java.lang.String DATA_IMAGE_SVG_BASE64> = "data:image/svg+xml;base64,";

        <net.sourceforge.plantuml.creole.atom.AtomImg: java.lang.String DATA_IMAGE_PNG_BASE64> = "data:image/png;base64,";

        return;
    }
}
