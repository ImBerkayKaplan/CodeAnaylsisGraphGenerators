public final class ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil extends java.lang.Object
{
    private static final int[][] POSITION_DETECTION_PATTERN;
    private static final int[][] HORIZONTAL_SEPARATION_PATTERN;
    private static final int[][] VERTICAL_SEPARATION_PATTERN;
    private static final int[][] POSITION_ADJUSTMENT_PATTERN;
    private static final int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE;
    private static final int[][] TYPE_INFO_COORDINATES;
    private static final int VERSION_INFO_POLY;
    private static final int TYPE_INFO_POLY;
    private static final int TYPE_INFO_MASK_PATTERN;

    private void <init>()
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil r0;

        r0 := @this: ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void clearMatrix(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void clear(byte)>(-1);

        return;
    }

    public static void buildMatrix(ext.plantuml.com.google.zxing.common.BitArray, ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel, int, int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        int i0, i1;
        ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel r1;
        ext.plantuml.com.google.zxing.common.BitArray r2;

        r2 := @parameter0: ext.plantuml.com.google.zxing.common.BitArray;

        r1 := @parameter1: ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r0 := @parameter4: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void clearMatrix(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(r0);

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedBasicPatterns(int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(i0, r0);

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedTypeInfo(ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(r1, i1, r0);

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void maybeEmbedVersionInfo(int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(i0, r0);

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedDataBits(ext.plantuml.com.google.zxing.common.BitArray,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(r2, i1, r0);

        return;
    }

    public static void embedBasicPatterns(int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        int i0;

        i0 := @parameter0: int;

        r0 := @parameter1: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedPositionDetectionPatternsAndSeparators(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(r0);

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedDarkDotAtLeftBottomCorner(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(r0);

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void maybeEmbedPositionAdjustmentPatterns(int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(i0, r0);

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedTimingPatterns(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(r0);

        return;
    }

    public static void embedTypeInfo(ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel, int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        ext.plantuml.com.google.zxing.common.BitArray $r0;
        ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i16;
        boolean z0;
        int[][] $r3, $r5;
        int[] $r4, $r6;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r7;

        r2 := @parameter0: ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

        i0 := @parameter1: int;

        r7 := @parameter2: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $r0 = new ext.plantuml.com.google.zxing.common.BitArray;

        specialinvoke $r0.<ext.plantuml.com.google.zxing.common.BitArray: void <init>()>();

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void makeTypeInfoBits(ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,ext.plantuml.com.google.zxing.common.BitArray)>(r2, i0, $r0);

        i12 = 0;

     label1:
        $i1 = virtualinvoke $r0.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        if i12 >= $i1 goto label4;

        $i2 = virtualinvoke $r0.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        $i3 = $i2 - 1;

        $i4 = $i3 - i12;

        z0 = virtualinvoke $r0.<ext.plantuml.com.google.zxing.common.BitArray: boolean get(int)>($i4);

        $r3 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] TYPE_INFO_COORDINATES>;

        $r4 = $r3[i12];

        i5 = $r4[0];

        $r5 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] TYPE_INFO_COORDINATES>;

        $r6 = $r5[i12];

        i6 = $r6[1];

        virtualinvoke r7.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,boolean)>(i5, i6, z0);

        if i12 >= 8 goto label2;

        $i10 = virtualinvoke r7.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        $i11 = $i10 - i12;

        i13 = $i11 - 1;

        virtualinvoke r7.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,boolean)>(i13, 8, z0);

        goto label3;

     label2:
        $i7 = virtualinvoke r7.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i9 = $i7 - 7;

        $i8 = i12 - 8;

        i16 = $i9 + $i8;

        virtualinvoke r7.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,boolean)>(8, i16, z0);

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        return;
    }

    public static void maybeEmbedVersionInfo(int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        ext.plantuml.com.google.zxing.common.BitArray $r0;
        boolean z0;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r2;

        i0 := @parameter0: int;

        r2 := @parameter1: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        if i0 >= 7 goto label1;

        return;

     label1:
        $r0 = new ext.plantuml.com.google.zxing.common.BitArray;

        specialinvoke $r0.<ext.plantuml.com.google.zxing.common.BitArray: void <init>()>();

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void makeVersionInfoBits(int,ext.plantuml.com.google.zxing.common.BitArray)>(i0, $r0);

        i7 = 17;

        i8 = 0;

     label2:
        if i8 >= 6 goto label5;

        i9 = 0;

     label3:
        if i9 >= 3 goto label4;

        z0 = virtualinvoke $r0.<ext.plantuml.com.google.zxing.common.BitArray: boolean get(int)>(i7);

        i7 = i7 + -1;

        $i1 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i2 = $i1 - 11;

        $i3 = $i2 + i9;

        virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,boolean)>(i8, $i3, z0);

        $i4 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i5 = $i4 - 11;

        $i6 = $i5 + i9;

        virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,boolean)>($i6, i8, z0);

        i9 = i9 + 1;

        goto label3;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        return;
    }

    public static void embedDataBits(ext.plantuml.com.google.zxing.common.BitArray, int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, i8, i9, i11, i12, i13;
        ext.plantuml.com.google.zxing.common.BitArray r1;
        ext.plantuml.com.google.zxing.WriterException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        byte $b6, b10;
        boolean $z0, $z1, z2, $z3;

        r1 := @parameter0: ext.plantuml.com.google.zxing.common.BitArray;

        i8 := @parameter1: int;

        r0 := @parameter2: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        i9 = 0;

        b10 = -1;

        $i0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        i11 = $i0 - 1;

        $i1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        i12 = $i1 - 1;

     label01:
        if i11 <= 0 goto label13;

        if i11 != 6 goto label02;

        i11 = i11 + -1;

     label02:
        if i12 < 0 goto label12;

        $i4 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        if i12 >= $i4 goto label12;

        i13 = 0;

     label03:
        if i13 >= 2 goto label11;

        i5 = i11 - i13;

        $b6 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(i5, i12);

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b6);

        if $z0 != 0 goto label04;

        goto label10;

     label04:
        $i7 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        if i9 >= $i7 goto label05;

        z2 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: boolean get(int)>(i9);

        i9 = i9 + 1;

        goto label06;

     label05:
        z2 = 0;

     label06:
        if i8 == -1 goto label09;

        $z1 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MaskUtil: boolean getDataMaskBit(int,int,int)>(i8, i5, i12);

        if $z1 == 0 goto label09;

        if z2 != 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        z2 = $z3;

     label09:
        virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,boolean)>(i5, i12, z2);

     label10:
        i13 = i13 + 1;

        goto label03;

     label11:
        i12 = i12 + b10;

        goto label02;

     label12:
        b10 = neg b10;

        i12 = i12 + b10;

        i11 = i11 + -2;

        goto label01;

     label13:
        $i2 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        if i9 == $i2 goto label14;

        $r2 = new ext.plantuml.com.google.zxing.WriterException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not all bits consumed: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i3 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label14:
        return;
    }

    public static int findMSBSet(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i0 == 0 goto label2;

        i0 = i0 >>> 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }

    public static int calculateBCHCode(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;

        i7 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int findMSBSet(int)>(i0);

        $i2 = i1 - 1;

        i8 = i7 << $i2;

     label1:
        $i3 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int findMSBSet(int)>(i8);

        if $i3 < i1 goto label2;

        $i4 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int findMSBSet(int)>(i8);

        $i5 = $i4 - i1;

        $i6 = i0 << $i5;

        i8 = i8 ^ $i6;

        goto label1;

     label2:
        return i8;
    }

    public static void makeTypeInfoBits(ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel, int, ext.plantuml.com.google.zxing.common.BitArray) throws ext.plantuml.com.google.zxing.WriterException
    {
        int i0, $i1, $i2, i3, i4, $i5, $i6;
        boolean $z0;
        ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel r0;
        ext.plantuml.com.google.zxing.common.BitArray r1, $r2;
        ext.plantuml.com.google.zxing.WriterException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

        i0 := @parameter1: int;

        r1 := @parameter2: ext.plantuml.com.google.zxing.common.BitArray;

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.QRCode: boolean isValidMaskPattern(int)>(i0);

        if $z0 != 0 goto label1;

        $r9 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r9.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>("Invalid mask pattern");

        throw $r9;

     label1:
        $i1 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.decoder.ErrorCorrectionLevel: int getBits()>();

        $i2 = $i1 << 3;

        i3 = $i2 | i0;

        virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: void appendBits(int,int)>(i3, 5);

        i4 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int calculateBCHCode(int,int)>(i3, 1335);

        virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: void appendBits(int,int)>(i4, 10);

        $r2 = new ext.plantuml.com.google.zxing.common.BitArray;

        specialinvoke $r2.<ext.plantuml.com.google.zxing.common.BitArray: void <init>()>();

        virtualinvoke $r2.<ext.plantuml.com.google.zxing.common.BitArray: void appendBits(int,int)>(21522, 15);

        virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: void xor(ext.plantuml.com.google.zxing.common.BitArray)>($r2);

        $i5 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        if $i5 == 15 goto label2;

        $r4 = new ext.plantuml.com.google.zxing.WriterException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("should not happen but we got: ");

        $i6 = virtualinvoke r1.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        return;
    }

    public static void makeVersionInfoBits(int, ext.plantuml.com.google.zxing.common.BitArray) throws ext.plantuml.com.google.zxing.WriterException
    {
        ext.plantuml.com.google.zxing.common.BitArray r0;
        int i0, i1, $i2, $i3;
        ext.plantuml.com.google.zxing.WriterException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        r0 := @parameter1: ext.plantuml.com.google.zxing.common.BitArray;

        virtualinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: void appendBits(int,int)>(i0, 6);

        i1 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int calculateBCHCode(int,int)>(i0, 7973);

        virtualinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: void appendBits(int,int)>(i1, 12);

        $i2 = virtualinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        if $i2 == 18 goto label1;

        $r1 = new ext.plantuml.com.google.zxing.WriterException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("should not happen but we got: ");

        $i3 = virtualinvoke r0.<ext.plantuml.com.google.zxing.common.BitArray: int getSize()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private static boolean isEmpty(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isValidValue(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == -1 goto label1;

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static void embedTimingPatterns(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        int $i0, $i1, $i2, i3, i8;
        byte $b4, $b5, $b6, $b7;
        boolean $z0, $z1, $z2, $z3;
        ext.plantuml.com.google.zxing.WriterException $r1, $r2;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        i8 = 8;

     label1:
        $i0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        $i1 = $i0 - 8;

        if i8 >= $i1 goto label6;

        $i2 = i8 + 1;

        i3 = $i2 % 2;

        $b4 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(i8, 6);

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isValidValue(int)>($b4);

        if $z0 != 0 goto label2;

        $r2 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r2.<ext.plantuml.com.google.zxing.WriterException: void <init>()>();

        throw $r2;

     label2:
        $b5 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(i8, 6);

        $z1 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b5);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>(i8, 6, i3);

     label3:
        $b6 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(6, i8);

        $z2 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isValidValue(int)>($b6);

        if $z2 != 0 goto label4;

        $r1 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r1.<ext.plantuml.com.google.zxing.WriterException: void <init>()>();

        throw $r1;

     label4:
        $b7 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(6, i8);

        $z3 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b7);

        if $z3 == 0 goto label5;

        virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>(6, i8, i3);

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        return;
    }

    private static void embedDarkDotAtLeftBottomCorner(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r0;
        int $i0, $i1, $i3, $i4;
        byte $b2;
        ext.plantuml.com.google.zxing.WriterException $r1;

        r0 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $i0 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i1 = $i0 - 8;

        $b2 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(8, $i1);

        if $b2 != 0 goto label1;

        $r1 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r1.<ext.plantuml.com.google.zxing.WriterException: void <init>()>();

        throw $r1;

     label1:
        $i3 = virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i4 = $i3 - 8;

        virtualinvoke r0.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>(8, $i4, 1);

        return;
    }

    private static void embedHorizontalSeparationPattern(int, int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        int[][] $r0, $r3, $r5;
        int[] $r1, $r6;
        int $i0, $i1, i2, i3, $i4, $i6, $i7, i8;
        ext.plantuml.com.google.zxing.WriterException $r2, $r7;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r4;
        byte $b5;
        boolean $z0;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        r4 := @parameter2: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $r0 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] HORIZONTAL_SEPARATION_PATTERN>;

        $r1 = $r0[0];

        $i0 = lengthof $r1;

        if $i0 != 8 goto label1;

        $r3 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] HORIZONTAL_SEPARATION_PATTERN>;

        $i1 = lengthof $r3;

        if $i1 == 1 goto label2;

     label1:
        $r2 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r2.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>("Bad horizontal separation pattern");

        throw $r2;

     label2:
        i8 = 0;

     label3:
        if i8 >= 8 goto label5;

        $i4 = i2 + i8;

        $b5 = virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>($i4, i3);

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b5);

        if $z0 != 0 goto label4;

        $r7 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r7.<ext.plantuml.com.google.zxing.WriterException: void <init>()>();

        throw $r7;

     label4:
        $i7 = i2 + i8;

        $r5 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] HORIZONTAL_SEPARATION_PATTERN>;

        $r6 = $r5[0];

        $i6 = $r6[i8];

        virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>($i7, i3, $i6);

        i8 = i8 + 1;

        goto label3;

     label5:
        return;
    }

    private static void embedVerticalSeparationPattern(int, int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        int[][] $r0, $r3, $r5;
        int[] $r1, $r6;
        int $i0, $i1, i2, i3, $i4, $i6, $i7, i8;
        ext.plantuml.com.google.zxing.WriterException $r2, $r7;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r4;
        byte $b5;
        boolean $z0;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        r4 := @parameter2: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $r0 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] VERTICAL_SEPARATION_PATTERN>;

        $r1 = $r0[0];

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        $r3 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] VERTICAL_SEPARATION_PATTERN>;

        $i1 = lengthof $r3;

        if $i1 == 7 goto label2;

     label1:
        $r2 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r2.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>("Bad vertical separation pattern");

        throw $r2;

     label2:
        i8 = 0;

     label3:
        if i8 >= 7 goto label5;

        $i4 = i3 + i8;

        $b5 = virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(i2, $i4);

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b5);

        if $z0 != 0 goto label4;

        $r7 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r7.<ext.plantuml.com.google.zxing.WriterException: void <init>()>();

        throw $r7;

     label4:
        $i7 = i3 + i8;

        $r5 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] VERTICAL_SEPARATION_PATTERN>;

        $r6 = $r5[i8];

        $i6 = $r6[0];

        virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>(i2, $i7, $i6);

        i8 = i8 + 1;

        goto label3;

     label5:
        return;
    }

    private static void embedPositionAdjustmentPattern(int, int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        int[][] $r0, $r3, $r5;
        int[] $r1, $r6;
        int $i0, $i1, i2, i3, $i4, $i5, $i7, $i8, $i9, i10, i11;
        ext.plantuml.com.google.zxing.WriterException $r2, $r7;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r4;
        byte $b6;
        boolean $z0;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        r4 := @parameter2: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $r0 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_ADJUSTMENT_PATTERN>;

        $r1 = $r0[0];

        $i0 = lengthof $r1;

        if $i0 != 5 goto label1;

        $r3 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_ADJUSTMENT_PATTERN>;

        $i1 = lengthof $r3;

        if $i1 == 5 goto label2;

     label1:
        $r2 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r2.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>("Bad position adjustment");

        throw $r2;

     label2:
        i10 = 0;

     label3:
        if i10 >= 5 goto label7;

        i11 = 0;

     label4:
        if i11 >= 5 goto label6;

        $i5 = i2 + i11;

        $i4 = i3 + i10;

        $b6 = virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>($i5, $i4);

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b6);

        if $z0 != 0 goto label5;

        $r7 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r7.<ext.plantuml.com.google.zxing.WriterException: void <init>()>();

        throw $r7;

     label5:
        $i9 = i2 + i11;

        $i8 = i3 + i10;

        $r5 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_ADJUSTMENT_PATTERN>;

        $r6 = $r5[i10];

        $i7 = $r6[i11];

        virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>($i9, $i8, $i7);

        i11 = i11 + 1;

        goto label4;

     label6:
        i10 = i10 + 1;

        goto label3;

     label7:
        return;
    }

    private static void embedPositionDetectionPattern(int, int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        int[][] $r0, $r3, $r5;
        int[] $r1, $r6;
        int $i0, $i1, i2, i3, $i4, $i5, $i7, $i8, $i9, i10, i11;
        ext.plantuml.com.google.zxing.WriterException $r2, $r7;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r4;
        byte $b6;
        boolean $z0;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        r4 := @parameter2: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $r0 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_DETECTION_PATTERN>;

        $r1 = $r0[0];

        $i0 = lengthof $r1;

        if $i0 != 7 goto label1;

        $r3 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_DETECTION_PATTERN>;

        $i1 = lengthof $r3;

        if $i1 == 7 goto label2;

     label1:
        $r2 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r2.<ext.plantuml.com.google.zxing.WriterException: void <init>(java.lang.String)>("Bad position detection pattern");

        throw $r2;

     label2:
        i10 = 0;

     label3:
        if i10 >= 7 goto label7;

        i11 = 0;

     label4:
        if i11 >= 7 goto label6;

        $i5 = i2 + i11;

        $i4 = i3 + i10;

        $b6 = virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>($i5, $i4);

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b6);

        if $z0 != 0 goto label5;

        $r7 = new ext.plantuml.com.google.zxing.WriterException;

        specialinvoke $r7.<ext.plantuml.com.google.zxing.WriterException: void <init>()>();

        throw $r7;

     label5:
        $i9 = i2 + i11;

        $i8 = i3 + i10;

        $r5 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_DETECTION_PATTERN>;

        $r6 = $r5[i10];

        $i7 = $r6[i11];

        virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>($i9, $i8, $i7);

        i11 = i11 + 1;

        goto label4;

     label6:
        i10 = i10 + 1;

        goto label3;

     label7:
        return;
    }

    private static void embedPositionDetectionPatternsAndSeparators(ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        int[][] $r0, $r3, $r5;
        int[] $r1, $r4;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r2;

        r2 := @parameter0: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        $r0 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_DETECTION_PATTERN>;

        $r1 = $r0[0];

        i0 = lengthof $r1;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedPositionDetectionPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(0, 0, r2);

        $i1 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        $i2 = $i1 - i0;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedPositionDetectionPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>($i2, 0, r2);

        $i3 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        $i4 = $i3 - i0;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedPositionDetectionPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(0, $i4, r2);

        $r3 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] HORIZONTAL_SEPARATION_PATTERN>;

        $r4 = $r3[0];

        i5 = lengthof $r4;

        $i6 = i5 - 1;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedHorizontalSeparationPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(0, $i6, r2);

        $i7 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        $i9 = $i7 - i5;

        $i8 = i5 - 1;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedHorizontalSeparationPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>($i9, $i8, r2);

        $i10 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>();

        $i11 = $i10 - i5;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedHorizontalSeparationPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(0, $i11, r2);

        $r5 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] VERTICAL_SEPARATION_PATTERN>;

        i12 = lengthof $r5;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedVerticalSeparationPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(i12, 0, r2);

        $i13 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i14 = $i13 - i12;

        $i15 = $i14 - 1;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedVerticalSeparationPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>($i15, 0, r2);

        $i16 = virtualinvoke r2.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>();

        $i17 = $i16 - i12;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedVerticalSeparationPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>(i12, $i17, r2);

        return;
    }

    private static void maybeEmbedPositionAdjustmentPatterns(int, ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix) throws ext.plantuml.com.google.zxing.WriterException
    {
        int i0, i1, i2, i3, i4, $i6, $i7, i8, i9;
        int[][] $r0, $r2;
        int[] r1, $r3;
        ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix r4;
        byte $b5;
        boolean $z0;

        i0 := @parameter0: int;

        r4 := @parameter1: ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix;

        if i0 >= 2 goto label1;

        return;

     label1:
        i1 = i0 - 1;

        $r0 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE>;

        r1 = $r0[i1];

        $r2 = <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE>;

        $r3 = $r2[i1];

        i2 = lengthof $r3;

        i8 = 0;

     label2:
        if i8 >= i2 goto label7;

        i9 = 0;

     label3:
        if i9 >= i2 goto label6;

        i3 = r1[i8];

        i4 = r1[i9];

        if i4 == -1 goto label5;

        if i3 != -1 goto label4;

        goto label5;

     label4:
        $b5 = virtualinvoke r4.<ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>(i4, i3);

        $z0 = staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: boolean isEmpty(int)>($b5);

        if $z0 == 0 goto label5;

        $i7 = i4 - 2;

        $i6 = i3 - 2;

        staticinvoke <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: void embedPositionAdjustmentPattern(int,int,ext.plantuml.com.google.zxing.qrcode.encoder.ByteMatrix)>($i7, $i6, r4);

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        i8 = i8 + 1;

        goto label2;

     label7:
        return;
    }

    static void <clinit>()
    {
        int[][] $r0, $r8, $r10, $r18, $r24, $r65;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int TYPE_INFO_MASK_PATTERN> = 21522;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int TYPE_INFO_POLY> = 1335;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int VERSION_INFO_POLY> = 7973;

        $r0 = newarray (int[])[7];

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 1;

        $r1[6] = 1;

        $r0[0] = $r1;

        $r2 = newarray (int)[7];

        $r2[0] = 1;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 1;

        $r0[1] = $r2;

        $r3 = newarray (int)[7];

        $r3[0] = 1;

        $r3[1] = 0;

        $r3[2] = 1;

        $r3[3] = 1;

        $r3[4] = 1;

        $r3[5] = 0;

        $r3[6] = 1;

        $r0[2] = $r3;

        $r4 = newarray (int)[7];

        $r4[0] = 1;

        $r4[1] = 0;

        $r4[2] = 1;

        $r4[3] = 1;

        $r4[4] = 1;

        $r4[5] = 0;

        $r4[6] = 1;

        $r0[3] = $r4;

        $r5 = newarray (int)[7];

        $r5[0] = 1;

        $r5[1] = 0;

        $r5[2] = 1;

        $r5[3] = 1;

        $r5[4] = 1;

        $r5[5] = 0;

        $r5[6] = 1;

        $r0[4] = $r5;

        $r6 = newarray (int)[7];

        $r6[0] = 1;

        $r6[1] = 0;

        $r6[2] = 0;

        $r6[3] = 0;

        $r6[4] = 0;

        $r6[5] = 0;

        $r6[6] = 1;

        $r0[5] = $r6;

        $r7 = newarray (int)[7];

        $r7[0] = 1;

        $r7[1] = 1;

        $r7[2] = 1;

        $r7[3] = 1;

        $r7[4] = 1;

        $r7[5] = 1;

        $r7[6] = 1;

        $r0[6] = $r7;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_DETECTION_PATTERN> = $r0;

        $r8 = newarray (int[])[1];

        $r9 = newarray (int)[8];

        $r9[0] = 0;

        $r9[1] = 0;

        $r9[2] = 0;

        $r9[3] = 0;

        $r9[4] = 0;

        $r9[5] = 0;

        $r9[6] = 0;

        $r9[7] = 0;

        $r8[0] = $r9;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] HORIZONTAL_SEPARATION_PATTERN> = $r8;

        $r10 = newarray (int[])[7];

        $r11 = newarray (int)[1];

        $r11[0] = 0;

        $r10[0] = $r11;

        $r12 = newarray (int)[1];

        $r12[0] = 0;

        $r10[1] = $r12;

        $r13 = newarray (int)[1];

        $r13[0] = 0;

        $r10[2] = $r13;

        $r14 = newarray (int)[1];

        $r14[0] = 0;

        $r10[3] = $r14;

        $r15 = newarray (int)[1];

        $r15[0] = 0;

        $r10[4] = $r15;

        $r16 = newarray (int)[1];

        $r16[0] = 0;

        $r10[5] = $r16;

        $r17 = newarray (int)[1];

        $r17[0] = 0;

        $r10[6] = $r17;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] VERTICAL_SEPARATION_PATTERN> = $r10;

        $r18 = newarray (int[])[5];

        $r19 = newarray (int)[5];

        $r19[0] = 1;

        $r19[1] = 1;

        $r19[2] = 1;

        $r19[3] = 1;

        $r19[4] = 1;

        $r18[0] = $r19;

        $r20 = newarray (int)[5];

        $r20[0] = 1;

        $r20[1] = 0;

        $r20[2] = 0;

        $r20[3] = 0;

        $r20[4] = 1;

        $r18[1] = $r20;

        $r21 = newarray (int)[5];

        $r21[0] = 1;

        $r21[1] = 0;

        $r21[2] = 1;

        $r21[3] = 0;

        $r21[4] = 1;

        $r18[2] = $r21;

        $r22 = newarray (int)[5];

        $r22[0] = 1;

        $r22[1] = 0;

        $r22[2] = 0;

        $r22[3] = 0;

        $r22[4] = 1;

        $r18[3] = $r22;

        $r23 = newarray (int)[5];

        $r23[0] = 1;

        $r23[1] = 1;

        $r23[2] = 1;

        $r23[3] = 1;

        $r23[4] = 1;

        $r18[4] = $r23;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_ADJUSTMENT_PATTERN> = $r18;

        $r24 = newarray (int[])[40];

        $r25 = newarray (int)[7];

        $r25[0] = -1;

        $r25[1] = -1;

        $r25[2] = -1;

        $r25[3] = -1;

        $r25[4] = -1;

        $r25[5] = -1;

        $r25[6] = -1;

        $r24[0] = $r25;

        $r26 = newarray (int)[7];

        $r26[0] = 6;

        $r26[1] = 18;

        $r26[2] = -1;

        $r26[3] = -1;

        $r26[4] = -1;

        $r26[5] = -1;

        $r26[6] = -1;

        $r24[1] = $r26;

        $r27 = newarray (int)[7];

        $r27[0] = 6;

        $r27[1] = 22;

        $r27[2] = -1;

        $r27[3] = -1;

        $r27[4] = -1;

        $r27[5] = -1;

        $r27[6] = -1;

        $r24[2] = $r27;

        $r28 = newarray (int)[7];

        $r28[0] = 6;

        $r28[1] = 26;

        $r28[2] = -1;

        $r28[3] = -1;

        $r28[4] = -1;

        $r28[5] = -1;

        $r28[6] = -1;

        $r24[3] = $r28;

        $r29 = newarray (int)[7];

        $r29[0] = 6;

        $r29[1] = 30;

        $r29[2] = -1;

        $r29[3] = -1;

        $r29[4] = -1;

        $r29[5] = -1;

        $r29[6] = -1;

        $r24[4] = $r29;

        $r30 = newarray (int)[7];

        $r30[0] = 6;

        $r30[1] = 34;

        $r30[2] = -1;

        $r30[3] = -1;

        $r30[4] = -1;

        $r30[5] = -1;

        $r30[6] = -1;

        $r24[5] = $r30;

        $r31 = newarray (int)[7];

        $r31[0] = 6;

        $r31[1] = 22;

        $r31[2] = 38;

        $r31[3] = -1;

        $r31[4] = -1;

        $r31[5] = -1;

        $r31[6] = -1;

        $r24[6] = $r31;

        $r32 = newarray (int)[7];

        $r32[0] = 6;

        $r32[1] = 24;

        $r32[2] = 42;

        $r32[3] = -1;

        $r32[4] = -1;

        $r32[5] = -1;

        $r32[6] = -1;

        $r24[7] = $r32;

        $r33 = newarray (int)[7];

        $r33[0] = 6;

        $r33[1] = 26;

        $r33[2] = 46;

        $r33[3] = -1;

        $r33[4] = -1;

        $r33[5] = -1;

        $r33[6] = -1;

        $r24[8] = $r33;

        $r34 = newarray (int)[7];

        $r34[0] = 6;

        $r34[1] = 28;

        $r34[2] = 50;

        $r34[3] = -1;

        $r34[4] = -1;

        $r34[5] = -1;

        $r34[6] = -1;

        $r24[9] = $r34;

        $r35 = newarray (int)[7];

        $r35[0] = 6;

        $r35[1] = 30;

        $r35[2] = 54;

        $r35[3] = -1;

        $r35[4] = -1;

        $r35[5] = -1;

        $r35[6] = -1;

        $r24[10] = $r35;

        $r36 = newarray (int)[7];

        $r36[0] = 6;

        $r36[1] = 32;

        $r36[2] = 58;

        $r36[3] = -1;

        $r36[4] = -1;

        $r36[5] = -1;

        $r36[6] = -1;

        $r24[11] = $r36;

        $r37 = newarray (int)[7];

        $r37[0] = 6;

        $r37[1] = 34;

        $r37[2] = 62;

        $r37[3] = -1;

        $r37[4] = -1;

        $r37[5] = -1;

        $r37[6] = -1;

        $r24[12] = $r37;

        $r38 = newarray (int)[7];

        $r38[0] = 6;

        $r38[1] = 26;

        $r38[2] = 46;

        $r38[3] = 66;

        $r38[4] = -1;

        $r38[5] = -1;

        $r38[6] = -1;

        $r24[13] = $r38;

        $r39 = newarray (int)[7];

        $r39[0] = 6;

        $r39[1] = 26;

        $r39[2] = 48;

        $r39[3] = 70;

        $r39[4] = -1;

        $r39[5] = -1;

        $r39[6] = -1;

        $r24[14] = $r39;

        $r40 = newarray (int)[7];

        $r40[0] = 6;

        $r40[1] = 26;

        $r40[2] = 50;

        $r40[3] = 74;

        $r40[4] = -1;

        $r40[5] = -1;

        $r40[6] = -1;

        $r24[15] = $r40;

        $r41 = newarray (int)[7];

        $r41[0] = 6;

        $r41[1] = 30;

        $r41[2] = 54;

        $r41[3] = 78;

        $r41[4] = -1;

        $r41[5] = -1;

        $r41[6] = -1;

        $r24[16] = $r41;

        $r42 = newarray (int)[7];

        $r42[0] = 6;

        $r42[1] = 30;

        $r42[2] = 56;

        $r42[3] = 82;

        $r42[4] = -1;

        $r42[5] = -1;

        $r42[6] = -1;

        $r24[17] = $r42;

        $r43 = newarray (int)[7];

        $r43[0] = 6;

        $r43[1] = 30;

        $r43[2] = 58;

        $r43[3] = 86;

        $r43[4] = -1;

        $r43[5] = -1;

        $r43[6] = -1;

        $r24[18] = $r43;

        $r44 = newarray (int)[7];

        $r44[0] = 6;

        $r44[1] = 34;

        $r44[2] = 62;

        $r44[3] = 90;

        $r44[4] = -1;

        $r44[5] = -1;

        $r44[6] = -1;

        $r24[19] = $r44;

        $r45 = newarray (int)[7];

        $r45[0] = 6;

        $r45[1] = 28;

        $r45[2] = 50;

        $r45[3] = 72;

        $r45[4] = 94;

        $r45[5] = -1;

        $r45[6] = -1;

        $r24[20] = $r45;

        $r46 = newarray (int)[7];

        $r46[0] = 6;

        $r46[1] = 26;

        $r46[2] = 50;

        $r46[3] = 74;

        $r46[4] = 98;

        $r46[5] = -1;

        $r46[6] = -1;

        $r24[21] = $r46;

        $r47 = newarray (int)[7];

        $r47[0] = 6;

        $r47[1] = 30;

        $r47[2] = 54;

        $r47[3] = 78;

        $r47[4] = 102;

        $r47[5] = -1;

        $r47[6] = -1;

        $r24[22] = $r47;

        $r48 = newarray (int)[7];

        $r48[0] = 6;

        $r48[1] = 28;

        $r48[2] = 54;

        $r48[3] = 80;

        $r48[4] = 106;

        $r48[5] = -1;

        $r48[6] = -1;

        $r24[23] = $r48;

        $r49 = newarray (int)[7];

        $r49[0] = 6;

        $r49[1] = 32;

        $r49[2] = 58;

        $r49[3] = 84;

        $r49[4] = 110;

        $r49[5] = -1;

        $r49[6] = -1;

        $r24[24] = $r49;

        $r50 = newarray (int)[7];

        $r50[0] = 6;

        $r50[1] = 30;

        $r50[2] = 58;

        $r50[3] = 86;

        $r50[4] = 114;

        $r50[5] = -1;

        $r50[6] = -1;

        $r24[25] = $r50;

        $r51 = newarray (int)[7];

        $r51[0] = 6;

        $r51[1] = 34;

        $r51[2] = 62;

        $r51[3] = 90;

        $r51[4] = 118;

        $r51[5] = -1;

        $r51[6] = -1;

        $r24[26] = $r51;

        $r52 = newarray (int)[7];

        $r52[0] = 6;

        $r52[1] = 26;

        $r52[2] = 50;

        $r52[3] = 74;

        $r52[4] = 98;

        $r52[5] = 122;

        $r52[6] = -1;

        $r24[27] = $r52;

        $r53 = newarray (int)[7];

        $r53[0] = 6;

        $r53[1] = 30;

        $r53[2] = 54;

        $r53[3] = 78;

        $r53[4] = 102;

        $r53[5] = 126;

        $r53[6] = -1;

        $r24[28] = $r53;

        $r54 = newarray (int)[7];

        $r54[0] = 6;

        $r54[1] = 26;

        $r54[2] = 52;

        $r54[3] = 78;

        $r54[4] = 104;

        $r54[5] = 130;

        $r54[6] = -1;

        $r24[29] = $r54;

        $r55 = newarray (int)[7];

        $r55[0] = 6;

        $r55[1] = 30;

        $r55[2] = 56;

        $r55[3] = 82;

        $r55[4] = 108;

        $r55[5] = 134;

        $r55[6] = -1;

        $r24[30] = $r55;

        $r56 = newarray (int)[7];

        $r56[0] = 6;

        $r56[1] = 34;

        $r56[2] = 60;

        $r56[3] = 86;

        $r56[4] = 112;

        $r56[5] = 138;

        $r56[6] = -1;

        $r24[31] = $r56;

        $r57 = newarray (int)[7];

        $r57[0] = 6;

        $r57[1] = 30;

        $r57[2] = 58;

        $r57[3] = 86;

        $r57[4] = 114;

        $r57[5] = 142;

        $r57[6] = -1;

        $r24[32] = $r57;

        $r58 = newarray (int)[7];

        $r58[0] = 6;

        $r58[1] = 34;

        $r58[2] = 62;

        $r58[3] = 90;

        $r58[4] = 118;

        $r58[5] = 146;

        $r58[6] = -1;

        $r24[33] = $r58;

        $r59 = newarray (int)[7];

        $r59[0] = 6;

        $r59[1] = 30;

        $r59[2] = 54;

        $r59[3] = 78;

        $r59[4] = 102;

        $r59[5] = 126;

        $r59[6] = 150;

        $r24[34] = $r59;

        $r60 = newarray (int)[7];

        $r60[0] = 6;

        $r60[1] = 24;

        $r60[2] = 50;

        $r60[3] = 76;

        $r60[4] = 102;

        $r60[5] = 128;

        $r60[6] = 154;

        $r24[35] = $r60;

        $r61 = newarray (int)[7];

        $r61[0] = 6;

        $r61[1] = 28;

        $r61[2] = 54;

        $r61[3] = 80;

        $r61[4] = 106;

        $r61[5] = 132;

        $r61[6] = 158;

        $r24[36] = $r61;

        $r62 = newarray (int)[7];

        $r62[0] = 6;

        $r62[1] = 32;

        $r62[2] = 58;

        $r62[3] = 84;

        $r62[4] = 110;

        $r62[5] = 136;

        $r62[6] = 162;

        $r24[37] = $r62;

        $r63 = newarray (int)[7];

        $r63[0] = 6;

        $r63[1] = 26;

        $r63[2] = 54;

        $r63[3] = 82;

        $r63[4] = 110;

        $r63[5] = 138;

        $r63[6] = 166;

        $r24[38] = $r63;

        $r64 = newarray (int)[7];

        $r64[0] = 6;

        $r64[1] = 30;

        $r64[2] = 58;

        $r64[3] = 86;

        $r64[4] = 114;

        $r64[5] = 142;

        $r64[6] = 170;

        $r24[39] = $r64;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE> = $r24;

        $r65 = newarray (int[])[15];

        $r66 = newarray (int)[2];

        $r66[0] = 8;

        $r66[1] = 0;

        $r65[0] = $r66;

        $r67 = newarray (int)[2];

        $r67[0] = 8;

        $r67[1] = 1;

        $r65[1] = $r67;

        $r68 = newarray (int)[2];

        $r68[0] = 8;

        $r68[1] = 2;

        $r65[2] = $r68;

        $r69 = newarray (int)[2];

        $r69[0] = 8;

        $r69[1] = 3;

        $r65[3] = $r69;

        $r70 = newarray (int)[2];

        $r70[0] = 8;

        $r70[1] = 4;

        $r65[4] = $r70;

        $r71 = newarray (int)[2];

        $r71[0] = 8;

        $r71[1] = 5;

        $r65[5] = $r71;

        $r72 = newarray (int)[2];

        $r72[0] = 8;

        $r72[1] = 7;

        $r65[6] = $r72;

        $r73 = newarray (int)[2];

        $r73[0] = 8;

        $r73[1] = 8;

        $r65[7] = $r73;

        $r74 = newarray (int)[2];

        $r74[0] = 7;

        $r74[1] = 8;

        $r65[8] = $r74;

        $r75 = newarray (int)[2];

        $r75[0] = 5;

        $r75[1] = 8;

        $r65[9] = $r75;

        $r76 = newarray (int)[2];

        $r76[0] = 4;

        $r76[1] = 8;

        $r65[10] = $r76;

        $r77 = newarray (int)[2];

        $r77[0] = 3;

        $r77[1] = 8;

        $r65[11] = $r77;

        $r78 = newarray (int)[2];

        $r78[0] = 2;

        $r78[1] = 8;

        $r65[12] = $r78;

        $r79 = newarray (int)[2];

        $r79[0] = 1;

        $r79[1] = 8;

        $r65[13] = $r79;

        $r80 = newarray (int)[2];

        $r80[0] = 0;

        $r80[1] = 8;

        $r65[14] = $r80;

        <ext.plantuml.com.google.zxing.qrcode.encoder.MatrixUtil: int[][] TYPE_INFO_COORDINATES> = $r65;

        return;
    }
}
