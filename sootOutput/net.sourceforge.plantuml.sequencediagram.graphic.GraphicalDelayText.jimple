class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText extends net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement
{
    private final net.sourceforge.plantuml.skin.Component compText;
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox p1;
    private final net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox p2;

    public void <init>(double, net.sourceforge.plantuml.skin.Component, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox, net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText r0;
        double d0;
        net.sourceforge.plantuml.skin.Component r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox r2, r3;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        d0 := @parameter0: double;

        r1 := @parameter1: net.sourceforge.plantuml.skin.Component;

        r2 := @parameter2: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        r3 := @parameter3: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox;

        specialinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement: void <init>(double)>(d0);

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.skin.Component compText> = r1;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox p1> = r2;

        r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox p2> = r3;

        return;
    }

    protected void drawInternalU(net.sourceforge.plantuml.ugraphic.UGraphic, double, net.sourceforge.plantuml.skin.Context2D)
    {
        net.sourceforge.plantuml.graphic.StringBounder r0;
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText r1;
        net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox $r2, $r3;
        double d0, d1, $d2, d3, d4, $d5, $d6, $d7, $d8, d9;
        net.sourceforge.plantuml.skin.Component $r4, $r7, $r10;
        net.sourceforge.plantuml.ugraphic.UTranslate $r5;
        net.sourceforge.plantuml.Dimension2DDouble $r6;
        net.sourceforge.plantuml.skin.Area $r9;
        net.sourceforge.plantuml.skin.Context2D r11;
        net.sourceforge.plantuml.ugraphic.UGraphic r12, r13;

        r1 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        r12 := @parameter0: net.sourceforge.plantuml.ugraphic.UGraphic;

        d9 := @parameter1: double;

        r11 := @parameter2: net.sourceforge.plantuml.skin.Context2D;

        r0 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.graphic.StringBounder getStringBounder()>();

        $r2 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox p1>;

        d0 = virtualinvoke $r2.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r3 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox p2>;

        d1 = virtualinvoke $r3.<net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox: double getCenterX(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $d2 = d0 + d1;

        d3 = $d2 / 2.0;

        $r4 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.skin.Component compText>;

        d4 = interfaceinvoke $r4.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        $r5 = new net.sourceforge.plantuml.ugraphic.UTranslate;

        $d5 = d4 / 2.0;

        $d6 = d3 - $d5;

        $d7 = virtualinvoke r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getStartingY()>();

        specialinvoke $r5.<net.sourceforge.plantuml.ugraphic.UTranslate: void <init>(double,double)>($d6, $d7);

        r13 = interfaceinvoke r12.<net.sourceforge.plantuml.ugraphic.UGraphic: net.sourceforge.plantuml.ugraphic.UGraphic apply(net.sourceforge.plantuml.ugraphic.UChange)>($r5);

        $r6 = new net.sourceforge.plantuml.Dimension2DDouble;

        $r7 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.skin.Component compText>;

        $d8 = interfaceinvoke $r7.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r0);

        specialinvoke $r6.<net.sourceforge.plantuml.Dimension2DDouble: void <init>(double,double)>(d4, $d8);

        $r10 = r1.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.skin.Component compText>;

        $r9 = new net.sourceforge.plantuml.skin.Area;

        specialinvoke $r9.<net.sourceforge.plantuml.skin.Area: void <init>(net.sourceforge.plantuml.awt.geom.Dimension2D)>($r6);

        interfaceinvoke $r10.<net.sourceforge.plantuml.skin.Component: void drawU(net.sourceforge.plantuml.ugraphic.UGraphic,net.sourceforge.plantuml.skin.Area,net.sourceforge.plantuml.skin.Context2D)>(r13, $r9, r11);

        return;
    }

    public double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.skin.Component compText>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;
        double $d0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.skin.Component compText>;

        $d0 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredWidth(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        return $d0;
    }

    public double getStartingX(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText r0;
        net.sourceforge.plantuml.graphic.StringBounder r1;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        return 0.0;
    }

    public double getEndingY(net.sourceforge.plantuml.graphic.StringBounder)
    {
        net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText r0;
        double $d0, $d1, $d2;
        net.sourceforge.plantuml.graphic.StringBounder r1;
        net.sourceforge.plantuml.skin.Component $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText;

        r1 := @parameter0: net.sourceforge.plantuml.graphic.StringBounder;

        $d0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: double getStartingY()>();

        $r2 = r0.<net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText: net.sourceforge.plantuml.skin.Component compText>;

        $d1 = interfaceinvoke $r2.<net.sourceforge.plantuml.skin.Component: double getPreferredHeight(net.sourceforge.plantuml.graphic.StringBounder)>(r1);

        $d2 = $d0 + $d1;

        return $d2;
    }
}
