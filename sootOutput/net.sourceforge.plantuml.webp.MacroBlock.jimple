public class net.sourceforge.plantuml.webp.MacroBlock extends java.lang.Object
{
    private int filterLevel;
    private boolean keepDebugInfo;
    private int segmentId;
    private int skipCoeff;
    private boolean skipInnerLoopFilter;
    net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks;
    private int uVFilterLevel;
    private int uvMode;
    net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks;
    private int x;
    private int y;
    net.sourceforge.plantuml.webp.SubBlock y2SubBlock;
    private int yMode;
    net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks;

    void <init>(int, int, boolean)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15;
        boolean z0;
        net.sourceforge.plantuml.webp.SubBlock[][] $r1, $r2, $r3, $r6, $r10, $r12, $r14, $r18, $r20, $r22, $r26, $r28;
        net.sourceforge.plantuml.webp.SubBlock $r4, $r7, $r15, $r23, r30, r31, r32, r33, r34, r35;
        net.sourceforge.plantuml.webp.SubBlock$PLANE $r5, $r8, $r16, $r24;
        net.sourceforge.plantuml.webp.SubBlock[] $r9, $r11, $r13, $r17, $r19, $r21, $r25, $r27, $r29;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean keepDebugInfo> = 0;

        $i1 = i0 - 1;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int x> = $i1;

        $i3 = i2 - 1;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int y> = $i3;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean keepDebugInfo> = z0;

        $r1 = newmultiarray (net.sourceforge.plantuml.webp.SubBlock)[4][4];

        r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks> = $r1;

        $r2 = newmultiarray (net.sourceforge.plantuml.webp.SubBlock)[2][2];

        r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks> = $r2;

        $r3 = newmultiarray (net.sourceforge.plantuml.webp.SubBlock)[2][2];

        r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks> = $r3;

        i10 = 0;

     label01:
        if i10 >= 4 goto label06;

        i11 = 0;

     label02:
        if i11 >= 4 goto label05;

        r30 = null;

        r31 = null;

        if i11 <= 0 goto label03;

        $r28 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $i9 = i11 - 1;

        $r29 = $r28[$i9];

        r30 = $r29[i10];

     label03:
        if i10 <= 0 goto label04;

        $r26 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r27 = $r26[i11];

        $i8 = i10 - 1;

        r31 = $r27[$i8];

     label04:
        $r22 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r25 = $r22[i11];

        $r23 = new net.sourceforge.plantuml.webp.SubBlock;

        $r24 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        specialinvoke $r23.<net.sourceforge.plantuml.webp.SubBlock: void <init>(net.sourceforge.plantuml.webp.MacroBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock$PLANE)>(r0, r31, r30, $r24);

        $r25[i10] = $r23;

        i11 = i11 + 1;

        goto label02;

     label05:
        i10 = i10 + 1;

        goto label01;

     label06:
        i12 = 0;

     label07:
        if i12 >= 2 goto label12;

        i13 = 0;

     label08:
        if i13 >= 2 goto label11;

        r32 = null;

        r33 = null;

        if i13 <= 0 goto label09;

        $r20 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $i7 = i13 - 1;

        $r21 = $r20[$i7];

        r32 = $r21[i12];

     label09:
        if i12 <= 0 goto label10;

        $r18 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r19 = $r18[i13];

        $i6 = i12 - 1;

        r33 = $r19[$i6];

     label10:
        $r14 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r17 = $r14[i13];

        $r15 = new net.sourceforge.plantuml.webp.SubBlock;

        $r16 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        specialinvoke $r15.<net.sourceforge.plantuml.webp.SubBlock: void <init>(net.sourceforge.plantuml.webp.MacroBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock$PLANE)>(r0, r33, r32, $r16);

        $r17[i12] = $r15;

        i13 = i13 + 1;

        goto label08;

     label11:
        i12 = i12 + 1;

        goto label07;

     label12:
        i14 = 0;

     label13:
        if i14 >= 2 goto label18;

        i15 = 0;

     label14:
        if i15 >= 2 goto label17;

        r34 = null;

        r35 = null;

        if i15 <= 0 goto label15;

        $r12 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $i5 = i15 - 1;

        $r13 = $r12[$i5];

        r34 = $r13[i14];

     label15:
        if i14 <= 0 goto label16;

        $r10 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r11 = $r10[i15];

        $i4 = i14 - 1;

        r35 = $r11[$i4];

     label16:
        $r6 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r9 = $r6[i15];

        $r7 = new net.sourceforge.plantuml.webp.SubBlock;

        $r8 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        specialinvoke $r7.<net.sourceforge.plantuml.webp.SubBlock: void <init>(net.sourceforge.plantuml.webp.MacroBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock$PLANE)>(r0, r35, r34, $r8);

        $r9[i14] = $r7;

        i15 = i15 + 1;

        goto label14;

     label17:
        i14 = i14 + 1;

        goto label13;

     label18:
        $r4 = new net.sourceforge.plantuml.webp.SubBlock;

        $r5 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y2>;

        specialinvoke $r4.<net.sourceforge.plantuml.webp.SubBlock: void <init>(net.sourceforge.plantuml.webp.MacroBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock$PLANE)>(r0, null, null, $r5);

        r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock y2SubBlock> = $r4;

        return;
    }

    public void decodeMacroBlock(net.sourceforge.plantuml.webp.VP8Frame) throws java.io.IOException
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0, $i1, $i2;
        net.sourceforge.plantuml.webp.VP8Frame r2;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r2 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: int getSkipCoeff()>();

        if $i0 <= 0 goto label1;

        $i2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: int getYMode()>();

        if $i2 == 4 goto label3;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter> = 1;

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: int getYMode()>();

        if $i1 == 4 goto label2;

        specialinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: void decodeMacroBlockTokens(net.sourceforge.plantuml.webp.VP8Frame,boolean)>(r2, 1);

        goto label3;

     label2:
        specialinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: void decodeMacroBlockTokens(net.sourceforge.plantuml.webp.VP8Frame,boolean)>(r2, 0);

     label3:
        return;
    }

    private void decodeMacroBlockTokens(net.sourceforge.plantuml.webp.VP8Frame, boolean) throws java.io.IOException
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        net.sourceforge.plantuml.webp.VP8Frame r1;
        net.sourceforge.plantuml.webp.SubBlock$PLANE $r2, $r3, $r4, $r6;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r1 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        z0 := @parameter1: boolean;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter> = 0;

        if z0 == 0 goto label1;

        $z11 = r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter>;

        $r6 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y2>;

        $z12 = specialinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean decodePlaneTokens(net.sourceforge.plantuml.webp.VP8Frame,int,net.sourceforge.plantuml.webp.SubBlock$PLANE,boolean)>(r1, 1, $r6, 0);

        $z13 = $z11 | $z12;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter> = $z13;

     label1:
        $z1 = r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter>;

        $r2 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        $z2 = specialinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean decodePlaneTokens(net.sourceforge.plantuml.webp.VP8Frame,int,net.sourceforge.plantuml.webp.SubBlock$PLANE,boolean)>(r1, 4, $r2, z0);

        $z3 = $z1 | $z2;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter> = $z3;

        $z4 = r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter>;

        $r3 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        $z5 = specialinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean decodePlaneTokens(net.sourceforge.plantuml.webp.VP8Frame,int,net.sourceforge.plantuml.webp.SubBlock$PLANE,boolean)>(r1, 2, $r3, 0);

        $z6 = $z4 | $z5;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter> = $z6;

        $z7 = r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter>;

        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        $z8 = specialinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean decodePlaneTokens(net.sourceforge.plantuml.webp.VP8Frame,int,net.sourceforge.plantuml.webp.SubBlock$PLANE,boolean)>(r1, 2, $r4, 0);

        $z9 = $z7 | $z8;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter> = $z9;

        $z10 = r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter>;

        if $z10 != 0 goto label2;

        $z14 = 1;

        goto label3;

     label2:
        $z14 = 0;

     label3:
        r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter> = $z14;

        return;
    }

    private boolean decodePlaneTokens(net.sourceforge.plantuml.webp.VP8Frame, int, net.sourceforge.plantuml.webp.SubBlock$PLANE, boolean) throws java.io.IOException
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0, $i1, i2, i3, i4, i5, i7, i8;
        net.sourceforge.plantuml.webp.SubBlock$PLANE r2;
        net.sourceforge.plantuml.webp.SubBlock r3, r5, r6;
        net.sourceforge.plantuml.webp.VP8Frame r4;
        boolean $z0, $z1, z2, $z3, z4;
        net.sourceforge.plantuml.webp.BoolDecoder $r7;
        int[][][][] $r8;
        java.lang.Boolean $r9;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r4 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        i0 := @parameter1: int;

        r2 := @parameter2: net.sourceforge.plantuml.webp.SubBlock$PLANE;

        z2 := @parameter3: boolean;

        z4 = 0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        i4 = 0;

        i5 = 0;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE,int,int)>(r2, i3, i2);

        r5 = virtualinvoke r4.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.SubBlock getLeftSubBlock(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock$PLANE)>(r3, r2);

        r6 = virtualinvoke r4.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.SubBlock getAboveSubBlock(net.sourceforge.plantuml.webp.SubBlock,net.sourceforge.plantuml.webp.SubBlock$PLANE)>(r3, r2);

        $z0 = virtualinvoke r5.<net.sourceforge.plantuml.webp.SubBlock: boolean hasNoZeroToken()>();

        if $z0 == 0 goto label3;

        i4 = 1;

     label3:
        i7 = 0 + i4;

        $z1 = virtualinvoke r6.<net.sourceforge.plantuml.webp.SubBlock: boolean hasNoZeroToken()>();

        if $z1 == 0 goto label4;

        i5 = 1;

     label4:
        i8 = i7 + i5;

        $r7 = virtualinvoke r4.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.BoolDecoder getTokenBoolDecoder()>();

        $r8 = virtualinvoke r4.<net.sourceforge.plantuml.webp.VP8Frame: int[][][][] getCoefProbs()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $i1 = staticinvoke <net.sourceforge.plantuml.webp.SubBlock: int planeToType(net.sourceforge.plantuml.webp.SubBlock$PLANE,java.lang.Boolean)>(r2, $r9);

        virtualinvoke r3.<net.sourceforge.plantuml.webp.SubBlock: void decodeSubBlock(net.sourceforge.plantuml.webp.BoolDecoder,int[][][][],int,int,boolean)>($r7, $r8, i8, $i1, z2);

        $z3 = virtualinvoke r3.<net.sourceforge.plantuml.webp.SubBlock: boolean hasNoZeroToken()>();

        z4 = z4 | $z3;

        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return z4;
    }

    public void dequantMacroBlock(net.sourceforge.plantuml.webp.VP8Frame)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        net.sourceforge.plantuml.webp.VP8Frame r2;
        net.sourceforge.plantuml.webp.SegmentQuants $r3, $r6;
        net.sourceforge.plantuml.webp.SegmentQuant[] $r4, $r7;
        net.sourceforge.plantuml.webp.SegmentQuant $r5, $r8;
        int[] r9, $r10, $r13, $r15;
        int[][] $r11, $r12;
        java.lang.Integer $r14;
        net.sourceforge.plantuml.webp.SubBlock r16, r17, r18, r19, r20, r21, r22;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r2 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: int getYMode()>();

        if $i0 == 4 goto label11;

        r16 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getY2SubBlock()>();

        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.SegmentQuants getSegmentQuants()>();

        $r4 = virtualinvoke $r3.<net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.SegmentQuant[] getSegQuants()>();

        $i1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: int getSegmentId()>();

        $r5 = $r4[$i1];

        i8 = virtualinvoke $r5.<net.sourceforge.plantuml.webp.SegmentQuant: int getY2ac_delta_q()>();

        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.SegmentQuants getSegmentQuants()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.webp.SegmentQuants: net.sourceforge.plantuml.webp.SegmentQuant[] getSegQuants()>();

        $i2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: int getSegmentId()>();

        $r8 = $r7[$i2];

        i9 = virtualinvoke $r8.<net.sourceforge.plantuml.webp.SegmentQuant: int getY2dc()>();

        r9 = newarray (int)[16];

        $r10 = virtualinvoke r16.<net.sourceforge.plantuml.webp.SubBlock: int[] getTokens()>();

        $i3 = $r10[0];

        $i4 = $i3 * i9;

        r9[0] = $i4;

        i10 = 1;

     label01:
        if i10 >= 16 goto label02;

        $r15 = virtualinvoke r16.<net.sourceforge.plantuml.webp.SubBlock: int[] getTokens()>();

        $i6 = $r15[i10];

        $i7 = $i6 * i8;

        r9[i10] = $i7;

        i10 = i10 + 1;

        goto label01;

     label02:
        $r11 = staticinvoke <net.sourceforge.plantuml.webp.IDCT: int[][] iwalsh4x4(int[])>(r9);

        virtualinvoke r16.<net.sourceforge.plantuml.webp.SubBlock: void setDiff(int[][])>($r11);

        i11 = 0;

     label03:
        if i11 >= 4 goto label06;

        i12 = 0;

     label04:
        if i12 >= 4 goto label05;

        r17 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(i12, i11);

        $r12 = virtualinvoke r16.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDiff()>();

        $r13 = $r12[i12];

        $i5 = $r13[i11];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke r17.<net.sourceforge.plantuml.webp.SubBlock: void dequantSubBlock(net.sourceforge.plantuml.webp.VP8Frame,java.lang.Integer)>(r2, $r14);

        i12 = i12 + 1;

        goto label04;

     label05:
        i11 = i11 + 1;

        goto label03;

     label06:
        virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: void predictY(net.sourceforge.plantuml.webp.VP8Frame)>(r2);

        virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: void predictUV(net.sourceforge.plantuml.webp.VP8Frame)>(r2);

        i13 = 0;

     label07:
        if i13 >= 2 goto label10;

        i14 = 0;

     label08:
        if i14 >= 2 goto label09;

        r18 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(i14, i13);

        virtualinvoke r18.<net.sourceforge.plantuml.webp.SubBlock: void dequantSubBlock(net.sourceforge.plantuml.webp.VP8Frame,java.lang.Integer)>(r2, null);

        r19 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(i13, i14);

        virtualinvoke r19.<net.sourceforge.plantuml.webp.SubBlock: void dequantSubBlock(net.sourceforge.plantuml.webp.VP8Frame,java.lang.Integer)>(r2, null);

        i14 = i14 + 1;

        goto label08;

     label09:
        i13 = i13 + 1;

        goto label07;

     label10:
        virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: void recon_mb()>();

        goto label23;

     label11:
        i15 = 0;

     label12:
        if i15 >= 4 goto label15;

        i16 = 0;

     label13:
        if i16 >= 4 goto label14;

        r20 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(i16, i15);

        virtualinvoke r20.<net.sourceforge.plantuml.webp.SubBlock: void dequantSubBlock(net.sourceforge.plantuml.webp.VP8Frame,java.lang.Integer)>(r2, null);

        virtualinvoke r20.<net.sourceforge.plantuml.webp.SubBlock: void predict(net.sourceforge.plantuml.webp.VP8Frame)>(r2);

        virtualinvoke r20.<net.sourceforge.plantuml.webp.SubBlock: void reconstruct()>();

        i16 = i16 + 1;

        goto label13;

     label14:
        i15 = i15 + 1;

        goto label12;

     label15:
        virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: void predictUV(net.sourceforge.plantuml.webp.VP8Frame)>(r2);

        i17 = 0;

     label16:
        if i17 >= 2 goto label19;

        i18 = 0;

     label17:
        if i18 >= 2 goto label18;

        r21 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(i18, i17);

        virtualinvoke r21.<net.sourceforge.plantuml.webp.SubBlock: void dequantSubBlock(net.sourceforge.plantuml.webp.VP8Frame,java.lang.Integer)>(r2, null);

        virtualinvoke r21.<net.sourceforge.plantuml.webp.SubBlock: void reconstruct()>();

        i18 = i18 + 1;

        goto label17;

     label18:
        i17 = i17 + 1;

        goto label16;

     label19:
        i19 = 0;

     label20:
        if i19 >= 2 goto label23;

        i20 = 0;

     label21:
        if i20 >= 2 goto label22;

        r22 = virtualinvoke r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(i20, i19);

        virtualinvoke r22.<net.sourceforge.plantuml.webp.SubBlock: void dequantSubBlock(net.sourceforge.plantuml.webp.VP8Frame,java.lang.Integer)>(r2, null);

        virtualinvoke r22.<net.sourceforge.plantuml.webp.SubBlock: void reconstruct()>();

        i20 = i20 + 1;

        goto label21;

     label22:
        i19 = i19 + 1;

        goto label20;

     label23:
        return;
    }

    public void drawDebug()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        net.sourceforge.plantuml.webp.SubBlock[][] $r1, $r3;
        net.sourceforge.plantuml.webp.SubBlock[] $r2, $r4;
        int i0, i1;
        net.sourceforge.plantuml.webp.SubBlock r5, r6;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 = 0;

     label1:
        if i0 >= 4 goto label4;

        i1 = 0;

     label2:
        if i1 >= 4 goto label3;

        $r1 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r2 = $r1[i1];

        r5 = $r2[0];

        virtualinvoke r5.<net.sourceforge.plantuml.webp.SubBlock: void drawDebugH()>();

        $r3 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r4 = $r3[0];

        r6 = $r4[i0];

        virtualinvoke r6.<net.sourceforge.plantuml.webp.SubBlock: void drawDebugV()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    public net.sourceforge.plantuml.webp.SubBlock getBottomSubBlock(int, net.sourceforge.plantuml.webp.SubBlock$PLANE)
    {
        net.sourceforge.plantuml.webp.SubBlock$PLANE r0, $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.webp.MacroBlock r5;
        net.sourceforge.plantuml.webp.SubBlock $r6, $r9, $r12, $r15;
        int i0;
        net.sourceforge.plantuml.webp.SubBlock[][] $r7, $r10, $r13;
        net.sourceforge.plantuml.webp.SubBlock[] $r8, $r11, $r14;

        r5 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0 := @parameter1: net.sourceforge.plantuml.webp.SubBlock$PLANE;

        $r1 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        if r0 != $r1 goto label1;

        $r13 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r14 = $r13[i0];

        $r15 = $r14[3];

        return $r15;

     label1:
        $r2 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        if r0 != $r2 goto label2;

        $r10 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r11 = $r10[i0];

        $r12 = $r11[1];

        return $r12;

     label2:
        $r3 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        if r0 != $r3 goto label3;

        $r7 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r8 = $r7[i0];

        $r9 = $r8[1];

        return $r9;

     label3:
        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y2>;

        if r0 != $r4 goto label4;

        $r6 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock y2SubBlock>;

        return $r6;

     label4:
        return null;
    }

    public java.lang.String getDebugString()
    {
        java.lang.String $r0, $r5, $r10, r29, r30, r31, r32, r33, r34;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        net.sourceforge.plantuml.webp.MacroBlock r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r4 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" YMode: ");

        $i0 = r4.<net.sourceforge.plantuml.webp.MacroBlock: int yMode>;

        $r5 = staticinvoke <net.sourceforge.plantuml.webp.Globals: java.lang.String getModeAsString(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r29 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n UVMode: ");

        $i1 = r4.<net.sourceforge.plantuml.webp.MacroBlock: int uvMode>;

        $r10 = staticinvoke <net.sourceforge.plantuml.webp.Globals: java.lang.String getModeAsString(int)>($i1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r30 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n SegmentID: ");

        $i2 = r4.<net.sourceforge.plantuml.webp.MacroBlock: int segmentId>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r31 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n Filter Level: ");

        $i3 = r4.<net.sourceforge.plantuml.webp.MacroBlock: int filterLevel>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r32 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n UV Filter Level: ");

        $i4 = r4.<net.sourceforge.plantuml.webp.MacroBlock: int uVFilterLevel>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        r33 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n Skip Coeff: ");

        $i5 = r4.<net.sourceforge.plantuml.webp.MacroBlock: int skipCoeff>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        return r34;
    }

    public int getFilterLevel()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int filterLevel>;

        return $i0;
    }

    public net.sourceforge.plantuml.webp.SubBlock getLeftSubBlock(int, net.sourceforge.plantuml.webp.SubBlock$PLANE)
    {
        net.sourceforge.plantuml.webp.SubBlock$PLANE r0, $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.webp.MacroBlock r5;
        net.sourceforge.plantuml.webp.SubBlock[][] $r6, $r10, $r13;
        int i0;
        net.sourceforge.plantuml.webp.SubBlock[] $r7, $r11, $r14;
        net.sourceforge.plantuml.webp.SubBlock $r8, $r9, $r12, $r15;

        r5 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0 := @parameter1: net.sourceforge.plantuml.webp.SubBlock$PLANE;

        $r1 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        if r0 != $r1 goto label1;

        $r13 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r14 = $r13[0];

        $r15 = $r14[i0];

        return $r15;

     label1:
        $r2 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        if r0 != $r2 goto label2;

        $r10 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r11 = $r10[0];

        $r12 = $r11[i0];

        return $r12;

     label2:
        $r3 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y2>;

        if r0 != $r3 goto label3;

        $r9 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock y2SubBlock>;

        return $r9;

     label3:
        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        if r0 != $r4 goto label4;

        $r6 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r7 = $r6[0];

        $r8 = $r7[i0];

        return $r8;

     label4:
        return null;
    }

    public net.sourceforge.plantuml.webp.SubBlock getRightSubBlock(int, net.sourceforge.plantuml.webp.SubBlock$PLANE)
    {
        net.sourceforge.plantuml.webp.SubBlock$PLANE r0, $r1, $r2, $r3, $r4;
        net.sourceforge.plantuml.webp.MacroBlock r5;
        net.sourceforge.plantuml.webp.SubBlock $r6, $r9, $r12, $r15;
        net.sourceforge.plantuml.webp.SubBlock[][] $r7, $r10, $r13;
        int i0;
        net.sourceforge.plantuml.webp.SubBlock[] $r8, $r11, $r14;

        r5 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0 := @parameter1: net.sourceforge.plantuml.webp.SubBlock$PLANE;

        $r1 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        if r0 != $r1 goto label1;

        $r13 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r14 = $r13[3];

        $r15 = $r14[i0];

        return $r15;

     label1:
        $r2 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        if r0 != $r2 goto label2;

        $r10 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r11 = $r10[1];

        $r12 = $r11[i0];

        return $r12;

     label2:
        $r3 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        if r0 != $r3 goto label3;

        $r7 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r8 = $r7[1];

        $r9 = $r8[i0];

        return $r9;

     label3:
        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y2>;

        if r0 != $r4 goto label4;

        $r6 = r5.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock y2SubBlock>;

        return $r6;

     label4:
        return null;
    }

    public int getSkipCoeff()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int skipCoeff>;

        return $i0;
    }

    public net.sourceforge.plantuml.webp.SubBlock getSubBlock(net.sourceforge.plantuml.webp.SubBlock$PLANE, int, int)
    {
        net.sourceforge.plantuml.webp.SubBlock$PLANE r0;
        int[] $r1;
        int $i0, $i1, i2, i3;
        net.sourceforge.plantuml.webp.MacroBlock r2;
        net.sourceforge.plantuml.webp.SubBlock $r3, $r4, $r5, $r6;

        r2 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r0 := @parameter0: net.sourceforge.plantuml.webp.SubBlock$PLANE;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = <net.sourceforge.plantuml.webp.MacroBlock$1: int[] $SwitchMap$net$sourceforge$plantuml$webp$SubBlock$PLANE>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock$PLANE: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r6 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(i2, i3);

        return $r6;

     label2:
        $r5 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(i2, i3);

        return $r5;

     label3:
        $r4 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(i2, i3);

        return $r4;

     label4:
        $r3 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getY2SubBlock()>();

        return $r3;

     label5:
        return null;
    }

    public int getSubblockX(net.sourceforge.plantuml.webp.SubBlock)
    {
        net.sourceforge.plantuml.webp.SubBlock r0, $r12, $r15, $r18;
        net.sourceforge.plantuml.webp.SubBlock$PLANE $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.webp.MacroBlock r9;
        net.sourceforge.plantuml.webp.SubBlock[][] $r10, $r13, $r16;
        net.sourceforge.plantuml.webp.SubBlock[] $r11, $r14, $r17;
        int i0, i1, i2, i3, i4, i5;

        r9 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r0 := @parameter0: net.sourceforge.plantuml.webp.SubBlock;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r2 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        if $r1 != $r2 goto label06;

        i0 = 0;

     label01:
        if i0 >= 4 goto label05;

        i1 = 0;

     label02:
        if i1 >= 4 goto label04;

        $r16 = r9.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r17 = $r16[i1];

        $r18 = $r17[i0];

        if $r18 != r0 goto label03;

        return i1;

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        i0 = i0 + 1;

        goto label01;

     label05:
        goto label19;

     label06:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        if $r3 != $r4 goto label12;

        i2 = 0;

     label07:
        if i2 >= 2 goto label11;

        i3 = 0;

     label08:
        if i3 >= 2 goto label10;

        $r13 = r9.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r14 = $r13[i3];

        $r15 = $r14[i2];

        if $r15 != r0 goto label09;

        return i3;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        i2 = i2 + 1;

        goto label07;

     label11:
        goto label19;

     label12:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r6 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        if $r5 != $r6 goto label18;

        i4 = 0;

     label13:
        if i4 >= 2 goto label17;

        i5 = 0;

     label14:
        if i5 >= 2 goto label16;

        $r10 = r9.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r11 = $r10[i5];

        $r12 = $r11[i4];

        if $r12 != r0 goto label15;

        return i5;

     label15:
        i5 = i5 + 1;

        goto label14;

     label16:
        i4 = i4 + 1;

        goto label13;

     label17:
        goto label19;

     label18:
        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r8 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y2>;

        if $r7 != $r8 goto label19;

        return 0;

     label19:
        return -100;
    }

    public int getSubblockY(net.sourceforge.plantuml.webp.SubBlock)
    {
        net.sourceforge.plantuml.webp.SubBlock r0, $r12, $r15, $r18;
        net.sourceforge.plantuml.webp.SubBlock$PLANE $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        net.sourceforge.plantuml.webp.MacroBlock r9;
        net.sourceforge.plantuml.webp.SubBlock[][] $r10, $r13, $r16;
        net.sourceforge.plantuml.webp.SubBlock[] $r11, $r14, $r17;
        int i0, i1, i2, i3, i4, i5;

        r9 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r0 := @parameter0: net.sourceforge.plantuml.webp.SubBlock;

        $r1 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r2 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y1>;

        if $r1 != $r2 goto label06;

        i0 = 0;

     label01:
        if i0 >= 4 goto label05;

        i1 = 0;

     label02:
        if i1 >= 4 goto label04;

        $r16 = r9.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r17 = $r16[i1];

        $r18 = $r17[i0];

        if $r18 != r0 goto label03;

        return i0;

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        i0 = i0 + 1;

        goto label01;

     label05:
        goto label19;

     label06:
        $r3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r4 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE U>;

        if $r3 != $r4 goto label12;

        i2 = 0;

     label07:
        if i2 >= 2 goto label11;

        i3 = 0;

     label08:
        if i3 >= 2 goto label10;

        $r13 = r9.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r14 = $r13[i3];

        $r15 = $r14[i2];

        if $r15 != r0 goto label09;

        return i2;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        i2 = i2 + 1;

        goto label07;

     label11:
        goto label19;

     label12:
        $r5 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r6 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE V>;

        if $r5 != $r6 goto label18;

        i4 = 0;

     label13:
        if i4 >= 2 goto label17;

        i5 = 0;

     label14:
        if i5 >= 2 goto label16;

        $r10 = r9.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r11 = $r10[i5];

        $r12 = $r11[i4];

        if $r12 != r0 goto label15;

        return i4;

     label15:
        i5 = i5 + 1;

        goto label14;

     label16:
        i4 = i4 + 1;

        goto label13;

     label17:
        goto label19;

     label18:
        $r7 = virtualinvoke r0.<net.sourceforge.plantuml.webp.SubBlock: net.sourceforge.plantuml.webp.SubBlock$PLANE getPlane()>();

        $r8 = <net.sourceforge.plantuml.webp.SubBlock$PLANE: net.sourceforge.plantuml.webp.SubBlock$PLANE Y2>;

        if $r7 != $r8 goto label19;

        return 0;

     label19:
        return -100;
    }

    public net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int, int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0, i1;
        net.sourceforge.plantuml.webp.SubBlock[][] $r1;
        net.sourceforge.plantuml.webp.SubBlock[] $r2;
        net.sourceforge.plantuml.webp.SubBlock $r3;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        return $r3;
    }

    public int getUVFilterLevel()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int uVFilterLevel>;

        return $i0;
    }

    public int getUvMode()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int uvMode>;

        return $i0;
    }

    public net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int, int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0, i1;
        net.sourceforge.plantuml.webp.SubBlock[][] $r1;
        net.sourceforge.plantuml.webp.SubBlock[] $r2;
        net.sourceforge.plantuml.webp.SubBlock $r3;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        return $r3;
    }

    public int getX()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        return $i0;
    }

    public int getY()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        return $i0;
    }

    public net.sourceforge.plantuml.webp.SubBlock getY2SubBlock()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        net.sourceforge.plantuml.webp.SubBlock $r1;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $r1 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock y2SubBlock>;

        return $r1;
    }

    public int getYMode()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int yMode>;

        return $i0;
    }

    public net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int, int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0, i1;
        net.sourceforge.plantuml.webp.SubBlock[][] $r1;
        net.sourceforge.plantuml.webp.SubBlock[] $r2;
        net.sourceforge.plantuml.webp.SubBlock $r3;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r2 = $r1[i0];

        $r3 = $r2[i1];

        return $r3;
    }

    public boolean isKeepDebugInfo()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $z0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean keepDebugInfo>;

        return $z0;
    }

    public boolean isSkip_inner_lf()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $z0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: boolean skipInnerLoopFilter>;

        return $z0;
    }

    public void predictUV(net.sourceforge.plantuml.webp.VP8Frame)
    {
        net.sourceforge.plantuml.webp.VP8Frame r0;
        net.sourceforge.plantuml.webp.MacroBlock r1, r2, r3, r97;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69;
        int[][] $r4, $r6, $r9, $r12, $r18, $r21, $r36, $r40, $r50, $r54, $r64, $r66, $r68, $r70, r81, r82, r89, r90, r95, r96;
        int[] $r5, $r7, $r10, $r13, $r19, $r22, $r35, $r37, $r39, $r41, $r49, $r51, $r53, $r55, $r62, $r63, $r65, $r67, $r69, $r71;
        net.sourceforge.plantuml.webp.SubBlock $r8, $r11, $r16, $r17, $r20, $r25, $r26, $r27, $r28, $r29, $r34, $r38, $r42, $r43, $r48, $r52, $r56, $r57, r77, r78, r79, r80, r83, r84, r87, r88, r93, r94, r98, r99;
        net.sourceforge.plantuml.webp.SubBlock[][] $r14, $r23, $r30, $r32, $r44, $r46, $r58, $r60;
        net.sourceforge.plantuml.webp.SubBlock[] $r15, $r24, $r31, $r33, $r45, $r47, $r59, $r61, r85, r86, r91, r92, r100, r101, r102, r103;
        java.lang.StringBuilder $r72, $r74, $r75;
        java.io.PrintStream $r73;
        java.lang.String $r76;
        boolean z0, z1;

        r1 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r0 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        $i2 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        $i0 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        $i1 = $i0 - 1;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i2, $i1);

        $i3 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        $i5 = $i3 - 1;

        $i4 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i5, $i4);

        $i6 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int uvMode>;

        tableswitch($i6)
        {
            case 0: goto label01;
            case 1: goto label29;
            case 2: goto label40;
            case 3: goto label51;
            default: goto label62;
        };

     label01:
        z0 = 0;

        z1 = 0;

        i34 = 0;

        i35 = 0;

        $i21 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        if $i21 <= 0 goto label02;

        z1 = 1;

     label02:
        $i22 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        if $i22 <= 0 goto label03;

        z0 = 1;

     label03:
        if z0 != 0 goto label04;

        if z1 == 0 goto label15;

     label04:
        if z0 == 0 goto label08;

        i36 = 0;

     label05:
        if i36 >= 2 goto label08;

        r77 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(i36, 1);

        r78 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(i36, 1);

        i37 = 0;

     label06:
        if i37 >= 4 goto label07;

        $r68 = virtualinvoke r77.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r69 = $r68[i37];

        $i31 = $r69[3];

        i34 = i34 + $i31;

        $r70 = virtualinvoke r78.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r71 = $r70[i37];

        $i32 = $r71[3];

        i35 = i35 + $i32;

        i37 = i37 + 1;

        goto label06;

     label07:
        i36 = i36 + 1;

        goto label05;

     label08:
        if z1 == 0 goto label12;

        i38 = 0;

     label09:
        if i38 >= 2 goto label12;

        r79 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(1, i38);

        r80 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(1, i38);

        i39 = 0;

     label10:
        if i39 >= 4 goto label11;

        $r64 = virtualinvoke r79.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r65 = $r64[3];

        $i29 = $r65[i39];

        i34 = i34 + $i29;

        $r66 = virtualinvoke r80.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r67 = $r66[3];

        $i30 = $r67[i39];

        i35 = i35 + $i30;

        i39 = i39 + 1;

        goto label10;

     label11:
        i38 = i38 + 1;

        goto label09;

     label12:
        i40 = 2;

        if z0 == 0 goto label13;

        i40 = 2 + 1;

     label13:
        if z1 == 0 goto label14;

        i40 = i40 + 1;

     label14:
        $i23 = i40 - 1;

        $i24 = 1 << $i23;

        $i25 = i34 + $i24;

        i41 = $i25 >> i40;

        $i26 = i40 - 1;

        $i27 = 1 << $i26;

        $i28 = i35 + $i27;

        i42 = $i28 >> i40;

        goto label16;

     label15:
        i41 = 128;

        i42 = 128;

     label16:
        r81 = newmultiarray (int)[4][4];

        i43 = 0;

     label17:
        if i43 >= 4 goto label20;

        i44 = 0;

     label18:
        if i44 >= 4 goto label19;

        $r63 = r81[i44];

        $r63[i43] = i41;

        i44 = i44 + 1;

        goto label18;

     label19:
        i43 = i43 + 1;

        goto label17;

     label20:
        r82 = newmultiarray (int)[4][4];

        i45 = 0;

     label21:
        if i45 >= 4 goto label24;

        i46 = 0;

     label22:
        if i46 >= 4 goto label23;

        $r62 = r82[i46];

        $r62[i45] = i42;

        i46 = i46 + 1;

        goto label22;

     label23:
        i45 = i45 + 1;

        goto label21;

     label24:
        i47 = 0;

     label25:
        if i47 >= 2 goto label28;

        i48 = 0;

     label26:
        if i48 >= 2 goto label27;

        $r58 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r59 = $r58[i48];

        r83 = $r59[i47];

        $r60 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r61 = $r60[i48];

        r84 = $r61[i47];

        virtualinvoke r83.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r81);

        virtualinvoke r84.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r82);

        i48 = i48 + 1;

        goto label26;

     label27:
        i47 = i47 + 1;

        goto label25;

     label28:
        goto label63;

     label29:
        r85 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        r86 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        i49 = 0;

     label30:
        if i49 >= 2 goto label31;

        $r56 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(i49, 1);

        r85[i49] = $r56;

        $r57 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(i49, 1);

        r86[i49] = $r57;

        i49 = i49 + 1;

        goto label30;

     label31:
        i50 = 0;

     label32:
        if i50 >= 2 goto label39;

        i51 = 0;

     label33:
        if i51 >= 2 goto label38;

        $r44 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r45 = $r44[i50];

        r87 = $r45[i51];

        $r46 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r47 = $r46[i50];

        r88 = $r47[i51];

        r89 = newmultiarray (int)[4][4];

        r90 = newmultiarray (int)[4][4];

        i52 = 0;

     label34:
        if i52 >= 4 goto label37;

        i53 = 0;

     label35:
        if i53 >= 4 goto label36;

        $r49 = r89[i52];

        $r48 = r85[i50];

        $r50 = virtualinvoke $r48.<net.sourceforge.plantuml.webp.SubBlock: int[][] getMacroBlockPredict(int)>(1);

        $r51 = $r50[i52];

        $i19 = $r51[3];

        $r49[i53] = $i19;

        $r53 = r90[i52];

        $r52 = r86[i50];

        $r54 = virtualinvoke $r52.<net.sourceforge.plantuml.webp.SubBlock: int[][] getMacroBlockPredict(int)>(1);

        $r55 = $r54[i52];

        $i20 = $r55[3];

        $r53[i53] = $i20;

        i53 = i53 + 1;

        goto label35;

     label36:
        i52 = i52 + 1;

        goto label34;

     label37:
        virtualinvoke r87.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r89);

        virtualinvoke r88.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r90);

        i51 = i51 + 1;

        goto label33;

     label38:
        i50 = i50 + 1;

        goto label32;

     label39:
        goto label63;

     label40:
        r91 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        r92 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        i54 = 0;

     label41:
        if i54 >= 2 goto label42;

        $r42 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(1, i54);

        r91[i54] = $r42;

        $r43 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(1, i54);

        r92[i54] = $r43;

        i54 = i54 + 1;

        goto label41;

     label42:
        i55 = 0;

     label43:
        if i55 >= 2 goto label50;

        i56 = 0;

     label44:
        if i56 >= 2 goto label49;

        $r30 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r31 = $r30[i56];

        r93 = $r31[i55];

        $r32 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r33 = $r32[i56];

        r94 = $r33[i55];

        r95 = newmultiarray (int)[4][4];

        r96 = newmultiarray (int)[4][4];

        i57 = 0;

     label45:
        if i57 >= 4 goto label48;

        i58 = 0;

     label46:
        if i58 >= 4 goto label47;

        $r35 = r95[i58];

        $r34 = r91[i55];

        $r36 = virtualinvoke $r34.<net.sourceforge.plantuml.webp.SubBlock: int[][] getMacroBlockPredict(int)>(2);

        $r37 = $r36[3];

        $i17 = $r37[i57];

        $r35[i57] = $i17;

        $r39 = r96[i58];

        $r38 = r92[i55];

        $r40 = virtualinvoke $r38.<net.sourceforge.plantuml.webp.SubBlock: int[][] getMacroBlockPredict(int)>(2);

        $r41 = $r40[3];

        $i18 = $r41[i57];

        $r39[i57] = $i18;

        i58 = i58 + 1;

        goto label46;

     label47:
        i57 = i57 + 1;

        goto label45;

     label48:
        virtualinvoke r93.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r95);

        virtualinvoke r94.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r96);

        i56 = i56 + 1;

        goto label44;

     label49:
        i55 = i55 + 1;

        goto label43;

     label50:
        goto label63;

     label51:
        $i7 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        $i10 = $i7 - 1;

        $i8 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        $i9 = $i8 - 1;

        r97 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i10, $i9);

        r98 = virtualinvoke r97.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(1, 1);

        $r4 = virtualinvoke r98.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r5 = $r4[3];

        i59 = $r5[3];

        r99 = virtualinvoke r97.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(1, 1);

        $r6 = virtualinvoke r99.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r7 = $r6[3];

        i60 = $r7[3];

        r100 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        r101 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        r102 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        r103 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        i61 = 0;

     label52:
        if i61 >= 2 goto label53;

        $r26 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(i61, 1);

        r100[i61] = $r26;

        $r27 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getUSubBlock(int,int)>(1, i61);

        r101[i61] = $r27;

        $r28 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(i61, 1);

        r102[i61] = $r28;

        $r29 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getVSubBlock(int,int)>(1, i61);

        r103[i61] = $r29;

        i61 = i61 + 1;

        goto label52;

     label53:
        i62 = 0;

     label54:
        if i62 >= 2 goto label61;

        i63 = 0;

     label55:
        if i63 >= 4 goto label60;

        i64 = 0;

     label56:
        if i64 >= 2 goto label59;

        i65 = 0;

     label57:
        if i65 >= 4 goto label58;

        $r8 = r101[i62];

        $r9 = virtualinvoke $r8.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r10 = $r9[3];

        $i11 = $r10[i63];

        $r11 = r100[i64];

        $r12 = virtualinvoke $r11.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r13 = $r12[i65];

        $i12 = $r13[3];

        $i13 = $i11 + $i12;

        i66 = $i13 - i59;

        i67 = staticinvoke <net.sourceforge.plantuml.webp.Globals: int clamp(int,int)>(i66, 255);

        $r14 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r15 = $r14[i64];

        $r16 = $r15[i62];

        virtualinvoke $r16.<net.sourceforge.plantuml.webp.SubBlock: void setPixel(int,int,int)>(i65, i63, i67);

        $r17 = r103[i62];

        $r18 = virtualinvoke $r17.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r19 = $r18[3];

        $i14 = $r19[i63];

        $r20 = r102[i64];

        $r21 = virtualinvoke $r20.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r22 = $r21[i65];

        $i15 = $r22[3];

        $i16 = $i14 + $i15;

        i68 = $i16 - i60;

        i69 = staticinvoke <net.sourceforge.plantuml.webp.Globals: int clamp(int,int)>(i68, 255);

        $r23 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r24 = $r23[i64];

        $r25 = $r24[i62];

        virtualinvoke $r25.<net.sourceforge.plantuml.webp.SubBlock: void setPixel(int,int,int)>(i65, i63, i69);

        i65 = i65 + 1;

        goto label57;

     label58:
        i64 = i64 + 1;

        goto label56;

     label59:
        i63 = i63 + 1;

        goto label55;

     label60:
        i62 = i62 + 1;

        goto label54;

     label61:
        goto label63;

     label62:
        $r73 = <java.lang.System: java.io.PrintStream out>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TODO predict_mb_uv: ");

        $i33 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int yMode>;

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i33);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r73.<java.io.PrintStream: void println(java.lang.String)>($r76);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label63:
        return;
    }

    public void predictY(net.sourceforge.plantuml.webp.VP8Frame)
    {
        net.sourceforge.plantuml.webp.VP8Frame r0;
        net.sourceforge.plantuml.webp.MacroBlock r1, r2, r3, r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54;
        int[][] $r4, $r7, $r10, $r22, $r29, $r35, $r37, r46, r50, r53, r59;
        int[] $r5, $r8, $r11, $r21, $r23, $r28, $r30, $r34, $r36, $r38;
        net.sourceforge.plantuml.webp.SubBlock $r6, $r9, $r14, $r15, $r16, $r17, $r20, $r24, $r27, $r31, r44, r45, r47, r49, r52, r56;
        net.sourceforge.plantuml.webp.SubBlock[][] $r12, $r18, $r25, $r32;
        net.sourceforge.plantuml.webp.SubBlock[] $r13, $r19, $r26, $r33, r48, r51, r54, r57, r58;
        java.lang.StringBuilder $r39, $r41, $r42;
        java.io.PrintStream $r40;
        java.lang.String $r43;
        boolean z0, z1;

        r1 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        r0 := @parameter0: net.sourceforge.plantuml.webp.VP8Frame;

        $i2 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        $i0 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        $i1 = $i0 - 1;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i2, $i1);

        $i3 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        $i5 = $i3 - 1;

        $i4 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        r3 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i5, $i4);

        $i6 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int yMode>;

        tableswitch($i6)
        {
            case 0: goto label01;
            case 1: goto label25;
            case 2: goto label36;
            case 3: goto label49;
            default: goto label62;
        };

     label01:
        z0 = 0;

        z1 = 0;

        i26 = 0;

        $i18 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        if $i18 <= 0 goto label02;

        z1 = 1;

     label02:
        $i19 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        if $i19 <= 0 goto label03;

        z0 = 1;

     label03:
        if z0 != 0 goto label04;

        if z1 == 0 goto label15;

     label04:
        if z0 == 0 goto label08;

        i27 = 0;

     label05:
        if i27 >= 4 goto label08;

        r44 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(i27, 3);

        i28 = 0;

     label06:
        if i28 >= 4 goto label07;

        $r37 = virtualinvoke r44.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r38 = $r37[i28];

        $i24 = $r38[3];

        i26 = i26 + $i24;

        i28 = i28 + 1;

        goto label06;

     label07:
        i27 = i27 + 1;

        goto label05;

     label08:
        if z1 == 0 goto label12;

        i29 = 0;

     label09:
        if i29 >= 4 goto label12;

        r45 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(3, i29);

        i30 = 0;

     label10:
        if i30 >= 4 goto label11;

        $r35 = virtualinvoke r45.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r36 = $r35[3];

        $i23 = $r36[i30];

        i26 = i26 + $i23;

        i30 = i30 + 1;

        goto label10;

     label11:
        i29 = i29 + 1;

        goto label09;

     label12:
        i31 = 3;

        if z0 == 0 goto label13;

        i31 = 3 + 1;

     label13:
        if z1 == 0 goto label14;

        i31 = i31 + 1;

     label14:
        $i20 = i31 - 1;

        $i21 = 1 << $i20;

        $i22 = i26 + $i21;

        i32 = $i22 >> i31;

        goto label16;

     label15:
        i32 = 128;

     label16:
        r46 = newmultiarray (int)[4][4];

        i33 = 0;

     label17:
        if i33 >= 4 goto label20;

        i34 = 0;

     label18:
        if i34 >= 4 goto label19;

        $r34 = r46[i34];

        $r34[i33] = i32;

        i34 = i34 + 1;

        goto label18;

     label19:
        i33 = i33 + 1;

        goto label17;

     label20:
        i35 = 0;

     label21:
        if i35 >= 4 goto label24;

        i36 = 0;

     label22:
        if i36 >= 4 goto label23;

        $r32 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r33 = $r32[i36];

        r47 = $r33[i35];

        virtualinvoke r47.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r46);

        i36 = i36 + 1;

        goto label22;

     label23:
        i35 = i35 + 1;

        goto label21;

     label24:
        goto label63;

     label25:
        r48 = newarray (net.sourceforge.plantuml.webp.SubBlock)[4];

        i37 = 0;

     label26:
        if i37 >= 4 goto label27;

        $r31 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(i37, 3);

        r48[i37] = $r31;

        i37 = i37 + 1;

        goto label26;

     label27:
        i38 = 0;

     label28:
        if i38 >= 4 goto label35;

        i39 = 0;

     label29:
        if i39 >= 4 goto label34;

        $r25 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r26 = $r25[i39];

        r49 = $r26[i38];

        r50 = newmultiarray (int)[4][4];

        i40 = 0;

     label30:
        if i40 >= 4 goto label33;

        i41 = 0;

     label31:
        if i41 >= 4 goto label32;

        $r28 = r50[i41];

        $r27 = r48[i39];

        $r29 = virtualinvoke $r27.<net.sourceforge.plantuml.webp.SubBlock: int[][] getPredict(int,boolean)>(2, 0);

        $r30 = $r29[i41];

        $i17 = $r30[3];

        $r28[i40] = $i17;

        i41 = i41 + 1;

        goto label31;

     label32:
        i40 = i40 + 1;

        goto label30;

     label33:
        virtualinvoke r49.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r50);

        i39 = i39 + 1;

        goto label29;

     label34:
        i38 = i38 + 1;

        goto label28;

     label35:
        goto label63;

     label36:
        r51 = newarray (net.sourceforge.plantuml.webp.SubBlock)[4];

        i42 = 0;

     label37:
        if i42 >= 4 goto label38;

        $r24 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(3, i42);

        r51[i42] = $r24;

        i42 = i42 + 1;

        goto label37;

     label38:
        i43 = 0;

     label39:
        if i43 >= 4 goto label46;

        i44 = 0;

     label40:
        if i44 >= 4 goto label45;

        $r18 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r19 = $r18[i44];

        r52 = $r19[i43];

        r53 = newmultiarray (int)[4][4];

        i45 = 0;

     label41:
        if i45 >= 4 goto label44;

        i46 = 0;

     label42:
        if i46 >= 4 goto label43;

        $r21 = r53[i46];

        $r20 = r51[i43];

        $r22 = virtualinvoke $r20.<net.sourceforge.plantuml.webp.SubBlock: int[][] getPredict(int,boolean)>(0, 1);

        $r23 = $r22[3];

        $i16 = $r23[i45];

        $r21[i45] = $i16;

        i46 = i46 + 1;

        goto label42;

     label43:
        i45 = i45 + 1;

        goto label41;

     label44:
        virtualinvoke r52.<net.sourceforge.plantuml.webp.SubBlock: void setPredict(int[][])>(r53);

        i44 = i44 + 1;

        goto label40;

     label45:
        i43 = i43 + 1;

        goto label39;

     label46:
        r54 = newarray (net.sourceforge.plantuml.webp.SubBlock)[2];

        i47 = 0;

     label47:
        if i47 >= 2 goto label48;

        $r17 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(1, i47);

        r54[i47] = $r17;

        i47 = i47 + 1;

        goto label47;

     label48:
        goto label63;

     label49:
        $i7 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        $i10 = $i7 - 1;

        $i8 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        $i9 = $i8 - 1;

        r55 = virtualinvoke r0.<net.sourceforge.plantuml.webp.VP8Frame: net.sourceforge.plantuml.webp.MacroBlock getMacroBlock(int,int)>($i10, $i9);

        r56 = virtualinvoke r55.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(3, 3);

        $r4 = virtualinvoke r56.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r5 = $r4[3];

        i48 = $r5[3];

        r57 = newarray (net.sourceforge.plantuml.webp.SubBlock)[4];

        r58 = newarray (net.sourceforge.plantuml.webp.SubBlock)[4];

        i49 = 0;

     label50:
        if i49 >= 4 goto label51;

        $r16 = virtualinvoke r2.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(i49, 3);

        r57[i49] = $r16;

        i49 = i49 + 1;

        goto label50;

     label51:
        i50 = 0;

     label52:
        if i50 >= 4 goto label53;

        $r15 = virtualinvoke r3.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock getYSubBlock(int,int)>(3, i50);

        r58[i50] = $r15;

        i50 = i50 + 1;

        goto label52;

     label53:
        r59 = newmultiarray (int)[4][4];

        i51 = 0;

     label54:
        if i51 >= 4 goto label61;

        i52 = 0;

     label55:
        if i52 >= 4 goto label60;

        i53 = 0;

     label56:
        if i53 >= 4 goto label59;

        i54 = 0;

     label57:
        if i54 >= 4 goto label58;

        $r6 = r58[i51];

        $r7 = virtualinvoke $r6.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r8 = $r7[3];

        $i11 = $r8[i52];

        $r9 = r57[i53];

        $r10 = virtualinvoke $r9.<net.sourceforge.plantuml.webp.SubBlock: int[][] getDest()>();

        $r11 = $r10[i54];

        $i12 = $r11[3];

        $i13 = $i11 + $i12;

        i14 = $i13 - i48;

        $r12 = r1.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r13 = $r12[i53];

        $r14 = $r13[i51];

        $i15 = staticinvoke <net.sourceforge.plantuml.webp.Globals: int clamp(int,int)>(i14, 255);

        virtualinvoke $r14.<net.sourceforge.plantuml.webp.SubBlock: void setPixel(int,int,int)>(i54, i52, $i15);

        i54 = i54 + 1;

        goto label57;

     label58:
        i53 = i53 + 1;

        goto label56;

     label59:
        i52 = i52 + 1;

        goto label55;

     label60:
        i51 = i51 + 1;

        goto label54;

     label61:
        goto label63;

     label62:
        $r40 = <java.lang.System: java.io.PrintStream out>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TODO predict_mb_y: ");

        $i25 = r1.<net.sourceforge.plantuml.webp.MacroBlock: int yMode>;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r43);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label63:
        return;
    }

    public void recon_mb()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        net.sourceforge.plantuml.webp.SubBlock[][] $r1, $r3, $r5;
        net.sourceforge.plantuml.webp.SubBlock[] $r2, $r4, $r6;
        int i0, i1, i2, i3, i4, i5;
        net.sourceforge.plantuml.webp.SubBlock r7, r8, r9;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 = 0;

     label01:
        if i0 >= 4 goto label04;

        i1 = 0;

     label02:
        if i1 >= 4 goto label03;

        $r5 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] ySubBlocks>;

        $r6 = $r5[i1];

        r7 = $r6[i0];

        virtualinvoke r7.<net.sourceforge.plantuml.webp.SubBlock: void reconstruct()>();

        i1 = i1 + 1;

        goto label02;

     label03:
        i0 = i0 + 1;

        goto label01;

     label04:
        i2 = 0;

     label05:
        if i2 >= 2 goto label08;

        i3 = 0;

     label06:
        if i3 >= 2 goto label07;

        $r3 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] uSubBlocks>;

        $r4 = $r3[i3];

        r8 = $r4[i2];

        virtualinvoke r8.<net.sourceforge.plantuml.webp.SubBlock: void reconstruct()>();

        i3 = i3 + 1;

        goto label06;

     label07:
        i2 = i2 + 1;

        goto label05;

     label08:
        i4 = 0;

     label09:
        if i4 >= 2 goto label12;

        i5 = 0;

     label10:
        if i5 >= 2 goto label11;

        $r1 = r0.<net.sourceforge.plantuml.webp.MacroBlock: net.sourceforge.plantuml.webp.SubBlock[][] vSubBlocks>;

        $r2 = $r1[i5];

        r9 = $r2[i4];

        virtualinvoke r9.<net.sourceforge.plantuml.webp.SubBlock: void reconstruct()>();

        i5 = i5 + 1;

        goto label10;

     label11:
        i4 = i4 + 1;

        goto label09;

     label12:
        return;
    }

    public void setFilterLevel(int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int filterLevel> = i0;

        return;
    }

    public void setSegmentId(int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int segmentId> = i0;

        return;
    }

    public void setSkipCoeff(int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int skipCoeff> = i0;

        return;
    }

    public void setUVFilterLevel(int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int uVFilterLevel> = i0;

        return;
    }

    public void setUvMode(int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int uvMode> = i0;

        return;
    }

    public void setYMode(int)
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        i0 := @parameter0: int;

        r0.<net.sourceforge.plantuml.webp.MacroBlock: int yMode> = i0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        net.sourceforge.plantuml.webp.MacroBlock r2;
        int $i0, $i1;
        java.lang.String $r6;

        r2 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x: ");

        $i0 = r2.<net.sourceforge.plantuml.webp.MacroBlock: int x>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("y: ");

        $i1 = r2.<net.sourceforge.plantuml.webp.MacroBlock: int y>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public int getSegmentId()
    {
        net.sourceforge.plantuml.webp.MacroBlock r0;
        int $i0;

        r0 := @this: net.sourceforge.plantuml.webp.MacroBlock;

        $i0 = r0.<net.sourceforge.plantuml.webp.MacroBlock: int segmentId>;

        return $i0;
    }
}
