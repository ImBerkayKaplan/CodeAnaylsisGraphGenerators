public final enum class net.sourceforge.plantuml.sequencediagram.MessageExoType extends java.lang.Enum
{
    public static final enum net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT;
    public static final enum net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT;
    public static final enum net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT;
    public static final enum net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT;
    private static final net.sourceforge.plantuml.sequencediagram.MessageExoType[] $VALUES;

    public static net.sourceforge.plantuml.sequencediagram.MessageExoType[] values()
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (net.sourceforge.plantuml.sequencediagram.MessageExoType[]) $r1;

        return $r2;
    }

    public static net.sourceforge.plantuml.sequencediagram.MessageExoType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lnet/sourceforge/plantuml/sequencediagram/MessageExoType;", r0);

        $r2 = (net.sourceforge.plantuml.sequencediagram.MessageExoType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType r0;
        java.lang.String r1;
        int i0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.MessageExoType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public int getDirection()
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.IllegalStateException $r2;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.MessageExoType;

        $r1 = <net.sourceforge.plantuml.sequencediagram.MessageExoType$1: int[] $SwitchMap$net$sourceforge$plantuml$sequencediagram$MessageExoType>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.MessageExoType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        return 1;

     label2:
        return -1;

     label3:
        return 1;

     label4:
        return -1;

     label5:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public boolean isLeftBorder()
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType r0, $r1, $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.MessageExoType;

        $r1 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        if r0 == $r1 goto label1;

        $r2 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        if r0 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isRightBorder()
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType r0, $r1, $r2;
        boolean $z0;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.MessageExoType;

        $r1 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT>;

        if r0 == $r1 goto label1;

        $r2 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT>;

        if r0 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public net.sourceforge.plantuml.sequencediagram.MessageExoType reverse()
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType r0, $r2, $r3, $r4, $r5;
        int[] $r1;
        int $i0, $i1;
        java.lang.IllegalStateException $r6;

        r0 := @this: net.sourceforge.plantuml.sequencediagram.MessageExoType;

        $r1 = <net.sourceforge.plantuml.sequencediagram.MessageExoType$1: int[] $SwitchMap$net$sourceforge$plantuml$sequencediagram$MessageExoType>;

        $i0 = virtualinvoke r0.<net.sourceforge.plantuml.sequencediagram.MessageExoType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label3;
            default: goto label5;
        };

     label1:
        $r5 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        return $r5;

     label2:
        $r3 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT>;

        return $r3;

     label3:
        $r2 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT>;

        return $r2;

     label4:
        $r4 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        return $r4;

     label5:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;
    }

    private static net.sourceforge.plantuml.sequencediagram.MessageExoType[] $values()
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType[] $r0;
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r1, $r2, $r3, $r4;

        $r0 = newarray (net.sourceforge.plantuml.sequencediagram.MessageExoType)[4];

        $r1 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT>;

        $r0[0] = $r1;

        $r2 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT>;

        $r0[1] = $r2;

        $r3 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT>;

        $r0[2] = $r3;

        $r4 = <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT>;

        $r0[3] = $r4;

        return $r0;
    }

    static void <clinit>()
    {
        net.sourceforge.plantuml.sequencediagram.MessageExoType $r0, $r1, $r2, $r3;
        net.sourceforge.plantuml.sequencediagram.MessageExoType[] $r4;

        $r0 = new net.sourceforge.plantuml.sequencediagram.MessageExoType;

        specialinvoke $r0.<net.sourceforge.plantuml.sequencediagram.MessageExoType: void <init>(java.lang.String,int)>("FROM_LEFT", 0);

        <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_LEFT> = $r0;

        $r1 = new net.sourceforge.plantuml.sequencediagram.MessageExoType;

        specialinvoke $r1.<net.sourceforge.plantuml.sequencediagram.MessageExoType: void <init>(java.lang.String,int)>("TO_LEFT", 1);

        <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_LEFT> = $r1;

        $r2 = new net.sourceforge.plantuml.sequencediagram.MessageExoType;

        specialinvoke $r2.<net.sourceforge.plantuml.sequencediagram.MessageExoType: void <init>(java.lang.String,int)>("FROM_RIGHT", 2);

        <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType FROM_RIGHT> = $r2;

        $r3 = new net.sourceforge.plantuml.sequencediagram.MessageExoType;

        specialinvoke $r3.<net.sourceforge.plantuml.sequencediagram.MessageExoType: void <init>(java.lang.String,int)>("TO_RIGHT", 3);

        <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType TO_RIGHT> = $r3;

        $r4 = staticinvoke <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType[] $values()>();

        <net.sourceforge.plantuml.sequencediagram.MessageExoType: net.sourceforge.plantuml.sequencediagram.MessageExoType[] $VALUES> = $r4;

        return;
    }
}
