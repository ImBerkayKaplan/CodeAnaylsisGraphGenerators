public class net.sourceforge.plantuml.tim.VariableManager extends java.lang.Object
{
    private final net.sourceforge.plantuml.tim.TMemory memory;
    private final net.sourceforge.plantuml.tim.TContext context;
    private final net.sourceforge.plantuml.LineLocation location;

    public void <init>(net.sourceforge.plantuml.tim.TContext, net.sourceforge.plantuml.tim.TMemory, net.sourceforge.plantuml.LineLocation)
    {
        net.sourceforge.plantuml.tim.VariableManager r0;
        net.sourceforge.plantuml.tim.TMemory r1;
        net.sourceforge.plantuml.tim.TContext r2;
        net.sourceforge.plantuml.LineLocation r3;

        r0 := @this: net.sourceforge.plantuml.tim.VariableManager;

        r2 := @parameter0: net.sourceforge.plantuml.tim.TContext;

        r1 := @parameter1: net.sourceforge.plantuml.tim.TMemory;

        r3 := @parameter2: net.sourceforge.plantuml.LineLocation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.tim.TMemory memory> = r1;

        r0.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.tim.TContext context> = r2;

        r0.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.LineLocation location> = r3;

        return;
    }

    public int replaceVariables(java.lang.String, int, java.lang.StringBuilder) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        net.sourceforge.plantuml.tim.VariableManager r0;
        java.lang.String r1, r2, $r4, $r7, $r14, $r17;
        java.lang.StringBuilder r3;
        boolean $z0, $z1, $z2, $z3;
        net.sourceforge.plantuml.tim.TMemory $r5;
        net.sourceforge.plantuml.tim.expression.TValue r6;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, i9, i10, i11, $i12, $i13;
        char $c3, $c5;
        net.sourceforge.plantuml.json.JsonValue $r9, $r10, $r11, $r13, $r16;
        net.sourceforge.plantuml.json.JsonObject r12;

        r0 := @this: net.sourceforge.plantuml.tim.VariableManager;

        r1 := @parameter0: java.lang.String;

        i9 := @parameter1: int;

        r3 := @parameter2: java.lang.StringBuilder;

        r2 = virtualinvoke r0.<net.sourceforge.plantuml.tim.VariableManager: java.lang.String getVarnameAt(java.lang.String,int)>(r1, i9);

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("##");

        if $z0 == 0 goto label1;

        $i7 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        $i8 = $i7 - 2;

        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>($i8);

     label1:
        $r5 = r0.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.tim.TMemory memory>;

        r6 = interfaceinvoke $r5.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.expression.TValue getVariable(java.lang.String)>(r2);

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        i10 = i9 + $i1;

        $z1 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: boolean isJson()>();

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $z2 = virtualinvoke $r9.<net.sourceforge.plantuml.json.JsonValue: boolean isString()>();

        if $z2 == 0 goto label2;

        $r16 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $r17 = virtualinvoke $r16.<net.sourceforge.plantuml.json.JsonValue: java.lang.String asString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        goto label5;

     label2:
        $r10 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $z3 = virtualinvoke $r10.<net.sourceforge.plantuml.json.JsonValue: boolean isNumber()>();

        if $z3 == 0 goto label3;

        $r13 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        $r14 = virtualinvoke $r13.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        goto label5;

     label3:
        $r11 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: net.sourceforge.plantuml.json.JsonValue toJson()>();

        r12 = (net.sourceforge.plantuml.json.JsonObject) $r11;

        i11 = i10 + 1;

        $i6 = specialinvoke r0.<net.sourceforge.plantuml.tim.VariableManager: int replaceJson(net.sourceforge.plantuml.json.JsonValue,java.lang.String,int,java.lang.StringBuilder)>(r12, r1, i11, r3);

        i10 = $i6 - 1;

        goto label5;

     label4:
        $r7 = virtualinvoke r6.<net.sourceforge.plantuml.tim.expression.TValue: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label5:
        $i12 = i10 + 2;

        $i13 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i12 >= $i13 goto label6;

        $i2 = i10 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        if $c3 != 35 goto label6;

        $i4 = i10 + 2;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i4);

        if $c5 != 35 goto label6;

        i10 = i10 + 2;

     label6:
        return i10;
    }

    private int replaceJson(net.sourceforge.plantuml.json.JsonValue, java.lang.String, int, java.lang.StringBuilder) throws net.sourceforge.plantuml.tim.EaterException, net.sourceforge.plantuml.tim.EaterExceptionLocated
    {
        java.lang.String r0, $r2, $r4, $r12, r13, $r20;
        int $i0, i5, $i6, i9, i10, i11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder r1, $r6, $r18;
        char c1, $c2, $c3, $c4, $c7, $c8;
        net.sourceforge.plantuml.tim.VariableManager r8;
        net.sourceforge.plantuml.tim.TContext $r9;
        net.sourceforge.plantuml.tim.TMemory $r10;
        net.sourceforge.plantuml.LineLocation $r11;
        net.sourceforge.plantuml.tim.EaterException $r14, $r16;
        net.sourceforge.plantuml.json.JsonObject $r15, $r19;
        net.sourceforge.plantuml.json.JsonArray $r17;
        net.sourceforge.plantuml.json.JsonValue r22;

        r8 := @this: net.sourceforge.plantuml.tim.VariableManager;

        r22 := @parameter0: net.sourceforge.plantuml.json.JsonValue;

        r0 := @parameter1: java.lang.String;

        i9 := @parameter2: int;

        r1 := @parameter3: java.lang.StringBuilder;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i9 >= $i0 goto label16;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        if c1 != 46 goto label05;

        i9 = i9 + 1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

     label02:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i9 >= $i6 goto label04;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        $z3 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c7);

        if $z3 != 0 goto label03;

        goto label04;

     label03:
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        i9 = i9 + 1;

        goto label02;

     label04:
        $r19 = (net.sourceforge.plantuml.json.JsonObject) r22;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r22 = virtualinvoke $r19.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonValue get(java.lang.String)>($r20);

        goto label15;

     label05:
        if c1 != 91 goto label16;

        i10 = i9 + 1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i11 = 0;

     label06:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        if $c2 != 91 goto label07;

        i11 = i11 + 1;

     label07:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        if $c3 != 93 goto label09;

        if i11 != 0 goto label08;

        goto label10;

     label08:
        i11 = i11 + -1;

     label09:
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        i10 = i10 + 1;

        goto label06;

     label10:
        $r9 = r8.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.tim.TContext context>;

        $r10 = r8.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.tim.TMemory memory>;

        $r11 = r8.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.LineLocation location>;

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r13 = virtualinvoke $r9.<net.sourceforge.plantuml.tim.TContext: java.lang.String applyFunctionsAndVariables(net.sourceforge.plantuml.tim.TMemory,net.sourceforge.plantuml.LineLocation,java.lang.String)>($r10, $r11, $r12);

        $z1 = r22 instanceof net.sourceforge.plantuml.json.JsonArray;

        if $z1 == 0 goto label11;

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r13);

        $r17 = (net.sourceforge.plantuml.json.JsonArray) r22;

        r22 = virtualinvoke $r17.<net.sourceforge.plantuml.json.JsonArray: net.sourceforge.plantuml.json.JsonValue get(int)>(i5);

        goto label13;

     label11:
        $z2 = r22 instanceof net.sourceforge.plantuml.json.JsonObject;

        if $z2 == 0 goto label12;

        $r15 = (net.sourceforge.plantuml.json.JsonObject) r22;

        r22 = virtualinvoke $r15.<net.sourceforge.plantuml.json.JsonObject: net.sourceforge.plantuml.json.JsonValue get(java.lang.String)>(r13);

        goto label13;

     label12:
        $r14 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("Major parsing error");

        throw $r14;

     label13:
        if r22 != null goto label14;

        $r16 = staticinvoke <net.sourceforge.plantuml.tim.EaterException: net.sourceforge.plantuml.tim.EaterException unlocated(java.lang.String)>("Data parsing error");

        throw $r16;

     label14:
        i9 = i10 + 1;

     label15:
        goto label01;

     label16:
        if r22 == null goto label18;

        $z0 = virtualinvoke r22.<net.sourceforge.plantuml.json.JsonValue: boolean isString()>();

        if $z0 == 0 goto label17;

        $r4 = virtualinvoke r22.<net.sourceforge.plantuml.json.JsonValue: java.lang.String asString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label18;

     label17:
        $r2 = virtualinvoke r22.<net.sourceforge.plantuml.json.JsonValue: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label18:
        return i9;
    }

    public java.lang.String getVarnameAt(java.lang.String, int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        net.sourceforge.plantuml.tim.VariableManager r0;
        java.lang.String r1, r2, $r5;
        char $c6, $c8;
        boolean $z0, $z1, $z2;
        net.sourceforge.plantuml.tim.TMemory $r3;
        net.sourceforge.plantuml.tim.Trie $r4;

        r0 := @this: net.sourceforge.plantuml.tim.VariableManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $i7 = i0 - 1;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7);

        $z1 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscoreOrDigit(char)>($c8);

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <net.sourceforge.plantuml.tim.VariableManager: boolean justAfterBackslashN(java.lang.String,int)>(r1, i0);

        if $z2 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<net.sourceforge.plantuml.tim.VariableManager: net.sourceforge.plantuml.tim.TMemory memory>;

        $r4 = interfaceinvoke $r3.<net.sourceforge.plantuml.tim.TMemory: net.sourceforge.plantuml.tim.Trie variablesNames3()>();

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        r2 = interfaceinvoke $r4.<net.sourceforge.plantuml.tim.Trie: java.lang.String getLonguestMatchStartingIn(java.lang.String)>($r5);

        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i9 != 0 goto label2;

        return null;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 == $i3 goto label3;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = i0 + $i4;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i5);

        $z0 = staticinvoke <net.sourceforge.plantuml.tim.TLineType: boolean isLetterOrUnderscoreOrDigit(char)>($c6);

        if $z0 != 0 goto label4;

     label3:
        return r2;

     label4:
        return null;
    }

    public static boolean justAfterBackslashN(java.lang.String, int)
    {
        int i0, $i1, $i3;
        java.lang.String r0;
        char $c2, $c4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 1 goto label1;

        $i1 = i0 - 2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 92 goto label1;

        $i3 = i0 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 110 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
