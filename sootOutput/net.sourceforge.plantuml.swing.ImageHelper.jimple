public class net.sourceforge.plantuml.swing.ImageHelper extends java.lang.Object
{

    public void <init>()
    {
        net.sourceforge.plantuml.swing.ImageHelper r0;

        r0 := @this: net.sourceforge.plantuml.swing.ImageHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.image.BufferedImage getScaledInstance(java.awt.image.BufferedImage, java.awt.Dimension, java.awt.RenderingHints, boolean)
    {
        java.awt.Dimension r0;
        int i0, i1, $i2, i5, i6;
        java.awt.image.BufferedImage r1, r5, $r6;
        byte b3, $b4;
        boolean z0;
        java.awt.Graphics2D r3;
        java.awt.RenderingHints r4;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0 := @parameter1: java.awt.Dimension;

        r4 := @parameter2: java.awt.RenderingHints;

        z0 := @parameter3: boolean;

        i0 = r0.<java.awt.Dimension: int width>;

        i1 = r0.<java.awt.Dimension: int height>;

        $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>();

        if $i2 != 1 goto label1;

        $b4 = 1;

        goto label2;

     label1:
        $b4 = 2;

     label2:
        b3 = $b4;

        r5 = r1;

        if z0 == 0 goto label3;

        i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        goto label4;

     label3:
        i5 = i0;

        i6 = i1;

     label4:
        if z0 == 0 goto label5;

        if i5 <= i0 goto label5;

        i5 = i5 / 2;

        if i5 >= i0 goto label5;

        i5 = i0;

     label5:
        if z0 == 0 goto label6;

        if i6 <= i1 goto label6;

        i6 = i6 / 2;

        if i6 >= i1 goto label6;

        i6 = i1;

     label6:
        $r6 = new java.awt.image.BufferedImage;

        specialinvoke $r6.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i5, i6, b3);

        r3 = virtualinvoke $r6.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setRenderingHints(java.util.Map)>(r4);

        virtualinvoke r3.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>(r5, 0, 0, i5, i6, null);

        virtualinvoke r3.<java.awt.Graphics2D: void dispose()>();

        r5 = $r6;

        if i5 != i0 goto label4;

        if i6 != i1 goto label4;

        return $r6;
    }

    public static java.awt.image.BufferedImage toBufferedImage(java.awt.Image)
    {
        java.awt.Image r0;
        boolean $z0;
        java.awt.image.BufferedImage $r1, $r4;
        int $i0, $i1;
        java.awt.Graphics2D r3;

        r0 := @parameter0: java.awt.Image;

        $z0 = r0 instanceof java.awt.image.BufferedImage;

        if $z0 == 0 goto label1;

        $r4 = (java.awt.image.BufferedImage) r0;

        return $r4;

     label1:
        $r1 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i1 = virtualinvoke r0.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        r3 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke r3.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, null);

        virtualinvoke r3.<java.awt.Graphics2D: void dispose()>();

        return $r1;
    }

    public static java.awt.Dimension getScaledDimension(java.awt.Dimension, java.awt.Dimension)
    {
        java.awt.Dimension r0, r1, $r2;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;

        r0 := @parameter0: java.awt.Dimension;

        r1 := @parameter1: java.awt.Dimension;

        i0 = r0.<java.awt.Dimension: int width>;

        i1 = r0.<java.awt.Dimension: int height>;

        i2 = r1.<java.awt.Dimension: int width>;

        i3 = r1.<java.awt.Dimension: int height>;

        i6 = i0;

        i7 = i1;

        if i0 <= i2 goto label1;

        i6 = i2;

        $i5 = i2 * i1;

        i7 = $i5 / i0;

     label1:
        if i7 <= i3 goto label2;

        i7 = i3;

        $i4 = i3 * i0;

        i6 = $i4 / i1;

     label2:
        $r2 = new java.awt.Dimension;

        specialinvoke $r2.<java.awt.Dimension: void <init>(int,int)>(i6, i7);

        return $r2;
    }

    public static java.awt.Dimension getScaledDimensionWidthFit(java.awt.Dimension, java.awt.Dimension)
    {
        java.awt.Dimension r0, r1, $r2;
        int i0, i1, i2, i3, $i4, i5, i6;

        r0 := @parameter0: java.awt.Dimension;

        r1 := @parameter1: java.awt.Dimension;

        i0 = r0.<java.awt.Dimension: int width>;

        i1 = r0.<java.awt.Dimension: int height>;

        i2 = r1.<java.awt.Dimension: int width>;

        i3 = r1.<java.awt.Dimension: int height>;

        i5 = i0;

        i6 = i1;

        if i0 == i2 goto label1;

        i5 = i2;

        $i4 = i2 * i1;

        i6 = $i4 / i0;

     label1:
        $r2 = new java.awt.Dimension;

        specialinvoke $r2.<java.awt.Dimension: void <init>(int,int)>(i5, i6);

        return $r2;
    }

    public static java.awt.Dimension getScaledDimension(java.awt.Dimension, double)
    {
        java.awt.Dimension $r0, r1;
        double $d0, d1, $d2, $d3, $d4;
        int $i0, $i1;

        r1 := @parameter0: java.awt.Dimension;

        d1 := @parameter1: double;

        $r0 = new java.awt.Dimension;

        $d0 = virtualinvoke r1.<java.awt.Dimension: double getWidth()>();

        $d2 = $d0 * d1;

        $i0 = (int) $d2;

        $d3 = virtualinvoke r1.<java.awt.Dimension: double getHeight()>();

        $d4 = $d3 * d1;

        $i1 = (int) $d4;

        specialinvoke $r0.<java.awt.Dimension: void <init>(int,int)>($i0, $i1);

        return $r0;
    }
}
