public class ext.plantuml.com.ctreber.aclib.sort.QuickSort extends ext.plantuml.com.ctreber.aclib.sort.CTSort
{

    public void <init>()
    {
        ext.plantuml.com.ctreber.aclib.sort.QuickSort r0;

        r0 := @this: ext.plantuml.com.ctreber.aclib.sort.QuickSort;

        specialinvoke r0.<ext.plantuml.com.ctreber.aclib.sort.CTSort: void <init>()>();

        return;
    }

    public void sort(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r0;
        int $i0, $i1, $i2, $i3, $i4;
        ext.plantuml.com.ctreber.aclib.sort.QuickSort r1;
        java.util.Comparator r2;

        r1 := @this: ext.plantuml.com.ctreber.aclib.sort.QuickSort;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        if $i0 > 1 goto label1;

        return;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        specialinvoke r1.<ext.plantuml.com.ctreber.aclib.sort.QuickSort: void qsort(java.lang.Object[],java.util.Comparator,int,int)>(r0, r2, 0, $i2);

        $i3 = lengthof r0;

        $i4 = $i3 - 1;

        staticinvoke <ext.plantuml.com.ctreber.aclib.sort.QuickSort: void insertionSort(java.lang.Object[],java.util.Comparator,int,int)>(r0, r2, 0, $i4);

        return;
    }

    private void qsort(java.lang.Object[], java.util.Comparator, int, int)
    {
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i14;
        java.util.Comparator r0;
        java.lang.Object[] r1;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7, r8, $r9, $r11;
        ext.plantuml.com.ctreber.aclib.sort.QuickSort r10;

        r10 := @this: ext.plantuml.com.ctreber.aclib.sort.QuickSort;

        r1 := @parameter0: java.lang.Object[];

        r0 := @parameter1: java.util.Comparator;

        i2 := @parameter2: int;

        i1 := @parameter3: int;

        $i3 = i1 - i2;

        if $i3 <= 4 goto label9;

        $i4 = i1 + i2;

        i11 = $i4 / 2;

        $r3 = r1[i2];

        $r2 = r1[i11];

        $i5 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $i5 <= 0 goto label1;

        staticinvoke <ext.plantuml.com.ctreber.aclib.sort.QuickSort: void swap(java.lang.Object[],int,int)>(r1, i2, i11);

     label1:
        $r5 = r1[i2];

        $r4 = r1[i1];

        $i6 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $i6 <= 0 goto label2;

        staticinvoke <ext.plantuml.com.ctreber.aclib.sort.QuickSort: void swap(java.lang.Object[],int,int)>(r1, i2, i1);

     label2:
        $r7 = r1[i11];

        $r6 = r1[i1];

        $i7 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $i7 <= 0 goto label3;

        staticinvoke <ext.plantuml.com.ctreber.aclib.sort.QuickSort: void swap(java.lang.Object[],int,int)>(r1, i11, i1);

     label3:
        i12 = i1 - 1;

        staticinvoke <ext.plantuml.com.ctreber.aclib.sort.QuickSort: void swap(java.lang.Object[],int,int)>(r1, i11, i12);

        i13 = i2;

        r8 = r1[i12];

     label4:
        i13 = i13 + 1;

        $r11 = r1[i13];

        $i14 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r11, r8);

        if $i14 >= 0 goto label5;

        goto label4;

     label5:
        i12 = i12 + -1;

        $r9 = r1[i12];

        $i8 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, r8);

        if $i8 <= 0 goto label6;

        goto label5;

     label6:
        if i12 >= i13 goto label7;

        goto label8;

     label7:
        staticinvoke <ext.plantuml.com.ctreber.aclib.sort.QuickSort: void swap(java.lang.Object[],int,int)>(r1, i13, i12);

        goto label4;

     label8:
        $i9 = i1 - 1;

        staticinvoke <ext.plantuml.com.ctreber.aclib.sort.QuickSort: void swap(java.lang.Object[],int,int)>(r1, i13, $i9);

        specialinvoke r10.<ext.plantuml.com.ctreber.aclib.sort.QuickSort: void qsort(java.lang.Object[],java.util.Comparator,int,int)>(r1, r0, i2, i12);

        $i10 = i13 + 1;

        specialinvoke r10.<ext.plantuml.com.ctreber.aclib.sort.QuickSort: void qsort(java.lang.Object[],java.util.Comparator,int,int)>(r1, r0, $i10, i1);

     label9:
        return;
    }

    private static void swap(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = r0[i0];

        $r2 = r0[i1];

        r0[i0] = $r2;

        r0[i1] = r1;

        return;
    }

    private static void insertionSort(java.lang.Object[], java.util.Comparator, int, int)
    {
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object[] r0;
        java.lang.Object r1, $r3, $r4;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Comparator;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i5 = i0 + 1;

     label1:
        if i5 > i1 goto label4;

        r1 = r0[i5];

        i6 = i5;

     label2:
        if i6 <= i0 goto label3;

        $i2 = i6 - 1;

        $r3 = r0[$i2];

        $i3 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r1);

        if $i3 <= 0 goto label3;

        $i4 = i6 - 1;

        $r4 = r0[$i4];

        r0[i6] = $r4;

        i6 = i6 + -1;

        goto label2;

     label3:
        r0[i6] = r1;

        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }
}
