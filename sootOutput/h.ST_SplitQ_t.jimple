public final class h.ST_SplitQ_t extends smetana.core.UnsupportedStarStruct
{
    public final h.ST_Branch_t[] BranchBuf;
    public final h.ST_Rect_t CoverSplit;
    public int CoverSplitArea;
    public final h.ST_PartitionVars[] Partitions;

    public void <init>()
    {
        h.ST_SplitQ_t r0;
        h.ST_Branch_t[] $r1;
        h.ST_Branch_t $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66;
        h.ST_Rect_t $r67;
        h.ST_PartitionVars[] $r68;
        h.ST_PartitionVars $r69;

        r0 := @this: h.ST_SplitQ_t;

        specialinvoke r0.<smetana.core.UnsupportedStarStruct: void <init>()>();

        $r1 = newarray (h.ST_Branch_t)[65];

        $r2 = new h.ST_Branch_t;

        specialinvoke $r2.<h.ST_Branch_t: void <init>()>();

        $r1[0] = $r2;

        $r3 = new h.ST_Branch_t;

        specialinvoke $r3.<h.ST_Branch_t: void <init>()>();

        $r1[1] = $r3;

        $r4 = new h.ST_Branch_t;

        specialinvoke $r4.<h.ST_Branch_t: void <init>()>();

        $r1[2] = $r4;

        $r5 = new h.ST_Branch_t;

        specialinvoke $r5.<h.ST_Branch_t: void <init>()>();

        $r1[3] = $r5;

        $r6 = new h.ST_Branch_t;

        specialinvoke $r6.<h.ST_Branch_t: void <init>()>();

        $r1[4] = $r6;

        $r7 = new h.ST_Branch_t;

        specialinvoke $r7.<h.ST_Branch_t: void <init>()>();

        $r1[5] = $r7;

        $r8 = new h.ST_Branch_t;

        specialinvoke $r8.<h.ST_Branch_t: void <init>()>();

        $r1[6] = $r8;

        $r9 = new h.ST_Branch_t;

        specialinvoke $r9.<h.ST_Branch_t: void <init>()>();

        $r1[7] = $r9;

        $r10 = new h.ST_Branch_t;

        specialinvoke $r10.<h.ST_Branch_t: void <init>()>();

        $r1[8] = $r10;

        $r11 = new h.ST_Branch_t;

        specialinvoke $r11.<h.ST_Branch_t: void <init>()>();

        $r1[9] = $r11;

        $r12 = new h.ST_Branch_t;

        specialinvoke $r12.<h.ST_Branch_t: void <init>()>();

        $r1[10] = $r12;

        $r13 = new h.ST_Branch_t;

        specialinvoke $r13.<h.ST_Branch_t: void <init>()>();

        $r1[11] = $r13;

        $r14 = new h.ST_Branch_t;

        specialinvoke $r14.<h.ST_Branch_t: void <init>()>();

        $r1[12] = $r14;

        $r15 = new h.ST_Branch_t;

        specialinvoke $r15.<h.ST_Branch_t: void <init>()>();

        $r1[13] = $r15;

        $r16 = new h.ST_Branch_t;

        specialinvoke $r16.<h.ST_Branch_t: void <init>()>();

        $r1[14] = $r16;

        $r17 = new h.ST_Branch_t;

        specialinvoke $r17.<h.ST_Branch_t: void <init>()>();

        $r1[15] = $r17;

        $r18 = new h.ST_Branch_t;

        specialinvoke $r18.<h.ST_Branch_t: void <init>()>();

        $r1[16] = $r18;

        $r19 = new h.ST_Branch_t;

        specialinvoke $r19.<h.ST_Branch_t: void <init>()>();

        $r1[17] = $r19;

        $r20 = new h.ST_Branch_t;

        specialinvoke $r20.<h.ST_Branch_t: void <init>()>();

        $r1[18] = $r20;

        $r21 = new h.ST_Branch_t;

        specialinvoke $r21.<h.ST_Branch_t: void <init>()>();

        $r1[19] = $r21;

        $r22 = new h.ST_Branch_t;

        specialinvoke $r22.<h.ST_Branch_t: void <init>()>();

        $r1[20] = $r22;

        $r23 = new h.ST_Branch_t;

        specialinvoke $r23.<h.ST_Branch_t: void <init>()>();

        $r1[21] = $r23;

        $r24 = new h.ST_Branch_t;

        specialinvoke $r24.<h.ST_Branch_t: void <init>()>();

        $r1[22] = $r24;

        $r25 = new h.ST_Branch_t;

        specialinvoke $r25.<h.ST_Branch_t: void <init>()>();

        $r1[23] = $r25;

        $r26 = new h.ST_Branch_t;

        specialinvoke $r26.<h.ST_Branch_t: void <init>()>();

        $r1[24] = $r26;

        $r27 = new h.ST_Branch_t;

        specialinvoke $r27.<h.ST_Branch_t: void <init>()>();

        $r1[25] = $r27;

        $r28 = new h.ST_Branch_t;

        specialinvoke $r28.<h.ST_Branch_t: void <init>()>();

        $r1[26] = $r28;

        $r29 = new h.ST_Branch_t;

        specialinvoke $r29.<h.ST_Branch_t: void <init>()>();

        $r1[27] = $r29;

        $r30 = new h.ST_Branch_t;

        specialinvoke $r30.<h.ST_Branch_t: void <init>()>();

        $r1[28] = $r30;

        $r31 = new h.ST_Branch_t;

        specialinvoke $r31.<h.ST_Branch_t: void <init>()>();

        $r1[29] = $r31;

        $r32 = new h.ST_Branch_t;

        specialinvoke $r32.<h.ST_Branch_t: void <init>()>();

        $r1[30] = $r32;

        $r33 = new h.ST_Branch_t;

        specialinvoke $r33.<h.ST_Branch_t: void <init>()>();

        $r1[31] = $r33;

        $r34 = new h.ST_Branch_t;

        specialinvoke $r34.<h.ST_Branch_t: void <init>()>();

        $r1[32] = $r34;

        $r35 = new h.ST_Branch_t;

        specialinvoke $r35.<h.ST_Branch_t: void <init>()>();

        $r1[33] = $r35;

        $r36 = new h.ST_Branch_t;

        specialinvoke $r36.<h.ST_Branch_t: void <init>()>();

        $r1[34] = $r36;

        $r37 = new h.ST_Branch_t;

        specialinvoke $r37.<h.ST_Branch_t: void <init>()>();

        $r1[35] = $r37;

        $r38 = new h.ST_Branch_t;

        specialinvoke $r38.<h.ST_Branch_t: void <init>()>();

        $r1[36] = $r38;

        $r39 = new h.ST_Branch_t;

        specialinvoke $r39.<h.ST_Branch_t: void <init>()>();

        $r1[37] = $r39;

        $r40 = new h.ST_Branch_t;

        specialinvoke $r40.<h.ST_Branch_t: void <init>()>();

        $r1[38] = $r40;

        $r41 = new h.ST_Branch_t;

        specialinvoke $r41.<h.ST_Branch_t: void <init>()>();

        $r1[39] = $r41;

        $r42 = new h.ST_Branch_t;

        specialinvoke $r42.<h.ST_Branch_t: void <init>()>();

        $r1[40] = $r42;

        $r43 = new h.ST_Branch_t;

        specialinvoke $r43.<h.ST_Branch_t: void <init>()>();

        $r1[41] = $r43;

        $r44 = new h.ST_Branch_t;

        specialinvoke $r44.<h.ST_Branch_t: void <init>()>();

        $r1[42] = $r44;

        $r45 = new h.ST_Branch_t;

        specialinvoke $r45.<h.ST_Branch_t: void <init>()>();

        $r1[43] = $r45;

        $r46 = new h.ST_Branch_t;

        specialinvoke $r46.<h.ST_Branch_t: void <init>()>();

        $r1[44] = $r46;

        $r47 = new h.ST_Branch_t;

        specialinvoke $r47.<h.ST_Branch_t: void <init>()>();

        $r1[45] = $r47;

        $r48 = new h.ST_Branch_t;

        specialinvoke $r48.<h.ST_Branch_t: void <init>()>();

        $r1[46] = $r48;

        $r49 = new h.ST_Branch_t;

        specialinvoke $r49.<h.ST_Branch_t: void <init>()>();

        $r1[47] = $r49;

        $r50 = new h.ST_Branch_t;

        specialinvoke $r50.<h.ST_Branch_t: void <init>()>();

        $r1[48] = $r50;

        $r51 = new h.ST_Branch_t;

        specialinvoke $r51.<h.ST_Branch_t: void <init>()>();

        $r1[49] = $r51;

        $r52 = new h.ST_Branch_t;

        specialinvoke $r52.<h.ST_Branch_t: void <init>()>();

        $r1[50] = $r52;

        $r53 = new h.ST_Branch_t;

        specialinvoke $r53.<h.ST_Branch_t: void <init>()>();

        $r1[51] = $r53;

        $r54 = new h.ST_Branch_t;

        specialinvoke $r54.<h.ST_Branch_t: void <init>()>();

        $r1[52] = $r54;

        $r55 = new h.ST_Branch_t;

        specialinvoke $r55.<h.ST_Branch_t: void <init>()>();

        $r1[53] = $r55;

        $r56 = new h.ST_Branch_t;

        specialinvoke $r56.<h.ST_Branch_t: void <init>()>();

        $r1[54] = $r56;

        $r57 = new h.ST_Branch_t;

        specialinvoke $r57.<h.ST_Branch_t: void <init>()>();

        $r1[55] = $r57;

        $r58 = new h.ST_Branch_t;

        specialinvoke $r58.<h.ST_Branch_t: void <init>()>();

        $r1[56] = $r58;

        $r59 = new h.ST_Branch_t;

        specialinvoke $r59.<h.ST_Branch_t: void <init>()>();

        $r1[57] = $r59;

        $r60 = new h.ST_Branch_t;

        specialinvoke $r60.<h.ST_Branch_t: void <init>()>();

        $r1[58] = $r60;

        $r61 = new h.ST_Branch_t;

        specialinvoke $r61.<h.ST_Branch_t: void <init>()>();

        $r1[59] = $r61;

        $r62 = new h.ST_Branch_t;

        specialinvoke $r62.<h.ST_Branch_t: void <init>()>();

        $r1[60] = $r62;

        $r63 = new h.ST_Branch_t;

        specialinvoke $r63.<h.ST_Branch_t: void <init>()>();

        $r1[61] = $r63;

        $r64 = new h.ST_Branch_t;

        specialinvoke $r64.<h.ST_Branch_t: void <init>()>();

        $r1[62] = $r64;

        $r65 = new h.ST_Branch_t;

        specialinvoke $r65.<h.ST_Branch_t: void <init>()>();

        $r1[63] = $r65;

        $r66 = new h.ST_Branch_t;

        specialinvoke $r66.<h.ST_Branch_t: void <init>()>();

        $r1[64] = $r66;

        r0.<h.ST_SplitQ_t: h.ST_Branch_t[] BranchBuf> = $r1;

        $r67 = new h.ST_Rect_t;

        specialinvoke $r67.<h.ST_Rect_t: void <init>()>();

        r0.<h.ST_SplitQ_t: h.ST_Rect_t CoverSplit> = $r67;

        $r68 = newarray (h.ST_PartitionVars)[1];

        $r69 = new h.ST_PartitionVars;

        specialinvoke $r69.<h.ST_PartitionVars: void <init>()>();

        $r68[0] = $r69;

        r0.<h.ST_SplitQ_t: h.ST_PartitionVars[] Partitions> = $r68;

        return;
    }

    public h.ST_Rect_t castTo(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.UnsupportedOperationException $r1;
        h.ST_SplitQ_t r2;
        h.ST_Rect_t $r3;

        r2 := @this: h.ST_SplitQ_t;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Lh/ST_Rect_t;" goto label1;

        $r3 = r2.<h.ST_SplitQ_t: h.ST_Rect_t CoverSplit>;

        return $r3;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public volatile smetana.core.__ptr__ castTo(java.lang.Class)
    {
        h.ST_SplitQ_t r0;
        java.lang.Class r1;
        h.ST_Rect_t $r2;

        r0 := @this: h.ST_SplitQ_t;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<h.ST_SplitQ_t: h.ST_Rect_t castTo(java.lang.Class)>(r1);

        return $r2;
    }
}
